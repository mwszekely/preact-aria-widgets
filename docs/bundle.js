(function () {
    'use strict';

    var n,l$1,u$1,t$1,r$2,o$2,f$1,e$1,c$1={},s$1=[],a$1=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function h$1(n,l){for(var u in l)n[u]=l[u];return n}function v$1(n){var l=n.parentNode;l&&l.removeChild(n);}function y$1(l,u,i){var t,r,o,f={};for(o in u)"key"==o?t=u[o]:"ref"==o?r=u[o]:f[o]=u[o];if(arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):i),"function"==typeof l&&null!=l.defaultProps)for(o in l.defaultProps)void 0===f[o]&&(f[o]=l.defaultProps[o]);return p$1(l,f,t,r,null)}function p$1(n,i,t,r,o){var f={type:n,props:i,key:t,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==o?++u$1:o};return null==o&&null!=l$1.vnode&&l$1.vnode(f),f}function _$2(n){return n.children}function k$2(n,l,u,i,t){var r;for(r in u)"children"===r||"key"===r||r in l||g$2(n,r,null,u[r],i);for(r in l)t&&"function"!=typeof l[r]||"children"===r||"key"===r||"value"===r||"checked"===r||u[r]===l[r]||g$2(n,r,l[r],u[r],i);}function b$1(n,l,u){"-"===l[0]?n.setProperty(l,null==u?"":u):n[l]=null==u?"":"number"!=typeof u||a$1.test(l)?u:u+"px";}function g$2(n,l,u,i,t){var r;n:if("style"===l)if("string"==typeof u)n.style.cssText=u;else {if("string"==typeof i&&(n.style.cssText=i=""),i)for(l in i)u&&l in u||b$1(n.style,l,"");if(u)for(l in u)i&&u[l]===i[l]||b$1(n.style,l,u[l]);}else if("o"===l[0]&&"n"===l[1])r=l!==(l=l.replace(/Capture$/,"")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+r]=u,u?i||n.addEventListener(l,r?w$2:m$1,r):n.removeEventListener(l,r?w$2:m$1,r);else if("dangerouslySetInnerHTML"!==l){if(t)l=l.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==l&&"height"!==l&&"href"!==l&&"list"!==l&&"form"!==l&&"tabIndex"!==l&&"download"!==l&&l in n)try{n[l]=null==u?"":u;break n}catch(n){}"function"==typeof u||(null==u||!1===u&&-1==l.indexOf("-")?n.removeAttribute(l):n.setAttribute(l,u));}}function m$1(n){t$1=!0;try{return this.l[n.type+!1](l$1.event?l$1.event(n):n)}finally{t$1=!1;}}function w$2(n){t$1=!0;try{return this.l[n.type+!0](l$1.event?l$1.event(n):n)}finally{t$1=!1;}}function x$1(n,l){this.props=n,this.context=l;}function A$1(n,l){if(null==l)return n.__?A$1(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return "function"==typeof n.type?A$1(n):null}function P$1(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return P$1(n)}}function C$1(n){t$1?setTimeout(n):f$1(n);}function T$2(n){(!n.__d&&(n.__d=!0)&&r$2.push(n)&&!$$1.__r++||o$2!==l$1.debounceRendering)&&((o$2=l$1.debounceRendering)||C$1)($$1);}function $$1(){var n,l,u,i,t,o,f,e;for(r$2.sort(function(n,l){return n.__v.__b-l.__v.__b});n=r$2.shift();)n.__d&&(l=r$2.length,i=void 0,t=void 0,f=(o=(u=n).__v).__e,(e=u.__P)&&(i=[],(t=h$1({},o)).__v=o.__v+1,M(e,o,t,u.__n,void 0!==e.ownerSVGElement,null!=o.__h?[f]:null,i,null==f?A$1(o):f,o.__h),N$1(i,o),o.__e!=f&&P$1(o)),r$2.length>l&&r$2.sort(function(n,l){return n.__v.__b-l.__v.__b}));$$1.__r=0;}function H$1(n,l,u,i,t,r,o,f,e,a){var h,v,y,d,k,b,g,m=i&&i.__k||s$1,w=m.length;for(u.__k=[],h=0;h<l.length;h++)if(null!=(d=u.__k[h]=null==(d=l[h])||"boolean"==typeof d?null:"string"==typeof d||"number"==typeof d||"bigint"==typeof d?p$1(null,d,null,null,d):Array.isArray(d)?p$1(_$2,{children:d},null,null,null):d.__b>0?p$1(d.type,d.props,d.key,d.ref?d.ref:null,d.__v):d)){if(d.__=u,d.__b=u.__b+1,null===(y=m[h])||y&&d.key==y.key&&d.type===y.type)m[h]=void 0;else for(v=0;v<w;v++){if((y=m[v])&&d.key==y.key&&d.type===y.type){m[v]=void 0;break}y=null;}M(n,d,y=y||c$1,t,r,o,f,e,a),k=d.__e,(v=d.ref)&&y.ref!=v&&(g||(g=[]),y.ref&&g.push(y.ref,null,d),g.push(v,d.__c||k,d)),null!=k?(null==b&&(b=k),"function"==typeof d.type&&d.__k===y.__k?d.__d=e=I$1(d,e,n):e=z$2(n,d,y,m,k,e),"function"==typeof u.type&&(u.__d=e)):e&&y.__e==e&&e.parentNode!=n&&(e=A$1(y));}for(u.__e=b,h=w;h--;)null!=m[h]&&("function"==typeof u.type&&null!=m[h].__e&&m[h].__e==u.__d&&(u.__d=L$1(i).nextSibling),q$1(m[h],m[h]));if(g)for(h=0;h<g.length;h++)S(g[h],g[++h],g[++h]);}function I$1(n,l,u){for(var i,t=n.__k,r=0;t&&r<t.length;r++)(i=t[r])&&(i.__=n,l="function"==typeof i.type?I$1(i,l,u):z$2(u,i,i,t,i.__e,l));return l}function j$2(n,l){return l=l||[],null==n||"boolean"==typeof n||(Array.isArray(n)?n.some(function(n){j$2(n,l);}):l.push(n)),l}function z$2(n,l,u,i,t,r){var o,f,e;if(void 0!==l.__d)o=l.__d,l.__d=void 0;else if(null==u||t!=r||null==t.parentNode)n:if(null==r||r.parentNode!==n)n.appendChild(t),o=null;else {for(f=r,e=0;(f=f.nextSibling)&&e<i.length;e+=1)if(f==t)break n;n.insertBefore(t,r),o=r;}return void 0!==o?o:t.nextSibling}function L$1(n){var l,u,i;if(null==n.type||"string"==typeof n.type)return n.__e;if(n.__k)for(l=n.__k.length-1;l>=0;l--)if((u=n.__k[l])&&(i=L$1(u)))return i;return null}function M(n,u,i,t,r,o,f,e,c){var s,a,v,y,p,d,k,b,g,m,w,A,P,C,T,$=u.type;if(void 0!==u.constructor)return null;null!=i.__h&&(c=i.__h,e=u.__e=i.__e,u.__h=null,o=[e]),(s=l$1.__b)&&s(u);try{n:if("function"==typeof $){if(b=u.props,g=(s=$.contextType)&&t[s.__c],m=s?g?g.props.value:s.__:t,i.__c?k=(a=u.__c=i.__c).__=a.__E:("prototype"in $&&$.prototype.render?u.__c=a=new $(b,m):(u.__c=a=new x$1(b,m),a.constructor=$,a.render=B$2),g&&g.sub(a),a.props=b,a.state||(a.state={}),a.context=m,a.__n=t,v=a.__d=!0,a.__h=[],a._sb=[]),null==a.__s&&(a.__s=a.state),null!=$.getDerivedStateFromProps&&(a.__s==a.state&&(a.__s=h$1({},a.__s)),h$1(a.__s,$.getDerivedStateFromProps(b,a.__s))),y=a.props,p=a.state,a.__v=u,v)null==$.getDerivedStateFromProps&&null!=a.componentWillMount&&a.componentWillMount(),null!=a.componentDidMount&&a.__h.push(a.componentDidMount);else {if(null==$.getDerivedStateFromProps&&b!==y&&null!=a.componentWillReceiveProps&&a.componentWillReceiveProps(b,m),!a.__e&&null!=a.shouldComponentUpdate&&!1===a.shouldComponentUpdate(b,a.__s,m)||u.__v===i.__v){for(u.__v!==i.__v&&(a.props=b,a.state=a.__s,a.__d=!1),u.__e=i.__e,u.__k=i.__k,u.__k.forEach(function(n){n&&(n.__=u);}),w=0;w<a._sb.length;w++)a.__h.push(a._sb[w]);a._sb=[],a.__h.length&&f.push(a);break n}null!=a.componentWillUpdate&&a.componentWillUpdate(b,a.__s,m),null!=a.componentDidUpdate&&a.__h.push(function(){a.componentDidUpdate(y,p,d);});}if(a.context=m,a.props=b,a.__P=n,A=l$1.__r,P=0,"prototype"in $&&$.prototype.render){for(a.state=a.__s,a.__d=!1,A&&A(u),s=a.render(a.props,a.state,a.context),C=0;C<a._sb.length;C++)a.__h.push(a._sb[C]);a._sb=[];}else do{a.__d=!1,A&&A(u),s=a.render(a.props,a.state,a.context),a.state=a.__s;}while(a.__d&&++P<25);a.state=a.__s,null!=a.getChildContext&&(t=h$1(h$1({},t),a.getChildContext())),v||null==a.getSnapshotBeforeUpdate||(d=a.getSnapshotBeforeUpdate(y,p)),T=null!=s&&s.type===_$2&&null==s.key?s.props.children:s,H$1(n,Array.isArray(T)?T:[T],u,i,t,r,o,f,e,c),a.base=u.__e,u.__h=null,a.__h.length&&f.push(a),k&&(a.__E=a.__=null),a.__e=!1;}else null==o&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=O(i.__e,u,i,t,r,o,f,c);(s=l$1.diffed)&&s(u);}catch(n){u.__v=null,(c||null!=o)&&(u.__e=e,u.__h=!!c,o[o.indexOf(e)]=null),l$1.__e(n,u,i);}}function N$1(n,u){l$1.__c&&l$1.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u);});}catch(n){l$1.__e(n,u.__v);}});}function O(l,u,i,t,r,o,f,e){var s,a,h,y=i.props,p=u.props,d=u.type,_=0;if("svg"===d&&(r=!0),null!=o)for(;_<o.length;_++)if((s=o[_])&&"setAttribute"in s==!!d&&(d?s.localName===d:3===s.nodeType)){l=s,o[_]=null;break}if(null==l){if(null===d)return document.createTextNode(p);l=r?document.createElementNS("http://www.w3.org/2000/svg",d):document.createElement(d,p.is&&p),o=null,e=!1;}if(null===d)y===p||e&&l.data===p||(l.data=p);else {if(o=o&&n.call(l.childNodes),a=(y=i.props||c$1).dangerouslySetInnerHTML,h=p.dangerouslySetInnerHTML,!e){if(null!=o)for(y={},_=0;_<l.attributes.length;_++)y[l.attributes[_].name]=l.attributes[_].value;(h||a)&&(h&&(a&&h.__html==a.__html||h.__html===l.innerHTML)||(l.innerHTML=h&&h.__html||""));}if(k$2(l,p,y,r,e),h)u.__k=[];else if(_=u.props.children,H$1(l,Array.isArray(_)?_:[_],u,i,t,r&&"foreignObject"!==d,o,f,o?o[0]:i.__k&&A$1(i,0),e),null!=o)for(_=o.length;_--;)null!=o[_]&&v$1(o[_]);e||("value"in p&&void 0!==(_=p.value)&&(_!==l.value||"progress"===d&&!_||"option"===d&&_!==y.value)&&g$2(l,"value",_,y.value,!1),"checked"in p&&void 0!==(_=p.checked)&&_!==l.checked&&g$2(l,"checked",_,y.checked,!1));}return l}function S(n,u,i){try{"function"==typeof n?n(u):n.current=u;}catch(n){l$1.__e(n,i);}}function q$1(n,u,i){var t,r;if(l$1.unmount&&l$1.unmount(n),(t=n.ref)&&(t.current&&t.current!==n.__e||S(t,null,u)),null!=(t=n.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount();}catch(n){l$1.__e(n,u);}t.base=t.__P=null,n.__c=void 0;}if(t=n.__k)for(r=0;r<t.length;r++)t[r]&&q$1(t[r],u,i||"function"!=typeof n.type);i||null==n.__e||v$1(n.__e),n.__=n.__e=n.__d=void 0;}function B$2(n,l,u){return this.constructor(n,u)}function D$1(u,i,t){var r,o,f;l$1.__&&l$1.__(u,i),o=(r="function"==typeof t)?null:t&&t.__k||i.__k,f=[],M(i,u=(!r&&t||i).__k=y$1(_$2,null,[u]),o||c$1,c$1,void 0!==i.ownerSVGElement,!r&&t?[t]:o?null:i.firstChild?n.call(i.childNodes):null,f,!r&&t?t:o?o.__e:i.firstChild,r),N$1(f,u);}function F$2(l,u,i){var t,r,o,f=h$1({},l.props);for(o in u)"key"==o?t=u[o]:"ref"==o?r=u[o]:f[o]=u[o];return arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):i),p$1(l.type,f,t||l.key,r||l.ref,null)}function G$1(n,l){var u={__c:l="__cC"+e$1++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,i;return this.getChildContext||(u=[],(i={})[l]=this,this.getChildContext=function(){return i},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(function(n){n.__e=!0,T$2(n);});},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n);};}),n.children}};return u.Provider.__=u.Consumer.contextType=u}n=s$1.slice,l$1={__e:function(n,l,u,i){for(var t,r,o;l=l.__;)if((t=l.__c)&&!t.__)try{if((r=t.constructor)&&null!=r.getDerivedStateFromError&&(t.setState(r.getDerivedStateFromError(n)),o=t.__d),null!=t.componentDidCatch&&(t.componentDidCatch(n,i||{}),o=t.__d),o)return t.__E=t}catch(l){n=l;}throw n}},u$1=0,t$1=!1,x$1.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=h$1({},this.state),"function"==typeof n&&(n=n(h$1({},u),this.props)),n&&h$1(u,n),null!=n&&this.__v&&(l&&this._sb.push(l),T$2(this));},x$1.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),T$2(this));},x$1.prototype.render=_$2,r$2=[],f$1="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,$$1.__r=0,e$1=0;

    var _$1=0;function o$1(o,e,n,t,f,l){var s,u,a={};for(u in e)"ref"==u?s=e[u]:a[u]=e[u];var i={type:o,props:a,key:n,ref:s,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--_$1,__source:f,__self:l};if("function"==typeof o&&(s=o.defaultProps))for(u in s)void 0===a[u]&&(a[u]=s[u]);return l$1.vnode&&l$1.vnode(i),i}

    var t,r$1,u,i,o=0,f=[],c=[],e=l$1.__b,a=l$1.__r,v=l$1.diffed,l=l$1.__c,m=l$1.unmount;function d(t,u){l$1.__h&&l$1.__h(r$1,t,o||u),o=0;var i=r$1.__H||(r$1.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({__V:c}),i.__[t]}function p(n){return o=1,y(B$1,n)}function y(n,u,i){var o=d(t++,2);if(o.t=n,!o.__c&&(o.__=[i?i(u):B$1(void 0,u),function(n){var t=o.__N?o.__N[0]:o.__[0],r=o.t(t,n);t!==r&&(o.__N=[r,o.__[1]],o.__c.setState({}));}],o.__c=r$1,!r$1.u)){r$1.u=!0;var f=r$1.shouldComponentUpdate;r$1.shouldComponentUpdate=function(n,t,r){if(!o.__c.__H)return !0;var u=o.__c.__H.__.filter(function(n){return n.__c});if(u.every(function(n){return !n.__N}))return !f||f.call(this,n,t,r);var i=!1;return u.forEach(function(n){if(n.__N){var t=n.__[0];n.__=n.__N,n.__N=void 0,t!==n.__[0]&&(i=!0);}}),!(!i&&o.__c.props===n)&&(!f||f.call(this,n,t,r))};}return o.__N||o.__}function h(u,i){var o=d(t++,3);!l$1.__s&&z$1(o.__H,i)&&(o.__=u,o.i=i,r$1.__H.__h.push(o));}function s(u,i){var o=d(t++,4);!l$1.__s&&z$1(o.__H,i)&&(o.__=u,o.i=i,r$1.__h.push(o));}function _(n){return o=5,F$1(function(){return {current:n}},[])}function A(n,t,r){o=6,s(function(){return "function"==typeof n?(n(t()),function(){return n(null)}):n?(n.current=t(),function(){return n.current=null}):void 0},null==r?r:r.concat(n));}function F$1(n,r){var u=d(t++,7);return z$1(u.__H,r)?(u.__V=n(),u.i=r,u.__h=n,u.__V):u.__}function T$1(n,t){return o=8,F$1(function(){return n},t)}function q(n){var u=r$1.context[n.__c],i=d(t++,9);return i.c=n,u?(null==i.__&&(i.__=!0,u.sub(r$1)),u.props.value):n.__}function V$1(){var n=d(t++,11);if(!n.__){for(var u=r$1.__v;null!==u&&!u.__m&&null!==u.__;)u=u.__;var i=u.__m||(u.__m=[0,0]);n.__="P"+i[0]+"-"+i[1]++;}return n.__}function b(){for(var t;t=f.shift();)if(t.__P&&t.__H)try{t.__H.__h.forEach(k$1),t.__H.__h.forEach(w$1),t.__H.__h=[];}catch(r){t.__H.__h=[],l$1.__e(r,t.__v);}}l$1.__b=function(n){r$1=null,e&&e(n);},l$1.__r=function(n){a&&a(n),t=0;var i=(r$1=n.__c).__H;i&&(u===r$1?(i.__h=[],r$1.__h=[],i.__.forEach(function(n){n.__N&&(n.__=n.__N),n.__V=c,n.__N=n.i=void 0;})):(i.__h.forEach(k$1),i.__h.forEach(w$1),i.__h=[])),u=r$1;},l$1.diffed=function(t){v&&v(t);var o=t.__c;o&&o.__H&&(o.__H.__h.length&&(1!==f.push(o)&&i===l$1.requestAnimationFrame||((i=l$1.requestAnimationFrame)||j$1)(b)),o.__H.__.forEach(function(n){n.i&&(n.__H=n.i),n.__V!==c&&(n.__=n.__V),n.i=void 0,n.__V=c;})),u=r$1=null;},l$1.__c=function(t,r){r.some(function(t){try{t.__h.forEach(k$1),t.__h=t.__h.filter(function(n){return !n.__||w$1(n)});}catch(u){r.some(function(n){n.__h&&(n.__h=[]);}),r=[],l$1.__e(u,t.__v);}}),l&&l(t,r);},l$1.unmount=function(t){m&&m(t);var r,u=t.__c;u&&u.__H&&(u.__H.__.forEach(function(n){try{k$1(n);}catch(n){r=n;}}),u.__H=void 0,r&&l$1.__e(r,u.__v));};var g$1="function"==typeof requestAnimationFrame;function j$1(n){var t,r=function(){clearTimeout(u),g$1&&cancelAnimationFrame(t),setTimeout(n);},u=setTimeout(r,100);g$1&&(t=requestAnimationFrame(r));}function k$1(n){var t=r$1,u=n.__c;"function"==typeof u&&(n.__c=void 0,u()),r$1=t;}function w$1(n){var t=r$1;n.__c=n.__(),r$1=t;}function z$1(n,t){return !n||n.length!==t.length||t.some(function(t,r){return t!==n[r]})}function B$1(n,t){return "function"==typeof t?t(n):t}

    function g(n,t){for(var e in t)n[e]=t[e];return n}function C(n,t){for(var e in n)if("__source"!==e&&!(e in t))return !0;for(var r in t)if("__source"!==r&&n[r]!==t[r])return !0;return !1}function w(n){this.props=n;}function R(n,e){function r(n){var t=this.props.ref,r=t==n.ref;return !r&&t&&(t.call?t(null):t.current=null),e?!e(this.props,n)||!r:C(this.props,n)}function u(e){return this.shouldComponentUpdate=r,y$1(n,e)}return u.displayName="Memo("+(n.displayName||n.name)+")",u.prototype.isReactComponent=!0,u.__f=!0,u}(w.prototype=new x$1).isPureReactComponent=!0,w.prototype.shouldComponentUpdate=function(n,t){return C(this.props,n)||C(this.state,t)};var x=l$1.__b;l$1.__b=function(n){n.type&&n.type.__f&&n.ref&&(n.props.ref=n.ref,n.ref=null),x&&x(n);};var N="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function k(n){function t(t){var e=g({},t);return delete e.ref,n(e,t.ref||null)}return t.$$typeof=N,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(n.displayName||n.name)+")",t}var T=l$1.__e;l$1.__e=function(n,t,e,r){if(n.then)for(var u,o=t;o=o.__;)if((u=o.__c)&&u.__c)return null==t.__e&&(t.__e=e.__e,t.__k=e.__k),u.__c(n,t);T(n,t,e,r);};var I=l$1.unmount;function L(n,t,e){return n&&(n.__c&&n.__c.__H&&(n.__c.__H.__.forEach(function(n){"function"==typeof n.__c&&n.__c();}),n.__c.__H=null),null!=(n=g({},n)).__c&&(n.__c.__P===e&&(n.__c.__P=t),n.__c=null),n.__k=n.__k&&n.__k.map(function(n){return L(n,t,e)})),n}function U(n,t,e){return n&&(n.__v=null,n.__k=n.__k&&n.__k.map(function(n){return U(n,t,e)}),n.__c&&n.__c.__P===t&&(n.__e&&e.insertBefore(n.__e,n.__d),n.__c.__e=!0,n.__c.__P=e)),n}function D(){this.__u=0,this.t=null,this.__b=null;}function F(n){var t=n.__.__c;return t&&t.__a&&t.__a(n)}function V(){this.u=null,this.o=null;}l$1.unmount=function(n){var t=n.__c;t&&t.__R&&t.__R(),t&&!0===n.__h&&(n.type=null),I&&I(n);},(D.prototype=new x$1).__c=function(n,t){var e=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(e);var u=F(r.__v),o=!1,i=function(){o||(o=!0,e.__R=null,u?u(l):l());};e.__R=i;var l=function(){if(!--r.__u){if(r.state.__a){var n=r.state.__a;r.__v.__k[0]=U(n,n.__c.__P,n.__c.__O);}var t;for(r.setState({__a:r.__b=null});t=r.t.pop();)t.forceUpdate();}},c=!0===t.__h;r.__u++||c||r.setState({__a:r.__b=r.__v.__k[0]}),n.then(i,i);},D.prototype.componentWillUnmount=function(){this.t=[];},D.prototype.render=function(n,e){if(this.__b){if(this.__v.__k){var r=document.createElement("div"),o=this.__v.__k[0].__c;this.__v.__k[0]=L(this.__b,r,o.__O=o.__P);}this.__b=null;}var i=e.__a&&y$1(_$2,null,n.fallback);return i&&(i.__h=null),[y$1(_$2,null,e.__a?null:n.children),i]};var W=function(n,t,e){if(++e[1]===e[0]&&n.o.delete(t),n.props.revealOrder&&("t"!==n.props.revealOrder[0]||!n.o.size))for(e=n.u;e;){for(;e.length>3;)e.pop()();if(e[1]<e[0])break;n.u=e=e[2];}};function P(n){return this.getChildContext=function(){return n.context},n.children}function $(n){var e=this,r=n.i;e.componentWillUnmount=function(){D$1(null,e.l),e.l=null,e.i=null;},e.i&&e.i!==r&&e.componentWillUnmount(),n.__v?(e.l||(e.i=r,e.l={nodeType:1,parentNode:r,childNodes:[],appendChild:function(n){this.childNodes.push(n),e.i.appendChild(n);},insertBefore:function(n,t){this.childNodes.push(n),e.i.appendChild(n);},removeChild:function(n){this.childNodes.splice(this.childNodes.indexOf(n)>>>1,1),e.i.removeChild(n);}}),D$1(y$1(P,{context:e.context},n.__v),e.l)):e.l&&e.componentWillUnmount();}function j(n,e){var r=y$1($,{__v:n,i:e});return r.containerInfo=e,r}(V.prototype=new x$1).__a=function(n){var t=this,e=F(t.__v),r=t.o.get(n);return r[0]++,function(u){var o=function(){t.props.revealOrder?(r.push(u),W(t,n,r)):u();};e?e(o):o();}},V.prototype.render=function(n){this.u=null,this.o=new Map;var t=j$2(n.children);n.revealOrder&&"b"===n.revealOrder[0]&&t.reverse();for(var e=t.length;e--;)this.o.set(t[e],this.u=[1,0,this.u]);return n.children},V.prototype.componentDidUpdate=V.prototype.componentDidMount=function(){var n=this;this.o.forEach(function(t,e){W(n,e,t);});};var z="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,B=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,H="undefined"!=typeof document,Z=function(n){return ("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(n)};x$1.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach(function(t){Object.defineProperty(x$1.prototype,t,{configurable:!0,get:function(){return this["UNSAFE_"+t]},set:function(n){Object.defineProperty(this,t,{configurable:!0,writable:!0,value:n});}});});var G=l$1.event;function J(){}function K(){return this.cancelBubble}function Q(){return this.defaultPrevented}l$1.event=function(n){return G&&(n=G(n)),n.persist=J,n.isPropagationStopped=K,n.isDefaultPrevented=Q,n.nativeEvent=n};var nn={configurable:!0,get:function(){return this.class}},tn=l$1.vnode;l$1.vnode=function(n){var t=n.type,e=n.props,u=e;if("string"==typeof t){var o=-1===t.indexOf("-");for(var i in u={},e){var l=e[i];H&&"children"===i&&"noscript"===t||"value"===i&&"defaultValue"in e&&null==l||("defaultValue"===i&&"value"in e&&null==e.value?i="value":"download"===i&&!0===l?l="":/ondoubleclick/i.test(i)?i="ondblclick":/^onchange(textarea|input)/i.test(i+t)&&!Z(e.type)?i="oninput":/^onfocus$/i.test(i)?i="onfocusin":/^onblur$/i.test(i)?i="onfocusout":/^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(i)?i=i.toLowerCase():o&&B.test(i)?i=i.replace(/[A-Z0-9]/g,"-$&").toLowerCase():null===l&&(l=void 0),/^oninput$/i.test(i)&&(i=i.toLowerCase(),u[i]&&(i="oninputCapture")),u[i]=l);}"select"==t&&u.multiple&&Array.isArray(u.value)&&(u.value=j$2(e.children).forEach(function(n){n.props.selected=-1!=u.value.indexOf(n.props.value);})),"select"==t&&null!=u.defaultValue&&(u.value=j$2(e.children).forEach(function(n){n.props.selected=u.multiple?-1!=u.defaultValue.indexOf(n.props.value):u.defaultValue==n.props.value;})),n.props=u,e.class!=e.className&&(nn.enumerable="className"in e,null!=e.className&&(u.class=e.className),Object.defineProperty(u,"className",nn));}n.$$typeof=z,tn&&tn(n);};var en=l$1.__r;l$1.__r=function(n){en&&en(n),n.__c;};

    const EventDetail = Symbol("event-detail");
    function enhanceEvent(e, detail) {
        const event = e;
        event[EventDetail] = detail;
        return event;
    }
    const alreadyWarned = new Set();
    function overwriteWithWarning(componentName, props, propName, newValue) {
        //const key = `${componentName};${propName}`;
        const oldValue = props[propName];
        if (oldValue != null) {
            if (!alreadyWarned.has(String(propName))) {
                alreadyWarned.add(String(propName));
                console.warn(`The ${String(propName)} attribute on ${componentName} was given a value of ${oldValue} but is being overwritten to ${newValue} for conformance. Consider removing it before passing those props to ${componentName}.`);
            }
        }
        props[propName] = newValue;
    }
    let debug = false;
    function setDebugLogging(logging) {
        debug = logging;
    }
    function debugLog(who, ...args) {
        if (debug)
            console.debug(who + ":", ...args);
    }
    function noop$1() { return; }
    // (These do not need to be unique)
    const Prefices = {
        accordionSectionHeaderButton: "ashb-",
        accordionSectionBody: "asb-",
        checkboxLikeInput: "cbli-",
        checkboxLikeLabel: "cbll-",
        dialog: "mdl-",
        dialogTitle: "mdlt-",
        drawer: "mdw-",
        drawerTitle: "mdwt-",
        gridlist: "gl-",
        gridlistLabel: "gll-",
        listbox: "lb-",
        listboxLabel: "lbl-",
        menu: "menu-",
        progressIndicator: "pi-",
        progressLabel: "pl-",
        radioGroup: "rg-",
        radioGroupLabel: "rgl-",
        radio: "rb-",
        radioLabel: "rbl-",
        sliderThumb: "st-",
        table: "tb-",
        tableLabel: "tbl-",
        tablist: "tl-",
        tablistLabel: "tll-",
        tooltip: "tt-",
        toolbar: "tlb-",
        toolbarLabel: "tlbl-"
    };

    const HeadingLevelContext = G$1(0);
    const Heading = R(function Heading({ children, heading, tag, ...props }) {
        const headingLevelBeforeUs = q(HeadingLevelContext);
        const newHeadingLevel = headingLevelBeforeUs + 1;
        if (tag == null) {
            if (newHeadingLevel <= 6) {
                tag = `h${newHeadingLevel}`;
            }
            else {
                tag = 'div';
                overwriteWithWarning("Heading", props, "aria-level", `${newHeadingLevel}`);
            }
        }
        return (o$1(_$2, { children: o$1(HeadingReset, { newLevel: headingLevelBeforeUs + 1, children: [y$1(tag, props, heading), children] }) }));
    });
    const HeadingReset = R(function HeadingReset({ newLevel, children }) {
        return (o$1(HeadingLevelContext.Provider, { value: newLevel, children: children }));
    });

    /**
     * Debug hook.
     *
     * Given a value or set of values, emits a console error if any of them change from one render to the next.
     *
     * Eventually, when useEvent lands, we hopefully won't need this.
     */
    function useEnsureStability(parentHookName, ...values) {
        const helperToEnsureStability = _([]);
        const shownError = _([]);
        useHelper(values.length, -1);
        values.forEach(useHelper);
        return;
        function useHelper(value, i) {
            const index = i + 1;
            // Make sure that the provided functions are perfectly stable across renders
            if (helperToEnsureStability.current[index] === undefined)
                helperToEnsureStability.current[index] = value;
            if (helperToEnsureStability.current[index] != value) {
                if (!shownError.current[index]) {
                    /* eslint-disable no-debugger */
                    debugger;
                    console.error(`The hook ${parentHookName} requires some or all of its arguments remain stable across each render; please check the ${i}-indexed argument (${i >= 0 ? JSON.stringify(values[i]) : "the number of supposedly stable elements"}).`);
                    shownError.current[index] = true;
                }
            }
        }
    }
    function debounceRendering(f) {
        (l$1.debounceRendering ?? setTimeout)(f);
    }
    /**
     * Similar to `useState`, but for values that aren't "render-important" &ndash; updates don't cause a re-render and so the value shouldn't be used during render (though it certainly can, at least by re-rendering again).
     *
     * To compensate for this, you should pass a `useEffect`-esque callback that is run whenever the value changes.  Just like `useEffect`, this callback can return a cleanup function that's run before the value changes.  If you would like to re-render when the value changes (or, say, when the value meets some criteria), this is where you'll want to put in a call to a `setState` function.
     *
     * To summarize, it's like a `useState`-`useEffect` mashup:
     *
     * 1. It's like `useState`, except this version of `setState` doesn't re-render the whole component
     * 2. It's like `useState`, except you can run a function when the value changes that optionally returns a cleanup function
     * 3. It's like `useEffect`, except you trigger the effect function "remotely" instead of it running after rendering
     * 4. It's like `useEffect`, except the single "dependency" is based on your calls to `setState`
     *
     * Note that while calling `setState` doesn't cause any re-renders, you can do that within your `onChange` function, called whenever the value changes via that `setState`.
     *
     * @param onChange The "effect" function to run when the value changes. Effectively the same as `useEffect`'s "effect" function.  MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.
     * @param getInitialValue If provided, the effect will be invoked once with this value on mount. MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.
     * @param customDebounceRendering By default, changes to passive state are delayed by one tick so that we only check for changes in a similar way to Preact. You can override this to, for example, always run immediately instead.
     * @returns
     */
    function usePassiveState(onChange, getInitialValue, customDebounceRendering) {
        const valueRef = _(Unset$2);
        const reasonRef = _(Unset$2);
        const warningRef = _(false);
        const dependencyToCompareAgainst = _(Unset$2);
        const cleanupCallbackRef = _(undefined);
        // Make sure that the provided functions are perfectly stable across renders
        useEnsureStability("usePassiveState", onChange, getInitialValue, customDebounceRendering);
        // Shared between "dependency changed" and "component unmounted".
        const onShouldCleanUp = T$1(() => {
            const cleanupCallback = cleanupCallbackRef.current;
            if (cleanupCallback)
                cleanupCallback();
        }, []);
        // There are a couple places where we'd like to use our initial
        // value in place of having no value at all yet.
        // This is the shared code for that, used on mount and whenever
        // getValue is called.
        const tryEnsureValue = T$1(() => {
            if (valueRef.current === Unset$2 && getInitialValue != undefined) {
                try {
                    const initialValue = getInitialValue();
                    valueRef.current = initialValue;
                    cleanupCallbackRef.current = (onChange?.(initialValue, undefined, undefined) ?? undefined);
                }
                catch (ex) {
                    // Exceptions are intentional to allow bailout (without exposing the Unset symbol)
                }
            }
        }, [ /* getInitialValue and onChange intentionally omitted */]);
        const getValue = T$1(() => {
            if (warningRef.current)
                console.warn("During onChange, prefer using the (value, prevValue) arguments instead of getValue -- it's ambiguous as to if you're asking for the old or new value at this point in time for this component.");
            // The first time we call getValue, if we haven't been given a value yet,
            // (and we were given an initial value to use)
            // return the initial value instead of nothing.
            if (valueRef.current === Unset$2)
                tryEnsureValue();
            return (valueRef.current === Unset$2 ? undefined : valueRef.current);
        }, []);
        s(() => {
            // Make sure we've run our effect at least once on mount.
            // (If we have an initial value, of course)
            tryEnsureValue();
        }, []);
        // The actual code the user calls to (possibly) run a new effect.
        const setValue = T$1((arg, reason) => {
            // Regardless of anything else, figure out what our next value is about to be.
            const nextValue = (arg instanceof Function ? arg(valueRef.current === Unset$2 ? undefined : valueRef.current) : arg);
            if (dependencyToCompareAgainst.current === Unset$2 && nextValue !== valueRef.current) {
                // This is the first request to change this value.
                // Evaluate the request immediately, then queue up the onChange function
                // Save our current value so that we can compare against it later
                // (if we flip back to this state, then we won't send the onChange function)
                dependencyToCompareAgainst.current = valueRef.current;
                // It's important to update this here (as well as below) in case customDebounceRendering invokes this immediately
                valueRef.current = nextValue;
                reasonRef.current = reason;
                // Schedule the actual check and invocation of onChange later to let effects settle
                (customDebounceRendering ?? debounceRendering)(() => {
                    const nextReason = reasonRef.current;
                    const nextDep = valueRef.current;
                    const prevDep = dependencyToCompareAgainst.current;
                    if (dependencyToCompareAgainst.current != valueRef.current) {
                        warningRef.current = true;
                        try {
                            // Call any registered cleanup function
                            onShouldCleanUp();
                            cleanupCallbackRef.current = (onChange?.(nextDep, prevDep === Unset$2 ? undefined : prevDep, nextReason) ?? undefined);
                            valueRef.current = nextDep;
                        }
                        finally {
                            // Allow the user to normally call getValue again
                            warningRef.current = false;
                        }
                    }
                    // We've finished with everything, so mark us as being on a clean slate again.
                    dependencyToCompareAgainst.current = Unset$2;
                });
            }
            // Update the value immediately.
            // This will be checked against prevDep to see if we should actually call onChange
            valueRef.current = nextValue;
        }, []);
        return [getValue, setValue];
    }
    const Unset$2 = Symbol();
    // Easy constants for getInitialValue
    function returnTrue() { return true; }
    function returnFalse() { return false; }
    function returnNull() { return null; }
    function returnZero() { return 0; }
    /**
     * An alternative to use for `customDebounceRendering` that causes `usePassiveState` to run changes without waiting a tick.
     */
    function runImmediately(f) { f(); }

    const Table$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";
    function base64(value) {
        return Table$1[value];
    }
    function random6Bits() {
        return Math.floor(Math.random() * 0b1000000);
    }
    function random64Bits() {
        return [random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits()];
    }
    /**
     * Returns a randomly-generated ID with an optional prefix.
     * Note that if the prefix is *explicitly* set to "", then
     * IDs that are not valid under HTML4 may be generated. Oh no.
     *
     *
     * (This is here, in this particular file, to avoid circular dependencies
     * without also making a utilities file.
     * Once we can remove this hook, we can put this function back with useRandomId)
     */
    function generateRandomId(prefix) {
        return `${prefix ?? "id-"}${random64Bits().map(n => base64(n)).join("")}`;
    }
    const previousInputs = new Map();
    const toRun = new Map();
    // TODO: Whether this goes in options.diffed or options._commit
    // is a post-suspense question.
    // Right now, using options._commit has the problem of running
    // *after* refs are applied, but we need to come before even that
    // so `ref={someStableFunction}` works.
    // 
    // Also it's private.
    //
    // ...
    // Well, useEvent or whatever is finally, finally 4 years later finally here
    // which is cool and means we won't need this at all soon.
    // So for now we'll stick with diff to prevent any weirdness with
    // commit being private and all.
    const commitName = "diffed";
    const originalCommit = l$1[commitName];
    const newCommit = (...args) => {
        for (const [id, effectInfo] of toRun) {
            const oldInputs = previousInputs.get(id);
            if (argsChanged(oldInputs, effectInfo.inputs)) {
                effectInfo.cleanup?.();
                effectInfo.cleanup = effectInfo.effect();
                previousInputs.set(id, effectInfo.inputs);
            }
        }
        toRun.clear();
        originalCommit?.(...args);
    };
    l$1[commitName] = newCommit;
    /**
     * Semi-private function to allow stable callbacks even within `useLayoutEffect` and ref assignment.
     *
     * Every render, we send the arguments to be evaluated after diffing has completed,
     * which happens before.
     *
     * @param effect
     * @param inputs
     */
    function useBeforeLayoutEffect(effect, inputs) {
        /*(() => {
            const cleanup = useRef<void | (() => void) | null>(null);
            const prevArgsRef = useRef<Inputs>(null!);
            if (argsChanged(inputs, prevArgsRef.current)) {
                prevArgsRef.current = inputs!;
                if (cleanup.current)
                    cleanup.current();
                cleanup.current = effect();
            }
        })();*/
        const [id] = p(() => generateRandomId());
        if (effect)
            toRun.set(id, { effect, inputs, cleanup: null });
        else
            toRun.delete(id);
        h(() => {
            return () => {
                toRun.delete(id);
                previousInputs.delete(id);
            };
        }, [id]);
    }
    function argsChanged(oldArgs, newArgs) {
        return !!(!oldArgs ||
            oldArgs.length !== newArgs?.length ||
            newArgs?.some((arg, index) => arg !== oldArgs[index]));
    }

    const Unset$1 = Symbol("unset");
    /**
     * Given an input value, returns a constant getter function that can be used
     * inside of `useEffect` and friends without including it in the dependency array.
     *
     * This uses `options.diffed` in order to run before everything, even
     * ref assignment. This means this getter is safe to use anywhere ***except the render phase***.
     *
     * @param value
     * @returns
     */
    function useStableGetter(value) {
        const ref = _(Unset$1);
        useBeforeLayoutEffect((() => { ref.current = value; }), [value]);
        return T$1(() => {
            if (ref.current === Unset$1) {
                throw new Error('Value retrieved from useStableGetter() cannot be called during render.');
            }
            return ref.current;
        }, []);
    }
    /**
     * Like `useStableGetter`, but ***requires*** that everything in the object is also stable,
     * and in turn returns an object that itself is stable.
     * @param t
     * @returns
     */
    function useStableObject(t) {
        const e = Object.entries(t);
        useEnsureStability("useStableObject", e.length, ...e.map(([_k, v]) => v));
        return _(t).current;
    }

    /**
     * We keep track of which callbacks are stable with a WeakMap instead of, say, a symbol because
     * `useCallback` will return a function that's stable across *all* renders, meaning
     * we can't use our funny "`if` only works here because it doesn't break the rules of hooks" trick then.
     */
    const map = new WeakMap();
    function isStableGetter(obj) {
        return (map.get(obj) ?? false);
    }
    function setIsStableGetter(obj) {
        map.set(obj, true);
        return obj;
    }
    /**
     * Alternate useCallback() which always returns the same (wrapped) function reference
     * so that it can be excluded from the dependency arrays of `useEffect` and friends.
     *
     * In general, just pass the function you want to be stable (but you can't use it during render,
     * so be careful!).  Alternatively, if you need a stable callback that **can** be used
     * during render, pass an empty dependency array and it'll act like `useCallback` with an
     * empty dependency array, but with the associated stable typing. In this case, you ***must*** ensure that it
     * truly has no dependencies/only stable dependencies!!
     */
    function useStableCallback(fn, noDeps) {
        useEnsureStability("useStableCallback", noDeps == null, noDeps?.length, isStableGetter(fn));
        if (isStableGetter(fn))
            return fn;
        if (noDeps == null) {
            const currentCallbackGetter = useStableGetter(fn);
            return setIsStableGetter(T$1(((...args) => {
                return currentCallbackGetter()(...args);
            }), []));
        }
        else {
            console.assert(noDeps.length === 0);
            return setIsStableGetter(T$1(fn, []));
        }
    }

    function useMergedChildren(lhs, rhs) {
        if (lhs == null && rhs == null) {
            return undefined;
        }
        else if (lhs == null) {
            return rhs;
        }
        else if (rhs == null) {
            return lhs;
        }
        else {
            return y$1(_$2, {}, lhs, rhs);
        }
    }

    function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}

    /**
     * Given two sets of props, merges their `class` and `className` properties.
     * Duplicate classes are removed (order doesn't matter anyway).
     *
     * @param lhs Classes of the first component
     * @param rhs Classes of the second component
     * @returns A string representing all combined classes from both arguments.
     */
    function useMergedClasses(lhsClass, lhsClassName, rhsClass, rhsClassName) {
        // Note: For the sake of forward compatibility, this function is labelled as
        // a hook, but as it uses no other hooks it technically isn't one.
        if (lhsClass || rhsClass || lhsClassName || rhsClassName) {
            const lhsClasses = clsx(lhsClass, lhsClassName).split(" ");
            const rhsClasses = clsx(rhsClass, rhsClassName).split(" ");
            const allClasses = new Set([...Array.from(lhsClasses), ...Array.from(rhsClasses)]);
            return Array.from(allClasses).join(" ");
        }
        else {
            return undefined;
        }
    }

    function processRef(instance, ref) {
        if (typeof ref === "function") {
            ref(instance);
        }
        else if (ref != null) {
            ref.current = instance;
        }
        else {
            /* eslint-disable no-debugger */
            debugger;
            console.assert(false, "Unknown ref type found that was neither a RefCallback nor a RefObject");
        }
    }
    /**
     * Combines two refs into one. This allows a component to both use its own ref *and* forward a ref that was given to it.
     * @param lhs
     * @param rhs
     * @returns
     */
    function useMergedRefs(rhs, lhs) {
        if (lhs == null && rhs == null) {
            return undefined;
        }
        else if (lhs == null) {
            return rhs;
        }
        else if (rhs == null) {
            return lhs;
        }
        else {
            return combined;
        }
        function combined(current) {
            processRef(current, lhs);
            processRef(current, rhs);
        }
    }

    function styleStringToObject(style) {
        // TODO: This sucks D:
        return Object.fromEntries(style.split(";").map(statement => statement.split(":")));
    }
    /**
     * Merges two style objects, returning the result.
     *
     * @param style The user-given style prop for this component
     * @param obj The CSS properties you want added to the user-given style
     * @returns A CSS object containing the properties of both objects.
     */
    function useMergedStyles(lhs, rhs) {
        // Easy case, when there are no styles to merge return nothing.
        if (!lhs && !rhs)
            return undefined;
        if (typeof lhs != typeof rhs) {
            // Easy cases, when one is null and the other isn't.
            if (lhs && !rhs)
                return lhs;
            if (!lhs && rhs)
                return rhs;
            // They're both non-null but different types.
            // Convert the string type to an object bag type and run it again.
            if (lhs && rhs) {
                // (useMergedStyles isn't a true hook -- this isn't a violation)
                if (typeof lhs == "string")
                    return useMergedStyles(styleStringToObject(lhs), rhs);
                if (typeof rhs == "string")
                    return useMergedStyles(lhs, styleStringToObject(rhs));
            }
            // Logic???
            return undefined;
        }
        // They're both strings, just concatenate them.
        if (typeof lhs == "string") {
            return `${lhs};${rhs ?? ""}`;
        }
        // They're both objects, just merge them.
        return {
            ...(lhs ?? {}),
            ...(rhs ?? {})
        };
    }

    let log = console.warn;
    /**
     * Given two sets of props, merges them and returns the result.
     *
     * The hook is aware of and can intelligently merge `className`, `class`, `style`, `ref`, and all event handlers.
     * @param lhs2
     * @param rhs2
     * @returns
     */
    function useMergedProps(...allProps) {
        useEnsureStability("useMergedProps", allProps.length);
        let ret = {};
        for (let nextProps of allProps) {
            ret = useMergedProps2(ret, nextProps);
        }
        return ret;
    }
    const knowns = new Set(["children", "ref", "className", "class", "style"]);
    function mergeUnknown(key, lhsValue, rhsValue) {
        if (typeof lhsValue === "function" || typeof rhsValue === "function") {
            // They're both functions that can be merged (or one's a function and the other's null).
            // Not an *easy* case, but a well-defined one.
            const merged = mergeFunctions(lhsValue, rhsValue);
            return merged;
        }
        else {
            // Uh...we're here because one of them's null, right?
            if (lhsValue == null && rhsValue == null) {
                if (rhsValue === null && lhsValue === undefined)
                    return rhsValue;
                else
                    return lhsValue;
            }
            if (lhsValue == null)
                return rhsValue;
            else if (rhsValue == null)
                return lhsValue;
            else if (rhsValue == lhsValue) {
                // I mean, they're the same value at least
                // so we don't need to do anything.
                // Not really ideal though.
                return rhsValue;
            }
            else {
                // Ugh.
                // No good strategies here, just log it if requested
                log?.(`The prop "${key}" cannot simultaneously be the values ${lhsValue} and ${rhsValue}. One must be chosen outside of useMergedProps.`);
                return rhsValue;
            }
        }
    }
    /**
     * Helper function.
     *
     * This is one of the most commonly called functions in this and consumer libraries,
     * so it trades a bit of readability for speed (i.e. we don't decompose objects and just do regular property access, iterate with `for...in`, instead of `Object.entries`, etc.)
     */
    function useMergedProps2(lhsAll, rhsAll) {
        const ret = {
            ref: useMergedRefs(lhsAll.ref, rhsAll.ref),
            style: useMergedStyles(lhsAll.style, rhsAll.style),
            className: useMergedClasses(lhsAll["class"], lhsAll.className, rhsAll["class"], rhsAll.className),
            children: useMergedChildren(lhsAll.children, rhsAll.children),
        };
        if (ret.ref === undefined)
            delete ret.ref;
        if (ret.style === undefined)
            delete ret.style;
        if (ret.className === undefined)
            delete ret.className;
        if (ret["class"] === undefined)
            delete ret["class"];
        if (ret.children === undefined)
            delete ret.children;
        for (const lhsKeyU in lhsAll) {
            const lhsKey = lhsKeyU;
            if (knowns.has(lhsKey))
                continue;
            ret[lhsKey] = lhsAll[lhsKey];
        }
        for (const rhsKeyU in rhsAll) {
            const rhsKey = rhsKeyU;
            if (knowns.has(rhsKey))
                continue;
            ret[rhsKey] = mergeUnknown(rhsKey, ret[rhsKey], rhsAll[rhsKey]);
        }
        return ret;
    }
    function mergeFunctions(lhs, rhs) {
        if (!lhs)
            return rhs;
        if (!rhs)
            return lhs;
        return (...args) => {
            const lv = lhs(...args);
            const rv = rhs(...args);
            if (lv instanceof Promise || rv instanceof Promise)
                return Promise.all([lv, rv]);
        };
    }
    /*
    function test<P extends h.JSX.HTMLAttributes<HTMLInputElement>>(props: P) {

        const id0: GenericGet<{}, "id", string> = "";
        const id3: GenericGet<{ id: undefined }, "id", string> = undefined;
        const id4: GenericGet<{ id: undefined }, "id", string> = undefined;
        const id5: GenericGet<{ id: undefined }, "id", string> = undefined;
        const id6: GenericGet<{ id: undefined }, "id", string> = undefined;
        //const id2: ZipSingle<string | undefined, string | undefined> = undefined;
        const id1: ZipObject<{ id: undefined }, { id: string }> = { id: undefined };

        type M1 = GenericGet<P, "style", string>;
        type M2 = GenericGet<{}, "style", string>;
        const m1: M1 = "";
        const m2: M1 = undefined;
        /// @ts-expect-error    Because number isn't assignable to string
        const m3: M1 = 0;

        const m4: M2 = "";
        const m5: M2 = undefined;
        /// @ts-expect-error    Because number isn't assignable to string
        const m6: M2 = 0;

        const p1: MergedProps<HTMLInputElement, {}, { id: string }> = useMergedProps<HTMLInputElement>()({}, { id: "string" });
        const p2: MergedProps<HTMLInputElement, { id: undefined }, { id: string }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: "string" });
        const p3: MergedProps<HTMLInputElement, { id: undefined }, { id: undefined }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: undefined });
        const p4: MergedProps<HTMLInputElement, {}, {}> = useMergedProps<HTMLInputElement>()({}, {});
        const p5 = useMergedProps<HTMLInputElement>()(props, {});
        const p6 = useMergedProps<HTMLInputElement>()(props, { id: undefined });
        const p7 = useMergedProps<HTMLInputElement>()(props, { id: "string" });


        p1.id?.concat("");
        p2.id?.concat("");
        /// @ts-expect-error    id can't be anything but undefined
        p3.id?.concat("");
        /// @ts-expect-error    id can't be anything but undefined
        p4.id?.concat("");


        p5.id?.concat("");
        p6.id?.concat("");
        p7.id?.concat("");

        /// @ts-expect-error    id must contain undefined
        p5.id.concat("");
        /// @ts-expect-error    id must contain undefined
        p6.id.concat("");
        /// @ts-expect-error    id must contain undefined
        p7.id.concat("");


        if (p5.allowFullScreen === undefined) {}
        else if (p5.allowFullScreen === false) {}
        else if (p5.allowFullScreen === true) {}
        else {
            acceptsNever(p5.allowFullScreen);
        }


        if (p6.allowFullScreen === undefined) {}
        else if (p6.allowFullScreen === false) {}
        else if (p6.allowFullScreen === true) {}
        else {
            acceptsNever(p6.allowFullScreen);
        }


        if (p7.allowFullScreen === undefined) {}
        else if (p7.allowFullScreen === false) {}
        else if (p7.allowFullScreen === true) {}
        else {
            acceptsNever(p7.allowFullScreen);
        }


        // Make sure it works recursively
        const r1a = useMergedProps<HTMLInputElement>()({}, p1);
        const r1b = useMergedProps<HTMLInputElement>()(props, p1);
        const r2a = useMergedProps<HTMLInputElement>()({}, p2);
        const r2b = useMergedProps<HTMLInputElement>()(props, p2);
        const r3a = useMergedProps<HTMLInputElement>()({}, p3);
        const r3b = useMergedProps<HTMLInputElement>()(props, p3);
        const r4a = useMergedProps<HTMLInputElement>()({}, p4);
        const r4b = useMergedProps<HTMLInputElement>()(props, p4);
        const r5a = useMergedProps<HTMLInputElement>()({}, p5);
        const r5b = useMergedProps<HTMLInputElement>()(props, p5);
        const r6a = useMergedProps<HTMLInputElement>()({}, p6);
        const r6b = useMergedProps<HTMLInputElement>()(props, p6);
        const r7a = useMergedProps<HTMLInputElement>()({}, p7);
        const r7b = useMergedProps<HTMLInputElement>()(props, p7);


        r1a.id?.concat("");
        r1b.id?.concat("");
        r2a.id?.concat("");
        r2b.id?.concat("");
        // @ts-expect-error    id can't be anything but undefined
        r3a.id?.concat("");
        r3b.id?.concat("");
        /// @ts-expect-error    id can't be anything but undefined
        r4a.id?.concat("");
        r4b.id?.concat("");


        r5a.id?.concat("");
        r5b.id?.concat("");
        r6a.id?.concat("");
        r6b.id?.concat("");
        r7a.id?.concat("");
        r7b.id?.concat("");

        /// @ts-expect-error    id must contain undefined
        r5a.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r5b.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r6a.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r6b.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r7a.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r7b.id.concat("");


        if (r5a.allowFullScreen === undefined) {}
        else if (r5a.allowFullScreen === false) {}
        else if (r5a.allowFullScreen === true) {}
        else {
            acceptsNever(r5a.allowFullScreen);
        }


        if (r5b.allowFullScreen === undefined) {}
        else if (r5b.allowFullScreen === false) {}
        else if (r5b.allowFullScreen === true) {}
        else {
            acceptsNever(r5b.allowFullScreen);
        }


        if (r6a.allowFullScreen === undefined) {}
        else if (r6a.allowFullScreen === false) {}
        else if (r6a.allowFullScreen === true) {}
        else {
            acceptsNever(r6a.allowFullScreen);
        }


        if (r6b.allowFullScreen === undefined) {}
        else if (r6b.allowFullScreen === false) {}
        else if (r6b.allowFullScreen === true) {}
        else {
            acceptsNever(r6b.allowFullScreen);
        }


        if (r7a.allowFullScreen === undefined) {}
        else if (r7a.allowFullScreen === false) {}
        else if (r7a.allowFullScreen === true) {}
        else {
            acceptsNever(r7a.allowFullScreen);
        }


        if (r7b.allowFullScreen === undefined) {}
        else if (r7b.allowFullScreen === false) {}
        else if (r7b.allowFullScreen === true) {}
        else {
            acceptsNever(r7b.allowFullScreen);
        }

    }
    function acceptsNever(n: never) {}
    */

    /**
     * Allows attaching an event handler to any *non-Preact* element, and removing it when the component using the hook unmounts. The callback does not need to be stable across renders.
     *
     * Due to typing limitations, this function must be called like this:
     *
     * `useEventHandler(element, "input")<InputEvent>(e => {})`
     *
     * The type argument is optional, but narrows down the type from "a union of all events" to whatever you specify, and errors if it doesn't exist.
     *
     * There is a separate version that attaches event handlers to a set of props.
     * It takes different event string types (onEvent vs onevent).
     *
     * @param target A *non-Preact* node to attach the event to.
     * @returns
     * *
     */
    function useGlobalHandler(target, type, handler, options, mode) {
        mode ||= "grouped";
        useEnsureStability("useGlobalHandler", mode);
        if (mode === "grouped") {
            // Note to self: The typing doesn't improve even if this is split up into a sub-function.
            // No matter what, it seems impossible to get the handler's event object typed perfectly.
            // It seems like it's guaranteed to always be a union of all available tupes.
            // Again, no matter what combination of sub- or sub-sub-functions used.
            useGlobalHandlerGrouped(target, type, handler, options);
        }
        else {
            useGlobalHandlerSingle(target, type, handler, options);
        }
    }
    let mapThing = new Map();
    function doMapThing(op, target, type, handler, options) {
        if (handler) {
            const optionsKey = JSON.stringify(options);
            const byType = mapThing.get(target) || new Map();
            const byOptions = (byType.get(type) || new Map());
            const info = byOptions.get(optionsKey) || { listener: null, listeners: new Set() };
            op(info, handler);
            byOptions.set(optionsKey, info);
            byType.set(type, byOptions);
            mapThing.set(target, byType);
        }
    }
    function addToMapThing(target, type, handler, options) {
        doMapThing((info, h) => {
            info.listeners.add(h);
            if (info.listener == null)
                target.addEventListener(type, info.listener = e => info.listeners.forEach(fn => fn(e)), options);
        }, target, type, handler, options);
    }
    function removeFromMapThing(target, type, handler, options) {
        doMapThing((info, h) => {
            info.listeners.delete(h);
            if (info.listener == null)
                target.removeEventListener(type, info.listener = e => info.listeners.forEach(fn => fn(e)), options);
        }, target, type, handler, options);
    }
    /**
     * This is way faster for large numbers of event handlers.
     *
     * For example, if every button listens for a global click, or something,
     * it would be nice if it was efficient at least.
     */
    function useGlobalHandlerGrouped(target, type, handler, options) {
        let stableHandler = useStableCallback(handler ?? (() => { }));
        if (handler == null)
            stableHandler = null;
        h(() => {
            if (stableHandler) {
                addToMapThing(target, type, stableHandler, options);
                return () => removeFromMapThing(target, type, stableHandler, options);
            }
        }, [target, type, stableHandler]);
    }
    function useGlobalHandlerSingle(target, type, handler, options) {
        let stableHandler = useStableCallback(handler ?? (() => { }));
        if (handler == null)
            stableHandler = null;
        h(() => {
            if (stableHandler) {
                target.addEventListener(type, stableHandler, options);
                return () => target.removeEventListener(type, stableHandler, options);
            }
        }, [target, type, stableHandler]);
    }

    /*
    export function useRefElementProps<E extends Element>(r: UseRefElementReturnType<E>, ...otherProps: h.JSX.HTMLAttributes<E>[]): h.JSX.HTMLAttributes<E>[] {
        return [r.refElementReturn.propsStable, ...otherProps];
    }*/
    /**
     * Allows accessing the element a ref references as soon as it does so.
     * *This hook itself returns a hook*--useRefElementProps modifies the props that you were going to pass to an HTMLElement,
     * adding a RefCallback and merging it with any existing ref that existed on the props.
     *
     * Don't forget to provide the Element as the type argument!
     *
     * @returns The element, and the sub-hook that makes it retrievable.
     */
    function useRefElement(args) {
        const { onElementChange, onMount, onUnmount } = (args.refElementParameters || {});
        useEnsureStability("useRefElement", onElementChange, onMount, onUnmount);
        // Called (indirectly) by the ref that the element receives.
        const handler = T$1((e, prevValue) => {
            const cleanup = onElementChange?.(e, prevValue);
            if (prevValue)
                onUnmount?.(prevValue);
            if (e)
                onMount?.(e);
            return cleanup;
        }, []);
        // Let us store the actual (reference to) the element we capture
        const [getElement, setElement] = usePassiveState(handler, returnNull, runImmediately);
        const propsStable = _({ ref: setElement });
        // Return both the element and the hook that modifies 
        // the props and allows us to actually find the element
        return {
            refElementReturn: {
                getElement,
                propsStable: propsStable.current
            }
        };
    }

    /*
    const activeElementUpdaters = new Map<Window | null | undefined, Set<undefined | ((e: Node | null) => void)>>();
    const lastActiveElementUpdaters = new Map<Window | null | undefined, Set<undefined | ((e: Node) => void)>>();
    const windowFocusedUpdaters = new Map<Window | null | undefined, Set<undefined | ((focused: boolean) => void)>>();
    const windowsFocusedUpdaters = new Map<Window | null | undefined, boolean>();*/
    const activeElementUpdaters = new Map();
    const lastActiveElementUpdaters = new Map();
    const windowFocusedUpdaters = new Map();
    const windowsFocusedUpdaters = new Map();
    //const microtasks = new Map<Set<any>, any>();
    // The focusin and focusout events often fire syncronously in the middle of running code.
    // E.G. calling element.focus() can cause a focusin event handler to immediately interrupt that code.
    // For the purpose of improving stability, we debounce all focus events to the next microtask.
    function forEachUpdater(window, map, value, reason) {
        const updaters = map.get(window);
        if (updaters) {
            //if (!microtasks.has(updatersKey)) {
            //debounceRendering(() => {
            //const updatersKey = map.get(window)!;
            //const value = microtasks.get(updatersKey);
            //microtasks.delete(updatersKey);
            if (updaters) {
                for (const updater of updaters) {
                    const { lastSent, send } = updater;
                    if (value !== lastSent) {
                        send(value, reason);
                        updater.lastSent = value;
                    }
                }
            }
            //});
            //}
            //microtasks.set(updatersKey, value);
        }
    }
    function focusout(e) {
        const window = e.target.ownerDocument.defaultView;
        if (e.relatedTarget == null) {
            forEachUpdater(window, activeElementUpdaters, null, e);
        }
    }
    function focusin(e) {
        const window = e.target.ownerDocument.defaultView;
        const currentlyFocusedElement = e.target;
        forEachUpdater(window, activeElementUpdaters, currentlyFocusedElement, e);
        forEachUpdater(window, lastActiveElementUpdaters, currentlyFocusedElement, e);
    }
    function windowFocus(e) {
        const window = (e.target instanceof Window ? e.target : e.currentTarget instanceof Window ? e.currentTarget : e.target.ownerDocument.defaultView);
        windowsFocusedUpdaters.set(window, true);
        forEachUpdater(window, windowFocusedUpdaters, true, e);
    }
    function windowBlur(e) {
        const window = (e.target instanceof Window ? e.target : e.currentTarget instanceof Window ? e.currentTarget : e.target.ownerDocument.defaultView);
        windowsFocusedUpdaters.set(window, false);
        forEachUpdater(window, windowFocusedUpdaters, false, e);
    }
    /**
     * Allows you to inspect which element in the `document` currently has focus, which was most recently focused if none are currently, and whether or not the window has focus by returning the following functions:
     * * `getActiveElement()`
     * * `getLastActiveElement()`
     * * `getWindowFocused()`
     *
     * (The document's body receiving focus, like it does when you click on an empty area, is counted as no element having focus for all intents and purposes)
     *
     * This is a passive hook, so by default it returns getter functions that report this information but the component will not re-render by default when the active element changes.
     *
     * If you need the component to re-render when the active element changes, use the `on*Change` arguments to set some state on your end.
     */
    function useActiveElement({ activeElementParameters: { onActiveElementChange, onLastActiveElementChange, onWindowFocusedChange, getDocument, getWindow } }) {
        useEnsureStability("useActiveElement", onActiveElementChange, onLastActiveElementChange, onWindowFocusedChange, getDocument, getWindow);
        h(() => {
            const document = getDocument();
            const window = (getWindow?.(document) ?? document?.defaultView);
            if ((activeElementUpdaters.get(window)?.size ?? 0) === 0) {
                document?.addEventListener("focusin", focusin, { passive: true });
                document?.addEventListener("focusout", focusout, { passive: true });
                window?.addEventListener("focus", windowFocus, { passive: true });
                window?.addEventListener("blur", windowBlur, { passive: true });
            }
            // Add them even if they're undefined to more easily
            // manage the ">0 means don't add handlers" logic.
            const localActiveElementUpdaters = activeElementUpdaters.get(window) ?? new Set();
            const localLastActiveElementUpdaters = lastActiveElementUpdaters.get(window) ?? new Set();
            const localWindowFocusedUpdaters = windowFocusedUpdaters.get(window) ?? new Set();
            const laeu = { send: setActiveElement, lastSent: undefined };
            const llaeu = { send: setLastActiveElement, lastSent: undefined };
            const lwfu = { send: setWindowFocused, lastSent: undefined };
            localActiveElementUpdaters.add(laeu);
            localLastActiveElementUpdaters.add(llaeu);
            localWindowFocusedUpdaters.add(lwfu);
            activeElementUpdaters.set(window, localActiveElementUpdaters);
            lastActiveElementUpdaters.set(window, localLastActiveElementUpdaters);
            windowFocusedUpdaters.set(window, localWindowFocusedUpdaters);
            return () => {
                activeElementUpdaters.get(window).delete(laeu);
                lastActiveElementUpdaters.get(window).delete(laeu);
                windowFocusedUpdaters.get(window).delete(lwfu);
                if (activeElementUpdaters.size === 0) {
                    document?.removeEventListener("focusin", focusin);
                    document?.removeEventListener("focusout", focusout);
                    window?.removeEventListener("focus", windowFocus);
                    window?.removeEventListener("blur", windowBlur);
                }
            };
        }, []);
        const [getActiveElement, setActiveElement] = usePassiveState(onActiveElementChange, returnNull, runImmediately);
        const [getLastActiveElement, setLastActiveElement] = usePassiveState(onLastActiveElementChange, returnNull, runImmediately);
        const [getWindowFocused, setWindowFocused] = usePassiveState(onWindowFocusedChange, returnTrue, runImmediately);
        return { activeElementReturn: { getActiveElement, getLastActiveElement, getWindowFocused } };
    }

    /**
     * Allows a parent component to access information about certain
     * child components once they have rendered.
     *
     * This hook is designed to be lightweight, in that the parent keeps no state
     * and runs no effects.  Each child *does* run an effect, but with no state
     * changes unless you explicitly request them.
     *
     *
     */
    function useManagedChildren(parentParameters) {
        const { managedChildrenParameters: { onAfterChildLayoutEffect, onChildrenMountChange, onChildCountChange }, ...rest } = parentParameters;
        useEnsureStability("useManagedChildren", onAfterChildLayoutEffect, onChildrenMountChange, onChildCountChange);
        //const [getMountCount, setMountCount] = usePassiveState(onChildCountChange, returnZero, runImmediately);
        const getHighestIndex = T$1(() => {
            return managedChildrenArray.current.highestIndex;
        }, []);
        // All the information we have about our children is stored in this **stable** array.
        // Any mutations to this array **DO NOT** trigger any sort of a re-render.
        const managedChildrenArray = _({ arr: [], rec: {}, highestIndex: 0, lowestIndex: 0 });
        // For indirect access to each child
        // Compare getManagedChildInfo
        // TODO: The primary use for this is flaggable closest fits
        // which needs to search all children for that closest fit.
        // It would be nice if there was something better for that.
        const forEachChild = T$1((f) => {
            for (const child of managedChildrenArray.current.arr) {
                if (child)
                    f(child);
            }
            for (const field in managedChildrenArray.current.rec) {
                const child = managedChildrenArray.current.rec[field];
                if (child)
                    f(child);
            }
        }, []);
        // Retrieves the information associated with the child with the given index.
        // `undefined` if not child there, or it's unmounted.
        const getManagedChildInfo = T$1((index) => {
            if (typeof index == "number")
                return managedChildrenArray.current.arr[index];
            else
                return managedChildrenArray.current.rec[index];
        }, []);
        // tl;dr this is a way to have run useLayoutEffect once after all N children
        // have mounted and run *their* useLayoutEffect, but also *without* re-rendering
        // ourselves because of having a `childCount` state or anything similar.
        //
        // When the child count ref updates, we want the parent to also run an effect
        // to maybe do something with all these children that just mounted.
        // The easiest way would be useEffect(..., [childCount]) but
        // that would require us having a childCount state, then calling
        // setChildCount and re-rendering every time children mount
        // (only one re-render at a time unless children are staggered, but still)
        // 
        // As an alternate solution, any time a child uses ULE on mount, it queues a microtask
        // to emulate running ULE on the parent. Only the first child will actually queue
        // the microtask (by checking hasRemoteULE first) so that the "effect" only
        // runs once. When it's done, hasRemoteULE is reset so it can run again if
        // more children mount/unmount.
        const hasRemoteULEChildMounted = _(null);
        const remoteULEChildChangedCausers = _(new Set());
        const remoteULEChildChanged = T$1((index) => {
            if (remoteULEChildChangedCausers.current.size == 0) {
                if (onAfterChildLayoutEffect != null) {
                    debounceRendering(() => {
                        onAfterChildLayoutEffect?.(remoteULEChildChangedCausers.current);
                        remoteULEChildChangedCausers.current.clear();
                    });
                }
            }
            remoteULEChildChangedCausers.current.add(index);
            return () => { };
        }, [ /* Must remain stable */]);
        const remoteULEChildMounted = T$1((index, mounted) => {
            if (!hasRemoteULEChildMounted.current) {
                hasRemoteULEChildMounted.current = {
                    mounts: new Set(),
                    unmounts: new Set(),
                };
                if (onChildCountChange || onChildrenMountChange) {
                    debounceRendering(() => {
                        onChildrenMountChange?.(hasRemoteULEChildMounted.current.mounts, hasRemoteULEChildMounted.current.unmounts);
                        onChildCountChange?.(getChildren().getHighestIndex() + 1);
                        hasRemoteULEChildMounted.current = null;
                    });
                }
            }
            if (mounted) {
                if (typeof index == "number")
                    managedChildrenArray.current.highestIndex = Math.max(managedChildrenArray.current.highestIndex, index);
            }
            else {
                if (typeof index == "number") {
                    delete managedChildrenArray.current.arr[index];
                    let shave = 0;
                    while (shave <= managedChildrenArray.current.arr.length && managedChildrenArray.current.arr[managedChildrenArray.current.arr.length - 1 - shave] === undefined) {
                        ++shave;
                    }
                    managedChildrenArray.current.arr.splice(managedChildrenArray.current.arr.length - shave, shave);
                }
                else
                    delete managedChildrenArray.current.rec[index];
                if (typeof index == "number")
                    managedChildrenArray.current.highestIndex = managedChildrenArray.current.arr.length - 1;
            }
            hasRemoteULEChildMounted.current[mounted ? "mounts" : "unmounts"].add(index);
        }, [ /* Must remain stable */]);
        const managedChildren = useStableObject({
            ...{ _: managedChildrenArray.current },
            forEach: forEachChild,
            getAt: getManagedChildInfo,
            getHighestIndex: getHighestIndex,
            arraySlice: T$1(() => {
                return managedChildrenArray.current.arr.slice();
            }, [])
        });
        const getChildren = T$1(() => managedChildren, []);
        return {
            context: useStableObject({
                managedChildContext: useStableObject({
                    managedChildrenArray: managedChildrenArray.current,
                    remoteULEChildMounted,
                    remoteULEChildChanged,
                    getChildren
                })
            }),
            managedChildrenReturn: { getChildren }
        };
    }
    function useManagedChild(info, managedChildParameters) {
        const { context: { managedChildContext: { getChildren, managedChildrenArray, remoteULEChildMounted, remoteULEChildChanged } } } = info;
        const index = managedChildParameters.index;
        // Any time our child props change, make that information available
        // the parent if they need it.
        // The parent can listen for all updates and only act on the ones it cares about,
        // and multiple children updating in the same tick will all be sent at once.
        s(() => {
            // Insert this information in-place
            if (typeof index == "number") {
                managedChildrenArray.arr[index] = { ...managedChildParameters };
            }
            else {
                managedChildrenArray.rec[index] = { ...managedChildParameters };
            }
            return remoteULEChildChanged(index);
        }, [...Object.entries(info).flat(9)]); // 9 is infinity, right? Sure. Unrelated: TODO.
        // When we mount, notify the parent via queueMicrotask
        // (every child does this, so everything's coordinated to only queue a single microtask per tick)
        // Do the same on unmount.
        // Note: It's important that this comes AFTER remoteULEChildChanged
        // so that remoteULEChildMounted has access to all the info on mount.
        s(() => {
            remoteULEChildMounted?.(index, true);
            return () => remoteULEChildMounted?.(index, false);
        }, [index]);
        return {
            managedChildReturn: { getChildren }
        };
    }
    /**
     * An extension to useManagedChildren that handles the following common case:
     * 1. You have a bunch of children
     * 2. At any given time, only 1 of them is "selected", "activated", "focusable", whatever (or 0 of them, that's cool too, just 0 or 1 though).
     * 3. The parent has control over who is "selected" via a numerical index.
     *
     * This hook allows for much easier control over selection management.
     *
     * Note that because you may want to use multiple flags with the same children, this hook *does not* use `useManagedChildren`!
     * You need to pass it the existing children, and you must pass your invocation of `useManagedChildren` the returned `onChildrenMountChange` handler!
     *
     * Also because of that, the types of this function are rather odd.  It's better to start off using a hook that already uses a flag, such as `useRovingTabIndex`, as an example.
     *
     *
     * @param param0
     * @returns
     */
    function useChildrenFlag({ getChildren, initialIndex, closestFit, onIndexChange, getAt, setAt, isValid, }) {
        useEnsureStability("useChildrenFlag", onIndexChange, getAt, setAt, isValid);
        // TODO (maybe?): Even if there is an initial index, it's not set until mount. Is that fine?
        const [getCurrentIndex, setCurrentIndex] = usePassiveState(onIndexChange);
        const [getRequestedIndex, setRequestedIndex] = usePassiveState(null);
        // Shared between onChildrenMountChange and changeIndex, not public
        // Only called when `closestFit` is false, naturally.
        const getClosestFit = T$1((requestedIndex) => {
            const children = getChildren();
            let closestDistance = Infinity;
            let closestIndex = null;
            children.forEach(child => {
                if (child != null && isValid(child)) {
                    const newDistance = Math.abs(child.index - requestedIndex);
                    if (newDistance < closestDistance || (newDistance == closestDistance && child.index < requestedIndex)) {
                        closestDistance = newDistance;
                        closestIndex = child.index;
                    }
                }
            });
            return closestIndex;
        }, [ /* Must remain stable! */]);
        // Any time a child mounts/unmounts, we need to double-check to see if that affects 
        // the "currently selected" (or whatever) index.  The two cases we're looking for:
        // 1. The currently selected child unmounted
        // 2. A child mounted, and it mounts with the index we're looking for
        const reevaluateClosestFit = useStableCallback(() => {
            const children = getChildren();
            const requestedIndex = getRequestedIndex();
            const currentIndex = getCurrentIndex();
            const currentChild = currentIndex == null ? null : children.getAt(currentIndex);
            if (requestedIndex != null && closestFit && (requestedIndex != currentIndex || currentChild == null || !isValid(currentChild))) {
                const closestFitIndex = getClosestFit(requestedIndex);
                setCurrentIndex(closestFitIndex, undefined);
                if (currentChild)
                    setAt(currentChild, false, closestFitIndex, currentIndex);
                if (closestFitIndex != null) {
                    const closestFitChild = children.getAt(closestFitIndex);
                    console.assert(closestFitChild != null, "Internal logic???");
                    setAt(closestFitChild, true, closestFitIndex, currentIndex);
                }
            }
        });
        const changeIndex = T$1((arg, reason) => {
            const children = getChildren();
            const requestedIndex = (arg instanceof Function ? arg(getRequestedIndex()) : arg);
            //if (requestedIndex == null && getFitNullToZero())
            //    requestedIndex = 0;
            setRequestedIndex(requestedIndex, reason);
            const currentIndex = getCurrentIndex();
            if (currentIndex == requestedIndex)
                return requestedIndex;
            let newMatchingChild = (requestedIndex == null ? null : children.getAt(requestedIndex));
            const oldMatchingChild = (currentIndex == null ? null : children.getAt(currentIndex));
            if (requestedIndex == null) {
                // Easy case
                setCurrentIndex(null, reason);
                if (oldMatchingChild)
                    setAt(oldMatchingChild, false, requestedIndex, currentIndex);
                return null;
            }
            else {
                const childIsValid = (newMatchingChild && isValid(newMatchingChild));
                if (childIsValid || !closestFit) {
                    setCurrentIndex(requestedIndex, reason);
                    if (oldMatchingChild)
                        setAt(oldMatchingChild, false, requestedIndex, currentIndex);
                    if (newMatchingChild)
                        setAt(newMatchingChild, true, requestedIndex, currentIndex);
                    return requestedIndex;
                }
                else {
                    const closestFitIndex = getClosestFit(requestedIndex);
                    setCurrentIndex(closestFitIndex, reason);
                    if (closestFitIndex != null) {
                        newMatchingChild = children.getAt(closestFitIndex);
                        console.assert(newMatchingChild != null, "Internal logic???");
                        if (oldMatchingChild)
                            setAt(oldMatchingChild, false, closestFitIndex, currentIndex);
                        setAt(newMatchingChild, true, closestFitIndex, currentIndex);
                        return closestFitIndex;
                    }
                    else {
                        if (oldMatchingChild)
                            setAt(oldMatchingChild, false, closestFitIndex, currentIndex);
                        return null;
                    }
                }
            }
        }, []);
        // Run once, on mount
        s(() => {
            changeIndex(initialIndex ?? null, undefined);
        }, []);
        return { changeIndex, reevaluateClosestFit, getCurrentIndex };
    }

    const MagicWindowKey = ("__preact-prop-helpers-escape-key-dismiss__");
    function getElementDepth(element) {
        let depth = 0;
        let parent = element.parentElement;
        while (parent) {
            depth += 1;
            parent = parent.parentElement;
        }
        return depth;
    }
    /**
     * Adds event handlers for a modal-like soft-dismiss interaction.
     *
     * That is, any clicks or taps outside of the given component,
     * or any time the Escape key is pressed within the component,
     * (with various browser oddities regarding clicks on blank or inert areas handled)
     * the component will request to close itself.
     *
     * Of course, if you don't do anything in the `onClose` function,
     * it won't be a soft dismiss anymore.
     *
     * Handles events for pressing the `Escape` key to close the any currently open dialogs, tooltips, menus, popups, etc.
     *
     * One press of the `Escape` key is guaranteed to only call `onClose` for *only one* component, and it is called on the component deepest in the DOM tree, differentiated by passing context information between parent and child.
     *
     * @param param0
     * @returns
     */
    function useEscapeDismiss({ escapeDismissParameters: { onClose, open, getWindow: unstableGetWindow, parentDepth, ...void1 }, refElementPopupReturn: { getElement, ...void2 } }) {
        const stableOnClose = useStableCallback(onClose);
        const getWindow = useStableCallback(unstableGetWindow);
        const getDepth = useStableGetter(parentDepth + 1);
        // When this component opens, add an event listener that finds the deepest open soft dismiss element to actually dismiss.
        // Only opened components will add event handlers, and will remove them once closed.
        // The reason this is so complicated is because:
        // 1. We must only close one soft dismiss component at a time.  If there's a tooltip in a popup, the tooltip must be dismissed.
        // 2. `keydown` events don't just work on arbitrary elements, for our purposes they must be from the `window`. So we can't rely on normal capturing or bubbling behavior on the element itself.
        // 3. Event handlers added to the `window` via `addEventHandler` are called in the order of registration, which is completely at odds with #1.
        //
        // So all soft dismiss components listen for a keydown of Escape, 
        // then the first one to do so will wait for a microtask, 
        // then find the deepest element in the document tree to dismiss of all of those components currently open.
        h(() => {
            const window = getWindow();
            window[MagicWindowKey] ??= { microtaskQueued: false, elementQueue: new Map() };
            const info = window[MagicWindowKey];
            if (open) {
                window.addEventListener("keydown", handler, { capture: true });
                return () => {
                    const element = getElement();
                    if (element && info.elementQueue)
                        info.elementQueue.delete(element);
                    window.removeEventListener("keydown", handler, { capture: true });
                };
            }
            function handler(e) {
                if (e.key == "Escape") {
                    // We don't know which of the currently active soft dismisses will actually do something,
                    // but ONE of them definitely will,
                    // so we stop propagation to child nodes, but not to everyone on the window (stopImmediatePropagation).
                    e.preventDefault();
                    e.stopPropagation();
                    // This is what at least one of the elements will call
                    const onClose2 = () => { stableOnClose("escape"); };
                    const element = getElement();
                    if (element) {
                        const treeDepth = getElementDepth(element);
                        const depth = getDepth();
                        info.elementQueue.set(element, { depth, onClose: onClose2, treeDepth });
                    }
                    if (!info.microtaskQueued) {
                        info.microtaskQueued = true;
                        setTimeout(() => {
                            const { elementQueue } = info;
                            info.microtaskQueued = false;
                            info.elementQueue = new Map();
                            let deepestDepth = -Infinity;
                            let deepestTreeDepth = -Infinity;
                            let deepestOnClose = null;
                            for (const [element, { depth, onClose, treeDepth }] of elementQueue) {
                                let tieBroken = false;
                                if (depth == deepestDepth) {
                                    if (treeDepth > deepestTreeDepth) {
                                        tieBroken = true;
                                    }
                                }
                                if (depth > deepestDepth || (depth == deepestDepth && tieBroken)) {
                                    deepestDepth = depth;
                                    deepestTreeDepth = treeDepth;
                                    deepestOnClose = onClose;
                                }
                            }
                            deepestOnClose?.();
                        }, 0);
                    }
                }
            }
        }, [open]);
    }
    /**
     * Handles events for dismiss events for things like popup menus or transient dialogs -- things where moving focus to a new area of the page means this component should close itself.
     *
     * @param param0
     * @returns
     */
    function useLostFocusDismiss({ refElementPopupReturn: { getElement: getPopupElement, ...void3 }, refElementSourceReturn, lostFocusDismiss: { open, onClose }, ...void1 }) {
        const { getElement: getSourceElement, ...void2 } = (refElementSourceReturn ?? {});
        const stableOnClose = useStableCallback(onClose);
        const getOpen = useStableGetter(open);
        const onLastActiveElementChange = T$1((newElement, _prevElement, _e) => {
            const open = getOpen();
            const sourceElement = getSourceElement?.();
            const popupElement = getPopupElement();
            if (!(sourceElement?.contains(newElement) || popupElement?.contains(newElement))) {
                if (open)
                    stableOnClose();
            }
        }, [getSourceElement]);
        return { activeElementParameters: { onLastActiveElementChange } };
    }
    /**
     * Handles events for a backdrop on a modal dialog -- the kind where the user expects the modal to close when they click/tap outside of it.
     *
     * @param param0
     */
    function useBackdropDismiss({ backdropDismissParameters: { open, onClose: onCloseUnstable, ...void1 }, refElementPopupReturn: { getElement, ...void3 }, ...void2 }) {
        const getOpen = useStableGetter(open);
        const onClose = useStableCallback(onCloseUnstable);
        const onBackdropClick = T$1(function onBackdropClick(e) {
            if (!getOpen())
                return;
            // Basically, "was this event fired on an element not contained by the modal?"
            // There are multiple ways browser react to "interacting with nothing", and this takes care of everything.
            let element = getElement();
            let foundInsideClick = false;
            if (e.target && element && element.contains(e.target)) {
                foundInsideClick = true;
            }
            if (!foundInsideClick) {
                onClose();
            }
        }, []);
        useGlobalHandler(window, "mousedown", open ? onBackdropClick : null, { capture: true });
        useGlobalHandler(window, "touchstart", open ? onBackdropClick : null, { capture: true });
    }
    /**
     * Combines all the methods of dismissing a modal-ish or popup-ish component into one combined hook.
     *
     * This is similar to the "complete" series of list/grid navigation, in that it's the "outermost" hook of its type.
     */
    function useDismiss({ dismissParameters: { open: globalOpen, onClose: globalOnClose, closeOnBackdrop, closeOnEscape, closeOnLostFocus }, escapeDismissParameters: { getWindow, parentDepth } }) {
        const { refElementReturn: refElementSourceReturn } = useRefElement({ refElementParameters: {} });
        const { refElementReturn: refElementPopupReturn } = useRefElement({ refElementParameters: {} });
        const onCloseBackdrop = T$1(() => { return globalOnClose?.("backdrop"); }, [globalOnClose]);
        const onCloseEscape = T$1(() => { return globalOnClose?.("escape"); }, [globalOnClose]);
        const onCloseFocus = T$1(() => { return globalOnClose?.("lost-focus"); }, [globalOnClose]);
        useBackdropDismiss({ backdropDismissParameters: { onClose: onCloseBackdrop, open: (closeOnBackdrop && globalOpen) }, refElementPopupReturn });
        useEscapeDismiss({ escapeDismissParameters: { getWindow, onClose: onCloseEscape, open: (closeOnEscape && globalOpen), parentDepth }, refElementPopupReturn });
        const { activeElementParameters } = useLostFocusDismiss({ lostFocusDismiss: { onClose: onCloseFocus, open: (closeOnLostFocus && globalOpen) }, refElementPopupReturn, refElementSourceReturn });
        const getDocument = T$1(() => {
            return getWindow().document;
        }, [getWindow]);
        useActiveElement({ activeElementParameters: { ...activeElementParameters, getWindow, getDocument } });
        return {
            refElementSourceReturn,
            refElementPopupReturn
        };
    }

    /*!
    * tabbable 6.0.1
    * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
    */
    var candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]:not(slot)', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])', 'details>summary:first-of-type', 'details'];
    var NoElement = typeof Element === 'undefined';
    var matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    var getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {
      return element.getRootNode();
    } : function (element) {
      return element.ownerDocument;
    };
    var isInput = function isInput(node) {
      return node.tagName === 'INPUT';
    };
    var isHiddenInput = function isHiddenInput(node) {
      return isInput(node) && node.type === 'hidden';
    };
    var isDetailsWithSummary = function isDetailsWithSummary(node) {
      var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {
        return child.tagName === 'SUMMARY';
      });
      return r;
    };

    // determines if a node is ultimately attached to the window's document
    var isNodeAttached = function isNodeAttached(node) {
      var _nodeRootHost;
      // The root node is the shadow root if the node is in a shadow DOM; some document otherwise
      //  (but NOT _the_ document; see second 'If' comment below for more).
      // If rootNode is shadow root, it'll have a host, which is the element to which the shadow
      //  is attached, and the one we need to check if it's in the document or not (because the
      //  shadow, and all nodes it contains, is never considered in the document since shadows
      //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,
      //  is hidden, or is not in the document itself but is detached, it will affect the shadow's
      //  visibility, including all the nodes it contains). The host could be any normal node,
      //  or a custom element (i.e. web component). Either way, that's the one that is considered
      //  part of the document, not the shadow root, nor any of its children (i.e. the node being
      //  tested).
      // To further complicate things, we have to look all the way up until we find a shadow HOST
      //  that is attached (or find none) because the node might be in nested shadows...
      // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the
      //  document (per the docs) and while it's a Document-type object, that document does not
      //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer
      //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,
      //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when
      //  node is actually detached.
      var nodeRootHost = getRootNode(node).host;
      var attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && _nodeRootHost.ownerDocument.contains(nodeRootHost) || node.ownerDocument.contains(node));
      while (!attached && nodeRootHost) {
        var _nodeRootHost2;
        // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,
        //  which means we need to get the host's host and check if that parent host is contained
        //  in (i.e. attached to) the document
        nodeRootHost = getRootNode(nodeRootHost).host;
        attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && _nodeRootHost2.ownerDocument.contains(nodeRootHost));
      }
      return attached;
    };
    var isZeroArea = function isZeroArea(node) {
      var _node$getBoundingClie = node.getBoundingClientRect(),
        width = _node$getBoundingClie.width,
        height = _node$getBoundingClie.height;
      return width === 0 && height === 0;
    };
    var isHidden = function isHidden(node, _ref) {
      var displayCheck = _ref.displayCheck,
        getShadowRoot = _ref.getShadowRoot;
      // NOTE: visibility will be `undefined` if node is detached from the document
      //  (see notes about this further down), which means we will consider it visible
      //  (this is legacy behavior from a very long way back)
      // NOTE: we check this regardless of `displayCheck="none"` because this is a
      //  _visibility_ check, not a _display_ check
      if (getComputedStyle(node).visibility === 'hidden') {
        return true;
      }
      var isDirectSummary = matches.call(node, 'details>summary:first-of-type');
      var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
      if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {
        return true;
      }
      if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {
        if (typeof getShadowRoot === 'function') {
          // figure out if we should consider the node to be in an undisclosed shadow and use the
          //  'non-zero-area' fallback
          var originalNode = node;
          while (node) {
            var parentElement = node.parentElement;
            var rootNode = getRootNode(node);
            if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow
            ) {
              // node has an undisclosed shadow which means we can only treat it as a black box, so we
              //  fall back to a non-zero-area test
              return isZeroArea(node);
            } else if (node.assignedSlot) {
              // iterate up slot
              node = node.assignedSlot;
            } else if (!parentElement && rootNode !== node.ownerDocument) {
              // cross shadow boundary
              node = rootNode.host;
            } else {
              // iterate up normal dom
              node = parentElement;
            }
          }
          node = originalNode;
        }
        // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support
        //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or
        //  it might be a falsy value, which means shadow DOM support is disabled

        // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)
        //  now we can just test to see if it would normally be visible or not, provided it's
        //  attached to the main document.
        // NOTE: We must consider case where node is inside a shadow DOM and given directly to
        //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.

        if (isNodeAttached(node)) {
          // this works wherever the node is: if there's at least one client rect, it's
          //  somehow displayed; it also covers the CSS 'display: contents' case where the
          //  node itself is hidden in place of its contents; and there's no need to search
          //  up the hierarchy either
          return !node.getClientRects().length;
        }

        // Else, the node isn't attached to the document, which means the `getClientRects()`
        //  API will __always__ return zero rects (this can happen, for example, if React
        //  is used to render nodes onto a detached tree, as confirmed in this thread:
        //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)
        //
        // It also means that even window.getComputedStyle(node).display will return `undefined`
        //  because styles are only computed for nodes that are in the document.
        //
        // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable
        //  somehow. Though it was never stated officially, anyone who has ever used tabbable
        //  APIs on nodes in detached containers has actually implicitly used tabbable in what
        //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck="none"` mode -- essentially
        //  considering __everything__ to be visible because of the innability to determine styles.
        //
        // v6.0.0: As of this major release, the default 'full' option __no longer treats detached
        //  nodes as visible with the 'none' fallback.__
        if (displayCheck !== 'legacy-full') {
          return true; // hidden
        }
        // else, fallback to 'none' mode and consider the node visible
      } else if (displayCheck === 'non-zero-area') {
        // NOTE: Even though this tests that the node's client rect is non-zero to determine
        //  whether it's displayed, and that a detached node will __always__ have a zero-area
        //  client rect, we don't special-case for whether the node is attached or not. In
        //  this mode, we do want to consider nodes that have a zero area to be hidden at all
        //  times, and that includes attached or not.
        return isZeroArea(node);
      }

      // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume
      //  it's visible
      return false;
    };

    // form fields (nested) inside a disabled fieldset are not focusable/tabbable
    //  unless they are in the _first_ <legend> element of the top-most disabled
    //  fieldset
    var isDisabledFromFieldset = function isDisabledFromFieldset(node) {
      if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
        var parentNode = node.parentElement;
        // check if `node` is contained in a disabled <fieldset>
        while (parentNode) {
          if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {
            // look for the first <legend> among the children of the disabled <fieldset>
            for (var i = 0; i < parentNode.children.length; i++) {
              var child = parentNode.children.item(i);
              // when the first <legend> (in document order) is found
              if (child.tagName === 'LEGEND') {
                // if its parent <fieldset> is not nested in another disabled <fieldset>,
                // return whether `node` is a descendant of its first <legend>
                return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);
              }
            }
            // the disabled <fieldset> containing `node` has no <legend>
            return true;
          }
          parentNode = parentNode.parentElement;
        }
      }

      // else, node's tabbable/focusable state should not be affected by a fieldset's
      //  enabled/disabled state
      return false;
    };
    var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {
      if (node.disabled || isHiddenInput(node) || isHidden(node, options) ||
      // For a details element with a summary, the summary element gets the focus
      isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
        return false;
      }
      return true;
    };
    var focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');
    var isFocusable = function isFocusable(node, options) {
      options = options || {};
      if (!node) {
        throw new Error('No node provided');
      }
      if (matches.call(node, focusableCandidateSelector) === false) {
        return false;
      }
      return isNodeMatchingSelectorFocusable(options, node);
    };

    /**
     * @license
     * Copyright 2016 Google Inc. All rights reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    (() => {
        var _a, _b, _c;
        /* Symbols for private properties */
        const _blockingElements = Symbol();
        const _alreadyInertElements = Symbol();
        const _topElParents = Symbol();
        const _siblingsToRestore = Symbol();
        const _parentMO = Symbol();
        /* Symbols for private static methods */
        const _topChanged = Symbol();
        const _swapInertedSibling = Symbol();
        const _inertSiblings = Symbol();
        const _restoreInertedSiblings = Symbol();
        const _getParents = Symbol();
        const _getDistributedChildren = Symbol();
        const _isInertable = Symbol();
        const _handleMutations = Symbol();
        class BlockingElementsImpl {
            constructor() {
                /**
                 * The blocking elements.
                 */
                this[_a] = [];
                /**
                 * Used to keep track of the parents of the top element, from the element
                 * itself up to body. When top changes, the old top might have been removed
                 * from the document, so we need to memoize the inerted parents' siblings
                 * in order to restore their inerteness when top changes.
                 */
                this[_b] = [];
                /**
                 * Elements that are already inert before the first blocking element is
                 * pushed.
                 */
                this[_c] = new Set();
            }
            destructor() {
                // Restore original inertness.
                this[_restoreInertedSiblings](this[_topElParents]);
                // Note we don't want to make these properties nullable on the class,
                // since then we'd need non-null casts in many places. Calling a method on
                // a BlockingElements instance after calling destructor will result in an
                // exception.
                const nullable = this;
                nullable[_blockingElements] = null;
                nullable[_topElParents] = null;
                nullable[_alreadyInertElements] = null;
            }
            get top() {
                const elems = this[_blockingElements];
                return elems[elems.length - 1] || null;
            }
            push(element) {
                if (!element || element === this.top) {
                    return;
                }
                // Remove it from the stack, we'll bring it to the top.
                this.remove(element);
                this[_topChanged](element);
                this[_blockingElements].push(element);
            }
            remove(element) {
                const i = this[_blockingElements].indexOf(element);
                if (i === -1) {
                    return false;
                }
                this[_blockingElements].splice(i, 1);
                // Top changed only if the removed element was the top element.
                if (i === this[_blockingElements].length) {
                    this[_topChanged](this.top);
                }
                return true;
            }
            pop() {
                const top = this.top;
                top && this.remove(top);
                return top;
            }
            has(element) {
                return this[_blockingElements].indexOf(element) !== -1;
            }
            /**
             * Sets `inert` to all document elements except the new top element, its
             * parents, and its distributed content.
             */
            [(_a = _blockingElements, _b = _topElParents, _c = _alreadyInertElements, _topChanged)](newTop) {
                const toKeepInert = this[_alreadyInertElements];
                const oldParents = this[_topElParents];
                // No new top, reset old top if any.
                if (!newTop) {
                    this[_restoreInertedSiblings](oldParents);
                    toKeepInert.clear();
                    this[_topElParents] = [];
                    return;
                }
                const newParents = this[_getParents](newTop);
                // New top is not contained in the main document!
                if (newParents[newParents.length - 1].parentNode !== document.body) {
                    throw Error('Non-connected element cannot be a blocking element');
                }
                // Cast here because we know we'll call _inertSiblings on newParents
                // below.
                this[_topElParents] = newParents;
                const toSkip = this[_getDistributedChildren](newTop);
                // No previous top element.
                if (!oldParents.length) {
                    this[_inertSiblings](newParents, toSkip, toKeepInert);
                    return;
                }
                let i = oldParents.length - 1;
                let j = newParents.length - 1;
                // Find common parent. Index 0 is the element itself (so stop before it).
                while (i > 0 && j > 0 && oldParents[i] === newParents[j]) {
                    i--;
                    j--;
                }
                // If up the parents tree there are 2 elements that are siblings, swap
                // the inerted sibling.
                if (oldParents[i] !== newParents[j]) {
                    this[_swapInertedSibling](oldParents[i], newParents[j]);
                }
                // Restore old parents siblings inertness.
                i > 0 && this[_restoreInertedSiblings](oldParents.slice(0, i));
                // Make new parents siblings inert.
                j > 0 && this[_inertSiblings](newParents.slice(0, j), toSkip, null);
            }
            /**
             * Swaps inertness between two sibling elements.
             * Sets the property `inert` over the attribute since the inert spec
             * doesn't specify if it should be reflected.
             * https://html.spec.whatwg.org/multipage/interaction.html#inert
             */
            [_swapInertedSibling](oldInert, newInert) {
                const siblingsToRestore = oldInert[_siblingsToRestore];
                // oldInert is not contained in siblings to restore, so we have to check
                // if it's inertable and if already inert.
                if (this[_isInertable](oldInert) && !oldInert.inert) {
                    oldInert.inert = true;
                    siblingsToRestore.add(oldInert);
                }
                // If newInert was already between the siblings to restore, it means it is
                // inertable and must be restored.
                if (siblingsToRestore.has(newInert)) {
                    newInert.inert = false;
                    siblingsToRestore.delete(newInert);
                }
                newInert[_parentMO] = oldInert[_parentMO];
                newInert[_siblingsToRestore] = siblingsToRestore;
                oldInert[_parentMO] = undefined;
                oldInert[_siblingsToRestore] = undefined;
            }
            /**
             * Restores original inertness to the siblings of the elements.
             * Sets the property `inert` over the attribute since the inert spec
             * doesn't specify if it should be reflected.
             * https://html.spec.whatwg.org/multipage/interaction.html#inert
             */
            [_restoreInertedSiblings](elements) {
                for (const element of elements) {
                    const mo = element[_parentMO];
                    mo.disconnect();
                    element[_parentMO] = undefined;
                    const siblings = element[_siblingsToRestore];
                    for (const sibling of siblings) {
                        sibling.inert = false;
                    }
                    element[_siblingsToRestore] = undefined;
                }
            }
            /**
             * Inerts the siblings of the elements except the elements to skip. Stores
             * the inerted siblings into the element's symbol `_siblingsToRestore`.
             * Pass `toKeepInert` to collect the already inert elements.
             * Sets the property `inert` over the attribute since the inert spec
             * doesn't specify if it should be reflected.
             * https://html.spec.whatwg.org/multipage/interaction.html#inert
             */
            [_inertSiblings](elements, toSkip, toKeepInert) {
                for (const element of elements) {
                    // Assume element is not a Document, so it must have a parentNode.
                    const parent = element.parentNode;
                    const children = parent.children;
                    const inertedSiblings = new Set();
                    for (let j = 0; j < children.length; j++) {
                        const sibling = children[j];
                        // Skip the input element, if not inertable or to be skipped.
                        if (sibling === element || !this[_isInertable](sibling) ||
                            (toSkip && toSkip.has(sibling))) {
                            continue;
                        }
                        // Should be collected since already inerted.
                        if (toKeepInert && sibling.inert) {
                            toKeepInert.add(sibling);
                        }
                        else {
                            sibling.inert = true;
                            inertedSiblings.add(sibling);
                        }
                    }
                    // Store the siblings that were inerted.
                    element[_siblingsToRestore] = inertedSiblings;
                    // Observe only immediate children mutations on the parent.
                    const mo = new MutationObserver(this[_handleMutations].bind(this));
                    element[_parentMO] = mo;
                    let parentToObserve = parent;
                    // If we're using the ShadyDOM polyfill, then our parent could be a
                    // shady root, which is an object that acts like a ShadowRoot, but isn't
                    // actually a node in the real DOM. Observe the real DOM parent instead.
                    const maybeShadyRoot = parentToObserve;
                    if (maybeShadyRoot.__shady && maybeShadyRoot.host) {
                        parentToObserve = maybeShadyRoot.host;
                    }
                    mo.observe(parentToObserve, {
                        childList: true,
                    });
                }
            }
            /**
             * Handles newly added/removed nodes by toggling their inertness.
             * It also checks if the current top Blocking Element has been removed,
             * notifying and removing it.
             */
            [_handleMutations](mutations) {
                const parents = this[_topElParents];
                const toKeepInert = this[_alreadyInertElements];
                for (const mutation of mutations) {
                    // If the target is a shadowRoot, get its host as we skip shadowRoots when
                    // computing _topElParents.
                    const target = mutation.target.host || mutation.target;
                    const idx = target === document.body ?
                        parents.length :
                        parents.indexOf(target);
                    const inertedChild = parents[idx - 1];
                    const inertedSiblings = inertedChild[_siblingsToRestore];
                    // To restore.
                    for (let i = 0; i < mutation.removedNodes.length; i++) {
                        const sibling = mutation.removedNodes[i];
                        if (sibling === inertedChild) {
                            console.info('Detected removal of the top Blocking Element.');
                            this.pop();
                            return;
                        }
                        if (inertedSiblings.has(sibling)) {
                            sibling.inert = false;
                            inertedSiblings.delete(sibling);
                        }
                    }
                    // To inert.
                    for (let i = 0; i < mutation.addedNodes.length; i++) {
                        const sibling = mutation.addedNodes[i];
                        if (!this[_isInertable](sibling)) {
                            continue;
                        }
                        if (toKeepInert && sibling.inert) {
                            toKeepInert.add(sibling);
                        }
                        else {
                            sibling.inert = true;
                            inertedSiblings.add(sibling);
                        }
                    }
                }
            }
            /**
             * Returns if the element is inertable.
             */
            [_isInertable](element) {
                return false === /^(style|template|script)$/.test(element.localName);
            }
            /**
             * Returns the list of newParents of an element, starting from element
             * (included) up to `document.body` (excluded).
             */
            [_getParents](element) {
                const parents = [];
                let current = element;
                // Stop to body.
                while (current && current !== document.body) {
                    // Skip shadow roots.
                    if (current.nodeType === Node.ELEMENT_NODE) {
                        parents.push(current);
                    }
                    // ShadowDom v1
                    if (current.assignedSlot) {
                        // Collect slots from deepest slot to top.
                        while (current = current.assignedSlot) {
                            parents.push(current);
                        }
                        // Continue the search on the top slot.
                        current = parents.pop();
                        continue;
                    }
                    current = current.parentNode ||
                        current.host;
                }
                return parents;
            }
            /**
             * Returns the distributed children of the element's shadow root.
             * Returns null if the element doesn't have a shadow root.
             */
            [_getDistributedChildren](element) {
                const shadowRoot = element.shadowRoot;
                if (!shadowRoot) {
                    return null;
                }
                const result = new Set();
                let i;
                let j;
                let nodes;
                const slots = shadowRoot.querySelectorAll('slot');
                if (slots.length && slots[0].assignedNodes) {
                    for (i = 0; i < slots.length; i++) {
                        nodes = slots[i].assignedNodes({
                            flatten: true,
                        });
                        for (j = 0; j < nodes.length; j++) {
                            if (nodes[j].nodeType === Node.ELEMENT_NODE) {
                                result.add(nodes[j]);
                            }
                        }
                    }
                    // No need to search for <content>.
                }
                return result;
            }
        }
        document.$blockingElements =
            new BlockingElementsImpl();
    })();

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    /**
     * This work is licensed under the W3C Software and Document License
     * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).
     */

    (function () {
      // Return early if we're not running inside of the browser.
      if (typeof window === 'undefined') {
        return;
      }

      // Convenience function for converting NodeLists.
      /** @type {typeof Array.prototype.slice} */
      var slice = Array.prototype.slice;

      /**
       * IE has a non-standard name for "matches".
       * @type {typeof Element.prototype.matches}
       */
      var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;

      /** @type {string} */
      var _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'details', 'summary', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');

      /**
       * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`
       * attribute.
       *
       * Its main functions are:
       *
       * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the
       *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering
       *   each focusable node in the subtree with the singleton `InertManager` which manages all known
       *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`
       *   instance exists for each focusable node which has at least one inert root as an ancestor.
       *
       * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`
       *   attribute is removed from the root node). This is handled in the destructor, which calls the
       *   `deregister` method on `InertManager` for each managed inert node.
       */

      var InertRoot = function () {
        /**
         * @param {!HTMLElement} rootElement The HTMLElement at the root of the inert subtree.
         * @param {!InertManager} inertManager The global singleton InertManager object.
         */
        function InertRoot(rootElement, inertManager) {
          _classCallCheck(this, InertRoot);

          /** @type {!InertManager} */
          this._inertManager = inertManager;

          /** @type {!HTMLElement} */
          this._rootElement = rootElement;

          /**
           * @type {!Set<!InertNode>}
           * All managed focusable nodes in this InertRoot's subtree.
           */
          this._managedNodes = new Set();

          // Make the subtree hidden from assistive technology
          if (this._rootElement.hasAttribute('aria-hidden')) {
            /** @type {?string} */
            this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');
          } else {
            this._savedAriaHidden = null;
          }
          this._rootElement.setAttribute('aria-hidden', 'true');

          // Make all focusable elements in the subtree unfocusable and add them to _managedNodes
          this._makeSubtreeUnfocusable(this._rootElement);

          // Watch for:
          // - any additions in the subtree: make them unfocusable too
          // - any removals from the subtree: remove them from this inert root's managed nodes
          // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable
          //   element, make that node a managed node.
          this._observer = new MutationObserver(this._onMutation.bind(this));
          this._observer.observe(this._rootElement, { attributes: true, childList: true, subtree: true });
        }

        /**
         * Call this whenever this object is about to become obsolete.  This unwinds all of the state
         * stored in this object and updates the state of all of the managed nodes.
         */


        _createClass(InertRoot, [{
          key: 'destructor',
          value: function destructor() {
            this._observer.disconnect();

            if (this._rootElement) {
              if (this._savedAriaHidden !== null) {
                this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);
              } else {
                this._rootElement.removeAttribute('aria-hidden');
              }
            }

            this._managedNodes.forEach(function (inertNode) {
              this._unmanageNode(inertNode.node);
            }, this);

            // Note we cast the nulls to the ANY type here because:
            // 1) We want the class properties to be declared as non-null, or else we
            //    need even more casts throughout this code. All bets are off if an
            //    instance has been destroyed and a method is called.
            // 2) We don't want to cast "this", because we want type-aware optimizations
            //    to know which properties we're setting.
            this._observer = /** @type {?} */null;
            this._rootElement = /** @type {?} */null;
            this._managedNodes = /** @type {?} */null;
            this._inertManager = /** @type {?} */null;
          }

          /**
           * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.
           */

        }, {
          key: '_makeSubtreeUnfocusable',


          /**
           * @param {!Node} startNode
           */
          value: function _makeSubtreeUnfocusable(startNode) {
            var _this2 = this;

            composedTreeWalk(startNode, function (node) {
              return _this2._visitNode(node);
            });

            var activeElement = document.activeElement;

            if (!document.body.contains(startNode)) {
              // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.
              var node = startNode;
              /** @type {!ShadowRoot|undefined} */
              var root = undefined;
              while (node) {
                if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
                  root = /** @type {!ShadowRoot} */node;
                  break;
                }
                node = node.parentNode;
              }
              if (root) {
                activeElement = root.activeElement;
              }
            }
            if (startNode.contains(activeElement)) {
              activeElement.blur();
              // In IE11, if an element is already focused, and then set to tabindex=-1
              // calling blur() will not actually move the focus.
              // To work around this we call focus() on the body instead.
              if (activeElement === document.activeElement) {
                document.body.focus();
              }
            }
          }

          /**
           * @param {!Node} node
           */

        }, {
          key: '_visitNode',
          value: function _visitNode(node) {
            if (node.nodeType !== Node.ELEMENT_NODE) {
              return;
            }
            var element = /** @type {!HTMLElement} */node;

            // If a descendant inert root becomes un-inert, its descendants will still be inert because of
            // this inert root, so all of its managed nodes need to be adopted by this InertRoot.
            if (element !== this._rootElement && element.hasAttribute('inert')) {
              this._adoptInertRoot(element);
            }

            if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {
              this._manageNode(element);
            }
          }

          /**
           * Register the given node with this InertRoot and with InertManager.
           * @param {!Node} node
           */

        }, {
          key: '_manageNode',
          value: function _manageNode(node) {
            var inertNode = this._inertManager.register(node, this);
            this._managedNodes.add(inertNode);
          }

          /**
           * Unregister the given node with this InertRoot and with InertManager.
           * @param {!Node} node
           */

        }, {
          key: '_unmanageNode',
          value: function _unmanageNode(node) {
            var inertNode = this._inertManager.deregister(node, this);
            if (inertNode) {
              this._managedNodes['delete'](inertNode);
            }
          }

          /**
           * Unregister the entire subtree starting at `startNode`.
           * @param {!Node} startNode
           */

        }, {
          key: '_unmanageSubtree',
          value: function _unmanageSubtree(startNode) {
            var _this3 = this;

            composedTreeWalk(startNode, function (node) {
              return _this3._unmanageNode(node);
            });
          }

          /**
           * If a descendant node is found with an `inert` attribute, adopt its managed nodes.
           * @param {!HTMLElement} node
           */

        }, {
          key: '_adoptInertRoot',
          value: function _adoptInertRoot(node) {
            var inertSubroot = this._inertManager.getInertRoot(node);

            // During initialisation this inert root may not have been registered yet,
            // so register it now if need be.
            if (!inertSubroot) {
              this._inertManager.setInert(node, true);
              inertSubroot = this._inertManager.getInertRoot(node);
            }

            inertSubroot.managedNodes.forEach(function (savedInertNode) {
              this._manageNode(savedInertNode.node);
            }, this);
          }

          /**
           * Callback used when mutation observer detects subtree additions, removals, or attribute changes.
           * @param {!Array<!MutationRecord>} records
           * @param {!MutationObserver} self
           */

        }, {
          key: '_onMutation',
          value: function _onMutation(records, self) {
            records.forEach(function (record) {
              var target = /** @type {!HTMLElement} */record.target;
              if (record.type === 'childList') {
                // Manage added nodes
                slice.call(record.addedNodes).forEach(function (node) {
                  this._makeSubtreeUnfocusable(node);
                }, this);

                // Un-manage removed nodes
                slice.call(record.removedNodes).forEach(function (node) {
                  this._unmanageSubtree(node);
                }, this);
              } else if (record.type === 'attributes') {
                if (record.attributeName === 'tabindex') {
                  // Re-initialise inert node if tabindex changes
                  this._manageNode(target);
                } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {
                  // If a new inert root is added, adopt its managed nodes and make sure it knows about the
                  // already managed nodes from this inert subroot.
                  this._adoptInertRoot(target);
                  var inertSubroot = this._inertManager.getInertRoot(target);
                  this._managedNodes.forEach(function (managedNode) {
                    if (target.contains(managedNode.node)) {
                      inertSubroot._manageNode(managedNode.node);
                    }
                  });
                }
              }
            }, this);
          }
        }, {
          key: 'managedNodes',
          get: function get() {
            return new Set(this._managedNodes);
          }

          /** @return {boolean} */

        }, {
          key: 'hasSavedAriaHidden',
          get: function get() {
            return this._savedAriaHidden !== null;
          }

          /** @param {?string} ariaHidden */

        }, {
          key: 'savedAriaHidden',
          set: function set(ariaHidden) {
            this._savedAriaHidden = ariaHidden;
          }

          /** @return {?string} */
          ,
          get: function get() {
            return this._savedAriaHidden;
          }
        }]);

        return InertRoot;
      }();

      /**
       * `InertNode` initialises and manages a single inert node.
       * A node is inert if it is a descendant of one or more inert root elements.
       *
       * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and
       * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element
       * is intrinsically focusable or not.
       *
       * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an
       * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the
       * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s
       * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,
       * or removes the `tabindex` attribute if the element is intrinsically focusable.
       */


      var InertNode = function () {
        /**
         * @param {!Node} node A focusable element to be made inert.
         * @param {!InertRoot} inertRoot The inert root element associated with this inert node.
         */
        function InertNode(node, inertRoot) {
          _classCallCheck(this, InertNode);

          /** @type {!Node} */
          this._node = node;

          /** @type {boolean} */
          this._overrodeFocusMethod = false;

          /**
           * @type {!Set<!InertRoot>} The set of descendant inert roots.
           *    If and only if this set becomes empty, this node is no longer inert.
           */
          this._inertRoots = new Set([inertRoot]);

          /** @type {?number} */
          this._savedTabIndex = null;

          /** @type {boolean} */
          this._destroyed = false;

          // Save any prior tabindex info and make this node untabbable
          this.ensureUntabbable();
        }

        /**
         * Call this whenever this object is about to become obsolete.
         * This makes the managed node focusable again and deletes all of the previously stored state.
         */


        _createClass(InertNode, [{
          key: 'destructor',
          value: function destructor() {
            this._throwIfDestroyed();

            if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {
              var element = /** @type {!HTMLElement} */this._node;
              if (this._savedTabIndex !== null) {
                element.setAttribute('tabindex', this._savedTabIndex);
              } else {
                element.removeAttribute('tabindex');
              }

              // Use `delete` to restore native focus method.
              if (this._overrodeFocusMethod) {
                delete element.focus;
              }
            }

            // See note in InertRoot.destructor for why we cast these nulls to ANY.
            this._node = /** @type {?} */null;
            this._inertRoots = /** @type {?} */null;
            this._destroyed = true;
          }

          /**
           * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.
           * If the object has been destroyed, any attempt to access it will cause an exception.
           */

        }, {
          key: '_throwIfDestroyed',


          /**
           * Throw if user tries to access destroyed InertNode.
           */
          value: function _throwIfDestroyed() {
            if (this.destroyed) {
              throw new Error('Trying to access destroyed InertNode');
            }
          }

          /** @return {boolean} */

        }, {
          key: 'ensureUntabbable',


          /** Save the existing tabindex value and make the node untabbable and unfocusable */
          value: function ensureUntabbable() {
            if (this.node.nodeType !== Node.ELEMENT_NODE) {
              return;
            }
            var element = /** @type {!HTMLElement} */this.node;
            if (matches.call(element, _focusableElementsString)) {
              if ( /** @type {!HTMLElement} */element.tabIndex === -1 && this.hasSavedTabIndex) {
                return;
              }

              if (element.hasAttribute('tabindex')) {
                this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;
              }
              element.setAttribute('tabindex', '-1');
              if (element.nodeType === Node.ELEMENT_NODE) {
                element.focus = function () {};
                this._overrodeFocusMethod = true;
              }
            } else if (element.hasAttribute('tabindex')) {
              this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;
              element.removeAttribute('tabindex');
            }
          }

          /**
           * Add another inert root to this inert node's set of managing inert roots.
           * @param {!InertRoot} inertRoot
           */

        }, {
          key: 'addInertRoot',
          value: function addInertRoot(inertRoot) {
            this._throwIfDestroyed();
            this._inertRoots.add(inertRoot);
          }

          /**
           * Remove the given inert root from this inert node's set of managing inert roots.
           * If the set of managing inert roots becomes empty, this node is no longer inert,
           * so the object should be destroyed.
           * @param {!InertRoot} inertRoot
           */

        }, {
          key: 'removeInertRoot',
          value: function removeInertRoot(inertRoot) {
            this._throwIfDestroyed();
            this._inertRoots['delete'](inertRoot);
            if (this._inertRoots.size === 0) {
              this.destructor();
            }
          }
        }, {
          key: 'destroyed',
          get: function get() {
            return (/** @type {!InertNode} */this._destroyed
            );
          }
        }, {
          key: 'hasSavedTabIndex',
          get: function get() {
            return this._savedTabIndex !== null;
          }

          /** @return {!Node} */

        }, {
          key: 'node',
          get: function get() {
            this._throwIfDestroyed();
            return this._node;
          }

          /** @param {?number} tabIndex */

        }, {
          key: 'savedTabIndex',
          set: function set(tabIndex) {
            this._throwIfDestroyed();
            this._savedTabIndex = tabIndex;
          }

          /** @return {?number} */
          ,
          get: function get() {
            this._throwIfDestroyed();
            return this._savedTabIndex;
          }
        }]);

        return InertNode;
      }();

      /**
       * InertManager is a per-document singleton object which manages all inert roots and nodes.
       *
       * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`
       * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.
       * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant
       * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance
       * is created for each such node, via the `_managedNodes` map.
       */


      var InertManager = function () {
        /**
         * @param {!Document} document
         */
        function InertManager(document) {
          _classCallCheck(this, InertManager);

          if (!document) {
            throw new Error('Missing required argument; InertManager needs to wrap a document.');
          }

          /** @type {!Document} */
          this._document = document;

          /**
           * All managed nodes known to this InertManager. In a map to allow looking up by Node.
           * @type {!Map<!Node, !InertNode>}
           */
          this._managedNodes = new Map();

          /**
           * All inert roots known to this InertManager. In a map to allow looking up by Node.
           * @type {!Map<!Node, !InertRoot>}
           */
          this._inertRoots = new Map();

          /**
           * Observer for mutations on `document.body`.
           * @type {!MutationObserver}
           */
          this._observer = new MutationObserver(this._watchForInert.bind(this));

          // Add inert style.
          addInertStyle(document.head || document.body || document.documentElement);

          // Wait for document to be loaded.
          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));
          } else {
            this._onDocumentLoaded();
          }
        }

        /**
         * Set whether the given element should be an inert root or not.
         * @param {!HTMLElement} root
         * @param {boolean} inert
         */


        _createClass(InertManager, [{
          key: 'setInert',
          value: function setInert(root, inert) {
            if (inert) {
              if (this._inertRoots.has(root)) {
                // element is already inert
                return;
              }

              var inertRoot = new InertRoot(root, this);
              root.setAttribute('inert', '');
              this._inertRoots.set(root, inertRoot);
              // If not contained in the document, it must be in a shadowRoot.
              // Ensure inert styles are added there.
              if (!this._document.body.contains(root)) {
                var parent = root.parentNode;
                while (parent) {
                  if (parent.nodeType === 11) {
                    addInertStyle(parent);
                  }
                  parent = parent.parentNode;
                }
              }
            } else {
              if (!this._inertRoots.has(root)) {
                // element is already non-inert
                return;
              }

              var _inertRoot = this._inertRoots.get(root);
              _inertRoot.destructor();
              this._inertRoots['delete'](root);
              root.removeAttribute('inert');
            }
          }

          /**
           * Get the InertRoot object corresponding to the given inert root element, if any.
           * @param {!Node} element
           * @return {!InertRoot|undefined}
           */

        }, {
          key: 'getInertRoot',
          value: function getInertRoot(element) {
            return this._inertRoots.get(element);
          }

          /**
           * Register the given InertRoot as managing the given node.
           * In the case where the node has a previously existing inert root, this inert root will
           * be added to its set of inert roots.
           * @param {!Node} node
           * @param {!InertRoot} inertRoot
           * @return {!InertNode} inertNode
           */

        }, {
          key: 'register',
          value: function register(node, inertRoot) {
            var inertNode = this._managedNodes.get(node);
            if (inertNode !== undefined) {
              // node was already in an inert subtree
              inertNode.addInertRoot(inertRoot);
            } else {
              inertNode = new InertNode(node, inertRoot);
            }

            this._managedNodes.set(node, inertNode);

            return inertNode;
          }

          /**
           * De-register the given InertRoot as managing the given inert node.
           * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert
           * node from the InertManager's set of managed nodes if it is destroyed.
           * If the node is not currently managed, this is essentially a no-op.
           * @param {!Node} node
           * @param {!InertRoot} inertRoot
           * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.
           */

        }, {
          key: 'deregister',
          value: function deregister(node, inertRoot) {
            var inertNode = this._managedNodes.get(node);
            if (!inertNode) {
              return null;
            }

            inertNode.removeInertRoot(inertRoot);
            if (inertNode.destroyed) {
              this._managedNodes['delete'](node);
            }

            return inertNode;
          }

          /**
           * Callback used when document has finished loading.
           */

        }, {
          key: '_onDocumentLoaded',
          value: function _onDocumentLoaded() {
            // Find all inert roots in document and make them actually inert.
            var inertElements = slice.call(this._document.querySelectorAll('[inert]'));
            inertElements.forEach(function (inertElement) {
              this.setInert(inertElement, true);
            }, this);

            // Comment this out to use programmatic API only.
            this._observer.observe(this._document.body || this._document.documentElement, { attributes: true, subtree: true, childList: true });
          }

          /**
           * Callback used when mutation observer detects attribute changes.
           * @param {!Array<!MutationRecord>} records
           * @param {!MutationObserver} self
           */

        }, {
          key: '_watchForInert',
          value: function _watchForInert(records, self) {
            var _this = this;
            records.forEach(function (record) {
              switch (record.type) {
                case 'childList':
                  slice.call(record.addedNodes).forEach(function (node) {
                    if (node.nodeType !== Node.ELEMENT_NODE) {
                      return;
                    }
                    var inertElements = slice.call(node.querySelectorAll('[inert]'));
                    if (matches.call(node, '[inert]')) {
                      inertElements.unshift(node);
                    }
                    inertElements.forEach(function (inertElement) {
                      this.setInert(inertElement, true);
                    }, _this);
                  }, _this);
                  break;
                case 'attributes':
                  if (record.attributeName !== 'inert') {
                    return;
                  }
                  var target = /** @type {!HTMLElement} */record.target;
                  var inert = target.hasAttribute('inert');
                  _this.setInert(target, inert);
                  break;
              }
            }, this);
          }
        }]);

        return InertManager;
      }();

      /**
       * Recursively walk the composed tree from |node|.
       * @param {!Node} node
       * @param {(function (!HTMLElement))=} callback Callback to be called for each element traversed,
       *     before descending into child nodes.
       * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.
       */


      function composedTreeWalk(node, callback, shadowRootAncestor) {
        if (node.nodeType == Node.ELEMENT_NODE) {
          var element = /** @type {!HTMLElement} */node;
          if (callback) {
            callback(element);
          }

          // Descend into node:
          // If it has a ShadowRoot, ignore all child elements - these will be picked
          // up by the <content> or <shadow> elements. Descend straight into the
          // ShadowRoot.
          var shadowRoot = /** @type {!HTMLElement} */element.shadowRoot;
          if (shadowRoot) {
            composedTreeWalk(shadowRoot, callback);
            return;
          }

          // If it is a <content> element, descend into distributed elements - these
          // are elements from outside the shadow root which are rendered inside the
          // shadow DOM.
          if (element.localName == 'content') {
            var content = /** @type {!HTMLContentElement} */element;
            // Verifies if ShadowDom v0 is supported.
            var distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];
            for (var i = 0; i < distributedNodes.length; i++) {
              composedTreeWalk(distributedNodes[i], callback);
            }
            return;
          }

          // If it is a <slot> element, descend into assigned nodes - these
          // are elements from outside the shadow root which are rendered inside the
          // shadow DOM.
          if (element.localName == 'slot') {
            var slot = /** @type {!HTMLSlotElement} */element;
            // Verify if ShadowDom v1 is supported.
            var _distributedNodes = slot.assignedNodes ? slot.assignedNodes({ flatten: true }) : [];
            for (var _i = 0; _i < _distributedNodes.length; _i++) {
              composedTreeWalk(_distributedNodes[_i], callback);
            }
            return;
          }
        }

        // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>
        // element, nor a <shadow> element recurse normally.
        var child = node.firstChild;
        while (child != null) {
          composedTreeWalk(child, callback);
          child = child.nextSibling;
        }
      }

      /**
       * Adds a style element to the node containing the inert specific styles
       * @param {!Node} node
       */
      function addInertStyle(node) {
        if (node.querySelector('style#inert-style, link#inert-style')) {
          return;
        }
        var style = document.createElement('style');
        style.setAttribute('id', 'inert-style');
        style.textContent = '\n' + '[inert] {\n' + '  pointer-events: none;\n' + '  cursor: default;\n' + '}\n' + '\n' + '[inert], [inert] * {\n' + '  -webkit-user-select: none;\n' + '  -moz-user-select: none;\n' + '  -ms-user-select: none;\n' + '  user-select: none;\n' + '}\n';
        node.appendChild(style);
      }

      if (!HTMLElement.prototype.hasOwnProperty('inert')) {
        /** @type {!InertManager} */
        var inertManager = new InertManager(document);

        Object.defineProperty(HTMLElement.prototype, 'inert', {
          enumerable: true,
          /** @this {!HTMLElement} */
          get: function get() {
            return this.hasAttribute('inert');
          },
          /** @this {!HTMLElement} */
          set: function set(inert) {
            inertManager.setInert(this, inert);
          }
        });
      }
    })();

    function getDocument(element) { return (element?.ownerDocument ?? document ?? window.document ?? globalThis.document); }

    function blockingElements() { return getDocument().$blockingElements; }
    /**
     * Allows an element to trap focus by applying the "inert" attribute to all sibling, aunt, and uncle nodes.
     *
     * Automatically handles consecutive calls with a loosely applied stack operation
     * (specifically via `blockingElements`, with a small polyfill because I'm not sure how long
     * it'll take to find its way into the spec, if ever)
     * @param target
     */
    function useBlockingElement(enabled, getTarget) {
        const stableGetTarget = useStableCallback(getTarget);
        const getDocument = useStableCallback(() => (getTarget()?.ownerDocument ?? globalThis.document));
        useActiveElement({
            activeElementParameters: {
                getDocument,
                onLastActiveElementChange: useStableCallback((e) => {
                    if (e) {
                        if (enabled)
                            setLastActiveWhenOpen(e);
                        else
                            setLastActiveWhenClosed(e);
                    }
                })
            }
        });
        const [getTop, setTop] = usePassiveState(null, returnNull);
        const [getLastActiveWhenClosed, setLastActiveWhenClosed] = usePassiveState(null, returnNull);
        const [getLastActiveWhenOpen, setLastActiveWhenOpen] = usePassiveState(null, returnNull);
        /**
         * Push/pop the element from the blockingElements stack.
         */
        s(() => {
            const target = stableGetTarget();
            if (enabled) {
                // Sometimes blockingElements will fail if, for example,
                // the target element isn't connected to document.body.
                // This is rare, but it's better to fail silently with weird tabbing behavior
                // than to crash the entire application.
                try {
                    blockingElements().push(target);
                    setTop(target);
                    return () => {
                        blockingElements().remove(target);
                    };
                }
                catch (ex) {
                    // Well, semi-silently.
                    console.error(ex);
                }
            }
        }, [enabled]);
        return { getTop, getLastActiveWhenClosed, getLastActiveWhenOpen };
    }

    //const elementsToRestoreFocusTo = new Map<Element | null, (Node & HTMLOrSVGElement)>();
    function useFocusTrap({ focusTrapParameters: { onlyMoveFocus, trapActive, focusPopup: focusSelfUnstable, focusOpener: focusOpenerUnstable }, refElementParameters }) {
        const { onElementChange, ...rest } = (refElementParameters || {});
        const focusSelf = useStableCallback(focusSelfUnstable);
        const focusOpener = useStableCallback(focusOpenerUnstable);
        h(() => {
            if (trapActive) {
                let top = getTop();
                getLastActiveWhenOpen();
                {
                    top ??= refElementReturn.getElement();
                    console.assert(!!top);
                    if (top)
                        focusSelf(top, () => findFirstFocusable(top));
                }
            }
            else {
                const lastActive = getLastActiveWhenClosed();
                if (lastActive)
                    focusOpener(lastActive);
            }
        }, [trapActive]);
        const { refElementReturn } = useRefElement({
            refElementParameters: { onElementChange, ...rest }
        });
        const { getElement } = refElementReturn;
        const { getTop, getLastActiveWhenClosed, getLastActiveWhenOpen } = useBlockingElement(trapActive && !onlyMoveFocus, getElement);
        return {
            refElementReturn,
            focusTrapReturn: { propsUnstable: { "aria-modal": trapActive ? "true" : undefined } }
        };
    }
    /**
     * Returns the first focusable element contained within the given node, or null if none are found.
     * @param element
     * @returns
     */
    function findFirstFocusable(element) {
        return findFirstCondition(element, node => node instanceof Element && isFocusable(node));
    }
    function findFirstCondition(element, filter) {
        if (element && filter(element))
            return element;
        console.assert(!!element);
        element ??= document.body;
        const treeWalker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, { acceptNode: (node) => (filter(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP) });
        const firstFocusable = treeWalker.firstChild();
        return firstFocusable;
    }

    /** Arguments passed to the child 'useLinearNavigationChild` */
    //export interface UseLinearNavigationChildInfo { }
    /**
     * When used in tandem with `useRovingTabIndex`, allows control of
     * the tabbable index with the arrow keys.
     *
     * @see useListNavigation, which packages everything up together.
     */
    function useLinearNavigation({ rovingTabIndexReturn, linearNavigationParameters }) {
        const { getHighestIndex, indexDemangler, indexMangler, isValid, navigatePastEnd, navigatePastStart } = linearNavigationParameters;
        const { getTabbableIndex, setTabbableIndex } = rovingTabIndexReturn;
        const navigateAbsolute = T$1((i, e, fromUserInteraction) => {
            const target = indexDemangler(i);
            const { value } = tryNavigateToIndex({ isValid, highestChildIndex: getHighestIndex(), indexDemangler, indexMangler, searchDirection: -1, target });
            setTabbableIndex(value, e, fromUserInteraction);
        }, []);
        const navigateToFirst = useStableCallback((e, fromUserInteraction) => { navigateAbsolute(0, e, fromUserInteraction); });
        const navigateToLast = useStableCallback((e, fromUserInteraction) => { navigateAbsolute(getHighestIndex(), e, fromUserInteraction); });
        const navigateRelative2 = useStableCallback((e, offset, fromUserInteraction, mode) => {
            const original = (getTabbableIndex() ?? 0);
            const { status, value } = tryNavigateToIndex({ isValid, highestChildIndex: getHighestIndex(), indexDemangler, indexMangler, searchDirection: (Math.sign(offset) || 1), target: indexDemangler(indexMangler(original) + offset) });
            if (status == "past-end") {
                if (navigatePastEnd == "wrap") {
                    if (mode == "single")
                        navigateToFirst(e, fromUserInteraction);
                    else {
                        /* eslint-disable no-constant-condition */
                        // Uncomment to allow page up/down to wrap after hitting the top/bottom once.
                        // It works fine, the problem isn't that -- the problem is it just feels wrong. 
                        // Page Up/Down don't feel like they should wrap, even if normally requested. 
                        // That's the arrow keys' domain.
                        navigateToLast(e, fromUserInteraction);
                    }
                    return "stop";
                }
                else if (navigatePastEnd == "passthrough") {
                    return "passthrough";
                }
                else {
                    navigatePastEnd();
                    return "stop";
                }
            }
            else if (status == "past-start") {
                if (navigatePastStart == "wrap") {
                    if (mode == "single") {
                        navigateToLast(e, fromUserInteraction);
                    }
                    else {
                        /* eslint-disable no-constant-condition */
                        // See above. It works fine but just feels wrong to wrap on Page Up/Down.
                        navigateToFirst(e, fromUserInteraction);
                    }
                    return "stop";
                }
                else if (navigatePastStart == "passthrough") {
                    return "passthrough";
                }
                else {
                    navigatePastStart();
                    return "stop";
                }
            }
            else {
                setTabbableIndex(value, e, fromUserInteraction);
                return "stop";
            }
        });
        const navigateToNext = useStableCallback((e, fromUserInteraction) => {
            return navigateRelative2(e, 1, fromUserInteraction, "single");
            // setTabbableIndex(navigateRelative((getTabbableIndex() ?? 0), +1), fromUserInteraction)
        });
        const navigateToPrev = useStableCallback((e, fromUserInteraction) => {
            return navigateRelative2(e, -1, fromUserInteraction, "single");
            // setTabbableIndex(navigateRelative((getTabbableIndex() ?? 0), +1), fromUserInteraction)
        });
        const getDisableArrowKeys = useStableGetter(linearNavigationParameters.disableArrowKeys);
        const getDisableHomeEndKeys = useStableGetter(linearNavigationParameters.disableHomeEndKeys);
        const getNavigationDirection = useStableGetter(linearNavigationParameters.navigationDirection);
        const getPageNavigationSize = useStableGetter(linearNavigationParameters.pageNavigationSize);
        const stableProps = _({
            onKeyDown: (e) => {
                // Not handled by typeahead (i.e. assume this is a keyboard shortcut)
                if (e.ctrlKey || e.metaKey)
                    return;
                //const info = getLogicalDirectionInfo();
                const navigationDirection = getNavigationDirection();
                const disableArrowKeys = getDisableArrowKeys();
                const disableHomeEndKeys = getDisableHomeEndKeys();
                const pageNavigationSize = getPageNavigationSize();
                const allowsVerticalNavigation = (navigationDirection == "vertical" || navigationDirection == "either");
                const allowsHorizontalNavigation = (navigationDirection == "horizontal" || navigationDirection == "either");
                let truePageNavigationSize = pageNavigationSize;
                if (truePageNavigationSize < 1) {
                    truePageNavigationSize = Math.round(pageNavigationSize * Math.max(100, getHighestIndex() + 1));
                }
                switch (e.key) {
                    case "ArrowUp": {
                        //const propName = (info?.blockOrientation === "vertical" ? "blockDirection" : "inlineDirection");
                        const directionAllowed = (!disableArrowKeys && allowsVerticalNavigation);
                        if (directionAllowed) {
                            const result = navigateToPrev(e, true);
                            if (result != "passthrough") {
                                e.preventDefault();
                                e.stopPropagation();
                            }
                        }
                        break;
                    }
                    case "ArrowDown": {
                        const directionAllowed = (!disableArrowKeys && allowsVerticalNavigation);
                        if (directionAllowed) {
                            const result = navigateToNext(e, true);
                            if (result != "passthrough") {
                                e.preventDefault();
                                e.stopPropagation();
                            }
                        }
                        break;
                    }
                    case "ArrowLeft": {
                        const directionAllowed = (!disableArrowKeys && allowsHorizontalNavigation);
                        if (directionAllowed) {
                            const result = navigateToPrev(e, true);
                            if (result != "passthrough") {
                                e.preventDefault();
                                e.stopPropagation();
                            }
                        }
                        break;
                    }
                    case "ArrowRight": {
                        const directionAllowed = (!disableArrowKeys && allowsHorizontalNavigation);
                        if (directionAllowed) {
                            const result = navigateToNext(e, true);
                            if (result != "passthrough") {
                                e.preventDefault();
                                e.stopPropagation();
                            }
                        }
                        break;
                    }
                    case "PageUp": {
                        if (truePageNavigationSize > 0) {
                            navigateRelative2(e, -truePageNavigationSize, true, "page");
                            e.preventDefault();
                            e.stopPropagation();
                        }
                        break;
                    }
                    case "PageDown": {
                        if (truePageNavigationSize > 0) {
                            navigateRelative2(e, truePageNavigationSize, true, "page");
                            e.preventDefault();
                            e.stopPropagation();
                        }
                        break;
                    }
                    case "Home":
                        if (!disableHomeEndKeys) {
                            navigateToFirst(e, true);
                            e.preventDefault();
                            e.stopPropagation();
                        }
                        break;
                    case "End":
                        if (!disableHomeEndKeys) {
                            navigateToLast(e, true);
                            e.preventDefault();
                            e.stopPropagation();
                        }
                        break;
                }
            }
        });
        return {
            linearNavigationReturn: {
                propsStable: stableProps.current
            }
        };
    }
    function tryNavigateToIndex({ isValid, highestChildIndex, searchDirection, indexDemangler, indexMangler, target }) {
        if (searchDirection === -1) {
            let bestUpResult = undefined;
            bestUpResult = tryNavigateUp({ isValid, indexDemangler, indexMangler, target });
            bestUpResult ??= tryNavigateDown({ isValid, indexDemangler, indexMangler, target, highestChildIndex });
            return bestUpResult || { value: target, status: "normal" };
        }
        else {
            let bestDownResult = undefined;
            bestDownResult = tryNavigateDown({ isValid, indexDemangler, indexMangler, target, highestChildIndex });
            bestDownResult ??= tryNavigateUp({ isValid, indexDemangler, indexMangler, target });
            return bestDownResult || { value: target, status: "normal" };
        }
    }
    function tryNavigateUp({ isValid, indexDemangler, indexMangler, target }) {
        const lower = 0;
        while (target >= lower && !isValid(target))
            target = indexDemangler(indexMangler(target) - 1);
        if (!isValid(target)) {
            return undefined;
        }
        if (target < lower) {
            return { value: indexDemangler(lower), status: "past-start" };
        }
        else {
            return { value: target, status: "normal" };
        }
    }
    function tryNavigateDown({ isValid, indexDemangler, indexMangler, target, highestChildIndex: upper }) {
        while (target <= upper && !isValid(target))
            target = indexDemangler(indexMangler(target) + 1);
        if (!isValid(target)) {
            return undefined;
        }
        if (target > upper) {
            return { value: indexDemangler(upper), status: "past-end" };
        }
        else {
            return { value: target, status: "normal" };
        }
    }

    /**
     * Slightly enhanced version of `useState` that includes a getter that remains constant
     * (i.e. you can use it in `useEffect` and friends without it being a dependency).
     *
     * @param initialState
     * @returns
     */
    function useState(initialState) {
        // We keep both, but overrride the `setState` functionality
        const [state, setStateP] = p(initialState);
        const ref = _(state);
        // Hijack the normal setter function 
        // to also set our ref to the new value
        const setState = T$1(value => {
            if (typeof value === "function") {
                const callback = value;
                setStateP(prevValue => {
                    const nextValue = callback(prevValue);
                    ref.current = nextValue;
                    return nextValue;
                });
            }
            else {
                ref.current = value;
                setStateP(value);
            }
        }, []);
        const getState = () => { return ref.current; };
        console.assert(ref.current === state || (typeof state === "number" && isNaN(state)));
        return [state, setState, getState];
    }

    /**
     * Implements a roving tabindex system where only one "focusable"
     * component in a set is able to receive a tab focus. *Which*
     * of those elements receives focus is determined by you, but it's
     * recommended to offload that logic then to another hook, like
     * `useLinearNavigation`, which lets you change the tabbable
     * element with the arrow keys, `useTypeaheadNavigation`, which
     * lets you change the tabbable index with typeahead, or
     * `useListNavigation` if you just want everything bundled together.
     *
     * Note that the child hook returned by this function must be used
     * by every child that uses this roving tabindex logic.  The
     * prop-modifying hook *that* hook returns should then be used
     * on the child's element, as well as any other elements you'd like
     * to be explicitly made untabbable too.
     *
     * `shouldFocusOnChange` should return true if focus is
     * contained within whatever element contains the roving tab index.
     * Generally as simple as the following:
     * ```
     * const [focusedInner, setFocusedInner] = useState(false);
     * const { useHasFocusProps } = useHasFocus<ParentElement>({ setFocusedInner });
     * const focusOnChange = (focusedInner != false);
     * ```
     * It's not included here because `useRovingTabIndex` doesn't know
     * anything about the container element, only children elements.
     * And just as well! Children should be allowed at the root,
     * regardless of if it's the whole app or just a given component.
     */
    function useRovingTabIndex({ managedChildrenReturn: { getChildren }, rovingTabIndexParameters: { untabbable, initiallyTabbedIndex, onTabbableIndexChange }, ..._void1 }) {
        const getUntabbable = useStableGetter(untabbable);
        //initiallyTabbedIndex ??= 0;
        // Override the actual setter to include some extra logic related to avoiding hidden children, 
        // what to do when we're untabbable, what to do when we're tabbable but given `null`, etc.
        const setTabbableIndex = useStableCallback((updater, reason, fromUserInteraction) => {
            const children = getChildren();
            // Notify the relevant children that they should become tabbable/untabbable,
            // but also handle focus management when we changed due to user interaction
            return changeTabbableIndex(function returnModifiedTabbableIndex(prevIndex) {
                let nextIndex = ((typeof updater === "function") ? updater(prevIndex ?? null) : updater);
                const untabbable = getUntabbable();
                if (nextIndex != null)
                    setLastNonNullIndex(nextIndex);
                if (untabbable)
                    return null;
                if (prevIndex != nextIndex) {
                    const nextChild = nextIndex == null ? null : children.getAt(nextIndex);
                    if (nextChild?.hidden) {
                        return prevIndex ?? (untabbable ? null : 0);
                    }
                    if (nextChild != null && fromUserInteraction) {
                        const element = nextChild.getElement();
                        if (element) {
                            if (document.activeElement == null || !element.contains(document.activeElement))
                                nextChild.focusSelf(element);
                        }
                    }
                }
                // TODO: Redundant?
                if (nextIndex != null)
                    setLastNonNullIndex(nextIndex);
                return nextIndex ?? (untabbable ? null : 0);
            }, reason);
        }, []);
        // When we switch from tabbable to non/tabbable, we really want to remember the last tabbable child.
        // So every time we change the index for any reason, record that change as a back up here that can be restored.
        const [getLastNonNullIndex, setLastNonNullIndex] = usePassiveState(null, T$1(() => (initiallyTabbedIndex ?? 0), []));
        // Any time we switch to being untabbable, set the current tabbable index accordingly.
        h(() => {
            if (untabbable)
                changeTabbableIndex(null, undefined);
            else {
                changeTabbableIndex(getLastNonNullIndex(), undefined);
            }
        }, [untabbable]);
        // Boilerplate related to notifying individual children when they become tabbable/untabbable
        const getTabbableAt = T$1((m) => { return m.getTabbable(); }, []);
        const setTabbableAt = T$1((m, t) => { m.setTabbable(t); }, []);
        const isTabbableValid = T$1((m) => { return !m.hidden; }, []);
        const { changeIndex: changeTabbableIndex, getCurrentIndex: getTabbableIndex, reevaluateClosestFit } = useChildrenFlag({
            initialIndex: initiallyTabbedIndex ?? (untabbable ? null : 0),
            onIndexChange: onTabbableIndexChange,
            getChildren,
            closestFit: true,
            getAt: getTabbableAt,
            isValid: isTabbableValid,
            setAt: setTabbableAt,
        });
        const focusSelf = T$1((reason) => {
            const children = getChildren();
            const index = getTabbableIndex();
            if (index != null) {
                const element = children.getAt(index)?.getElement();
                children.getAt(index)?.focusSelf?.(element);
            }
            else
                setTabbableIndex(null, reason, true);
        }, []);
        const rovingTabIndexChildContext = useStableObject({
            setTabbableIndex,
            getInitiallyTabbedIndex: T$1(() => { return initiallyTabbedIndex ?? (untabbable ? null : 0); }, []),
            reevaluateClosestFit
        });
        return {
            managedChildrenParameters: { onChildrenMountChange: reevaluateClosestFit, },
            rovingTabIndexReturn: { setTabbableIndex, getTabbableIndex, focusSelf },
            rovingTabIndexChildContext
        };
    }
    function useRovingTabIndexChild({ managedChildParameters: { index, ..._void2 }, rovingTabIndexChildContext: { reevaluateClosestFit, setTabbableIndex, getInitiallyTabbedIndex }, rovingTabIndexChildParameters, }) {
        const { hidden, ..._void1 } = rovingTabIndexChildParameters;
        const [tabbable, setTabbable, getTabbable] = useState(getInitiallyTabbedIndex() === index);
        h(() => {
            reevaluateClosestFit();
        }, [!!hidden]);
        return {
            hasCurrentFocusParameters: {
                onCurrentFocusedInnerChanged: useStableCallback((focused, _prevFocused, e) => {
                    if (focused) {
                        setTabbableIndex(index, e, false);
                    }
                })
            },
            rovingTabIndexChildReturn: {
                propsUnstable: { tabIndex: (tabbable ? 0 : -1) },
                tabbable,
                getTabbable,
                setTabbable
            }
        };
    }

    function useTextContent({ refElementReturn: { getElement }, textContentParameters: { getText, onTextContentChange, hidden } }) {
        const [getTextContent, setTextContent] = usePassiveState(onTextContentChange, returnNull, runImmediately);
        h(() => {
            if (!hidden) {
                const element = getElement();
                if (element) {
                    const textContent = getText(element);
                    if (textContent) {
                        setTextContent(textContent);
                    }
                }
            }
        });
        return { textContentReturn: { getTextContent } };
    }

    /**
     * Allows for the selection of a managed child by typing the given text associated with it.
     *
     * @see useListNavigation, which packages everything up together.
     */
    function useTypeaheadNavigation({ typeaheadNavigationParameters: { collator, typeaheadTimeout, noTypeahead, isValid, ..._void3 }, rovingTabIndexReturn: { getTabbableIndex: getIndex, setTabbableIndex: setIndex, ..._void1 }, ..._void2 }) {
        // For typeahead, keep track of what our current "search" string is (if we have one)
        // and also clear it every 1000 ms since the last time it changed.
        // Next, keep a mapping of typeahead values to indices for faster searching.
        // And, for the user's sake, let them know when their typeahead can't match anything anymore
        const [getCurrentTypeahead, setCurrentTypeahead] = usePassiveState(useStableCallback((currentTypeahead, prev, reason) => {
            const handle = setTimeout(() => { setCurrentTypeahead(null, undefined); setTypeaheadStatus("none"); }, typeaheadTimeout ?? 1000);
            updateBasedOnTypeaheadChange(currentTypeahead, reason);
            return () => clearTimeout(handle);
        }));
        //useTimeout({ timeout: typeaheadTimeout ?? 1000, callback: () => { setCurrentTypeahead(null); setInvalidTypeahead(null); }, triggerIndex: currentTypeahead });
        const sortedTypeaheadInfo = _([]);
        const [typeaheadStatus, setTypeaheadStatus] = useState("none");
        // Handle typeahead for input method editors as well
        // Essentially, when active, ignore further keys 
        // because we're waiting for a CompositionEnd event
        const [, setImeActive, getImeActive] = useState(false);
        // Because composition events fire *after* keydown events 
        // (but within the same task, which, TODO, could be browser-dependent),
        // we can use this to keep track of which event we're listening for on the first keydown.
        const [nextTypeaheadChar, setNextTypeaheadChar] = useState(null);
        s(() => {
            if (nextTypeaheadChar !== null) {
                setCurrentTypeahead(typeahead => ((typeahead ?? "") + nextTypeaheadChar), undefined);
                setNextTypeaheadChar(null);
            }
        }, [nextTypeaheadChar]);
        const comparatorShared = useStableCallback((safeLhs, safeRhs) => {
            let compare;
            // For the purposes of typeahead, only compare a string of the same size as our currently typed string.
            // By normalizing them first, we ensure this byte-by-byte handling of raw character data works out okay.
            safeLhs = safeLhs.normalize("NFD");
            safeRhs = safeRhs.normalize("NFD");
            if (collator)
                compare = collator.compare(safeLhs, safeRhs);
            else
                compare = safeLhs.toLowerCase().localeCompare(safeRhs.toLowerCase() ?? "");
            return compare;
        });
        const insertingComparator = useStableCallback((lhs, rhs) => {
            if (typeof lhs === "string" && typeof rhs.text === "string") {
                return comparatorShared(lhs, rhs.text);
            }
            return lhs - rhs;
        });
        const typeaheadComparator = useStableCallback((lhs, rhs) => {
            if (typeof lhs === "string" && typeof rhs.text === "string") {
                // During typeahead, all strings longer than ours should be truncated
                // so that they're all considered equally by that point.
                return comparatorShared(lhs, rhs.text.substring(0, lhs.length));
            }
            return lhs - rhs;
        });
        const isDisabled = useStableGetter(noTypeahead);
        const propsStable = _({
            onKeyDown: useStableCallback((e) => {
                if (isDisabled())
                    return;
                const imeActive = getImeActive();
                const key = e.key;
                // Not handled by typeahead (i.e. assume this is a keyboard shortcut)
                if (e.ctrlKey || e.metaKey)
                    return;
                if (!imeActive && e.key === "Backspace") {
                    // Remove the last character in a way that doesn't split UTF-16 surrogates.
                    setCurrentTypeahead(t => t == null ? null : [...t].reverse().slice(1).reverse().join(""), e);
                    e.preventDefault();
                    e.stopPropagation();
                    return;
                }
                // The key property represents the typed character OR the "named key attribute" of the key pressed.
                // There's no definite way to tell the difference, but for all intents and purposes
                // there are no one-character names, and there are no non-ASCII-alpha names.
                // Thus, any one-character or non-ASCII value for `key` is *almost certainly* a typed character.
                const isCharacterKey = (key.length === 1 || !/^[A-Za-z]/.test(key));
                if (isCharacterKey) {
                    if (key == " " && (getCurrentTypeahead() ?? "").trim().length == 0) ;
                    else {
                        e.preventDefault();
                        e.stopPropagation();
                        // Note: Won't be true for the first keydown
                        // but will be overwritten before useLayoutEffect is called
                        // to actually apply the change
                        if (!imeActive)
                            setNextTypeaheadChar(key);
                    }
                }
            }),
            onCompositionStart: useStableCallback((e) => {
                setNextTypeaheadChar(e.data);
                setImeActive(false);
            }),
            onCompositionEnd: useStableCallback((_e) => { setImeActive(true); }),
        });
        // Handle changes in typeahead that cause changes to the tabbable index
        /* useEffect(() => {
             
         }, [currentTypeahead]);*/
        const excludeSpace = useStableCallback(() => { return typeaheadStatus != "none"; });
        return {
            typeaheadNavigationChildContext: useStableObject({
                typeaheadNavigationChildParameters: useStableObject({
                    insertingComparator,
                    sortedTypeaheadInfo: sortedTypeaheadInfo.current,
                    excludeSpace
                }),
            }),
            typeaheadNavigationReturn: {
                getCurrentTypeahead,
                typeaheadStatus,
                propsStable: propsStable.current
            }
        };
        function updateBasedOnTypeaheadChange(currentTypeahead, reason) {
            if (currentTypeahead && sortedTypeaheadInfo.current.length) {
                const sortedTypeaheadIndex = binarySearch(sortedTypeaheadInfo.current, currentTypeahead, typeaheadComparator);
                if (sortedTypeaheadIndex < 0) {
                    // The user has typed an entry that doesn't exist in the list
                    // (or more specifically "for which there is no entry that starts with that input")
                    setTypeaheadStatus("invalid");
                }
                else {
                    setTypeaheadStatus("valid");
                    /*
                      We know roughly where, in the sorted array of strings, our next typeahead location is.
                      But roughly isn't good enough if there are multiple matches.
                      To convert our sorted index to the unsorted index we need, we have to find the first
                      element that matches us *and* (if any such exist) is *after* our current selection.
        
                      In other words, the only way typeahead moves backwards relative to our current
                      position is if the only other option is behind us.
        
                      It's not specified in WAI-ARIA what to do in that case.  I suppose wrap back to the start?
                      Though there's also a case for just going upwards to the nearest to prevent jumpiness.
                      But if you're already doing typeahead on an unsorted list, like, jumpiness can't be avoided.
                      I dunno. Going back to the start is the simplist though.
        
                      Basically what this does: Starting from where we found ourselves after our binary search,
                      scan backwards and forwards through all adjacent entries that also compare equally so that
                      we can find the one whose `unsortedIndex` is the lowest amongst all other equal strings
                      (and also the lowest `unsortedIndex` yadda yadda except that it comes after us).
        
                      TODO: The binary search starts this off with a solid O(log n), but one-character
                      searches are, thanks to pigeonhole principal, eventually guaranteed to become
                      O(n*log n). This is annoying but probably not easily solvable? There could be an
                      exception for one-character strings, but that's just kicking the can down
                      the road. Maybe one or two characters would be good enough though.
                    */
                    // These are used to keep track of the candidates' positions in both our sorted array and the unsorted DOM.
                    let lowestUnsortedIndexAll = null;
                    let lowestSortedIndexAll = sortedTypeaheadIndex;
                    // These two are only set for elements that are ahead of us, but the principle's the same otherwise
                    let lowestUnsortedIndexNext = null;
                    let lowestSortedIndexNext = sortedTypeaheadIndex;
                    const updateBestFit = (u) => {
                        if (!isValid(u))
                            return;
                        if (lowestUnsortedIndexAll == null || u < lowestUnsortedIndexAll) {
                            lowestUnsortedIndexAll = u;
                            lowestSortedIndexAll = i;
                        }
                        if ((lowestUnsortedIndexNext == null || u < lowestUnsortedIndexNext) && u > (getIndex() ?? -Infinity)) {
                            lowestUnsortedIndexNext = u;
                            lowestSortedIndexNext = i;
                        }
                    };
                    let i = sortedTypeaheadIndex;
                    while (i >= 0 && typeaheadComparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
                        updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
                        --i;
                    }
                    i = sortedTypeaheadIndex;
                    while (i < sortedTypeaheadInfo.current.length && typeaheadComparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
                        updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
                        ++i;
                    }
                    if (lowestUnsortedIndexNext !== null)
                        setIndex(sortedTypeaheadInfo.current[lowestSortedIndexNext].unsortedIndex, reason, true);
                    else if (lowestUnsortedIndexAll !== null)
                        setIndex(sortedTypeaheadInfo.current[lowestSortedIndexAll].unsortedIndex, reason, true);
                }
            }
        }
    }
    function useTypeaheadNavigationChild({ managedChildParameters: { index, ...void1 }, textContentParameters: { getText, hidden, ...void5 }, typeaheadNavigationChildContext: { typeaheadNavigationChildParameters: { sortedTypeaheadInfo, insertingComparator, excludeSpace, ...void2 } }, refElementReturn: { getElement, ...void3 }, 
    //typeaheadNavigationChildParameters: { ...void5 },
    ...void4 }) {
        const { textContentReturn } = useTextContent({
            refElementReturn: { getElement },
            textContentParameters: {
                getText,
                hidden,
                onTextContentChange: T$1((text) => {
                    if (text) {
                        // Find where to insert this item.
                        // Because all index values should be unique, the returned sortedIndex
                        // should always refer to a new location (i.e. be negative)                
                        const sortedIndex = binarySearch(sortedTypeaheadInfo, text, insertingComparator);
                        console.assert(sortedIndex < 0 || insertingComparator(sortedTypeaheadInfo[sortedIndex].text, { unsortedIndex: index, text }) == 0);
                        if (sortedIndex < 0) {
                            sortedTypeaheadInfo.splice(-sortedIndex - 1, 0, { text, unsortedIndex: index });
                        }
                        else {
                            sortedTypeaheadInfo.splice(sortedIndex, 0, { text, unsortedIndex: index });
                        }
                        return () => {
                            // When unmounting, find where we were and remove ourselves.
                            // Again, we should always find ourselves because there should be no duplicate values if each index is unique.
                            const sortedIndex = binarySearch(sortedTypeaheadInfo, text, insertingComparator);
                            console.assert(sortedIndex < 0 || insertingComparator(sortedTypeaheadInfo[sortedIndex].text, { unsortedIndex: index, text }) == 0);
                            if (sortedIndex >= 0) {
                                sortedTypeaheadInfo.splice(sortedIndex, 1);
                            }
                        };
                    }
                }, [])
            }
        });
        return {
            textContentReturn,
            pressParameters: { excludeSpace }
        };
    }
    /**
     * Your usual binary search implementation.
     *
     * It's used here to quickly find a good spot to start searching for our next typeahead candidate.
     * @param array The array to search through
     * @param wanted The value you'd like to find
     * @param comparator Compares `wanted` with the current value in `array`
     * @returns A non-negative value if `wanted` was found, and a negative number if not.
     * The absolute value of this number, minus one, is where `wanted` *would* be found if it *was* in `array`
     */
    function binarySearch(array, wanted, comparator) {
        let firstIndex = 0;
        let lastIndex = array.length - 1;
        while (firstIndex <= lastIndex) {
            const testIndex = (lastIndex + firstIndex) >> 1;
            const comparisonResult = comparator(wanted, array[testIndex]);
            if (comparisonResult > 0) {
                firstIndex = testIndex + 1;
            }
            else if (comparisonResult < 0) {
                lastIndex = testIndex - 1;
            }
            else {
                return testIndex;
            }
        }
        return -firstIndex - 1;
    }

    /**
     * Implements proper keyboard navigation for components like listboxes, button groups, menus, etc.
     *
     * In the document order, there will be only one "focused" or "tabbable" element, making it act more like one complete unit in comparison to everything around it.
     * Navigating forwards/backwards can be done with the arrow keys, Home/End keys, or any text for typeahead to focus the next item that matches.
     */
    function useListNavigation({ linearNavigationParameters, typeaheadNavigationParameters, rovingTabIndexParameters, managedChildrenReturn, ..._void1 }) {
        const rtir = useRovingTabIndex({ managedChildrenReturn, rovingTabIndexParameters });
        const { rovingTabIndexReturn } = rtir;
        const tnr = useTypeaheadNavigation({ rovingTabIndexReturn, typeaheadNavigationParameters, });
        const lnr = useLinearNavigation({ rovingTabIndexReturn, linearNavigationParameters, });
        return {
            ...lnr,
            ...tnr,
            ...rtir
        };
    }
    function useListNavigationChild({ rovingTabIndexChildParameters, rovingTabIndexChildContext, typeaheadNavigationChildContext, 
    //typeaheadNavigationChildParameters,
    managedChildParameters, refElementReturn, textContentParameters, ..._void2 }) {
        const rticr = useRovingTabIndexChild({ rovingTabIndexChildContext, rovingTabIndexChildParameters, managedChildParameters });
        const tncr = useTypeaheadNavigationChild({ refElementReturn, typeaheadNavigationChildContext, managedChildParameters, textContentParameters });
        //    assertEmptyObject(_void5);
        return {
            ...tncr,
            ...rticr
        };
    }

    function useGridNavigation({ gridNavigationParameters: { onTabbableColumnChange, ...void3 }, linearNavigationParameters, rovingTabIndexParameters: { onTabbableIndexChange, ...rovingTabIndexParameters }, managedChildrenReturn, typeaheadNavigationParameters, ..._void2 }) {
        const { getChildren } = managedChildrenReturn;
        const { initiallyTabbedIndex } = rovingTabIndexParameters;
        const [getCurrentTabbableColumn, setCurrentTabbableColumn] = usePassiveState(onTabbableColumnChange, useStableCallback(() => { return (initiallyTabbedIndex ?? 0); }));
        const onTabbableIndexChangeOverride = useStableCallback((nextRow, previousRow, reason) => {
            const children = getChildren();
            onTabbableIndexChange?.(nextRow, previousRow, reason);
            const nextColumn = getCurrentTabbableColumn();
            if (previousRow != null)
                children.getAt(previousRow)?.setTabbableColumnIndex(nextColumn, reason, false);
            if (nextRow != null)
                children.getAt(nextRow)?.setTabbableColumnIndex(nextColumn, reason, false);
        });
        const { linearNavigationReturn, rovingTabIndexReturn, typeaheadNavigationReturn, managedChildrenParameters, rovingTabIndexChildContext, typeaheadNavigationChildContext, ...void1 } = useListNavigation({
            linearNavigationParameters: { navigationDirection: "vertical", ...linearNavigationParameters },
            rovingTabIndexParameters: { onTabbableIndexChange: onTabbableIndexChangeOverride, ...rovingTabIndexParameters },
            managedChildrenReturn,
            typeaheadNavigationParameters
        });
        return {
            managedChildrenParameters,
            rovingTabIndexChildContext,
            typeaheadNavigationChildContext,
            linearNavigationReturn,
            rovingTabIndexReturn,
            typeaheadNavigationReturn,
            gridNavigationRowContext: useStableObject({
                gridNavigationRowParameters: useStableObject({
                    setTabbableRow: rovingTabIndexReturn.setTabbableIndex,
                    getCurrentTabbableColumn,
                    setCurrentTabbableColumn
                })
            })
        };
    }
    function useGridNavigationRow({ rowAsChildOfGridParameters: { gridNavigationRowContext: { gridNavigationRowParameters: { setTabbableRow, getCurrentTabbableColumn, setCurrentTabbableColumn } }, ...asChildRowOfTable }, rowAsParentOfCellsParameters: { linearNavigationParameters, rovingTabIndexParameters: { ...rovingTabIndexParameters }, ...asParentRowOfCellsP }, ..._void1 }) {
        const { managedChildrenReturn: { getChildren } } = asChildRowOfTable;
        const getIndex = useStableCallback(() => { return asChildRowOfTable.managedChildParameters.index; });
        const focusSelf = useStableCallback((e) => {
            let index = (getCurrentTabbableColumn() ?? 0);
            let child = getChildren().getAt(index);
            let highestIndex = getChildren().getHighestIndex();
            while ((!child || child.hidden) && index > 0) {
                --index;
                child = getChildren().getAt(index);
            }
            while ((!child || child.hidden) && index <= highestIndex) {
                ++index;
                child = getChildren().getAt(index);
            }
            if (child) {
                const e = child.getElement();
                child.focusSelf(e);
            }
            else {
                e?.focus?.();
            }
        }, []);
        const lncr = useListNavigationChild(asChildRowOfTable);
        const untabbable = !lncr.rovingTabIndexChildReturn.tabbable;
        const lnr = useListNavigation({ ...asParentRowOfCellsP, rovingTabIndexParameters: { untabbable, ...rovingTabIndexParameters }, linearNavigationParameters: { navigationDirection: "horizontal", ...linearNavigationParameters } });
        const { rovingTabIndexReturn: { setTabbableIndex }, rovingTabIndexReturn, linearNavigationReturn, managedChildrenParameters, rovingTabIndexChildContext, typeaheadNavigationChildContext, typeaheadNavigationReturn } = lnr;
        return {
            rowAsChildOfGridReturn: { gridNavigationRowParameters: { focusSelf, setTabbableColumnIndex: setTabbableIndex }, ...lncr, },
            rowAsParentOfCellsReturn: {
                ...lnr,
                gridNavigationCellContext: useStableObject({
                    gridNavigationCellParameters: useStableObject({
                        setTabbableRow,
                        getRowIndex: getIndex,
                        getCurrentTabbableColumn,
                        setCurrentTabbableColumn,
                        setTabbableCell: setTabbableIndex
                    })
                }),
                linearNavigationReturn,
                managedChildrenParameters,
                rovingTabIndexChildContext,
                rovingTabIndexReturn,
                typeaheadNavigationChildContext,
                typeaheadNavigationReturn,
            }
        };
    }
    function useGridNavigationCell({ 
    //    managedChildParameters: { hidden, index, ...void3 },
    rovingTabIndexChildContext, typeaheadNavigationChildContext, 
    //typeaheadNavigationChildParameters,
    rovingTabIndexChildParameters, managedChildParameters, refElementReturn, textContentParameters, gridNavigationCellParameters: { colSpan }, gridNavigationCellContext: { gridNavigationCellParameters: { getRowIndex, setTabbableRow, getCurrentTabbableColumn: _getCurrentColumn, setCurrentTabbableColumn, setTabbableCell } }, ..._void1 }) {
        const { index } = managedChildParameters;
        const { hasCurrentFocusParameters: { onCurrentFocusedInnerChanged: ocfic1 }, rovingTabIndexChildReturn, textContentReturn, pressParameters, ...void2 } = useListNavigationChild({
            rovingTabIndexChildParameters,
            managedChildParameters,
            rovingTabIndexChildContext,
            typeaheadNavigationChildContext,
            textContentParameters,
            //typeaheadNavigationChildParameters,
            refElementReturn
        });
        //    assertEmptyObject(void3);
        return {
            rovingTabIndexChildReturn,
            textContentReturn,
            pressParameters,
            hasCurrentFocusParameters: {
                onCurrentFocusedInnerChanged: useStableCallback((focused, prev, e) => {
                    ocfic1?.(focused, prev, e);
                    if (focused) {
                        setTabbableRow(getRowIndex(), e, false);
                        setCurrentTabbableColumn(index, e);
                        setTabbableCell((prev) => {
                            if (prev != null && (prev < index || prev > index + colSpan)) {
                                return prev;
                            }
                            return index;
                        }, e, false);
                    }
                })
            },
        };
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    //export type UseSingleSelectionChild<E extends Element> = (a: UseSingleSelectionChildParameters<E>) => UseSingleSelectionChildReturnTypeWithHooks<E>;
    function useSingleSelection({ managedChildrenReturn: { getChildren }, rovingTabIndexReturn: { setTabbableIndex }, singleSelectionParameters: { onSelectedIndexChange: onSelectedIndexChange_U, initiallySelectedIndex } }) {
        const onSelectedIndexChange = useStableCallback(onSelectedIndexChange_U ?? noop);
        const getSelectedAt = T$1((m) => { return m.getSelected(); }, []);
        const setSelectedAt = T$1((m, t, newSelectedIndex, prevSelectedIndex) => {
            if (m.hidden) {
                console.assert(false);
            }
            const directionComparison = (newSelectedIndex == m.index ? prevSelectedIndex : newSelectedIndex);
            const direction = (directionComparison == null ? null : (m.index - directionComparison));
            if (newSelectedIndex == null)
                console.assert(t == false);
            if (t)
                console.assert(newSelectedIndex === m.index);
            m.setLocalSelected(t, direction);
        }, []);
        const isSelectedValid = T$1((m) => { return !m.hidden; }, []);
        const { changeIndex: changeSelectedIndex, getCurrentIndex: getSelectedIndex } = useChildrenFlag({
            getChildren,
            onIndexChange: null,
            initialIndex: initiallySelectedIndex,
            getAt: getSelectedAt,
            setAt: setSelectedAt,
            isValid: isSelectedValid,
            closestFit: false
        });
        return {
            singleSelectionReturn: useStableObject({
                getSelectedIndex,
                changeSelectedIndex
            }),
            singleSelectionContext: useStableObject({
                getSelectedIndex,
                onSelectedIndexChange: onSelectedIndexChange
            }),
            childrenHaveFocusParameters: {
                onCompositeFocusChange: useStableCallback((anyFocused, prev, reason) => {
                    if (!anyFocused) {
                        const selectedIndex = getSelectedIndex();
                        if (selectedIndex != null)
                            setTabbableIndex(selectedIndex, reason, false);
                    }
                })
            }
        };
    }
    function useSingleSelectionChild(args) {
        const { singleSelectionContext: { getSelectedIndex, onSelectedIndexChange }, singleSelectionChildParameters: { ariaPropName, selectionMode, disabled }, managedChildParameters: { index } } = args;
        //let lastRecordedDistance = useRef(0);
        useEnsureStability("useSingleSelectionChild", getSelectedIndex, onSelectedIndexChange);
        const getDisabled = useStableGetter(disabled);
        const [localSelected, setLocalSelected, getLocalSelected] = useState(getSelectedIndex() == index);
        const [direction, setDirection, getDirection] = useState(getSelectedIndex() == null ? null : (getSelectedIndex() - index));
        const onCurrentFocusedInnerChanged = useStableCallback((focused, _prev, e) => {
            if (selectionMode == 'focus' && focused) {
                onSelectedIndexChange?.(index, e);
            }
        });
        const onPressSync = useStableCallback(((e) => {
            if (selectionMode == "disabled")
                return;
            if (!disabled)
                onSelectedIndexChange?.(index, e);
        }));
        const propParts = ariaPropName?.split("-") ?? [];
        return {
            //managedChildParameters: { selected, setSelected, getSelected, },
            managedChildParameters: { setLocalSelected: useStableCallback((selected, direction) => {
                    setLocalSelected(selected);
                    setDirection(direction);
                }) },
            singleSelectionChildReturn: {
                selected: localSelected,
                setThisOneSelected: useStableCallback((event) => {
                    console.assert(!getDisabled());
                    onSelectedIndexChange?.(index, event);
                }),
                getSelectedOffset: getDirection,
                selectedOffset: direction,
                getSelected: getLocalSelected,
                //getDistance: useCallback(() => { return lastRecordedDistance.current; }, []),
                propsUnstable: ariaPropName == null || selectionMode == "disabled" ? {} : {
                    [`${propParts[0]}-${propParts[1]}`]: (localSelected ? (propParts[1] == "current" ? `${propParts[2]}` : `true`) : "false")
                }
            },
            pressParameters: { onPressSync },
            hasCurrentFocusParameters: { onCurrentFocusedInnerChanged }
        };
    }
    /**
     * Let's face it, declarative is nicer to use than imperative, so this is a shortcut.
     */
    function useSingleSelectionDeclarative({ singleSelectionReturn: { changeSelectedIndex }, singleSelectionDeclarativeParameters: { selectedIndex } }) {
        h(() => {
            changeSelectedIndex(selectedIndex);
        }, [selectedIndex]);
    }

    function useGridNavigationSingleSelection({ gridNavigationParameters, linearNavigationParameters, rovingTabIndexParameters, managedChildrenReturn, typeaheadNavigationParameters, singleSelectionParameters, ..._void2 }) {
        const gnr = useGridNavigation({
            gridNavigationParameters,
            linearNavigationParameters,
            managedChildrenReturn,
            rovingTabIndexParameters,
            typeaheadNavigationParameters
        });
        const { rovingTabIndexReturn } = gnr;
        const ssr = useSingleSelection({
            managedChildrenReturn,
            rovingTabIndexReturn,
            singleSelectionParameters
        });
        return {
            ...gnr,
            ...ssr,
        };
    }
    function useGridNavigationSingleSelectionRow({ rowAsChildOfGridParameters, rowAsParentOfCellsParameters, ..._void1 }) {
        const { managedChildParameters, hasCurrentFocusParameters: { onCurrentFocusedInnerChanged: ocfic2, ..._void3 }, singleSelectionChildReturn } = useSingleSelectionChild(rowAsChildOfGridParameters);
        const { rowAsChildOfGridReturn: { hasCurrentFocusParameters: { onCurrentFocusedInnerChanged: ocfic1, ..._void2 }, gridNavigationRowParameters, rovingTabIndexChildReturn, textContentReturn, pressParameters, ...void4 }, rowAsParentOfCellsReturn } = useGridNavigationRow({ rowAsChildOfGridParameters, rowAsParentOfCellsParameters });
        const onCurrentFocusedInnerChanged = useStableCallback((focused, prevFocused, e) => { ocfic1?.(focused, prevFocused, e); ocfic2?.(focused, prevFocused, e); });
        return {
            rowAsChildOfGridReturn: {
                pressParameters,
                textContentReturn,
                managedChildParameters,
                hasCurrentFocusParameters: { onCurrentFocusedInnerChanged },
                gridNavigationRowParameters,
                rovingTabIndexChildReturn,
                singleSelectionChildReturn
            },
            rowAsParentOfCellsReturn
        };
    }
    // EZ
    function useGridNavigationSingleSelectionCell(p) {
        return useGridNavigationCell(p);
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeFloor = Math.floor,
        nativeRandom = Math.random;

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

    var freeGlobal$1 = freeGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal$1 || freeSelf || Function('return this')();

    var root$1 = root;

    /** Built-in value references. */
    var Symbol$1 = root$1.Symbol;

    var Symbol$2 = Symbol$1;

    /** Used for built-in method references. */
    var objectProto$5 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$3 = objectProto$5.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$1 = objectProto$5.toString;

    /** Built-in value references. */
    var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : undefined;

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty$3.call(value, symToStringTag$1),
          tag = value[symToStringTag$1];

      try {
        value[symToStringTag$1] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString$1.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag$1] = tag;
        } else {
          delete value[symToStringTag$1];
        }
      }
      return result;
    }

    /** Used for built-in method references. */
    var objectProto$4 = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto$4.toString;

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /** `Object#toString` result references. */
    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';

    /** Built-in value references. */
    var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : undefined;

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /** `Object#toString` result references. */
    var argsTag$1 = '[object Arguments]';

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag$1;
    }

    /** Used for built-in method references. */
    var objectProto$3 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

    /** Built-in value references. */
    var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    var isArguments$1 = isArguments;

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    var isArray$1 = isArray;

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /** Detect free variable `exports`. */
    var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

    /** Built-in value references. */
    var Buffer = moduleExports$1 ? root$1.Buffer : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    var isBuffer$1 = isBuffer;

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$1 = 9007199254740991;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER$1 : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag$1 = '[object Function]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
    typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    typedArrayTags[setTag] = typedArrayTags[stringTag] =
    typedArrayTags[weakMapTag] = false;

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }

    /** Detect free variable `exports`. */
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal$1.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    var nodeUtil$1 = nodeUtil;

    /* Node.js helper references. */
    var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    var isTypedArray$1 = isTypedArray;

    /** Used for built-in method references. */
    var objectProto$2 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray$1(value),
          isArg = !isArr && isArguments$1(value),
          isBuff = !isArr && !isArg && isBuffer$1(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty$1.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /** Used for built-in method references. */
    var objectProto$1 = Object.prototype;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$1;

      return value === proto;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeKeys = overArg(Object.keys, Object);

    var nativeKeys$1 = nativeKeys;

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys$1(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /** `Object#toString` result references. */
    var asyncTag = '[object AsyncFunction]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray$1(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Returns a function that will, when called, force the component
     * that uses this hook to re-render itself.
     *
     * It's a bit smelly, so best to use sparingly.
     */
    function useForceUpdate() {
        const [, set] = p(0);
        return _(() => set(i => ++i)).current;
    }

    /**
     * Hook that allows for the **direct descendant** children of this component to be re-ordered and sorted.
     *
     * *This is **separate** from "managed" children, which can be any level of child needed! Sortable/rearrangeable children must be **direct descendants** of the parent that uses this hook!*
     *
     * It's recommended to use this in conjunction with `useListNavigation`; it takes the same `indexMangler` and `indexDemangler`
     * functions that this hook returns. `useListNavigation` does not directly use this hook because, as mentioned,
     * this hook imposes serious restrictions on child structure, while `useListNavigation` allows anything.
     *
     * Besides the prop-modifying hook that's returned, the `sort` function that's returned will
     * sort all children according to their value from the `getValue` argument you pass in.
     *
     * If you want to perform some re-ordering operation that's *not* a sort, you can manually
     * re-map each child's position using `mangleMap` and `demangleMap`, which convert between
     * sorted and unsorted index positions.
     *
     * Again, unlike some other hooks, **these children must be direct descendants**. This is because
     * the prop-modifying hook inspects the given children, then re-creates them with new `key`s.
     * Because keys are given special treatment and a child has no way of modifying its own key
     * there's no other time or place this can happen other than exactly within the parent component's render function.
     */
    function useRearrangeableChildren({ rearrangeableChildrenParameters: { getIndex, onRearranged } }) {
        // These are used to keep track of a mapping between unsorted index <---> sorted index.
        // These are needed for navigation with the arrow keys.
        const mangleMap = _(new Map());
        const demangleMap = _(new Map());
        const indexMangler = T$1((n) => (mangleMap.current.get(n) ?? n), []);
        const indexDemangler = T$1((n) => (demangleMap.current.get(n) ?? n), []);
        const onRearrangedGetter = useStableGetter(onRearranged);
        //const { setTabbableIndex } = rovingTabIndexReturn;
        const shuffle$1 = T$1((managedRows) => {
            const shuffledRows = shuffle(managedRows.arraySlice());
            return rearrange(shuffledRows);
        }, [ /* Must remain stable */]);
        // The sort function needs to be able to update whoever has all the sortable children.
        // Because that might not be the consumer of *this* hook directly (e.g. a table uses
        // this hook, but it's tbody that actually needs updating), we need to remotely
        // get and set a forceUpdate function.
        //const [getForceUpdate, setForceUpdate] = usePassiveState<null | (() => void)>(null, returnNull);
        const [getForceUpdate, setForceUpdate] = usePassiveState(null, returnNull);
        const rearrange = T$1((sortedRows) => {
            mangleMap.current.clear();
            demangleMap.current.clear();
            // Update our sorted <--> unsorted indices map 
            // and rerender the whole table, basically
            for (let indexAsSorted = 0; indexAsSorted < sortedRows.length; ++indexAsSorted) {
                const indexAsUnsorted = sortedRows[indexAsSorted].index;
                mangleMap.current.set(indexAsUnsorted, indexAsSorted);
                demangleMap.current.set(indexAsSorted, indexAsUnsorted);
            }
            onRearrangedGetter()?.();
            getForceUpdate()?.();
        }, []);
        const useRearrangedChildren = T$1((children) => {
            console.assert(Array.isArray(children));
            const forceUpdate = useForceUpdate();
            s(() => { setForceUpdate(_prev => forceUpdate); }, [forceUpdate]);
            return children
                .slice()
                .map(child => ({ child, mangledIndex: indexMangler(getIndex(child)), demangledIndex: getIndex(child) }))
                .sort((lhs, rhs) => { return lhs.mangledIndex - rhs.mangledIndex; })
                .map(({ child, mangledIndex, demangledIndex }) => {
                return y$1(child.type, { ...child.props, key: demangledIndex, "data-mangled-index": mangledIndex, "data-unmangled-index": demangledIndex });
            });
        }, []);
        const toJsonArray = T$1((managedRows, transform) => {
            return managedRows.arraySlice().map(child => {
                if (transform)
                    return (transform(child));
                else
                    return child.getSortValue();
            });
        }, []);
        return {
            //linearNavigationParameters: { navigateAbsolute, navigateRelative },
            rearrangeableChildrenReturn: {
                indexMangler,
                indexDemangler,
                mangleMap,
                demangleMap,
                rearrange,
                shuffle: shuffle$1,
                useRearrangedChildren,
                toJsonArray
            }
        };
    }
    /**
     * Hook that allows for the **direct descendant** children of this component to be re-ordered and sorted.
     *
     * *This is **separate** from "managed" children, which can be any level of child needed! Sortable/rearrangeable children must be **direct descendants** of the parent that uses this hook!*
     *
     * It's recommended to use this in conjunction with `useListNavigation`; it takes the same `indexMangler` and `indexDemangler`
     * functions that this hook returns. `useListNavigation` does not directly use this hook because, as mentioned,
     * this hook imposes serious restrictions on child structure, while `useListNavigation` allows anything.
     *
     * Besides the prop-modifying hook that's returned, the `sort` function that's returned will
     * sort all children according to their value from the `getValue` argument you pass in.
     *
     * If you want to perform some re-ordering operation that's *not* a sort, you can manually
     * re-map each child's position using `mangleMap` and `demangleMap`, which convert between
     * sorted and unsorted index positions.
     *
     * Again, unlike some other hooks, **these children must be direct descendants**. This is because
     * the prop-modifying hook inspects the given children, then re-creates them with new `key`s.
     * Because keys are given special treatment and a child has no way of modifying its own key
     * there's no other time or place this can happen other than exactly within the parent component's render function.
     */
    function useSortableChildren({ rearrangeableChildrenParameters, sortableChildrenParameters: { compare: userCompare } }) {
        const getCompare = useStableGetter(userCompare ?? defaultCompare);
        const { rearrangeableChildrenReturn } = useRearrangeableChildren({ rearrangeableChildrenParameters });
        const { rearrange } = rearrangeableChildrenReturn;
        // The actual sort function.
        const sort = T$1((managedRows, direction) => {
            const compare = getCompare();
            const sortedRows = compare ? managedRows.arraySlice().sort((lhsRow, rhsRow) => {
                const lhsValue = lhsRow;
                const rhsValue = rhsRow;
                const result = compare(lhsValue, rhsValue);
                if (direction[0] == "d")
                    return -result;
                return result;
            }) : managedRows.arraySlice();
            return rearrange(sortedRows);
        }, [ /* Must remain stable */]);
        return {
            sortableChildrenReturn: { sort },
            rearrangeableChildrenReturn
        };
    }
    /*export interface UseGroupedSortableChildrenParameters<M extends GroupedSortedChildInfo> {
        managedChildrenReturn: UseManagedChildrenReturnType<M>["managedChildrenReturn"]
    }

    export interface UseGroupedSortableChildren {
        linearNavigationParameters: Pick<UseLinearNavigationParameters["linearNavigationParameters"], "indexDemangler" | "indexMangler">
    }*/
    /**
     * It's common enough to have, e.g., a list with multiple sortable groups, a table where the body is sorted independently of the head, etc...
     *
     * A sortable group assumes that the parent (which also calls this hook) handles list navigation (or similar),
     * and that each group element (which can also be the list parent, if there are NO groups) handles sorting (or similar).
     */
    /*export function useGroupedSortableChildren<M extends GroupedSortedChildInfo>({ managedChildrenReturn: { getChildren } }: UseGroupedSortableChildrenParameters<M>): UseGroupedSortableChildren {
        const allIndexManglers = useRef<Map<number, (i: number) => number>>(new Map());
        const allIndexDemanglers = useRef<Map<number, (i: number) => number>>(new Map());
        const indexMangler = useCallback((i: number): number => {
            const child = getChildren().getAt(i);
            if (child) {
                let indexManglerForThisLocation = allIndexManglers.current.get(child.locationIndex);
                return (indexManglerForThisLocation ?? identity)(i);
            }
            return identity(i);
        }, []);
        const indexDemangler = useCallback((i: number): number => {
            const child = getChildren().getAt(i);
            if (child) {
                let indexDemanglerForThisLocation = allIndexDemanglers.current.get(child.locationIndex);
                return (indexDemanglerForThisLocation ?? identity)(i);
            }
            return identity(i);
        }, []);


        return {
            linearNavigationParameters: {
                indexMangler,
                indexDemangler
            }
        }
    }*/
    function defaultCompare(lhs, rhs) {
        return compare1(lhs?.getSortValue(), rhs?.getSortValue());
        function compare1(lhs, rhs) {
            if (lhs == null || rhs == null) {
                if (lhs == null)
                    return -1;
                if (rhs == null)
                    return 1;
            }
            return lhs - rhs;
        }
    }

    function useGridNavigationSingleSelectionSortable({ rearrangeableChildrenParameters, sortableChildrenParameters, linearNavigationParameters, ...gridNavigationSingleSelectionParameters }) {
        const { ...scr } = useSortableChildren({ rearrangeableChildrenParameters, sortableChildrenParameters });
        const { rearrangeableChildrenReturn: { indexDemangler, indexMangler } } = scr;
        const gnr = useGridNavigationSingleSelection({
            linearNavigationParameters: { indexDemangler, indexMangler, ...linearNavigationParameters },
            ...gridNavigationSingleSelectionParameters
        });
        return { ...gnr, ...scr, };
    }

    function useListNavigationSingleSelection({ linearNavigationParameters, rovingTabIndexParameters, typeaheadNavigationParameters, singleSelectionParameters, managedChildrenReturn, ..._void3 }) {
        const lnr = useListNavigation({ linearNavigationParameters, rovingTabIndexParameters, typeaheadNavigationParameters, managedChildrenReturn });
        const { rovingTabIndexReturn } = lnr;
        const ssr = useSingleSelection({ rovingTabIndexReturn, managedChildrenReturn, singleSelectionParameters });
        return {
            ...ssr,
            ...lnr,
        };
    }
    function useListNavigationSingleSelectionChild({ managedChildParameters: { index, ..._void5 }, rovingTabIndexChildParameters: { hidden, ...void7 }, singleSelectionChildParameters, singleSelectionContext, rovingTabIndexChildContext, typeaheadNavigationChildContext, refElementReturn, textContentParameters, ..._void1 }) {
        const { hasCurrentFocusParameters: { onCurrentFocusedInnerChanged: ocfic2, ..._void3 }, pressParameters: { onPressSync }, ...sscr } = useSingleSelectionChild({
            managedChildParameters: { index },
            singleSelectionChildParameters,
            singleSelectionContext
        });
        const { hasCurrentFocusParameters: { onCurrentFocusedInnerChanged: ocfic1, ..._void6 }, pressParameters: { excludeSpace }, ...lncr } = useListNavigationChild({
            managedChildParameters: { index },
            rovingTabIndexChildParameters: { hidden },
            rovingTabIndexChildContext,
            typeaheadNavigationChildContext,
            refElementReturn,
            textContentParameters
        });
        return {
            hasCurrentFocusParameters: {
                onCurrentFocusedInnerChanged: useStableCallback((focused, previouslyFocused, e) => {
                    ocfic1?.(focused, previouslyFocused, e);
                    ocfic2?.(focused, previouslyFocused, e);
                })
            },
            pressParameters: { onPressSync, excludeSpace },
            ...sscr,
            ...lncr
        };
    }

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity$2(value) {
      return value;
    }

    function usePaginatedChildren({ managedChildrenReturn: { getChildren }, linearNavigationParameters: { indexDemangler }, paginatedChildrenParameters: { paginationMax, paginationMin } }) {
        const [childCount, setChildCount] = useState(null);
        const parentIsPaginated = (paginationMin != null || paginationMax != null);
        const lastPagination = _({ paginationMax: null, paginationMin: null });
        const refreshPagination = T$1((paginationMin, paginationMax) => {
            const childMax = (getChildren().getHighestIndex() + 1);
            for (let i = 0; i <= childMax; ++i) {
                const visible = (i >= (paginationMin ?? -Infinity) && i < (paginationMax ?? Infinity));
                getChildren().getAt(indexDemangler(i))?.setParentIsPaginated(parentIsPaginated);
                getChildren().getAt(indexDemangler(i))?.setPaginationVisible(visible);
                if (visible)
                    getChildren().getAt(indexDemangler(i))?.setChildCountIfPaginated(getChildren().getHighestIndex() + 1);
            }
        }, [ /* Must be empty */]);
        s(() => {
            refreshPagination(paginationMin, paginationMax);
            lastPagination.current.paginationMax = paginationMax;
            lastPagination.current.paginationMin = paginationMin;
        }, [paginationMax, paginationMin]);
        // TODO: Modification during render
        const p = _(parentIsPaginated);
        p.current = parentIsPaginated;
        return {
            context: useStableObject({
                paginatedChildContext: useStableObject({
                    getDefaultIsPaginated: T$1(() => { return p.current; }, []),
                    // This is only used during setState on mount, so this is fine.
                    // (If we change from paginated to not paginated, this is caught during useLayoutEffect)
                    getDefaultPaginationVisible: T$1((i) => { return parentIsPaginated ? (i >= (paginationMin ?? -Infinity) && i < (paginationMax ?? Infinity)) : true; }, [])
                })
            }),
            managedChildrenParameters: {
                onChildCountChange: useStableCallback((count) => {
                    if (paginationMax != null || paginationMin != null) {
                        setChildCount(count);
                        const min = (paginationMin ?? 0);
                        const max = (paginationMax ?? count);
                        for (let i = min; i < max; ++i) {
                            getChildren().getAt(i)?.setParentIsPaginated(parentIsPaginated);
                            getChildren().getAt(i)?.setChildCountIfPaginated(count);
                        }
                    }
                    else {
                        // TODO: Make this debug only.
                        setChildCount(null);
                    }
                }),
            },
            paginatedChildrenReturn: { refreshPagination, childCount }
        };
    }
    function usePaginatedChild({ managedChildParameters: { index }, context: { paginatedChildContext: { getDefaultPaginationVisible, getDefaultIsPaginated } } }) {
        const [parentIsPaginated, setParentIsPaginated] = useState(getDefaultIsPaginated());
        const [childCountIfPaginated, setChildCountIfPaginated] = useState(null);
        const [paginatedVisible, setPaginatedVisible] = useState(getDefaultPaginationVisible(index));
        return {
            props: !parentIsPaginated ? {} : { "aria-setsize": childCountIfPaginated ?? undefined, "aria-posinset": (index + 1) },
            paginatedChildReturn: { paginatedVisible, isPaginated: parentIsPaginated, hideBecausePaginated: parentIsPaginated ? !paginatedVisible : false },
            managedChildParameters: {
                setPaginationVisible: setPaginatedVisible,
                setChildCountIfPaginated,
                setParentIsPaginated
            }
        };
    }

    /**
     * Allows children to each wait until the previous has finished rendering before itself rendering.
     *
     * E.G. Child #3 waits until #2 renders. #2 waits until #1 renders, etc.
     *
     * Note that the child itself will still render, but you can delay rendering *its* children, or
     * delay other complicated or heavy logic, until the child is no longer staggered.
     */
    function useStaggeredChildren({ managedChildrenReturn: { getChildren }, staggeredChildrenParameters: { staggered } }) {
        // By default, when a child mounts, we tell the next child to mount and simply repeat.
        // If a child is missing, however, it will break that chain.
        // To guard against that, we also wait for 50ms, and if it hasn't loaded by then, we just continue as if it did.
        const [currentlyStaggering, setCurrentlyStaggering] = useState(staggered);
        const timeoutHandle = _(-1);
        const resetEmergencyTimeout = T$1(() => {
            if (timeoutHandle.current != -1)
                clearTimeout(timeoutHandle.current);
            timeoutHandle.current = setTimeout(() => {
                // We've gone this long without hearing the next child mount itself...
                // We need to continue.
                timeoutHandle.current = -1;
                setDisplayedStaggerIndex(c => Math.min(getTargetStaggerIndex() ?? 0, (c ?? 0) + 1));
            }, 50);
        }, [ /* Must be empty */]);
        // The target index is the index that we're "animating" to.
        // Each child simply sets this to the highest value ever seen.
        // TODO: When unmounting children, we should reset this, but that requires us to track total # of children
        const [getTargetStaggerIndex, setTargetStaggerIndex] = usePassiveState(T$1((newIndex, prevIndex) => {
            // Any time our target changes,
            // ensure our timeout is running, and start a new one if not
            // For any newly mounted children, make sure they're aware of if they should consider themselves staggered or not
            for (let i = (prevIndex ?? 0); i < (newIndex ?? 0); ++i) {
                getChildren().getAt(i)?.setParentIsStaggered(parentIsStaggered);
            }
            if (timeoutHandle.current == -1) {
                resetEmergencyTimeout();
                // If there's no timeout running, then that also means we're not waiting for a child to mount.
                // So ask a child to mount and then wait for that child to mount.
                setDisplayedStaggerIndex(c => Math.min(newIndex ?? 0, (c ?? 0) + 1));
            }
        }, [ /* Must be empty */]), returnNull);
        //const [getTimeoutHandle, setTimeoutHandle] = usePassiveState<number | null, Event>(null, returnNull);
        const [getDisplayedStaggerIndex, setDisplayedStaggerIndex] = usePassiveState(T$1((newIndex, prevIndex) => {
            if (newIndex == null) {
                return;
            }
            setCurrentlyStaggering(newIndex >= (getTargetStaggerIndex() ?? 0));
            // It's time to show the next child,
            // either because the current one finished mounting,
            // or because our emergency backup timeout fired.
            //
            // Either way, tell the next child to show itself.
            // Also make sure that anyone we skipped somehow show themselves as well.
            for (let i = (prevIndex ?? 0); i < newIndex; ++i) {
                getChildren().getAt(i)?.setStaggeredVisible(true);
            }
            // Set a new emergency timeout
            resetEmergencyTimeout();
            /*if (newIndex < targetIndex) {
                const handle = setTimeout(() => { setDisplayedStaggerIndex(c => (c ?? 0) + 1); }, staggerDelay ?? 50);
                return clearTimeout(handle);
            }*/
        }, [ /* Must be empty */]), returnNull);
        const parentIsStaggered = (!!staggered);
        const childCallsThisToTellTheParentToMountTheNextOne = T$1((index) => {
            setDisplayedStaggerIndex(s => Math.min((getTargetStaggerIndex() ?? 0), 1 + (Math.max(s ?? 0, index + 1))));
        }, []);
        s(() => {
            getChildren().forEach(child => child.setParentIsStaggered(parentIsStaggered));
            //if (parentIsStaggered)
            //    childCallsThisToTellTheParentToMountTheNextOne(-1);
        }, [parentIsStaggered]);
        const childCallsThisToTellTheParentTheHighestIndex = T$1((mountedIndex) => {
            setTargetStaggerIndex(i => Math.max((i ?? 0), 1 + mountedIndex));
        }, []);
        // TODO: Modification during render
        const s$1 = _(parentIsStaggered);
        s$1.current = parentIsStaggered;
        return {
            staggeredChildrenReturn: { stillStaggering: currentlyStaggering },
            context: useStableObject({
                staggeredChildContext: useStableObject({
                    childCallsThisToTellTheParentToMountTheNextOne,
                    childCallsThisToTellTheParentTheHighestIndex,
                    // These are used during setState, so just once during mount.
                    // It's okay that the dependencies aren't included.
                    // It's more important that these can be called during render.
                    //
                    // (If we switch, this is caught during useLayoutEffect anyway)
                    getDefaultIsStaggered: T$1(() => {
                        return parentIsStaggered;
                    }, []),
                    getDefaultStaggeredVisible: T$1((i) => {
                        if (parentIsStaggered) {
                            const staggerIndex = getDisplayedStaggerIndex();
                            if (staggerIndex == null)
                                return false;
                            return i < staggerIndex;
                        }
                        else {
                            return true;
                        }
                    }, [])
                })
            }),
        };
    }
    function useStaggeredChild({ managedChildParameters: { index }, context: { staggeredChildContext: { childCallsThisToTellTheParentTheHighestIndex, getDefaultIsStaggered, getDefaultStaggeredVisible, childCallsThisToTellTheParentToMountTheNextOne } } }) {
        const [parentIsStaggered, setParentIsStaggered] = useState(getDefaultIsStaggered());
        const [staggeredVisible, setStaggeredVisible] = useState(getDefaultStaggeredVisible(index));
        s(() => {
            childCallsThisToTellTheParentTheHighestIndex(index);
        }, [index]);
        h(() => {
            if ((parentIsStaggered && staggeredVisible))
                childCallsThisToTellTheParentToMountTheNextOne(index);
        }, [index, (parentIsStaggered && staggeredVisible)]);
        return {
            props: !parentIsStaggered ? {} : { "aria-busy": (!staggeredVisible).toString() },
            staggeredChildReturn: { staggeredVisible, isStaggered: parentIsStaggered, hideBecauseStaggered: parentIsStaggered ? !staggeredVisible : false },
            managedChildParameters: {
                setStaggeredVisible: setStaggeredVisible,
                setParentIsStaggered,
            }
        };
    }

    /**
     * Allows a composite component (such as a radio group or listbox) to listen
     * for an "overall focusin/out" event; this hook lets you know when focus has
     * moved in/out of this grouping of children EVEN IF there is no actual parent DOM element.
     *
     * I.E. you can use this without needing a parent `<div>` to listen for a `focusout` event.
     */
    function useChildrenHaveFocus(args) {
        const { childrenHaveFocusParameters: { onCompositeFocusChange } } = args;
        const [getAnyFocused, setAnyFocused] = usePassiveState(onCompositeFocusChange, returnFalse, runImmediately);
        const [_getFocusCount, setFocusCount] = usePassiveState(useStableCallback((anyFocused, anyPreviouslyFocused, e) => {
            console.assert(anyFocused >= 0 && anyFocused <= 1);
            setAnyFocused(!!(anyFocused && !anyPreviouslyFocused), e);
        }));
        return {
            childrenHaveFocusReturn: { getAnyFocused },
            childrenHaveFocusChildContext: useStableObject({ childrenHaveFocusChildParameters: useStableObject({ setFocusCount }) }),
        };
    }
    function useChildrenHaveFocusChild({ childrenHaveFocusChildContext: { childrenHaveFocusChildParameters: { setFocusCount } } }) {
        return {
            hasCurrentFocusParameters: {
                onCurrentFocusedInnerChanged: useStableCallback((focused, prev, e) => {
                    if (focused) {
                        setFocusCount(p => (p ?? 0) + 1, e);
                    }
                    else if (!focused && prev) {
                        setFocusCount(p => (p ?? 0) - 1, e);
                    }
                }),
            }
        };
    }

    function useHasCurrentFocus(args) {
        const { hasCurrentFocusParameters: { onCurrentFocusedChanged: onFocusedChanged, onCurrentFocusedInnerChanged: onFocusedInnerChanged }, refElementReturn: { getElement } } = args;
        useEnsureStability("useHasCurrentFocus", onFocusedChanged, onFocusedInnerChanged, getElement);
        const [getFocused, setFocused] = usePassiveState(onFocusedChanged, returnFalse, runImmediately);
        const [getFocusedInner, setFocusedInner] = usePassiveState(onFocusedInnerChanged, returnFalse, runImmediately);
        const onFocusIn = T$1((e) => {
            setFocusedInner(true, e);
            setFocused(e.target == getElement(), e);
        }, []);
        const onFocusOut = T$1((e) => {
            // Even if we're focusOut-ing to another inner element,
            // that'll be caught during onFocusIn,
            // so just set everything to false and let that revert things back to true if necessary.
            setFocusedInner(false, e);
            setFocused(false, e);
        }, []);
        h(() => {
            return () => {
                setFocused(false);
                setFocusedInner(false);
            };
        }, []);
        const propsStable = _({
            onfocusin: onFocusIn,
            onfocusout: onFocusOut
        });
        h(() => {
            return () => {
                setFocused(false);
                setFocusedInner(false);
            };
        }, []);
        return {
            hasCurrentFocusReturn: {
                propsStable: propsStable.current,
                getCurrentFocused: getFocused,
                getCurrentFocusedInner: getFocusedInner,
            }
        };
    }

    function useCompleteGridNavigation({ gridNavigationParameters, linearNavigationParameters, rovingTabIndexParameters, singleSelectionParameters, typeaheadNavigationParameters, sortableChildrenParameters, rearrangeableChildrenParameters, paginatedChildrenParameters, staggeredChildrenParameters }) {
        const getChildren = T$1(() => managedChildrenReturn.getChildren(), []);
        const getHighestChildIndex = T$1(() => getChildren().getHighestIndex(), []);
        const isValid = T$1((i) => {
            const child = getChildren().getAt(i);
            if (child == null)
                return false;
            if (child.hidden)
                return false;
            return true;
        }, []);
        const { childrenHaveFocusParameters, managedChildrenParameters, rovingTabIndexChildContext, singleSelectionContext, typeaheadNavigationChildContext, gridNavigationRowContext, rearrangeableChildrenReturn, ...gridNavigationSingleSelectionReturn } = useGridNavigationSingleSelectionSortable({
            gridNavigationParameters,
            linearNavigationParameters: { getHighestIndex: getHighestChildIndex, isValid, ...linearNavigationParameters },
            managedChildrenReturn: { getChildren },
            rovingTabIndexParameters: { initiallyTabbedIndex: singleSelectionParameters.initiallySelectedIndex, ...rovingTabIndexParameters },
            singleSelectionParameters,
            typeaheadNavigationParameters: { isValid, ...typeaheadNavigationParameters },
            rearrangeableChildrenParameters: {
                onRearranged: useStableCallback(() => { refreshPagination(paginatedChildrenParameters.paginationMin, paginatedChildrenParameters.paginationMax); }),
                ...rearrangeableChildrenParameters
            },
            sortableChildrenParameters
        });
        const { linearNavigationReturn, typeaheadNavigationReturn } = gridNavigationSingleSelectionReturn;
        const { indexDemangler } = rearrangeableChildrenReturn;
        const { childrenHaveFocusChildContext, childrenHaveFocusReturn } = useChildrenHaveFocus({ childrenHaveFocusParameters });
        const { context: { managedChildContext }, managedChildrenReturn } = useManagedChildren({ managedChildrenParameters: { onChildCountChange: useStableCallback(c => onChildCountChange(c)), ...managedChildrenParameters } });
        const { paginatedChildrenReturn, paginatedChildrenReturn: { refreshPagination }, managedChildrenParameters: { onChildCountChange }, context: { paginatedChildContext } } = usePaginatedChildren({ managedChildrenReturn, paginatedChildrenParameters, linearNavigationParameters: { indexDemangler } });
        const { context: { staggeredChildContext }, staggeredChildrenReturn } = useStaggeredChildren({ managedChildrenReturn, staggeredChildrenParameters });
        const props = useMergedProps(linearNavigationReturn.propsStable, typeaheadNavigationReturn.propsStable);
        /*const getDefaultPaginationVisible = useStableCallback((i: number) => {
            return (i >= (paginatedChildrenParameters.paginationMin ?? -Infinity)) && (i < (paginatedChildrenParameters.paginationMax ?? Infinity));
        });*/
        const context = useStableObject({
            singleSelectionContext,
            managedChildContext,
            rovingTabIndexChildContext,
            typeaheadNavigationChildContext,
            childrenHaveFocusChildContext,
            gridNavigationRowContext,
            paginatedChildContext,
            staggeredChildContext
        });
        return {
            context,
            props,
            managedChildrenReturn,
            rearrangeableChildrenReturn,
            staggeredChildrenReturn,
            ...gridNavigationSingleSelectionReturn,
            childrenHaveFocusReturn,
            paginatedChildrenReturn,
        };
    }
    function useCompleteGridNavigationRow({ rowAsChildOfGridParameters: { managedChildParameters, context: { childrenHaveFocusChildContext, gridNavigationRowContext, managedChildContext: mcc1, rovingTabIndexChildContext, singleSelectionContext, typeaheadNavigationChildContext, staggeredChildContext, paginatedChildContext }, completeGridNavigationRowParameters, singleSelectionChildParameters, rovingTabIndexChildParameters, rovingTabIndexChildParameters: { hidden }, textContentParameters, ...rowAsChildOfGridParameters }, rowAsParentOfCellsParameters: { linearNavigationParameters, rovingTabIndexParameters, typeaheadNavigationParameters, ...rowAsParentOfCellsParameters } }) {
        const { index } = managedChildParameters;
        const { managedChildParameters: { setChildCountIfPaginated, setPaginationVisible, setParentIsPaginated }, paginatedChildReturn: { paginatedVisible, isPaginated, hideBecausePaginated }, props: paginationProps } = usePaginatedChild({ managedChildParameters: { index }, context: { paginatedChildContext } });
        const { managedChildParameters: { setParentIsStaggered, setStaggeredVisible }, staggeredChildReturn: { staggeredVisible, isStaggered, hideBecauseStaggered }, props: staggeredProps } = useStaggeredChild({ managedChildParameters: { index }, context: { staggeredChildContext } });
        rovingTabIndexChildParameters.hidden ||= (hideBecausePaginated || hideBecauseStaggered);
        singleSelectionChildParameters.disabled ||= rovingTabIndexChildParameters.hidden;
        const getChildren = T$1(() => managedChildrenReturn.getChildren(), []);
        const getHighestChildIndex = T$1(() => getChildren().getHighestIndex(), []);
        const isValid = T$1((i) => {
            const child = getChildren().getAt(i);
            if (child == null)
                return false;
            if (child.hidden)
                return false;
            return true;
        }, []);
        const { refElementReturn } = useRefElement({ refElementParameters: {} });
        const r = useGridNavigationSingleSelectionRow({
            rowAsParentOfCellsParameters: {
                ...rowAsParentOfCellsParameters,
                rovingTabIndexParameters: { initiallyTabbedIndex: 0, ...rovingTabIndexParameters },
                typeaheadNavigationParameters: { isValid, ...typeaheadNavigationParameters },
                linearNavigationParameters: { isValid, getHighestIndex: getHighestChildIndex, pageNavigationSize: 0, indexDemangler: identity$2, indexMangler: identity$2, ...linearNavigationParameters },
                managedChildrenReturn: { getChildren },
            },
            rowAsChildOfGridParameters: {
                ...rowAsChildOfGridParameters,
                refElementReturn,
                rovingTabIndexChildParameters,
                gridNavigationRowContext,
                rovingTabIndexChildContext,
                singleSelectionContext,
                typeaheadNavigationChildContext,
                singleSelectionChildParameters,
                managedChildParameters,
                textContentParameters: { hidden, ...textContentParameters },
                managedChildrenReturn: { getChildren },
            }
        });
        const { rowAsChildOfGridReturn, rowAsParentOfCellsReturn } = r;
        const { context: { managedChildContext }, managedChildrenReturn } = useManagedChildren({ managedChildrenParameters: r.rowAsParentOfCellsReturn.managedChildrenParameters });
        const { getElement } = refElementReturn;
        const baseInfo = {
            getElement,
            setTabbable: r.rowAsChildOfGridReturn.rovingTabIndexChildReturn.setTabbable,
            getTabbable: r.rowAsChildOfGridReturn.rovingTabIndexChildReturn.getTabbable,
            tabbable: r.rowAsChildOfGridReturn.rovingTabIndexChildReturn.tabbable,
            index: managedChildParameters.index,
            hidden: rovingTabIndexChildParameters.hidden,
            selected: r.rowAsChildOfGridReturn.singleSelectionChildReturn.selected,
            focusSelf: r.rowAsChildOfGridReturn.gridNavigationRowParameters.focusSelf,
            getSelected: r.rowAsChildOfGridReturn.singleSelectionChildReturn.getSelected,
            setLocalSelected: r.rowAsChildOfGridReturn.managedChildParameters.setLocalSelected,
            disabled: singleSelectionChildParameters.disabled,
            setTabbableColumnIndex: r.rowAsChildOfGridReturn.gridNavigationRowParameters.setTabbableColumnIndex,
            getSortValue: rowAsChildOfGridParameters.sortableChildParameters.getSortValue,
            setPaginationVisible,
            setChildCountIfPaginated: setChildCountIfPaginated,
            setParentIsPaginated,
            setParentIsStaggered,
            setStaggeredVisible
        };
        const { managedChildReturn } = useManagedChild({ context: { managedChildContext: mcc1 }, managedChildParameters: { index } }, { ...baseInfo, ...completeGridNavigationRowParameters });
        const context = useStableObject({
            managedChildContext,
            rovingTabIndexChildContext: r.rowAsParentOfCellsReturn.rovingTabIndexChildContext,
            typeaheadNavigationChildContext: r.rowAsParentOfCellsReturn.typeaheadNavigationChildContext,
            // completeGridNavigationContext: useStableObject({}),
            gridNavigationCellContext: r.rowAsParentOfCellsReturn.gridNavigationCellContext,
        });
        const { hasCurrentFocusParameters } = useChildrenHaveFocusChild({ childrenHaveFocusChildContext });
        //const { refElementReturn } = useRefElement<RowElement>({ refElementParameters: {} })
        const { hasCurrentFocusReturn } = useHasCurrentFocus({ refElementReturn, hasCurrentFocusParameters: { ...hasCurrentFocusParameters, onCurrentFocusedChanged: null } });
        const props = useMergedProps(refElementReturn.propsStable, 
        // TODO: Rows don't use tabIndex, but just excluding props here is...weird.
        //r.rowAsChildOfGridReturn.rovingTabIndexChildReturn.propsUnstable,
        r.rowAsChildOfGridReturn.singleSelectionChildReturn.propsUnstable, r.rowAsParentOfCellsReturn.linearNavigationReturn.propsStable, r.rowAsParentOfCellsReturn.typeaheadNavigationReturn.propsStable, hasCurrentFocusReturn.propsStable, paginationProps, staggeredProps);
        return {
            context,
            props,
            rowAsParentOfCellsReturn: {
                ...rowAsParentOfCellsReturn,
                managedChildrenReturn
            },
            rowAsChildOfGridReturn: {
                ...rowAsChildOfGridReturn,
                managedChildReturn,
                staggeredChildReturn: { isStaggered, staggeredVisible, hideBecauseStaggered },
                paginatedChildReturn: { isPaginated, paginatedVisible, hideBecausePaginated }
            },
            hasCurrentFocusReturn
            //managedChildrenReturn,
            //...gridNavigationSingleSelectionReturn
        };
    }
    function useCompleteGridNavigationCell({ gridNavigationCellParameters, managedChildParameters, context: { gridNavigationCellContext, managedChildContext, rovingTabIndexChildContext, typeaheadNavigationChildContext }, rovingTabIndexChildParameters: { hidden }, rovingTabIndexChildParameters, textContentParameters, 
    //managedChildContext,
    completeGridNavigationCellParameters: { focusSelf, ...completeGridNavigationCellParameters },
    //sortableChildParameters: { getSortValue },
    //    pressParameters: { onPressSync, ...pressParameters },
     }) {
        const { index } = managedChildParameters;
        const { refElementReturn } = useRefElement({ refElementParameters: {} });
        const { hasCurrentFocusParameters, rovingTabIndexChildReturn, textContentReturn, pressParameters } = useGridNavigationSingleSelectionCell({
            gridNavigationCellContext,
            gridNavigationCellParameters,
            managedChildParameters,
            rovingTabIndexChildContext,
            typeaheadNavigationChildContext,
            rovingTabIndexChildParameters,
            refElementReturn,
            textContentParameters: { hidden, ...textContentParameters }
        });
        const { hasCurrentFocusReturn } = useHasCurrentFocus({ hasCurrentFocusParameters: { onCurrentFocusedChanged: null, ...hasCurrentFocusParameters }, refElementReturn });
        /* const { pressReturn } = usePress<CellElement>({
             pressParameters: {
                 onPressSync: useStableCallback<NonNullable<typeof onPressSync>>(e => {
                     onPressSync?.(e);
                     completeGridNavigationContext.onPressSync?.(e);
                 }),
                 focusSelf: null,
                 ...pressParameters
             },
             refElementReturn
         });*/
        const baseInfo = {
            focusSelf,
            getElement: refElementReturn.getElement,
            hidden: rovingTabIndexChildParameters.hidden,
            index: managedChildParameters.index,
            getTabbable: rovingTabIndexChildReturn.getTabbable,
            setTabbable: rovingTabIndexChildReturn.setTabbable,
            tabbable: rovingTabIndexChildReturn.tabbable,
            //getSortValue
        };
        const { managedChildReturn } = useManagedChild({
            context: { managedChildContext },
            managedChildParameters: { index }
        }, {
            ...baseInfo,
            ...completeGridNavigationCellParameters
        });
        const props = useMergedProps(refElementReturn.propsStable, 
        //pressReturn.propsStable,
        rovingTabIndexChildReturn.propsUnstable, hasCurrentFocusReturn.propsStable);
        return {
            props,
            refElementReturn,
            rovingTabIndexChildReturn,
            pressParameters,
            //pressReturn,
            hasCurrentFocusReturn,
            managedChildReturn,
            textContentReturn
        };
    }

    /**
     * All the list-related hooks combined into one giant hook that encapsulates everything.
     *
     * Unlike most others, this hook assume's it's the final one--the "outermost" hook in the component--so it uses `useManagedChildren` and wraps everything up nicely,
     * combining event handlers that are used in multiple sub-hooks, collecting all the necessary context-related data, and merging all known DOM props together.
     *
     *
     *
     * @returns
     */
    function useCompleteListNavigation({ linearNavigationParameters, rearrangeableChildrenParameters, sortableChildrenParameters, typeaheadNavigationParameters, rovingTabIndexParameters, singleSelectionParameters, paginatedChildrenParameters, staggeredChildrenParameters, ...completeListNavigationParameters }) {
        //type M = UseListNavigationSingleSelectionChildInfo<ChildElement>;
        const { initiallySelectedIndex } = singleSelectionParameters;
        const getChildren = T$1(() => managedChildrenReturn.getChildren(), []);
        const getHighestChildIndex = T$1(() => getChildren().getHighestIndex(), []);
        const isValid = T$1((i) => {
            const child = getChildren().getAt(i);
            if (!child)
                return false;
            if (child.hidden)
                return false;
            return true;
        }, []);
        const { rearrangeableChildrenReturn: { indexDemangler, indexMangler, ...rearrangeableChildrenReturn }, sortableChildrenReturn } = useSortableChildren({
            rearrangeableChildrenParameters: {
                onRearranged: useStableCallback(() => { refreshPagination(paginatedChildrenParameters.paginationMin, paginatedChildrenParameters.paginationMax); }),
                ...rearrangeableChildrenParameters
            },
            sortableChildrenParameters
        });
        const { childrenHaveFocusParameters, managedChildrenParameters, rovingTabIndexChildContext, typeaheadNavigationChildContext, singleSelectionContext, linearNavigationReturn, rovingTabIndexReturn, singleSelectionReturn, typeaheadNavigationReturn } = useListNavigationSingleSelection({
            managedChildrenReturn: { getChildren },
            linearNavigationParameters: { getHighestIndex: getHighestChildIndex, isValid, indexDemangler, indexMangler, ...linearNavigationParameters },
            typeaheadNavigationParameters: { isValid, ...typeaheadNavigationParameters },
            rovingTabIndexParameters: { initiallyTabbedIndex: initiallySelectedIndex, ...rovingTabIndexParameters },
            singleSelectionParameters,
            ...completeListNavigationParameters,
        });
        //const { linearNavigationReturn, typeaheadNavigationReturn } = listNavigationSingleSelectionSortableReturn;
        //const [childCount, setChildCount] = useState(0);
        const { childrenHaveFocusChildContext, childrenHaveFocusReturn } = useChildrenHaveFocus({ childrenHaveFocusParameters });
        const { context: { managedChildContext }, managedChildrenReturn } = useManagedChildren({
            managedChildrenParameters: {
                onChildCountChange: useStableCallback((c) => { onChildCountChange(c); }),
                ...managedChildrenParameters
            }
        });
        const { paginatedChildrenReturn, paginatedChildrenReturn: { refreshPagination }, managedChildrenParameters: { onChildCountChange }, context: { paginatedChildContext } } = usePaginatedChildren({ managedChildrenReturn, paginatedChildrenParameters, linearNavigationParameters: { indexDemangler } });
        const { context: { staggeredChildContext }, staggeredChildrenReturn } = useStaggeredChildren({ managedChildrenReturn, staggeredChildrenParameters });
        const props = useMergedProps(linearNavigationReturn.propsStable, typeaheadNavigationReturn.propsStable);
        const context = useStableObject({
            singleSelectionContext,
            managedChildContext,
            rovingTabIndexChildContext,
            typeaheadNavigationChildContext,
            childrenHaveFocusChildContext,
            paginatedChildContext,
            staggeredChildContext
        });
        return {
            context,
            props,
            managedChildrenReturn,
            rearrangeableChildrenReturn: {
                indexDemangler,
                indexMangler,
                ...rearrangeableChildrenReturn
            },
            staggeredChildrenReturn,
            paginatedChildrenReturn,
            sortableChildrenReturn,
            linearNavigationReturn,
            rovingTabIndexReturn,
            singleSelectionReturn,
            typeaheadNavigationReturn,
            childrenHaveFocusReturn
        };
    }
    function useCompleteListNavigationChild({ 
    //managedChildParameters: { hidden, disabled, index, getSortValue },
    completeListNavigationChildParameters: { focusSelf, ...completeListNavigationChildParameters }, singleSelectionChildParameters, rovingTabIndexChildParameters: { hidden }, managedChildParameters, textContentParameters, context: { childrenHaveFocusChildContext, managedChildContext, rovingTabIndexChildContext, singleSelectionContext, typeaheadNavigationChildContext, paginatedChildContext, staggeredChildContext }, 
    //pressParameters: { onPressSync: ops1, ...pressParameters },
    sortableChildParameters: { getSortValue }, ..._void }) {
        const { index } = managedChildParameters;
        const { managedChildParameters: { setChildCountIfPaginated, setPaginationVisible, setParentIsPaginated }, paginatedChildReturn, paginatedChildReturn: { hideBecausePaginated }, props: paginationProps } = usePaginatedChild({ managedChildParameters: { index }, context: { paginatedChildContext } });
        const { managedChildParameters: { setParentIsStaggered, setStaggeredVisible }, staggeredChildReturn, staggeredChildReturn: { hideBecauseStaggered }, props: staggeredProps } = useStaggeredChild({ managedChildParameters, context: { staggeredChildContext } });
        //let { hidden } = rovingTabIndexChildParameters;
        hidden ||= (hideBecausePaginated || hideBecauseStaggered);
        let { disabled } = singleSelectionChildParameters;
        if (hidden)
            disabled = true;
        const { refElementReturn } = useRefElement({ refElementParameters: {} });
        const { getElement } = refElementReturn;
        const { hasCurrentFocusParameters: { onCurrentFocusedInnerChanged: ocfic1 }, pressParameters, rovingTabIndexChildReturn, singleSelectionChildReturn, managedChildParameters: { setLocalSelected } } = useListNavigationSingleSelectionChild({
            managedChildParameters: { index },
            rovingTabIndexChildParameters: { hidden },
            singleSelectionChildParameters: { ...singleSelectionChildParameters },
            rovingTabIndexChildContext,
            singleSelectionContext,
            typeaheadNavigationChildContext,
            refElementReturn,
            textContentParameters: { hidden, ...textContentParameters }
        });
        const { getTabbable, setTabbable, tabbable } = rovingTabIndexChildReturn;
        /* const { pressReturn } = usePress<ChildElement>({
             pressParameters: {
                 ...p1,
                 ...pressParameters,
                 onPressSync: disabled ? null : ((e) => {
                     ops2?.(e);
                     ops1?.(e);
                 })
             }, refElementReturn
         });*/
        const { getSelected, selected } = singleSelectionChildReturn;
        const mcp1 = {
            disabled,
            focusSelf,
            getElement,
            getSelected,
            getTabbable,
            hidden,
            index,
            selected,
            setLocalSelected,
            setTabbable,
            tabbable,
            getSortValue,
            setChildCountIfPaginated,
            setPaginationVisible,
            setParentIsPaginated,
            setParentIsStaggered,
            setStaggeredVisible
        };
        const { managedChildReturn } = useManagedChild({ context: { managedChildContext }, managedChildParameters: { index } }, { ...mcp1, ...completeListNavigationChildParameters });
        const { hasCurrentFocusParameters: { onCurrentFocusedInnerChanged: ocfic2 } } = useChildrenHaveFocusChild({ childrenHaveFocusChildContext });
        const onCurrentFocusedInnerChanged = useStableCallback((focused, prev, e) => {
            ocfic1?.(focused, prev, e);
            ocfic2?.(focused, prev, e);
        });
        const { hasCurrentFocusReturn } = useHasCurrentFocus({ hasCurrentFocusParameters: { onCurrentFocusedInnerChanged, onCurrentFocusedChanged: null }, refElementReturn });
        const props = useMergedProps(refElementReturn.propsStable, hasCurrentFocusReturn.propsStable, rovingTabIndexChildReturn.propsUnstable, singleSelectionChildReturn.propsUnstable, paginationProps, staggeredProps);
        return {
            props,
            pressParameters,
            refElementReturn,
            rovingTabIndexChildReturn,
            singleSelectionChildReturn,
            hasCurrentFocusReturn,
            managedChildReturn,
            paginatedChildReturn,
            staggeredChildReturn
        };
    }
    /*
    function foo<ParentElement extends Element, ChildElement extends Element, M extends UseListNavigationSingleSelectionSortableChildInfo<ChildElement>>(p: UseCompleteListNavigationParameters<ParentElement, ChildElement, M>) {
        const { singleSelectionReturn } = useCompleteListNavigation<ParentElement, ChildElement, M>(p);
        const selectedIndex = 0;
        useSingleSelectionDeclarative({ singleSelectionReturn, singleSelectionDeclarativeParameters: { selectedIndex } })
    }*/

    /**
     * Combines dismissal hooks and focus trap hooks into one.
     *
     * Another in the "complete" series, alongside list/grid navigation and dismissal itself.
     *
     * Use for dialogs, menus, etc.  Anything that can be dismissed and might trap focus, basically.
     *
     * @param param0
     * @returns
     */
    function useModal({ dismissParameters, escapeDismissParameters, focusTrapParameters: { trapActive, ...focusTrapParameters } }) {
        const { open } = dismissParameters;
        //const { getWindow } = escapeDismissParameters;
        //const getDocument = useCallback(() => { return getWindow().document; }, [getWindow]);
        const { refElementPopupReturn, refElementSourceReturn } = useDismiss({ dismissParameters, escapeDismissParameters });
        const { focusTrapReturn, refElementReturn } = useFocusTrap({
            focusTrapParameters: { trapActive: open && trapActive, ...focusTrapParameters },
            refElementParameters: {}
        });
        const { propsStable: pp1 } = refElementPopupReturn;
        const { propsStable: ps2 } = refElementSourceReturn;
        const { propsUnstable: pp3 } = focusTrapReturn;
        const { propsStable: pp4 } = refElementReturn;
        return {
            propsPopup: pp1,
            propsFocusContainer: useMergedProps(pp3, pp4),
            propsSource: ps2,
            refElementPopupReturn,
            refElementSourceReturn,
            focusTrapReturn,
        };
    }

    function useTimeout({ timeout, callback, triggerIndex }) {
        const stableCallback = useStableCallback(() => { startTimeRef.current = null; callback(); });
        const getTimeout = useStableGetter(timeout);
        // Set any time we start timeout.
        // Unset any time the timeout completes
        const startTimeRef = _(null);
        const timeoutIsNull = (timeout == null);
        // Any time the triggerIndex changes (including on mount)
        // restart the timeout.  The timeout does NOT reset
        // when the duration or callback changes, only triggerIndex.
        h(() => {
            if (!timeoutIsNull) {
                const timeout = getTimeout();
                console.assert(timeoutIsNull == (timeout == null));
                if (timeout != null) {
                    startTimeRef.current = +(new Date());
                    const handle = setTimeout(stableCallback, timeout);
                    return () => clearTimeout(handle);
                }
            }
        }, [triggerIndex, timeoutIsNull]);
        const getElapsedTime = T$1(() => {
            return (+(new Date())) - (+(startTimeRef.current ?? new Date()));
        }, []);
        const getRemainingTime = T$1(() => {
            const timeout = getTimeout();
            return timeout == null ? null : Math.max(0, timeout - getElapsedTime());
        }, []);
        return { getElapsedTime, getRemainingTime };
    }

    function supportsPointerEvents() {
        return ("onpointerup" in window);
    }
    /**
     * Adds the necessary event handlers to create a "press"-like event for
     * any element, whether it's a native &lt;button> or regular &lt;div>,
     * and allows for a "long press" that can be used to,
     * e.g., show a tooltip *instead* of activating a press.
     *
     * Notably, the following cases are covered:
     * * The target element is properly focused, even on iOS Safari (*especially* on iOS Safari)
     * * Double-clicks won't select text, it just presses the button twice.
     * * Text selection that happens to end/start with this element won't invoke a press.
     * * The `enter` key immediately invokes a press (by default just once until pressed again), while the `space` key invokes it when released, if focus hasn't moved away from the button.
     * * Haptic feedback (on, like, the one browser combination that supports it &mdash; this can be disabled app-wide with `setButtonVibrate`)
     *
     * In addition, returns a "more accurate" CSS `active` and `hover`; more accurate
     * in that `hover` won't mess up mobile devices that see `hover` and mess up your click events,
     * and in that `active` accurately displays when a press would occur or not.
     *
     * @param onClickSync
     * @param exclude Whether the polyfill shouldn't apply (can specify for specific interactions)
     */
    function usePress(args) {
        const { refElementReturn: { getElement }, pressParameters: { focusSelf, onPressSync, allowRepeatPresses, longPressThreshold, excludeEnter: ee, excludePointer: ep, excludeSpace: es } } = args;
        const excludeEnter = useStableCallback(ee ?? returnFalse);
        const excludeSpace = useStableCallback(es ?? returnFalse);
        const excludePointer = useStableCallback(ep ?? returnFalse);
        const hasPressEvent = (onPressSync != null);
        /**
         * Explanations:
         *
         * It would be nice to just use pointer events for everything,
         * but 2019 iOS devices can't run those, amazingly enough, and
         * that's still pretty recent. So we need to have backup touch
         * events.
         *
         * Why not just use click? Because at the very, very least,
         * we also need to be able to handle space and enter key presses,
         * and that needs to work regardless of if it's a <button> or not.
         *
         * Also, we do still use click, because programmatic clicks can come
         * from anything from ATs to automation scripts, and we don't want
         * to break those. But since we are listening for pointer/touch events,
         * and we can't prevent the subsequent click event from happening,
         * and we **don't want to duplicate press events**, we need to
         * ignore click events that happen in the same tick as a handled press event.
         *
         * When we do a pointermove/touchmove, we check to see if we're still hovering over the element
         * for more accurate "active"/hover detection.
         *
         * "But you have a pointerleave event, why check for hovering during pointermove?"
         *
         * Because for some reason, pointerleave (etc.) aren't fired until *after* pointerup, no matter what.
         *
         */
        // All our checking for pointerdown and up doesn't mean anything if it's
        // a programmatic onClick event, which could come from any non-user source.
        // We want to handle those just like GUI clicks, but we don't want to double-up on press events.
        // So if we handle a press from pointerup, we ignore any subsequent click events, at least for a tick.
        const [getJustHandled, setJustHandled] = usePassiveState(useStableCallback((justHandled, _p, reason) => {
            if (justHandled) {
                const h = setTimeout(() => {
                    setJustHandled(false, reason);
                }, 1);
                return clearTimeout(h);
            }
        }), returnFalse);
        const [longPress, setLongPress] = useState(null);
        const [waitingForSpaceUp, setWaitingForSpaceUp, getWaitingForSpaceUp] = useState(false);
        const [pointerDownStartedHere, setPointerDownStartedHere, getPointerDownStartedHere] = useState(false);
        const [hovering, setHovering, getHovering] = useState(false);
        const onTouchStart = T$1((e) => {
            e.preventDefault();
            e.stopPropagation();
            setPointerDownStartedHere(true);
            setHovering(true);
            setLongPress(false);
            const element = getElement();
            if (element)
                focusSelf(element);
        }, []);
        const onTouchMove = T$1((e) => {
            e.preventDefault();
            e.stopPropagation();
            const element = getElement();
            const touch = e.touches[0];
            // Be as generous as possible with touch events by checking all four corners of the radius too
            const offsets = [
                [0, 0],
                [-touch.radiusX, -touch.radiusY],
                [+touch.radiusX, -touch.radiusY],
                [-touch.radiusX, +touch.radiusY],
                [+touch.radiusX, +touch.radiusY]
            ];
            let hoveringAtAnyPoint = false;
            for (const [x, y] of offsets) {
                const elementAtTouch = document.elementFromPoint((touch?.clientX ?? 0) + x, (touch?.clientY ?? 0) + y);
                hoveringAtAnyPoint ||= (element?.contains(elementAtTouch) ?? false);
            }
            setHovering(hoveringAtAnyPoint);
        }, []);
        const onTouchEnd = T$1((e) => {
            e.preventDefault();
            e.stopPropagation();
            const hovering = getHovering();
            const pointerDownStartedHere = getPointerDownStartedHere();
            setJustHandled(true);
            if (pointerDownStartedHere && hovering) {
                handlePress(e);
            }
            setWaitingForSpaceUp(false);
            setHovering(false);
            setPointerDownStartedHere(false);
        }, []);
        const onPointerDown = T$1((e) => {
            if (!excludePointer()) {
                if ((e.buttons & 1)) {
                    e.preventDefault();
                    e.stopPropagation();
                    setPointerDownStartedHere(true);
                    setHovering(true);
                    setLongPress(false);
                    const element = getElement();
                    if (element)
                        focusSelf(element);
                }
            }
        }, []);
        const onPointerMove = useStableCallback((e) => {
            let listeningForPress = getPointerDownStartedHere();
            // If we're hovering over this element and not holding down the mouse button (or whatever other primary button)
            // then we're definitely not in a press anymore (if we could we'd just wait for onPointerUp, but it could happen outside this element)
            if (!(e.buttons & 1))
                setPointerDownStartedHere(listeningForPress = false);
            if (listeningForPress) {
                //e.preventDefault();
                //e.stopPropagation();
                const element = getElement();
                // Note: elementFromPoint starts reasonably expensive on a decent computer when on the order of 500 or so elements,
                // so we only test for hovering while actively attempting to detect a press
                const elementAtPointer = document.elementFromPoint(e.clientX, e.clientY);
                setHovering(element == elementAtPointer || element?.contains(elementAtPointer) || false);
            }
        });
        const onPointerUp = T$1((e) => {
            const hovering = getHovering();
            const pointerDownStartedHere = getPointerDownStartedHere();
            if (!excludePointer()) {
                setJustHandled(true);
                if (pointerDownStartedHere && hovering) {
                    handlePress(e);
                    e.preventDefault();
                    e.stopPropagation();
                }
            }
            setWaitingForSpaceUp(false);
            setHovering(false);
            setPointerDownStartedHere(false);
            setLongPress(false);
        }, []);
        const onPointerEnter = T$1((_e) => {
            setHovering(true);
        }, []);
        const onPointerLeave = T$1((_e) => {
            setHovering(false);
            setLongPress(false);
        }, []);
        useTimeout({
            callback: () => {
                const element = getElement();
                setLongPress(pointerDownStartedHere && hovering);
                if (element && pointerDownStartedHere && hovering) {
                    focusSelf(element);
                    if (longPressThreshold) {
                        setWaitingForSpaceUp(false);
                        setHovering(false);
                        setPointerDownStartedHere(false);
                    }
                }
            },
            timeout: longPressThreshold ?? null,
            triggerIndex: longPress ? true : (pointerDownStartedHere && hovering)
        });
        const handlePress = useStableCallback((e) => {
            setWaitingForSpaceUp(false);
            setHovering(false);
            setPointerDownStartedHere(false);
            setLongPress(null);
            if (onPressSync) {
                // Note: The element is focused here because of iOS Safari.
                //
                // It's always iOS Safari.
                //
                // iOS Safari (tested on 12) downright refuses to allow 
                // elements to be manually focused UNLESS it happens within
                // an event handler like this.  It also doesn't focus
                // buttons by default when clicked, tapped, etc.
                //
                // If it becomes problematic that button-likes explicitly become
                // focused when they are pressed, then an alternative solution for
                // the question of "how do menu buttons keep their menus open"
                // and other focus-related nonsense needs to be figured out.
                //
                // For iOS Safari.
                //
                const element = getElement();
                if (element)
                    focusSelf(element);
                // Whatever the browser was going to do with this event,
                // forget it. We're turning it into a "press" event.
                e.preventDefault();
                // Also stop anyone else from listening to this event,
                // since we're explicitly handling it.
                // (Notably, this allows labels to wrap inputs, with them
                // both having press event handlers, without double-firing)
                e.stopPropagation();
                // Haptic feedback for this press event
                try {
                    // The default implementation doesn't throw,
                    // but we should guard against user implementations that could.
                    pulse();
                }
                finally {
                    // Actually call our handler.
                    onPressSync(e);
                }
            }
        });
        const onKeyDown = useStableCallback((e) => {
            if (onPressSync) {
                if (e.key == " " && !excludeSpace()) {
                    // We don't actually activate it on a space keydown
                    // but we do preventDefault to stop the page from scrolling.
                    setWaitingForSpaceUp(true);
                    //onActiveStart(e);
                    e.preventDefault();
                }
                if (e.key == "Enter" && !excludeEnter() && (!e.repeat || (allowRepeatPresses ?? false))) {
                    handlePress(e);
                }
            }
        });
        const onKeyUp = useStableCallback((e) => {
            const waitingForSpaceUp = getWaitingForSpaceUp();
            if (waitingForSpaceUp && e.key == " " && !excludeSpace())
                handlePress(e);
        });
        const onClick = useStableCallback((e) => {
            const element = getElement();
            if (onPressSync) {
                e.preventDefault();
                //const element = getElement();
                //if (element)
                //    focusSelf(element);
                if (e.detail > 1) {
                    e.stopImmediatePropagation();
                    e.stopPropagation();
                }
                else {
                    // Listen for "programmatic" click events.
                    if (
                    // Ignore the click events that were *just* handled with pointerup
                    getJustHandled() == false &&
                        // Ignore stray click events that were't fired SPECIFICALLY on this element
                        e.target == element &&
                        // Ignore click events that were fired on a radio that just became checked
                        // (Whenever the `checked` property is changed, all browsers fire a `click` event, no matter the reason for the change,
                        // but since everything's declarative and *we* were the reason for the change, 
                        // this will always be a duplicate event related to whatever we just did.)
                        element?.tagName == 'input' && element.type == 'radio' && element.checked) {
                        // Intentional, for now. Programmatic clicks shouldn't happen in most cases.
                        // TODO: Remove this when I'm confident stray clicks won't be handled.
                        console.assert(false);
                        debugger;
                        handlePress(e);
                    }
                }
            }
        });
        const onFocusOut = useStableCallback((_e) => {
            setWaitingForSpaceUp(false);
        });
        const p = supportsPointerEvents();
        return {
            pressReturn: {
                pseudoActive: ((pointerDownStartedHere && hovering) || waitingForSpaceUp || false),
                //hovering,
                longPress,
                propsUnstable: {
                    onKeyDown,
                    onKeyUp,
                    onTouchStart: !hasPressEvent ? undefined : (!p ? onTouchStart : undefined),
                    onTouchCancel: !hasPressEvent ? undefined : (!p ? onTouchEnd : undefined),
                    onTouchMove: !hasPressEvent ? undefined : (!p ? onTouchMove : undefined),
                    onTouchEnd: !hasPressEvent ? undefined : (!p ? onTouchEnd : undefined),
                    onPointerDown: !hasPressEvent ? undefined : (p ? onPointerDown : undefined),
                    onPointerCancel: !hasPressEvent ? undefined : (p ? onPointerDown : undefined),
                    onPointerMove: !pointerDownStartedHere || !hasPressEvent ? undefined : (p ? onPointerMove : undefined),
                    onPointerUp: !hasPressEvent ? undefined : (p ? onPointerUp : undefined),
                    onPointerEnter: !hasPressEvent ? undefined : (p ? onPointerEnter : undefined),
                    onPointerLeave: !hasPressEvent ? undefined : (p ? onPointerLeave : undefined),
                    onfocusout: onFocusOut,
                    onClick
                },
            }
        };
    }
    let pulse = (("vibrate" in navigator) && (navigator.vibrate instanceof Function)) ? (() => navigator.vibrate(10)) : (() => { });

    function useRandomId({ randomIdParameters: { prefix, otherReferencerProp } }) {
        const id = (prefix + V$1());
        useEnsureStability("useRandomId", prefix, id);
        const referencerElementProps = _(otherReferencerProp == null ? {} : { [otherReferencerProp]: id });
        const sourceElementProps = _({ id });
        useEnsureStability("useRandomIdReferencerElement", otherReferencerProp);
        return {
            propsReferencer: referencerElementProps.current,
            propsSource: sourceElementProps.current,
            randomIdReturn: {
                id: id
            }
        };
    }

    /**
     * While `useRandomId` allows the referencer to use the source's ID, sometimes you also want the reverse too (e.g. I `aria-label` you, you `aria-controls` me. That sort of thing).
     */
    function useRandomDualIds({ randomIdInputParameters, randomIdLabelParameters, }) {
        const { randomIdReturn: randomIdInputReturn, propsReferencer: propsLabelAsReferencer, propsSource: propsInputAsSource } = useRandomId({ randomIdParameters: randomIdInputParameters });
        const { randomIdReturn: randomIdLabelReturn, propsReferencer: propsInputAsReferencer, propsSource: propsLabelAsSource } = useRandomId({ randomIdParameters: randomIdLabelParameters });
        return {
            propsLabel: useMergedProps(propsLabelAsReferencer, propsLabelAsSource),
            propsInput: useMergedProps(propsInputAsReferencer, propsInputAsSource),
            randomIdInputReturn,
            randomIdLabelReturn
        };
    }

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = function() {
      return root$1.Date.now();
    };

    var now$1 = now;

    /** Used to match a single whitespace character. */
    var reWhitespace = /\s/;

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */
    function trimmedEndIndex(string) {
      var index = string.length;

      while (index-- && reWhitespace.test(string.charAt(index))) {}
      return index;
    }

    /** Used to match leading whitespace. */
    var reTrimStart = /^\s+/;

    /**
     * The base implementation of `_.trim`.
     *
     * @private
     * @param {string} string The string to trim.
     * @returns {string} Returns the trimmed string.
     */
    function baseTrim(string) {
      return string
        ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
        : string;
    }

    /** `Object#toString` result references. */
    var symbolTag = '[object Symbol]';

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /** Used as references for various `Number` constants. */
    var NAN = 0 / 0;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt = parseInt;

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /** Error message constants. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax = Math.max,
        nativeMin = Math.min;

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now$1();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now$1());
      }

      function debounced() {
        var time = now$1(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    function identity$1(...t) { return t; }
    /**
     * Given an async function, returns a function that's suitable for non-async APIs,
     * along with other information about the current run's status.
     *
     * See also `useAsyncHandler` for a version that's specialized for DOM event handlers.
     *
     * When called multiple times in quick succession, (i.e. before the handler has finished),
     * this works like Lodash's `throttle` function with the `wait` option always
     * set to however long the handler takes to complete. A second call to the sync function will be
     * throttled until the first call has finished. The return value of the function is the result
     * of the previous invocation, or `undefined` on the first call.
     *
     * The handler is only ever delayed if one is currently running, so, e.g. for iOS touch events the
     * first call happens in the same event handler (which means things like calls to `element.focus()`
     * will work as intended, since that fails when the event is "split up")
     *
     * Finally, because the sync handler may be invoked on a delay, any property references on the arguments
     * provided might be stale by the time it's actually invoked (e.g. accessing `event.currentTarget.checked`
     * is not stable across time because it's a "live" value -- you almost always want the value that it
     * had at the original time the handler was called). The `capture` option allows you to save that kind of
     * dynamic data at the time it runs; the `AP` and `SP` type parameters likewise control
     * the parameters the async handler and sync handler expect respectively.
     *
     */
    function useAsync(asyncHandler2, options) {
        // Things related to current execution
        // Because we can both return and throw undefined, 
        // we need separate state to track their existance too.
        const [pending, setPending, _getPending] = useState(false);
        const [result, setResult, _getResult] = useState(undefined);
        const [error, setError, _getError] = useState(undefined);
        const [hasError, setHasError, _getHasError] = useState(false);
        const [hasResult, setHasResult, _getHasResult] = useState(false);
        const [asyncDebouncing, setAsyncDebouncing] = useState(false);
        const [syncDebouncing, setSyncDebouncing] = useState(false);
        //const [currentCapture, setCurrentCapture] = useState<AP | undefined>(undefined);
        const incrementCallCount = T$1(() => { setRunCount(c => c + 1); }, []);
        const incrementResolveCount = T$1(() => { setResolveCount(c => c + 1); }, []);
        const incrementRejectCount = T$1(() => { setRejectCount(c => c + 1); }, []);
        const incrementFinallyCount = T$1(() => { setSettleCount(c => c + 1); }, []);
        /* eslint-disable prefer-const */
        let { throttle, debounce, capture: captureUnstable } = (options ?? {});
        const captureStable = useStableCallback(captureUnstable ?? identity$1);
        const asyncHandlerStable = useStableCallback(asyncHandler2 ?? identity$1);
        const { flush, syncOutput, cancel } = F$1(() => {
            return asyncToSync({
                asyncInput: asyncHandlerStable,
                capture: captureStable,
                onAsyncDebounce: setAsyncDebouncing,
                onError: setError,
                onPending: setPending,
                onReturnValue: setResult,
                onSyncDebounce: setSyncDebouncing,
                onHasError: setHasError,
                onHasResult: setHasResult,
                onInvoke: incrementCallCount,
                onFinally: incrementFinallyCount,
                onReject: incrementRejectCount,
                onResolve: incrementResolveCount,
                throttle: options?.throttle,
                wait: options?.debounce
            });
        }, [throttle, debounce]);
        h(() => {
            return () => cancel();
        }, [cancel]);
        // We keep, like, a lot of render-state, but it only ever triggers a re-render
        // when we start/stop an async action.
        // Keep track of this for the caller's sake -- we don't really care.
        /*const [currentType, setCurrentType] = useState<null | "sync" | "async">(null);*/
        const [runCount, setRunCount] = useState(0);
        const [settleCount, setSettleCount] = useState(0);
        const [resolveCount, setResolveCount] = useState(0);
        const [rejectCount, setRejectCount] = useState(0);
        return {
            syncHandler: syncOutput,
            //currentType,
            pending,
            result,
            error,
            hasError: hasError || false,
            hasResult: hasResult || false,
            resolveCount,
            rejectCount,
            settleCount,
            debouncingAsync: asyncDebouncing,
            debouncingSync: syncDebouncing,
            callCount: runCount,
            flushDebouncedPromise: flush
        };
    }
    function isPromise(p) {
        return p instanceof Promise;
    }
    const Unset = Symbol("Unset");
    /**
     * lodash-ish function that's like debounce + (throttle w/ async handling) combined.
     *
     * Requires a lot of callbacks to meaningfully turn a red function into a blue one, but you *can* do it!
     * Note that part of this is emulating the fact that the sync handler cannot have a return value,
     * so you'll need to use `setResolve` and the other related functions to do that in whatever way works for your specific scenario.
     *
     * The comments are numbered in approximate execution order for your reading pleasure (1 is near the bottom).
     */
    function asyncToSync({ asyncInput, onInvoke, onFinally: onFinallyAny, onReject, onResolve, onHasError, onHasResult, onError, onReturnValue, capture, onAsyncDebounce, onSyncDebounce, onPending, throttle, wait }) {
        let pending = false;
        let syncDebouncing = false;
        let asyncDebouncing = false;
        let currentCapture = Unset;
        const onFinally = () => {
            // 8. This is run at the end of every invocation of the async handler,
            // whether it completed or not, and whether it was async or not.
            onFinallyAny();
            onPending(pending = false);
            onAsyncDebounce(asyncDebouncing = false);
            if (!asyncDebouncing) ;
            else {
                // 9b. Another request to run the async handler came in while we were running this one.
                // Instead of stopping, we're just going to immediately run again using the arguments that were given to us most recently.
                // We also clear that flag, because we're handling it now. It'll be set again if the handler is called again while *this* one is running
                //onAsyncDebounce(asyncDebouncing = false);
                console.assert(currentCapture !== Unset);
                if (currentCapture != Unset) {
                    onSyncDebounce(syncDebouncing = true);
                    syncDebounced();
                }
            }
        };
        const sync = (...args) => {
            // 5. We're finally running the async version of the function, so notify the caller that the return value is pending.
            // And because the fact that we're here means the debounce/throttle period is over, we can clear that flag too.
            onPending(pending = true);
            console.assert(syncDebouncing == false);
            onHasError(null);
            onHasResult(null);
            let promiseOrReturn;
            let hadSyncError = false;
            try {
                // 6. Run the function we were given.
                // Because it may be sync, or it may throw before returning, we must still wrap it in a try/catch...
                // Also important is that we preserve the async-ness (or lack thereof) on the original input function.
                onInvoke();
                promiseOrReturn = asyncInput(...args);
                onHasError(false);
            }
            catch (ex) {
                hadSyncError = true;
                onError(ex);
            }
            // 7. Either end immediately, or schedule to end when completed.
            if (isPromise(promiseOrReturn)) {
                promiseOrReturn
                    .then(r => { onResolve(); onHasResult(true); onReturnValue(r); return r; })
                    .catch(e => { onReject(); onHasError(true); onError(e); return e; })
                    .finally(onFinally);
            }
            else {
                if (!hadSyncError) {
                    onResolve();
                    onHasResult(true);
                    onHasError(false);
                }
                else {
                    onReject();
                    onHasResult(false);
                    onHasError(true);
                }
                onReturnValue(promiseOrReturn);
                onPending(pending = false);
                onFinally();
            }
        };
        // lodash uses "in" instead of checking for `undefined`...
        const lodashOptions = {
            leading: !wait,
            trailing: true
        };
        if (throttle) {
            if (wait == null || (wait < throttle))
                wait = throttle;
            lodashOptions.maxWait = throttle;
        }
        const syncDebounced = debounce(() => {
            // 3. Instead of calling the sync version of our function directly, we allow it to be throttled/debounced.
            onSyncDebounce(syncDebouncing = false);
            if (!pending) {
                // 4a. If this is the first invocation, or if we're not still waiting for a previous invocation to finish its async call,
                // then we can just go ahead and run the debounced version of our function.
                console.assert(currentCapture != Unset);
                sync(...currentCapture);
            }
            else {
                // 4b. If we were called while still waiting for the (or a) previous invocation to finish,
                // then we'll need to delay this one. When that previous invocation finishes, it'll check
                // to see if it needs to run again, and it will use these new captured arguments from step 2.
                onAsyncDebounce(asyncDebouncing = true);
            }
        }, wait || undefined, lodashOptions);
        return {
            syncOutput: (...args) => {
                // 1. We call the sync version of our async function.
                // 2. We capture the arguments into a form that won't become stale if/when the function is called with a (possibly seconds-long) delay (e.g. event.currentTarget.value on an <input> element).
                currentCapture = capture(...args);
                onSyncDebounce(syncDebouncing = true);
                syncDebounced();
            },
            flush: () => {
                syncDebounced.flush();
            },
            cancel: () => {
                syncDebounced.cancel();
            }
        };
    }
    const { syncOutput } = asyncToSync({
        asyncInput: async (async) => { return 0; },
        capture: (sync) => ["async"],
        onInvoke: () => { },
        onFinally: () => { },
        onReject: () => { },
        onResolve: () => { },
        onAsyncDebounce: () => { },
        onError: () => { },
        onHasError: () => { },
        onHasResult: () => { },
        onPending: () => { },
        onReturnValue: () => { },
        onSyncDebounce: () => { },
        throttle: 0,
        wait: 0
    });
    syncOutput("sync");

    /**
     * Given an asyncronous event handler, returns a syncronous one that works on the DOM,
     * along with some other information related to the current state.
     * Does not modify any props.
     *
     * Note that because the handler you provide may be called with a delay, and
     * because the value of, e.g., an `<input>` element will likely be stale by the
     * time the delay is over, a `capture` function is necessary in order to
     * capture the relevant information from the DOM. Any other simple event data,
     * like `mouseX` or `shiftKey` can stay on the event itself and don't
     * need to be captured &ndash; it's never stale.
     *
     * ```tsx
     * const asyncOnInput = async (value: number, e: Event) => {
     *     [...] // Ex. send to a server and setState when done
     * };
     * const {
     *     // A sync version of asyncOnInput
     *     syncHandler,
     *     // True while the handler is running
     *     pending,
     *     // The error thrown, if any
     *     error,
     *     // Show this value while the operation's pending
     *     currentCapture,
     *     // And others, see `UseAsyncHandlerReturnType`
     *     ...rest
     * } = useAsyncHandler<HTMLInputElement>()(asyncOnInput, {
     *     // Pass in the capture function that saves event data
     *     // from being stale.
     *     capture: e => {
     *         // `capture` can have side-effects because
     *         // it's called exactly once per invocation
     *         e.preventDefault();
     *
     *         // Save this value so that it's never stale
     *         return e.currentTarget.valueAsNumber;
     *     }
     * });
     *
     * const onInput = pending? null : syncHandler;
     * ```
     *
     * The handler is automatically throttled to only run one at a time.
     * If the handler is called, and then before it finishes, is called again,
     * it will be put on hold until the current one finishes, at which point
     * the second one will run.  If the handler is called a third time before
     * the first has finished, it will *replace* the second, so only the most
     * recently called iteration of the handler will run.
     *
     *
     * You may optionally *also* specify debounce and throttle parameters that wait until the
     * syncronous handler has not been called for the specified number of
     * milliseconds, at which point we *actually* run the asyncronous handler
     * according to the logic in the previous paragraph. This is in
     * *addition* to throttling the handler, and does not replace that behavior.
     *
     * @see useAsync A more general version of this hook that can work with any type of handler, not just DOM event handlers.
     */
    function useAsyncHandler({ asyncHandler, capture: originalCapture, ...restAsyncOptions }) {
        // We need to differentiate between "nothing captured yet" and "`undefined` was captured"
        const [currentCapture, setCurrentCapture, getCurrentCapture] = useState(undefined);
        const [hasCapture, setHasCapture] = useState(false);
        // Wrap around the normal `useAsync` `capture` function to also
        // keep track of the last value the user actually input.
        // 
        // Without this there's no way to re-render the control with
        // it being both controlled and also having the "correct" value,
        // and at any rate also protects against sudden exceptions reverting
        // your change out from under you.
        const capture = useStableCallback((e) => {
            const captured = originalCapture(e);
            setCurrentCapture(captured);
            setHasCapture(true);
            return [captured, e];
        });
        return {
            getCurrentCapture,
            currentCapture,
            hasCapture,
            ...useAsync(asyncHandler, { capture, ...restAsyncOptions })
        };
    }

    /**
     * Very basic hook for a root-level component to use to allow any children within the whole app to push children to a portal somewhere.
     *
     * Returns the portal (as `children`, and functions to add, remove, or update a child to the portaled area)
     *
     * TODO: Can't push a child until after the very first `useLayoutEffect`
     *
     * @param param0
     * @returns
     */
    function usePortalChildren({ target }) {
        const [pushChild, setPushChild] = useState(null);
        const [updateChild, setUpdateChild] = useState(null);
        const [removeChild, setRemoveChild] = useState(null);
        const pushChildStable = useStableCallback((child) => {
            return pushChild?.(child) ?? -1;
        });
        const updateChildStable = useStableCallback((index, child) => {
            return updateChild?.(index, child);
        });
        const removeChildStable = useStableCallback((index) => {
            return removeChild?.(index);
        });
        const element = F$1(() => { return target == null ? null : typeof target == "string" ? document.getElementById(target) : target; }, [target]);
        const children = !element ? null : j(o$1(PortalChildren, { setPushChild: setPushChild, setUpdateChild: setUpdateChild, setRemoveChild: setRemoveChild }), element);
        return {
            children: children,
            pushChild: pushChildStable,
            updateChild: updateChildStable,
            removeChild: removeChildStable,
            portalElement: element
        };
    }
    /**
     * Implementation
     */
    function PortalChildren({ setPushChild, setUpdateChild, setRemoveChild }) {
        const [children, setChildren, getChildren] = useState([]);
        const pushChild = T$1((child) => {
            const randomKey = generateRandomId();
            let index = getChildren().length;
            setChildren(prev => ([...prev, F$2(child, { key: randomKey, index })]));
            return index;
        }, []);
        const updateChild = T$1((index, child) => {
            const key = getChildren()[index]?.key;
            console.assert(key);
            if (key) {
                setChildren(prev => {
                    let newChildren = prev.slice();
                    newChildren.splice(index, 1, F$2(child, { key: key, index }));
                    return newChildren;
                });
                return index;
            }
        }, []);
        const removeChild = T$1((index) => {
            const key = getChildren()[index]?.key;
            console.assert(key);
            if (key) {
                setChildren(prev => {
                    let newChildren = prev.slice();
                    newChildren.splice(index, 1);
                    return newChildren;
                });
                return index;
            }
        }, []);
        s(() => { setPushChild(_ => pushChild); }, [pushChild]);
        s(() => { setUpdateChild(_ => updateChild); }, [updateChild]);
        s(() => { setRemoveChild(_ => removeChild); }, [removeChild]);
        return (o$1(_$2, { children: children }));
    }

    function getFromLocalStorage(key, converter = JSON.parse, storage = localStorage) {
        try {
            const item = storage.getItem(key);
            if (item == null)
                return null;
            return converter(item);
        }
        catch (e) {
            /* eslint-disable no-debugger */
            debugger;
            return null;
        }
    }
    function storeToLocalStorage(key, value, converter = JSON.stringify, storage = localStorage) {
        try {
            if (value == null)
                storage.removeItem(key);
            else
                storage.setItem(key, converter(value));
        }
        catch (e) {
            /* eslint-disable no-debugger */
            debugger;
        }
    }
    /**
     * Use module augmentation to get the correct types for this function.
     *
     * ````
     * declare module 'preact-prop-helpers' {
     *     interface PersistentStates {
     *         numberState: number;
     *         stringState: string;
     *     }
     * }
     * ````
     * @param key
     * @param initialValue
     * @param fromString
     * @param toString
     * @returns
     */
    function usePersistentState(key, initialValue, fromString = JSON.parse, toString = JSON.stringify, storage = localStorage) {
        const [localCopy, setLocalCopy, getLocalCopy] = useState(() => ((key ? (getFromLocalStorage(key, fromString, storage)) : null) ?? initialValue));
        const getInitialValue = useStableGetter(initialValue);
        // Ensure that if our key changes, we also update `localCopy` to match.
        s(() => {
            if (key) {
                const newCopy = getFromLocalStorage(key, fromString, storage);
                setLocalCopy(newCopy ?? getInitialValue());
            }
        }, [key, storage]);
        // Listen for changes to this storage in other browser tabs
        useGlobalHandler(window, "storage", useStableCallback((e) => {
            if (key && e.key === key && e.storageArea == storage) {
                const newValue = e.newValue;
                if (newValue != null)
                    setLocalCopy(fromString(newValue));
                else
                    setLocalCopy(initialValue);
            }
        }));
        const setValueWrapper = useStableCallback((valueOrSetter) => {
            const value = typeof valueOrSetter === "function" ? valueOrSetter(getLocalCopy()) : valueOrSetter;
            // Make sure this update is available immediately before the next render
            setLocalCopy(valueOrSetter);
            // Actually save the value to local storage.
            if (key) {
                storeToLocalStorage(key, value, toString, storage);
                if (typeof value == "object" && value instanceof Date) {
                    console.assert(fromString != JSON.parse, "Dates (and other non-JSON types) must be given custom fromString and toString functions.");
                }
            }
        });
        const getValue = useStableCallback(() => {
            const trueValue = !key ? undefined : getFromLocalStorage(key, fromString, storage);
            return trueValue ?? localCopy;
        });
        return [localCopy, setValueWrapper, getValue];
    }

    G$1(null);

    function useButton({ buttonParameters: { tagButton, disabled, onPress, pressed, role }, pressParameters, refElementParameters }) {
        debugLog("useButton");
        const refElementReturn = useRefElement({ refElementParameters });
        const focusSelf = T$1((e) => e.focus?.(), []);
        const pressReturn = usePress({
            ...refElementReturn,
            pressParameters: {
                onPressSync: (e) => (disabled ? null : onPress)?.(enhanceEvent(e, { pressed: pressed == null ? null : !pressed })),
                focusSelf,
                ...pressParameters
            },
        });
        const { pressReturn: { propsUnstable: pressProps } } = pressReturn;
        const { refElementReturn: { propsStable: refProps } } = refElementReturn;
        const baseProps = { "aria-pressed": (pressed === true ? "true" : pressed === false ? "false" : undefined) };
        const buttonProps = { ...baseProps, disabled: (disabled && disabled != "soft") ? true : false, "aria-disabled": (disabled === 'soft' ? 'true' : undefined), role: role == "button" ? undefined : role };
        const divProps = { ...baseProps, tabIndex: (disabled === "hard" ? -1 : 0), role, "aria-disabled": disabled ? "true" : undefined };
        return {
            ...refElementReturn,
            ...pressReturn,
            props: useMergedProps(pressProps, refProps, (tagButton == 'button' ? buttonProps : divProps)),
        };
    }

    function useAccordion({ accordionParameters: { initialIndex, localStorageKey }, typeaheadNavigationParameters, linearNavigationParameters: { disableArrowKeys, disableHomeEndKeys, navigationDirection, navigatePastEnd, navigatePastStart, pageNavigationSize }, managedChildrenParameters: { onAfterChildLayoutEffect, onChildrenMountChange } }) {
        debugLog("useAccordian");
        const [localStorageIndex, setLocalStorageIndex] = usePersistentState(localStorageKey ?? null, initialIndex ?? null);
        if (localStorageIndex != null)
            initialIndex = localStorageIndex;
        const { managedChildrenReturn, context } = useManagedChildren({
            managedChildrenParameters: {
                onChildrenMountChange: useStableCallback((m, u) => { ocmc2(); onChildrenMountChange?.(m, u); }),
                onAfterChildLayoutEffect
            }
        });
        const { getChildren } = managedChildrenReturn;
        const isValidByChild = T$1((c) => (c && !c.disabled && !c.hidden), []);
        const isValidByIndex = T$1((c) => {
            const child = getChildren().getAt(c);
            if (child) {
                return isValidByChild(child);
            }
            return false;
        }, []);
        // Keep track of the one expanded index (if there is only one expanded index)
        const { changeIndex: changeExpandedIndexLocalOnly, getCurrentIndex: getCurrentExpandedIndex } = useChildrenFlag({
            initialIndex,
            getChildren,
            getAt: T$1((child) => { return child.getOpenFromParent() ?? false; }, []),
            setAt: T$1((child, open) => { return child.setOpenFromParent(open); }, []),
            isValid: isValidByChild,
            onIndexChange: null,
            closestFit: false
        });
        // Also keep track of which button is currently tabbable.
        // For some reason, Accordion buttons are both individually tabbable *and* arrow-key navigatable.
        const { changeIndex: changeTabbedIndex, getCurrentIndex: getTabbedIndex, reevaluateClosestFit: ocmc2 } = useChildrenFlag({
            initialIndex,
            getChildren,
            getAt: T$1((child) => { return child.getMostRecentlyTabbed() ?? false; }, []),
            setAt: T$1((child, tabbed) => { return child.setMostRecentlyTabbed(tabbed); }, []),
            isValid: isValidByChild,
            closestFit: true,
            onIndexChange: T$1((i) => {
                if (i != null) {
                    getChildren().getAt(i)?.focusSelf();
                }
            }, [])
        });
        const changeExpandedIndex = useStableCallback((value) => {
            changeExpandedIndexLocalOnly(value);
            setLocalStorageIndex(value);
        });
        const rovingTabIndexReturn = useStableObject({
            getTabbableIndex: getTabbedIndex,
            setTabbableIndex: changeTabbedIndex
        });
        const { typeaheadNavigationChildContext, typeaheadNavigationReturn } = useTypeaheadNavigation({
            rovingTabIndexReturn,
            typeaheadNavigationParameters
        });
        return {
            context: useStableObject({
                ...context,
                ...typeaheadNavigationChildContext,
                accordionSectionParameters: useStableObject({
                    changeExpandedIndex,
                    changeTabbedIndex,
                    getExpandedIndex: getCurrentExpandedIndex,
                    getTabbedIndex: getTabbedIndex,
                    stableTypeaheadProps: typeaheadNavigationReturn.propsStable,
                }),
                linearNavigationParameters: useStableObject({
                    disableArrowKeys,
                    disableHomeEndKeys,
                    getHighestIndex: T$1(() => getChildren().getHighestIndex(), []),
                    indexMangler: identity,
                    indexDemangler: identity,
                    navigationDirection,
                    isValid: isValidByIndex,
                    navigatePastEnd,
                    navigatePastStart,
                    pageNavigationSize
                }),
                rovingTabIndexReturn
            }),
            managedChildrenReturn,
            accordionReturn: useStableObject({ changeExpandedIndex })
        };
    }
    function identity(t) { return t; }
    function useAccordionSection({ buttonParameters, pressParameters: {}, accordionSectionParameters: { open: openFromUser, bodyRole }, managedChildParameters: { index }, rovingTabIndexChildParameters: { hidden }, textContentParameters, context, context: { accordionSectionParameters: { changeExpandedIndex, changeTabbedIndex: _setCurrentFocusedIndex, getTabbedIndex: getCurrentFocusedIndex, stableTypeaheadProps }, linearNavigationParameters, rovingTabIndexReturn, typeaheadNavigationChildParameters, }, refElementParameters, }) {
        const { disabled, onPress: userOnPress } = buttonParameters;
        debugLog("useAccordianSection");
        const [openFromParent, setOpenFromParent, getOpenFromParent] = useState(null);
        const [mostRecentlyTabbed, setMostRecentlyTabbed, getMostRecentlyTabbed] = useState(null);
        const { randomIdReturn: _bodyIdReturn, propsSource: propsBodySource, propsReferencer: propsHeadReferencer } = useRandomId({ randomIdParameters: { prefix: Prefices.accordionSectionHeaderButton, otherReferencerProp: "aria-controls" } });
        const { randomIdReturn: _headIdReturn, propsSource: propsHeadSource, propsReferencer: propsBodyReferencer } = useRandomId({ randomIdParameters: { prefix: Prefices.accordionSectionBody, otherReferencerProp: "aria-labelledby" } });
        const open = ((openFromUser ?? openFromParent) ?? false);
        const { refElementReturn: { getElement: getHeaderElement, propsStable: headerRefElementProps } } = useRefElement({ refElementParameters: {} });
        const { refElementReturn: { getElement: _getBodyElement, propsStable: bodyRefElementProps } } = useRefElement({ refElementParameters: {} });
        const focusSelf = T$1(() => {
            getHeaderElement()?.focus();
        }, []);
        useManagedChild({
            context,
            managedChildParameters: {
                index: index,
            }
        }, {
            index,
            disabled,
            focusSelf,
            getMostRecentlyTabbed,
            getOpenFromParent,
            hidden,
            setMostRecentlyTabbed,
            setOpenFromParent,
        });
        const onPress = (e) => {
            if (getOpenFromParent())
                changeExpandedIndex(null);
            else
                changeExpandedIndex(index);
            userOnPress?.(e);
        };
        const linearReturnType = useLinearNavigation({ linearNavigationParameters, rovingTabIndexReturn });
        const { pressParameters: { excludeSpace }, textContentReturn } = useTypeaheadNavigationChild({
            managedChildParameters: { index },
            refElementReturn: { getElement: useStableCallback(() => refElementReturn.getElement()) },
            textContentParameters,
            typeaheadNavigationChildContext: { typeaheadNavigationChildParameters }
        });
        const buttonReturn = useButton({
            buttonParameters: { ...buttonParameters, pressed: null, onPress, role: "button" },
            pressParameters: { excludeSpace },
            refElementParameters
        });
        const { pressReturn, props: buttonProps, refElementReturn } = buttonReturn;
        const { linearNavigationReturn: { propsStable } } = linearReturnType;
        const headerButtonProps = useMergedProps(buttonProps, headerRefElementProps, propsHeadReferencer, propsHeadSource, propsStable, stableTypeaheadProps, { "aria-expanded": (open ?? false).toString(), });
        const bodyProps = useMergedProps(bodyRefElementProps, propsBodyReferencer, propsBodySource, {
            role: bodyRole,
            tabIndex: -1
        });
        return {
            pressReturn,
            refElementReturn,
            textContentReturn,
            accordionSectionReturn: {
                mostRecentlyTabbed: !!mostRecentlyTabbed,
                expanded: open,
                focused: (getCurrentFocusedIndex() == index)
            },
            propsHeaderButton: headerButtonProps,
            propsHeader: {},
            propsBody: bodyProps
        };
    }

    function useLabel({ randomIdInputParameters, randomIdLabelParameters, labelParameters: { tagInput, tagLabel, ariaLabel, labelPosition, onLabelClick } }) {
        const nativeHTMLBehavior = (tagInput == "input" && tagLabel == "label" && labelPosition != "wrapping");
        const synthetic = !nativeHTMLBehavior;
        const { propsInput, propsLabel, randomIdInputReturn, randomIdLabelReturn } = useRandomDualIds({
            randomIdInputParameters: { ...randomIdInputParameters, otherReferencerProp: !synthetic && labelPosition === "separate" ? "for" : null },
            randomIdLabelParameters: { ...randomIdLabelParameters, otherReferencerProp: synthetic ? "aria-labelledby" : null },
        });
        const { refElementReturn } = useRefElement({ refElementParameters: {} });
        if (labelPosition == 'none') {
            // When we set the aria-label, intentionally clobber element-based labels (for example, in case they don't exist).
            propsInput["aria-label"] = (ariaLabel);
            propsInput["aria-labelledby"] = undefined;
            propsLabel["for"] = undefined;
        }
        const { pressReturn } = usePress({ pressParameters: { excludeEnter: returnTrue, excludeSpace: returnTrue, onPressSync: onLabelClick, focusSelf: noop$1 }, refElementReturn });
        return {
            propsInput,
            propsLabel: useMergedProps(propsLabel, refElementReturn.propsStable, pressReturn.propsUnstable),
            randomIdInputReturn,
            randomIdLabelReturn,
        };
    }
    /**
     * Shortcut for `useLabel` that assumes we're just never working with native HTML `input` and `label` elements. So for labelling guaranteably non-native elements.
     */
    function useLabelSynthetic({ labelParameters: { ariaLabel, onLabelClick }, randomIdInputParameters, randomIdLabelParameters }) {
        return useLabel({
            randomIdLabelParameters,
            randomIdInputParameters,
            labelParameters: {
                ariaLabel,
                labelPosition: ariaLabel == null ? "separate" : "none",
                tagInput: "div",
                tagLabel: "div",
                onLabelClick
            }
        });
    }

    function preventDefault(e) {
        e.preventDefault();
    }
    /**
     * Handles any component where there's:
     * 1. Some kind of an on/off binary/trinary input element that needs event handlers
     * 2. Some kind of label for that input element
     *
     * See also `useLabel` for when there's a label for a non-checkbox-like component.
     *
     * @param param0
     * @returns
     */
    function useCheckboxLike({ labelParameters, randomIdInputParameters, randomIdLabelParameters, checkboxLikeParameters: { checked, disabled, onInput: onInputSync, role }, refElementInputReturn, refElementLabelReturn, pressParameters: { excludeSpace } }) {
        const { getElement: getInputElement } = refElementInputReturn;
        const { getElement: getLabelElement } = refElementLabelReturn;
        const { tagInput, tagLabel, labelPosition } = labelParameters;
        // onClick and onChange are a bit messy, so we need to
        // *always* make sure that the visible state is correct
        // after all the event dust settles.
        // See https://github.com/preactjs/preact/issues/2745,
        // and https://github.com/preactjs/preact/issues/1899#issuecomment-525690194
        h(() => {
            const element = getInputElement();
            if (element && tagInput == "input") {
                element.indeterminate = (checked === "mixed");
                element.checked = (checked === true);
            }
        }, [tagInput, (checked ?? false)]);
        const { randomIdInputReturn, randomIdLabelReturn, propsInput, propsLabel } = useLabel({
            labelParameters: {
                ...labelParameters,
                onLabelClick: useStableCallback((e) => {
                    if (!disabled && tagInput != "input" && tagLabel != "label" && labelPosition != "separate") {
                        focusSelf();
                        onInputSync(e);
                    }
                })
            },
            randomIdInputParameters,
            randomIdLabelParameters,
        });
        const focusSelf = useStableCallback(() => {
            let elementToFocus = null;
            if (labelPosition == "wrapping")
                elementToFocus = getLabelElement();
            else
                elementToFocus = getInputElement();
            elementToFocus?.focus();
        });
        const onClickInputSync = (labelPosition == "wrapping" ? undefined : onInputSync);
        const onClickLabelSync = onInputSync; //(labelPosition != "wrapping" ? undefined : onInputSync);
        const { pressReturn: pressInputReturn } = usePress({ pressParameters: { excludeSpace, focusSelf, onPressSync: (disabled) ? undefined : onClickInputSync }, refElementReturn: refElementInputReturn });
        const { pressReturn: pressLabelReturn } = usePress({ pressParameters: { excludeSpace, focusSelf, onPressSync: (disabled) ? undefined : onClickLabelSync }, refElementReturn: refElementLabelReturn });
        const propsUnstableInput = {};
        const propsUnstableLabel = {};
        // Make sure that label clicks can't affect the visual state of the checkbox
        propsUnstableInput.onClick = preventDefault;
        propsUnstableLabel.onClick = preventDefault;
        propsUnstableInput.onInput = preventDefault;
        propsUnstableInput.onChange = preventDefault;
        propsUnstableInput.type = role == "radio" ? "radio" : "checkbox";
        switch (labelPosition) {
            case "none":
            case "separate": {
                if (tagInput == "input") {
                    // Even in the most default input behavior, we still need to handle
                    // special abstraction over checked="mixed" and disabled="soft"
                    propsUnstableInput.checked = (checked === true);
                    if (disabled === true || disabled === 'hard')
                        propsUnstableInput.disabled = true;
                    else if (disabled == "soft")
                        propsUnstableInput["aria-disabled"] = "true";
                }
                else {
                    // div inputs need their various ARIA roles and properties
                    propsUnstableInput.role = role;
                    propsUnstableInput.tabIndex = 0;
                    propsUnstableInput["aria-checked"] = (checked ?? false).toString();
                    propsUnstableInput["aria-disabled"] = (!!disabled).toString();
                }
                break;
            }
            case "wrapping": {
                if (tagInput == "input") {
                    // For form submission and styling
                    propsUnstableInput.checked = (checked === true);
                    propsUnstableInput.disabled = (disabled === true);
                    // Because the wrapped label handles all interactions,
                    // we need to make sure this element can't be interacted with
                    // even if it's an input element.
                    propsUnstableInput.inert = true;
                    propsUnstableInput.tabIndex = -1;
                    propsUnstableInput.role = "presentation";
                    propsUnstableInput["aria-hidden"] = "true";
                    propsUnstableInput.onFocus = _ => getLabelElement?.()?.focus?.();
                }
                // Wrapping labels are the actual inputs that are interacted with
                // And are very similar conceptually to div inputs when separated
                propsUnstableLabel.role = role;
                propsUnstableLabel.tabIndex = 0;
                propsUnstableLabel["aria-checked"] = (checked ?? false).toString();
                propsUnstableLabel["aria-disabled"] = (!!disabled).toString();
                break;
            }
        }
        return {
            randomIdInputReturn,
            randomIdLabelReturn,
            pressInputReturn,
            pressLabelReturn,
            checkboxLikeInputReturn: { propsUnstable: propsUnstableInput },
            checkboxLikeLabelReturn: { propsUnstable: propsUnstableLabel },
            propsInput: useMergedProps(propsInput, propsUnstableInput, pressInputReturn.propsUnstable, refElementInputReturn.propsStable),
            propsLabel: useMergedProps(propsLabel, propsUnstableLabel, pressLabelReturn.propsUnstable, refElementLabelReturn.propsStable),
            checkboxLikeReturn: { focusSelf }
        };
    }

    function useCheckbox({ checkboxParameters: { onCheckedChange }, checkboxLikeParameters, labelParameters, refElementInputReturn, refElementLabelReturn }) {
        debugLog("useCheckbox");
        const { tagInput, labelPosition } = labelParameters;
        const { checked } = checkboxLikeParameters;
        const onInputEnhanced = useStableCallback((e) => onCheckedChange?.(enhanceEvent(e, { checked: !checked })));
        const { pressInputReturn, pressLabelReturn, randomIdInputReturn, randomIdLabelReturn, propsInput, propsLabel, checkboxLikeReturn, checkboxLikeInputReturn, checkboxLikeLabelReturn } = useCheckboxLike({
            randomIdInputParameters: { prefix: Prefices.checkboxLikeInput },
            randomIdLabelParameters: { prefix: Prefices.checkboxLikeLabel },
            refElementInputReturn,
            refElementLabelReturn,
            checkboxLikeParameters: { role: "checkbox", onInput: onInputEnhanced, ...checkboxLikeParameters },
            pressParameters: { excludeSpace: returnFalse },
            labelParameters
        });
        return {
            checkboxReturn: { propsUnstable: { type: (tagInput == "input" && labelPosition != "wrapping" ? "checkbox" : undefined) } },
            checkboxLikeReturn,
            pressInputReturn,
            pressLabelReturn,
            randomIdInputReturn,
            randomIdLabelReturn,
            propsInput,
            propsLabel,
            checkboxLikeInputReturn,
            checkboxLikeLabelReturn
        };
    }

    /**
     *
     *
     * @param param0
     * @returns
     */
    function useCheckboxGroup({ linearNavigationParameters, rearrangeableChildrenParameters, sortableChildrenParameters, rovingTabIndexParameters, typeaheadNavigationParameters, staggeredChildrenParameters }) {
        debugLog("useCheckboxGroup");
        const { childrenHaveFocusReturn, context, linearNavigationReturn, managedChildrenReturn, props, rearrangeableChildrenReturn, rovingTabIndexReturn, singleSelectionReturn, staggeredChildrenReturn, paginatedChildrenReturn, sortableChildrenReturn, typeaheadNavigationReturn } = useCompleteListNavigation({
            linearNavigationParameters,
            staggeredChildrenParameters,
            rearrangeableChildrenParameters,
            rovingTabIndexParameters,
            singleSelectionParameters: { initiallySelectedIndex: null, onSelectedIndexChange: null },
            sortableChildrenParameters,
            paginatedChildrenParameters: { paginationMax: null, paginationMin: null },
            typeaheadNavigationParameters
        });
        const { getChildren } = managedChildrenReturn;
        const children = getChildren();
        // Keep track of all child IDs, and any time any of them change, 
        // generate a new string with all of them concatenated together
        // (but only once per render);
        const allIds = _(new Set());
        const updateParentControlIds = useStableCallback((setter) => { setter?.(Array.from(allIds.current).join(" ")); });
        const [getSetter, setSetter] = usePassiveState(updateParentControlIds, returnNull);
        const [_getUpdateIndex, setUpdateIndex] = usePassiveState(useStableCallback(() => { updateParentControlIds(getSetter()); }), returnZero);
        // Lots of machenery to track what total percentage of all checkboxes are checked,
        // and notifying the parent checkbox of this information (while re-rendering as little as possible)
        const getSelfIsChecked = T$1((percentChecked) => { return percentChecked <= 0 ? false : percentChecked >= 1 ? true : "mixed"; }, []);
        const onAnyChildCheckedUpdate = useStableCallback((setter, percentChecked) => { setter?.(getSelfIsChecked(percentChecked)); });
        const [getTotalChildren, setTotalChildren] = usePassiveState(T$1((totalChildren) => { onAnyChildCheckedUpdate(getSetParentCheckboxChecked(), getPercentChecked(getTotalChecked(), totalChildren)); }, []), returnZero);
        const [getTotalChecked, setTotalChecked] = usePassiveState(T$1((totalChecked) => { onAnyChildCheckedUpdate(getSetParentCheckboxChecked(), getPercentChecked(totalChecked, getTotalChildren())); }, []), returnZero);
        const getPercentChecked = T$1((totalChecked, totalChildren) => {
            if (totalChildren > 0)
                return totalChecked / totalChildren;
            else
                return (totalChecked == 0 ? 0 : 1);
        }, []);
        const [getSetParentCheckboxChecked, setSetParentCheckboxChecked] = usePassiveState(useStableCallback((setter) => {
            onAnyChildCheckedUpdate(setter, getPercentChecked(getTotalChecked(), getTotalChildren()));
        }));
        const onCheckboxGroupParentInput = T$1(async (e) => {
            e.preventDefault();
            const selfIsChecked = getSelfIsChecked(getPercentChecked(getTotalChecked(), getTotalChildren()));
            const nextChecked = (selfIsChecked === false ? "mixed" : selfIsChecked === "mixed" ? true : false);
            let willChangeAny = false;
            const promises = [];
            children.forEach(child => {
                if (child.checkboxInfo.checkboxChildType == "child")
                    willChangeAny ||= (child.checkboxInfo.getChecked() != child.checkboxInfo.getLastUserChecked());
            });
            children.forEach(child => {
                if (child.checkboxInfo.checkboxChildType == "child") {
                    const prevChecked = child.checkboxInfo.getChecked();
                    let checked;
                    if (nextChecked == "mixed") {
                        if (willChangeAny)
                            checked = (child.checkboxInfo.getLastUserChecked());
                        else
                            checked = true;
                    }
                    else {
                        checked = nextChecked;
                    }
                    if (checked != prevChecked) {
                        const promise = child.checkboxInfo.setCheckedFromParentInput(checked, e);
                        if (promise) {
                            promises.push(promise);
                        }
                    }
                }
            });
            await Promise.all(promises);
        }, []);
        return {
            linearNavigationReturn,
            context: useStableObject({
                ...context,
                checkboxGroupChildrenContext: useStableObject({
                    setUpdateIndex,
                    allIds: allIds.current,
                    setTotalChecked,
                    setTotalChildren
                }),
                checkboxGroupParentContext: useStableObject({
                    setSetter,
                    setSetParentCheckboxChecked,
                    getPercentChecked,
                    getTotalChecked,
                    getTotalChildren,
                    onCheckboxGroupParentInput,
                })
            }),
            childrenHaveFocusReturn,
            props,
            staggeredChildrenReturn,
            paginatedChildrenReturn,
            rearrangeableChildrenReturn,
            singleSelectionReturn,
            sortableChildrenReturn,
            managedChildrenReturn,
            rovingTabIndexReturn,
            typeaheadNavigationReturn
        };
    }
    function useCheckboxGroupParent({ completeListNavigationChildParameters, context, managedChildParameters, rovingTabIndexChildParameters, textContentParameters, sortableChildParameters, }) {
        const { checkboxGroupParentContext: { setSetter, setSetParentCheckboxChecked, getPercentChecked, getTotalChecked, getTotalChildren, onCheckboxGroupParentInput } } = context;
        const { hasCurrentFocusReturn, managedChildReturn, pressParameters, refElementReturn, props, paginatedChildReturn, rovingTabIndexChildReturn, staggeredChildReturn, singleSelectionChildReturn, } = useCompleteListNavigationChild({
            completeListNavigationChildParameters,
            context,
            managedChildParameters,
            rovingTabIndexChildParameters,
            sortableChildParameters,
            textContentParameters,
            // single selection isn't used because checkboxes are multiselect; "disabled" refers only to that.
            singleSelectionChildParameters: { ariaPropName: null, selectionMode: "disabled", disabled: true },
        });
        const [ariaControls, setControls] = useState("");
        s(() => {
            setSetter(() => setControls);
        }, [setControls]);
        debugLog("useCheckboxGroupParent");
        const [checked, setChecked] = useState(false);
        h(() => {
            setSetParentCheckboxChecked(() => setChecked);
        }, []);
        const checkboxGroupParentReturn = { checked, onParentCheckedChange: onCheckboxGroupParentInput, getPercent: useStableCallback(() => { return getPercentChecked(getTotalChecked(), getTotalChildren()); }) };
        return {
            checkboxGroupParentReturn,
            hasCurrentFocusReturn,
            managedChildReturn,
            staggeredChildReturn,
            refElementReturn,
            props: useMergedProps({ "aria-controls": ariaControls }, props),
            rovingTabIndexChildReturn,
            paginatedChildReturn,
            singleSelectionChildReturn,
        };
    }
    /**
     * Implements the "child" part of a checkbox group.
     *
     * Does not implement any actual "checkbox" functionality,
     * but it does tell you what to do *with* a checkbox.
     *
     * (That is to say, use `onChildCheckedChange` whenever
     * your checkbox or checkbox-like thing changes, and
     * properly implement `onChangeFromParent` to work
     * properly when the parent changes)
     *
     * @param param0
     * @returns
     */
    function useCheckboxGroupChild({ checkboxGroupChild, completeListNavigationChildParameters, context, managedChildParameters, textContentParameters, rovingTabIndexChildParameters, sortableChildParameters, }) {
        const { checkboxGroupChildrenContext: { allIds, setUpdateIndex, setTotalChildren, setTotalChecked, } } = context;
        debugLog("useCheckboxGroupChild", managedChildParameters.index);
        const { checked, onChangeFromParent } = checkboxGroupChild;
        const getChecked = useStableGetter(checked);
        const [getLastUserChecked, setLastUserChecked] = usePassiveState(null, returnFalse);
        const onChildCheckedChange = useStableCallback((checked) => {
            setLastUserChecked(checked);
        });
        const onControlIdChanged = T$1((next, prev) => {
            if (prev)
                allIds.delete(prev);
            if (next)
                allIds.add(next);
            if (!!next || !!prev) {
                setUpdateIndex(i => ((i ?? 0) + 1));
            }
        }, []);
        h(() => {
            setTotalChildren(c => ((c ?? 0) + 1));
            return () => setTotalChildren(c => ((c ?? 0) - 1));
        }, []);
        h(() => {
            if (checked) {
                setTotalChecked(c => ((c ?? 0) + 1));
                return () => setTotalChecked(c => ((c ?? 0) - 1));
            }
        }, [checked]);
        const { hasCurrentFocusReturn, managedChildReturn, pressParameters, refElementReturn, props, singleSelectionChildReturn: _singleSelectionChildReturn, staggeredChildReturn, paginatedChildReturn, rovingTabIndexChildReturn, } = useCompleteListNavigationChild({
            completeListNavigationChildParameters: { checkboxInfo: { checkboxChildType: "child", getLastUserChecked, getChecked, setCheckedFromParentInput: onChangeFromParent }, ...completeListNavigationChildParameters },
            context,
            managedChildParameters: { ...managedChildParameters },
            rovingTabIndexChildParameters,
            textContentParameters,
            sortableChildParameters,
            singleSelectionChildParameters: { ariaPropName: null, selectionMode: "disabled", disabled: true },
        });
        return {
            checkboxGroupChild: {
                onChildCheckedChange,
                onControlIdChanged
            },
            hasCurrentFocusReturn,
            managedChildReturn,
            staggeredChildReturn,
            paginatedChildReturn,
            refElementReturn,
            props,
            pressParameters,
            rovingTabIndexChildReturn,
        };
    }

    function useDialog({ dismissParameters, escapeDismissParameters, focusTrapParameters, labelParameters }) {
        const { focusTrapReturn, propsFocusContainer, propsPopup, propsSource, refElementPopupReturn, refElementSourceReturn } = useModal({
            dismissParameters: { closeOnLostFocus: false, ...dismissParameters },
            escapeDismissParameters,
            focusTrapParameters: { trapActive: true, onlyMoveFocus: false, ...focusTrapParameters }
        });
        const { propsInput, propsLabel } = useLabelSynthetic({
            labelParameters: {
                ...labelParameters, onLabelClick: useStableCallback(() => {
                    const e = refElementPopupReturn.getElement();
                    focusTrapParameters.focusPopup(e, () => findFirstFocusable(e));
                })
            },
            randomIdInputParameters: { prefix: Prefices.dialog },
            randomIdLabelParameters: { prefix: Prefices.dialogTitle }
        });
        return {
            focusTrapReturn,
            propsFocusContainer,
            propsDialog: useMergedProps(propsPopup, propsInput),
            propsSource,
            propsTitle: propsLabel,
            refElementPopupReturn,
            refElementSourceReturn
        };
    }

    function useDrawer({ dismissParameters, escapeDismissParameters, focusTrapParameters, labelParameters }) {
        const { focusTrapReturn, propsFocusContainer, propsPopup, propsSource, refElementPopupReturn, refElementSourceReturn } = useModal({
            dismissParameters,
            escapeDismissParameters,
            focusTrapParameters: { onlyMoveFocus: false, ...focusTrapParameters }
        });
        const { propsInput, propsLabel, } = useLabelSynthetic({
            labelParameters: {
                ...labelParameters, onLabelClick: useStableCallback(() => {
                    const e = refElementPopupReturn.getElement();
                    focusTrapParameters.focusPopup(e, () => findFirstFocusable(e));
                })
            },
            randomIdInputParameters: { prefix: Prefices.drawer },
            randomIdLabelParameters: { prefix: Prefices.drawerTitle }
        });
        return {
            focusTrapReturn,
            propsFocusContainer,
            propsDrawer: useMergedProps(propsPopup, propsInput),
            propsTitle: propsLabel,
            propsSource,
            refElementPopupReturn,
            refElementSourceReturn
        };
    }

    function useGridlist({ linearNavigationParameters, rovingTabIndexParameters, typeaheadNavigationParameters, labelParameters, staggeredChildrenParameters, gridlistParameters: { selectionLimit, groupingType, selectedIndex, onSelectedIndexChange }, gridNavigationParameters, paginatedChildrenParameters, rearrangeableChildrenParameters, sortableChildrenParameters }) {
        const { propsInput: propsLabelList, propsLabel: propsLabelLabel, randomIdInputReturn: { id: _gridlistId }, randomIdLabelReturn: { id: _labelId } } = useLabelSynthetic({
            labelParameters: {
                ...labelParameters,
                onLabelClick: useStableCallback(() => {
                    rovingTabIndexReturn.focusSelf();
                })
            },
            randomIdInputParameters: { prefix: Prefices.gridlist },
            randomIdLabelParameters: { prefix: Prefices.gridlistLabel }
        });
        const { childrenHaveFocusReturn, context, linearNavigationReturn, managedChildrenReturn, props, rovingTabIndexReturn, staggeredChildrenReturn, singleSelectionReturn, typeaheadNavigationReturn, rearrangeableChildrenReturn, paginatedChildrenReturn, sortableChildrenReturn } = useCompleteGridNavigation({
            linearNavigationParameters,
            rovingTabIndexParameters,
            staggeredChildrenParameters,
            singleSelectionParameters: { initiallySelectedIndex: selectedIndex, onSelectedIndexChange },
            sortableChildrenParameters,
            typeaheadNavigationParameters,
            gridNavigationParameters,
            paginatedChildrenParameters,
            rearrangeableChildrenParameters
        });
        useSingleSelectionDeclarative({ singleSelectionReturn, singleSelectionDeclarativeParameters: { selectedIndex } });
        let propsGridlist = useMergedProps(props, propsLabelList, { "aria-multiselectable": (selectionLimit == "multi" ? "true" : undefined) });
        let fullContext = useStableObject({
            ...context,
            gridlistRowContext: useStableObject({
                selectionLimit
            })
        });
        if (groupingType == "group")
            propsGridlist.role = "group";
        else if (groupingType == "with-groups") {
            // Intentionally clobbering all the list navigation stuff.
            propsGridlist = { role: "grid" };
            // ...actually, context too while we're at it.
            fullContext = null;
        }
        else {
            propsGridlist.role = "grid";
        }
        if (selectionLimit == "multi")
            console.assert(singleSelectionReturn.getSelectedIndex() == null);
        return {
            childrenHaveFocusReturn,
            context: fullContext,
            linearNavigationReturn,
            managedChildrenReturn,
            staggeredChildrenReturn,
            rovingTabIndexReturn,
            singleSelectionReturn,
            rearrangeableChildrenReturn,
            sortableChildrenReturn,
            typeaheadNavigationReturn,
            paginatedChildrenReturn,
            propsGridlist,
            propsGridlistLabel: propsLabelLabel
        };
    }
    function useGridlistRow({ rowAsChildOfGridParameters: { managedChildParameters, singleSelectionChildParameters, completeGridNavigationRowParameters, textContentParameters, rovingTabIndexChildParameters, sortableChildParameters, context: cx1, gridlistRowParameters: { selected } }, rowAsParentOfCellsParameters: { linearNavigationParameters, rovingTabIndexParameters, typeaheadNavigationParameters } }) {
        const { gridlistRowContext: { selectionLimit } } = cx1;
        const { rowAsChildOfGridReturn, rowAsParentOfCellsReturn, context: cx2, hasCurrentFocusReturn, props } = useCompleteGridNavigationRow({
            rowAsChildOfGridParameters: {
                managedChildParameters,
                textContentParameters,
                singleSelectionChildParameters,
                completeGridNavigationRowParameters,
                rovingTabIndexChildParameters,
                sortableChildParameters,
                context: cx1
            },
            rowAsParentOfCellsParameters: {
                linearNavigationParameters: { disableHomeEndKeys: true, ...linearNavigationParameters },
                rovingTabIndexParameters,
                typeaheadNavigationParameters: { ...typeaheadNavigationParameters }
            }
        });
        // `selected` should only be true/false for multi-selection
        if (selectionLimit != "multi")
            console.assert(selected == null);
        props.role = "option";
        return {
            rowAsChildOfGridReturn,
            rowAsParentOfCellsReturn,
            context: cx2,
            hasCurrentFocusReturn,
            props
        };
    }
    function useGridlistCell({ pressParameters, ...p }) {
        const { props, ...info } = useCompleteGridNavigationCell(p);
        const { pressReturn } = usePress({
            pressParameters: { ...pressParameters, focusSelf: p.completeGridNavigationCellParameters.focusSelf },
            refElementReturn: info.refElementReturn
        });
        return {
            ...info,
            props: useMergedProps(props, pressReturn.propsUnstable),
            pressReturn
        };
    }

    /**
     * A menu surface is what handles user interaction with an interactive but transient surface (like a menu or a popup).
     *
     * The keyboard (etc.) interactions are shared among a lot of widgets, and the opening button has some ARIA properties that need setting.
     *
     * Related to menus, which are a menu contained within a menu surface. Not related to menubars -- menus contain menubars, but not all menubars are contained within a menu or its surface.
     *
     */
    function useMenuSurface({ 
    //menuSurface: { sendFocusToMenu, role }, 
    dismissParameters, escapeDismissParameters, focusTrapParameters, menuSurfaceParameters: { role, surfaceId } }) {
        debugLog("useMenuSurface");
        const { refElementReturn: { getElement: getButtonElement, propsStable: propsRefTrigger }, ...void4 } = useRefElement({ refElementParameters: { onElementChange: undefined } });
        const { refElementReturn: { getElement: getMenuElement, propsStable: propsRefSurface, ...void5 }, ...void6 } = useRefElement({ refElementParameters: { onElementChange: undefined } });
        const { focusTrapReturn, propsFocusContainer, propsPopup, propsSource: ps2, refElementPopupReturn, refElementSourceReturn } = useModal({
            dismissParameters,
            escapeDismissParameters,
            focusTrapParameters: {
                ...focusTrapParameters,
                onlyMoveFocus: true,
                trapActive: true,
                focusOpener: useStableCallback(() => {
                    const buttonElement = getButtonElement();
                    buttonElement?.focus();
                })
            }
        });
        const propsSurface = useMergedProps(propsRefSurface, propsPopup, propsFocusContainer);
        const propsTarget = useMergedProps({
            role,
            id: surfaceId
        });
        const propsTrigger = useMergedProps({
            "aria-expanded": (dismissParameters.open).toString(),
            "aria-haspopup": role,
        }, propsRefTrigger, ps2, { "aria-controls": surfaceId });
        const propsSentinel = useFocusSentinel({
            focusSentinel: {
                sendFocusToMenu: T$1(() => { return focusTrapParameters.focusPopup(getMenuElement(), () => findFirstFocusable(getMenuElement())); }, []),
                onClose: T$1(() => { dismissParameters.onClose("lost-focus"); }, [dismissParameters.onClose]),
                open: dismissParameters.open
            }
        });
        return {
            focusTrapReturn,
            propsSentinel,
            propsSurface,
            propsTarget,
            propsTrigger,
            refElementPopupReturn,
            refElementSourceReturn
        };
    }
    // A focus sentinal is a hidden but focusable element that comes at the start or end 
    // of the out-of-place-focusable component that, when activated or focused over, closes the component
    // (if focused within 100ms of the open prop changing, instead of
    // closing, focusing the sentinel immediately asks it to focus itself).
    // This exists for things like menus which can have focus but also need a way to return
    // to whatever out-of-place parent they came from when naturally tabbed out of (as opposed
    // to dialogs which loop back around when tabbed out of). While mouse users can click out of a menu
    // and keyboard users can escape to close a menu, screen readers and other input methods 
    // that don't use those two would become stuck.
    function useFocusSentinel({ focusSentinel: { open, onClose, sendFocusToMenu } }) {
        debugLog("useFocusSentinel");
        const getSendFocusWithinMenu = useStableGetter(sendFocusToMenu);
        const stableOnClose = useStableCallback(onClose);
        const [firstSentinelIsActive, setFirstSentinelIsActive] = useState(false);
        useTimeout({ callback: () => { setFirstSentinelIsActive(open); }, timeout: 100, triggerIndex: `${open}-${firstSentinelIsActive}` });
        const onFocus = firstSentinelIsActive ? (() => stableOnClose()) : (() => getSendFocusWithinMenu()?.());
        const onClick = () => stableOnClose();
        return {
            tabIndex: firstSentinelIsActive ? 0 : -1,
            onFocus,
            onClick
        };
    }

    //export interface UseToolbarChildReturnTypeWithHooks<ChildElement extends Element, M extends UseToolbarSubInfo<ChildElement>> extends UseToolbarChildReturnTypeInfo<ChildElement, M> {
    //}
    /**
     * A toolbar is just a collection of widgets in an expected order and with the usual keyboard navigation stuff.
     *
     * The main difference between a toolbar and a menubar is that a menubar contains purely static menuitems,
     * but a toolbar is the more general case, being able to contain anything at all.
     * A menubar is implemented as a special case of a toolbar, and a menu is implemented as a specialized menubar
     *
     * Either way, be sure to specify the role and orientation this toolbar has (role=toolbar if you're using this as an actual toolbar).
     *
     * @param param0
     * @returns
     */
    function useToolbar({ linearNavigationParameters, toolbarParameters: { orientation, role, onSelectedIndexChange }, labelParameters, singleSelectionDeclarativeParameters: { selectedIndex }, ...listNavParameters }) {
        const { context, props, ...listNavReturn } = useCompleteListNavigation({
            ...listNavParameters,
            singleSelectionParameters: { initiallySelectedIndex: selectedIndex, onSelectedIndexChange: onSelectedIndexChange ?? null },
            paginatedChildrenParameters: { paginationMax: null, paginationMin: null },
            linearNavigationParameters: { ...linearNavigationParameters, navigationDirection: orientation },
        });
        useSingleSelectionDeclarative({
            singleSelectionDeclarativeParameters: { selectedIndex },
            singleSelectionReturn: { changeSelectedIndex: listNavReturn.singleSelectionReturn.changeSelectedIndex }
        });
        const { propsInput: propsToolbar, propsLabel, randomIdInputReturn, randomIdLabelReturn } = useLabelSynthetic({
            labelParameters: { ...labelParameters, onLabelClick: listNavReturn.rovingTabIndexReturn.focusSelf },
            randomIdInputParameters: { prefix: Prefices.toolbar },
            randomIdLabelParameters: { prefix: Prefices.toolbarLabel }
        });
        return {
            toolbarReturn: { propsUnstable: { ...propsToolbar, role: role ?? undefined } },
            context,
            propsLabel,
            propsToolbar: useMergedProps(propsToolbar, props),
            randomIdInputReturn,
            randomIdLabelReturn,
            ...listNavReturn
        };
    }
    function useToolbarChild({ ...listNavChildParameters }) {
        return useCompleteListNavigationChild({
            ...listNavChildParameters
        });
    }

    function useMenubar({ linearNavigationParameters, rearrangeableChildrenParameters, singleSelectionDeclarativeParameters, sortableChildrenParameters, rovingTabIndexParameters, typeaheadNavigationParameters, staggeredChildrenParameters, toolbarParameters, menubarParameters: { role }, labelParameters }) {
        debugLog("useMenubar");
        const { linearNavigationReturn, childrenHaveFocusReturn, context, propsLabel, propsToolbar: propsMenubar, paginatedChildrenReturn, staggeredChildrenReturn, rearrangeableChildrenReturn, sortableChildrenReturn, managedChildrenReturn, rovingTabIndexReturn, toolbarReturn, typeaheadNavigationReturn, randomIdInputReturn, randomIdLabelReturn, ..._rest } = useToolbar({
            linearNavigationParameters,
            rovingTabIndexParameters,
            rearrangeableChildrenParameters,
            sortableChildrenParameters,
            singleSelectionDeclarativeParameters,
            typeaheadNavigationParameters,
            staggeredChildrenParameters,
            toolbarParameters: { role, ...toolbarParameters },
            labelParameters
        });
        return {
            childrenHaveFocusReturn,
            context,
            propsLabel,
            propsMenubar,
            staggeredChildrenReturn,
            paginatedChildrenReturn,
            rearrangeableChildrenReturn,
            sortableChildrenReturn,
            linearNavigationReturn,
            managedChildrenReturn,
            rovingTabIndexReturn,
            toolbarReturn,
            typeaheadNavigationReturn,
            randomIdInputReturn,
            randomIdLabelReturn
        };
    }
    function useMenubarChild({ managedChildParameters, singleSelectionChildParameters, completeListNavigationChildParameters, rovingTabIndexChildParameters, sortableChildParameters, context, textContentParameters, menuItemParameters: { onPress: opu, role } }) {
        debugLog("useMenuItem", managedChildParameters.index);
        const focusSelf = T$1((e) => e.focus?.(), []);
        const { hasCurrentFocusReturn, pressParameters: { excludeSpace, onPressSync: ops }, props, refElementReturn, singleSelectionChildReturn, rovingTabIndexChildReturn, managedChildReturn, staggeredChildReturn, paginatedChildReturn } = useToolbarChild({
            completeListNavigationChildParameters,
            context,
            managedChildParameters,
            rovingTabIndexChildParameters,
            sortableChildParameters,
            textContentParameters,
            singleSelectionChildParameters,
        });
        const { pressReturn } = usePress({
            pressParameters: {
                focusSelf,
                excludeSpace,
                onPressSync: useStableCallback((e) => {
                    ops?.(e);
                    opu?.(e);
                })
            }, refElementReturn
        });
        props.role = role;
        return {
            hasCurrentFocusReturn,
            pressReturn,
            paginatedChildReturn,
            refElementReturn,
            props: useMergedProps(props, pressReturn.propsUnstable),
            singleSelectionChildReturn,
            rovingTabIndexChildReturn,
            staggeredChildReturn,
            managedChildReturn
        };
    }

    function useMenu({ dismissParameters, escapeDismissParameters, linearNavigationParameters, menuParameters: { openDirection, onOpen }, menuSurfaceParameters, rearrangeableChildrenParameters, rovingTabIndexParameters, singleSelectionDeclarativeParameters, sortableChildrenParameters, toolbarParameters, staggeredChildrenParameters, typeaheadNavigationParameters, menubarParameters }) {
        debugLog("useMenu");
        const { childrenHaveFocusReturn, context, linearNavigationReturn, managedChildrenReturn, propsLabel: propsButtonAsMenuLabel, propsMenubar, rearrangeableChildrenReturn, rovingTabIndexReturn, sortableChildrenReturn, toolbarReturn, paginatedChildrenReturn, staggeredChildrenReturn, typeaheadNavigationReturn, randomIdInputReturn, randomIdLabelReturn, } = useMenubar({
            linearNavigationParameters,
            rearrangeableChildrenParameters,
            rovingTabIndexParameters,
            singleSelectionDeclarativeParameters,
            staggeredChildrenParameters,
            sortableChildrenParameters,
            typeaheadNavigationParameters,
            toolbarParameters: { ...toolbarParameters },
            menubarParameters: { role: "menu", ...menubarParameters },
            labelParameters: { ariaLabel: null }
        });
        const onKeyDown = useStableCallback((e) => {
            const isOpen = dismissParameters.open;
            if (!isOpen) {
                switch (e.key) {
                    case "ArrowUp": {
                        if (openDirection == 'up') {
                            onOpen();
                            e.preventDefault();
                            e.stopPropagation();
                        }
                        break;
                    }
                    case "ArrowDown": {
                        if (openDirection == 'down') {
                            onOpen();
                            e.preventDefault();
                            e.stopPropagation();
                        }
                        break;
                    }
                    case "ArrowLeft": {
                        if (openDirection == 'left') {
                            onOpen();
                            e.preventDefault();
                            e.stopPropagation();
                        }
                        break;
                    }
                    case "ArrowRight": {
                        if (openDirection == 'right') {
                            onOpen();
                            e.preventDefault();
                            e.stopPropagation();
                        }
                        break;
                    }
                }
            }
        });
        const { focusTrapReturn, propsSentinel, propsSurface, propsTarget, propsTrigger, refElementPopupReturn, refElementSourceReturn } = useMenuSurface({
            menuSurfaceParameters: {
                ...menuSurfaceParameters,
                surfaceId: randomIdInputReturn.id,
                role: "menu",
            },
            dismissParameters,
            escapeDismissParameters,
            focusTrapParameters: {
                focusPopup: () => { rovingTabIndexReturn.focusSelf(); }
            }
        });
        return {
            childrenHaveFocusReturn,
            context: useStableObject({
                ...context,
                menu: useStableObject({
                    closeFromMenuItemClicked: useStableCallback(() => {
                        dismissParameters.onClose("item-clicked");
                    })
                })
            }),
            focusTrapReturn,
            linearNavigationReturn,
            managedChildrenReturn,
            staggeredChildrenReturn,
            paginatedChildrenReturn,
            propsSentinel,
            propsSurface,
            propsTarget: useMergedProps(propsTarget, propsMenubar),
            propsTrigger: useMergedProps({ onKeyDown }, propsTrigger, propsButtonAsMenuLabel),
            rearrangeableChildrenReturn,
            refElementPopupReturn,
            refElementSourceReturn,
            rovingTabIndexReturn,
            sortableChildrenReturn,
            toolbarReturn,
            typeaheadNavigationReturn,
            randomIdInputReturn,
            randomIdLabelReturn,
        };
    }
    function useMenuItem(p) {
        const ret = useMenubarChild(p);
        return {
            ...ret,
            menuItemReturn: { closeMenu: p.context.menu.closeFromMenuItemClicked }
        };
    }

    const NotificationProviderContext = G$1(null);
    /**
     * Allows children to send notifications to a screen reader or other assistive technology.
     *
     * Please note that because some devices only check for `aria-live` regions *once* on page load,
     * they cannot be created dynamically. You must pass the ID of the elements to use (or the elements themselves).
     *
     * One *must* have `aria-live=polite` and one *must* have `aria-live=assertive`, but there aren't really any other requirements.
     * They shouldn't be visible, I suppose.
     *
     * @param param0
     * @returns
     */
    function useNotificationProvider({ targetAssertive, targetPolite }) {
        const { children: childrenPolite, pushChild: notifyPolite, portalElement: politeElement } = usePortalChildren({ target: targetPolite });
        const { children: childrenAssertive, pushChild: notifyAssertive, portalElement: assertiveElement } = usePortalChildren({ target: targetAssertive });
        console.assert(politeElement?.getAttribute("aria-live") == "polite");
        console.assert(assertiveElement?.getAttribute("aria-live") == "assertive");
        const notify = T$1((mode, child) => {
            return mode == "assertive" ? notifyAssertive(child) : notifyPolite(child);
        }, [notifyAssertive, notifyPolite]);
        return {
            notify,
            context: F$1(() => ({ notify }), [notify]),
            children: (o$1(_$2, { children: [childrenPolite, childrenAssertive] }))
        };
    }
    function useNotify() {
        return q(NotificationProviderContext).notify;
    }

    function useProgress({ labelParameters, progressIndicatorParameters: { max, value, valueText, tagIndicator } }) {
        const { propsInput, propsLabel, randomIdInputReturn, randomIdLabelReturn } = useLabelSynthetic({
            labelParameters: { ...labelParameters, onLabelClick: null },
            randomIdInputParameters: { prefix: Prefices.progressIndicator },
            randomIdLabelParameters: { prefix: Prefices.progressLabel }
        });
        // This isn't an input in the usual sense -- it's not tabbable.
        // TODO: Make this an option in the hook itself
        propsInput.tabIndex = -1;
        const busy = value && value != "disabled"; //value == "disabled" || !value? false : true;// (!!value);
        const disabled = (value == "disabled");
        if (typeof value != "number") {
            value = null;
            max ??= 100;
        }
        const indicatorProps = tagIndicator === "progress" ?
            {
                max,
                value: (value ?? undefined),
                "aria-valuemin": "0",
                "aria-valuenow": value == null ? undefined : `${value}`,
            }
            :
                {
                    "aria-valuemin": "0",
                    "aria-valuemax": max == null ? undefined : `${max}`,
                    "aria-valuetext": valueText == null ? undefined : `${valueText}`,
                    "aria-valuenow": value == null ? undefined : `${value}`,
                    role: "progressbar"
                };
        if (disabled) {
            indicatorProps["aria-hidden"] = "true";
        }
        const labelProps = {
            "aria-hidden": (!busy ? "true" : undefined)
        };
        const regionProps = {
            "aria-busy": (busy).toString(),
            "aria-describedby": randomIdInputReturn.id
        };
        return {
            propsIndicator: useMergedProps(indicatorProps, propsInput),
            propsLabel: useMergedProps(labelProps, propsLabel),
            propsRegion: regionProps,
            randomIdInputReturn,
            randomIdLabelReturn,
        };
    }
    function useProgressWithHandler({ labelParameters, progressIndicatorParameters, asyncHandlerParameters, progressWithHandlerParameters: { forciblyPending } }) {
        const asyncInfo = useAsyncHandler(asyncHandlerParameters);
        const { propsIndicator, propsLabel, propsRegion } = useProgress({
            labelParameters,
            progressIndicatorParameters: {
                max: 1,
                value: (forciblyPending || asyncInfo.pending) ? "indeterminate" : "disabled",
                valueText: null,
                ...progressIndicatorParameters
            },
        });
        return {
            propsIndicator,
            propsLabel,
            propsRegion,
            asyncHandlerReturn: asyncInfo
        };
    }

    function useRadioGroup({ linearNavigationParameters, rearrangeableChildrenParameters, rovingTabIndexParameters, sortableChildrenParameters, typeaheadNavigationParameters, staggeredChildrenParameters, labelParameters, radioGroupParameters: { name, onSelectedValueChange, selectedValue }, }) {
        const [selectedIndex, setSelectedIndex] = useState(null);
        const byName = _(new Map());
        const { propsInput: propsGroup1, propsLabel } = useLabelSynthetic({
            labelParameters: {
                onLabelClick: useStableCallback(() => {
                    rovingTabIndexReturn.focusSelf();
                }),
                ...labelParameters
            },
            randomIdLabelParameters: { prefix: Prefices.radioGroupLabel, },
            randomIdInputParameters: { prefix: Prefices.radioGroup }
        });
        h(() => {
            if (selectedValue != null)
                singleSelectionReturn.changeSelectedIndex(byName.current.get(selectedValue) ?? null);
            else
                singleSelectionReturn.changeSelectedIndex(null);
        }, [selectedValue]);
        const { childrenHaveFocusReturn, context, props: propsGroup2, linearNavigationReturn, managedChildrenReturn, rearrangeableChildrenReturn, rovingTabIndexReturn, singleSelectionReturn, paginatedChildrenReturn, staggeredChildrenReturn, sortableChildrenReturn, typeaheadNavigationReturn } = useCompleteListNavigation({
            linearNavigationParameters,
            rearrangeableChildrenParameters,
            rovingTabIndexParameters,
            singleSelectionParameters: { initiallySelectedIndex: selectedIndex, onSelectedIndexChange: setSelectedIndex },
            sortableChildrenParameters,
            typeaheadNavigationParameters,
            staggeredChildrenParameters,
            paginatedChildrenParameters: { paginationMin: null, paginationMax: null }
        });
        useSingleSelectionDeclarative({
            singleSelectionReturn: {
                changeSelectedIndex: useStableCallback((s, r) => {
                    let next = typeof s == "function" ? s(selectedIndex) : s;
                    if (next != null) {
                        const nextValue = managedChildrenReturn.getChildren().getAt(next)?.getValue2();
                        onSelectedValueChange(nextValue, r);
                    }
                    else {
                        onSelectedValueChange(null, r);
                    }
                })
            }, singleSelectionDeclarativeParameters: { selectedIndex }
        });
        const propsRadioGroup = useMergedProps(propsGroup1, propsGroup2, { role: "radiogroup" });
        return {
            propsRadioGroup,
            propsRadioGroupLabel: propsLabel,
            childrenHaveFocusReturn,
            context: {
                ...context,
                radioContext: { name, byName: byName.current }
            },
            staggeredChildrenReturn,
            linearNavigationReturn,
            managedChildrenReturn,
            radioGroupReturn: { selectedIndex },
            rearrangeableChildrenReturn,
            paginatedChildrenReturn,
            rovingTabIndexReturn,
            singleSelectionReturn,
            sortableChildrenReturn,
            typeaheadNavigationReturn
        };
    }
    function useRadio({ radioParameters: { value }, checkboxLikeParameters: { disabled }, completeListNavigationChildParameters, labelParameters, managedChildParameters, singleSelectionChildParameters, context, textContentParameters, rovingTabIndexChildParameters, sortableChildParameters }) {
        const index = managedChildParameters.index;
        debugLog("useRadio", index);
        const onInput = useStableCallback((e) => {
            singleSelectionChildReturn.setThisOneSelected(e);
        });
        const { name, byName } = context.radioContext;
        const { tagInput, labelPosition } = labelParameters;
        const getValue = useStableGetter(value);
        const { props: listNavigationSingleSelectionChildProps, hasCurrentFocusReturn, managedChildReturn, pressParameters, rovingTabIndexChildReturn, staggeredChildReturn, singleSelectionChildReturn, refElementReturn, paginatedChildReturn } = useCompleteListNavigationChild({
            completeListNavigationChildParameters: { getValue2: getValue, ...completeListNavigationChildParameters },
            managedChildParameters,
            context,
            rovingTabIndexChildParameters,
            sortableChildParameters,
            textContentParameters,
            singleSelectionChildParameters: { selectionMode: "focus", ariaPropName: tagInput == "input" && labelPosition != "wrapping" ? null : "aria-selected", ...singleSelectionChildParameters }
        });
        const { selected: checked } = singleSelectionChildReturn;
        const { refElementReturn: refElementInputReturn } = useRefElement({ refElementParameters: {} });
        const { refElementReturn: refElementLabelReturn } = useRefElement({ refElementParameters: {} });
        const { checkboxLikeInputReturn, checkboxLikeLabelReturn, pressInputReturn, pressLabelReturn, propsInput, propsLabel, randomIdInputReturn, randomIdLabelReturn, checkboxLikeReturn } = useCheckboxLike({
            checkboxLikeParameters: {
                checked: (checked ?? false),
                disabled,
                onInput: onInput,
                role: "radio"
            },
            pressParameters,
            labelParameters,
            randomIdInputParameters: { prefix: Prefices.radio },
            randomIdLabelParameters: { prefix: Prefices.radioLabel },
            refElementInputReturn,
            refElementLabelReturn
        });
        s(() => {
            byName.set(value, index);
            return () => { byName.delete(value); };
        }, [value, index]);
        if (tagInput == "input") {
            propsInput.name = name;
            propsInput.checked = (checked ?? false);
            propsInput.type = "radio";
        }
        else {
            propsInput["aria-checked"] = (checked ?? false).toString();
        }
        const propsIfInputHandlesFocus = useMergedProps(listNavigationSingleSelectionChildProps, propsInput);
        const propsInput2 = labelPosition != "wrapping" ? propsIfInputHandlesFocus : propsInput;
        const propsIfLabelHandlesFocus = useMergedProps(listNavigationSingleSelectionChildProps, propsLabel);
        const propsLabel2 = labelPosition == "wrapping" ? propsIfLabelHandlesFocus : propsLabel;
        return {
            checkboxLikeInputReturn,
            checkboxLikeLabelReturn,
            managedChildReturn,
            pressInputReturn,
            pressLabelReturn,
            propsInput: propsInput2,
            propsLabel: propsLabel2,
            randomIdInputReturn,
            randomIdLabelReturn,
            hasCurrentFocusReturn,
            staggeredChildReturn,
            rovingTabIndexChildReturn,
            refElementReturn,
            singleSelectionChildReturn,
            checkboxLikeReturn,
            paginatedChildReturn
        };
    }

    function useSlider({ sliderParameters: { max, min }, managedChildrenParameters }) {
        debugLog("useSlider");
        const { context, managedChildrenReturn } = useManagedChildren({ managedChildrenParameters });
        const baseIdRef = _(null);
        if (baseIdRef.current === null)
            baseIdRef.current = generateRandomId(Prefices.sliderThumb);
        return {
            context: F$1(() => ({
                ...context,
                sliderContext: {
                    min,
                    max,
                    baseId: baseIdRef.current
                }
            }), [min, max]),
            managedChildrenReturn
        };
    }
    function useSliderThumb({ managedChildParameters, context: { sliderContext: { max: maxParent, min: minParent }, ...context }, sliderThumbParameters }) {
        const { index } = managedChildParameters;
        debugLog("useSliderThumb", managedChildParameters.index);
        const { managedChildReturn } = useManagedChild({ managedChildParameters, context }, { index });
        const { tag, value, max: maxOverride, min: minOverride, onValueChange, valueText, label } = sliderThumbParameters;
        const min = (minOverride ?? minParent);
        const max = (maxOverride ?? maxParent);
        let newProps = (tag == "input" ?
            { min, max, value, type: "range" } :
            { "aria-valuemax": `${max}`, "aria-valuemin": `${min}`, "aria-valuenow": `${value}` });
        newProps = { ...newProps, "aria-label": label, "aria-valuetext": valueText, style: { "--range-value": `${value}`, "--range-value-text": `${valueText}` } };
        if (tag == "input") {
            newProps.onInput = e => {
                onValueChange?.({ currentTarget: e.currentTarget, target: e.target, [EventDetail]: { value: e.currentTarget.valueAsNumber } });
            };
        }
        else {
            throw new Error("Unimplemented");
        }
        return {
            sliderThumbReturn: {
                min,
                max
            },
            managedChildReturn,
            propsSliderThumb: newProps
        };
    }

    function useTable({ labelParameters, tableParameters: { selectionLimit, tagTable }, }) {
        const [getSortBody, setSortBody] = usePassiveState(null, returnNull);
        const sortQueue = _([]);
        const [getSortColumn, setSortColumn] = usePassiveState(T$1((a) => { sortQueue.current.push(a.column); }, []), T$1(() => { return { column: 0, direction: "ascending" }; }, []));
        const updateSortDirection = T$1((column) => {
            const { column: currentColumn, direction: currentDirection } = getSortColumn();
            const next = { column, direction: column != currentColumn ? "ascending" : (currentDirection == "ascending" ? "descending" : "ascending") };
            setSortColumn(next);
            return next;
        }, []);
        const sortByColumn = T$1((column) => {
            const next = updateSortDirection(column);
            getSortBody()?.();
            return next;
        }, []);
        //const { tagInput: tagTable } = labelParameters
        const { propsInput: propsLabelList, propsLabel: propsLabelLabel } = useLabelSynthetic({
            labelParameters: { ...labelParameters, onLabelClick: null },
            randomIdInputParameters: { prefix: Prefices.table },
            randomIdLabelParameters: { prefix: Prefices.tableLabel }
        });
        return {
            propsTable: useMergedProps({ role: tagTable == "table" ? undefined : "grid", "aria-multiselectable": (selectionLimit == "multi" ? "true" : undefined) }, propsLabelList),
            propsLabel: propsLabelLabel,
            context: ({ tableContext: ({ sortByColumn, setSortBodyFunction: setSortBody, getCurrentSortColumn: getSortColumn }) })
        };
    }
    function fuzzyCompare(lhs, rhs) {
        if (lhs === rhs)
            return 0;
        if (lhs == null || rhs == null) {
            if (lhs == null && rhs != null)
                return -1;
            if (lhs != null && rhs == null)
                return 1;
            if (lhs === null && rhs === undefined)
                return 1;
            if (lhs === undefined && rhs === null)
                return -1;
        }
        else {
            if (lhs == rhs)
                return 0;
            if (lhs < rhs)
                return -1;
            return 1;
        }
        return 0;
    }
    const naturalSectionTypes = new Set(["thead", "tbody", "tfoot"]);
    function useTableSection({ linearNavigationParameters, rovingTabIndexParameters, singleSelectionParameters, gridNavigationParameters, rearrangeableChildrenParameters, paginatedChildrenParameters, staggeredChildrenParameters, tableSectionParameters: { tagTableSection, location }, context: { tableContext } }) {
        const { childrenHaveFocusReturn, context, linearNavigationReturn, managedChildrenReturn, props, rovingTabIndexReturn, singleSelectionReturn, typeaheadNavigationReturn, staggeredChildrenReturn, rearrangeableChildrenReturn, paginatedChildrenReturn, sortableChildrenReturn } = useCompleteGridNavigation({
            linearNavigationParameters,
            rovingTabIndexParameters,
            singleSelectionParameters,
            paginatedChildrenParameters,
            staggeredChildrenParameters,
            sortableChildrenParameters: {
                compare: T$1((lhs, rhs) => {
                    return fuzzyCompare(lhs?.getSortValue?.(), rhs?.getSortValue?.());
                }, [])
            },
            typeaheadNavigationParameters: { noTypeahead: true, collator: null, typeaheadTimeout: Infinity },
            gridNavigationParameters,
            rearrangeableChildrenParameters
        });
        if (!naturalSectionTypes.has(tagTableSection)) {
            props.role = "rowgroup";
        }
        h(() => {
            if (location == "body") {
                tableContext.setSortBodyFunction(() => {
                    const managedRows = managedChildrenReturn.getChildren();
                    return () => sortableChildrenReturn.sort(managedRows, tableContext.getCurrentSortColumn().direction);
                });
            }
        });
        /*const sort = useCallback((column: number) => {
            const ret = tableContext.updateSortDirection(column)
            sortableChildrenReturn.sort(managedChildrenReturn.getChildren(), ret.direction);
            return ret;
        }, [])*/
        return {
            childrenHaveFocusReturn,
            context: {
                ...context,
                tableContext
            },
            staggeredChildrenReturn,
            linearNavigationReturn,
            managedChildrenReturn,
            rovingTabIndexReturn,
            singleSelectionReturn,
            rearrangeableChildrenReturn,
            sortableChildrenReturn,
            typeaheadNavigationReturn,
            paginatedChildrenReturn,
            propsTableSection: props
        };
    }
    function useTableRow({ rowAsChildOfGridParameters: { managedChildParameters, singleSelectionChildParameters, completeGridNavigationRowParameters, rovingTabIndexChildParameters, textContentParameters, context: cx1 }, rowAsParentOfCellsParameters: { linearNavigationParameters, rovingTabIndexParameters }, tableRowParameters: { selected } }) {
        const { context: cx2, hasCurrentFocusReturn, rowAsChildOfGridReturn, rowAsParentOfCellsReturn, props } = useCompleteGridNavigationRow({
            rowAsChildOfGridParameters: {
                textContentParameters,
                context: { ...cx1 },
                managedChildParameters,
                singleSelectionChildParameters,
                completeGridNavigationRowParameters,
                rovingTabIndexChildParameters,
                sortableChildParameters: {
                    getSortValue: useStableCallback(() => {
                        const currentColumn = cx1.tableContext.getCurrentSortColumn().column;
                        const currentChild = rowAsParentOfCellsReturn.managedChildrenReturn.getChildren().getAt(currentColumn ?? 0);
                        const sortValue = currentChild?.getSortValue();
                        return sortValue;
                    })
                }
            },
            rowAsParentOfCellsParameters: {
                linearNavigationParameters,
                rovingTabIndexParameters,
                typeaheadNavigationParameters: { noTypeahead: true, collator: null, typeaheadTimeout: Infinity }
            }
        });
        props.role = "gridrow";
        // TODO: Unneeded?
        //if (selected)
        //    props[singleSelectionChildParameters.ariaPropName ?? "aria-selected"] = "true";
        return {
            rowAsChildOfGridReturn,
            rowAsParentOfCellsReturn,
            context: {
                ...cx2,
                tableContext: cx1.tableContext
            },
            hasCurrentFocusReturn,
            props
        };
    }
    function useTableCell({ tableCellParameters: { tagTableCell }, ...p }) {
        const { props, ...ret } = useCompleteGridNavigationCell(p);
        return {
            propsFocus: props,
            propsCell: { role: (tagTableCell != "th" && tagTableCell != "td") ? "gridcell" : undefined },
            ...ret,
            tableCellReturn: {
                sortByThisColumn: useStableCallback(() => {
                    return p.context.tableContext.sortByColumn(p.managedChildParameters.index);
                }, [])
            }
        };
    }
    /*
    export interface UseTableSectionSectionParameters {
        gridlistSectionParameters: {
            compareRows: (lhsIndex: number, rhsIndex: number) => number;
        }
        gridlistSectionContext: {

        }
    }*/
    /*
    export const useTableSectionSection = <BodySectionElement extends Element, RowElement extends Element>({ compareRows }: UseTableSectionSectionParameters) => {
        //debugLog("useTableSectionSection");
        //type CRFull = UseRovingTabIndexSubInfo<RowElement, UseListNavigationSubInfo<UseTableRowSubInfo<CellElement, CR, CC>>>;
        const getIndex = useCallback<GetIndex<any>>((i) => i.props.index, []);


        const {
            linearNavigationParameters,
            rearrangeableChildrenReturn,
            sortableChildrenReturn
        } = useSortableChildren<BodySectionElement, TableRowInfo<RowElement>>({
            rearrangeableChildrenParameters: {
                getIndex,
                getHighestChildIndex,
                getValid
            },
            sortableChildrenParameters: {
                compare: (lhs, rhs) => {
                    if (lhs.locationIndex === rhs.locationIndex)
                        return compareRows(lhs.index, rhs.index);
                    return lhs.locationIndex - rhs.locationIndex;
                }
            }
        });

        const useTableSectionSectionProps = (props: h.JSX.HTMLAttributes<BodySectionElement>) => {
            console.assert(props.children != null);
            overwriteWithWarning("useTableSectionSection", props, "role", "rowgroup");
            return useSortableProps(props as h.JSX.HTMLAttributes<BodySectionElement> & { children: any });
        }

        return {
            useTableSectionSectionProps,
            ...sortableRet
        }
    }*/

    function useTabs({ labelParameters, linearNavigationParameters, rearrangeableChildrenParameters, rovingTabIndexParameters, singleSelectionParameters: { onSelectedIndexChange: ssi, ...singleSelectionParameters }, sortableChildrenParameters, staggeredChildrenParameters, typeaheadNavigationParameters, tabsParameters: { orientation, role, localStorageKey } }) {
        debugLog("useTabs");
        const [localStorageIndex, setLocalStorageIndex] = usePersistentState(localStorageKey ?? null, 0);
        if (localStorageIndex != null)
            singleSelectionParameters.initiallySelectedIndex = localStorageIndex;
        const baseId = generateRandomId("aria-tabs-");
        const getTabId = T$1((index) => { return baseId + "-tab-" + index; }, []);
        const getPanelId = T$1((index) => { return baseId + "-panel-" + index; }, []);
        // Used for the panels, not the tabs in the tablist.
        // Those are in useTabList itself.
        const { context: managedChildContext, managedChildrenReturn: panelChildrenReturn } = useManagedChildren({
            managedChildrenParameters: {
                onChildrenMountChange: useStableCallback((_m, _u) => { reevaluateClosestFit(); })
            }
        });
        const { changeIndex: changeVisiblePanel, getCurrentIndex: getVisibleIndex, reevaluateClosestFit } = useChildrenFlag({
            getChildren: panelChildrenReturn.getChildren,
            closestFit: false,
            initialIndex: null,
            getAt: useStableCallback((i) => { return i.getVisible() ?? false; /*getPanels().getAt(i)?.getVisible() ?? false)*/ }, []),
            setAt: useStableCallback((i, b, n, p) => { return i.setVisibleIndex(n, p); /*(getPanels().getAt(i)?.setVisible(b));*/ }, []),
            isValid: returnTrue,
            onIndexChange: null
        });
        s(() => {
            changeVisiblePanel(singleSelectionParameters.initiallySelectedIndex);
        }, []);
        const { propsInput, propsLabel, randomIdInputReturn: { id: _inputId }, randomIdLabelReturn: { id: _labelId }, } = useLabelSynthetic({
            labelParameters: { ...labelParameters, onLabelClick: useStableCallback(() => listNavRet1.rovingTabIndexReturn.focusSelf()) },
            randomIdInputParameters: { prefix: Prefices.tablist },
            randomIdLabelParameters: { prefix: Prefices.tablistLabel },
        });
        const { props: listNavigationSingleSelectionProps, context, ...listNavRet1 } = useCompleteListNavigation({
            linearNavigationParameters: { navigationDirection: orientation, ...linearNavigationParameters },
            rovingTabIndexParameters,
            singleSelectionParameters: {
                onSelectedIndexChange: useStableCallback((i, p) => {
                    ssi?.(i, p);
                    changeVisiblePanel(i);
                    setLocalStorageIndex(i);
                    changeSelectedIndex(i, p);
                }),
                ...singleSelectionParameters
            },
            typeaheadNavigationParameters,
            rearrangeableChildrenParameters,
            staggeredChildrenParameters,
            sortableChildrenParameters,
            paginatedChildrenParameters: { paginationMax: null, paginationMin: null }
        });
        const { singleSelectionReturn: { changeSelectedIndex } } = listNavRet1;
        return {
            contextPanels: useStableObject({
                ...managedChildContext,
                tabPanelContext: useStableObject({
                    getPanelId,
                    getTabId,
                    getVisibleIndex,
                    setSelectedIndex: changeSelectedIndex
                })
            }),
            contextTabs: useStableObject({
                ...context,
                tabsContext: useStableObject({ getTabId, getPanelId, getVisibleIndex, setSelectedIndex: changeSelectedIndex })
            }),
            propsContainer: useMergedProps(listNavigationSingleSelectionProps, propsInput, {
                role: (role ?? "tablist"),
                "aria-orientation": orientation ?? "horizontal",
            }),
            propsLabel,
            ...listNavRet1
        };
    }
    function useTab({ completeListNavigationChildParameters: { focusSelf, ...completeListNavigationChildParameters }, managedChildParameters, textContentParameters, singleSelectionChildParameters: { selectionMode, ...singleSelectionChildParameters }, rovingTabIndexChildParameters, sortableChildParameters, context }) {
        const { props: listNavigationSingleSelectionChildProps, ...listNavRet2 } = useCompleteListNavigationChild({
            completeListNavigationChildParameters: { focusSelf, ...completeListNavigationChildParameters },
            context,
            managedChildParameters,
            rovingTabIndexChildParameters,
            sortableChildParameters,
            textContentParameters,
            singleSelectionChildParameters: { ariaPropName: "aria-selected", selectionMode: selectionMode ?? "foucs", ...singleSelectionChildParameters },
        });
        const { pressParameters, refElementReturn } = listNavRet2;
        const { pressReturn } = usePress({ pressParameters: { ...pressParameters, focusSelf }, refElementReturn });
        const { singleSelectionChildReturn: { selected }, rovingTabIndexChildReturn: { tabbable } } = listNavRet2;
        const { getPanelId, getTabId } = context.tabsContext;
        const panelId = getPanelId(managedChildParameters.index);
        const tabId = getTabId(managedChildParameters.index);
        debugLog("useTab", managedChildParameters.index, selected.toString());
        return {
            props: useMergedProps(pressReturn.propsUnstable, listNavigationSingleSelectionChildProps, {
                "data-tabbable": tabbable.toString(),
                "data-selected": selected.toString(),
                role: "tab",
                "aria-controls": panelId,
                id: tabId
            }),
            pressReturn,
            ...listNavRet2
        };
    }
    function useTabPanel({ managedChildParameters, context }) {
        const { index } = managedChildParameters;
        debugLog("useTabPanel", index);
        const { tabPanelContext: { getVisibleIndex: g, getPanelId, getTabId } } = context;
        //const [correspondingTabId, setCorrespondingTabId] = useState<string | null>(null);
        const [lastKnownVisibleIndex, setLastKnownVisibleIndex, getLastKnownVisibleIndex] = useState(g());
        const [isVisible, setIsVisible, getIsVisible] = useState(null);
        //const visibleRef = useRef<ChildFlagOperations>({ get: getIsVisible, set: setIsVisible, isValid: returnTrue });
        useManagedChild({ context, managedChildParameters: { index } }, {
            getVisible: useStableCallback(() => { return getLastKnownVisibleIndex() == index; }),
            setVisibleIndex: useStableCallback((newIndex, prevIndex) => {
                // Similar logic is in singleSelection, but we need to duplicate it here
                let changeIndex = (newIndex == index ? prevIndex : newIndex);
                if (changeIndex != null)
                    setLastKnownVisibleIndex(changeIndex);
                if (newIndex == index) {
                    setIsVisible(true);
                }
                else {
                    setIsVisible(false);
                }
            }),
            ...managedChildParameters
        });
        const panelId = getPanelId(managedChildParameters.index);
        const tabId = getTabId(managedChildParameters.index);
        //const isVisible = (lastKnownVisibleIndex === index);
        return {
            props: useMergedProps({
                role: "tabpanel",
                "aria-labelledby": tabId,
                id: panelId,
                inert: !isVisible
            }),
            tabPanelReturn: {
                visibleOffset: lastKnownVisibleIndex == null ? null : (index - lastKnownVisibleIndex),
                visible: isVisible,
                getVisible: useStableCallback(() => { return getLastKnownVisibleIndex() === index; })
            }
        };
    }

    function useToasts({ managedChildrenParameters: { onChildrenMountChange: ocmu, onAfterChildLayoutEffect }, toastsParameters: { visibleCount } }) {
        debugLog("useToasts");
        // Normally, this does just look like [0, 1, 2, 3], etc
        // so it could be just an index to the current toast,
        // but if we dismiss toasts out of order, it's [0, 2, 3] or something.
        // So just keep track of it all in a big ol', there's only one of these on a page anyway,
        // and if you're pusing 10000 toasts at once an Array<number> isn't going to be your bottleneck.
        const currentIndexQueue = _([]);
        const getMaxVisibleCount = useStableGetter(visibleCount);
        const nextIndexToStartAt = _(0);
        const { refElementReturn: { getElement, propsStable } } = useRefElement({ refElementParameters: {} });
        const { context, managedChildrenReturn, ..._childInfo } = useManagedChildren({ managedChildrenParameters: { onAfterChildLayoutEffect, onChildrenMountChange: ocmu } });
        const { getChildren: getToastQueue } = managedChildrenReturn;
        const toastQueue = getToastQueue();
        // When a toast is shown or hidden, always make sure that we're showing all the toasts that we should be.
        const showHighestPriorityToast = T$1(() => {
            const max = Math.min(getMaxVisibleCount(), currentIndexQueue.current.length);
            let start = nextIndexToStartAt.current;
            for (let i = start; i < max; ++i) {
                const highestPriorityToast = toastQueue.getAt(currentIndexQueue.current[i]);
                console.assert(!!highestPriorityToast);
                highestPriorityToast?.show();
            }
            nextIndexToStartAt.current = max;
        }, []);
        // Any time a new toast mounts, update our bottommostToastIndex to point to it if necessary
        // ("necessary" just meaning if it's the first toast ever or all prior toasts have been dismissed)
        const onAnyToastMounted = T$1((toastIndex) => {
            currentIndexQueue.current.push(toastIndex);
            toastQueue.getAt(toastIndex)?.setNumberAheadOfMe(currentIndexQueue.current.length - 1);
            showHighestPriorityToast();
        }, []);
        // Any time a toast is dismissed, update our bottommostToastIndex to point to the next toast in the queue, if one exists.
        const onAnyToastDismissed = T$1((_index) => {
            // When we dismiss a toast, remove it from the "to-display" queue by actually splicing it out of the array.
            // Then notify each toast of its change in position within that queue to keep the two in sync.
            const removalIndex = currentIndexQueue.current.findIndex(i => i == _index);
            // For all toasts that have already been dismissed, shift them even further back by one to "make space" 
            // (they're removed from the queue but this is the negative index they would have if we kept negatives in the queue)
            // for the newly-dismissed toast.
            toastQueue.forEach(c => {
                c.setNumberAheadOfMe(prev => {
                    if (prev < 0)
                        return prev - 1;
                    else
                        return prev;
                });
            });
            // Let this toast know that it's now the most recently dismissed toast
            toastQueue.getAt(_index)?.setNumberAheadOfMe(-1);
            // Notify all toasts waiting behind this one in the queue that they've moved up one slot
            toastQueue.forEach(c => {
                c.setNumberAheadOfMe(prev => {
                    if (prev > removalIndex)
                        return prev - 1;
                    else
                        return prev;
                });
            });
            // Actually modify the queue itself
            currentIndexQueue.current.splice(removalIndex, 1);
            // And after all that, make sure that we're showing any toasts that have been waiting in the queue
            showHighestPriorityToast();
        }, []);
        const [_mouseOver2, setMouseOver, _getMouseOver] = useState(false);
        useGlobalHandler(document, "pointermove", e => {
            const mouseOver = (e.target != null && e.target instanceof Node && (getElement()?.contains(e.target) || getElement() == e.target));
            setMouseOver(mouseOver);
        });
        const toastContext = {
            onAnyToastDismissed,
            getMaxVisibleCount,
            onAnyToastMounted
        };
        const props = useMergedProps(useMergedProps(propsStable, { class: "toasts-container" }));
        return {
            context: {
                ...context,
                toastContext
            },
            managedChildrenReturn,
            props
        };
    }
    function useToast({ toastParameters: { politeness, timeout, children }, managedChildParameters: { index, ..._managedChildParameters }, context }) {
        const { getMaxVisibleCount, onAnyToastDismissed, onAnyToastMounted } = context.toastContext;
        debugLog("useToast", index);
        const [numberOfToastsAheadOfUs, setNumberOfToastsAheadOfUs] = useState(Infinity);
        const getIndex = useStableGetter(index);
        const [dismissed2, setDismissed2, getDismissed2] = useState(false);
        const [showing2, setShowing2, getShowing2] = useState(false);
        const [triggerIndex, setTriggerIndex] = useState(1);
        const notify = useNotify();
        const dismiss = T$1(() => {
            if (!getDismissed2())
                onAnyToastDismissed(getIndex());
            setDismissed2(true);
            setShowing2(false);
        }, []);
        const show = useStableCallback(() => {
            notify("polite", o$1("p", { children: children }));
            setShowing2(true);
        });
        h(() => {
            if (!getDismissed2() && !getShowing2()) {
                if (numberOfToastsAheadOfUs >= 0 && numberOfToastsAheadOfUs < getMaxVisibleCount()) {
                    show();
                }
            }
        }, [numberOfToastsAheadOfUs]);
        const focus = T$1(() => {
            const element = getElement();
            if (element) {
                const firstFocusable = findFirstFocusable(element);
                firstFocusable?.focus?.();
            }
        }, []);
        useManagedChild({ managedChildParameters: { index }, context }, { index, focus, setNumberAheadOfMe: setNumberOfToastsAheadOfUs, show });
        const resetDismissTimer = T$1(() => {
            setTriggerIndex(i => ++i);
        }, []);
        h(() => {
            onAnyToastMounted(index);
        }, []);
        const dismissTimeoutKey = (timeout == null || numberOfToastsAheadOfUs != 0) ? null : isFinite(timeout) ? timeout : timeout > 0 ? null : 0;
        useTimeout({
            timeout: dismissTimeoutKey,
            callback: () => {
                if (showing2)
                    dismiss();
            },
            triggerIndex: showing2 ? triggerIndex : false
        });
        const { refElementReturn: { getElement, propsStable } } = useRefElement({ refElementParameters: {} });
        return {
            toastReturn: {
                dismissed: dismissed2,
                showing: showing2,
                numberOfToastsAheadOfUs,
                dismiss,
                resetDismissTimer
            },
            props: propsStable
        };
    }

    function useTooltip({ tooltipParameters: { onStatus, tooltipSemanticType }, escapeDismissParameters }) {
        /**
         * Whether the hover/focus-popup/trigger state we have results in us showing this tooltip.
         *
         * This is used purely to attach global event handlers that should only be there when the tooltip is open (e.g. `useDismiss`)
         */
        const [openLocal, setOpenLocal] = useState(false);
        const [getState, setState] = usePassiveState(useStableCallback((nextState, prevState) => {
            switch (nextState) {
                case "focused-popup":
                case "focused-trigger":
                    onStatus("focus");
                    break;
                case "hovering-popup":
                case "hovering-trigger":
                    onStatus("hover");
                    break;
                default:
                    onStatus(null);
                    break;
            }
            setOpenLocal(!!nextState);
        }), returnNull);
        let { propsReferencer: propsTrigger, propsSource: propsPopup } = useRandomId({ randomIdParameters: { prefix: Prefices.tooltip, otherReferencerProp: (tooltipSemanticType == "description" ? "aria-describedby" : "aria-labelledby") } });
        const { refElementReturn: { getElement: getTriggerElement, propsStable: triggerRefProps } } = useRefElement({ refElementParameters: {} });
        const { refElementReturn: { getElement: getPopupElement, propsStable: popupRefProps } } = useRefElement({ refElementParameters: {} });
        const stateIsMouse = T$1(() => (getState()?.startsWith("h") || false), []);
        const stateIsFocus = T$1(() => (getState()?.startsWith("f") || false), []);
        const onHoverChanged = T$1((hovering, which) => {
            if (hovering) {
                setState(`hovering-${which}`);
            }
            else {
                setState(null);
            }
        }, []);
        const onCurrentFocusedInnerChanged = T$1((focused, which) => {
            if (!stateIsMouse()) {
                if (focused) {
                    setState(`focused-${which}`);
                }
                else {
                    setState(null);
                }
            }
            else {
                setState(null);
            }
        }, [stateIsMouse]);
        const onTriggerCurrentFocusedInnerChanged = T$1((focused) => onCurrentFocusedInnerChanged(focused, "trigger"), [onCurrentFocusedInnerChanged]);
        const onPopupCurrentFocusedInnerChanged = T$1((focused) => onCurrentFocusedInnerChanged(focused, "popup"), [onCurrentFocusedInnerChanged]);
        const { hasCurrentFocusReturn: triggerFocusReturn } = useHasCurrentFocus({ hasCurrentFocusParameters: { onCurrentFocusedChanged: null, onCurrentFocusedInnerChanged: onTriggerCurrentFocusedInnerChanged }, refElementReturn: { getElement: getTriggerElement } });
        const { hasCurrentFocusReturn: popupFocusReturn } = useHasCurrentFocus({ hasCurrentFocusParameters: { onCurrentFocusedChanged: null, onCurrentFocusedInnerChanged: onPopupCurrentFocusedInnerChanged }, refElementReturn: { getElement: getPopupElement } });
        const { refElementPopupReturn, refElementSourceReturn } = useDismiss({
            dismissParameters: {
                closeOnBackdrop: false,
                closeOnLostFocus: false,
                closeOnEscape: true,
                open: openLocal,
                onClose: useStableCallback(() => {
                    setState(null);
                }),
            },
            escapeDismissParameters,
        });
        const otherPopupProps = {
            onPointerEnter: T$1(() => { onHoverChanged(true, "popup"); }, []),
            //onPointerLeave: useCallback(() => { onHoverChanged(false, "popup") }, [])
        };
        const otherTriggerProps = {
            onPointerEnter: T$1(() => { onHoverChanged(true, "trigger"); }, []),
            //onPointerLeave: useCallback(() => { onHoverChanged(false, "trigger") }, [])
        };
        useGlobalHandler(document, "pointermove", !openLocal ? null : (e => {
            const popupElement = getPopupElement();
            const triggerElement = getTriggerElement();
            const mouseElement = e.target;
            let overPopup = (popupElement?.contains(mouseElement));
            let overTrigger = (triggerElement?.contains(mouseElement));
            if (!overPopup && !overTrigger && stateIsMouse()) {
                onHoverChanged(false, "popup");
            }
        }), { capture: true, passive: true });
        return {
            propsPopup: useMergedProps(popupRefProps, propsPopup, popupFocusReturn.propsStable, { role: "tooltip" }, otherPopupProps, refElementPopupReturn.propsStable),
            propsTrigger: useMergedProps(triggerRefProps, propsTrigger, triggerFocusReturn.propsStable, { onClick: useStableCallback(e => e.currentTarget?.focus?.()) }, otherTriggerProps, refElementSourceReturn.propsStable),
            tooltipReturn: {
                getState,
                stateIsFocus,
                stateIsMouse
            }
        };
    }

    function memoForwardRef(fn) {
        return R(k(fn));
    }
    const ContextDefaults = {
        collator: G$1(null),
        pageNavigationSize: G$1(0.1),
        typeaheadTimeout: G$1(1000),
        noTypeahead: G$1(false),
        getIndex: G$1(v => v.props.index),
        disableArrowKeys: G$1(false),
        disableHomeEndKeys: G$1(false),
        getWindow: G$1(() => globalThis.window),
        focusOpener: G$1((e) => e?.focus?.()),
        getText: G$1((e) => (e?.textContent ?? "")),
        selectionMode: G$1("activation"),
    };
    function useDefault(context, userValue) {
        const defaultValue = q(ContextDefaults[context]);
        return userValue ?? defaultValue;
    }
    const ParentDepthContext = G$1(0);

    const AccordionSectionContext = G$1(null);
    const Accordion = memoForwardRef(function Accordion({ disableArrowKeys, disableHomeEndKeys, initialIndex, navigationDirection, onAfterChildLayoutEffect, onChildrenMountChange, navigatePastEnd, navigatePastStart, pageNavigationSize, localStorageKey, collator, noTypeahead, typeaheadTimeout, isValid, render, ..._rest }, ref) {
        const info = useAccordion({
            accordionParameters: { initialIndex, localStorageKey: localStorageKey ?? null },
            typeaheadNavigationParameters: {
                isValid: isValid || returnTrue,
                collator: useDefault("collator", collator),
                noTypeahead: useDefault("noTypeahead", noTypeahead),
                typeaheadTimeout: useDefault("typeaheadTimeout", typeaheadTimeout)
            },
            linearNavigationParameters: {
                disableArrowKeys: useDefault("disableArrowKeys", disableArrowKeys),
                disableHomeEndKeys: useDefault("disableHomeEndKeys", disableHomeEndKeys),
                navigationDirection,
                navigatePastEnd: navigatePastEnd ?? "wrap",
                navigatePastStart: navigatePastStart ?? "wrap",
                pageNavigationSize: useDefault("pageNavigationSize", pageNavigationSize)
            },
            managedChildrenParameters: { onAfterChildLayoutEffect, onChildrenMountChange }
        });
        A(ref, () => info);
        return (o$1(AccordionSectionContext.Provider, { value: info.context, children: render(info) }));
    });
    const AccordionSection = memoForwardRef(function AccordionSection({ open, index, tagButton, disabled, bodyRole, onPress, hidden, getText, render, }, ref) {
        const context = q(AccordionSectionContext);
        const info = useAccordionSection({
            buttonParameters: { disabled: disabled ?? false, tagButton, onPress: onPress ?? null },
            accordionSectionParameters: { open, bodyRole: bodyRole ?? "region" },
            managedChildParameters: { index, },
            rovingTabIndexChildParameters: { hidden: hidden ?? false },
            pressParameters: { allowRepeatPresses: false },
            refElementParameters: {},
            context,
            textContentParameters: {
                hidden: hidden || false,
                getText: useDefault("getText", getText)
            },
        });
        A(ref, () => info);
        return render(info);
    });

    const Button = memoForwardRef(function Button({ tagButton, onPress, pressed, render, disabled, onElementChange, onMount, onUnmount, allowRepeatPresses, longPressThreshold }, ref) {
        const info = useButton({
            buttonParameters: {
                role: "button",
                tagButton: tagButton,
                onPress: onPress ?? null,
                pressed,
                disabled: disabled ?? false
            },
            pressParameters: { longPressThreshold, allowRepeatPresses },
            refElementParameters: { onElementChange, onMount, onUnmount }
        });
        A(ref, () => info);
        return render(info);
    });

    function defaultRenderCheckboxLike({ labelPosition, tagInput, tagLabel, makePropsInput, makePropsLabel }) {
        return function (info) {
            const inputProps = (makePropsInput(info));
            const { children, ...labelProps } = (makePropsLabel(info));
            if (labelPosition == "wrapping") {
                const input = y$1(tagInput, inputProps);
                const label = y$1(tagLabel, { ...labelProps, children: o$1(_$2, { children: [input, children] }) });
                return (o$1(_$2, { children: label }));
            }
            else if (labelPosition == "separate") {
                const input = y$1(tagInput, inputProps);
                const label = y$1(tagLabel, { children, ...labelProps });
                return (o$1(_$2, { children: [input, label] }));
            }
            else {
                console.assert(!!inputProps["aria-label"]);
                return y$1(tagInput, inputProps);
            }
        };
    }
    const Checkbox = memoForwardRef(function Checkbox({ checked, disabled, tagLabel, labelPosition, tagInput, ariaLabel, onCheckedChange, render }, ref) {
        const { refElementReturn: refElementInputReturn } = useRefElement({ refElementParameters: {} });
        const { refElementReturn: refElementLabelReturn } = useRefElement({ refElementParameters: {} });
        const checkbox = useCheckbox({
            checkboxLikeParameters: { checked: checked ?? false, disabled: disabled ?? false },
            checkboxParameters: { onCheckedChange },
            labelParameters: { ariaLabel: ariaLabel, labelPosition, tagInput, tagLabel },
            refElementInputReturn,
            refElementLabelReturn,
            pressParameters: { excludeSpace: returnFalse }
        });
        A(ref, () => checkbox);
        return render(checkbox);
    });

    const UseCheckboxGroupChildContext = G$1(null);
    const CheckboxGroup = memoForwardRef(function CheckboxGroup({ render, collator, disableArrowKeys, disableHomeEndKeys, navigationDirection, noTypeahead, typeaheadTimeout, onTabbableIndexChange, compare, staggered, getIndex, untabbable, navigatePastEnd, navigatePastStart, pageNavigationSize, ..._rest }, ref) {
        const info = useCheckboxGroup({
            linearNavigationParameters: {
                disableArrowKeys: useDefault("disableArrowKeys", disableArrowKeys),
                disableHomeEndKeys: useDefault("disableHomeEndKeys", disableHomeEndKeys),
                navigatePastEnd: navigatePastEnd ?? "wrap",
                navigatePastStart: navigatePastStart ?? "wrap",
                navigationDirection,
                pageNavigationSize: useDefault("pageNavigationSize", pageNavigationSize)
            },
            staggeredChildrenParameters: { staggered: staggered || false },
            rearrangeableChildrenParameters: { getIndex: useDefault("getIndex", getIndex) },
            rovingTabIndexParameters: { onTabbableIndexChange: onTabbableIndexChange ?? null, untabbable: untabbable ?? false },
            sortableChildrenParameters: { compare: compare ?? null },
            typeaheadNavigationParameters: {
                collator: useDefault("collator", collator),
                noTypeahead: useDefault("noTypeahead", noTypeahead),
                typeaheadTimeout: useDefault("typeaheadTimeout", typeaheadTimeout)
            }
        });
        A(ref, () => info);
        return (o$1(UseCheckboxGroupChildContext.Provider, { value: info.context, children: render(info) }));
    });
    const CheckboxGroupParent = memoForwardRef(function CheckboxGroupParent({ render, index, focusSelf, hidden, getText, getSortValue, ..._rest }, ref) {
        const context = q(UseCheckboxGroupChildContext);
        console.assert(context != null, `This CheckboxGroupParent is not contained within a CheckboxGroup`);
        const info = useCheckboxGroupParent({
            completeListNavigationChildParameters: { focusSelf, checkboxInfo: { checkboxChildType: "parent" } },
            context,
            managedChildParameters: { index },
            rovingTabIndexChildParameters: { hidden: hidden ?? false },
            sortableChildParameters: { getSortValue },
            textContentParameters: { getText: useDefault("getText", getText) }
        });
        A(ref, () => info);
        return render(info);
    });
    const CheckboxGroupChild = memoForwardRef(function CheckboxGroupChild({ index, render, checked, onChangeFromParent, getSortValue, hidden, getText, focusSelf, ..._rest }, ref) {
        const context = q(UseCheckboxGroupChildContext);
        console.assert(context != null, `This CheckboxGroupChild is not contained within a CheckboxGroup`);
        const info = useCheckboxGroupChild({
            checkboxGroupChild: { checked, onChangeFromParent },
            completeListNavigationChildParameters: { focusSelf },
            textContentParameters: { getText: useDefault("getText", getText) },
            context,
            managedChildParameters: { index },
            rovingTabIndexChildParameters: { hidden: hidden ?? false },
            sortableChildParameters: { getSortValue },
        });
        A(ref, () => info);
        return render(info);
    });

    function defaultRenderPortal({ portalId, children }) {
        const portalRef = _(null);
        portalRef.current ??= document.getElementById(portalId);
        if (portalRef.current)
            return j(children, portalRef.current);
        else
            return children;
    }
    const Dialog = memoForwardRef(function Dialog({ onClose, open, closeOnBackdrop, closeOnEscape, focusOpener, getWindow, parentDepth, focusPopup, ariaLabel, render }, ref) {
        const defaultParentDepth = q(ParentDepthContext);
        let myDepth = (parentDepth ?? defaultParentDepth) + 1;
        const info = useDialog({
            dismissParameters: {
                closeOnBackdrop: closeOnBackdrop ?? true,
                closeOnEscape: closeOnEscape ?? true,
                onClose,
                open
            },
            escapeDismissParameters: {
                getWindow: useDefault("getWindow", getWindow),
                parentDepth: parentDepth ?? defaultParentDepth
            },
            focusTrapParameters: {
                focusOpener: useDefault("focusOpener", focusOpener),
                focusPopup
            },
            labelParameters: { ariaLabel }
        });
        A(ref, () => info);
        return (o$1(ParentDepthContext.Provider, { value: myDepth, children: render(info) }));
    });

    memoForwardRef(function Drawer({ closeOnBackdrop, closeOnEscape, closeOnLostFocus, focusOpener, focusPopup, getWindow, onClose, open, parentDepth, render, trapActive, ariaLabel, }, ref) {
        const defaultParentDepth = q(ParentDepthContext);
        let myDepth = (parentDepth ?? defaultParentDepth) + 1;
        const info = useDrawer({
            dismissParameters: {
                closeOnBackdrop: closeOnBackdrop ?? true,
                closeOnEscape: closeOnEscape ?? true,
                closeOnLostFocus: closeOnLostFocus ?? true,
                onClose,
                open
            },
            escapeDismissParameters: {
                getWindow: useDefault("getWindow", getWindow),
                parentDepth: parentDepth ?? defaultParentDepth
            },
            focusTrapParameters: {
                focusOpener: useDefault("focusOpener", focusOpener),
                focusPopup,
                trapActive: trapActive ?? false
            },
            labelParameters: { ariaLabel }
        });
        A(ref, () => info);
        return (o$1(ParentDepthContext.Provider, { value: myDepth, children: render(info) }));
    });

    const GridlistContext = G$1(null);
    const GridlistRowContext = G$1(null);
    const Gridlist = memoForwardRef(function GridlistU({ collator, disableArrowKeys, disableHomeEndKeys, noTypeahead, onTabbableIndexChange, groupingType, typeaheadTimeout, selectedIndex, navigatePastEnd, navigatePastStart, onSelectedIndexChange, pageNavigationSize, selectionLimit, untabbable, paginationMax, paginationMin, staggered, compare, getIndex, onTabbableColumnChange, ariaLabel, render }, ref) {
        const info = useGridlist({
            linearNavigationParameters: {
                disableArrowKeys: useDefault("disableArrowKeys", disableArrowKeys),
                disableHomeEndKeys: useDefault("disableHomeEndKeys", disableHomeEndKeys),
                navigatePastEnd: (navigatePastEnd ?? "wrap"),
                navigatePastStart: (navigatePastStart ?? "wrap"),
                pageNavigationSize: useDefault("pageNavigationSize", pageNavigationSize),
            },
            rovingTabIndexParameters: {
                onTabbableIndexChange: onTabbableIndexChange ?? null,
                untabbable: untabbable ?? false
            },
            staggeredChildrenParameters: { staggered: staggered || false },
            typeaheadNavigationParameters: {
                collator: useDefault("collator", collator),
                noTypeahead: useDefault("noTypeahead", noTypeahead),
                typeaheadTimeout: useDefault("typeaheadTimeout", typeaheadTimeout),
            },
            gridlistParameters: {
                selectionLimit,
                groupingType,
                selectedIndex,
                onSelectedIndexChange: onSelectedIndexChange ?? null
            },
            gridNavigationParameters: {
                onTabbableColumnChange: onTabbableColumnChange ?? null
            },
            labelParameters: {
                ariaLabel
            },
            rearrangeableChildrenParameters: {
                getIndex: useDefault("getIndex", getIndex)
            },
            sortableChildrenParameters: {
                compare: compare ?? null
            },
            paginatedChildrenParameters: {
                paginationMax: paginationMax ?? null,
                paginationMin: paginationMin ?? null
            }
        });
        A(ref, () => info);
        return (o$1(GridlistContext.Provider, { value: info.context, children: render(info) }));
    });
    const GridlistRow = memoForwardRef(function GridlistRowU({ index, collator, disableArrowKeys, ariaPropName, disabled, hidden, navigatePastEnd, navigatePastStart, noTypeahead, onTabbableIndexChange, selected, selectionMode, typeaheadTimeout, getSortValue, getText, render }, ref) {
        const context = q(GridlistContext);
        console.assert(context != null, `This GridlistRow is not contained within a Gridlist`);
        const info = useGridlistRow({
            rowAsChildOfGridParameters: {
                completeGridNavigationRowParameters: {},
                context,
                managedChildParameters: { index },
                gridlistRowParameters: { selected: selected ?? null },
                rovingTabIndexChildParameters: { hidden: hidden ?? false },
                sortableChildParameters: { getSortValue },
                singleSelectionChildParameters: { disabled: disabled ?? false, ariaPropName, selectionMode: useDefault("selectionMode", selectionMode) },
                textContentParameters: { getText: useDefault("getText", getText) }
            },
            rowAsParentOfCellsParameters: {
                linearNavigationParameters: {
                    disableArrowKeys: useDefault("disableArrowKeys", disableArrowKeys),
                    navigatePastEnd: navigatePastEnd ?? "wrap",
                    navigatePastStart: navigatePastStart ?? "wrap"
                },
                rovingTabIndexParameters: {
                    onTabbableIndexChange: onTabbableIndexChange ?? null
                },
                typeaheadNavigationParameters: {
                    collator: useDefault("collator", collator),
                    noTypeahead: useDefault("noTypeahead", noTypeahead),
                    typeaheadTimeout: useDefault("typeaheadTimeout", typeaheadTimeout)
                }
            },
        });
        A(ref, () => info);
        return o$1(GridlistRowContext.Provider, { value: info.context, children: render(info) });
    });
    const GridlistChild = memoForwardRef(function GridlistChild({ index, colSpan, focusSelf, hidden, getText, onPressSync, render, }, ref) {
        const context = q(GridlistRowContext);
        console.assert(context != null, `This GridlistChild is not contained within a GridlistRow that is contained within a Gridlist`);
        const defaultFocusSelf = useStableCallback((e) => { e.focus?.(); }, []);
        const info = useGridlistCell({
            completeGridNavigationCellParameters: { focusSelf: (focusSelf ?? defaultFocusSelf) },
            context,
            gridNavigationCellParameters: { colSpan: colSpan ?? 1 },
            textContentParameters: { getText: useDefault("getText", getText) },
            managedChildParameters: { index },
            pressParameters: { onPressSync },
            rovingTabIndexChildParameters: { hidden: hidden ?? false }
        });
        A(ref, () => info);
        return render(info);
    });

    function useListbox({ linearNavigationParameters, rearrangeableChildrenParameters, rovingTabIndexParameters, sortableChildrenParameters, typeaheadNavigationParameters, paginatedChildrenParameters, labelParameters, staggeredChildrenParameters, listboxParameters: { selectionLimit, groupingType, selectedIndex, onSelectedIndexChange } }) {
        useEnsureStability("useListbox", selectionLimit);
        const { propsInput: propsLabelList, propsLabel: propsLabelLabel, randomIdInputReturn: { id: _inputId }, randomIdLabelReturn: { id: _labelId } } = useLabelSynthetic({
            labelParameters: {
                ...labelParameters,
                onLabelClick: useStableCallback(() => {
                    rovingTabIndexReturn.focusSelf();
                })
            },
            randomIdInputParameters: { prefix: Prefices.listbox },
            randomIdLabelParameters: { prefix: Prefices.listboxLabel }
        });
        let { childrenHaveFocusReturn, context, linearNavigationReturn, managedChildrenReturn, props, paginatedChildrenReturn, rearrangeableChildrenReturn, rovingTabIndexReturn, staggeredChildrenReturn, singleSelectionReturn, sortableChildrenReturn, typeaheadNavigationReturn } = useCompleteListNavigation({
            linearNavigationParameters,
            rearrangeableChildrenParameters,
            rovingTabIndexParameters,
            singleSelectionParameters: { initiallySelectedIndex: selectedIndex, onSelectedIndexChange },
            sortableChildrenParameters,
            paginatedChildrenParameters,
            typeaheadNavigationParameters,
            staggeredChildrenParameters
        });
        useSingleSelectionDeclarative({
            singleSelectionDeclarativeParameters: { selectedIndex },
            singleSelectionReturn: { changeSelectedIndex: singleSelectionReturn.changeSelectedIndex }
        });
        if (groupingType == "group")
            props.role = "group";
        else if (groupingType == "with-groups") {
            // Intentionally clobbering all the list navigation stuff.
            props = { role: "listbox" };
            // ...actually, context too while we're at it.
            context = null;
        }
        else {
            props.role = "listbox";
        }
        if (selectionLimit == "multi")
            console.assert(singleSelectionReturn.getSelectedIndex() == null);
        return {
            childrenHaveFocusReturn,
            context: useStableObject({
                ...context,
                listboxContext: useStableObject({
                    selectionLimit
                })
            }),
            linearNavigationReturn,
            paginatedChildrenReturn,
            managedChildrenReturn,
            rearrangeableChildrenReturn,
            staggeredChildrenReturn,
            rovingTabIndexReturn,
            singleSelectionReturn,
            sortableChildrenReturn,
            typeaheadNavigationReturn,
            propsListbox: useMergedProps(props, propsLabelList, { "aria-multiselectable": (selectionLimit == "multi" ? "true" : undefined) }),
            propsListboxLabel: propsLabelLabel
        };
    }
    function useListboxItem({ completeListNavigationChildParameters, context: { listboxContext: { selectionLimit }, ...context }, managedChildParameters, singleSelectionChildParameters, rovingTabIndexChildParameters, sortableChildParameters, textContentParameters, listboxParameters: { selected }, pressParameters: { onPressSync: opsu }, }) {
        const { hasCurrentFocusReturn, managedChildReturn, pressParameters: { excludeSpace, onPressSync: opsss }, props, paginatedChildReturn, rovingTabIndexChildReturn, staggeredChildReturn, singleSelectionChildReturn, refElementReturn } = useCompleteListNavigationChild({
            completeListNavigationChildParameters,
            textContentParameters,
            managedChildParameters,
            singleSelectionChildParameters,
            rovingTabIndexChildParameters,
            sortableChildParameters,
            context
        });
        const { pressReturn } = usePress({
            refElementReturn, pressParameters: {
                onPressSync: useStableCallback((e) => {
                    if (selectionLimit == "single")
                        opsss?.(e);
                    opsu?.(e);
                }),
                excludeSpace,
                focusSelf: e => e?.focus?.()
            }
        });
        if (selectionLimit == "single")
            console.assert(selected == null);
        props.role = "option";
        return {
            hasCurrentFocusReturn,
            managedChildReturn,
            pressReturn,
            refElementReturn,
            props: useMergedProps(props, pressReturn.propsUnstable),
            paginatedChildReturn,
            rovingTabIndexChildReturn,
            singleSelectionChildReturn,
            staggeredChildReturn
        };
    }

    const ListboxContext = G$1(null);
    const ListboxGroupContext = G$1(null);
    const GroupedListbox = R(function GroupedListbox({ ariaLabel, selectionLimit, navigationDirection, render }) {
        const info = useListbox({
            labelParameters: { ariaLabel },
            linearNavigationParameters: {
                navigatePastEnd: "passthrough",
                navigatePastStart: "passthrough",
                navigationDirection,
                disableArrowKeys: false,
                disableHomeEndKeys: true,
                pageNavigationSize: 1
            },
            staggeredChildrenParameters: { staggered: false },
            paginatedChildrenParameters: { paginationMax: null, paginationMin: null },
            listboxParameters: { selectionLimit, groupingType: "with-groups", selectedIndex: null, onSelectedIndexChange: null },
            rearrangeableChildrenParameters: { getIndex: useDefault("getIndex", undefined) },
            rovingTabIndexParameters: { onTabbableIndexChange: null, untabbable: false },
            sortableChildrenParameters: { compare: null },
            typeaheadNavigationParameters: {
                collator: null,
                noTypeahead: true,
                typeaheadTimeout: Infinity
            }
        });
        info.context;
        return (o$1(ListboxGroupContext.Provider, { value: info, children: render(info) }));
    });
    const Listbox = memoForwardRef(function Listbox({ ariaLabel, collator, compare, disableArrowKeys, disableHomeEndKeys, getIndex, selectedIndex, navigatePastEnd, navigatePastStart, navigationDirection, noTypeahead, onSelectedIndexChange, onTabbableIndexChange, staggered, pageNavigationSize, paginationMax, paginationMin, selectionLimit, untabbable, typeaheadTimeout, render }) {
        const listboxGroupInfo = q(ListboxGroupContext);
        const info = useListbox({
            labelParameters: { ariaLabel },
            staggeredChildrenParameters: {
                staggered: staggered || false
            },
            linearNavigationParameters: {
                navigatePastEnd: navigatePastEnd ?? "wrap",
                navigatePastStart: navigatePastStart ?? "wrap",
                navigationDirection,
                disableArrowKeys: useDefault("disableArrowKeys", disableArrowKeys),
                disableHomeEndKeys: useDefault("disableHomeEndKeys", disableHomeEndKeys),
                pageNavigationSize: useDefault("pageNavigationSize", pageNavigationSize)
            },
            paginatedChildrenParameters: {
                paginationMax: paginationMax ?? null,
                paginationMin: paginationMin ?? null
            },
            listboxParameters: { selectionLimit, groupingType: listboxGroupInfo == null ? "without-groups" : "group", selectedIndex, onSelectedIndexChange: onSelectedIndexChange ?? null },
            rearrangeableChildrenParameters: { getIndex: useDefault("getIndex", getIndex) },
            rovingTabIndexParameters: { onTabbableIndexChange: onTabbableIndexChange ?? null, untabbable: untabbable ?? false },
            sortableChildrenParameters: { compare: compare ?? null },
            typeaheadNavigationParameters: {
                collator: useDefault("collator", collator),
                noTypeahead: useDefault("noTypeahead", noTypeahead),
                typeaheadTimeout: useDefault("typeaheadTimeout", typeaheadTimeout)
            }
        });
        return (o$1(ListboxContext.Provider, { value: info.context, children: render(info) }));
    });
    const ListboxItem = memoForwardRef(function ListboxItem({ ariaPropName, disabled, focusSelf, onPressSync, getText, hidden, index, render, selected, selectionMode, getSortValue }) {
        const context = q(ListboxContext);
        console.assert(context != null, `This ListboxItem is not contained within a Listbox`);
        const focusSelfDefault = T$1((e) => { e?.focus(); }, []);
        const info = useListboxItem({
            completeListNavigationChildParameters: { focusSelf: focusSelf ?? focusSelfDefault },
            context,
            listboxParameters: { selected: selected ?? null, },
            pressParameters: { onPressSync },
            managedChildParameters: { index },
            rovingTabIndexChildParameters: { hidden: hidden ?? false },
            sortableChildParameters: { getSortValue: getSortValue },
            textContentParameters: { getText: useDefault("getText", getText) },
            singleSelectionChildParameters: {
                disabled: disabled ?? false,
                ariaPropName,
                selectionMode: useDefault("selectionMode", selectionMode)
            }
        });
        return render(info);
    });

    const MenuItemContext = G$1(null);
    const Menu = memoForwardRef(function Menu({ collator, disableArrowKeys, disableHomeEndKeys, noTypeahead, typeaheadTimeout, orientation, onClose, open, openDirection, onTabbableIndexChange, closeOnBackdrop, closeOnEscape, closeOnLostFocus, compare, getIndex, selectedIndex, navigatePastEnd, navigatePastStart, onSelectedIndexChange, pageNavigationSize, parentDepth, untabbable, staggered, onOpen, getWindow, render }, ref) {
        const defaultParentDepth = q(ParentDepthContext);
        let myDepth = (parentDepth ?? defaultParentDepth) + 1;
        const info = useMenu({
            linearNavigationParameters: {
                disableArrowKeys: useDefault("disableArrowKeys", disableArrowKeys),
                disableHomeEndKeys: useDefault("disableHomeEndKeys", disableHomeEndKeys),
                pageNavigationSize: useDefault("pageNavigationSize", pageNavigationSize),
                navigatePastEnd: navigatePastEnd ?? "wrap",
                navigatePastStart: navigatePastStart ?? "wrap"
            },
            staggeredChildrenParameters: {
                staggered: staggered || false
            },
            dismissParameters: {
                closeOnBackdrop: closeOnBackdrop ?? true,
                closeOnEscape: closeOnEscape ?? true,
                closeOnLostFocus: closeOnLostFocus ?? true,
                onClose,
                open
            },
            escapeDismissParameters: {
                getWindow: useDefault("getWindow", getWindow),
                parentDepth: parentDepth ?? defaultParentDepth
            },
            rearrangeableChildrenParameters: { getIndex: useDefault("getIndex", getIndex) },
            sortableChildrenParameters: { compare: compare ?? null },
            menuParameters: { openDirection, onOpen },
            menuSurfaceParameters: {},
            rovingTabIndexParameters: {
                onTabbableIndexChange: onTabbableIndexChange ?? null,
                untabbable: untabbable ?? false
            },
            typeaheadNavigationParameters: {
                collator: useDefault("collator", collator),
                noTypeahead: useDefault("noTypeahead", noTypeahead),
                typeaheadTimeout: useDefault("typeaheadTimeout", typeaheadTimeout)
            },
            singleSelectionDeclarativeParameters: { selectedIndex: selectedIndex ?? null },
            toolbarParameters: { orientation, onSelectedIndexChange: onSelectedIndexChange ?? null },
            menubarParameters: {}
        });
        A(ref, () => info);
        return (o$1(ParentDepthContext.Provider, { value: myDepth, children: o$1(MenuItemContext.Provider, { value: info.context, children: render(info) }) }));
    });
    const MenuItem = memoForwardRef(function MenuItem({ index, hidden, getSortValue, onPress, getText, role, focusSelf, ariaPropName, selectionMode, disabled, render }, ref) {
        const context = q(MenuItemContext);
        console.assert(context != null, `This MenuItem is not contained within a Menubar/Menu`);
        const defaultFocusSelf = T$1((e) => e?.focus?.(), []);
        const info = useMenuItem({
            completeListNavigationChildParameters: { focusSelf: focusSelf ?? defaultFocusSelf },
            context,
            managedChildParameters: { index },
            rovingTabIndexChildParameters: { hidden: hidden ?? false },
            sortableChildParameters: { getSortValue },
            textContentParameters: { getText: useDefault("getText", getText) },
            menuItemParameters: { onPress: onPress ?? null, role: role ?? "menuitem" },
            singleSelectionChildParameters: { ariaPropName, selectionMode, disabled: disabled ?? false }
        });
        A(ref, () => info);
        return (o$1(_$2, { children: render(info) }));
    });

    const MenubarItemContext = G$1(null);
    memoForwardRef(function MenubarU({ render, collator, disableArrowKeys, disableHomeEndKeys, navigatePastEnd, navigatePastStart, pageNavigationSize, orientation, staggered, noTypeahead, onTabbableIndexChange, compare, getIndex, untabbable, selectedIndex, onSelectedIndexChange, typeaheadTimeout, role, ariaLabel }, ref) {
        const info = useMenubar({
            linearNavigationParameters: {
                disableArrowKeys: useDefault("disableArrowKeys", disableArrowKeys),
                disableHomeEndKeys: useDefault("disableHomeEndKeys", disableHomeEndKeys),
                navigatePastEnd: navigatePastEnd ?? "wrap",
                navigatePastStart: navigatePastStart ?? "wrap",
                pageNavigationSize: useDefault("pageNavigationSize", pageNavigationSize)
            },
            toolbarParameters: { orientation, onSelectedIndexChange: onSelectedIndexChange ?? null },
            rovingTabIndexParameters: { onTabbableIndexChange: onTabbableIndexChange ?? null, untabbable: untabbable ?? false },
            typeaheadNavigationParameters: {
                collator: useDefault("collator", collator),
                noTypeahead: useDefault("noTypeahead", noTypeahead),
                typeaheadTimeout: useDefault("typeaheadTimeout", typeaheadTimeout)
            },
            rearrangeableChildrenParameters: { getIndex: useDefault("getIndex", getIndex) },
            staggeredChildrenParameters: { staggered: staggered || false },
            singleSelectionDeclarativeParameters: { selectedIndex: selectedIndex ?? null },
            sortableChildrenParameters: { compare: compare ?? null },
            menubarParameters: { role: role ?? "menubar" },
            labelParameters: { ariaLabel }
        });
        A(ref, () => info);
        return (o$1(MenubarItemContext.Provider, { value: info.context, children: render(info) }));
    });
    memoForwardRef(function MenuItemU({ index, render, ariaPropName, focusSelf, selectionMode, hidden, getText, disabled, onPress, getSortValue, role, }, ref) {
        const context = (q(MenubarItemContext));
        console.assert(context != null, `This MenuItem is not contained within a Menubar/Menu`);
        const defaultFocusSelf = T$1((e) => e?.focus?.(), []);
        const info = useMenubarChild({
            completeListNavigationChildParameters: { focusSelf: focusSelf ?? defaultFocusSelf },
            context,
            managedChildParameters: { index },
            rovingTabIndexChildParameters: { hidden: hidden ?? false },
            sortableChildParameters: { getSortValue },
            textContentParameters: { getText: useDefault("getText", getText) },
            menuItemParameters: { onPress: onPress ?? null, role: role ?? "menuitem" },
            singleSelectionChildParameters: { ariaPropName, selectionMode, disabled: disabled ?? false }
        });
        A(ref, () => info);
        return (o$1(_$2, { children: render(info) }));
    });

    memoForwardRef(function Progress({ tagIndicator, ariaLabel, max, render, value, valueText }, ref) {
        const info = useProgress({
            labelParameters: { ariaLabel },
            progressIndicatorParameters: {
                max: max ?? 100,
                value: value ?? "indeterminate",
                valueText: valueText ?? null,
                tagIndicator
            }
        });
        A(ref, () => info);
        return render(info);
    });
    memoForwardRef(function ProgressWithHandler({ ariaLabel, forciblyPending, render, tagIndicator, asyncHandler, capture, debounce, throttle }, ref) {
        const info = useProgressWithHandler({
            asyncHandlerParameters: { asyncHandler, capture, debounce, throttle },
            labelParameters: { ariaLabel },
            progressIndicatorParameters: { tagIndicator },
            progressWithHandlerParameters: { forciblyPending: forciblyPending ?? false }
        });
        A(ref, () => info);
        return (render(info));
    });

    const RadioContext = G$1(null);
    const RadioGroup = memoForwardRef(function RadioGroup({ render, name, onSelectedValueChange, collator, disableArrowKeys, disableHomeEndKeys, navigationDirection, noTypeahead, typeaheadTimeout, ariaLabel, compare, staggered, getIndex, navigatePastEnd, navigatePastStart, selectedValue, untabbable, onTabbableIndexChange, pageNavigationSize, }, ref) {
        const info = useRadioGroup({
            linearNavigationParameters: {
                navigationDirection,
                navigatePastEnd: navigatePastEnd ?? "wrap",
                navigatePastStart: navigatePastStart ?? "wrap",
                disableArrowKeys: useDefault("disableArrowKeys", disableArrowKeys),
                disableHomeEndKeys: useDefault("disableHomeEndKeys", disableHomeEndKeys),
                pageNavigationSize: useDefault("pageNavigationSize", pageNavigationSize)
            },
            staggeredChildrenParameters: { staggered: staggered || false },
            labelParameters: { ariaLabel },
            rearrangeableChildrenParameters: { getIndex: useDefault("getIndex", getIndex) },
            sortableChildrenParameters: { compare: compare ?? null },
            radioGroupParameters: { name, onSelectedValueChange, selectedValue },
            rovingTabIndexParameters: {
                onTabbableIndexChange: onTabbableIndexChange ?? null,
                untabbable: untabbable ?? false
            },
            typeaheadNavigationParameters: {
                collator: useDefault("collator", collator),
                noTypeahead: useDefault("noTypeahead", noTypeahead),
                typeaheadTimeout: useDefault("typeaheadTimeout", typeaheadTimeout)
            },
        });
        A(ref, () => info);
        return (o$1(RadioContext.Provider, { value: info.context, children: render(info) }));
    });
    const Radio = memoForwardRef(function Radio({ disabled, index, render, value, ariaLabel, focusSelf, labelPosition, hidden, tagInput, tagLabel, getText }, ref) {
        const context = q(RadioContext);
        console.assert(context != null, `This Radio is not contained within a RadioGroup`);
        const getValue = useStableGetter(value);
        const defaultFocusSelf = () => info.checkboxLikeReturn.focusSelf();
        const info = useRadio({
            managedChildParameters: { index },
            rovingTabIndexChildParameters: { hidden: hidden ?? false },
            sortableChildParameters: { getSortValue: getValue },
            radioParameters: { value },
            checkboxLikeParameters: { disabled: disabled ?? false },
            completeListNavigationChildParameters: { focusSelf: focusSelf ?? defaultFocusSelf },
            context,
            labelParameters: { ariaLabel, labelPosition, tagInput, tagLabel },
            singleSelectionChildParameters: { disabled: !!disabled },
            textContentParameters: { getText: useDefault("getText", getText) }
        });
        A(ref, () => info);
        return render(info);
    });

    const SliderThumbContext = G$1(null);
    const Slider = memoForwardRef(function Slider({ max, min, onAfterChildLayoutEffect, onChildrenMountChange, children }, ref) {
        const info = useSlider({
            managedChildrenParameters: { onAfterChildLayoutEffect, onChildrenMountChange },
            sliderParameters: { max, min }
        });
        A(ref, () => info);
        return (o$1(SliderThumbContext.Provider, { value: info.context, children: children }));
    });
    const SliderThumb = memoForwardRef(function SliderThumbU({ label, tag, value, max, min, onValueChange, index, render, valueText }, ref) {
        const context = q(SliderThumbContext);
        console.assert(context != null, `This SliderThumb is not contained within a Slider`);
        const info = useSliderThumb({
            context,
            managedChildParameters: { index },
            sliderThumbParameters: { label, tag, value, max, min, onValueChange, valueText },
        });
        A(ref, () => info);
        return render(info);
    });

    const TableContext = G$1(null);
    const TableSectionContext = G$1(null);
    const TableRowContext = G$1(null);
    const Table = memoForwardRef(function TableU({ ariaLabel, selectionLimit, tagTable, render }, ref) {
        const info = useTable({
            labelParameters: { ariaLabel },
            tableParameters: { selectionLimit, tagTable }
        });
        A(ref, () => info);
        return o$1(TableContext.Provider, { value: info.context, children: render(info) });
    });
    const TableSection = memoForwardRef(function TableSection({ disableArrowKeys, disableHomeEndKeys, getIndex, initiallySelectedIndex, untabbable, navigatePastEnd, navigatePastStart, onSelectedIndexChange, onTabbableColumnChange, onTabbableIndexChange, pageNavigationSize, paginationMax, paginationMin, staggered, render, location, tagTableSection }) {
        const info = useTableSection({
            gridNavigationParameters: { onTabbableColumnChange: onTabbableColumnChange ?? null },
            staggeredChildrenParameters: { staggered: staggered || false },
            linearNavigationParameters: {
                disableArrowKeys: useDefault("disableArrowKeys", disableArrowKeys),
                disableHomeEndKeys: useDefault("disableHomeEndKeys", disableHomeEndKeys),
                navigatePastEnd: navigatePastEnd ?? "wrap",
                navigatePastStart: navigatePastStart ?? "wrap",
                pageNavigationSize: useDefault("pageNavigationSize", pageNavigationSize)
            },
            paginatedChildrenParameters: {
                paginationMax: paginationMax ?? null,
                paginationMin: paginationMin ?? null
            },
            rearrangeableChildrenParameters: { getIndex: useDefault("getIndex", getIndex) },
            rovingTabIndexParameters: { onTabbableIndexChange: onTabbableIndexChange ?? null, untabbable: untabbable ?? false },
            singleSelectionParameters: { initiallySelectedIndex: initiallySelectedIndex ?? null, onSelectedIndexChange: onSelectedIndexChange ?? null },
            context: q(TableContext),
            tableSectionParameters: { tagTableSection, location },
        });
        return (o$1(TableSectionContext.Provider, { value: info.context, children: render(info) }));
    });
    const TableRow = memoForwardRef(function TableRowU({ index, getText, tagTableRow, disableArrowKeys, disableHomeEndKeys, onTabbableIndexChange, ariaPropName, disabled, navigatePastEnd, navigatePastStart, selected, selectionMode, hidden, render }, ref) {
        const cx1 = q(TableSectionContext);
        console.assert(cx1 != null, `This TableRow is not contained within a TableSection`);
        const info = useTableRow({
            rowAsChildOfGridParameters: {
                completeGridNavigationRowParameters: {},
                context: cx1,
                managedChildParameters: { index },
                rovingTabIndexChildParameters: { hidden: hidden ?? false },
                singleSelectionChildParameters: {
                    ariaPropName,
                    selectionMode: useDefault("selectionMode", selectionMode),
                    disabled: disabled ?? false
                },
                textContentParameters: {
                    getText: useDefault("getText", getText)
                }
            },
            rowAsParentOfCellsParameters: {
                linearNavigationParameters: {
                    disableArrowKeys: useDefault("disableArrowKeys", disableArrowKeys),
                    disableHomeEndKeys: useDefault("disableHomeEndKeys", disableHomeEndKeys),
                    navigatePastEnd: navigatePastEnd ?? "wrap",
                    navigatePastStart: navigatePastStart ?? "wrap"
                },
                rovingTabIndexParameters: { onTabbableIndexChange: onTabbableIndexChange ?? null }
            },
            tableRowParameters: {
                selected: selected ?? null,
                tagTableRow
            }
        });
        A(ref, () => info);
        return o$1(TableRowContext.Provider, { value: info.context, children: render(info) });
    });
    const TableCell = memoForwardRef(function TableCell({ index, getText, focusSelf, hidden, tagTableCell, render, colSpan, getSortValue }, ref) {
        const context = q(TableRowContext);
        console.assert(context != null, `This TableCell is not contained within a TableRow`);
        const defaultFocusSelf = useStableCallback((e) => { e.focus?.(); }, []);
        const info = useTableCell({
            completeGridNavigationCellParameters: { getSortValue, focusSelf: focusSelf ?? defaultFocusSelf },
            context,
            gridNavigationCellParameters: { colSpan: colSpan ?? 1 },
            managedChildParameters: { index },
            rovingTabIndexChildParameters: { hidden: hidden ?? false },
            tableCellParameters: { tagTableCell },
            textContentParameters: { getText: useDefault("getText", getText) }
        });
        A(ref, () => info);
        return render(info);
    });

    const TabsContext = G$1(null);
    const TabPanelsContext = G$1(null);
    const Tabs = memoForwardRef(function Tabs({ ariaLabel, collator, compare, disableArrowKeys, disableHomeEndKeys, getIndex, initiallySelectedIndex, navigatePastEnd, navigatePastStart, noTypeahead, onSelectedIndexChange, onTabbableIndexChange, orientation, staggered, pageNavigationSize, localStorageKey, 
    //groupingType,
    untabbable, typeaheadTimeout, role, render }, ref) {
        const info = useTabs({
            labelParameters: { ariaLabel },
            staggeredChildrenParameters: { staggered: staggered || false },
            linearNavigationParameters: {
                disableArrowKeys: useDefault("disableArrowKeys", disableArrowKeys),
                disableHomeEndKeys: useDefault("disableHomeEndKeys", disableHomeEndKeys),
                navigatePastEnd: navigatePastEnd ?? "wrap",
                navigatePastStart: navigatePastStart ?? "wrap",
                pageNavigationSize: useDefault("pageNavigationSize", pageNavigationSize)
            },
            rearrangeableChildrenParameters: { getIndex: useDefault("getIndex", getIndex) },
            rovingTabIndexParameters: {
                onTabbableIndexChange: onTabbableIndexChange ?? null,
                untabbable: untabbable ?? false
            },
            singleSelectionParameters: { initiallySelectedIndex: initiallySelectedIndex ?? 0, onSelectedIndexChange: onSelectedIndexChange ?? null },
            sortableChildrenParameters: { compare: compare ?? null },
            tabsParameters: { orientation, role, localStorageKey: localStorageKey ?? null },
            typeaheadNavigationParameters: {
                collator: useDefault("collator", collator),
                noTypeahead: useDefault("noTypeahead", noTypeahead),
                typeaheadTimeout: useDefault("typeaheadTimeout", typeaheadTimeout)
            }
        });
        const { contextPanels, contextTabs } = info;
        A(ref, () => info);
        return (o$1(TabsContext.Provider, { value: contextTabs, children: o$1(TabPanelsContext.Provider, { value: contextPanels, children: render(info) }) }));
    });
    const Tab = memoForwardRef(function Tab({ disabled, focusSelf, hidden, index, getText, getSortValue, render }, ref) {
        const context = q(TabsContext);
        console.assert(context != null, `This Tab is not contained within a Tabs component`);
        const focusSelfDefault = T$1((e) => { e?.focus(); }, []);
        const info = useTab({
            completeListNavigationChildParameters: { focusSelf: focusSelf ?? focusSelfDefault },
            context,
            rovingTabIndexChildParameters: { hidden: hidden ?? false },
            sortableChildParameters: { getSortValue },
            managedChildParameters: { index },
            singleSelectionChildParameters: { disabled: disabled ?? false, selectionMode: "focus" },
            textContentParameters: { getText: useDefault("getText", getText) }
        });
        A(ref, () => info);
        return render(info);
    });
    function TabPanel({ index, render }) {
        const context = q(TabPanelsContext);
        const info = useTabPanel({
            context,
            managedChildParameters: { index }
        });
        return render(info);
    }

    const ToastContext = G$1(null);
    const Toasts = memoForwardRef(function Toasts({ onAfterChildLayoutEffect, onChildrenMountChange, render, visibleCount }, ref) {
        const info = useToasts({ managedChildrenParameters: { onAfterChildLayoutEffect, onChildrenMountChange }, toastsParameters: { visibleCount } });
        A(ref, () => info);
        return (o$1(ToastContext.Provider, { value: info.context, children: render(info) }));
    });
    const Toast = memoForwardRef(function Toast({ render, index, timeout, politeness, children }, ref) {
        const context = q(ToastContext);
        console.assert(context != null, `This Toast was not rendered within a Toasts provider`);
        const info = useToast({
            managedChildParameters: { index },
            toastParameters: { timeout, politeness, children },
            context
        });
        A(ref, () => info);
        return render(info);
    });

    const ToolbarContext = G$1(null);
    const Toolbar = memoForwardRef(function ToolbarU({ render, role, collator, disableArrowKeys, disableHomeEndKeys, untabbable, compare, getIndex, navigatePastEnd, navigatePastStart, pageNavigationSize, selectedIndex, onSelectedIndexChange, orientation, noTypeahead, onTabbableIndexChange, typeaheadTimeout, staggered, ariaLabel }, ref) {
        const listboxReturnType = useToolbar({
            rearrangeableChildrenParameters: { getIndex: useDefault("getIndex", getIndex) },
            singleSelectionDeclarativeParameters: { selectedIndex: selectedIndex ?? null },
            sortableChildrenParameters: { compare: compare ?? null },
            linearNavigationParameters: {
                disableArrowKeys: useDefault("disableArrowKeys", disableArrowKeys),
                disableHomeEndKeys: useDefault("disableHomeEndKeys", disableHomeEndKeys),
                navigatePastEnd: navigatePastEnd ?? "wrap",
                navigatePastStart: navigatePastStart ?? "wrap",
                pageNavigationSize: useDefault("pageNavigationSize", pageNavigationSize)
            },
            toolbarParameters: {
                orientation,
                role: role ?? "toolbar",
                onSelectedIndexChange: onSelectedIndexChange ?? null
            },
            staggeredChildrenParameters: { staggered: staggered || false },
            rovingTabIndexParameters: { onTabbableIndexChange: onTabbableIndexChange ?? null, untabbable: untabbable || false },
            typeaheadNavigationParameters: {
                collator: useDefault("collator", collator),
                noTypeahead: useDefault("noTypeahead", noTypeahead),
                typeaheadTimeout: useDefault("typeaheadTimeout", typeaheadTimeout)
            },
            labelParameters: { ariaLabel }
        });
        A(ref, () => listboxReturnType);
        return (o$1(ToolbarContext.Provider, { value: listboxReturnType.context, children: render(listboxReturnType) }));
    });
    const ToolbarChild = memoForwardRef(function ToolbarChildU({ index, render, ariaPropName, disabled, selectionMode, focusSelf, getSortValue, hidden, getText }, ref) {
        const context = q(ToolbarContext);
        console.assert(context != null, `This ToolbarChild is not contained within a Toolbar`);
        const focusSelfDefault = T$1((e) => { e?.focus(); }, []);
        const info = useToolbarChild({
            context,
            completeListNavigationChildParameters: { focusSelf: focusSelf ?? focusSelfDefault },
            managedChildParameters: { index },
            rovingTabIndexChildParameters: { hidden: hidden ?? false },
            sortableChildParameters: { getSortValue },
            singleSelectionChildParameters: { ariaPropName, selectionMode, disabled: disabled ?? false },
            textContentParameters: { getText: useDefault("getText", getText) },
        });
        A(ref, () => info);
        return (o$1(_$2, { children: render(info) }));
    });

    const Tooltip = memoForwardRef(function TooltipU({ onStatus, getWindow, parentDepth, render, tooltipSemanticType }, ref) {
        const defaultParentDepth = q(ParentDepthContext);
        let myDepth = (parentDepth ?? defaultParentDepth) + 1;
        const info = useTooltip({
            escapeDismissParameters: {
                getWindow: useDefault("getWindow", getWindow),
                parentDepth: parentDepth ?? defaultParentDepth
            },
            tooltipParameters: {
                onStatus,
                tooltipSemanticType
            }
        });
        A(ref, () => info);
        return (o$1(ParentDepthContext.Provider, { value: myDepth, children: render(info) }));
    });

    function DemoAccordion({ children }) {
        return o$1(Accordion, { navigationDirection: "vertical", render: (_info) => { return o$1("div", { id: "accordion-demo", children: children }); } });
    }
    const DemoAccordionSection = R(function DemoAccordionSection({ index, body, heading, disabled, open }) {
        return o$1(AccordionSection, { index: index, tagButton: "button", open: open, disabled: disabled, render: info => (o$1(Heading, { ...info.propsHeader, tag: "div", heading: o$1(_$2, { children: [o$1("span", { children: heading }), o$1("button", { ...info.propsHeaderButton, children: "Toggle open" })] }), children: o$1("p", { ...info.propsBody, hidden: !info.accordionSectionReturn.expanded, children: body }) })) });
    });
    function Blurb$f() {
        return (o$1(_$2, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/accordion/", children: "In accordance with the ARIA guidelines for Accordion patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: ["Each section's header and body are linked via ID; the body is ", o$1("code", { children: "labelled-by" }), " the header and the header ", o$1("code", { children: "control" }), "s the body."] }), o$1("li", { children: "The header is a button and responds to keyboard, mouse, touch, etc. events, regardless of the element used." }), o$1("li", { children: ["If the header element is not a ", o$1("code", { children: "<button>" }), " element, it is given that ", o$1("code", { children: "role" }), "."] }), o$1("li", { children: "Up/down & Home/End keys navigate through the list, as does Tab and Shift+Tab" }), o$1("li", {})] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: o$1("li", { children: ["The ", o$1("code", { children: "render" }), " prop each ", o$1("code", { children: "AccordionSection" }), " takes must wrap the header button with a ", o$1("a", { href: "https://w3c.github.io/aria/#heading", children: "heading" }), " (e.g. ", o$1("code", { children: "h3" }), ", or ", o$1("code", { children: "<Heading>" }), "). See the default implementation for an example."] }) })] }));
    }
    function Code$f() {
        return (o$1("code", { children: `<Accordion render={...}>
    <AccordionSection index={0} render={...} />
    <AccordionSection index={1} render={...} />
    <AccordionSection index={2} render={...} />
</Accordion>` }));
    }
    function Demo$f() {
        const [count, setCount] = p(5);
        return (o$1(_$2, { children: [o$1(Blurb$f, {}), o$1(Code$f, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of accordion sections"] }), o$1(DemoAccordion, { children: o$1(_$2, { children: Array.from((function* () {
                            yield o$1(DemoAccordionSection, { index: 0, heading: "Accordion section #0", body: "Body content #0", disabled: false });
                            yield o$1(DemoAccordionSection, { index: 1, heading: "Accordion section #1", body: "Body content #1", disabled: false });
                            yield o$1(DemoAccordionSection, { index: 2, heading: "Accordion section #2 (disabled)", body: "Body content #2", disabled: true });
                            yield o$1(DemoAccordionSection, { index: 3, heading: "Accordion section #3 (forced open)", body: "Body content #3", disabled: false, open: true });
                            yield o$1(DemoAccordionSection, { index: 4, heading: "Accordion section #4 (forced closed)", body: "Body content #4", disabled: false, open: false });
                            for (let i = 5; i < count; ++i) {
                                yield o$1(DemoAccordionSection, { index: i, heading: `Accordion section #${i}`, body: `BodyContent #${i}`, disabled: false });
                            }
                        })()).slice(0, count) }) })] }));
    }

    function Blurb$e() {
        return (o$1(_$2, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/button/", children: "In accordance with the ARIA guidelines for Button patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: ["Whether using an actual ", o$1("code", { children: "<button>" }), ", or something else like a ", o$1("code", { children: "<div>" }), ", the proper roles and event handlers will be applied."] }), o$1("li", { children: "Buttons can be toggled (pressed or unpressed)." }), o$1("li", { children: ["The button responds to keyboard, mouse, touch, etc. events, regardless of the element used.", o$1("ul", { children: [o$1("li", { children: "Double-clicks do not select text, but text is still selectable without it counting as a press/click" }), o$1("li", { children: "When Enter is pressed, the button is immediately activated" }), o$1("li", { children: "When Space is pressed, the button is activated once released" }), o$1("li", { children: "iOS Safari properly focuses the button" })] })] })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: o$1("li", { children: ["If your button contains only an icon (or other non-descriptive content, etc.), you must provide an ", o$1("code", { children: "aria-label" }), " manually stating what happens when the button is pressed."] }) })] }));
    }
    function Code$e() {
        return (o$1("code", { children: `<Button tag="button">Button</Button>
    <Button tag="div">Div</Button>` }));
    }
    function Demo$e() {
        const [pressed, setPressed] = useState(false);
        return (o$1(_$2, { children: [o$1(Blurb$e, {}), o$1(Code$e, {}), o$1(DemoButton, { disabled: false, tag: "button" }), o$1(DemoButton, { disabled: "soft", tag: "button" }), o$1(DemoButton, { disabled: "hard", tag: "button" }), o$1(DemoButton, { disabled: false, tag: "div" }), o$1(DemoButton, { disabled: "soft", tag: "div" }), o$1(DemoButton, { disabled: "hard", tag: "div" }), o$1(Button, { tagButton: "button", pressed: pressed, onPress: e => setPressed(e[EventDetail].pressed ?? false), render: info => (o$1("button", { ...info.props, children: `Toggle button (${pressed ? "pressed" : "unpressed"})` })) })] }));
    }
    function DemoButton({ tag: Tag, disabled }) {
        const onPress = () => { alert("Button clicked"); };
        return (o$1(Button, { disabled: disabled, tagButton: Tag, onPress: onPress, render: info => (o$1(Tag, { ...info.props, children: `${Tag} ${disabled ? ` disabled (${disabled == "soft" ? "soft" : "hard"})` : ""}` })) }));
    }

    /*function DemoButton({ tag, ...props }: { tag: string } & RenderableProps<{}>) {
        return <Button disabled={disabled} onPress={onPress} pressed={} {...props} tag={tag as any}   />
    }*/
    function Blurb$d() {
        return (o$1(_$2, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/", children: "In accordance with the ARIA guidelines for Checkbox patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: "Toggles between checked and unchecked when pressed (clicked, Enter pressed, Space released, etc.)" }), o$1("li", { children: ["Can be ", o$1("code", { children: "mixed" }), " instead, though ", o$1("code", { children: "onInput" }), " will only ever be called with ", o$1("code", { children: "true" }), " or ", o$1("code", { children: "false" })] }), o$1("li", { children: ["Supports using ", o$1("code", { children: "<input>" }), "s and ", o$1("code", { children: "<label>" }), "s, as well as just plain ol' ", o$1("code", { children: "<div>" }), "s on either/both"] }), o$1("li", { children: "The checkbox and label can be sibling elements, like normal, or the label can wrap the input for a larger hit area. In all cases, the appropriate roles/event handlers will be applied to each element." }), o$1("li", { children: "When selecting the text of a checkbox's label, this does not change the checkbox's state" }), o$1("li", { children: "Double-clicking the label checks & un-checks the checkbox instead of selecting the label's text" }), o$1("li", { children: "Checkbox groups (with a tri-state parent) are a separate component/hook" })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: o$1("li", { children: ["If your checkbox does not have a visible label (achievable by by overriding the ", o$1("code", { children: "render" }), " prop and setting ", o$1("code", { children: "labelPosition" }), " to be \"separate\"), you must pass ", o$1("code", { children: "aria-label" }), " as a prop to the checkbox manually. Not providing one will print an error to the console, but it it not required by the type system."] }) })] }));
    }
    function Code$d() {
        return (o$1("code", { children: `<Checkbox checked={true} labelPosition="separate" tagInput="input" tagLabel="label">Label text</Checkbox>` }));
    }
    function Demo$d() {
        const [checked, setChecked] = useState(false);
        const [disabled, setDisabled] = useState(false);
        return (o$1(_$2, { children: [o$1(Blurb$d, {}), o$1(Code$d, {}), o$1(Checkbox, { checked: disabled, onCheckedChange: e => setDisabled(e[EventDetail].checked), ariaLabel: null, labelPosition: "separate", tagInput: "input", tagLabel: "label", render: info => o$1(_$2, { children: [o$1("input", { ...info.propsInput }), o$1("label", { ...info.propsLabel, children: "Disabled" })] }) }), o$1(Button, { tagButton: "button", onPress: () => { setChecked("mixed"); }, render: info => (o$1("button", { ...info.props, children: "Change to mixed" })) }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "separate", disabled: disabled, tagInput: "input", tagLabel: "label" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "wrapping", disabled: disabled, tagInput: "input", tagLabel: "label" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "wrapping2", disabled: disabled, tagInput: "input", tagLabel: "label" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "separate", disabled: disabled, tagInput: "div", tagLabel: "label" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "wrapping", disabled: disabled, tagInput: "div", tagLabel: "label" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "separate", disabled: disabled, tagInput: "input", tagLabel: "div" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "wrapping", disabled: disabled, tagInput: "input", tagLabel: "div" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "separate", disabled: disabled, tagInput: "div", tagLabel: "div" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "wrapping", disabled: disabled, tagInput: "div", tagLabel: "div" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "hidden", disabled: disabled, tagInput: "input", tagLabel: "label" })] }));
    }
    function DemoCheckbox$1({ labelPosition, tagInput, tagLabel, disabled, checked, setChecked }) {
        //const [checked, setChecked] = useState(false);
        return (o$1("div", { style: { border: "1px solid black" }, children: [o$1(Checkbox, { ariaLabel: null, disabled: disabled, checked: checked, onCheckedChange: e => setChecked(e[EventDetail].checked), labelPosition: labelPosition == "hidden" ? "separate" : labelPosition == "wrapping2" ? "separate" : labelPosition, tagInput: tagInput, tagLabel: tagLabel, render: defaultRenderCheckboxLike({
                        labelPosition: labelPosition == "wrapping2" ? "separate" : labelPosition,
                        tagInput: tagInput,
                        tagLabel: tagLabel,
                        makePropsInput: (info) => useMergedProps(info.propsInput, { "aria-label": labelPosition == "hidden" ? `Hidden label (technically separate), ${tagInput} and ${tagLabel} ${checked ? "checked" : "not checked"}` : undefined, }),
                        makePropsLabel: (info) => useMergedProps(info.propsLabel, { children: `${labelPosition}, ${tagInput} and ${tagLabel}, ${checked ? "checked" : "not checked"}` })
                    }) }), labelPosition == "hidden" && o$1("div", { children: ["(This is not a label -- the actual label is via the ", o$1("code", { children: "aria-label" }), " prop)"] })] }));
    }

    function DemoCheckbox({ index }) {
        const [checked, setChecked] = useState(false);
        const ref = _(null);
        return (o$1(CheckboxGroupChild, { checked: checked, index: index, focusSelf: () => ref.current?.checkboxLikeReturn.focusSelf(), onChangeFromParent: async (checked) => { await new Promise(resolve => setTimeout(resolve, Math.random() * 2000)); setChecked(checked); }, getSortValue: returnNull, 
            //focusSelf={useStableCallback((e) => e.focus())}
            render: (info) => {
                return (o$1("div", { children: o$1(Checkbox, { ref: ref, checked: checked, disabled: false, ariaLabel: null, onCheckedChange: e => { setChecked(e[EventDetail].checked); info.checkboxGroupChild.onChildCheckedChange(e[EventDetail].checked); }, labelPosition: "separate", tagInput: "input", tagLabel: "label", render: defaultRenderCheckboxLike({
                            labelPosition: "separate",
                            tagInput: "input",
                            tagLabel: "label",
                            makePropsInput: info2 => useMergedProps(info.props, info2.propsInput),
                            makePropsLabel: info2 => ({ children: `Checkbox #${index}`, ...info2.propsLabel })
                        }) }) }));
            } }));
    }
    function Blurb$c() {
        return (o$1(_$2, { children: [o$1("p", { children: ["Checkbox groups are an alternative to multi-select lists. There is no role of ", o$1("code", { children: "checkboxgroup" }), ", but this aims to be an ARIA-compliant implementation of a checkbox group."] }), o$1("ul", { children: [o$1("li", { children: ["All normal ", o$1("code", { children: "Checkbox" }), " functionality is supported on each individual checkbox."] }), o$1("li", { children: "The parent checkbox switches between 3 states, remembering the last state that caused it to be \"mixed\"." }), o$1("li", { children: ["The parent's \"mixed\" state changes all children back to whatever state the user had most recently created; the distinction is drawn when a child calls ", o$1("code", { children: "onChildCheckedChange" }), " during its event handler. This call is what notifies the parent checkbox what to use when switching to that \"mixed\" state."] }), o$1("li", { children: ["The children are treated as a composite component with list navigation; see ", o$1("code", { children: "AiraSingleSelectList" }), " for more information"] }), o$1("li", { children: [o$1("code", { children: "aria-controls" }), " is set on the parent Checkbox to contain the IDs of all child checkboxes. This has no effect on any technology that I am aware of, but it's there just in case."] })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: [o$1("li", { children: [o$1("code", { children: "CheckboxGroupParent" }), " has supports child checkboxes being asyncronous (e.g. if each child's ", o$1("code", { children: "onChangeFromParent" }), " is async, then the parent's ", o$1("code", { children: "onParentCheckedChange" }), " will asyncronously wait for all of them), but you must apply any relevant labelling of this circumstance yourself."] }), o$1("li", { children: ["As mentioned, ", o$1("code", { children: "aria-controls" }), " basically does nothing. Please ensure you're using good labelling here; it is assumed that the parent checkbox provides sufficient labelling for all the children, which how the demo example identifies these elements. If you have a separate label, you will need to wrap the children in a ", o$1("code", { children: "role=group" }), " that references that label by overriding ", o$1("code", { children: "render" }), "."] })] })] }));
    }
    function Code$c() {
        return (o$1("code", { children: `` }));
    }
    function Demo$c() {
        const [count, setCount] = useState(5);
        const [pending, setPending] = useState(false);
        return (o$1(_$2, { children: [o$1(Blurb$c, {}), o$1(Code$c, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of checkboxes"] }), o$1("div", { children: [o$1("p", { children: [o$1("strong", { children: "Note:" }), " Each checkbox (in this demo only!) takes a random amount of time to update when modified via the parent checkbox to test async handling."] }), o$1(CheckboxGroup, { navigationDirection: "vertical", render: (info2) => {
                                const ref = _(null);
                                return o$1("div", { ...info2.props, ...({
                                        children: (o$1(_$2, { children: [o$1(CheckboxGroupParent, { index: 0, focusSelf: () => ref.current?.checkboxLikeReturn.focusSelf(), getSortValue: returnNull, render: info3 => (o$1(Checkbox, { ref: ref, disabled: pending, checked: info3.checkboxGroupParentReturn.checked, onCheckedChange: useStableCallback((e) => {
                                                            setPending(true);
                                                            info3.checkboxGroupParentReturn.onParentCheckedChange(e).finally(() => setPending(false));
                                                        }), ariaLabel: "Parent checkbox", labelPosition: "separate", tagInput: "input", tagLabel: "label", render: defaultRenderCheckboxLike({
                                                            labelPosition: "separate",
                                                            makePropsInput: info4 => useMergedProps(info4.propsInput, info3.props),
                                                            makePropsLabel: info4 => ({ children: "Parent checkbox", ...info4.propsLabel }),
                                                            tagInput: "input",
                                                            tagLabel: "label"
                                                        }) })) }), o$1("div", { style: { display: "flex", flexDirection: "column" }, children: o$1(_$2, { children: Array.from((function* () {
                                                            for (let i = 0; i < count; ++i) {
                                                                yield o$1(DemoCheckbox, { index: i + 1 }, i);
                                                            }
                                                        })()) }) })] }))
                                    }) });
                            } })] })] }));
    }

    const DemoListItem$3 = R(function DemoListItem({ index }) {
        const [selected, setSelected] = useState(false);
        const labelText = `List item #${index}${selected ? " (selected)" : ""}`;
        return (o$1(ListboxItem, { selected: selected, index: index, disabled: false, ariaPropName: "aria-selected", getSortValue: returnZero, onPressSync: () => { setSelected(p => !p); }, render: info => {
                return (o$1("li", { ...info.props, children: labelText }));
            } }));
    });
    function Blurb$b() {
        return (o$1(_$2, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/listbox/", children: "In accordance with the ARIA guidelines for Listbox patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: ["The children are treated as a composite component with list navigation; see ", o$1("code", { children: "AiraSingleSelectList" }), " for more information"] }), o$1("li", { children: "The parent checkbox switches between 3 states, remembering the last state that caused it to be \"mixed\"." }), o$1("li", { children: ["The parent checkbox reacts to each child's ", o$1("code", { children: "checked" }), " prop and updates its own internal ", o$1("code", { children: "checked" }), " attribute (be aware of this if they're asyncronous, as you'll want to ensure they all resolve on the same tick with ", o$1("code", { children: "Promise.all" }), " to not clobber the user's inputs)."] }), o$1("li", { children: ["The children are treated as a composite component with list navigation; see ", o$1("code", { children: "AiraSingleSelectList" }), " for more information"] }), o$1("li", { children: "Grouping is supported" }), o$1("li", { children: "Sorting/reordering is supported, though not provided by default, as it's mutually exclusive with grouping." })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: [o$1("li", { children: ["It is assumed that the parent checkbox provides sufficient labelling for all the children, which how the demo example identifies these elements. If you have a separate label, you will need to wrap the children in a ", o$1("code", { children: "role=group" }), " that references that label by overriding ", o$1("code", { children: "render" }), "."] }), o$1("li", { children: ["See the caveat above for when each child's ", o$1("code", { children: "onInput" }), " takes a variable amount of time to actually update the ", o$1("code", { children: "checked" }), " prop, as it can clobber the user's last input when clicking on the parent"] })] })] }));
    }
    function Code$b() {
        return (o$1("code", { children: `` }));
    }
    function Demo$b() {
        const [count, setCount] = useState(5);
        return (o$1(_$2, { children: [o$1(Blurb$b, {}), o$1(Code$b, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of list items"] }), o$1("div", { children: o$1(Listbox, { selectedIndex: null, ariaLabel: null, navigationDirection: "vertical", selectionLimit: "multi", render: info => {
                            return (o$1(_$2, { children: [o$1("label", { ...info.propsListboxLabel }), o$1("ul", { ...info.propsListbox, children: Array.from((function* () {
                                            for (let i = 0; i < count; ++i) {
                                                yield o$1(DemoListItem$3, { index: i }, i);
                                            }
                                        })()) })] }));
                        } }) })] }));
    }

    const DemoListItem$2 = R(function DemoListItem({ index }) {
        return (o$1(ListboxItem, { index: index, focusSelf: e => e.focus(), ariaPropName: "aria-selected", getSortValue: returnZero, disabled: false, selected: null, render: info => {
                const selected = info.singleSelectionChildReturn.selected;
                // defaultRenderListboxSingleItem({ tagListItem: "li", makePropsListItem: ({ singleSelection: { selected } }) => ({ children: `List item #${index}${selected ? " (selected)" : ""}` }) })
                return (o$1("li", { ...info.props, children: `List item #${index}${selected ? " (selected)" : ""}` }));
            } }));
    });
    function Blurb$a() {
        return (o$1(_$2, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/listbox/", children: "In accordance with the ARIA guidelines for Listbox patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: ["In terms of keyboard navigation and tabbing through elements, a Listbox is considered a ", o$1("strong", { children: "single" }), " tab stop; in other words, no matter how many list items there are in a Listbox, it only takes one press of the Tab button to go through it.", o$1("ul", { children: [o$1("li", { children: "When a Listbox is tabbed into, the most recently selected item is given focus" }), o$1("li", { children: "Pressing Tab again navigates out of the listbox; no other list items are tabbable other than the one currently designated." }), o$1("li", { children: "Pressing the arrow keys navigates through the Listbox one item at a time" }), o$1("li", { children: "Pressing the Home/End keys move focus to the first/last items respectively" }), o$1("li", { children: "Typing any sequence of text starts typeahead that navigates to the next item that matches what's being typed" }), o$1("li", { children: "Focus & selection management is as optimized as possible; only two children re-render at a time when focus or selection changes" }), o$1("li", { children: "These apply generally to all composite components with a variable number of children (Tab Lists, Radio Groups, Multi-Select Listboxes etc.)" })] })] }), o$1("li", { children: ["Rather than each individual list item knowing whether it is selected or not (as with multi-select lists), here the parent knows the ", o$1("code", { children: "selectedIndex" }), " and simply notifies the (max two) relevant children any time it changes."] }), o$1("li", { children: "Grouping is supported" }), o$1("li", { children: "Sorting/reordering is supported. Each group is sorted independently." })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: o$1("li", { children: "Listboxes do not support interactive content within them (e.g. a dropdown menu), as ARIA specifies that this is a different pattern." }) })] }));
    }
    function Code$a() {
        return (o$1("code", { children: `` }));
    }
    function ListboxDemo({ count, label }) {
        const [selectedIndex, setSelectedIndex] = useState(null);
        return (o$1(Listbox, { selectedIndex: selectedIndex, onSelectedIndexChange: setSelectedIndex, render: info => {
                return (o$1(_$2, { children: [o$1("label", { ...info.propsListboxLabel, children: label }), o$1("ol", { ...info.propsListbox, children: Array.from((function* () {
                                for (let i = 0; i < count; ++i) {
                                    yield o$1(DemoListItem$2, { index: i }, i);
                                }
                            })()) })] }));
            }, ariaLabel: null, navigationDirection: "vertical", selectionLimit: "single" }));
    }
    function Demo$a() {
        const [count, setCount] = useState(5);
        return (o$1(_$2, { children: [o$1(Blurb$a, {}), o$1(Code$a, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of list items"] }), o$1("div", { children: o$1(ListboxDemo, { count: count, label: "Single-select listbox demo without groups" }) }), o$1("div", { children: o$1(GroupedListbox, { navigationDirection: "vertical", selectionLimit: "single", ariaLabel: null, render: info => {
                            return (o$1(_$2, { children: [o$1("label", { ...info.propsListboxLabel, children: "Single-select listbox demo with groups" }), o$1("div", { ...info.propsListbox, children: [o$1(ListboxDemo, { count: count, label: "Group #0" }), o$1(ListboxDemo, { count: count, label: "Group #1" }), o$1(ListboxDemo, { count: count, label: "Group #2" })] })] }));
                        } }) })] }));
    }

    function DemoListItem$1({ index }) {
        return (o$1(MenuItem, { index: index, ariaPropName: null, getSortValue: returnZero, selectionMode: "disabled", role: "menuitem", onPress: e => alert(`Menu item #${index} pressed`), disabled: false, render: info => o$1("li", { ...info.props, children: `Menu item #${index}` }) }));
    }
    function Blurb$9() {
        return (o$1(_$2, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/listbox/", children: "In accordance with the ARIA guidelines for Listbox patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: ["The children are treated as a composite component with list navigation; see ", o$1("code", { children: "AiraSingleSelectList" }), " for more information"] }), o$1("li", { children: "When opened, the menu will focus the first element within it. When closed (by pressing escape, pressing the button again, or tabbing out of the menu), the button that opened it will have focus restored to it." }), o$1("li", { children: "When the menu is closed because another element on the page was focused instead, focus will not be modified." })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: o$1("li", { children: ["Unlike most components, the label of a menu is implicitly the button that opens it and is not a separate, standalone element. If this button doesn't label the menu well, you must use the ", o$1("code", { children: "ariaLabel" }), " prop to compensate."] }) })] }));
    }
    function Code$9() {
        return (o$1("code", { children: `` }));
    }
    function Demo$9() {
        const [count, setCount] = useState(5);
        const [open, setOpen] = useState(false);
        return (o$1(_$2, { children: [o$1(Blurb$9, {}), o$1(Code$9, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of menu items"] }), o$1("div", { children: o$1(Menu, { orientation: "vertical", onOpen: () => setOpen(true), onClose: () => setOpen(false), open: open, openDirection: "down", render: info => {
                            return (o$1(_$2, { children: [o$1("button", { ...info.propsTrigger, onClick: () => setOpen(o => !o), children: "Menu trigger" }), defaultRenderPortal({
                                        portalId: "portal", children: (o$1("div", { ...info.propsSurface, hidden: !open, children: [o$1("div", { ...info.propsSentinel }), o$1("ul", { ...info.propsTarget, children: Array.from((function* () {
                                                        for (let i = 0; i < count; ++i) {
                                                            yield o$1("div", { children: o$1(DemoListItem$1, { index: i }, i) });
                                                        }
                                                    })()) }), o$1("div", { ...info.propsSentinel })] }))
                                    })] }));
                        } /*defaultRenderMenu({
                            tagButton: "button",
                            tagMenu: "ul",
                            tagSentinel: "div",
                            tagSurface: "div",
                            portalId: "portal",
                            makePropsButton: () => ({ children: "Open menu" + (open ? " (open)" : " (closed)") }),
                            makePropsMenu: () => ({
                                children: <>{Array.from((function* () {
                                    for (let i = 0; i < count; ++i) {
                                        yield <div><DemoListItem index={i} key={i} /></div>
                                    }
                                })())}</>
                            }),
                            makePropsSurface: () => ({ style: { display: !open ? "none" : undefined } }),
                            makePropsSentinel: () => ({}),
                        })*/ }) })] }));
    }

    const DemoRadioButton = R(function DemoRadioButton({ index }) {
        return (o$1("div", { children: o$1(Radio, { index: index, focusSelf: e => e.focus(), disabled: false, labelPosition: "separate", value: index, tagInput: "input", tagLabel: "label", ariaLabel: null, render: (info) => {
                    return o$1(_$2, { children: [o$1("input", { ...info.propsInput, name: "radio-demo" }), o$1("label", { ...info.propsLabel, children: ["Radio #", index] })] });
                } }) }));
    });
    function Blurb$8() {
        return (o$1(_$2, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/radiobutton/", children: "In accordance with the ARIA guidelines for Radio Button patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: ["The children are treated as a composite component with list navigation; see ", o$1("code", { children: "AiraSingleSelectList" }), " for more information"] }), o$1("li", { children: "The input & label support the same text-selection affordances as Checkboxes (labels can be selected, but double-clicking doesn't select the text and selecting text doesn't count as an input)" }), o$1("li", { children: "Selection state is handled by the parent; instead of specifying whether any given radio button is checked or not, the parent notifies each child of the necessary changes." })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: [o$1("li", { children: ["If your checkbox does not have a visible label (achievable by by overriding the ", o$1("code", { children: "render" }), " prop and setting ", o$1("code", { children: "labelPosition" }), " to be \"separate\"), you must pass ", o$1("code", { children: "aria-label" }), " as a prop to the checkbox manually. Not providing one will print an error to the console, but it it not required by the type system."] }), o$1("li", { children: ["The above also applies to the radio group as a whole; ARIA requires that all Radio Buttons be contained within an element with a specific role which is labelled either by an element (handled for you) or ", o$1("code", { children: "aria-label" }), " (specified by you manually on the input)."] })] })] }));
    }
    function Code$8() {
        return (o$1("code", { children: `` }));
    }
    function Demo$8() {
        const [selectedIndex, setSelectedIndex] = useState(null);
        const [count, setCount] = useState(5);
        return (o$1(_$2, { children: [o$1(Blurb$8, {}), o$1(Code$8, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of radio buttons"] }), o$1("div", { children: o$1(RadioGroup, { name: "radio-demo", ariaLabel: null, selectedValue: selectedIndex, navigationDirection: "vertical", onSelectedValueChange: setSelectedIndex, render: info => {
                            return (o$1(_$2, { children: [o$1("label", { ...info.propsRadioGroupLabel, children: "Radio group demo" }), o$1("div", { ...info.propsRadioGroup, children: Array.from((function* () {
                                            for (let i = 0; i < count; ++i) {
                                                yield o$1(DemoRadioButton, { index: i }, i);
                                            }
                                        })()) })] }));
                        } }) })] }));
    }

    function DemoSliderThumb({ index }) {
        const [value, setValue] = useState(0);
        return (o$1(SliderThumb, { index: index, tag: "input", label: `Slider thumb #${index}`, value: value, onValueChange: e => setValue(e[EventDetail].value), min: 0, max: 10, render: info => {
                return (o$1("input", { ...info.propsSliderThumb }));
            } }));
    }
    function Blurb$7() {
        return (o$1(_$2, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/listbox/", children: "In accordance with the ARIA guidelines for Listbox patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: ["The children are treated as a composite component with list navigation; see ", o$1("code", { children: "AiraSingleSelectList" }), " for more information"] }), o$1("li", { children: "When opened, the menu will focus the first element within it. When closed (by pressing escape, pressing the button again, or tabbing out of the menu), the button that opened it will have focus restored to it." }), o$1("li", { children: "When the menu is closed because another element on the page was focused instead, focus will not be modified." })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: o$1("li", { children: "TODO" }) })] }));
    }
    function Code$7() {
        return (o$1("code", { children: `` }));
    }
    function Demo$7() {
        const [count, setCount] = useState(5);
        return (o$1(_$2, { children: [o$1(Blurb$7, {}), o$1(Code$7, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of slider thumbs"] }), o$1("div", { children: o$1(Slider, { min: 0, max: 10, children: o$1(_$2, { children: Array.from((function* () {
                                for (let i = 0; i < count; ++i) {
                                    yield o$1("div", { children: o$1(DemoSliderThumb, { index: i }, i) });
                                }
                            })()) }) }) })] }));
    }

    function Blurb$6() {
        return (o$1(_$2, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/dialogmodal/", children: "In accordance with the ARIA guidelines for Modal Dialog patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: "Dialogs block all other elements on the page from receiving focus/interaction and being perceivable to screen readers." }), o$1("li", { children: "Dialogs can be dismissed by pressing Escape or clicking the element designated as the backdrop, both of which can be cancelled/ignored if you need" }), o$1("li", { children: "When opened, the dialog will focus its title or body content as appropriate, however read below under Things Not Handled for caveats." }), o$1("li", { children: "When closed for any reason, the element that was responsible for opening the dialog will be focused." })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: [o$1("li", { children: ["By default, when opened, a dialog will focus its body content or title content depending on ", o$1("code", { children: "bodyIsOnlySemantic" }), ", which indicates that the dialog's body contains no interactive elements. This may not be suitable for all situations."] }), o$1("li", { children: ["It is ", o$1("em", { children: "hightly" }), " recommended to override ", o$1("code", { children: "focusSelf" }), " for all dialogs you create, and have it focus whatever element makes the most sense for your particular dialog.", o$1("ul", { children: [o$1("li", { children: "Dialogs that act like a form should focus the first interactive element" }), o$1("li", { children: "Dialogs that perform destructive actions should focus the \"Cancel\" button" }), o$1("li", { children: "In some cases, it's best to focus the first paragraph of the body." })] }), "In all cases, consider that the first focused element will both be how keyboard users interact with the dialog, but also the first thing a screen reader will read aloud."] })] })] }));
    }
    function Code$6() {
        return (o$1("code", { children: `` }));
    }
    function Demo$6() {
        const [open, setOpen] = useState(false);
        //const r = useCallback((...args: any[]) => { console.log(...args); }, []);
        return (o$1(_$2, { children: [o$1(Blurb$6, {}), o$1(Code$6, {}), o$1("div", { children: o$1(Dialog, { open: open, onClose: () => setOpen(false), closeOnBackdrop: true, closeOnEscape: true, focusOpener: e => { e.focus(); }, parentDepth: 0, focusPopup: (e, f) => { f()?.focus(); }, ariaLabel: null, render: info => {
                            return (o$1(_$2, { children: [o$1("button", { ...info.propsSource, onClick: () => setOpen(o => !o), children: "Open dialog" }), defaultRenderPortal({
                                        portalId: "portal",
                                        children: o$1("div", { ...info.propsFocusContainer, hidden: !open, children: o$1("div", { ...info.propsDialog, children: [o$1("div", { ...info.propsTitle, children: "Dialog title" }), o$1("div", { children: "Dialog body" }), o$1("button", { onClick: () => setOpen(false), children: "Close dialog" })] }) })
                                    })] }));
                        } }) })] }));
    }

    function Blurb$5() {
        return (o$1(_$2, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/", children: "In accordance with the ARIA guidelines for Tab and Tab Panel patterns," }), " this widget supports the following:"] }), o$1("ul", { children: o$1("li", { children: ["The tabs are treated as a composite component with list navigation; see ", o$1("code", { children: "AiraSingleSelectList" }), " for more information"] }) }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: o$1("li", { children: "TODO" }) })] }));
    }
    function Code$5() {
        return (o$1("code", { children: `` }));
    }
    function Demo$5() {
        const [count, setCount] = useState(5);
        //const [selectedIndex, setSelectedIndex] = useState(0 as number | null);
        return (o$1(_$2, { children: [o$1(Blurb$5, {}), o$1(Code$5, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of tabs"] }), o$1("div", { children: o$1(Tabs, { ariaLabel: null, orientation: "horizontal", render: info => {
                            /*
                            defaultRenderTabs({
                            panels: Array.from((function* () {
                                for (let i = 0; i < count; ++i) {
                                    yield <DemoTabPanel i={i} />
                                }
                            })()),
                            tagLabel: "label",
                            tagList: "ul",
                            makePropsLabel: () => ({ children: "Tabs example" }),
                            makePropsList: () => ({
                                children: <>
                                    {Array.from((function* () {
                                        for (let i = 0; i < count; ++i) {
                                            yield <DemoTab i={i} />
                                        }
                                    })())}
                                </>
                            })
                        })
                            
                            */
                            return (o$1(_$2, { children: [o$1("label", { ...info.propsLabel, children: "Tabs example" }), o$1("ul", { ...info.propsContainer, style: { display: "flex" }, children: Array.from((function* () {
                                            for (let i = 0; i < count; ++i) {
                                                yield o$1(DemoTab, { i: i });
                                            }
                                        })()) }), o$1("div", { children: Array.from((function* () {
                                            for (let i = 0; i < count; ++i) {
                                                yield o$1(DemoTabPanel, { i: i });
                                            }
                                        })()) })] }));
                        } }) })] }));
    }
    const DemoTab = R(function DemoTab({ i }) {
        return o$1(Tab, { focusSelf: e => e.focus(), index: i, render: info => o$1("li", { ...info.props, style: { marginLeft: "2em" }, children: ["Tab #", i, " (offset: ", info.singleSelectionChildReturn.selectedOffset ?? "null", ") ", info.singleSelectionChildReturn.selected && "(visible)"] }), getSortValue: returnZero }, i);
    });
    const DemoTabPanel = R(function DemoTabPanel({ i }) {
        return o$1(TabPanel, { index: i, render: info => o$1("div", { ...info.props, hidden: !info.tabPanelReturn.visible, children: ["Tab panel #", i, " (offset: ", info.tabPanelReturn.visibleOffset ?? "null", ")"] }) }, i);
    });

    function Blurb$4() {
        return (o$1(_$2, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/tooltip/", children: "Tooltips have yet to be well defined in many areas" }), ", but this implementation aims to support common use cases:"] }), o$1("ul", { children: [o$1("li", { children: "Hovering or focusing the trigger element shows the tooltip" }), o$1("li", { children: "The tooltip stays shown when it itself is hovered/focused as well, so that the text inside can be selected" }), o$1("li", { children: "Moving the mouse between the trigger and the tooltip has some tolerance associated with immediately hiding the tooltip." }), o$1("li", { children: "Hovering, focusing, and re-hovering can each have a custom delay associated with it" })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: [o$1("li", { children: ["You must ensure that either the tooltip contains a focusable element (a button, link, ", o$1("code", { children: "<div tabIndex=\"-1\" />" }), ", etc.)"] }), o$1("li", { children: "Long presses on mobile devices are not yet handled (e.g. a long press on a button triggers a tooltip but does not activate the button)" })] })] }));
    }
    function Code$4() {
        return (o$1("code", { children: `` }));
    }
    function Demo$4() {
        const [tooltipStatus, setTooltipStatus] = p(null);
        return (o$1(_$2, { children: [o$1(Blurb$4, {}), o$1(Code$4, {}), o$1("div", { children: ["The following text triggers a tooltip: ", o$1(Tooltip, { tooltipSemanticType: "description", onStatus: setTooltipStatus, render: info => {
                                return o$1(_$2, { children: [o$1("span", { tabIndex: 0, ...info.propsTrigger, children: "Tooltip-triggering text that is hoverable and focusable: " }), defaultRenderPortal({
                                            portalId: "portal",
                                            children: o$1("div", { ...info.propsPopup, hidden: !tooltipStatus, children: "This text describes the triggering text in more detail." })
                                        })] });
                            } })] })] }));
    }

    function Blurb$3() {
        return (o$1(_$2, { children: [o$1("p", { children: o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/alert/", children: "Toasts (aka snackbars) are implemented using the Alert pattern." }) }), o$1("ul", { children: [o$1("li", { children: "Pushing a toasts causes its contents to be shown visibly (and audibly with a screen reader)" }), o$1("li", { children: "Only new toasts are announced" }), o$1("li", { children: "Toasts are shown as soon as they are pushed, but you can control the maximum number shown at once with" }), o$1("li", { children: "Toasts can be dismissed in any order" }), o$1("li", { children: "Toasts can be set to auto-dismiss." })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: [o$1("li", { children: "Auto-dismiss behavior is very situational. An auto-dismissed toast should only refer to information that can be viewed elsewhere; \"X files deleted\" can be double-checked in the Recycle Bin, \"X has logged in\" which you can along with everyone else in a tab somewhere, etc. This obviously cannot be checked programmatically." }), o$1("li", { children: "TODO: Focus management related to toasts that have interactive content" }), o$1("li", { children: "TODO: Toasts are still announced even when the current browser tab is hidden instead of saving them for when the user returns" }), o$1("li", { children: "TODO: Toasts still auto-dismiss when they have focus/are being interacted with" })] })] }));
    }
    function Code$3() {
        return (o$1("code", { children: `` }));
    }
    function Demo$3() {
        const currentIndex = _(0);
        const [toasts, setToasts] = useState([]);
        const pushToast = T$1(() => {
            const index = currentIndex.current;
            currentIndex.current += 1;
            const c = o$1(_$2, { children: ["This the toast with an index of ", index, "."] });
            const nt = o$1(Toast, { children: c, index: index, render: ({ toastReturn: { dismiss, showing, dismissed, numberOfToastsAheadOfUs } }) => {
                    const c = o$1(_$2, { children: ["This the toast with an index of ", index, ". (#", numberOfToastsAheadOfUs, " in the queue to be shown)."] });
                    return (o$1("div", { style: showing ? {} : { opacity: 0.5 }, children: [c, " ", o$1("button", { disabled: dismissed, onClick: dismiss, children: "Click to dismiss" })] }));
                }, timeout: null }, index);
            setToasts(t => [...t, nt]);
        }, []);
        return (o$1(_$2, { children: [o$1(Blurb$3, {}), o$1(Code$3, {}), o$1("button", { onClick: pushToast, children: "Push a toast" }), o$1("div", { children: o$1(Toasts, { visibleCount: 3, render: (info) => { return o$1("div", { ...info.props, children: toasts }); } }) })] }));
    }

    function Blurb$2() {
        return (o$1(_$2, { children: [o$1("p", { children: ["This is an implementation of an interactive data table that complies with ", o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/table/", children: "the ARIA guidelines for Table patterns" }), "."] }), o$1("ul", { children: [o$1("li", { children: ["In terms of keyboard navigation and tabbing through elements, a Table is considered a ", o$1("strong", { children: "single" }), " tab stop; in other words, no matter how many cells there are in a table (including if the cells contain interactive elements), it only takes one press of the Tab button to go through it.", o$1("ul", { children: [o$1("li", { children: ["Pressing the arrow keys navigates through the cells of the Table. You can override each cell's ", o$1("code", { children: "focusSelf" }), " prop to handle child elements."] }), o$1("li", { children: "Most other rules of list navigation apply (as in Listboxes), but in two dimensions." })] })] }), o$1("li", { children: ["The body rows are sortable via each cell's ", o$1("code", { children: "value" }), " prop. As a result of this, each row must be a ", o$1("em", { children: "direct" }), " child of the body, like as a normal array of children with no intervening JSX."] })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: [o$1("li", { children: ["If you don't need all the sorting and focus management and such, there's no reason not to just use the good old ", o$1("code", { children: "<table>" }), " element."] }), o$1("li", { children: ["It's up to you to make sure that any interactive elements within a table cell respond to focus management properly with the aforementioned ", o$1("code", { children: "focusSelf" }), " prop and a properly placed ", o$1("code", { children: ["tabIndex=", "{", "info.rovingTabIndex.tabbable? 0 : -1", "}"] }), " in the ", o$1("code", { children: "render" }), " prop."] })] })] }));
    }
    function Code$2() {
        return (o$1("code", { children: `` }));
    }
    function DemoInput({ index }) {
        const [v, setV] = useState("");
        return (o$1(TableCell, { getSortValue: () => v, focusSelf: e => { debugger; e.focus(); }, tagTableCell: "td", index: index, render: info => {
                return (o$1("td", { ...info.propsCell, children: o$1("input", { ...info.propsFocus, type: "text", onInput: T$1((e) => {
                            setV(e.currentTarget.value);
                            e.preventDefault();
                        }, []), value: v }) }));
                /*

                tagTableCell: "td", makePropsTableCell: (info) => ({
                    children: <DemoInput tabbable={info.rovingTabIndex.tabbable} />

                })

                */
            } }));
        /*
        return (
            <input {...props} type="text" tabIndex={tabbable ? 0 : -1} onInput={useCallback((e: h.JSX.TargetedEvent<HTMLInputElement>) => {
                debugger;
                setV(e.currentTarget.value);
                e.preventDefault();
            }, [])} value={v} />
        )*/
    }
    function DemoTableCell({ index, header }) {
        const r = _(Math.random());
        if (header) {
            const text = `Header #${index}`;
            return o$1(TableCell, { getSortValue: returnZero, focusSelf: e => e.focus(), tagTableCell: "th", index: index, render: info => o$1("th", { ...info.propsFocus, ...info.propsCell, children: [text, o$1("button", { tabIndex: info.rovingTabIndexChildReturn.tabbable ? 0 : -1, onClick: () => info.tableCellReturn.sortByThisColumn(), children: "Sort" })] }) });
        }
        else {
            //const text = `Cell in column #${index}`;
            switch (index) {
                case 0:
                    return (o$1(DemoInput, { index: index }));
                default:
                    return o$1(TableCell, { getSortValue: () => r.current, focusSelf: e => e.focus(), tagTableCell: "td", index: index, render: info => {
                            return (o$1("td", { ...info.propsFocus, ...info.propsCell, children: r.current.toString() }));
                        } });
            }
        }
    }
    function Demo$2() {
        const [count, setCount] = useState(5);
        return (o$1(_$2, { children: [o$1(Blurb$2, {}), o$1(Code$2, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of table rows"] }), o$1("div", { children: o$1(Table, { ariaLabel: null, selectionLimit: "multi", tagTable: "table", render: infoTable => {
                            return (o$1(_$2, { children: [o$1("label", { ...infoTable.propsLabel, children: "Table demo" }), o$1("table", { ...infoTable.propsTable, children: [o$1(TableSection, { tagTableSection: "thead", location: "head", render: infoSection => {
                                                    return (o$1("thead", { ...infoSection.propsTableSection, children: o$1(TableRow, { index: 0, ariaPropName: "aria-selected", tagTableRow: "tr", render: info => {
                                                                return (o$1("tr", { ...info.props, children: [o$1(DemoTableCell, { header: true, index: 0 }, 0), o$1(DemoTableCell, { header: true, index: 1 }, 1), o$1(DemoTableCell, { header: true, index: 2 }, 2)] }));
                                                            } }) }));
                                                } }), o$1(TableSection, { tagTableSection: "tbody", location: "body", render: infoSection => {
                                                    return (o$1("tbody", { ...infoSection.propsTableSection, children: infoSection.rearrangeableChildrenReturn.useRearrangedChildren(Array.from(function* () {
                                                            for (let i = 0; i < count; ++i) {
                                                                yield (o$1(TableRow, { ariaPropName: "aria-selected", tagTableRow: "tr", index: i, render: infoRow => {
                                                                        return (o$1("tr", { ...infoRow.props, children: [o$1(DemoTableCell, { index: 0 }, 0), o$1(DemoTableCell, { index: 1 }, 1), o$1(DemoTableCell, { index: 2 }, 2)] }));
                                                                        /*
        
        
                                                                        tagTableRow: "tr",
                                                                        makePropsTableRow: () => ({
                                                                            children: <>
                                                                                <DemoTableCell key={0} index={0} />
                                                                                <DemoTableCell key={1} index={1} />
                                                                                <DemoTableCell key={2} index={2} />
                                                                            </>
                                                                        })
                                                                    })
        
                                                                        */
                                                                    } }, i));
                                                            }
                                                        }())) }));
                                                } })] })] }));
                        } }) })] }));
    }

    function Blurb$1() {
        return (o$1(_$2, { children: [o$1("p", { children: ["Because Listboxes are not allowed to contain interactive content, a Gridlist is semantically a list that ", o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/grid/", children: "complies with the ARIA pattern for grids" }), "."] }), o$1("ul", { children: [o$1("li", { children: "In terms of keyboard navigation and tabbing through elements, a Gridlist is like a Listbox, but in two dimensions, like a Table." }), o$1("li", { children: "The rows of a Gridlist are sortable. It is possible to have multiple, independently sortable sections within the same Gridlist." })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: [o$1("li", { children: ["It's up to you to make sure that any interactive elements within a Gridlist respond to focus management properly with ", o$1("code", { children: "focusSelf" }), " prop and a properly placed ", o$1("code", { children: ["tabIndex=", "{", "info.rovingTabIndex.tabbable? 0 : -1", "}"] }), " in the ", o$1("code", { children: "render" }), " prop."] }), o$1("li", { children: "Any given row in a Gridlist can be marked as selected, but this is up to you to handle manually at the moment" })] })] }));
    }
    function Code$1() {
        return (o$1("code", { children: `` }));
    }
    function DemoGridlistChild1({ row }) {
        const text = "Gridlist child " + row;
        return (o$1(GridlistChild, { focusSelf: e => e.focus(), index: 0, render: info => {
                return (o$1("div", { ...info.props, children: text }));
                /*
                
                defaultRenderGridlistChild({ tagGridlistChild: "div", makePropsGridlistChild: (_info) => ({ children: text }) })
        
                */
            } }));
    }
    function DemoGridlistChild2({ tabbable }) {
        const cb = _(null);
        const [b, setB] = useState(false);
        return (o$1(GridlistChild, { focusSelf: e => { debugger; cb.current?.checkboxLikeReturn.focusSelf(); }, index: 1, render: info => {
                return (o$1("div", { ...info.props, children: o$1(Checkbox, { ariaLabel: "Whether this item is selected", ref: cb, labelPosition: "separate", tagInput: "input", tagLabel: "label", checked: b, disabled: false, onCheckedChange: e => setB(e[EventDetail].checked), render: infoCheckbox => {
                            return (o$1(_$2, { children: o$1("input", { tabIndex: tabbable ? 0 : -1, ...infoCheckbox.propsInput }) }));
                            /*
                            defaultRenderCheckbox({ labelPosition: "separate", tagInput: "input", tagLabel: "label", makeInputProps: () => ({ tabIndex: info.rovingTabIndex.tabbable ? 0 : -1 }), makeLabelProps: () => ({ children: "Checkbox" }) })
                            */
                        } }) }));
                /*
                
                defaultRenderGridlistChild<HTMLDivElement>({ tagGridlistChild: "div", makePropsGridlistChild: (info) => ({ children: <Checkbox ref={cb} labelPosition={"separate"} tagInput="input" tagLabel="label" checked={b} disabled={false} getDocument={getDocument} onCheckedChange={e => setB(e[EventDetail].checked)} render={defaultRenderCheckbox({ labelPosition: "separate", tagInput: "input", tagLabel: "label", makeInputProps: () => ({ tabIndex: info.rovingTabIndex.tabbable ? 0 : -1 }), makeLabelProps: () => ({ children: "Checkbox" }) })} /> }) })
        
                */
            } }));
    }
    function Demo$1() {
        const [count, setCount] = useState(5);
        const [selectedIndex, setSelectedIndex] = useState(null);
        return (o$1(_$2, { children: [o$1(Blurb$1, {}), o$1(Code$1, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of table rows"] }), o$1("div", { children: o$1(Gridlist, { ariaLabel: null, groupingType: "without-groups", selectionLimit: "single", selectedIndex: selectedIndex, onSelectedIndexChange: setSelectedIndex, render: infoGridlist => {
                            return (o$1(_$2, { children: [o$1("label", { ...infoGridlist.propsGridlistLabel, children: "Gridlist demo" }), o$1("ul", { ...infoGridlist.propsGridlist, children: infoGridlist.rearrangeableChildrenReturn.useRearrangedChildren(Array.from(function* () {
                                            for (let i = 0; i < count; ++i) {
                                                yield (o$1(GridlistRow, { ariaPropName: "aria-selected", selected: null, index: i, getSortValue: returnZero, render: info => {
                                                        return (o$1("li", { ...info.props, children: [o$1(DemoGridlistChild1, { row: i }), o$1(DemoGridlistChild2, { tabbable: info.rowAsChildOfGridReturn.rovingTabIndexChildReturn.tabbable })] }));
                                                        /*

                                                        defaultRenderGridlistRow({
                                                        tagGridlistRow: "div", makePropsGridlistRow: (_info) => ({
                                                            children: [<DemoGridlistChild1 row={i} />, <DemoGridlistChild2 />]
                                                        })
                                                    })
                                                    
                                                        */
                                                    } }));
                                            }
                                        }())) })] }));
                            /*
                            
                            defaultRenderGridlist({
                            tagGridlist: "div", makePropsGridlist: (_info) => ({
                                children: <GridlistSection index={0} compareRows={(lhs, rhs) => lhs - rhs} render={defaultRenderGridlistSection({
                                    tagGridlistSection: "div", makePropsGridlistSection: (_info) => ({
                                        children: Array.from(function* () {
                                            for (let i = 0; i < count; ++i) {
                                                yield (
                                                    <GridlistRow<HTMLDivElement, HTMLDivElement>
                                                        ariaPropName="aria-selected"
                                                        getDocument={getDocument}
                                                        selected={false}
                                                        unselectable={true}
                                                        subInfo={undefined}
                                                        index={i}
                                                        text=""
                                                        render={defaultRenderGridlistRow({
                                                            tagGridlistRow: "div", makePropsGridlistRow: (_info) => ({
                                                                children: [<DemoGridlistChild1 row={i} />, <DemoGridlistChild2 />]
                                                            })
                                                        })} />
                                                )
                                            }
                                        }())
                                    })
                                })} />
                            })
                        })
                            
                            */
                        } }) })] }));
    }

    const DemoListItem = R(function DemoListItem({ index }) {
        return (o$1(ToolbarChild, { index: index, focusSelf: e => e.focus(), ariaPropName: "aria-pressed", selectionMode: "activation", getSortValue: returnZero, render: info2 => {
                return (o$1(Button, { tagButton: "button", pressed: false, render: info3 => o$1("button", { ...useMergedProps(info2.props, info3.props), children: ["Toolbar child #", index] }) }));
            } }));
    });
    function Blurb() {
        return (o$1(_$2, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/toolbar/", children: "In accordance with the ARIA guidelines for Toolbar patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: "A Toolbar is a single widget for the purposes of keyboard navigation, like a Listbox." }), o$1("li", { children: "Toolbars are well-suited for \"button group\" patterns as well. Multiple groups can be contained within a single Toolbar, even multiple different types of components." })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: o$1("li", { children: ["You must label the Toolbar with ", o$1("code", { children: "aria-label" }), "."] }) })] }));
    }
    function Code() {
        return (o$1("code", { children: `` }));
    }
    function Demo() {
        const [count, setCount] = useState(5);
        return (o$1(_$2, { children: [o$1(Blurb, {}), o$1(Code, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of list items"] }), o$1("div", { children: o$1(Toolbar, { orientation: "horizontal", role: "toolbar", ariaLabel: null, render: (info) => o$1(_$2, { children: [o$1("label", { ...info.propsLabel, children: "Toolbar demo" }), o$1("div", { ...info.propsToolbar, children: Array.from((function* () {
                                        for (let i = 0; i < count; ++i) {
                                            yield o$1(DemoListItem, { index: i }, i);
                                        }
                                    })()) })] }) }) })] }));
    }

    //import { options } from "preact";
    //options.debounceRendering = queueMicrotask;
    //const RandomWords = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.".split(" ");
    setDebugLogging(true);
    const Component = () => {
        const { children, context } = useNotificationProvider({ targetAssertive: "aria-notifications-assertive", targetPolite: "aria-notifications-polite" });
        return (o$1(NotificationProviderContext.Provider, { value: context, children: [children, o$1(Heading, { heading: "Demos", children: [o$1(Heading, { heading: "Accordion", children: o$1(Demo$f, {}) }), o$1(Heading, { heading: "Button", children: o$1(Demo$e, {}) }), o$1(Heading, { heading: "Checkbox", children: o$1(Demo$d, {}) }), o$1(Heading, { heading: "Checkbox Group", children: o$1(Demo$c, {}) }), o$1(Heading, { heading: "Dialog", children: o$1(Demo$6, {}) }), o$1(Heading, { heading: "Gridlist", children: o$1(Demo$1, {}) }), o$1(Heading, { heading: "Single-select Listbox", children: o$1(Demo$a, {}) }), o$1(Heading, { heading: "Multi-select Listbox", children: o$1(Demo$b, {}) }), o$1(Heading, { heading: "Menu", children: o$1(Demo$9, {}) }), o$1(Heading, { heading: "Radio", children: o$1(Demo$8, {}) }), o$1(Heading, { heading: "Slider", children: o$1(Demo$7, {}) }), o$1(Heading, { heading: "Toolbar", children: o$1(Demo, {}) }), o$1(Heading, { heading: "Toast", children: o$1(Demo$3, {}) }), o$1(Heading, { heading: "Tooltip", children: o$1(Demo$4, {}) }), o$1(Heading, { heading: "Tabs", children: o$1(Demo$5, {}) }), o$1(Heading, { heading: "Table", children: o$1(Demo$2, {}) })] })] }));
    };
    requestAnimationFrame(() => {
        D$1(o$1(Component, {}), document.getElementById("root"));
    });

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
