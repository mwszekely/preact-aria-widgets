var _excluded=["children","heading"],_excluded2=["asyncHandler","capture"],_excluded3=["children","class","className","style","ref"],_excluded4=["children","class","className","style","ref"],_excluded5=["useHasFocusProps"],_excluded6=["onChildrenMountChange"],_excluded7=["useListNavigationChild","useListNavigationProps"],_excluded8=["onLastFocusedInnerChanged"],_excluded9=["focusSelf"],_excluded10=["onLastFocusedInnerChanged"],_excluded11=["onFocusedInnerChanged"],_excluded12=["children"],_excluded13=["useRearrangeableProps"],_excluded14=["useSingleSelectionChild"],_excluded15=["useListNavigationChild","useListNavigationProps"],_excluded16=["focusSelf","unselectable"],_excluded17=["useSingleSelectionChildProps","flags"],_excluded18=["useManagedChild"],_excluded19=["aria-pressed","tabIndex","role"],_excluded20=["onFocusedInnerChanged"],_excluded21=["aria-expanded","aria-disabled"],_excluded22=["role"],_excluded23=["aria-labelledby"],_excluded24=["useCheckboxLikeInputElement","useCheckboxLikeLabelElement"],_excluded25=["useListNavigationChild","useListNavigationProps"],_excluded26=["useListNavigationChildProps"],_excluded27=["useListNavigationChildProps"],_excluded28=["onLastActiveElementChange"],_excluded29=["aria-modal","role"],_excluded30=["useGridNavigationProps","useGridNavigationRow"],_excluded31=["useSingleSelectionChild"],_excluded32=["flags","useSingleSelectionChildProps"],_excluded33=["useGridNavigationCell","useGridNavigationRowProps"],_excluded34=["useGridNavigationCellProps"],_excluded35=["useSortableProps"],_excluded36=["onTabbableIndexChange"],_excluded37=["tagLabel","tagList","onSelect"],_excluded38=["selectedIndex"],_excluded39=["useLabelInput","useLabelLabel"],_excluded40=["useListNavigationSingleSelectionChild","useListNavigationSingleSelectionProps"],_excluded41=["useSoftDismissProps"],_excluded42=["useSentinelProps"],_excluded43=["useListNavigationChild","useListNavigationProps"],_excluded44=["useListNavigationChildProps"],_excluded45=["useToolbarChild","useToolbarProps"],_excluded46=["useToolbarChildProps"],_excluded47=["useMenuItem","useMenubarProps"],_excluded48=["useMenuSurfaceButtonProps","useMenuSurfaceProps","useMenuSurfaceSentinel","useMenuSurfaceChildProps"],_excluded49=["useMenuItemProps"],_excluded50=["useListNavigationSingleSelectionChild","useListNavigationSingleSelectionProps"],_excluded51=["useListNavigationSingleSelectionChildProps"],_excluded52=["useCheckboxLikeInputElement","useCheckboxLikeLabelElement"],_excluded53=["useManagedChild"],_excluded54=["useGridNavigationProps","useGridNavigationRow"],_excluded55=["subInfo"],_excluded56=["useGridNavigationCell","useGridNavigationRowProps"],_excluded57=["useGridNavigationCellProps"],_excluded58=["useSortableProps"],_excluded59=["onChildrenMountChange"],_excluded60=["useManagedChild"],_excluded61=["useListNavigationSingleSelectionChild","useListNavigationSingleSelectionProps"],_excluded62=["useListNavigationSingleSelectionChildProps"],_excluded63=["aria-orientation"],_excluded64=["flags"],_excluded65=["useManagedChild"],_excluded66=["role","aria-live","aria-relevant"],_excluded67=["onFocusedInnerChanged"],_excluded68=["onFocusedInnerChanged"],_excluded69=["disableArrowKeys","disableHomeEndKeys","expandedIndex","initialIndex","navigationDirection","onAfterChildLayoutEffect","onChildrenMountChange","render"],_excluded70=["useAccordionSection"],_excluded71=["useAccordionSectionBodyProps","useAccordionSectionHeaderProps"],_excluded72=["useButtonProps"],_excluded73=["children"],_excluded74=["useCheckboxInputElement","useCheckboxLabelElement"],_excluded75=["render","initialIndex","collator","disableArrowKeys","disableHomeEndKeys","navigationDirection","noTypeahead","typeaheadTimeout","indexDemangler","indexMangler","onAfterChildLayoutEffect","onChildrenMountChange","onTabbableIndexChange","onTabbableRender"],_excluded76=["useCheckboxGroupChild","useCheckboxGroupParent","useListNavigationProps"],_excluded77=["subInfo","render","index","text","flags","hidden","noModifyTabIndex","focusSelf"],_excluded78=["useCheckboxGroupParentProps"],_excluded79=["index","text","subInfo","flags","hidden","render","checked","noModifyTabIndex","focusSelf","onChangeFromParent"],_excluded80=["useListNavigationChildProps"],_excluded81=["children"],_excluded82=["children"],_excluded83=["children"],_excluded84=["children"],_excluded85=["children"],_excluded86=["useDialogBackdrop","useDialogBody","useDialogProps","useDialogTitle","useDialogFocusContainerProps"],_excluded87=["useDrawerBackdrop","useDrawerBody","useDrawerProps","useDrawerTitle","useDrawerFocusContainerProps"],_excluded88=["useGridlistSection","useGridlistProps","useGridlistRow"],_excluded89=["useGridlistSectionProps"],_excluded90=["useGridlistChild","useGridlistRowProps"],_excluded91=["useGridlistChildProps"],_excluded92=["useListboxSingleItem","useListboxSingleLabel","useListboxSingleProps"],_excluded93=["useListboxSingleItemProps"],_excluded94=["useListboxGroupHeadingProps","useListboxGroupContainerProps"],_excluded95=["useListboxMultiItem","useListboxMultiLabel","useListboxMultiProps"],_excluded96=["useListboxMultiItemProps"],_excluded97=["useMenuItem","useMenubarProps"],_excluded98=["useMenuItemProps"],_excluded99=["useMenuButtonProps","useMenuItem","useMenuProps","useMenuSentinel","useMenuSurfaceProps"],_excluded100=["children"],_excluded101=["children"],_excluded102=["useRadio","useRadioGroupLabelProps","useRadioGroupProps"],_excluded103=["useRadioInput","useRadioLabel"],_excluded104=["useSliderThumb"],_excluded105=["useSliderThumbProps"],_excluded106=["useTableBody","useTableProps","useTableRow","useTableSectionProps"],_excluded107=["useTableBodyProps"],_excluded108=["useTableCell","useTableRowProps"],_excluded109=["useTableCellProps"],_excluded110=["useTabList","useTabListLabel","useTabPanel"],_excluded111=["useTab","useTabListProps"],_excluded112=["useTabProps"],_excluded113=["useTabPanelProps"],_excluded114=["useToast","useToastContainerProps"],_excluded115=["useToolbarChild","useToolbarProps"],_excluded116=["useToolbarChildProps"],_excluded117=["useTooltipPopup","useTooltipTrigger"],_excluded118=["useLabelInput","useLabelLabel"],_excluded119=["useManagedChild"],_excluded120=["aria-valuemax","aria-valuenow","aria-valuetext","role"],_excluded121=["useProgressIndicator","useProgressLabel","useProgressRegion"],_excluded122=["useProgressIndicator","useProgressLabel","useProgressRegion"],_excluded123=["useProgressIndicatorProps"],_excluded124=["useProgressLabelProps"],_excluded125=["useProgressRegionProps"],_excluded126=["children"];function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err);}_next(undefined);});};}function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return typeof key==="symbol"?key:String(key);}function _toPrimitive(input,hint){if(typeof input!=="object"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||"default");if(typeof res!=="object")return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return(hint==="string"?String:Number)(input);}function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}(function(){'use strict';var n,l$1,u$1,t$1,o$2,r$2,f$1={},e$1=[],c$1=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function s$1(n,l){for(var u in l){n[u]=l[u];}return n;}function a$1(n){var l=n.parentNode;l&&l.removeChild(n);}function h$1(l,u,i){var t,o,r,f={};for(r in u){"key"==r?t=u[r]:"ref"==r?o=u[r]:f[r]=u[r];}if(arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):i),"function"==typeof l&&null!=l.defaultProps)for(r in l.defaultProps){void 0===f[r]&&(f[r]=l.defaultProps[r]);}return v$1(l,f,t,o,null);}function v$1(n,i,t,o,r){var f={type:n,props:i,key:t,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==r?++u$1:r};return null==r&&null!=l$1.vnode&&l$1.vnode(f),f;}function p$1(n){return n.children;}function d$1(n,l){this.props=n,this.context=l;}function _$2(n,l){if(null==l)return n.__?_$2(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++){if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;}return"function"==typeof n.type?_$2(n):null;}function k$1(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++){if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break;}}return k$1(n);}}function b$1(n){(!n.__d&&(n.__d=!0)&&t$1.push(n)&&!g$2.__r++||o$2!==l$1.debounceRendering)&&((o$2=l$1.debounceRendering)||setTimeout)(g$2);}function g$2(){for(var n;g$2.__r=t$1.length;){n=t$1.sort(function(n,l){return n.__v.__b-l.__v.__b;}),t$1=[],n.some(function(n){var l,u,i,t,o,r;n.__d&&(o=(t=(l=n).__v).__e,(r=l.__P)&&(u=[],(i=s$1({},t)).__v=t.__v+1,j$2(r,t,i,l.__n,void 0!==r.ownerSVGElement,null!=t.__h?[o]:null,u,null==o?_$2(t):o,t.__h),z$2(u,t),t.__e!=o&&k$1(t)));});}}function w$2(n,l,u,i,t,o,r,c,s,a){var h,y,d,k,b,g,w,x=i&&i.__k||e$1,C=x.length;for(u.__k=[],h=0;h<l.length;h++){if(null!=(k=u.__k[h]=null==(k=l[h])||"boolean"==typeof k?null:"string"==typeof k||"number"==typeof k||"bigint"==typeof k?v$1(null,k,null,null,k):Array.isArray(k)?v$1(p$1,{children:k},null,null,null):k.__b>0?v$1(k.type,k.props,k.key,k.ref?k.ref:null,k.__v):k)){if(k.__=u,k.__b=u.__b+1,null===(d=x[h])||d&&k.key==d.key&&k.type===d.type)x[h]=void 0;else for(y=0;y<C;y++){if((d=x[y])&&k.key==d.key&&k.type===d.type){x[y]=void 0;break;}d=null;}j$2(n,k,d=d||f$1,t,o,r,c,s,a),b=k.__e,(y=k.ref)&&d.ref!=y&&(w||(w=[]),d.ref&&w.push(d.ref,null,k),w.push(y,k.__c||b,k)),null!=b?(null==g&&(g=b),"function"==typeof k.type&&k.__k===d.__k?k.__d=s=m$1(k,s,n):s=A$1(n,k,d,x,b,s),"function"==typeof u.type&&(u.__d=s)):s&&d.__e==s&&s.parentNode!=n&&(s=_$2(d));}}for(u.__e=g,h=C;h--;){null!=x[h]&&N$1(x[h],x[h]);}if(w)for(h=0;h<w.length;h++){M$1(w[h],w[++h],w[++h]);}}function m$1(n,l,u){for(var i,t=n.__k,o=0;t&&o<t.length;o++){(i=t[o])&&(i.__=n,l="function"==typeof i.type?m$1(i,l,u):A$1(u,i,i,t,i.__e,l));}return l;}function x$1(n,l){return l=l||[],null==n||"boolean"==typeof n||(Array.isArray(n)?n.some(function(n){x$1(n,l);}):l.push(n)),l;}function A$1(n,l,u,i,t,o){var r,f,e;if(void 0!==l.__d)r=l.__d,l.__d=void 0;else if(null==u||t!=o||null==t.parentNode)n:if(null==o||o.parentNode!==n)n.appendChild(t),r=null;else{for(f=o,e=0;(f=f.nextSibling)&&e<i.length;e+=2){if(f==t)break n;}n.insertBefore(t,o),r=o;}return void 0!==r?r:t.nextSibling;}function C$1(n,l,u,i,t){var o;for(o in u){"children"===o||"key"===o||o in l||H$1(n,o,null,u[o],i);}for(o in l){t&&"function"!=typeof l[o]||"children"===o||"key"===o||"value"===o||"checked"===o||u[o]===l[o]||H$1(n,o,l[o],u[o],i);}}function $$1(n,l,u){"-"===l[0]?n.setProperty(l,u):n[l]=null==u?"":"number"!=typeof u||c$1.test(l)?u:u+"px";}function H$1(n,l,u,i,t){var o;n:if("style"===l){if("string"==typeof u)n.style.cssText=u;else{if("string"==typeof i&&(n.style.cssText=i=""),i)for(l in i){u&&l in u||$$1(n.style,l,"");}if(u)for(l in u){i&&u[l]===i[l]||$$1(n.style,l,u[l]);}}}else if("o"===l[0]&&"n"===l[1])o=l!==(l=l.replace(/Capture$/,"")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+o]=u,u?i||n.addEventListener(l,o?T$2:I$1,o):n.removeEventListener(l,o?T$2:I$1,o);else if("dangerouslySetInnerHTML"!==l){if(t)l=l.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("href"!==l&&"list"!==l&&"form"!==l&&"tabIndex"!==l&&"download"!==l&&l in n)try{n[l]=null==u?"":u;break n;}catch(n){}"function"==typeof u||(null==u||!1===u&&-1==l.indexOf("-")?n.removeAttribute(l):n.setAttribute(l,u));}}function I$1(n){this.l[n.type+!1](l$1.event?l$1.event(n):n);}function T$2(n){this.l[n.type+!0](l$1.event?l$1.event(n):n);}function j$2(n,u,i,t,o,r,f,e,c){var a,h,v,y,_,k,b,g,m,x,A,C,$,H,I,T=u.type;if(void 0!==u.constructor)return null;null!=i.__h&&(c=i.__h,e=u.__e=i.__e,u.__h=null,r=[e]),(a=l$1.__b)&&a(u);try{n:if("function"==typeof T){if(g=u.props,m=(a=T.contextType)&&t[a.__c],x=a?m?m.props.value:a.__:t,i.__c?b=(h=u.__c=i.__c).__=h.__E:("prototype"in T&&T.prototype.render?u.__c=h=new T(g,x):(u.__c=h=new d$1(g,x),h.constructor=T,h.render=O$1),m&&m.sub(h),h.props=g,h.state||(h.state={}),h.context=x,h.__n=t,v=h.__d=!0,h.__h=[],h._sb=[]),null==h.__s&&(h.__s=h.state),null!=T.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=s$1({},h.__s)),s$1(h.__s,T.getDerivedStateFromProps(g,h.__s))),y=h.props,_=h.state,v)null==T.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else{if(null==T.getDerivedStateFromProps&&g!==y&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(g,x),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(g,h.__s,x)||u.__v===i.__v){for(h.props=g,h.state=h.__s,u.__v!==i.__v&&(h.__d=!1),h.__v=u,u.__e=i.__e,u.__k=i.__k,u.__k.forEach(function(n){n&&(n.__=u);}),A=0;A<h._sb.length;A++){h.__h.push(h._sb[A]);}h._sb=[],h.__h.length&&f.push(h);break n;}null!=h.componentWillUpdate&&h.componentWillUpdate(g,h.__s,x),null!=h.componentDidUpdate&&h.__h.push(function(){h.componentDidUpdate(y,_,k);});}if(h.context=x,h.props=g,h.__v=u,h.__P=n,C=l$1.__r,$=0,"prototype"in T&&T.prototype.render){for(h.state=h.__s,h.__d=!1,C&&C(u),a=h.render(h.props,h.state,h.context),H=0;H<h._sb.length;H++){h.__h.push(h._sb[H]);}h._sb=[];}else do{h.__d=!1,C&&C(u),a=h.render(h.props,h.state,h.context),h.state=h.__s;}while(h.__d&&++$<25);h.state=h.__s,null!=h.getChildContext&&(t=s$1(s$1({},t),h.getChildContext())),v||null==h.getSnapshotBeforeUpdate||(k=h.getSnapshotBeforeUpdate(y,_)),I=null!=a&&a.type===p$1&&null==a.key?a.props.children:a,w$2(n,Array.isArray(I)?I:[I],u,i,t,o,r,f,e,c),h.base=u.__e,u.__h=null,h.__h.length&&f.push(h),b&&(h.__E=h.__=null),h.__e=!1;}else null==r&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=L$1(i.__e,u,i,t,o,r,f,c);(a=l$1.diffed)&&a(u);}catch(n){u.__v=null,(c||null!=r)&&(u.__e=e,u.__h=!!c,r[r.indexOf(e)]=null),l$1.__e(n,u,i);}}function z$2(n,u){l$1.__c&&l$1.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u);});}catch(n){l$1.__e(n,u.__v);}});}function L$1(l,u,i,t,o,r,e,c){var s,h,v,y=i.props,p=u.props,d=u.type,k=0;if("svg"===d&&(o=!0),null!=r)for(;k<r.length;k++){if((s=r[k])&&"setAttribute"in s==!!d&&(d?s.localName===d:3===s.nodeType)){l=s,r[k]=null;break;}}if(null==l){if(null===d)return document.createTextNode(p);l=o?document.createElementNS("http://www.w3.org/2000/svg",d):document.createElement(d,p.is&&p),r=null,c=!1;}if(null===d)y===p||c&&l.data===p||(l.data=p);else{if(r=r&&n.call(l.childNodes),h=(y=i.props||f$1).dangerouslySetInnerHTML,v=p.dangerouslySetInnerHTML,!c){if(null!=r)for(y={},k=0;k<l.attributes.length;k++){y[l.attributes[k].name]=l.attributes[k].value;}(v||h)&&(v&&(h&&v.__html==h.__html||v.__html===l.innerHTML)||(l.innerHTML=v&&v.__html||""));}if(C$1(l,p,y,o,c),v)u.__k=[];else if(k=u.props.children,w$2(l,Array.isArray(k)?k:[k],u,i,t,o&&"foreignObject"!==d,r,e,r?r[0]:i.__k&&_$2(i,0),c),null!=r)for(k=r.length;k--;){null!=r[k]&&a$1(r[k]);}c||("value"in p&&void 0!==(k=p.value)&&(k!==l.value||"progress"===d&&!k||"option"===d&&k!==y.value)&&H$1(l,"value",k,y.value,!1),"checked"in p&&void 0!==(k=p.checked)&&k!==l.checked&&H$1(l,"checked",k,y.checked,!1));}return l;}function M$1(n,u,i){try{"function"==typeof n?n(u):n.current=u;}catch(n){l$1.__e(n,i);}}function N$1(n,u,i){var t,o;if(l$1.unmount&&l$1.unmount(n),(t=n.ref)&&(t.current&&t.current!==n.__e||M$1(t,null,u)),null!=(t=n.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount();}catch(n){l$1.__e(n,u);}t.base=t.__P=null,n.__c=void 0;}if(t=n.__k)for(o=0;o<t.length;o++){t[o]&&N$1(t[o],u,i||"function"!=typeof n.type);}i||null==n.__e||a$1(n.__e),n.__=n.__e=n.__d=void 0;}function O$1(n,l,u){return this.constructor(n,u);}function P$1(u,i,t){var o,r,e;l$1.__&&l$1.__(u,i),r=(o="function"==typeof t)?null:t&&t.__k||i.__k,e=[],j$2(i,u=(!o&&t||i).__k=h$1(p$1,null,[u]),r||f$1,f$1,void 0!==i.ownerSVGElement,!o&&t?[t]:r?null:i.firstChild?n.call(i.childNodes):null,e,!o&&t?t:r?r.__e:i.firstChild,o),z$2(e,u);}function B$2(n,l){var u={__c:l="__cC"+r$2++,__:n,Consumer:function(n,l){return n.children(l);},Provider:function(n){var u,i;return this.getChildContext||(u=[],(i={})[l]=this,this.getChildContext=function(){return i;},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(b$1);},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n);};}),n.children;}};return u.Provider.__=u.Consumer.contextType=u;}n=e$1.slice,l$1={__e:function(n,l,u,i){for(var t,o,r;l=l.__;){if((t=l.__c)&&!t.__)try{if((o=t.constructor)&&null!=o.getDerivedStateFromError&&(t.setState(o.getDerivedStateFromError(n)),r=t.__d),null!=t.componentDidCatch&&(t.componentDidCatch(n,i||{}),r=t.__d),r)return t.__E=t;}catch(l){n=l;}}throw n;}},u$1=0,d$1.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=s$1({},this.state),"function"==typeof n&&(n=n(s$1({},u),this.props)),n&&s$1(u,n),null!=n&&this.__v&&(l&&this._sb.push(l),b$1(this));},d$1.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),b$1(this));},d$1.prototype.render=p$1,t$1=[],g$2.__r=0,r$2=0;var _$1=0;function o$1(o,e,n,t,f){var l,s,u={};for(s in e){"ref"==s?l=e[s]:u[s]=e[s];}var a={type:o,props:u,key:n,ref:l,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--_$1,__source:f,__self:t};if("function"==typeof o&&(l=o.defaultProps))for(s in l){void 0===u[s]&&(u[s]=l[s]);}return l$1.vnode&&l$1.vnode(a),a;}var t,r$1,u,i,o=0,f=[],c=[],e=l$1.__b,a=l$1.__r,v=l$1.diffed,l=l$1.__c,m=l$1.unmount;function d(t,u){l$1.__h&&l$1.__h(r$1,t,o||u),o=0;var i=r$1.__H||(r$1.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({__V:c}),i.__[t];}function p(n){return o=1,y(B$1,n);}function y(n,u,i){var o=d(t++,2);if(o.t=n,!o.__c&&(o.__=[i?i(u):B$1(void 0,u),function(n){var t=o.__N?o.__N[0]:o.__[0],r=o.t(t,n);t!==r&&(o.__N=[r,o.__[1]],o.__c.setState({}));}],o.__c=r$1,!r$1.u)){r$1.u=!0;var f=r$1.shouldComponentUpdate;r$1.shouldComponentUpdate=function(n,t,r){if(!o.__c.__H)return!0;var u=o.__c.__H.__.filter(function(n){return n.__c;});if(u.every(function(n){return!n.__N;}))return!f||f.call(this,n,t,r);var i=!1;return u.forEach(function(n){if(n.__N){var t=n.__[0];n.__=n.__N,n.__N=void 0,t!==n.__[0]&&(i=!0);}}),!(!i&&o.__c.props===n)&&(!f||f.call(this,n,t,r));};}return o.__N||o.__;}function h(u,i){var o=d(t++,3);!l$1.__s&&z$1(o.__H,i)&&(o.__=u,o.i=i,r$1.__H.__h.push(o));}function s(u,i){var o=d(t++,4);!l$1.__s&&z$1(o.__H,i)&&(o.__=u,o.i=i,r$1.__h.push(o));}function _(n){return o=5,F(function(){return{current:n};},[]);}function A(n,t,r){o=6,s(function(){return"function"==typeof n?(n(t()),function(){return n(null);}):n?(n.current=t(),function(){return n.current=null;}):void 0;},null==r?r:r.concat(n));}function F(n,r){var u=d(t++,7);return z$1(u.__H,r)?(u.__V=n(),u.i=r,u.__h=n,u.__V):u.__;}function T$1(n,t){return o=8,F(function(){return n;},t);}function q$1(n){var u=r$1.context[n.__c],i=d(t++,9);return i.c=n,u?(null==i.__&&(i.__=!0,u.sub(r$1)),u.props.value):n.__;}function b(){for(var t;t=f.shift();){if(t.__P&&t.__H)try{t.__H.__h.forEach(k),t.__H.__h.forEach(w$1),t.__H.__h=[];}catch(r){t.__H.__h=[],l$1.__e(r,t.__v);}}}l$1.__b=function(n){"function"!=typeof n.type||n.__m||null===n.__?n.__m||(n.__m=n.__&&n.__.__m?n.__.__m:""):n.__m=(n.__&&n.__.__m?n.__.__m:"")+(n.__&&n.__.__k?n.__.__k.indexOf(n):0),r$1=null,e&&e(n);},l$1.__r=function(n){a&&a(n),t=0;var i=(r$1=n.__c).__H;i&&(u===r$1?(i.__h=[],r$1.__h=[],i.__.forEach(function(n){n.__N&&(n.__=n.__N),n.__V=c,n.__N=n.i=void 0;})):(i.__h.forEach(k),i.__h.forEach(w$1),i.__h=[])),u=r$1;},l$1.diffed=function(t){v&&v(t);var o=t.__c;o&&o.__H&&(o.__H.__h.length&&(1!==f.push(o)&&i===l$1.requestAnimationFrame||((i=l$1.requestAnimationFrame)||j$1)(b)),o.__H.__.forEach(function(n){n.i&&(n.__H=n.i),n.__V!==c&&(n.__=n.__V),n.i=void 0,n.__V=c;})),u=r$1=null;},l$1.__c=function(t,r){r.some(function(t){try{t.__h.forEach(k),t.__h=t.__h.filter(function(n){return!n.__||w$1(n);});}catch(u){r.some(function(n){n.__h&&(n.__h=[]);}),r=[],l$1.__e(u,t.__v);}}),l&&l(t,r);},l$1.unmount=function(t){m&&m(t);var r,u=t.__c;u&&u.__H&&(u.__H.__.forEach(function(n){try{k(n);}catch(n){r=n;}}),u.__H=void 0,r&&l$1.__e(r,u.__v));};var g$1="function"==typeof requestAnimationFrame;function j$1(n){var t,r=function(){clearTimeout(u),g$1&&cancelAnimationFrame(t),setTimeout(n);},u=setTimeout(r,100);g$1&&(t=requestAnimationFrame(r));}function k(n){var t=r$1,u=n.__c;"function"==typeof u&&(n.__c=void 0,u()),r$1=t;}function w$1(n){var t=r$1;n.__c=n.__(),r$1=t;}function z$1(n,t){return!n||n.length!==t.length||t.some(function(t,r){return t!==n[r];});}function B$1(n,t){return"function"==typeof t?t(n):t;}function g(n,t){for(var e in t){n[e]=t[e];}return n;}function C(n,t){for(var e in n){if("__source"!==e&&!(e in t))return!0;}for(var r in t){if("__source"!==r&&n[r]!==t[r])return!0;}return!1;}function E(n){this.props=n;}function w(n,e){function r(n){var t=this.props.ref,r=t==n.ref;return!r&&t&&(t.call?t(null):t.current=null),e?!e(this.props,n)||!r:C(this.props,n);}function u(e){return this.shouldComponentUpdate=r,h$1(n,e);}return u.displayName="Memo("+(n.displayName||n.name)+")",u.prototype.isReactComponent=!0,u.__f=!0,u;}(E.prototype=new d$1()).isPureReactComponent=!0,E.prototype.shouldComponentUpdate=function(n,t){return C(this.props,n)||C(this.state,t);};var R=l$1.__b;l$1.__b=function(n){n.type&&n.type.__f&&n.ref&&(n.props.ref=n.ref,n.ref=null),R&&R(n);};var x="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function N(n){function t(t){var e=g({},t);return delete e.ref,n(e,t.ref||null);}return t.$$typeof=x,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(n.displayName||n.name)+")",t;}var O=l$1.__e;l$1.__e=function(n,t,e,r){if(n.then)for(var u,o=t;o=o.__;){if((u=o.__c)&&u.__c)return null==t.__e&&(t.__e=e.__e,t.__k=e.__k),u.__c(n,t);}O(n,t,e,r);};var T=l$1.unmount;function I(n,t,e){return n&&(n.__c&&n.__c.__H&&(n.__c.__H.__.forEach(function(n){"function"==typeof n.__c&&n.__c();}),n.__c.__H=null),null!=(n=g({},n)).__c&&(n.__c.__P===e&&(n.__c.__P=t),n.__c=null),n.__k=n.__k&&n.__k.map(function(n){return I(n,t,e);})),n;}function L(n,t,e){return n&&(n.__v=null,n.__k=n.__k&&n.__k.map(function(n){return L(n,t,e);}),n.__c&&n.__c.__P===t&&(n.__e&&e.insertBefore(n.__e,n.__d),n.__c.__e=!0,n.__c.__P=e)),n;}function U(){this.__u=0,this.t=null,this.__b=null;}function D(n){var t=n.__.__c;return t&&t.__a&&t.__a(n);}function M(){this.u=null,this.o=null;}l$1.unmount=function(n){var t=n.__c;t&&t.__R&&t.__R(),t&&!0===n.__h&&(n.type=null),T&&T(n);},(U.prototype=new d$1()).__c=function(n,t){var e=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(e);var u=D(r.__v),o=!1,i=function(){o||(o=!0,e.__R=null,u?u(l):l());};e.__R=i;var l=function(){if(! --r.__u){if(r.state.__a){var n=r.state.__a;r.__v.__k[0]=L(n,n.__c.__P,n.__c.__O);}var t;for(r.setState({__a:r.__b=null});t=r.t.pop();){t.forceUpdate();}}},c=!0===t.__h;r.__u++||c||r.setState({__a:r.__b=r.__v.__k[0]}),n.then(i,i);},U.prototype.componentWillUnmount=function(){this.t=[];},U.prototype.render=function(n,e){if(this.__b){if(this.__v.__k){var r=document.createElement("div"),o=this.__v.__k[0].__c;this.__v.__k[0]=I(this.__b,r,o.__O=o.__P);}this.__b=null;}var i=e.__a&&h$1(p$1,null,n.fallback);return i&&(i.__h=null),[h$1(p$1,null,e.__a?null:n.children),i];};var V=function(n,t,e){if(++e[1]===e[0]&&n.o.delete(t),n.props.revealOrder&&("t"!==n.props.revealOrder[0]||!n.o.size))for(e=n.u;e;){for(;e.length>3;){e.pop()();}if(e[1]<e[0])break;n.u=e=e[2];}};function W(n){return this.getChildContext=function(){return n.context;},n.children;}function P(n){var e=this,r=n.i;e.componentWillUnmount=function(){P$1(null,e.l),e.l=null,e.i=null;},e.i&&e.i!==r&&e.componentWillUnmount(),n.__v?(e.l||(e.i=r,e.l={nodeType:1,parentNode:r,childNodes:[],appendChild:function(n){this.childNodes.push(n),e.i.appendChild(n);},insertBefore:function(n,t){this.childNodes.push(n),e.i.appendChild(n);},removeChild:function(n){this.childNodes.splice(this.childNodes.indexOf(n)>>>1,1),e.i.removeChild(n);}}),P$1(h$1(W,{context:e.context},n.__v),e.l)):e.l&&e.componentWillUnmount();}function $(n,e){var r=h$1(P,{__v:n,i:e});return r.containerInfo=e,r;}(M.prototype=new d$1()).__a=function(n){var t=this,e=D(t.__v),r=t.o.get(n);return r[0]++,function(u){var o=function(){t.props.revealOrder?(r.push(u),V(t,n,r)):u();};e?e(o):o();};},M.prototype.render=function(n){this.u=null,this.o=new Map();var t=x$1(n.children);n.revealOrder&&"b"===n.revealOrder[0]&&t.reverse();for(var e=t.length;e--;){this.o.set(t[e],this.u=[1,0,this.u]);}return n.children;},M.prototype.componentDidUpdate=M.prototype.componentDidMount=function(){var n=this;this.o.forEach(function(t,e){V(n,e,t);});};var j="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,z=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,B="undefined"!=typeof document,H=function(n){return("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(n);};d$1.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach(function(t){Object.defineProperty(d$1.prototype,t,{configurable:!0,get:function(){return this["UNSAFE_"+t];},set:function(n){Object.defineProperty(this,t,{configurable:!0,writable:!0,value:n});}});});var q=l$1.event;function G(){}function J(){return this.cancelBubble;}function K(){return this.defaultPrevented;}l$1.event=function(n){return q&&(n=q(n)),n.persist=G,n.isPropagationStopped=J,n.isDefaultPrevented=K,n.nativeEvent=n;};var X={configurable:!0,get:function(){return this.class;}},nn=l$1.vnode;l$1.vnode=function(n){var t=n.type,e=n.props,u=e;if("string"==typeof t){var o=-1===t.indexOf("-");for(var i in u={},e){var l=e[i];B&&"children"===i&&"noscript"===t||"value"===i&&"defaultValue"in e&&null==l||("defaultValue"===i&&"value"in e&&null==e.value?i="value":"download"===i&&!0===l?l="":/ondoubleclick/i.test(i)?i="ondblclick":/^onchange(textarea|input)/i.test(i+t)&&!H(e.type)?i="oninput":/^onfocus$/i.test(i)?i="onfocusin":/^onblur$/i.test(i)?i="onfocusout":/^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(i)?i=i.toLowerCase():o&&z.test(i)?i=i.replace(/[A-Z0-9]/g,"-$&").toLowerCase():null===l&&(l=void 0),/^oninput$/i.test(i)&&(i=i.toLowerCase(),u[i]&&(i="oninputCapture")),u[i]=l);}"select"==t&&u.multiple&&Array.isArray(u.value)&&(u.value=x$1(e.children).forEach(function(n){n.props.selected=-1!=u.value.indexOf(n.props.value);})),"select"==t&&null!=u.defaultValue&&(u.value=x$1(e.children).forEach(function(n){n.props.selected=u.multiple?-1!=u.defaultValue.indexOf(n.props.value):u.defaultValue==n.props.value;})),n.props=u,e.class!=e.className&&(X.enumerable="className"in e,null!=e.className&&(u.class=e.className),Object.defineProperty(u,"className",X));}n.$$typeof=j,nn&&nn(n);};var tn=l$1.__r;l$1.__r=function(n){tn&&tn(n),n.__c;};var EventDetail=Symbol("event-detail");function enhanceEvent(e,detail){var event=e;event[EventDetail]=detail;return event;}var alreadyWarned=new Set();function overwriteWithWarning(componentName,props,propName,newValue){//const key = `${componentName};${propName}`;
var oldValue=props[propName];if(oldValue!=null){if(!alreadyWarned.has(String(propName))){alreadyWarned.add(String(propName));console.warn("The ".concat(String(propName)," attribute on ").concat(componentName," was given a value of ").concat(oldValue," but is being overwritten to ").concat(newValue," for conformance. Consider removing it before passing those props to ").concat(componentName,"."));}}props[propName]=newValue;}function debugLog(who){}var HeadingLevelContext=B$2(0);var Heading=w(function Heading(_ref2){var{children,heading}=_ref2,props=_objectWithoutProperties(_ref2,_excluded);var headingLevelBeforeUs=q$1(HeadingLevelContext);var newHeadingLevel=headingLevelBeforeUs+1;var tag;if(newHeadingLevel<=6){tag="h".concat(newHeadingLevel);}else{tag='div';overwriteWithWarning("Heading",props,"aria-level","".concat(newHeadingLevel));}return o$1(p$1,{children:o$1(HeadingReset,{newLevel:headingLevelBeforeUs+1,children:[h$1(tag,props,heading),children]})});});var HeadingReset=w(function HeadingReset(_ref3){var{newLevel,children}=_ref3;return o$1(HeadingLevelContext.Provider,{value:newLevel,children:children});});/**
     * Debug hook.
     *
     * Given a value or set of values, emits a console error if any of them change from one render to the next.
     *
     * Eventually, when useEvent lands, we hopefully won't need this.
     */function useEnsureStability(parentHookName){for(var _len=arguments.length,values=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){values[_key-1]=arguments[_key];}useHelper(values.length,0);values.forEach(useHelper);return;function useHelper(value,index){// Make sure that the provided functions are perfectly stable across renders
var helperToEnsureStability=_(value);var shownError=_(false);if(helperToEnsureStability.current!=value){if(!shownError.current){/* eslint-disable no-debugger */debugger;console.error("The hook ".concat(parentHookName," requires some or all of its arguments remain stable across each render; please check the ").concat(index,"-indexed argument."));shownError.current=true;}}}}function debounceRendering(f){var _l$1$debounceRenderin;((_l$1$debounceRenderin=l$1.debounceRendering)!==null&&_l$1$debounceRenderin!==void 0?_l$1$debounceRenderin:setTimeout)(f);}/**
     * Similar to `useState`, but for values that aren't "render-important" &ndash; updates don't cause a re-render and so the value shouldn't be used during render (though it certainly can, at least by re-rendering again).
     *
     * To compensate for this, you should pass a `useEffect`-esque callback that is run whenever the value changes.  Just like `useEffect`, this callback can return a cleanup function that's run before the value changes.  If you would like to re-render when the value changes (or, say, when the value meets some criteria), this is where you'll want to put in a call to a `setState` function.
     *
     * To summarize, it's like a `useState`-`useEffect` mashup:
     *
     * 1. It's like `useState`, except this version of `setState` doesn't re-render the whole component
     * 2. It's like `useState`, except you can run a function when the value changes that optionally returns a cleanup function
     * 3. It's like `useEffect`, except you trigger the effect function "remotely" instead of it running after rendering
     * 4. It's like `useEffect`, except the single "dependency" is based on your calls to `setState`
     *
     * Note that while calling `setState` doesn't cause any re-renders, you can do that within your `onChange` function, called whenever the value changes via that `setState`.
     *
     * @param onChange The "effect" function to run when the value changes. Effectively the same as `useEffect`'s "effect" function.  MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.
     * @param getInitialValue If provided, the effect will be invoked once with this value on mount. MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.
     * @param customDebounceRendering By default, changes to passive state are delayed by one tick so that we only check for changes in a similar way to Preact. You can override this to, for example, always run immediately instead.
     * @returns
     */function usePassiveState(onChange,getInitialValue,customDebounceRendering){var valueRef=_(Unset$1);var warningRef=_(false);var cleanupCallbackRef=_(undefined);// Make sure that the provided functions are perfectly stable across renders
useEnsureStability("usePassiveState",onChange,getInitialValue,customDebounceRendering);// Shared between "dependency changed" and "component unmounted".
var onShouldCleanUp=T$1(()=>{var cleanupCallback=cleanupCallbackRef.current;if(cleanupCallback)cleanupCallback();},[]);// There are a couple places where we'd like to use our initial
// value in place of having no value at all yet.
// This is the shared code for that, used on mount and whenever
// getValue is called.
var tryEnsureValue=T$1(()=>{if(valueRef.current===Unset$1&&getInitialValue!=undefined){try{var _onChange;var initialValue=getInitialValue();valueRef.current=initialValue;cleanupCallbackRef.current=(_onChange=onChange===null||onChange===void 0?void 0:onChange(initialValue,undefined))!==null&&_onChange!==void 0?_onChange:undefined;}catch(ex){// Exceptions are intentional to allow bailout (without exposing the Unset symbol)
}}},[/* getInitialValue and onChange intentionally omitted */]);var getValue=T$1(()=>{if(warningRef.current)console.warn("During onChange, prefer using the (value, prevValue) arguments instead of getValue -- it's ambiguous as to if you're asking for the old or new value at this point in time for this component.");// The first time we call getValue, if we haven't been given a value yet,
// (and we were given an initial value to use)
// return the initial value instead of nothing.
if(valueRef.current===Unset$1)tryEnsureValue();return valueRef.current===Unset$1?undefined:valueRef.current;},[]);s(()=>{// Make sure we've run our effect at least once on mount.
// (If we have an initial value, of course)
tryEnsureValue();},[]);// The actual code the user calls to (possibly) run a new effect.
var r=_({prevDep:Unset$1});var setValue=T$1(arg=>{// Regardless of anything else, figure out what our next value is about to be.
var nextValue=arg instanceof Function?arg(valueRef.current===Unset$1?undefined:valueRef.current):arg;if(r.current.prevDep===Unset$1&&nextValue!==valueRef.current){// This is the first request to change this value.
// Evaluate the request immediately, then queue up the onChange function
// Save our current value so that we can compare against it later
// (if we flip back to this state, then we won't send the onChange function)
r.current.prevDep=valueRef.current;// It's important to update this here (as well as below) in case customDebounceRendering invokes this immediately
valueRef.current=nextValue;// Schedule the actual check and invocation of onChange later to let effects settle
(customDebounceRendering!==null&&customDebounceRendering!==void 0?customDebounceRendering:debounceRendering)(()=>{var nextDep=valueRef.current;var prevDep=r.current.prevDep;if(r.current.prevDep!=valueRef.current){warningRef.current=true;try{var _onChange2;// Call any registered cleanup function
onShouldCleanUp();cleanupCallbackRef.current=(_onChange2=onChange===null||onChange===void 0?void 0:onChange(nextDep,prevDep===Unset$1?undefined:prevDep))!==null&&_onChange2!==void 0?_onChange2:undefined;valueRef.current=nextDep;}finally{// Allow the user to normally call getValue again
warningRef.current=false;}}// We've finished with everything, so mark us as being on a clean slate again.
r.current.prevDep=Unset$1;});}// Update the value immediately.
// This will be checked against prevDep to see if we should actually call onChange
valueRef.current=nextValue;},[]);return[getValue,setValue];}var Unset$1=Symbol();// Easy constants for getInitialValue
function returnTrue(){return true;}function returnFalse$1(){return false;}function returnNull(){return null;}function returnUndefined(){return undefined;}function returnZero(){return 0;}/*
    const activeElementUpdaters = new Map<Window | null | undefined, Set<undefined | ((e: Node | null) => void)>>();
    const lastActiveElementUpdaters = new Map<Window | null | undefined, Set<undefined | ((e: Node) => void)>>();
    const windowFocusedUpdaters = new Map<Window | null | undefined, Set<undefined | ((focused: boolean) => void)>>();
    const windowsFocusedUpdaters = new Map<Window | null | undefined, boolean>();*/var activeElementUpdaters=new Map();var lastActiveElementUpdaters=new Map();var windowFocusedUpdaters=new Map();var windowsFocusedUpdaters=new Map();//const microtasks = new Map<Set<any>, any>();
// The focusin and focusout events often fire syncronously in the middle of running code.
// E.G. calling element.focus() can cause a focusin event handler to immediately interrupt that code.
// For the purpose of improving stability, we debounce all focus events to the next microtask.
function forEachUpdater(window,map,value){var updaters=map.get(window);if(updaters){//if (!microtasks.has(updatersKey)) {
//debounceRendering(() => {
//const updatersKey = map.get(window)!;
//const value = microtasks.get(updatersKey);
//microtasks.delete(updatersKey);
if(updaters){for(var updater of updaters){var{lastSent,send}=updater;if(value!==lastSent){send(value);updater.lastSent=value;}}}//});
//}
//microtasks.set(updatersKey, value);
}}function focusout(e){var window=e.target.ownerDocument.defaultView;if(e.relatedTarget==null){forEachUpdater(window,activeElementUpdaters,null);}}function focusin(e){var window=e.target.ownerDocument.defaultView;var currentlyFocusedElement=e.target;forEachUpdater(window,activeElementUpdaters,currentlyFocusedElement);forEachUpdater(window,lastActiveElementUpdaters,currentlyFocusedElement);}function windowFocus(e){var window=e.target instanceof Window?e.target:e.currentTarget instanceof Window?e.currentTarget:e.target.ownerDocument.defaultView;windowsFocusedUpdaters.set(window,true);forEachUpdater(window,windowFocusedUpdaters,true);}function windowBlur(e){var window=e.target instanceof Window?e.target:e.currentTarget instanceof Window?e.currentTarget:e.target.ownerDocument.defaultView;windowsFocusedUpdaters.set(window,false);forEachUpdater(window,windowFocusedUpdaters,false);}/**
     * Allows you to inspect which element in the `document` currently has focus, which was most recently focused if none are currently, and whether or not the window has focus by returning the following functions:
     * * `getActiveElement()`
     * * `getLastActiveElement()`
     * * `getWindowFocused()`
     *
     * (The document's body receiving focus, like it does when you click on an empty area, is counted as no element having focus for all intents and purposes)
     *
     * This is a passive hook, so by default it returns getter functions that report this information but the component will not re-render by default when the active element changes.
     *
     * If you need the component to re-render when the active element changes, use the `on*Change` arguments to set some state on your end.
     */function useActiveElement(_ref4){var{onActiveElementChange,onLastActiveElementChange,onWindowFocusedChange,getDocument,getWindow}=_ref4;useEnsureStability("useActiveElement",onActiveElementChange,onLastActiveElementChange,onWindowFocusedChange,getDocument,getWindow);h(()=>{var _getWindow,_activeElementUpdater,_activeElementUpdater2,_activeElementUpdater3,_lastActiveElementUpd,_windowFocusedUpdater;var document=getDocument();var window=(_getWindow=getWindow===null||getWindow===void 0?void 0:getWindow(document))!==null&&_getWindow!==void 0?_getWindow:document===null||document===void 0?void 0:document.defaultView;if(((_activeElementUpdater=(_activeElementUpdater2=activeElementUpdaters.get(window))===null||_activeElementUpdater2===void 0?void 0:_activeElementUpdater2.size)!==null&&_activeElementUpdater!==void 0?_activeElementUpdater:0)===0){document===null||document===void 0?void 0:document.addEventListener("focusin",focusin,{passive:true});document===null||document===void 0?void 0:document.addEventListener("focusout",focusout,{passive:true});window===null||window===void 0?void 0:window.addEventListener("focus",windowFocus,{passive:true});window===null||window===void 0?void 0:window.addEventListener("blur",windowBlur,{passive:true});}// Add them even if they're undefined to more easily
// manage the ">0 means don't add handlers" logic.
var localActiveElementUpdaters=(_activeElementUpdater3=activeElementUpdaters.get(window))!==null&&_activeElementUpdater3!==void 0?_activeElementUpdater3:new Set();var localLastActiveElementUpdaters=(_lastActiveElementUpd=lastActiveElementUpdaters.get(window))!==null&&_lastActiveElementUpd!==void 0?_lastActiveElementUpd:new Set();var localWindowFocusedUpdaters=(_windowFocusedUpdater=windowFocusedUpdaters.get(window))!==null&&_windowFocusedUpdater!==void 0?_windowFocusedUpdater:new Set();var laeu={send:setActiveElement,lastSent:undefined};var llaeu={send:setLastActiveElement,lastSent:undefined};var lwfu={send:setWindowFocused,lastSent:undefined};localActiveElementUpdaters.add(laeu);localLastActiveElementUpdaters.add(llaeu);localWindowFocusedUpdaters.add(lwfu);activeElementUpdaters.set(window,localActiveElementUpdaters);lastActiveElementUpdaters.set(window,localLastActiveElementUpdaters);windowFocusedUpdaters.set(window,localWindowFocusedUpdaters);return()=>{activeElementUpdaters.get(window).delete(laeu);lastActiveElementUpdaters.get(window).delete(laeu);windowFocusedUpdaters.get(window).delete(lwfu);if(activeElementUpdaters.size===0){document===null||document===void 0?void 0:document.removeEventListener("focusin",focusin);document===null||document===void 0?void 0:document.removeEventListener("focusout",focusout);window===null||window===void 0?void 0:window.removeEventListener("focus",windowFocus);window===null||window===void 0?void 0:window.removeEventListener("blur",windowBlur);}};},[]);var[getActiveElement,setActiveElement]=usePassiveState(onActiveElementChange,returnNull);var[getLastActiveElement,setLastActiveElement]=usePassiveState(onLastActiveElementChange,returnNull);var[getWindowFocused,setWindowFocused]=usePassiveState(onWindowFocusedChange,returnTrue);return{getActiveElement,getLastActiveElement,getWindowFocused};}var Table$1="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";function base64(value){return Table$1[value];}function random6Bits(){return Math.floor(Math.random()*0b1000000);}function random64Bits(){return[random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits()];}/**
     * Returns a randomly-generated ID with an optional prefix.
     * Note that if the prefix is *explicitly* set to "", then
     * IDs that are not valid under HTML4 may be generated. Oh no.
     *
     *
     * (This is here, in this particular file, to avoid circular dependencies
     * without also making a utilities file.
     * Once we can remove this hook, we can put this function back with useRandomId)
     */function generateRandomId(prefix){return"".concat(prefix!==null&&prefix!==void 0?prefix:"id-").concat(random64Bits().map(n=>base64(n)).join(""));}var previousInputs=new Map();var toRun=new Map();// TODO: Whether this goes in options.diffed or options._commit
// is a post-suspense question.
// Right now, using options._commit has the problem of running
// *after* refs are applied, but we need to come before even that
// so `ref={someStableFunction}` works.
// 
// Also it's private.
//
// ...
// Well, useEvent or whatever is finally, finally 4 years later finally here
// which is cool and means we won't need this at all soon.
// So for now we'll stick with diff to prevent any weirdness with
// commit being private and all.
var commitName="diffed";var originalCommit=l$1[commitName];var newCommit=function(){for(var[id,effectInfo]of toRun){var oldInputs=previousInputs.get(id);if(argsChanged(oldInputs,effectInfo.inputs)){var _effectInfo$cleanup;(_effectInfo$cleanup=effectInfo.cleanup)===null||_effectInfo$cleanup===void 0?void 0:_effectInfo$cleanup.call(effectInfo);effectInfo.cleanup=effectInfo.effect();previousInputs.set(id,effectInfo.inputs);}}toRun.clear();for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}originalCommit===null||originalCommit===void 0?void 0:originalCommit(...args);};l$1[commitName]=newCommit;/**
     * Semi-private function to allow stable callbacks even within `useLayoutEffect` and ref assignment.
     *
     * Every render, we send the arguments to be evaluated after diffing has completed,
     * which happens before.
     *
     * @param effect
     * @param inputs
     */function useBeforeLayoutEffect(effect,inputs){/*(() => {
            const cleanup = useRef<void | (() => void) | null>(null);
            const prevArgsRef = useRef<Inputs>(null!);
            if (argsChanged(inputs, prevArgsRef.current)) {
                prevArgsRef.current = inputs!;
                if (cleanup.current)
                    cleanup.current();
                cleanup.current = effect();
            }
        })();*/var[id]=p(()=>generateRandomId());toRun.set(id,{effect,inputs,cleanup:null});h(()=>{return()=>{toRun.delete(id);previousInputs.delete(id);};},[id]);}function argsChanged(oldArgs,newArgs){return!!(!oldArgs||oldArgs.length!==(newArgs===null||newArgs===void 0?void 0:newArgs.length)||newArgs!==null&&newArgs!==void 0&&newArgs.some((arg,index)=>arg!==oldArgs[index]));}var Unset=Symbol("unset");/**
     * Given an input value, returns a constant getter function that can be used
     * inside of `useEffect` and friends without including it in the dependency array.
     *
     * This uses `options.diffed` in order to run before everything, even
     * ref assignment. This means this getter is safe to use anywhere ***except the render phase***.
     *
     * @param value
     * @returns
     */function useStableGetter(value){var ref=_(Unset);useBeforeLayoutEffect(()=>{ref.current=value;},[value]);return T$1(()=>{if(ref.current===Unset){throw new Error('Value retrieved from useStableGetter() cannot be called during render.');}return ref.current;},[]);}/**
     * Alternate useCallback() which always returns the same (wrapped) function reference
     * so that it can be excluded from the dependency arrays of `useEffect` and friends.
     *
     * Do not use during the render phase!  `useLayoutEffect` is fine though.
     */function useStableCallback(fn){var currentCallbackGetter=useStableGetter(fn);return T$1(function(){return currentCallbackGetter()(...arguments);},[]);}B$2(null);/**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */function isObject(value){var type=typeof value;return value!=null&&(type=='object'||type=='function');}/** Detect free variable `global` from Node.js. */var freeGlobal=typeof global=='object'&&global&&global.Object===Object&&global;/** Detect free variable `self`. */var freeSelf=typeof self=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */var now=function(){return root.Date.now();};/** Used to match a single whitespace character. */var reWhitespace=/\s/;/**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */function trimmedEndIndex(string){var index=string.length;while(index--&&reWhitespace.test(string.charAt(index))){}return index;}/** Used to match leading whitespace. */var reTrimStart=/^\s+/;/**
     * The base implementation of `_.trim`.
     *
     * @private
     * @param {string} string The string to trim.
     * @returns {string} Returns the trimmed string.
     */function baseTrim(string){return string?string.slice(0,trimmedEndIndex(string)+1).replace(reTrimStart,''):string;}/** Built-in value references. */var Symbol$1=root.Symbol;/** Used for built-in method references. */var objectProto$5=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty$3=objectProto$5.hasOwnProperty;/**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */var nativeObjectToString$1=objectProto$5.toString;/** Built-in value references. */var symToStringTag$1=Symbol$1?Symbol$1.toStringTag:undefined;/**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */function getRawTag(value){var isOwn=hasOwnProperty$3.call(value,symToStringTag$1),tag=value[symToStringTag$1];try{value[symToStringTag$1]=undefined;var unmasked=true;}catch(e){}var result=nativeObjectToString$1.call(value);if(unmasked){if(isOwn){value[symToStringTag$1]=tag;}else{delete value[symToStringTag$1];}}return result;}/** Used for built-in method references. */var objectProto$4=Object.prototype;/**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */var nativeObjectToString=objectProto$4.toString;/**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */function objectToString(value){return nativeObjectToString.call(value);}/** `Object#toString` result references. */var nullTag='[object Null]',undefinedTag='[object Undefined]';/** Built-in value references. */var symToStringTag=Symbol$1?Symbol$1.toStringTag:undefined;/**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */function baseGetTag(value){if(value==null){return value===undefined?undefinedTag:nullTag;}return symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value);}/**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */function isObjectLike(value){return value!=null&&typeof value=='object';}/** `Object#toString` result references. */var symbolTag='[object Symbol]';/**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */function isSymbol(value){return typeof value=='symbol'||isObjectLike(value)&&baseGetTag(value)==symbolTag;}/** Used as references for various `Number` constants. */var NAN=0/0;/** Used to detect bad signed hexadecimal string values. */var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;/** Used to detect binary string values. */var reIsBinary=/^0b[01]+$/i;/** Used to detect octal string values. */var reIsOctal=/^0o[0-7]+$/i;/** Built-in method references without a dependency on `root`. */var freeParseInt=parseInt;/**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=baseTrim(value);var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}/** Error message constants. */var FUNC_ERROR_TEXT$1='Expected a function';/* Built-in method references for those with the same name as other `lodash` methods. */var nativeMax=Math.max,nativeMin=Math.min;/**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=false,maxing=false,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT$1);}wait=toNumber(wait)||0;if(isObject(options)){leading=!!options.leading;maxing='maxWait'in options;maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;trailing='trailing'in options?!!options.trailing:trailing;}function invokeFunc(time){var args=lastArgs,thisArg=lastThis;lastArgs=lastThis=undefined;lastInvokeTime=time;result=func.apply(thisArg,args);return result;}function leadingEdge(time){// Reset any `maxWait` timer.
lastInvokeTime=time;// Start the timer for the trailing edge.
timerId=setTimeout(timerExpired,wait);// Invoke the leading edge.
return leading?invokeFunc(time):result;}function remainingWait(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime,timeWaiting=wait-timeSinceLastCall;return maxing?nativeMin(timeWaiting,maxWait-timeSinceLastInvoke):timeWaiting;}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime;// Either this is the first call, activity has stopped and we're at the
// trailing edge, the system time has gone backwards and we're treating
// it as the trailing edge, or we've hit the `maxWait` limit.
return lastCallTime===undefined||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;}function timerExpired(){var time=now();if(shouldInvoke(time)){return trailingEdge(time);}// Restart the timer.
timerId=setTimeout(timerExpired,remainingWait(time));}function trailingEdge(time){timerId=undefined;// Only invoke if we have `lastArgs` which means `func` has been
// debounced at least once.
if(trailing&&lastArgs){return invokeFunc(time);}lastArgs=lastThis=undefined;return result;}function cancel(){if(timerId!==undefined){clearTimeout(timerId);}lastInvokeTime=0;lastArgs=lastCallTime=lastThis=timerId=undefined;}function flush(){return timerId===undefined?result:trailingEdge(now());}function debounced(){var time=now(),isInvoking=shouldInvoke(time);lastArgs=arguments;lastThis=this;lastCallTime=time;if(isInvoking){if(timerId===undefined){return leadingEdge(lastCallTime);}if(maxing){// Handle invocations in a tight loop.
clearTimeout(timerId);timerId=setTimeout(timerExpired,wait);return invokeFunc(lastCallTime);}}if(timerId===undefined){timerId=setTimeout(timerExpired,wait);}return result;}debounced.cancel=cancel;debounced.flush=flush;return debounced;}/** Error message constants. */var FUNC_ERROR_TEXT='Expected a function';/**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */function throttle(func,wait,options){var leading=true,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(isObject(options)){leading='leading'in options?!!options.leading:leading;trailing='trailing'in options?!!options.trailing:trailing;}return debounce(func,wait,{'leading':leading,'maxWait':wait,'trailing':trailing});}/**
     * Slightly enhanced version of `useState` that includes a getter that remains constant
     * (i.e. you can use it in `useEffect` and friends without it being a dependency).
     *
     * @param initialState
     * @returns
     */function useState(initialState){// We keep both, but overrride the `setState` functionality
var[state,setStateP]=p(initialState);var ref=_(state);// Hijack the normal setter function 
// to also set our ref to the new value
var setState=T$1(value=>{if(typeof value==="function"){var callback=value;setStateP(prevValue=>{var nextValue=callback(prevValue);ref.current=nextValue;return nextValue;});}else{ref.current=value;setStateP(value);}},[]);var getState=()=>{return ref.current;};console.assert(ref.current===state||typeof state==="number"&&isNaN(state));return[state,setState,getState];}function identity$3(){for(var _len3=arguments.length,t=new Array(_len3),_key3=0;_key3<_len3;_key3++){t[_key3]=arguments[_key3];}return t;}function useThrottled(callback,wait,options){var throttled=F(()=>{return callback?throttle(callback,wait,options):null;},[callback,wait,options===null||options===void 0?void 0:options.leading,options===null||options===void 0?void 0:options.trailing]);h(()=>{return()=>throttled===null||throttled===void 0?void 0:throttled.cancel();},[throttled]);return throttled;}function useDebounced(callback,wait,options){var debounced=F(()=>{return callback?debounce(callback,wait,options):null;},[callback,wait,options===null||options===void 0?void 0:options.leading,options===null||options===void 0?void 0:options.maxWait,options===null||options===void 0?void 0:options.trailing]);h(()=>{return()=>debounced===null||debounced===void 0?void 0:debounced.cancel();},[debounced]);return debounced;}/**
     * Given an async function, returns a function that's suitable for non-async APIs,
     * along with other information about the current run's status.
     *
     * See also `useAsyncHandler` for a version that's specialized for DOM event handlers.
     *
     * When called multiple times in quick succession, (i.e. before the handler has finished),
     * this works like Lodash's `throttle` function with the `wait` option always
     * set to however long the handler takes to complete. A second call to the sync function will be
     * throttled until the first call has finished. The return value of the function is the result
     * of the previous invocation, or `undefined` on the first call.
     *
     * The handler is only ever delayed if one is currently running, so, e.g. for iOS touch events the
     * first call happens in the same event handler (which means things like calls to `element.focus()`
     * will work as intended, since that fails when the event is "split up")
     *
     * Finally, because the sync handler may be invoked on a delay, any property references on the arguments
     * provided might be stale by the time it's actually invoked (e.g. accessing `event.currentTarget.checked`
     * is not stable across time because it's a "live" value -- you almost always want the value that it
     * had at the original time the handler was called). The `capture` option allows you to save that kind of
     * dynamic data at the time it runs; the `AP` and `SP` type parameters likewise control
     * the parameters the async handler and sync handler expect respectively.
     *
     */function useAsync(asyncHandler,options){var _capture,_ref5;/* eslint-disable prefer-const */var{throttle,debounce,capture}=options!==null&&options!==void 0?options:{};(_capture=capture)!==null&&_capture!==void 0?_capture:capture=identity$3;// We keep, like, a lot of render-state, but it only ever triggers a re-render
// when we start/stop an async action.
// Keep track of this for the caller's sake -- we don't really care.
var[currentType,setCurrentType]=useState(null);var[runCount,setRunCount]=useState(0);var[settleCount,setSettleCount]=useState(0);var[resolveCount,setResolveCount]=useState(0);var[rejectCount,setRejectCount]=useState(0);// Things related to current execution
// Because we can both return and throw undefined, 
// we need separate state to track their existance too.
var[pending,setPending,getPending]=useState(false);var[result,setResult,getResult]=useState(undefined);var[error,setError,_getError]=useState(undefined);var[hasError,setHasError,_getHasError]=useState(false);var[hasResult,setHasResult,_getHasResult]=useState(false);// We implement our own throttling behavior in regards to waiting until the async handler finishes.
// These two passive state variables keep track of that, automatically queueing/dequeuing the next handler.
var[getQueued,setQueued]=usePassiveState(null,returnNull);// The actual sync handler.
// Capture/transform the given parameters if applicable,
// then run further logic that's debounced/throttled
var captureArgsAndExecuteDebouncedHandler=useStableCallback(function onNewExecuteRequest(){// Capture the arguments we were given.
// We might use them immediately, or we might store them to `queued`,
// but in either case we do need the captured value.
var captured=capture(...arguments);// This is all logic that deals with the captured value instead of the raw arguments.
// It's called in two separate circumstances,
// and has the debounce/throttle logic already applied
return executeHandlerWithDebounce(getPending(),...captured);});// This is the logic that runs when the handler is *just* about to start.
// This function itself is further transformed to be throttled/debounced if requested,
// so this might not be called immediately after 
var executeHandlerWithoutDebounce=useStableCallback(function onNewExecuteRequest2(enqueue){var onThen=value=>{setResult(value);setHasResult(true);setHasError(false);setResolveCount(r=>++r);};var onCatch=ex=>{setError(ex);setHasError(true);setHasResult(false);setRejectCount(r=>++r);};var onFinally=()=>{var queued=getQueued();setSettleCount(s=>++s);if(queued){setQueued(null);executeHandlerWithDebounce(false,...queued);}else{setPending(false);}};for(var _len4=arguments.length,newArgs=new Array(_len4>1?_len4-1:0),_key4=1;_key4<_len4;_key4++){newArgs[_key4-1]=arguments[_key4];}if(!enqueue){// Nothing is pending at the moment, so we can run our function immediately.
setRunCount(r=>++r);setPending(true);var _result=asyncHandler===null||asyncHandler===void 0?void 0:asyncHandler(...newArgs);var isPromise=_result!=null&&typeof _result=="object"&&"then"in _result;if(_result==null||!isPromise){// It's synchronous and returned successfully.
// Bail out early.
onThen(_result);onFinally();setCurrentType("sync");}else{_result.then(onThen).catch(onCatch).finally(onFinally);setCurrentType("async");}}else{// When we're still running a previous handler,
// just set ourselves as the next one to run and quit early.
// Nothing more to do.
setQueued(newArgs);}return getResult();});var executeHandlerWithT=useThrottled(!throttle?null:executeHandlerWithoutDebounce,throttle!==null&&throttle!==void 0?throttle:0);var executeHandlerWithD=useDebounced(!debounce?null:executeHandlerWithT!==null&&executeHandlerWithT!==void 0?executeHandlerWithT:executeHandlerWithoutDebounce,debounce!==null&&debounce!==void 0?debounce:0);var executeHandlerWithDebounce=(_ref5=executeHandlerWithD!==null&&executeHandlerWithD!==void 0?executeHandlerWithD:executeHandlerWithT)!==null&&_ref5!==void 0?_ref5:executeHandlerWithoutDebounce;var flushDebouncedPromise=useStableCallback(()=>{if(executeHandlerWithDebounce&&"flush"in executeHandlerWithDebounce)executeHandlerWithDebounce.flush();});return{syncHandler:captureArgsAndExecuteDebouncedHandler,currentType,pending,result,error,hasError,hasResult,resolveCount,rejectCount,settleCount,callCount:runCount,flushDebouncedPromise};}/**
     * Given an asyncronous event handler, returns a syncronous one that works on the DOM,
     * along with some other information related to the current state.
     * Does not modify any props.
     *
     * Note that because the handler you provide may be called with a delay, and
     * because the value of, e.g., an `<input>` element will likely be stale by the
     * time the delay is over, a `capture` function is necessary in order to
     * capture the relevant information from the DOM. Any other simple event data,
     * like `mouseX` or `shiftKey` can stay on the event itself and don't
     * need to be captured &ndash; it's never stale.
     *
     * ```tsx
     * const asyncOnInput = async (value: number, e: Event) => {
     *     [...] // Ex. send to a server and setState when done
     * };
     * const {
     *     // A sync version of asyncOnInput
     *     syncHandler,
     *     // True while the handler is running
     *     pending,
     *     // The error thrown, if any
     *     error,
     *     // Show this value while the operation's pending
     *     currentCapture,
     *     // And others, see `UseAsyncHandlerReturnType`
     *     ...rest
     * } = useAsyncHandler<HTMLInputElement>()(asyncOnInput, {
     *     // Pass in the capture function that saves event data
     *     // from being stale.
     *     capture: e => {
     *         // `capture` can have side-effects because
     *         // it's called exactly once per invocation
     *         e.preventDefault();
     *
     *         // Save this value so that it's never stale
     *         return e.currentTarget.valueAsNumber;
     *     }
     * });
     *
     * const onInput = pending? null : syncHandler;
     * ```
     *
     * The handler is automatically throttled to only run one at a time.
     * If the handler is called, and then before it finishes, is called again,
     * it will be put on hold until the current one finishes, at which point
     * the second one will run.  If the handler is called a third time before
     * the first has finished, it will *replace* the second, so only the most
     * recently called iteration of the handler will run.
     *
     *
     * You may optionally *also* specify debounce and throttle parameters that wait until the
     * syncronous handler has not been called for the specified number of
     * milliseconds, at which point we *actually* run the asyncronous handler
     * according to the logic in the previous paragraph. This is in
     * *addition* to throttling the handler, and does not replace that behavior.
     *
     * @see useAsync A more general version of this hook that can work with any type of handler, not just DOM event handlers.
     */function useAsyncHandler(_ref6){var{asyncHandler,capture:originalCapture}=_ref6,restAsyncOptions=_objectWithoutProperties(_ref6,_excluded2);// We need to differentiate between "nothing captured yet" and "`undefined` was captured"
var[currentCapture,setCurrentCapture,getCurrentCapture]=useState(undefined);var[hasCapture,setHasCapture]=useState(false);// Wrap around the normal `useAsync` `capture` function to also
// keep track of the last value the user actually input.
// 
// Without this there's no way to re-render the control with
// it being both controlled and also having the "correct" value,
// and at any rate also protects against sudden exceptions reverting
// your change out from under you.
var capture=useStableCallback(e=>{var captured=originalCapture(e);setCurrentCapture(captured);setHasCapture(true);return[captured,e];});return _objectSpread({getCurrentCapture,currentCapture,hasCapture},useAsync(asyncHandler,_objectSpread({capture},restAsyncOptions)));}/**
     * Allows a parent component to access information about certain
     * child components once they have rendered.
     *
     * This hook is designed to be lightweight, in that the parent keeps no state
     * and runs no effects.  Each child *does* run an effect, but with no state
     * changes unless you explicitly request them.
     *
     *
     */function useManagedChildren(parentParameters){var{managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange}}=parentParameters;useEnsureStability("useManagedChildren",onAfterChildLayoutEffect,onChildrenMountChange);var getHighestIndex=T$1(()=>{return managedChildrenArray.current.highestIndex;},[]);// All the information we have about our children is stored in this **stable** array.
// Any mutations to this array **DO NOT** trigger any sort of a re-render.
var managedChildrenArray=_({arr:[],rec:{},highestIndex:0,lowestIndex:0});// For indirect access to each child
// Compare getManagedChildInfo
// TODO: The primary use for this is flaggable closest fits
// which needs to search all children for that closest fit.
// It would be nice if there was something better for that.
var forEachChild=T$1(f=>{for(var child of managedChildrenArray.current.arr){if(child)f(child);}for(var field in managedChildrenArray.current.rec){var _child=managedChildrenArray.current.rec[field];if(_child)f(_child);}},[]);// Retrieves the information associated with the child with the given index.
// `undefined` if not child there, or it's unmounted.
var getManagedChildInfo=T$1(index=>{if(typeof index=="number")return managedChildrenArray.current.arr[index];else return managedChildrenArray.current.rec[index];},[]);// tl;dr this is a way to have run useLayoutEffect once after all N children
// have mounted and run *their* useLayoutEffect, but also *without* re-rendering
// ourselves because of having a `childCount` state or anything similar.
//
// When the child count ref updates, we want the parent to also run an effect
// to maybe do something with all these children that just mounted.
// The easiest way would be useEffect(..., [childCount]) but
// that would require us having a childCount state, then calling
// setChildCount and re-rendering every time children mount
// (only one re-render at a time unless children are staggered, but still)
// 
// As an alternate solution, any time a child uses ULE on mount, it queues a microtask
// to emulate running ULE on the parent. Only the first child will actually queue
// the microtask (by checking hasRemoteULE first) so that the "effect" only
// runs once. When it's done, hasRemoteULE is reset so it can run again if
// more children mount/unmount.
var hasRemoteULEChildMounted=_(null);var remoteULEChildChangedCausers=_(new Set());var remoteULEChildChanged=T$1(index=>{if(remoteULEChildChangedCausers.current.size==0){debounceRendering(()=>{onAfterChildLayoutEffect===null||onAfterChildLayoutEffect===void 0?void 0:onAfterChildLayoutEffect(remoteULEChildChangedCausers.current);remoteULEChildChangedCausers.current.clear();});}remoteULEChildChangedCausers.current.add(index);return()=>{};},[/* Must remain stable */]);var remoteULEChildMounted=T$1((index,mounted)=>{if(!hasRemoteULEChildMounted.current){hasRemoteULEChildMounted.current={mounts:new Set(),unmounts:new Set()};debounceRendering(()=>{onChildrenMountChange===null||onChildrenMountChange===void 0?void 0:onChildrenMountChange(hasRemoteULEChildMounted.current.mounts,hasRemoteULEChildMounted.current.unmounts);hasRemoteULEChildMounted.current=null;});}if(mounted){managedChildrenArray.current.highestIndex=Math.max(managedChildrenArray.current.highestIndex,index);}else{if(typeof index=="number"){delete managedChildrenArray.current.arr[index];var shave=0;while(shave<=managedChildrenArray.current.arr.length&&managedChildrenArray.current.arr[managedChildrenArray.current.arr.length-1-shave]===undefined){++shave;}managedChildrenArray.current.arr.splice(managedChildrenArray.current.arr.length-shave,shave);}else delete managedChildrenArray.current.rec[index];}hasRemoteULEChildMounted.current[mounted?"mounts":"unmounts"].add(index);},[/* Must remain stable */]);var useManagedChild=T$1(info=>{var{managedChild:{index,flags},subInfo}=info;// Any time our child props change, make that information available
// the parent if they need it.
// The parent can listen for all updates and only act on the ones it cares about,
// and multiple children updating in the same tick will all be sent at once.
s(()=>{// Insert this information in-place
if(typeof index=="number"){managedChildrenArray.current.arr[index]={index,flags:flags!==null&&flags!==void 0?flags:{},subInfo};}else{managedChildrenArray.current.rec[index]={index,flags:flags!==null&&flags!==void 0?flags:{},subInfo};}return remoteULEChildChanged(index);},[...Object.entries(info).flat(9)]);// 9 is infinity, right? Sure. Unrelated: TODO.
// When we mount, notify the parent via queueMicrotask
// (every child does this, so everything's coordinated to only queue a single microtask per tick)
// Do the same on unmount.
// Note: It's important that this comes AFTER remoteULEChildChanged
// so that remoteULEChildMounted has access to all the info on mount.
s(()=>{remoteULEChildMounted===null||remoteULEChildMounted===void 0?void 0:remoteULEChildMounted(index,true);return()=>remoteULEChildMounted===null||remoteULEChildMounted===void 0?void 0:remoteULEChildMounted(index,false);},[index]);},[/* Must remain stable */]);var managedChildren=_(_objectSpread(_objectSpread({},{_:managedChildrenArray.current}),{},{forEach:forEachChild,getAt:getManagedChildInfo,getHighestIndex:getHighestIndex,arraySlice:()=>{return managedChildrenArray.current.arr.slice();}}));return{useManagedChild,managedChildren:{children:managedChildren.current}};}/**
     * An extension to useManagedChildren that handles the following common case:
     * 1. You have a bunch of children
     * 2. At any given time, only 1 of them is "selected", "activated", "focusable", whatever (or 0 of them, that's cool too, just 0 or 1 though).
     * 3. The parent has control over who is "selected" via a numerical index.
     *
     * This hook allows for much easier control over selection management.
     *
     * Note that because you may want to use multiple flags with the same children, this hook *does not* use `useManagedChildren`!
     * You need to pass it the existing children, and you must pass your invocation of `useManagedChildren` the returned `onChildrenMountChange` handler!
     *
     * Also because of that, the types of this function are rather odd.  It's better to start off using a hook that already uses a flag, such as `useRovingTabIndex`, as an example.
     *
     *
     * @param param0
     * @returns
     */function useChildrenFlag(_ref7){var{children,initialIndex,closestFit,onIndexChange,key}=_ref7;useEnsureStability("useChildrenFlag",onIndexChange,key);var[getCurrentIndex,setCurrentIndex]=usePassiveState(onIndexChange,T$1(()=>initialIndex!==null&&initialIndex!==void 0?initialIndex:null,[]));var[getRequestedIndex,setRequestedIndex]=usePassiveState(null,T$1(()=>initialIndex!==null&&initialIndex!==void 0?initialIndex:null,[]));//    const getFitNullToZero = useStableGetter(fitNullToZero);
// Shared between onChildrenMountChange and changeIndex, not public (but could be I guess)
var getClosestFit=T$1(requestedIndex=>{var closestDistance=Infinity;var closestIndex=null;children.forEach(child=>{var _child$flags,_child$flags$key;if((_child$flags=child.flags)!==null&&_child$flags!==void 0&&(_child$flags$key=_child$flags[key])!==null&&_child$flags$key!==void 0&&_child$flags$key.isValid()){var newDistance=Math.abs(child.index-requestedIndex);if(newDistance<closestDistance||newDistance==closestDistance&&child.index<requestedIndex){closestDistance=newDistance;closestIndex=child.index;}}});return closestIndex;},[/* Must remain stable! */]);// Any time a child mounts/unmounts, we need to double-check to see if that affects 
// the "currently selected" (or whatever) index.  The two cases we're looking for:
// 1. The currently selected child unmounted
// 2. A child mounted, and it mounts with the index we're looking for
var reevaluateClosestFit=useStableCallback(()=>{var _currentChild$flags,_currentChild$flags$k;var requestedIndex=getRequestedIndex();var currentIndex=getCurrentIndex();var currentChild=currentIndex==null?null:children.getAt(currentIndex);if(requestedIndex!=null&&closestFit&&(requestedIndex!=currentIndex||currentChild==null||!((_currentChild$flags=currentChild.flags)!==null&&_currentChild$flags!==void 0&&(_currentChild$flags$k=_currentChild$flags[key])!==null&&_currentChild$flags$k!==void 0&&_currentChild$flags$k.isValid()))){var _currentChild$flags2;currentChild===null||currentChild===void 0?void 0:(_currentChild$flags2=currentChild.flags)===null||_currentChild$flags2===void 0?void 0:_currentChild$flags2[key].set(false);var closestFitIndex=getClosestFit(requestedIndex);setCurrentIndex(closestFitIndex);if(closestFitIndex!=null){var _closestFitChild$flag;var closestFitChild=children.getAt(closestFitIndex);console.assert(closestFitChild!=null,"Internal logic???");(_closestFitChild$flag=closestFitChild.flags)===null||_closestFitChild$flag===void 0?void 0:_closestFitChild$flag[key].set(true);}}});var changeIndex=T$1(arg=>{var requestedIndex=arg instanceof Function?arg(getRequestedIndex()):arg;//if (requestedIndex == null && getFitNullToZero())
//    requestedIndex = 0;
setRequestedIndex(requestedIndex);var currentIndex=getCurrentIndex();if(currentIndex==requestedIndex)return requestedIndex;var newMatchingChild=requestedIndex==null?null:children.getAt(requestedIndex);var oldMatchingChild=currentIndex==null?null:children.getAt(currentIndex);if(requestedIndex==null){var _oldMatchingChild$fla;// Easy case
setCurrentIndex(null);oldMatchingChild===null||oldMatchingChild===void 0?void 0:(_oldMatchingChild$fla=oldMatchingChild.flags)===null||_oldMatchingChild$fla===void 0?void 0:_oldMatchingChild$fla[key].set(false);return null;}else{var _newMatchingChild$fla;if(newMatchingChild&&(_newMatchingChild$fla=newMatchingChild.flags)!==null&&_newMatchingChild$fla!==void 0&&_newMatchingChild$fla[key].isValid()){var _oldMatchingChild$fla2,_newMatchingChild$fla2;setCurrentIndex(requestedIndex);oldMatchingChild===null||oldMatchingChild===void 0?void 0:(_oldMatchingChild$fla2=oldMatchingChild.flags)===null||_oldMatchingChild$fla2===void 0?void 0:_oldMatchingChild$fla2[key].set(false);(_newMatchingChild$fla2=newMatchingChild.flags)===null||_newMatchingChild$fla2===void 0?void 0:_newMatchingChild$fla2[key].set(true);return requestedIndex;}else{var closestFitIndex=getClosestFit(requestedIndex);setCurrentIndex(closestFitIndex);if(closestFitIndex!=null){var _oldMatchingChild$fla3,_newMatchingChild$fla3;newMatchingChild=children.getAt(closestFitIndex);console.assert(newMatchingChild!=null,"Internal logic???");oldMatchingChild===null||oldMatchingChild===void 0?void 0:(_oldMatchingChild$fla3=oldMatchingChild.flags)===null||_oldMatchingChild$fla3===void 0?void 0:_oldMatchingChild$fla3[key].set(false);(_newMatchingChild$fla3=newMatchingChild.flags)===null||_newMatchingChild$fla3===void 0?void 0:_newMatchingChild$fla3[key].set(true);return closestFitIndex;}else{var _oldMatchingChild$fla4;oldMatchingChild===null||oldMatchingChild===void 0?void 0:(_oldMatchingChild$fla4=oldMatchingChild.flags)===null||_oldMatchingChild$fla4===void 0?void 0:_oldMatchingChild$fla4[key].set(false);return null;}}}},[]);s(()=>{var _children$getAt,_children$getAt$flags,_children$getAt$flags2;if(initialIndex!=null)(_children$getAt=children.getAt(initialIndex))===null||_children$getAt===void 0?void 0:(_children$getAt$flags=_children$getAt.flags)===null||_children$getAt$flags===void 0?void 0:(_children$getAt$flags2=_children$getAt$flags[key])===null||_children$getAt$flags2===void 0?void 0:_children$getAt$flags2.set(true);},[]);return{changeIndex,reevaluateClosestFit,getCurrentIndex};}function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++){e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);}else for(t in e){e[t]&&(n&&(n+=" "),n+=t);}return n;}function clsx(){for(var e,t,f=0,n="";f<arguments.length;){(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);}return n;}function getDocument$e(element){var _ref8,_ref9,_element$ownerDocumen;return(_ref8=(_ref9=(_element$ownerDocumen=element===null||element===void 0?void 0:element.ownerDocument)!==null&&_element$ownerDocumen!==void 0?_element$ownerDocumen:document)!==null&&_ref9!==void 0?_ref9:window.document)!==null&&_ref8!==void 0?_ref8:globalThis.document;}function useMergedChildren(_ref10,_ref11){var{children:lhs}=_ref10;var{children:rhs}=_ref11;if(lhs==null&&rhs==null){return undefined;}else if(lhs==null){return rhs;}else if(rhs==null){return lhs;}else{return h$1(p$1,{},lhs,rhs);}}/**
     * Given two sets of props, merges their `class` and `className` properties.
     * Duplicate classes are removed (order doesn't matter anyway).
     *
     * @param lhs Classes of the first component
     * @param rhs Classes of the second component
     * @returns A string representing all combined classes from both arguments.
     */function useMergedClasses(_ref12,_ref13){var{class:lhsClass,className:lhsClassName}=_ref12;var{class:rhsClass,className:rhsClassName}=_ref13;// Note: For the sake of forward compatibility, this function is labelled as
// a hook, but as it uses no other hooks it technically isn't one.
if(lhsClass||rhsClass||lhsClassName||rhsClassName){var lhsClasses=clsx(lhsClass,lhsClassName).split(" ");var rhsClasses=clsx(rhsClass,rhsClassName).split(" ");var allClasses=new Set([...Array.from(lhsClasses),...Array.from(rhsClasses)]);return Array.from(allClasses).join(" ");}else{return undefined;}}function processRef(instance,ref){if(typeof ref==="function"){ref(instance);}else if(ref!=null){ref.current=instance;}else{/* eslint-disable no-debugger */debugger;console.assert(false,"Unknown ref type found that was neither a RefCallback nor a RefObject");}}/**
     * Combines two refs into one. This allows a component to both use its own ref *and* forward a ref that was given to it.
     * @param lhs
     * @param rhs
     * @returns
     */function useMergedRefs(_ref14,_ref15){var{ref:rhs}=_ref14;var{ref:lhs}=_ref15;var combined=T$1(current=>{processRef(current,lhs);processRef(current,rhs);},[lhs,rhs]);if(lhs==null&&rhs==null){return undefined;}else if(lhs==null){return rhs;}else if(rhs==null){return lhs;}else{return combined;}}function styleStringToObject(style){// TODO: This sucks D:
return Object.fromEntries(style.split(";").map(statement=>statement.split(":")));}/**
     * Merges two style objects, returning the result.
     *
     * @param style The user-given style prop for this component
     * @param obj The CSS properties you want added to the user-given style
     * @returns A CSS object containing the properties of both objects.
     */function useMergedStyles(lhs,rhs){var _lhs$style,_rhs$style2;// Easy case, when there are no styles to merge return nothing.
if(!(lhs!==null&&lhs!==void 0&&lhs.style)&&!(rhs!==null&&rhs!==void 0&&rhs.style))return undefined;if(typeof lhs!=typeof rhs){// Easy cases, when one is null and the other isn't.
if(lhs!==null&&lhs!==void 0&&lhs.style&&!(rhs!==null&&rhs!==void 0&&rhs.style))return lhs.style;if(!(lhs!==null&&lhs!==void 0&&lhs.style)&&rhs!==null&&rhs!==void 0&&rhs.style)return rhs.style;// They're both non-null but different types.
// Convert the string type to an object bag type and run it again.
if(lhs!==null&&lhs!==void 0&&lhs.style&&rhs!==null&&rhs!==void 0&&rhs.style){// (useMergedStyles isn't a true hook -- this isn't a violation)
if(typeof(lhs===null||lhs===void 0?void 0:lhs.style)=="string")return useMergedStyles({style:styleStringToObject(lhs===null||lhs===void 0?void 0:lhs.style)},rhs);if(typeof(rhs===null||rhs===void 0?void 0:rhs.style)=="string")return useMergedStyles(lhs,{style:styleStringToObject(rhs===null||rhs===void 0?void 0:rhs.style)});}// Logic???
return undefined;}// They're both strings, just concatenate them.
if(typeof(lhs===null||lhs===void 0?void 0:lhs.style)=="string"){var _rhs$style;return"".concat(lhs.style,";").concat((_rhs$style=rhs===null||rhs===void 0?void 0:rhs.style)!==null&&_rhs$style!==void 0?_rhs$style:"");}// They're both objects, just merge them.
return _objectSpread(_objectSpread({},(_lhs$style=lhs===null||lhs===void 0?void 0:lhs.style)!==null&&_lhs$style!==void 0?_lhs$style:{}),(_rhs$style2=rhs===null||rhs===void 0?void 0:rhs.style)!==null&&_rhs$style2!==void 0?_rhs$style2:{});}var log=console.warn;/**
     * Given two sets of props, merges them and returns the result.
     *
     * The hook is aware of and can intelligently merge `className`, `class`, `style`, `ref`, and all event handlers.
     * @param lhs2
     * @param rhs2
     * @returns
     */function useMergedProps(lhsAll,rhsAll){// First, separate the props we were given into two groups:
// lhsAll and rhsAll contain all the props we were given, and
// lhsMisc and rhsMisc contain all props *except* for the easy ones
// like className and style that we already know how to merge.
var{children:_lhsChildren,class:_lhsClass,className:_lhsClassName,style:_lhsStyle,ref:_lhsRef}=lhsAll,lhsMisc=_objectWithoutProperties(lhsAll,_excluded3);var{children:_rhsChildren,class:_rhsClass,className:_rhsClassName,style:_rhsStyle,ref:_rhsRef}=rhsAll,rhsMisc=_objectWithoutProperties(rhsAll,_excluded4);var ret=_objectSpread(_objectSpread({},lhsMisc),{},{ref:useMergedRefs(lhsAll,rhsAll),style:useMergedStyles(lhsAll,rhsAll),className:useMergedClasses(lhsAll,rhsAll),children:useMergedChildren(lhsAll,rhsAll)});if(ret.ref===undefined)delete ret.ref;if(ret.style===undefined)delete ret.style;if(ret.className===undefined)delete ret.className;if(ret.children===undefined)delete ret.children;// Now, do *everything* else
// Merge every remaining existing entry in lhs with what we've already put in ret.
//const lhsEntries = Object.entries(lhs) as [keyof T, T[keyof T]][];
var rhsEntries=Object.entries(rhsMisc);for(var[rhsKeyU,rhsValue]of rhsEntries){var rhsKey=rhsKeyU;var lhsValue=lhsMisc[rhsKey];if(typeof lhsValue==="function"||typeof rhsValue==="function"){// They're both functions that can be merged (or one's a function and the other's null).
// Not an *easy* case, but a well-defined one.
var merged=mergeFunctions(lhsValue,rhsValue);ret[rhsKey]=merged;}else{// Uh...we're here because one of them's null, right?
if(lhsValue==null&&rhsValue==null){if(rhsValue===null&&lhsValue===undefined)ret[rhsKey]=rhsValue;else ret[rhsKey]=lhsValue;}if(lhsValue==null)ret[rhsKey]=rhsValue;else if(rhsValue==null)ret[rhsKey]=lhsValue;else if(rhsValue==lhsValue);else{// Ugh.
// No good strategies here, just log it if requested
log===null||log===void 0?void 0:log("The prop \"".concat(rhsKey,"\" cannot simultaneously be the values ").concat(lhsValue," and ").concat(rhsValue,". One must be chosen outside of useMergedProps."));ret[rhsKey]=rhsValue;}}}return ret;}function mergeFunctions(lhs,rhs){if(!lhs)return rhs;if(!rhs)return lhs;return function(){var lv=lhs(...arguments);var rv=rhs(...arguments);if(lv instanceof Promise||rv instanceof Promise)return Promise.all([lv,rv]);};}/*
    function test<P extends h.JSX.HTMLAttributes<HTMLInputElement>>(props: P) {

        const id0: GenericGet<{}, "id", string> = "";
        const id3: GenericGet<{ id: undefined }, "id", string> = undefined;
        const id4: GenericGet<{ id: undefined }, "id", string> = undefined;
        const id5: GenericGet<{ id: undefined }, "id", string> = undefined;
        const id6: GenericGet<{ id: undefined }, "id", string> = undefined;
        //const id2: ZipSingle<string | undefined, string | undefined> = undefined;
        const id1: ZipObject<{ id: undefined }, { id: string }> = { id: undefined };

        type M1 = GenericGet<P, "style", string>;
        type M2 = GenericGet<{}, "style", string>;
        const m1: M1 = "";
        const m2: M1 = undefined;
        /// @ts-expect-error    Because number isn't assignable to string
        const m3: M1 = 0;

        const m4: M2 = "";
        const m5: M2 = undefined;
        /// @ts-expect-error    Because number isn't assignable to string
        const m6: M2 = 0;

        const p1: MergedProps<HTMLInputElement, {}, { id: string }> = useMergedProps<HTMLInputElement>()({}, { id: "string" });
        const p2: MergedProps<HTMLInputElement, { id: undefined }, { id: string }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: "string" });
        const p3: MergedProps<HTMLInputElement, { id: undefined }, { id: undefined }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: undefined });
        const p4: MergedProps<HTMLInputElement, {}, {}> = useMergedProps<HTMLInputElement>()({}, {});
        const p5 = useMergedProps<HTMLInputElement>()(props, {});
        const p6 = useMergedProps<HTMLInputElement>()(props, { id: undefined });
        const p7 = useMergedProps<HTMLInputElement>()(props, { id: "string" });


        p1.id?.concat("");
        p2.id?.concat("");
        /// @ts-expect-error    id can't be anything but undefined
        p3.id?.concat("");
        /// @ts-expect-error    id can't be anything but undefined
        p4.id?.concat("");


        p5.id?.concat("");
        p6.id?.concat("");
        p7.id?.concat("");

        /// @ts-expect-error    id must contain undefined
        p5.id.concat("");
        /// @ts-expect-error    id must contain undefined
        p6.id.concat("");
        /// @ts-expect-error    id must contain undefined
        p7.id.concat("");


        if (p5.allowFullScreen === undefined) {}
        else if (p5.allowFullScreen === false) {}
        else if (p5.allowFullScreen === true) {}
        else {
            acceptsNever(p5.allowFullScreen);
        }


        if (p6.allowFullScreen === undefined) {}
        else if (p6.allowFullScreen === false) {}
        else if (p6.allowFullScreen === true) {}
        else {
            acceptsNever(p6.allowFullScreen);
        }


        if (p7.allowFullScreen === undefined) {}
        else if (p7.allowFullScreen === false) {}
        else if (p7.allowFullScreen === true) {}
        else {
            acceptsNever(p7.allowFullScreen);
        }


        // Make sure it works recursively
        const r1a = useMergedProps<HTMLInputElement>()({}, p1);
        const r1b = useMergedProps<HTMLInputElement>()(props, p1);
        const r2a = useMergedProps<HTMLInputElement>()({}, p2);
        const r2b = useMergedProps<HTMLInputElement>()(props, p2);
        const r3a = useMergedProps<HTMLInputElement>()({}, p3);
        const r3b = useMergedProps<HTMLInputElement>()(props, p3);
        const r4a = useMergedProps<HTMLInputElement>()({}, p4);
        const r4b = useMergedProps<HTMLInputElement>()(props, p4);
        const r5a = useMergedProps<HTMLInputElement>()({}, p5);
        const r5b = useMergedProps<HTMLInputElement>()(props, p5);
        const r6a = useMergedProps<HTMLInputElement>()({}, p6);
        const r6b = useMergedProps<HTMLInputElement>()(props, p6);
        const r7a = useMergedProps<HTMLInputElement>()({}, p7);
        const r7b = useMergedProps<HTMLInputElement>()(props, p7);


        r1a.id?.concat("");
        r1b.id?.concat("");
        r2a.id?.concat("");
        r2b.id?.concat("");
        // @ts-expect-error    id can't be anything but undefined
        r3a.id?.concat("");
        r3b.id?.concat("");
        /// @ts-expect-error    id can't be anything but undefined
        r4a.id?.concat("");
        r4b.id?.concat("");


        r5a.id?.concat("");
        r5b.id?.concat("");
        r6a.id?.concat("");
        r6b.id?.concat("");
        r7a.id?.concat("");
        r7b.id?.concat("");

        /// @ts-expect-error    id must contain undefined
        r5a.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r5b.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r6a.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r6b.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r7a.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r7b.id.concat("");


        if (r5a.allowFullScreen === undefined) {}
        else if (r5a.allowFullScreen === false) {}
        else if (r5a.allowFullScreen === true) {}
        else {
            acceptsNever(r5a.allowFullScreen);
        }


        if (r5b.allowFullScreen === undefined) {}
        else if (r5b.allowFullScreen === false) {}
        else if (r5b.allowFullScreen === true) {}
        else {
            acceptsNever(r5b.allowFullScreen);
        }


        if (r6a.allowFullScreen === undefined) {}
        else if (r6a.allowFullScreen === false) {}
        else if (r6a.allowFullScreen === true) {}
        else {
            acceptsNever(r6a.allowFullScreen);
        }


        if (r6b.allowFullScreen === undefined) {}
        else if (r6b.allowFullScreen === false) {}
        else if (r6b.allowFullScreen === true) {}
        else {
            acceptsNever(r6b.allowFullScreen);
        }


        if (r7a.allowFullScreen === undefined) {}
        else if (r7a.allowFullScreen === false) {}
        else if (r7a.allowFullScreen === true) {}
        else {
            acceptsNever(r7a.allowFullScreen);
        }


        if (r7b.allowFullScreen === undefined) {}
        else if (r7b.allowFullScreen === false) {}
        else if (r7b.allowFullScreen === true) {}
        else {
            acceptsNever(r7b.allowFullScreen);
        }

    }
    function acceptsNever(n: never) {}
    */ /**
     * Allows accessing the element a ref references as soon as it does so.
     * *This hook itself returns a hook*--useRefElementProps modifies the props that you were going to pass to an HTMLElement,
     * adding a RefCallback and merging it with any existing ref that existed on the props.
     *
     * Don't forget to provide the Element as the type argument!
     *
     * @returns The element, and the sub-hook that makes it retrievable.
     */function useRefElement(args){var{onElementChange,onMount,onUnmount}=args!==null&&args!==void 0?args:{};useEnsureStability("useRefElement",onElementChange,onMount,onUnmount);// Called (indirectly) by the ref that the element receives.
var handler=T$1((e,prevValue)=>{var cleanup=onElementChange===null||onElementChange===void 0?void 0:onElementChange(e,prevValue);if(prevValue)onUnmount===null||onUnmount===void 0?void 0:onUnmount(prevValue);if(e)onMount===null||onMount===void 0?void 0:onMount(e);return cleanup;},[]);// Let us store the actual (reference to) the element we capture
var[getElement,setElement]=usePassiveState(handler,returnNull,runImmediately);var useRefElementProps=T$1(props=>useMergedProps({ref:setElement},props),[]);// Return both the element and the hook that modifies 
// the props and allows us to actually find the element
return{useRefElementProps,getElement};}function runImmediately(f){f();}/**
     * Allows attaching an event handler to any *non-Preact* element, and removing it when the component using the hook unmounts. The callback does not need to be stable across renders.
     *
     * Due to typing limitations, this function must be called like this:
     *
     * `useEventHandler(element, "input")<InputEvent>(e => {})`
     *
     * The type argument is optional, but narrows down the type from "a union of all events" to whatever you specify, and errors if it doesn't exist.
     *
     * There is a separate version that attaches event handlers to a set of props.
     * It takes different event string types (onEvent vs onevent).
     *
     * @param target A *non-Preact* node to attach the event to.
     * @returns
     * *
     */function useGlobalHandler(target,type,handler,options){// Note to self: The typing doesn't improve even if this is split up into a sub-function.
// No matter what, it seems impossible to get the handler's event object typed perfectly.
// It seems like it's guaranteed to always be a union of all available tupes.
// Again, no matter what combination of sub- or sub-sub-functions used.
var stableHandler=useStableCallback(handler!==null&&handler!==void 0?handler:()=>{});if(handler==null)stableHandler=null;h(()=>{if(stableHandler){target.addEventListener(type,stableHandler,options);return()=>target.removeEventListener(type,stableHandler,options);}},[target,type,stableHandler]);}/*!
    * tabbable 6.0.0
    * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
    */var candidateSelectors=['input','select','textarea','a[href]','button','[tabindex]:not(slot)','audio[controls]','video[controls]','[contenteditable]:not([contenteditable="false"])','details>summary:first-of-type','details'];var NoElement=typeof Element==='undefined';var matches=NoElement?function(){}:Element.prototype.matches||Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector;var getRootNode=!NoElement&&Element.prototype.getRootNode?function(element){return element.getRootNode();}:function(element){return element.ownerDocument;};var isInput=function isInput(node){return node.tagName==='INPUT';};var isHiddenInput=function isHiddenInput(node){return isInput(node)&&node.type==='hidden';};var isDetailsWithSummary=function isDetailsWithSummary(node){var r=node.tagName==='DETAILS'&&Array.prototype.slice.apply(node.children).some(function(child){return child.tagName==='SUMMARY';});return r;};var isNodeAttached=function isNodeAttached(node){var _nodeRootHost;// The root node is the shadow root if the node is in a shadow DOM; some document otherwise
//  (but NOT _the_ document; see second 'If' comment below for more).
// If rootNode is shadow root, it'll have a host, which is the element to which the shadow
//  is attached, and the one we need to check if it's in the document or not (because the
//  shadow, and all nodes it contains, is never considered in the document since shadows
//  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,
//  is hidden, or is not in the document itself but is detached, it will affect the shadow's
//  visibility, including all the nodes it contains). The host could be any normal node,
//  or a custom element (i.e. web component). Either way, that's the one that is considered
//  part of the document, not the shadow root, nor any of its children (i.e. the node being
//  tested).
// To further complicate things, we have to look all the way up until we find a shadow HOST
//  that is attached (or find none) because the node might be in nested shadows...
// If rootNode is not a shadow root, it won't have a host, and so rootNode should be the
//  document (per the docs) and while it's a Document-type object, that document does not
//  appear to be the same as the node's `ownerDocument` for some reason, so it's safer
//  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,
//  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when
//  node is actually detached.
var nodeRootHost=getRootNode(node).host;var attached=!!((_nodeRootHost=nodeRootHost)!==null&&_nodeRootHost!==void 0&&_nodeRootHost.ownerDocument.contains(nodeRootHost)||node.ownerDocument.contains(node));while(!attached&&nodeRootHost){var _nodeRootHost2;// since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,
//  which means we need to get the host's host and check if that parent host is contained
//  in (i.e. attached to) the document
nodeRootHost=getRootNode(nodeRootHost).host;attached=!!((_nodeRootHost2=nodeRootHost)!==null&&_nodeRootHost2!==void 0&&_nodeRootHost2.ownerDocument.contains(nodeRootHost));}return attached;};var isZeroArea=function isZeroArea(node){var _node$getBoundingClie=node.getBoundingClientRect(),width=_node$getBoundingClie.width,height=_node$getBoundingClie.height;return width===0&&height===0;};var isHidden=function isHidden(node,_ref){var displayCheck=_ref.displayCheck,getShadowRoot=_ref.getShadowRoot;// NOTE: visibility will be `undefined` if node is detached from the document
//  (see notes about this further down), which means we will consider it visible
//  (this is legacy behavior from a very long way back)
// NOTE: we check this regardless of `displayCheck="none"` because this is a
//  _visibility_ check, not a _display_ check
if(getComputedStyle(node).visibility==='hidden'){return true;}var isDirectSummary=matches.call(node,'details>summary:first-of-type');var nodeUnderDetails=isDirectSummary?node.parentElement:node;if(matches.call(nodeUnderDetails,'details:not([open]) *')){return true;}if(!displayCheck||displayCheck==='full'||displayCheck==='legacy-full'){if(typeof getShadowRoot==='function'){// figure out if we should consider the node to be in an undisclosed shadow and use the
//  'non-zero-area' fallback
var originalNode=node;while(node){var parentElement=node.parentElement;var rootNode=getRootNode(node);if(parentElement&&!parentElement.shadowRoot&&getShadowRoot(parentElement)===true// check if there's an undisclosed shadow
){// node has an undisclosed shadow which means we can only treat it as a black box, so we
//  fall back to a non-zero-area test
return isZeroArea(node);}else if(node.assignedSlot){// iterate up slot
node=node.assignedSlot;}else if(!parentElement&&rootNode!==node.ownerDocument){// cross shadow boundary
node=rootNode.host;}else{// iterate up normal dom
node=parentElement;}}node=originalNode;}// else, `getShadowRoot` might be true, but all that does is enable shadow DOM support
//  (i.e. it does not also presume that all nodes might have undisclosed shadows); or
//  it might be a falsy value, which means shadow DOM support is disabled
// Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)
//  now we can just test to see if it would normally be visible or not, provided it's
//  attached to the main document.
// NOTE: We must consider case where node is inside a shadow DOM and given directly to
//  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.
if(isNodeAttached(node)){// this works wherever the node is: if there's at least one client rect, it's
//  somehow displayed; it also covers the CSS 'display: contents' case where the
//  node itself is hidden in place of its contents; and there's no need to search
//  up the hierarchy either
return!node.getClientRects().length;}// Else, the node isn't attached to the document, which means the `getClientRects()`
//  API will __always__ return zero rects (this can happen, for example, if React
//  is used to render nodes onto a detached tree, as confirmed in this thread:
//  https://github.com/facebook/react/issues/9117#issuecomment-284228870)
//
// It also means that even window.getComputedStyle(node).display will return `undefined`
//  because styles are only computed for nodes that are in the document.
//
// NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable
//  somehow. Though it was never stated officially, anyone who has ever used tabbable
//  APIs on nodes in detached containers has actually implicitly used tabbable in what
//  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck="none"` mode -- essentially
//  considering __everything__ to be visible because of the innability to determine styles.
//
// v6.0.0: As of this major release, the default 'full' option __no longer treats detached
//  nodes as visible with the 'none' fallback.__
if(displayCheck!=='legacy-full'){return true;// hidden
}// else, fallback to 'none' mode and consider the node visible
}else if(displayCheck==='non-zero-area'){// NOTE: Even though this tests that the node's client rect is non-zero to determine
//  whether it's displayed, and that a detached node will __always__ have a zero-area
//  client rect, we don't special-case for whether the node is attached or not. In
//  this mode, we do want to consider nodes that have a zero area to be hidden at all
//  times, and that includes attached or not.
return isZeroArea(node);}// visible, as far as we can tell, or per current `displayCheck=none` mode, we assume
//  it's visible
return false;};// form fields (nested) inside a disabled fieldset are not focusable/tabbable
//  unless they are in the _first_ <legend> element of the top-most disabled
//  fieldset
var isDisabledFromFieldset=function isDisabledFromFieldset(node){if(/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)){var parentNode=node.parentElement;// check if `node` is contained in a disabled <fieldset>
while(parentNode){if(parentNode.tagName==='FIELDSET'&&parentNode.disabled){// look for the first <legend> among the children of the disabled <fieldset>
for(var i=0;i<parentNode.children.length;i++){var child=parentNode.children.item(i);// when the first <legend> (in document order) is found
if(child.tagName==='LEGEND'){// if its parent <fieldset> is not nested in another disabled <fieldset>,
// return whether `node` is a descendant of its first <legend>
return matches.call(parentNode,'fieldset[disabled] *')?true:!child.contains(node);}}// the disabled <fieldset> containing `node` has no <legend>
return true;}parentNode=parentNode.parentElement;}}// else, node's tabbable/focusable state should not be affected by a fieldset's
//  enabled/disabled state
return false;};var isNodeMatchingSelectorFocusable=function isNodeMatchingSelectorFocusable(options,node){if(node.disabled||isHiddenInput(node)||isHidden(node,options)||// For a details element with a summary, the summary element gets the focus
isDetailsWithSummary(node)||isDisabledFromFieldset(node)){return false;}return true;};var focusableCandidateSelector=/* #__PURE__ */candidateSelectors.concat('iframe').join(',');var isFocusable=function isFocusable(node,options){options=options||{};if(!node){throw new Error('No node provided');}if(matches.call(node,focusableCandidateSelector)===false){return false;}return isNodeMatchingSelectorFocusable(options,node);};var commonjsGlobal=typeof globalThis!=='undefined'?globalThis:typeof window!=='undefined'?window:typeof global!=='undefined'?global:typeof self!=='undefined'?self:{};(function(module,exports){(function(global,factory){factory();})(commonjsGlobal,function(){var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}/**
    	   * This work is licensed under the W3C Software and Document License
    	   * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).
    	   */(function(){// Return early if we're not running inside of the browser.
if(typeof window==='undefined'){return;}// Convenience function for converting NodeLists.
/** @type {typeof Array.prototype.slice} */var slice=Array.prototype.slice;/**
    	     * IE has a non-standard name for "matches".
    	     * @type {typeof Element.prototype.matches}
    	     */var matches=Element.prototype.matches||Element.prototype.msMatchesSelector;/** @type {string} */var _focusableElementsString=['a[href]','area[href]','input:not([disabled])','select:not([disabled])','textarea:not([disabled])','button:not([disabled])','details','summary','iframe','object','embed','[contenteditable]'].join(',');/**
    	     * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`
    	     * attribute.
    	     *
    	     * Its main functions are:
    	     *
    	     * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the
    	     *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering
    	     *   each focusable node in the subtree with the singleton `InertManager` which manages all known
    	     *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`
    	     *   instance exists for each focusable node which has at least one inert root as an ancestor.
    	     *
    	     * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`
    	     *   attribute is removed from the root node). This is handled in the destructor, which calls the
    	     *   `deregister` method on `InertManager` for each managed inert node.
    	     */var InertRoot=function(){/**
    	       * @param {!HTMLElement} rootElement The HTMLElement at the root of the inert subtree.
    	       * @param {!InertManager} inertManager The global singleton InertManager object.
    	       */function InertRoot(rootElement,inertManager){_classCallCheck(this,InertRoot);/** @type {!InertManager} */this._inertManager=inertManager;/** @type {!HTMLElement} */this._rootElement=rootElement;/**
    	         * @type {!Set<!InertNode>}
    	         * All managed focusable nodes in this InertRoot's subtree.
    	         */this._managedNodes=new Set();// Make the subtree hidden from assistive technology
if(this._rootElement.hasAttribute('aria-hidden')){/** @type {?string} */this._savedAriaHidden=this._rootElement.getAttribute('aria-hidden');}else{this._savedAriaHidden=null;}this._rootElement.setAttribute('aria-hidden','true');// Make all focusable elements in the subtree unfocusable and add them to _managedNodes
this._makeSubtreeUnfocusable(this._rootElement);// Watch for:
// - any additions in the subtree: make them unfocusable too
// - any removals from the subtree: remove them from this inert root's managed nodes
// - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable
//   element, make that node a managed node.
this._observer=new MutationObserver(this._onMutation.bind(this));this._observer.observe(this._rootElement,{attributes:true,childList:true,subtree:true});}/**
    	       * Call this whenever this object is about to become obsolete.  This unwinds all of the state
    	       * stored in this object and updates the state of all of the managed nodes.
    	       */_createClass(InertRoot,[{key:'destructor',value:function destructor(){this._observer.disconnect();if(this._rootElement){if(this._savedAriaHidden!==null){this._rootElement.setAttribute('aria-hidden',this._savedAriaHidden);}else{this._rootElement.removeAttribute('aria-hidden');}}this._managedNodes.forEach(function(inertNode){this._unmanageNode(inertNode.node);},this);// Note we cast the nulls to the ANY type here because:
// 1) We want the class properties to be declared as non-null, or else we
//    need even more casts throughout this code. All bets are off if an
//    instance has been destroyed and a method is called.
// 2) We don't want to cast "this", because we want type-aware optimizations
//    to know which properties we're setting.
this._observer=/** @type {?} */null;this._rootElement=/** @type {?} */null;this._managedNodes=/** @type {?} */null;this._inertManager=/** @type {?} */null;}/**
    	         * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.
    	         */},{key:'_makeSubtreeUnfocusable',/**
    	         * @param {!Node} startNode
    	         */value:function _makeSubtreeUnfocusable(startNode){var _this2=this;composedTreeWalk(startNode,function(node){return _this2._visitNode(node);});var activeElement=document.activeElement;if(!document.body.contains(startNode)){// startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.
var node=startNode;/** @type {!ShadowRoot|undefined} */var root=undefined;while(node){if(node.nodeType===Node.DOCUMENT_FRAGMENT_NODE){root=/** @type {!ShadowRoot} */node;break;}node=node.parentNode;}if(root){activeElement=root.activeElement;}}if(startNode.contains(activeElement)){activeElement.blur();// In IE11, if an element is already focused, and then set to tabindex=-1
// calling blur() will not actually move the focus.
// To work around this we call focus() on the body instead.
if(activeElement===document.activeElement){document.body.focus();}}}/**
    	         * @param {!Node} node
    	         */},{key:'_visitNode',value:function _visitNode(node){if(node.nodeType!==Node.ELEMENT_NODE){return;}var element=/** @type {!HTMLElement} */node;// If a descendant inert root becomes un-inert, its descendants will still be inert because of
// this inert root, so all of its managed nodes need to be adopted by this InertRoot.
if(element!==this._rootElement&&element.hasAttribute('inert')){this._adoptInertRoot(element);}if(matches.call(element,_focusableElementsString)||element.hasAttribute('tabindex')){this._manageNode(element);}}/**
    	         * Register the given node with this InertRoot and with InertManager.
    	         * @param {!Node} node
    	         */},{key:'_manageNode',value:function _manageNode(node){var inertNode=this._inertManager.register(node,this);this._managedNodes.add(inertNode);}/**
    	         * Unregister the given node with this InertRoot and with InertManager.
    	         * @param {!Node} node
    	         */},{key:'_unmanageNode',value:function _unmanageNode(node){var inertNode=this._inertManager.deregister(node,this);if(inertNode){this._managedNodes['delete'](inertNode);}}/**
    	         * Unregister the entire subtree starting at `startNode`.
    	         * @param {!Node} startNode
    	         */},{key:'_unmanageSubtree',value:function _unmanageSubtree(startNode){var _this3=this;composedTreeWalk(startNode,function(node){return _this3._unmanageNode(node);});}/**
    	         * If a descendant node is found with an `inert` attribute, adopt its managed nodes.
    	         * @param {!HTMLElement} node
    	         */},{key:'_adoptInertRoot',value:function _adoptInertRoot(node){var inertSubroot=this._inertManager.getInertRoot(node);// During initialisation this inert root may not have been registered yet,
// so register it now if need be.
if(!inertSubroot){this._inertManager.setInert(node,true);inertSubroot=this._inertManager.getInertRoot(node);}inertSubroot.managedNodes.forEach(function(savedInertNode){this._manageNode(savedInertNode.node);},this);}/**
    	         * Callback used when mutation observer detects subtree additions, removals, or attribute changes.
    	         * @param {!Array<!MutationRecord>} records
    	         * @param {!MutationObserver} self
    	         */},{key:'_onMutation',value:function _onMutation(records,self){records.forEach(function(record){var target=/** @type {!HTMLElement} */record.target;if(record.type==='childList'){// Manage added nodes
slice.call(record.addedNodes).forEach(function(node){this._makeSubtreeUnfocusable(node);},this);// Un-manage removed nodes
slice.call(record.removedNodes).forEach(function(node){this._unmanageSubtree(node);},this);}else if(record.type==='attributes'){if(record.attributeName==='tabindex'){// Re-initialise inert node if tabindex changes
this._manageNode(target);}else if(target!==this._rootElement&&record.attributeName==='inert'&&target.hasAttribute('inert')){// If a new inert root is added, adopt its managed nodes and make sure it knows about the
// already managed nodes from this inert subroot.
this._adoptInertRoot(target);var inertSubroot=this._inertManager.getInertRoot(target);this._managedNodes.forEach(function(managedNode){if(target.contains(managedNode.node)){inertSubroot._manageNode(managedNode.node);}});}}},this);}},{key:'managedNodes',get:function get(){return new Set(this._managedNodes);}/** @return {boolean} */},{key:'hasSavedAriaHidden',get:function get(){return this._savedAriaHidden!==null;}/** @param {?string} ariaHidden */},{key:'savedAriaHidden',set:function set(ariaHidden){this._savedAriaHidden=ariaHidden;}/** @return {?string} */,get:function get(){return this._savedAriaHidden;}}]);return InertRoot;}();/**
    	     * `InertNode` initialises and manages a single inert node.
    	     * A node is inert if it is a descendant of one or more inert root elements.
    	     *
    	     * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and
    	     * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element
    	     * is intrinsically focusable or not.
    	     *
    	     * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an
    	     * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the
    	     * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s
    	     * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,
    	     * or removes the `tabindex` attribute if the element is intrinsically focusable.
    	     */var InertNode=function(){/**
    	       * @param {!Node} node A focusable element to be made inert.
    	       * @param {!InertRoot} inertRoot The inert root element associated with this inert node.
    	       */function InertNode(node,inertRoot){_classCallCheck(this,InertNode);/** @type {!Node} */this._node=node;/** @type {boolean} */this._overrodeFocusMethod=false;/**
    	         * @type {!Set<!InertRoot>} The set of descendant inert roots.
    	         *    If and only if this set becomes empty, this node is no longer inert.
    	         */this._inertRoots=new Set([inertRoot]);/** @type {?number} */this._savedTabIndex=null;/** @type {boolean} */this._destroyed=false;// Save any prior tabindex info and make this node untabbable
this.ensureUntabbable();}/**
    	       * Call this whenever this object is about to become obsolete.
    	       * This makes the managed node focusable again and deletes all of the previously stored state.
    	       */_createClass(InertNode,[{key:'destructor',value:function destructor(){this._throwIfDestroyed();if(this._node&&this._node.nodeType===Node.ELEMENT_NODE){var element=/** @type {!HTMLElement} */this._node;if(this._savedTabIndex!==null){element.setAttribute('tabindex',this._savedTabIndex);}else{element.removeAttribute('tabindex');}// Use `delete` to restore native focus method.
if(this._overrodeFocusMethod){delete element.focus;}}// See note in InertRoot.destructor for why we cast these nulls to ANY.
this._node=/** @type {?} */null;this._inertRoots=/** @type {?} */null;this._destroyed=true;}/**
    	         * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.
    	         * If the object has been destroyed, any attempt to access it will cause an exception.
    	         */},{key:'_throwIfDestroyed',/**
    	         * Throw if user tries to access destroyed InertNode.
    	         */value:function _throwIfDestroyed(){if(this.destroyed){throw new Error('Trying to access destroyed InertNode');}}/** @return {boolean} */},{key:'ensureUntabbable',/** Save the existing tabindex value and make the node untabbable and unfocusable */value:function ensureUntabbable(){if(this.node.nodeType!==Node.ELEMENT_NODE){return;}var element=/** @type {!HTMLElement} */this.node;if(matches.call(element,_focusableElementsString)){if(/** @type {!HTMLElement} */element.tabIndex===-1&&this.hasSavedTabIndex){return;}if(element.hasAttribute('tabindex')){this._savedTabIndex=/** @type {!HTMLElement} */element.tabIndex;}element.setAttribute('tabindex','-1');if(element.nodeType===Node.ELEMENT_NODE){element.focus=function(){};this._overrodeFocusMethod=true;}}else if(element.hasAttribute('tabindex')){this._savedTabIndex=/** @type {!HTMLElement} */element.tabIndex;element.removeAttribute('tabindex');}}/**
    	         * Add another inert root to this inert node's set of managing inert roots.
    	         * @param {!InertRoot} inertRoot
    	         */},{key:'addInertRoot',value:function addInertRoot(inertRoot){this._throwIfDestroyed();this._inertRoots.add(inertRoot);}/**
    	         * Remove the given inert root from this inert node's set of managing inert roots.
    	         * If the set of managing inert roots becomes empty, this node is no longer inert,
    	         * so the object should be destroyed.
    	         * @param {!InertRoot} inertRoot
    	         */},{key:'removeInertRoot',value:function removeInertRoot(inertRoot){this._throwIfDestroyed();this._inertRoots['delete'](inertRoot);if(this._inertRoots.size===0){this.destructor();}}},{key:'destroyed',get:function get(){return(/** @type {!InertNode} */this._destroyed);}},{key:'hasSavedTabIndex',get:function get(){return this._savedTabIndex!==null;}/** @return {!Node} */},{key:'node',get:function get(){this._throwIfDestroyed();return this._node;}/** @param {?number} tabIndex */},{key:'savedTabIndex',set:function set(tabIndex){this._throwIfDestroyed();this._savedTabIndex=tabIndex;}/** @return {?number} */,get:function get(){this._throwIfDestroyed();return this._savedTabIndex;}}]);return InertNode;}();/**
    	     * InertManager is a per-document singleton object which manages all inert roots and nodes.
    	     *
    	     * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`
    	     * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.
    	     * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant
    	     * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance
    	     * is created for each such node, via the `_managedNodes` map.
    	     */var InertManager=function(){/**
    	       * @param {!Document} document
    	       */function InertManager(document){_classCallCheck(this,InertManager);if(!document){throw new Error('Missing required argument; InertManager needs to wrap a document.');}/** @type {!Document} */this._document=document;/**
    	         * All managed nodes known to this InertManager. In a map to allow looking up by Node.
    	         * @type {!Map<!Node, !InertNode>}
    	         */this._managedNodes=new Map();/**
    	         * All inert roots known to this InertManager. In a map to allow looking up by Node.
    	         * @type {!Map<!Node, !InertRoot>}
    	         */this._inertRoots=new Map();/**
    	         * Observer for mutations on `document.body`.
    	         * @type {!MutationObserver}
    	         */this._observer=new MutationObserver(this._watchForInert.bind(this));// Add inert style.
addInertStyle(document.head||document.body||document.documentElement);// Wait for document to be loaded.
if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',this._onDocumentLoaded.bind(this));}else{this._onDocumentLoaded();}}/**
    	       * Set whether the given element should be an inert root or not.
    	       * @param {!HTMLElement} root
    	       * @param {boolean} inert
    	       */_createClass(InertManager,[{key:'setInert',value:function setInert(root,inert){if(inert){if(this._inertRoots.has(root)){// element is already inert
return;}var inertRoot=new InertRoot(root,this);root.setAttribute('inert','');this._inertRoots.set(root,inertRoot);// If not contained in the document, it must be in a shadowRoot.
// Ensure inert styles are added there.
if(!this._document.body.contains(root)){var parent=root.parentNode;while(parent){if(parent.nodeType===11){addInertStyle(parent);}parent=parent.parentNode;}}}else{if(!this._inertRoots.has(root)){// element is already non-inert
return;}var _inertRoot=this._inertRoots.get(root);_inertRoot.destructor();this._inertRoots['delete'](root);root.removeAttribute('inert');}}/**
    	         * Get the InertRoot object corresponding to the given inert root element, if any.
    	         * @param {!Node} element
    	         * @return {!InertRoot|undefined}
    	         */},{key:'getInertRoot',value:function getInertRoot(element){return this._inertRoots.get(element);}/**
    	         * Register the given InertRoot as managing the given node.
    	         * In the case where the node has a previously existing inert root, this inert root will
    	         * be added to its set of inert roots.
    	         * @param {!Node} node
    	         * @param {!InertRoot} inertRoot
    	         * @return {!InertNode} inertNode
    	         */},{key:'register',value:function register(node,inertRoot){var inertNode=this._managedNodes.get(node);if(inertNode!==undefined){// node was already in an inert subtree
inertNode.addInertRoot(inertRoot);}else{inertNode=new InertNode(node,inertRoot);}this._managedNodes.set(node,inertNode);return inertNode;}/**
    	         * De-register the given InertRoot as managing the given inert node.
    	         * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert
    	         * node from the InertManager's set of managed nodes if it is destroyed.
    	         * If the node is not currently managed, this is essentially a no-op.
    	         * @param {!Node} node
    	         * @param {!InertRoot} inertRoot
    	         * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.
    	         */},{key:'deregister',value:function deregister(node,inertRoot){var inertNode=this._managedNodes.get(node);if(!inertNode){return null;}inertNode.removeInertRoot(inertRoot);if(inertNode.destroyed){this._managedNodes['delete'](node);}return inertNode;}/**
    	         * Callback used when document has finished loading.
    	         */},{key:'_onDocumentLoaded',value:function _onDocumentLoaded(){// Find all inert roots in document and make them actually inert.
var inertElements=slice.call(this._document.querySelectorAll('[inert]'));inertElements.forEach(function(inertElement){this.setInert(inertElement,true);},this);// Comment this out to use programmatic API only.
this._observer.observe(this._document.body||this._document.documentElement,{attributes:true,subtree:true,childList:true});}/**
    	         * Callback used when mutation observer detects attribute changes.
    	         * @param {!Array<!MutationRecord>} records
    	         * @param {!MutationObserver} self
    	         */},{key:'_watchForInert',value:function _watchForInert(records,self){var _this=this;records.forEach(function(record){switch(record.type){case'childList':slice.call(record.addedNodes).forEach(function(node){if(node.nodeType!==Node.ELEMENT_NODE){return;}var inertElements=slice.call(node.querySelectorAll('[inert]'));if(matches.call(node,'[inert]')){inertElements.unshift(node);}inertElements.forEach(function(inertElement){this.setInert(inertElement,true);},_this);},_this);break;case'attributes':if(record.attributeName!=='inert'){return;}var target=/** @type {!HTMLElement} */record.target;var inert=target.hasAttribute('inert');_this.setInert(target,inert);break;}},this);}}]);return InertManager;}();/**
    	     * Recursively walk the composed tree from |node|.
    	     * @param {!Node} node
    	     * @param {(function (!HTMLElement))=} callback Callback to be called for each element traversed,
    	     *     before descending into child nodes.
    	     * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.
    	     */function composedTreeWalk(node,callback,shadowRootAncestor){if(node.nodeType==Node.ELEMENT_NODE){var element=/** @type {!HTMLElement} */node;if(callback){callback(element);}// Descend into node:
// If it has a ShadowRoot, ignore all child elements - these will be picked
// up by the <content> or <shadow> elements. Descend straight into the
// ShadowRoot.
var shadowRoot=/** @type {!HTMLElement} */element.shadowRoot;if(shadowRoot){composedTreeWalk(shadowRoot,callback);return;}// If it is a <content> element, descend into distributed elements - these
// are elements from outside the shadow root which are rendered inside the
// shadow DOM.
if(element.localName=='content'){var content=/** @type {!HTMLContentElement} */element;// Verifies if ShadowDom v0 is supported.
var distributedNodes=content.getDistributedNodes?content.getDistributedNodes():[];for(var i=0;i<distributedNodes.length;i++){composedTreeWalk(distributedNodes[i],callback);}return;}// If it is a <slot> element, descend into assigned nodes - these
// are elements from outside the shadow root which are rendered inside the
// shadow DOM.
if(element.localName=='slot'){var slot=/** @type {!HTMLSlotElement} */element;// Verify if ShadowDom v1 is supported.
var _distributedNodes=slot.assignedNodes?slot.assignedNodes({flatten:true}):[];for(var _i=0;_i<_distributedNodes.length;_i++){composedTreeWalk(_distributedNodes[_i],callback);}return;}}// If it is neither the parent of a ShadowRoot, a <content> element, a <slot>
// element, nor a <shadow> element recurse normally.
var child=node.firstChild;while(child!=null){composedTreeWalk(child,callback);child=child.nextSibling;}}/**
    	     * Adds a style element to the node containing the inert specific styles
    	     * @param {!Node} node
    	     */function addInertStyle(node){if(node.querySelector('style#inert-style, link#inert-style')){return;}var style=document.createElement('style');style.setAttribute('id','inert-style');style.textContent='\n'+'[inert] {\n'+'  pointer-events: none;\n'+'  cursor: default;\n'+'}\n'+'\n'+'[inert], [inert] * {\n'+'  -webkit-user-select: none;\n'+'  -moz-user-select: none;\n'+'  -ms-user-select: none;\n'+'  user-select: none;\n'+'}\n';node.appendChild(style);}if(!HTMLElement.prototype.hasOwnProperty('inert')){/** @type {!InertManager} */var inertManager=new InertManager(document);Object.defineProperty(HTMLElement.prototype,'inert',{enumerable:true,/** @this {!HTMLElement} */get:function get(){return this.hasAttribute('inert');},/** @this {!HTMLElement} */set:function set(inert){inertManager.setInert(this,inert);}});}})();});})();/**
     * @license
     * Copyright 2016 Google Inc. All rights reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */(()=>{var _a,_b,_c;/* Symbols for private properties */var _blockingElements=Symbol();var _alreadyInertElements=Symbol();var _topElParents=Symbol();var _siblingsToRestore=Symbol();var _parentMO=Symbol();/* Symbols for private static methods */var _topChanged=Symbol();var _swapInertedSibling=Symbol();var _inertSiblings=Symbol();var _restoreInertedSiblings=Symbol();var _getParents=Symbol();var _getDistributedChildren=Symbol();var _isInertable=Symbol();var _handleMutations=Symbol();class BlockingElementsImpl{constructor(){/**
                 * The blocking elements.
                 */this[_a]=[];/**
                 * Used to keep track of the parents of the top element, from the element
                 * itself up to body. When top changes, the old top might have been removed
                 * from the document, so we need to memoize the inerted parents' siblings
                 * in order to restore their inerteness when top changes.
                 */this[_b]=[];/**
                 * Elements that are already inert before the first blocking element is
                 * pushed.
                 */this[_c]=new Set();}destructor(){// Restore original inertness.
this[_restoreInertedSiblings](this[_topElParents]);// Note we don't want to make these properties nullable on the class,
// since then we'd need non-null casts in many places. Calling a method on
// a BlockingElements instance after calling destructor will result in an
// exception.
var nullable=this;nullable[_blockingElements]=null;nullable[_topElParents]=null;nullable[_alreadyInertElements]=null;}get top(){var elems=this[_blockingElements];return elems[elems.length-1]||null;}push(element){if(!element||element===this.top){return;}// Remove it from the stack, we'll bring it to the top.
this.remove(element);this[_topChanged](element);this[_blockingElements].push(element);}remove(element){var i=this[_blockingElements].indexOf(element);if(i===-1){return false;}this[_blockingElements].splice(i,1);// Top changed only if the removed element was the top element.
if(i===this[_blockingElements].length){this[_topChanged](this.top);}return true;}pop(){var top=this.top;top&&this.remove(top);return top;}has(element){return this[_blockingElements].indexOf(element)!==-1;}/**
             * Sets `inert` to all document elements except the new top element, its
             * parents, and its distributed content.
             */[(_a=_blockingElements,_b=_topElParents,_c=_alreadyInertElements,_topChanged)](newTop){var toKeepInert=this[_alreadyInertElements];var oldParents=this[_topElParents];// No new top, reset old top if any.
if(!newTop){this[_restoreInertedSiblings](oldParents);toKeepInert.clear();this[_topElParents]=[];return;}var newParents=this[_getParents](newTop);// New top is not contained in the main document!
if(newParents[newParents.length-1].parentNode!==document.body){throw Error('Non-connected element cannot be a blocking element');}// Cast here because we know we'll call _inertSiblings on newParents
// below.
this[_topElParents]=newParents;var toSkip=this[_getDistributedChildren](newTop);// No previous top element.
if(!oldParents.length){this[_inertSiblings](newParents,toSkip,toKeepInert);return;}var i=oldParents.length-1;var j=newParents.length-1;// Find common parent. Index 0 is the element itself (so stop before it).
while(i>0&&j>0&&oldParents[i]===newParents[j]){i--;j--;}// If up the parents tree there are 2 elements that are siblings, swap
// the inerted sibling.
if(oldParents[i]!==newParents[j]){this[_swapInertedSibling](oldParents[i],newParents[j]);}// Restore old parents siblings inertness.
i>0&&this[_restoreInertedSiblings](oldParents.slice(0,i));// Make new parents siblings inert.
j>0&&this[_inertSiblings](newParents.slice(0,j),toSkip,null);}/**
             * Swaps inertness between two sibling elements.
             * Sets the property `inert` over the attribute since the inert spec
             * doesn't specify if it should be reflected.
             * https://html.spec.whatwg.org/multipage/interaction.html#inert
             */[_swapInertedSibling](oldInert,newInert){var siblingsToRestore=oldInert[_siblingsToRestore];// oldInert is not contained in siblings to restore, so we have to check
// if it's inertable and if already inert.
if(this[_isInertable](oldInert)&&!oldInert.inert){oldInert.inert=true;siblingsToRestore.add(oldInert);}// If newInert was already between the siblings to restore, it means it is
// inertable and must be restored.
if(siblingsToRestore.has(newInert)){newInert.inert=false;siblingsToRestore.delete(newInert);}newInert[_parentMO]=oldInert[_parentMO];newInert[_siblingsToRestore]=siblingsToRestore;oldInert[_parentMO]=undefined;oldInert[_siblingsToRestore]=undefined;}/**
             * Restores original inertness to the siblings of the elements.
             * Sets the property `inert` over the attribute since the inert spec
             * doesn't specify if it should be reflected.
             * https://html.spec.whatwg.org/multipage/interaction.html#inert
             */[_restoreInertedSiblings](elements){for(var element of elements){var mo=element[_parentMO];mo.disconnect();element[_parentMO]=undefined;var siblings=element[_siblingsToRestore];for(var sibling of siblings){sibling.inert=false;}element[_siblingsToRestore]=undefined;}}/**
             * Inerts the siblings of the elements except the elements to skip. Stores
             * the inerted siblings into the element's symbol `_siblingsToRestore`.
             * Pass `toKeepInert` to collect the already inert elements.
             * Sets the property `inert` over the attribute since the inert spec
             * doesn't specify if it should be reflected.
             * https://html.spec.whatwg.org/multipage/interaction.html#inert
             */[_inertSiblings](elements,toSkip,toKeepInert){for(var element of elements){// Assume element is not a Document, so it must have a parentNode.
var parent=element.parentNode;var children=parent.children;var inertedSiblings=new Set();for(var _j=0;_j<children.length;_j++){var sibling=children[_j];// Skip the input element, if not inertable or to be skipped.
if(sibling===element||!this[_isInertable](sibling)||toSkip&&toSkip.has(sibling)){continue;}// Should be collected since already inerted.
if(toKeepInert&&sibling.inert){toKeepInert.add(sibling);}else{sibling.inert=true;inertedSiblings.add(sibling);}}// Store the siblings that were inerted.
element[_siblingsToRestore]=inertedSiblings;// Observe only immediate children mutations on the parent.
var mo=new MutationObserver(this[_handleMutations].bind(this));element[_parentMO]=mo;var parentToObserve=parent;// If we're using the ShadyDOM polyfill, then our parent could be a
// shady root, which is an object that acts like a ShadowRoot, but isn't
// actually a node in the real DOM. Observe the real DOM parent instead.
var maybeShadyRoot=parentToObserve;if(maybeShadyRoot.__shady&&maybeShadyRoot.host){parentToObserve=maybeShadyRoot.host;}mo.observe(parentToObserve,{childList:true});}}/**
             * Handles newly added/removed nodes by toggling their inertness.
             * It also checks if the current top Blocking Element has been removed,
             * notifying and removing it.
             */[_handleMutations](mutations){var parents=this[_topElParents];var toKeepInert=this[_alreadyInertElements];for(var mutation of mutations){// If the target is a shadowRoot, get its host as we skip shadowRoots when
// computing _topElParents.
var target=mutation.target.host||mutation.target;var idx=target===document.body?parents.length:parents.indexOf(target);var inertedChild=parents[idx-1];var inertedSiblings=inertedChild[_siblingsToRestore];// To restore.
for(var _i2=0;_i2<mutation.removedNodes.length;_i2++){var sibling=mutation.removedNodes[_i2];if(sibling===inertedChild){console.info('Detected removal of the top Blocking Element.');this.pop();return;}if(inertedSiblings.has(sibling)){sibling.inert=false;inertedSiblings.delete(sibling);}}// To inert.
for(var _i3=0;_i3<mutation.addedNodes.length;_i3++){var _sibling=mutation.addedNodes[_i3];if(!this[_isInertable](_sibling)){continue;}if(toKeepInert&&_sibling.inert){toKeepInert.add(_sibling);}else{_sibling.inert=true;inertedSiblings.add(_sibling);}}}}/**
             * Returns if the element is inertable.
             */[_isInertable](element){return false===/^(style|template|script)$/.test(element.localName);}/**
             * Returns the list of newParents of an element, starting from element
             * (included) up to `document.body` (excluded).
             */[_getParents](element){var parents=[];var current=element;// Stop to body.
while(current&&current!==document.body){// Skip shadow roots.
if(current.nodeType===Node.ELEMENT_NODE){parents.push(current);}// ShadowDom v1
if(current.assignedSlot){// Collect slots from deepest slot to top.
while(current=current.assignedSlot){parents.push(current);}// Continue the search on the top slot.
current=parents.pop();continue;}current=current.parentNode||current.host;}return parents;}/**
             * Returns the distributed children of the element's shadow root.
             * Returns null if the element doesn't have a shadow root.
             */[_getDistributedChildren](element){var shadowRoot=element.shadowRoot;if(!shadowRoot){return null;}var result=new Set();var i;var j;var nodes;var slots=shadowRoot.querySelectorAll('slot');if(slots.length&&slots[0].assignedNodes){for(i=0;i<slots.length;i++){nodes=slots[i].assignedNodes({flatten:true});for(j=0;j<nodes.length;j++){if(nodes[j].nodeType===Node.ELEMENT_NODE){result.add(nodes[j]);}}}// No need to search for <content>.
}return result;}}document.$blockingElements=new BlockingElementsImpl();})();function blockingElements(){return getDocument$e().$blockingElements;}/**
     * Allows an element to trap focus by applying the "inert" attribute to all sibling, aunt, and uncle nodes.
     *
     * Automatically handles consecutive calls with a loosely applied stack operation
     * (specifically via `blockingElements`, with a small polyfill because I'm not sure how long
     * it'll take to find its way into the spec, if ever)
     * @param target
     */function useBlockingElement(enabled,getTarget){var stableGetTarget=useStableCallback(getTarget);/**
         * Push/pop the element from the blockingElements stack.
         */s(()=>{var target=stableGetTarget();if(enabled){// Sometimes blockingElements will fail if, for example,
// the target element isn't connected to document.body.
// This is rare, but it's better to fail silently with weird tabbing behavior
// than to crash the entire application.
try{blockingElements().push(target);return()=>{blockingElements().remove(target);};}catch(ex){// Well, semi-silently.
console.error(ex);}}},[enabled]);}function getTopElement(){return blockingElements().top;}var elementsToRestoreFocusTo=new Map();function useFocusTrap(_ref16){var{trapActive}=_ref16;var handleActiveChange=T$1((trapActive,element)=>{if(trapActive&&element){var rafHandle=requestAnimationFrame(()=>{// TODO: This extra queueMicrotask is needed for
// ...reasons?
queueMicrotask(()=>{var _findFirstFocusable;(_findFirstFocusable=findFirstFocusable(element))===null||_findFirstFocusable===void 0?void 0:_findFirstFocusable.focus();rafHandle=0;});});return()=>{if(rafHandle)cancelAnimationFrame(rafHandle);};}else if(element){// Restore the focus to the element
// that has returned to the top of the stack
var _rafHandle=requestAnimationFrame(()=>{queueMicrotask(()=>{var _elementsToRestoreFoc;(_elementsToRestoreFoc=elementsToRestoreFocusTo.get(getTopElement()))===null||_elementsToRestoreFoc===void 0?void 0:_elementsToRestoreFoc.focus();_rafHandle=0;});});return()=>{if(_rafHandle)cancelAnimationFrame(_rafHandle);};}},[]);var{getElement,useRefElementProps}=useRefElement({onElementChange:useStableCallback(element=>handleActiveChange(trapActive,element))});var{getLastActiveElement}=useActiveElement({getDocument:useStableCallback(()=>{var _getElement$ownerDocu,_getElement;return(_getElement$ownerDocu=(_getElement=getElement())===null||_getElement===void 0?void 0:_getElement.ownerDocument)!==null&&_getElement$ownerDocu!==void 0?_getElement$ownerDocu:window.document;})});// When the trap becomes active, before we let the blockingElements hook run,
// keep track of whatever's currently focused and save it.
s(()=>{var element=getElement();if(trapActive&&element){var _getLastActiveElement;var _document=getDocument$e(element);// Save the currently focused element
// to whatever's currently at the top of the stack
elementsToRestoreFocusTo.set(getTopElement(),(_getLastActiveElement=getLastActiveElement())!==null&&_getLastActiveElement!==void 0?_getLastActiveElement:_document.body);}},[trapActive]);useBlockingElement(trapActive,getElement);/**
         * Any time we activate or deactivate the trap,
         * change focus to something else (something in
         * the trap if it's active, or whatever we've
         * tracked in elementsToRestoreFocusTo if not)
         */s(()=>{handleActiveChange(trapActive,getElement());},[trapActive]);var useFocusTrapProps=props=>{var p1=useRefElementProps(props);var p2={"aria-modal":trapActive?"true":undefined};return useMergedProps(p1,p2);};return{useFocusTrapProps,getElement};}/**
     * Returns the first focusable element contained within the given node, or null if none are found.
     * @param element
     * @returns
     */function findFirstFocusable(element){var treeWalker=document.createTreeWalker(element,NodeFilter.SHOW_ELEMENT,{acceptNode:node=>node instanceof Element&&isFocusable(node)?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP});var firstFocusable=treeWalker.firstChild();return firstFocusable;}/**
     * Returns a function that will, when called, force the component
     * that uses this hook to re-render itself.
     *
     * It's a bit smelly, so best to use sparingly.
     */function useForceUpdate(){var[,set]=p(0);return _(()=>set(i=>++i)).current;}function useHasFocus(_ref17){var{onFocusedChanged,onFocusedInnerChanged,onLastFocusedChanged,onLastFocusedInnerChanged,onLastActiveElementChange,onActiveElementChange,onWindowFocusedChange,getDocument,getWindow,onElementChange,onMount,onUnmount}=_ref17;useEnsureStability("useHasFocus",onFocusedChanged,onFocusedInnerChanged,onLastFocusedChanged,onLastFocusedInnerChanged,onLastActiveElementChange,onActiveElementChange,onWindowFocusedChange);var[getFocused,setFocused]=usePassiveState(onFocusedChanged,returnFalse$1);var[getFocusedInner,setFocusedInner]=usePassiveState(onFocusedInnerChanged,returnFalse$1);var[getLastFocused,setLastFocused]=usePassiveState(onLastFocusedChanged,returnFalse$1);var[getLastFocusedInner,setLastFocusedInner]=usePassiveState(onLastFocusedInnerChanged,returnFalse$1);var{getElement,useRefElementProps}=useRefElement({onElementChange,onMount,onUnmount});var{getActiveElement,getLastActiveElement,getWindowFocused}=useActiveElement({getDocument,getWindow,onActiveElementChange:T$1((activeElement,prevActiveElement)=>{var selfElement=getElement();var focused=selfElement!=null&&selfElement==activeElement;var focusedInner=!!(selfElement!==null&&selfElement!==void 0&&selfElement.contains(activeElement));setFocused(focused);setFocusedInner(focusedInner);onActiveElementChange===null||onActiveElementChange===void 0?void 0:onActiveElementChange(activeElement,prevActiveElement);},[]),onLastActiveElementChange:T$1((lastActiveElement,prevLastActiveElement)=>{var selfElement=getElement();var focused=selfElement!=null&&selfElement==lastActiveElement;var focusedInner=!!(selfElement!==null&&selfElement!==void 0&&selfElement.contains(lastActiveElement));setLastFocused(focused);setLastFocusedInner(focusedInner);onLastActiveElementChange===null||onLastActiveElementChange===void 0?void 0:onLastActiveElementChange(lastActiveElement,prevLastActiveElement);},[]),onWindowFocusedChange});var useHasFocusProps=T$1(props=>{return useRefElementProps(props);},[]);return{useHasFocusProps,getElement,getFocused,getFocusedInner,getLastFocused,getLastFocusedInner,getActiveElement,getLastActiveElement,getWindowFocused};}function useChildrenHaveFocus(_ref18){var{childrenHaveFocus:{onAllLostFocus,onAnyGainedFocus},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange}}=_ref18;var{managedChildren,useManagedChild}=useManagedChildren({managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange}});var allElementsRef=_(new Set());var[_getFocusCount,setFocusCount]=usePassiveState(useStableCallback((anyFocused,anyPreviouslyFocused)=>{console.assert(anyFocused>=0&&anyFocused<=1);if(anyFocused&&!anyPreviouslyFocused)onAnyGainedFocus===null||onAnyGainedFocus===void 0?void 0:onAnyGainedFocus();if(!anyFocused&&anyPreviouslyFocused)onAllLostFocus===null||onAllLostFocus===void 0?void 0:onAllLostFocus();}));var useChildrenHaveFocusChild=T$1(_ref19=>{var{onElementChange,onMount,onUnmount,getDocument,getWindow,onActiveElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onWindowFocusedChange,managedChild:{index,flags},subInfo}=_ref19;useManagedChild({managedChild:{index,flags},subInfo});var _useHasFocus=useHasFocus({getDocument,getWindow,onActiveElementChange,onElementChange:T$1((e,prev)=>{var r=onElementChange===null||onElementChange===void 0?void 0:onElementChange(e,prev);if(e){allElementsRef.current.add(e);return()=>{r===null||r===void 0?void 0:r();allElementsRef.current.delete(e);};}},[onElementChange]),onMount,onUnmount,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged:useStableCallback((focused,prev)=>{if(focused){setFocusCount(p=>(p!==null&&p!==void 0?p:0)+1);}else if(!focused&&prev){setFocusCount(p=>(p!==null&&p!==void 0?p:0)-1);}onLastFocusedInnerChanged===null||onLastFocusedInnerChanged===void 0?void 0:onLastFocusedInnerChanged(focused,prev);}),onWindowFocusedChange}),{useHasFocusProps}=_useHasFocus,hasFocus=_objectWithoutProperties(_useHasFocus,_excluded5);return _objectSpread({useChildrenHaveFocusChildProps:useHasFocusProps},hasFocus);},[]);return{managedChildren,useChildrenHaveFocusChild};}function useTimeout(_ref20){var{timeout,callback,triggerIndex}=_ref20;var stableCallback=useStableCallback(()=>{startTimeRef.current=null;callback();});var getTimeout=useStableGetter(timeout);// Set any time we start timeout.
// Unset any time the timeout completes
var startTimeRef=_(null);var timeoutIsNull=timeout==null;// Any time the triggerIndex changes (including on mount)
// restart the timeout.  The timeout does NOT reset
// when the duration or callback changes, only triggerIndex.
h(()=>{if(!timeoutIsNull){var _timeout=getTimeout();console.assert(timeoutIsNull==(_timeout==null));if(_timeout!=null){startTimeRef.current=+new Date();var handle=setTimeout(stableCallback,_timeout);return()=>clearTimeout(handle);}}},[triggerIndex,timeoutIsNull]);var getElapsedTime=T$1(()=>{var _startTimeRef$current;return+new Date()-+((_startTimeRef$current=startTimeRef.current)!==null&&_startTimeRef$current!==void 0?_startTimeRef$current:new Date());},[]);var getRemainingTime=T$1(()=>{var timeout=getTimeout();return timeout==null?null:Math.max(0,timeout-getElapsedTime());},[]);return{getElapsedTime,getRemainingTime};}/** Arguments passed to the child 'useLinearNavigationChild` */ //export interface UseLinearNavigationChildInfo { }
/**
     * When used in tandem with `useRovingTabIndex`, allows control of
     * the tabbable index with the arrow keys.
     *
     * @see useListNavigation, which packages everything up together.
     */function useLinearNavigation(_ref21){var _nd;var{linearNavigation:{navigateToFirst:ntf,navigateToLast:ntl,navigateToNext:ntn,navigateToPrev:ntp,navigationDirection:nd,disableArrowKeys:dak,disableHomeEndKeys:dhek}}=_ref21;(_nd=nd)!==null&&_nd!==void 0?_nd:nd="either";//const { getLogicalDirectionInfo, useLogicalDirectionProps } = useLogicalDirection<ParentOrChildElement>({});
var navigateToFirst=useStableCallback(ntf);var navigateToLast=useStableCallback(ntl);var navigateToNext=useStableCallback(ntn);var navigateToPrev=useStableCallback(ntp);var getDisableArrowKeys=useStableGetter(dak);var getDisableHomeEndKeys=useStableGetter(dhek);var getNavigationDirection=useStableGetter(nd);return{linearNavigation:{},useLinearNavigationProps:T$1(props=>{var onKeyDown=e=>{// Not handled by typeahead (i.e. assume this is a keyboard shortcut)
if(e.ctrlKey||e.metaKey)return;//const info = getLogicalDirectionInfo();
var navigationDirection=getNavigationDirection();var disableArrowKeys=getDisableArrowKeys();var disableHomeEndKeys=getDisableHomeEndKeys();var allowsVerticalNavigation=navigationDirection=="vertical"||navigationDirection=="either";var allowsHorizontalNavigation=navigationDirection=="horizontal"||navigationDirection=="either";switch(e.key){case"ArrowUp":{//const propName = (info?.blockOrientation === "vertical" ? "blockDirection" : "inlineDirection");
var directionAllowed=!disableArrowKeys&&allowsVerticalNavigation;if(directionAllowed){navigateToPrev();e.preventDefault();e.stopPropagation();}break;}case"ArrowDown":{var _directionAllowed=!disableArrowKeys&&allowsVerticalNavigation;if(_directionAllowed){navigateToNext();e.preventDefault();e.stopPropagation();}break;}case"ArrowLeft":{var _directionAllowed2=!disableArrowKeys&&allowsHorizontalNavigation;if(_directionAllowed2){navigateToPrev();e.preventDefault();e.stopPropagation();}break;}case"ArrowRight":{var _directionAllowed3=!disableArrowKeys&&allowsHorizontalNavigation;if(_directionAllowed3){navigateToNext();e.preventDefault();e.stopPropagation();}e.preventDefault();e.stopPropagation();break;}case"Home":if(!disableHomeEndKeys){navigateToFirst();e.preventDefault();e.stopPropagation();}break;case"End":if(!disableHomeEndKeys){navigateToLast();e.preventDefault();e.stopPropagation();}break;}};return useMergedProps({onKeyDown},props);},[])};}/**
     * Allows for the selection of a managed child by typing the given text associated with it.
     *
     * @see useListNavigation, which packages everything up together.
     */function useTypeaheadNavigation(_ref22){var{typeaheadNavigation:{collator,getIndex,typeaheadTimeout,setIndex,noTypeahead}}=_ref22;// For typeahead, keep track of what our current "search" string is (if we have one)
// and also clear it every 1000 ms since the last time it changed.
// Next, keep a mapping of typeahead values to indices for faster searching.
// And, for the user's sake, let them know when their typeahead can't match anything anymore
var[currentTypeahead,setCurrentTypeahead,getCurrentTypeahead]=useState(null);useTimeout({timeout:typeaheadTimeout!==null&&typeaheadTimeout!==void 0?typeaheadTimeout:1000,callback:()=>{setCurrentTypeahead(null);setInvalidTypeahead(null);},triggerIndex:currentTypeahead});var sortedTypeaheadInfo=_([]);var[invalidTypeahead,setInvalidTypeahead]=useState(false);// Handle typeahead for input method editors as well
// Essentially, when active, ignore further keys 
// because we're waiting for a CompositionEnd event
var[,setImeActive,getImeActive]=useState(false);// Because composition events fire *after* keydown events 
// (but within the same task, which, TODO, could be browser-dependent),
// we can use this to keep track of which event we're listening for on the first keydown.
var[nextTypeaheadChar,setNextTypeaheadChar]=useState(null);s(()=>{if(nextTypeaheadChar!==null){setCurrentTypeahead(typeahead=>(typeahead!==null&&typeahead!==void 0?typeahead:"")+nextTypeaheadChar);setNextTypeaheadChar(null);}},[nextTypeaheadChar]);var comparatorShared=useStableCallback((safeLhs,safeRhs)=>{var _safeRhs$toLowerCase;var compare;// For the purposes of typeahead, only compare a string of the same size as our currently typed string.
// By normalizing them first, we ensure this byte-by-byte handling of raw character data works out okay.
safeLhs=safeLhs.normalize("NFD");safeRhs=safeRhs.normalize("NFD");if(collator)compare=collator.compare(safeLhs,safeRhs);else compare=safeLhs.toLowerCase().localeCompare((_safeRhs$toLowerCase=safeRhs.toLowerCase())!==null&&_safeRhs$toLowerCase!==void 0?_safeRhs$toLowerCase:"");return compare;});var insertingComparator=useStableCallback((lhs,rhs)=>{if(typeof lhs==="string"&&typeof rhs.text==="string"){return comparatorShared(lhs,rhs.text);}return lhs-rhs;});var typeaheadComparator=useStableCallback((lhs,rhs)=>{if(typeof lhs==="string"&&typeof rhs.text==="string"){// During typeahead, all strings longer than ours should be truncated
// so that they're all considered equally by that point.
return comparatorShared(lhs,rhs.text.substring(0,lhs.length));}return lhs-rhs;});var isDisabled=useStableGetter(noTypeahead);var useTypeaheadNavigationProps=T$1(function(_ref23){var props=_extends({},_ref23);var onCompositionStart=_e=>{setImeActive(true);};var onCompositionEnd=e=>{setNextTypeaheadChar(e.data);setImeActive(false);};var onKeyDown=e=>{if(isDisabled())return;var imeActive=getImeActive();var key=e.key;// Not handled by typeahead (i.e. assume this is a keyboard shortcut)
if(e.ctrlKey||e.metaKey)return;if(!imeActive&&e.key==="Backspace"){// Remove the last character in a way that doesn't split UTF-16 surrogates.
setCurrentTypeahead(t=>t===null?null:[...t].reverse().slice(1).reverse().join(""));e.preventDefault();e.stopPropagation();return;}// The key property represents the typed character OR the "named key attribute" of the key pressed.
// There's no definite way to tell the difference, but for all intents and purposes
// there are no one-character names, and there are no non-ASCII-alpha names.
// Thus, any one-character or non-ASCII value for `key` is *almost certainly* a typed character.
var isCharacterKey=key.length===1||!/^[A-Za-z]/.test(key);if(isCharacterKey){var _getCurrentTypeahead;if(key==" "&&((_getCurrentTypeahead=getCurrentTypeahead())!==null&&_getCurrentTypeahead!==void 0?_getCurrentTypeahead:"").trim().length==0);else{e.preventDefault();e.stopPropagation();// Note: Won't be true for the first keydown
// but will be overwritten before useLayoutEffect is called
// to actually apply the change
if(!imeActive)setNextTypeaheadChar(key);}}};return useMergedProps({onKeyDown,onCompositionStart,onCompositionEnd},props);},[]);// Handle changes in typeahead that cause changes to the tabbable index
h(()=>{if(currentTypeahead&&sortedTypeaheadInfo.current.length){var sortedTypeaheadIndex=binarySearch(sortedTypeaheadInfo.current,currentTypeahead,typeaheadComparator);if(sortedTypeaheadIndex<0){// The user has typed an entry that doesn't exist in the list
// (or more specifically "for which there is no entry that starts with that input")
setInvalidTypeahead(true);}else{setInvalidTypeahead(false);/*
                      We know roughly where, in the sorted array of strings, our next typeahead location is.
                      But roughly isn't good enough if there are multiple matches.
                      To convert our sorted index to the unsorted index we need, we have to find the first
                      element that matches us *and* (if any such exist) is *after* our current selection.

                      In other words, the only way typeahead moves backwards relative to our current
                      position is if the only other option is behind us.

                      It's not specified in WAI-ARIA what to do in that case.  I suppose wrap back to the start?
                      Though there's also a case for just going upwards to the nearest to prevent jumpiness.
                      But if you're already doing typeahead on an unsorted list, like, jumpiness can't be avoided.
                      I dunno. Going back to the start is the simplist though.

                      Basically what this does: Starting from where we found ourselves after our binary search,
                      scan backwards and forwards through all adjacent entries that also compare equally so that
                      we can find the one whose `unsortedIndex` is the lowest amongst all other equal strings
                      (and also the lowest `unsortedIndex` yadda yadda except that it comes after us).

                      TODO: The binary search starts this off with a solid O(log n), but one-character
                      searches are, thanks to pigeonhole principal, eventually guaranteed to become
                      O(n*log n). This is annoying but probably not easily solvable? There could be an
                      exception for one-character strings, but that's just kicking the can down
                      the road. Maybe one or two characters would be good enough though.
                    */ // These are used to keep track of the candidates' positions in both our sorted array and the unsorted DOM.
var lowestUnsortedIndexAll=null;var lowestSortedIndexAll=sortedTypeaheadIndex;// These two are only set for elements that are ahead of us, but the principle's the same otherwise
var lowestUnsortedIndexNext=null;var lowestSortedIndexNext=sortedTypeaheadIndex;var updateBestFit=u=>{var _getIndex;if(lowestUnsortedIndexAll==null||u<lowestUnsortedIndexAll){lowestUnsortedIndexAll=u;lowestSortedIndexAll=_i4;}if((lowestUnsortedIndexNext==null||u<lowestUnsortedIndexNext)&&u>((_getIndex=getIndex())!==null&&_getIndex!==void 0?_getIndex:-Infinity)){lowestUnsortedIndexNext=u;lowestSortedIndexNext=_i4;}};var _i4=sortedTypeaheadIndex;while(_i4>=0&&typeaheadComparator(currentTypeahead,sortedTypeaheadInfo.current[_i4])==0){updateBestFit(sortedTypeaheadInfo.current[_i4].unsortedIndex);--_i4;}_i4=sortedTypeaheadIndex;while(_i4<sortedTypeaheadInfo.current.length&&typeaheadComparator(currentTypeahead,sortedTypeaheadInfo.current[_i4])==0){updateBestFit(sortedTypeaheadInfo.current[_i4].unsortedIndex);++_i4;}if(lowestUnsortedIndexNext!==null)setIndex(sortedTypeaheadInfo.current[lowestSortedIndexNext].unsortedIndex);else if(lowestUnsortedIndexAll!==null)setIndex(sortedTypeaheadInfo.current[lowestSortedIndexAll].unsortedIndex);}}},[currentTypeahead]);var useTypeaheadNavigationChild=T$1(_ref24=>{var{index,text}=_ref24;h(()=>{if(text){// Find where to insert this item.
// Because all index values should be unique, the returned sortedIndex
// should always refer to a new location (i.e. be negative)                
var sortedIndex=binarySearch(sortedTypeaheadInfo.current,text,insertingComparator);console.assert(sortedIndex<0||insertingComparator(sortedTypeaheadInfo.current[sortedIndex].text,{unsortedIndex:index,text})==0);if(sortedIndex<0){sortedTypeaheadInfo.current.splice(-sortedIndex-1,0,{text,unsortedIndex:index});}else{sortedTypeaheadInfo.current.splice(sortedIndex,0,{text,unsortedIndex:index});}return()=>{// When unmounting, find where we were and remove ourselves.
// Again, we should always find ourselves because there should be no duplicate values if each index is unique.
var sortedIndex=binarySearch(sortedTypeaheadInfo.current,text,insertingComparator);console.assert(sortedIndex<0||insertingComparator(sortedTypeaheadInfo.current[sortedIndex].text,{unsortedIndex:index,text})==0);if(sortedIndex>=0){sortedTypeaheadInfo.current.splice(sortedIndex,1);}};}},[text]);return;},[]);return{useTypeaheadNavigationChild,useTypeaheadNavigationProps,typeaheadNavigation:{currentTypeahead,invalidTypeahead}};}/**
     * Your usual binary search implementation.
     *
     * It's used here to quickly find a good spot to start searching for our next typeahead candidate.
     * @param array The array to search through
     * @param wanted The value you'd like to find
     * @param comparator Compares `wanted` with the current value in `array`
     * @returns A non-negative value if `wanted` was found, and a negative number if not.
     * The absolute value of this number, minus one, is where `wanted` *would* be found if it *was* in `array`
     */function binarySearch(array,wanted,comparator){var firstIndex=0;var lastIndex=array.length-1;while(firstIndex<=lastIndex){var testIndex=lastIndex+firstIndex>>1;var comparisonResult=comparator(wanted,array[testIndex]);if(comparisonResult>0){firstIndex=testIndex+1;}else if(comparisonResult<0){lastIndex=testIndex-1;}else{return testIndex;}}return-firstIndex-1;}/**
     * Implements a roving tabindex system where only one "focusable"
     * component in a set is able to receive a tab focus. *Which*
     * of those elements receives focus is determined by you, but it's
     * recommended to offload that logic then to another hook, like
     * `useLinearNavigation`, which lets you change the tabbable
     * element with the arrow keys, `useTypeaheadNavigation`, which
     * lets you change the tabbable index with typeahead, or
     * `useListNavigation` if you just want everything bundled together.
     *
     * Note that the child hook returned by this function must be used
     * by every child that uses this roving tabindex logic.  The
     * prop-modifying hook *that* hook returns should then be used
     * on the child's element, as well as any other elements you'd like
     * to be explicitly made untabbable too.
     *
     * `shouldFocusOnChange` should return true if focus is
     * contained within whatever element contains the roving tab index.
     * Generally as simple as the following:
     * ```
     * const [focusedInner, setFocusedInner] = useState(false);
     * const { useHasFocusProps } = useHasFocus<ParentElement>({ setFocusedInner });
     * const focusOnChange = (focusedInner != false);
     * ```
     * It's not included here because `useRovingTabIndex` doesn't know
     * anything about the container element, only children elements.
     * And just as well! Children should be allowed at the root,
     * regardless of if it's the whole app or just a given component.
     */function useRovingTabIndex(parentParameters){var _initialIndex;var{rovingTabIndex:{initialIndex,onTabbableRender,onTabbableIndexChange},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange}}=parentParameters;(_initialIndex=initialIndex)!==null&&_initialIndex!==void 0?_initialIndex:initialIndex=0;var stableOnTabbableRender=useStableCallback(onTabbableRender!==null&&onTabbableRender!==void 0?onTabbableRender:()=>{});/*const [_getAnyFocused, setAnyFocused] = usePassiveState<number>(useStableCallback((newCount: number, oldCount: number | undefined) => {
            if (oldCount == 0 && newCount > 0) {
                onTabbedInTo?.();
            }

            if (newCount == 0 && (oldCount ?? 0) > 0) {
                onTabbedOutOf?.();
            }
        }), returnZero);*/ // Keep track of three things related to the currently tabbable element's index:
// What it is, and whether, when we render this component and it's changed, to also focus the element that was made tabbable.
var[getTabbableIndex,setTabbableIndex2]=usePassiveState(onTabbableIndexChange,T$1(()=>{var _initialIndex2;return(_initialIndex2=initialIndex)!==null&&_initialIndex2!==void 0?_initialIndex2:0;},[]));var setTabbableIndex=T$1((updater,fromUserInteraction)=>{setTabbableIndex2(prevIndex=>{var nextIndex=prevIndex;if(typeof updater==="function")nextIndex=updater(prevIndex!==null&&prevIndex!==void 0?prevIndex:null);else nextIndex=updater;nextIndex=changeIndex(nextIndex);if(prevIndex!=nextIndex){var nextChild=nextIndex==null?null:parentReturnType.managedChildren.children.getAt(nextIndex);//const prevChild = prevIndex == null ? null : parentReturnType.managedChildren.children.getAt(prevIndex);
//if (prevChild != null)
//    prevChild.subInfo.blurSelf();
if(nextChild!=null&&fromUserInteraction){var element=nextChild.subInfo.getElement();if(element){if(document.activeElement==null||!element.contains(document.activeElement))nextChild.subInfo.focusSelf();}}}return nextIndex;});},[]);// Any time the tabbable index changes,
// notify the previous child that it's no longer tabbable,
// and notify the next child that is allowed to be tabbed to.
var parentReturnType=useManagedChildren({managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange:useStableCallback((mounted,unmounted)=>{onChildrenMountChange===null||onChildrenMountChange===void 0?void 0:onChildrenMountChange(mounted,unmounted);reevaluateClosestFit();})}});var{useManagedChild}=parentReturnType;var{changeIndex,reevaluateClosestFit}=useChildrenFlag({initialIndex,children:parentReturnType.managedChildren.children,closestFit:true,key:"tabbable"});var useRovingTabIndexChild=T$1(childParameters=>{var{subInfo,managedChild:{index,flags},rovingTabIndex:{hidden,focusSelf:focusSelfOverride,noModifyTabIndex}}=childParameters;h(()=>{reevaluateClosestFit();},[!!hidden]);var stableFocusSelf=useStableCallback(focusSelfOverride);var focusSelf=T$1(()=>{var element=getElement();if(element){if(document.activeElement==null||!element.contains(document.activeElement))stableFocusSelf(element);}},[]);var onFocusedInnerChanged=useStableCallback((focused,_prevFocused)=>{if(focused){setTabbableIndex(index,false);}});var{getElement,useHasFocusProps}=useHasFocus({onFocusedInnerChanged,getDocument:T$1(()=>{var _getElement$ownerDocu2,_getElement2;return(_getElement$ownerDocu2=(_getElement2=getElement())===null||_getElement2===void 0?void 0:_getElement2.ownerDocument)!==null&&_getElement$ownerDocu2!==void 0?_getElement$ownerDocu2:window.document;},[])});var[tabbable,setTabbable,getTabbable]=useState(false);var tabbableFlags=_({get:getTabbable,set:setTabbable,isValid:useStableCallback(()=>!hidden)});useManagedChild({managedChild:{index,flags:_objectSpread(_objectSpread({},flags),{},{tabbable:tabbableFlags.current})},subInfo:{focusSelf,getElement,hidden:!!hidden,subInfo}});h(()=>{if(tabbable)stableOnTabbableRender(index);},[tabbable,index]);function useRovingTabIndexChildProps(props){if(!noModifyTabIndex)console.assert(props.tabIndex==null);return useMergedProps(useHasFocusProps({tabIndex:noModifyTabIndex?props.tabIndex:tabbable?0:-1}),props);}return{useRovingTabIndexChildProps,rovingTabIndex:{getElement,tabbable,getTabbable}};},[/* Must remain stable */]);var focusSelf=T$1(()=>{var _parentReturnType$man,_parentReturnType$man2,_parentReturnType$man3;var index=getTabbableIndex();if(index!=null)(_parentReturnType$man=parentReturnType.managedChildren.children.getAt(index))===null||_parentReturnType$man===void 0?void 0:(_parentReturnType$man2=(_parentReturnType$man3=_parentReturnType$man.subInfo).focusSelf)===null||_parentReturnType$man2===void 0?void 0:_parentReturnType$man2.call(_parentReturnType$man3);else setTabbableIndex(null,true);},[]);return{useRovingTabIndexChild,managedChildren:{children:parentReturnType.managedChildren.children},rovingTabIndex:{setTabbableIndex,getTabbableIndex,focusSelf}};}/*function test() {
        const { children, focusSelf, getTabbableIndex, setTabbableIndex, useRovingTabIndexChild, } = useRovingTabIndex<HTMLDivElement, { "foo": "bar" }, "flag2">({ managedChildren: {}, rovingTabIndex: {} });
        const { } = useRovingTabIndexChild({ managedChildren: { index: 0, flags: {} }, rti: { info3: { foo: "bar" } } });
    }*/function identity$2(t){return t;}/**
     * Implements proper keyboard navigation for components like listboxes, button groups, menus, etc.
     *
     * In the document order, there will be only one "focused" or "tabbable" element, making it act more like one complete unit in comparison to everything around it.
     * Navigating forwards/backwards can be done with the arrow keys, Home/End keys, or any any text for typeahead to focus the next item that matches.
     */function useListNavigation(_ref25){var _indexMangler,_indexDemangler;var{managedChildren:{onChildrenMountChange},rovingTabIndex,listNavigation:{indexDemangler,indexMangler},linearNavigation,typeaheadNavigation}=_ref25,mc=_objectWithoutProperties(_ref25.managedChildren,_excluded6);(_indexMangler=indexMangler)!==null&&_indexMangler!==void 0?_indexMangler:indexMangler=identity$2;(_indexDemangler=indexDemangler)!==null&&_indexDemangler!==void 0?_indexDemangler:indexDemangler=identity$2;useEnsureStability("useListNavigation",indexMangler,indexDemangler);var parentReturnType=useRovingTabIndex({managedChildren:_objectSpread(_objectSpread({},mc),{},{onChildrenMountChange:T$1((m,u)=>{onChildrenMountChange===null||onChildrenMountChange===void 0?void 0:onChildrenMountChange(m,u);},[])}),rovingTabIndex});var{useRovingTabIndexChild,managedChildren:{children},rovingTabIndex:{getTabbableIndex,setTabbableIndex}}=parentReturnType;var navigateToIndex=T$1((i,fromUserInteraction)=>{if(i!=null){var _indexMangler2,_indexDemangler2;var nextIndex=tryNavigateToIndex({children:children,default:0,target:i,searchDirection:1,indexMangler:(_indexMangler2=indexMangler)!==null&&_indexMangler2!==void 0?_indexMangler2:identity$2,indexDemangler:(_indexDemangler2=indexDemangler)!==null&&_indexDemangler2!==void 0?_indexDemangler2:identity$2});setTabbableIndex(i==null?null:nextIndex,fromUserInteraction);}else{setTabbableIndex(null,fromUserInteraction);}},[]);var{useTypeaheadNavigationChild,useTypeaheadNavigationProps,typeaheadNavigation:{currentTypeahead,invalidTypeahead}}=useTypeaheadNavigation({typeaheadNavigation:_objectSpread({getIndex:getTabbableIndex,setIndex:T$1(index=>{setTabbableIndex(index,true);},[])},typeaheadNavigation)});var{useLinearNavigationProps}=useLinearNavigation({linearNavigation:_objectSpread({navigateToPrev:T$1(()=>{setTabbableIndex(c=>{var _indexMangler3,_indexDemangler3;return tryNavigateToIndex({children,default:c!==null&&c!==void 0?c:0,target:indexDemangler(indexMangler(c!==null&&c!==void 0?c:0)-1),searchDirection:-1,indexMangler:(_indexMangler3=indexMangler)!==null&&_indexMangler3!==void 0?_indexMangler3:identity$2,indexDemangler:(_indexDemangler3=indexDemangler)!==null&&_indexDemangler3!==void 0?_indexDemangler3:identity$2});},true);},[]),navigateToNext:T$1(()=>{setTabbableIndex(c=>{var _indexMangler4,_indexDemangler4;return tryNavigateToIndex({children,default:c!==null&&c!==void 0?c:0,target:indexDemangler(indexMangler(c!==null&&c!==void 0?c:0)+1),searchDirection:1,indexMangler:(_indexMangler4=indexMangler)!==null&&_indexMangler4!==void 0?_indexMangler4:identity$2,indexDemangler:(_indexDemangler4=indexDemangler)!==null&&_indexDemangler4!==void 0?_indexDemangler4:identity$2});},true);},[]),navigateToFirst:T$1(()=>{navigateToIndex(indexDemangler(0),true);},[]),navigateToLast:T$1(()=>{navigateToIndex(indexDemangler(children.getHighestIndex()),true);},[])},linearNavigation)});var useListNavigationProps=T$1(props=>{return useLinearNavigationProps(useTypeaheadNavigationProps(props));},[useLinearNavigationProps,useTypeaheadNavigationProps]);var useListNavigationChild=T$1(_ref26=>{var{managedChild:{index,flags},rovingTabIndex:{focusSelf,hidden},listNavigation:{text},subInfo}=_ref26;useTypeaheadNavigationChild({text,index});var getIndex=useStableGetter(index);h(()=>{return()=>{if(getTabbableIndex()==getIndex()){navigateToIndex(index,false);}};},[]);var{useRovingTabIndexChildProps,rovingTabIndex:{tabbable,getTabbable,getElement}}=useRovingTabIndexChild({managedChild:{index,flags},rovingTabIndex:{focusSelf,hidden:!!hidden},subInfo:{text,subInfo}});var useListNavigationChildProps=function(_ref27){var props=_extends({},_ref27);return useMergedProps(useRovingTabIndexChildProps({inert:hidden}),props);};return{useListNavigationChildProps,rovingTabIndex:{tabbable,getTabbable,getElement}};},[useTypeaheadNavigationChild,useRovingTabIndexChild,navigateToIndex]);return{useListNavigationChild,useListNavigationProps,listNavigation:{navigateToIndex},managedChildren:parentReturnType.managedChildren,rovingTabIndex:parentReturnType.rovingTabIndex,linearNavigation:{},typeaheadNavigation:{currentTypeahead,invalidTypeahead}/*listNavigation: { navigateToIndex },
            rovingTabIndex: { focusSelf, getTabbableIndex, setTabbableIndex },
            linearNavigation: {},
            typeaheadNavigation: { currentTypeahead, invalidTypeahead }*/};}function tryNavigateToIndex(_ref28){var{children,searchDirection,indexDemangler,indexMangler,target}=_ref28;var upper=children.getHighestIndex();var lower=0;if(searchDirection===-1){while(target>=lower&&children.getAt(target)==null||!!((_children$getAt2=children.getAt(target))!==null&&_children$getAt2!==void 0&&_children$getAt2.subInfo.hidden)){var _children$getAt2;target=indexDemangler(indexMangler(target)-1);}return target<lower?indexDemangler(lower):target;}else if(searchDirection===1){while(target<=upper&&children.getAt(target)==null||!!((_children$getAt3=children.getAt(target))!==null&&_children$getAt3!==void 0&&_children$getAt3.subInfo.hidden)){var _children$getAt3;target=indexDemangler(indexMangler(target)+1);}return target>upper?indexDemangler(upper):target;}else{return lower;}}function useGridNavigation(_ref29){var _rti$initialIndex;var{managedChildren:mc,rovingTabIndex:rti,listNavigation:ls,linearNavigation:ln,typeaheadNavigation:tn,gridNavigation:{rowIndexDemangler,rowIndexMangler}}=_ref29;var[currentColumn,setCurrentColumn,getCurrentColumn]=useState((_rti$initialIndex=rti.initialIndex)!==null&&_rti$initialIndex!==void 0?_rti$initialIndex:0);var _useListNavigation=useListNavigation({managedChildren:mc,rovingTabIndex:rti,listNavigation:_objectSpread({indexDemangler:rowIndexDemangler,indexMangler:rowIndexMangler},ls),linearNavigation:_objectSpread({navigationDirection:"vertical"},ln),typeaheadNavigation:tn}),{useListNavigationChild:useListNavigationChildAsGridRow,useListNavigationProps:useListNavigationPropsAsGridParent}=_useListNavigation,parentLsReturnType=_objectWithoutProperties(_useListNavigation,_excluded7);var useGridNavigationRow=T$1(_ref30=>{var{asChildRowOfSection:asChild,asParentRowOfCells:asParent}=_ref30;// Override the focusSelf that rovingTabIndex does.
// Instead of focusing the entire row, we ask the cell that corresponds
// to our current column to focus itself.
var focusSelfRow=useStableCallback(()=>{debugger;var c2=getCurrentColumn();navigateToColumn(c2!==null&&c2!==void 0?c2:0,true);});var rowLsChildReturnType=useListNavigationChildAsGridRow({managedChild:asChild.managedChild,listNavigation:_objectSpread({},asChild.listNavigation),rovingTabIndex:_objectSpread(_objectSpread({},asChild.rovingTabIndex),{},{focusSelf:focusSelfRow}),subInfo:{subInfo:asChild.subInfo}});var{rovingTabIndex:{tabbable},useListNavigationChildProps}=rowLsChildReturnType;h(()=>{if(!tabbable){navigateToColumn(null,false);}},[tabbable]);var rowLsReturnType=useListNavigation({managedChildren:_objectSpread({},asParent.managedChildren),rovingTabIndex:_objectSpread({},asParent.rovingTabIndex),linearNavigation:_objectSpread(_objectSpread({},asParent.linearNavigation),{},{navigationDirection:"horizontal"}),typeaheadNavigation:_objectSpread(_objectSpread({},asParent.typeaheadNavigation),{},{noTypeahead:true}),listNavigation:_objectSpread({},asParent.listNavigation)});var{rovingTabIndex:{setTabbableIndex},useListNavigationChild:useGridNavigationColumn2,useListNavigationProps:useGridNavigationColumnProps,listNavigation:{navigateToIndex:navigateToColumn}}=rowLsReturnType;//const rowHidden = !!asChild.rovingTabIndex.hidden;
var useGridNavigationCell=T$1(_ref31=>{var{subInfo,hasFocus:{onLastFocusedInnerChanged},managedChild,listNavigation:ls,rovingTabIndex:{focusSelf:focusSelfCell}}=_ref31,hasFocus=_objectWithoutProperties(_ref31.hasFocus,_excluded8),rti=_objectWithoutProperties(_ref31.rovingTabIndex,_excluded9);var{useListNavigationChildProps,rovingTabIndex:rti_cell_ret}=useGridNavigationColumn2({managedChild:managedChild,listNavigation:_objectSpread({},ls),rovingTabIndex:_objectSpread({focusSelf:focusSelfCell},rti),subInfo:{subInfo}});var{useHasFocusProps}=useHasFocus(_objectSpread({onLastFocusedInnerChanged:useStableCallback((focused,prev)=>{onLastFocusedInnerChanged===null||onLastFocusedInnerChanged===void 0?void 0:onLastFocusedInnerChanged(focused,prev);if(focused){setCurrentColumn(managedChild.index);setTabbableIndex(managedChild.index,false);}})},hasFocus));var ret={gridNavigation:{getCurrentColumn},rovingTabIndex:rti_cell_ret,useGridNavigationCellProps:function(props){return useListNavigationChildProps(useHasFocusProps(props));}};return ret;},[]);var ret={asParentOfCells:{linearNavigation:rowLsReturnType.linearNavigation,listNavigation:rowLsReturnType.listNavigation,managedChildren:rowLsReturnType.managedChildren,rovingTabIndex:rowLsReturnType.rovingTabIndex,typeaheadNavigation:rowLsReturnType.typeaheadNavigation},asChildRow:rowLsChildReturnType,useGridNavigationCell,useGridNavigationRowProps:function(props){var ret=useListNavigationChildProps(useGridNavigationColumnProps(props));ret.tabIndex=-1;return ret;}};return ret;},[]);return{gridNavigation:{getCurrentColumn,currentColumn},linearNavigation:parentLsReturnType.linearNavigation,listNavigation:parentLsReturnType.listNavigation,rovingTabIndex:parentLsReturnType.rovingTabIndex,typeaheadNavigation:parentLsReturnType.typeaheadNavigation,managedChildren:parentLsReturnType.managedChildren,useGridNavigationRow,useGridNavigationProps:useListNavigationPropsAsGridParent};}/**
     * Adds the necessary event handlers to create a "press"-like event for
     * any element, whether it's a native <BUTTON> or regular <DIV>.
     *
     * Notably, the following cases are covered:
     * * The target element is properly focused, even on iOS Safari (*especially* on iOS Safari)
     * * Double-clicks won't select text.
     * * Conversely, manually selecting text won't invoke a press.
     * * Keyboard events &mdash; `enter` immediately invokes the handler, while `space` invokes it on keyup.
     * * Haptic feedback (on, like, the one browser combination that supports it &mdash; this can be disabled app-wide with `setButtonVibrate`)
     *
     * In addition, when the CSS `:active` pseudo-class would apply to a normal button
     * (i.e. when holding the spacebar or during mousedown), `{ "data-pseudo-active": "true" }`
     * is added to the props.  You can either let it pass through and style it through new CSS,
     * or inspect the returned props for it and add e.g. an `.active` class for existing CSS
     *
     * @param onClickSync
     * @param exclude Whether the polyfill shouldn't apply (can specify for specific interactions)
     */function usePress(_ref32){var{exclude,hasFocus:{onLastFocusedInnerChanged},onClickSync,focusSelf}=_ref32,hasFocus=_objectWithoutProperties(_ref32.hasFocus,_excluded10);// A button can be activated in multiple ways, so on the off chance
// that multiple are triggered at once, we only *actually* register
// a press once all of our "on" signals have turned back to "off".
// We approximate this by just incrementing when active, and
// decrementing when deactivated.
//
// As an emergency failsafe, when the element loses focus,
// this is reset back to 0.
var[activeDuringRender,setActive,getActive]=useState(0);var forceUpdate=useForceUpdate();var{useHasFocusProps,getElement}=useHasFocus(_objectSpread(_objectSpread({},hasFocus),{},{onLastFocusedInnerChanged:useStableCallback((f,p)=>{onLastFocusedInnerChanged===null||onLastFocusedInnerChanged===void 0?void 0:onLastFocusedInnerChanged(f,p);if(!f){setActive(0);}})}));// If we the current text selection changes to include this element
// DURING e.g. a mousedown, then we don't want the mouseup to "count", as it were,
// because its only purpose was selecting text, not clicking buttons.
//
// To catch this, any time the text selection includes us while in the middle
// of a click, this flag is set, which cancels the activation of a press.
// The flag is reset any time the selection is empty or the button is
// no longer active.
var[textSelectedDuringActivationStartTime,setTextSelectedDuringActivationStartTime]=useState(null);var pseudoActive=activeDuringRender&&textSelectedDuringActivationStartTime==null;useGlobalHandler(document,"selectionchange",_=>{setTextSelectedDuringActivationStartTime(prev=>nodeSelectedTextLength(getElement())==0?null:prev!=null?prev:new Date());});h(()=>{if(activeDuringRender==0)setTextSelectedDuringActivationStartTime(null);},[activeDuringRender==0]);var onActiveStart=useStableCallback(_=>{setActive(a=>++a);});var onActiveStop=useStableCallback(e=>{setActive(a=>Math.max(0,--a));var currentTime=new Date();var timeDifference=textSelectedDuringActivationStartTime==null?null:+currentTime-+textSelectedDuringActivationStartTime;var charactersSelected=nodeSelectedTextLength(getElement());// If we're selecting text (heuristically determined by selecting for longer than 1/4 a second, or more than 2 characters)
// then this isn't a press event.
// TODO: This should measure glyphs instead of characters.
if(charactersSelected>1||(timeDifference!==null&&timeDifference!==void 0?timeDifference:0)>250&&charactersSelected>=1){e.preventDefault();return;}var active=getActive();// We query if we're active *after* calling setState because we count a press iff we're now at 0.
if(active<=0){handlePress(e);forceUpdate();// TODO: Remove when issue resolved https://github.com/preactjs/preact/issues/3731
}});var handlePress=useStableCallback(e=>{if(onClickSync){// Note: The element is focused here because of iOS Safari.
//
// It's always iOS Safari.
//
// iOS Safari (tested on 12) downright refuses to allow 
// elements to be manually focused UNLESS it happens within
// an event handler like this.  It also doesn't focus
// buttons by default when clicked, tapped, etc.
//
// If it becomes problematic that button-likes explicitly become
// focused when they are pressed, then an alternative solution for
// the question of "how do menu buttons keep their menus open"
// and other focus-related nonsense needs to be figured out.
//
// For iOS Safari.
//
var element=getElement();if(element&&"focus"in element)focusSelf(element);//(element as EventTarget as HTMLElement | null)?.focus();
// Whatever the browser was going to do with this event,
// forget it. We're turning it into a "press" event.
e.preventDefault();// Also stop anyone else from listening to this event,
// since we're explicitly handling it.
// (Notably, this allows labels to wrap inputs, with them
// both having press event handlers, without double-firing)
e.stopPropagation();// Haptic feedback for this press event
try{// The default implementation doesn't throw,
// but we should guard against user implementations that could.
pulse();}finally{// Actually call our handler.
onClickSync(e);}}});var onMouseDown=useStableCallback(e=>{if(onClickSync&&!excludes("click",exclude)){// Stop double clicks from selecting text in an component that's *supposed* to be acting like a button,
// but also don't prevent the user from selecting that text manually if they really want to
// (which user-select: none would do, but cancelling a double click on mouseDown doesn't)
if(e.detail>1){e.preventDefault();}if(e.button===0){onActiveStart(e);}}});var onMouseUp=useStableCallback(e=>{if(onClickSync&&!excludes("click",exclude)){if(e.button===0&&getActive()>0){onActiveStop(e);}}});var onMouseLeave=useStableCallback(()=>{if(onClickSync&&!excludes("click",exclude)){setActive(0);}});var onKeyDown=useStableCallback(e=>{if(onClickSync){if(e.key==" "&&!excludes("space",exclude)){// We don't actually activate it on a space keydown
// but we do preventDefault to stop the page from scrolling.
onActiveStart(e);e.preventDefault();}if(e.key=="Enter"&&!excludes("enter",exclude)){e.preventDefault();onActiveStart(e);onActiveStop(e);}}});var onKeyUp=useStableCallback(e=>{if(onClickSync&&e.key==" "&&!excludes("space",exclude))onActiveStop(e);});var onClick=useStableCallback(e=>{if(onClickSync){e.preventDefault();if(e.detail>1){e.stopImmediatePropagation();e.stopPropagation();}}});return function usePressProps(props){return useMergedProps(props,useHasFocusProps(_objectSpread({onKeyDown,onKeyUp,onMouseDown,onMouseUp,onMouseLeave,onClick,style:textSelectedDuringActivationStartTime!=null?{cursor:"text"}:undefined},{"data-pseudo-active":pseudoActive?"true":undefined})));};}/**
     * selection.containsNode doesn't account for selection.isCollapsed,
     * so here's a workaround for that.
     *
     * We also only look for the selection end to only catch the
     * essense of a non-existant "selectionstop" event.
     *
     * @param element
     * @returns
     */function nodeSelectedTextLength(element){if(element&&element instanceof Node){var selection=window.getSelection();for(var _i5=0;_i5<((_selection$rangeCount=selection===null||selection===void 0?void 0:selection.rangeCount)!==null&&_selection$rangeCount!==void 0?_selection$rangeCount:0);++_i5){var _selection$rangeCount;var range=selection.getRangeAt(_i5);if(element.contains(range.endContainer)&&!(selection!==null&&selection!==void 0&&selection.isCollapsed)){return selection.toString().length;}}}return 0;}var pulse="vibrate"in navigator&&navigator.vibrate instanceof Function?()=>navigator.vibrate(10):()=>{};function excludes(target,exclude){if(exclude!==null&&exclude!==void 0&&exclude[target])return true;return false;}function useSingleSelection(_ref33){var{singleSelection:{selectedIndex,selectionMode,setSelectedIndex,children,setTabbableIndex},childrenHaveFocus:{onAllLostFocus,onAnyGainedFocus}}=_ref33;var{useChildrenHaveFocusChild}=useChildrenHaveFocus({childrenHaveFocus:{onAllLostFocus:useStableCallback(()=>{onAllLostFocus===null||onAllLostFocus===void 0?void 0:onAllLostFocus();if(selectedIndex!=null)setTabbableIndex(selectedIndex,false);}),onAnyGainedFocus},managedChildren:{onAfterChildLayoutEffect:null,onChildrenMountChange:null}});var stableOnChange=useStableCallback(setSelectedIndex);var{changeIndex:changeSelectedIndex,getCurrentIndex:getSelectedIndex}=useChildrenFlag({children:children,initialIndex:selectedIndex,key:"selected",closestFit:false});s(()=>{changeSelectedIndex(selectedIndex);},[selectedIndex]);return{singleSelection:{getSelectedIndex,changeSelectedIndex},useSingleSelectionChild:T$1(_ref34=>{var{managedChild:{index,flags},hasFocus:{onFocusedInnerChanged},singleSelection:{unselectable,ariaPropName,focusSelf}}=_ref34,hasFocus=_objectWithoutProperties(_ref34.hasFocus,_excluded11);var[isSelected,setIsSelected,getIsSelected]=useState(getSelectedIndex()==index);var selectedRef=_({get:getIsSelected,set:setIsSelected,isValid:useStableCallback(()=>!unselectable)});var{useChildrenHaveFocusChildProps,getElement}=useChildrenHaveFocusChild(_objectSpread(_objectSpread({onFocusedInnerChanged:useStableCallback((focused,prev)=>{onFocusedInnerChanged===null||onFocusedInnerChanged===void 0?void 0:onFocusedInnerChanged(focused,prev);if(selectionMode=='focus'&&focused){stableOnChange(getIndex(),{target:getElement(),currentTarget:getElement()});}})},hasFocus),{},{managedChild:{index},subInfo:undefined}));var getIndex=useStableGetter(index);var usePressProps=usePress({onClickSync:unselectable?null:e=>{stableOnChange(getIndex(),e);},exclude:{},hasFocus,focusSelf});return{flags:_objectSpread(_objectSpread({},flags),{},{selected:selectedRef.current}),useSingleSelectionChildProps:props=>{if(ariaPropName)props[ariaPropName]=(isSelected!==null&&isSelected!==void 0?isSelected:false).toString();return usePressProps(useChildrenHaveFocusChildProps(props));},singleSelection:{selected:isSelected,getSelected:getIsSelected}};},[selectionMode])};}/**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */function copyArray(source,array){var index=-1,length=source.length;array||(array=Array(length));while(++index<length){array[index]=source[index];}return array;}/* Built-in method references for those with the same name as other `lodash` methods. */var nativeFloor=Math.floor,nativeRandom=Math.random;/**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */function baseRandom(lower,upper){return lower+nativeFloor(nativeRandom()*(upper-lower+1));}/**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */function shuffleSelf(array,size){var index=-1,length=array.length,lastIndex=length-1;size=size===undefined?length:size;while(++index<size){var rand=baseRandom(index,lastIndex),value=array[rand];array[rand]=array[index];array[index]=value;}array.length=size;return array;}/**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */function arrayShuffle(array){return shuffleSelf(copyArray(array));}/**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */function arrayMap(array,iteratee){var index=-1,length=array==null?0:array.length,result=Array(length);while(++index<length){result[index]=iteratee(array[index],index,array);}return result;}/**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */function baseValues(object,props){return arrayMap(props,function(key){return object[key];});}/**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}/** `Object#toString` result references. */var argsTag$1='[object Arguments]';/**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag$1;}/** Used for built-in method references. */var objectProto$3=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty$2=objectProto$3.hasOwnProperty;/** Built-in value references. */var propertyIsEnumerable=objectProto$3.propertyIsEnumerable;/**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty$2.call(value,'callee')&&!propertyIsEnumerable.call(value,'callee');};/**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */var isArray=Array.isArray;/**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */function stubFalse(){return false;}/** Detect free variable `exports`. */var freeExports$1=typeof exports=='object'&&exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule$1=freeExports$1&&typeof module=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports$1=freeModule$1&&freeModule$1.exports===freeExports$1;/** Built-in value references. */var Buffer=moduleExports$1?root.Buffer:undefined;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeIsBuffer=Buffer?Buffer.isBuffer:undefined;/**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */var isBuffer=nativeIsBuffer||stubFalse;/** Used as references for various `Number` constants. */var MAX_SAFE_INTEGER$1=9007199254740991;/** Used to detect unsigned integer values. */var reIsUint=/^(?:0|[1-9]\d*)$/;/**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */function isIndex(value,length){var type=typeof value;length=length==null?MAX_SAFE_INTEGER$1:length;return!!length&&(type=='number'||type!='symbol'&&reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}/** Used as references for various `Number` constants. */var MAX_SAFE_INTEGER=9007199254740991;/**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',boolTag='[object Boolean]',dateTag='[object Date]',errorTag='[object Error]',funcTag$1='[object Function]',mapTag='[object Map]',numberTag='[object Number]',objectTag='[object Object]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',weakMapTag='[object WeakMap]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';/** Used to identify `toStringTag` values of typed arrays. */var typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=true;typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag$1]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=false;/**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */function baseIsTypedArray(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];}/**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */function baseUnary(func){return function(value){return func(value);};}/** Detect free variable `exports`. */var freeExports=typeof exports=='object'&&exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&typeof module=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/** Detect free variable `process` from Node.js. */var freeProcess=moduleExports&&freeGlobal.process;/** Used to access faster Node.js helpers. */var nodeUtil=function(){try{// Use `util.types` for Node.js 10+.
var types=freeModule&&freeModule.require&&freeModule.require('util').types;if(types){return types;}// Legacy `process.binding('util')` for Node.js < 10.
return freeProcess&&freeProcess.binding&&freeProcess.binding('util');}catch(e){}}();/* Node.js helper references. */var nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;/**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;/** Used for built-in method references. */var objectProto$2=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty$1=objectProto$2.hasOwnProperty;/**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */function arrayLikeKeys(value,inherited){var isArr=isArray(value),isArg=!isArr&&isArguments(value),isBuff=!isArr&&!isArg&&isBuffer(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value){if((inherited||hasOwnProperty$1.call(value,key))&&!(skipIndexes&&(// Safari 9 has enumerable `arguments.length` in strict mode.
key=='length'||// Node.js 0.10 has enumerable non-index properties on buffers.
isBuff&&(key=='offset'||key=='parent')||// PhantomJS 2 has enumerable non-index properties on typed arrays.
isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||// Skip index properties.
isIndex(key,length)))){result.push(key);}}return result;}/** Used for built-in method references. */var objectProto$1=Object.prototype;/**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto$1;return value===proto;}/**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */function overArg(func,transform){return function(arg){return func(transform(arg));};}/* Built-in method references for those with the same name as other `lodash` methods. */var nativeKeys=overArg(Object.keys,Object);/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}/** `Object#toString` result references. */var asyncTag='[object AsyncFunction]',funcTag='[object Function]',genTag='[object GeneratorFunction]',proxyTag='[object Proxy]';/**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */function isFunction(value){if(!isObject(value)){return false;}// The use of `Object#toString` avoids issues with the `typeof` operator
// in Safari 9 which returns 'object' for typed arrays and other constructors.
var tag=baseGetTag(value);return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;}/**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}/**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);}/**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */function values(object){return object==null?[]:baseValues(object,keys(object));}/**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */function baseShuffle(collection){return shuffleSelf(values(collection));}/**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */function shuffle(collection){var func=isArray(collection)?arrayShuffle:baseShuffle;return func(collection);}/**
     * Hook that allows for the **direct descendant** children of this component to be re-ordered and sorted.
     *
     * *This is **separate** from "managed" children, which can be any level of child needed! Sortable/rearrangeable children must be **direct descendants** of the parent that uses this hook!*
     *
     * It's recommended to use this in conjunction with `useListNavigation`; it takes the same `indexMangler` and `indexDemangler`
     * functions that this hook returns. `useListNavigation` does not directly use this hook because, as mentioned,
     * this hook imposes serious restrictions on child structure, while `useListNavigation` allows anything.
     *
     * Besides the prop-modifying hook that's returned, the `sort` function that's returned will
     * sort all children according to their value from the `getValue` argument you pass in.
     *
     * If you want to perform some re-ordering operation that's *not* a sort, you can manually
     * re-map each child's position using `mangleMap` and `demangleMap`, which convert between
     * sorted and unsorted index positions.
     *
     * Again, unlike some other hooks, **these children must be direct descendants**. This is because
     * the prop-modifying hook inspects the given children, then re-creates them with new `key`s.
     * Because keys are given special treatment and a child has no way of modifying its own key
     * there's no other time or place this can happen other than exactly within the parent component's render function.
     */function useRearrangeableChildren(_ref35){var{rearrangeableChildren:{getIndex}}=_ref35;// These are used to keep track of a mapping between unsorted index <---> sorted index.
// These are needed for navigation with the arrow keys.
var mangleMap=_(new Map());var demangleMap=_(new Map());var indexMangler=T$1(n=>{var _mangleMap$current$ge;return(_mangleMap$current$ge=mangleMap.current.get(n))!==null&&_mangleMap$current$ge!==void 0?_mangleMap$current$ge:n;},[]);var indexDemangler=T$1(n=>{var _demangleMap$current$;return(_demangleMap$current$=demangleMap.current.get(n))!==null&&_demangleMap$current$!==void 0?_demangleMap$current$:n;},[]);// The sort function needs to be able to update whoever has all the sortable children.
// Because that might not be the consumer of *this* hook directly (e.g. a table uses
// this hook, but it's tbody that actually needs updating), we need to remotely
// get and set a forceUpdate function.
//const [getForceUpdate, setForceUpdate] = usePassiveState<null | (() => void)>(null, returnNull);
var[getForceUpdate,setForceUpdate]=usePassiveState(null,returnNull);var rearrange=T$1(sortedRows=>{var _getForceUpdate;// Update our sorted <--> unsorted indices map 
// and rerender the whole table, basically
for(var indexAsSorted=0;indexAsSorted<sortedRows.length;++indexAsSorted){var indexAsUnsorted=sortedRows[indexAsSorted].index;mangleMap.current.set(indexAsUnsorted,indexAsSorted);demangleMap.current.set(indexAsSorted,indexAsUnsorted);}(_getForceUpdate=getForceUpdate())===null||_getForceUpdate===void 0?void 0:_getForceUpdate();},[]);var useRearrangeableProps=T$1(_ref36=>{var{children}=_ref36,props=_objectWithoutProperties(_ref36,_excluded12);var forceUpdate=useForceUpdate();s(()=>{setForceUpdate(_prev=>forceUpdate);},[forceUpdate]);return useMergedProps({children:children.slice().map(child=>({child,mangledIndex:indexMangler(getIndex(child.props)),demangledIndex:getIndex(child.props)})).sort((lhs,rhs)=>{return lhs.mangledIndex-rhs.mangledIndex;}).map(_ref37=>{var{child,mangledIndex,demangledIndex}=_ref37;return h$1(child.type,_objectSpread(_objectSpread({},child.props),{},{key:demangledIndex,"data-mangled-index":mangledIndex,"data-unmangled-index":demangledIndex}));})},props);},[]);return{useRearrangeableProps,rearrangeableChildren:{indexMangler,indexDemangler,mangleMap,demangleMap,rearrange}};}/**
     * Hook that allows for the **direct descendant** children of this component to be re-ordered and sorted.
     *
     * *This is **separate** from "managed" children, which can be any level of child needed! Sortable/rearrangeable children must be **direct descendants** of the parent that uses this hook!*
     *
     * It's recommended to use this in conjunction with `useListNavigation`; it takes the same `indexMangler` and `indexDemangler`
     * functions that this hook returns. `useListNavigation` does not directly use this hook because, as mentioned,
     * this hook imposes serious restrictions on child structure, while `useListNavigation` allows anything.
     *
     * Besides the prop-modifying hook that's returned, the `sort` function that's returned will
     * sort all children according to their value from the `getValue` argument you pass in.
     *
     * If you want to perform some re-ordering operation that's *not* a sort, you can manually
     * re-map each child's position using `mangleMap` and `demangleMap`, which convert between
     * sorted and unsorted index positions.
     *
     * Again, unlike some other hooks, **these children must be direct descendants**. This is because
     * the prop-modifying hook inspects the given children, then re-creates them with new `key`s.
     * Because keys are given special treatment and a child has no way of modifying its own key
     * there's no other time or place this can happen other than exactly within the parent component's render function.
     */function useSortableChildren(_ref38){var{rearrangeableChildren:{getIndex},sortableChildren:{compare:userCompare}}=_ref38;var compare=userCompare!==null&&userCompare!==void 0?userCompare:defaultCompare;var _useRearrangeableChil=useRearrangeableChildren({rearrangeableChildren:{getIndex}}),{useRearrangeableProps:useSortableProps}=_useRearrangeableChil,rearrangeableChildrenReturnType=_objectWithoutProperties(_useRearrangeableChil,_excluded13);var{rearrangeableChildren:{rearrange}}=rearrangeableChildrenReturnType;// The actual sort function.
var sort=T$1((managedRows,direction)=>{var sortedRows=managedRows.arraySlice().sort((lhsRow,rhsRow)=>{var lhsValue=lhsRow;var rhsValue=rhsRow;var result=compare(lhsValue,rhsValue);if(direction[0]=="d")return-result;return result;});return rearrange(sortedRows);},[/* Must remain stable */]);var shuffle$1=T$1(managedRows=>{var shuffledRows=shuffle(managedRows.arraySlice());return rearrange(shuffledRows);},[/* Must remain stable */]);return{useSortableProps,sortableChildren:{sort,shuffle:shuffle$1},rearrangeableChildren:rearrangeableChildrenReturnType.rearrangeableChildren};}function defaultCompare(lhs,rhs){return compare1(lhs,rhs);function compare3(lhs,rhs){// Coerce strings to numbers if they seem to stay the same when serialized
if("".concat(+lhs)===lhs)lhs=+lhs;if("".concat(+rhs)===rhs)rhs=+rhs;// At this point, if either argument is a string, turn the other one into one too
if(typeof lhs==="string")rhs="".concat(rhs);if(typeof rhs==="string")lhs="".concat(lhs);console.assert(typeof lhs===typeof rhs);if(typeof lhs==="string")return lhs.localeCompare(rhs);if(typeof lhs==="number")return+lhs-+rhs;return 0;}function compare2(lhs,rhs){if(typeof lhs==="boolean"||lhs instanceof Date)lhs=+lhs;if(typeof rhs==="boolean"||rhs instanceof Date)rhs=+rhs;return compare3(lhs,rhs);}function compare1(lhs,rhs){if(lhs==null&&rhs==null){// They're both null
return 0;}else if(lhs==null||rhs==null){// One of the two is null -- easy case
return lhs!=null?1:-1;}return compare2(lhs,rhs);}}/**
     * It's very common to combine a tabbable list of things and "selection" of one of those things.
     *
     * Lists, radio buttons, tabs, etc. etc.
     *
     * This is a shortcut that combines the two with the correct typing.
     * @param param0
     * @returns
     */function useListNavigationSingleSelection(_ref39){var{singleSelection:{selectedIndex,selectionMode,setSelectedIndex},listNavigation,managedChildren,linearNavigation,typeaheadNavigation,childrenHaveFocus:{onAllLostFocus,onAnyGainedFocus}}=_ref39,rovingTabIndex=_extends({},_ref39.rovingTabIndex);var parentReturnType=useListNavigation({listNavigation,managedChildren,rovingTabIndex:_objectSpread({initialIndex:selectedIndex!==null&&selectedIndex!==void 0?selectedIndex:undefined},rovingTabIndex),linearNavigation,typeaheadNavigation});useStableGetter(selectionMode);var _useSingleSelection=useSingleSelection({singleSelection:{children:parentReturnType.managedChildren.children,selectedIndex,selectionMode,setSelectedIndex,setTabbableIndex:parentReturnType.rovingTabIndex.setTabbableIndex},childrenHaveFocus:{onAllLostFocus,onAnyGainedFocus}}),{useSingleSelectionChild}=_useSingleSelection,singleSelectionInfo=_objectWithoutProperties(_useSingleSelection,_excluded14);useStableCallback(setSelectedIndex);var{useListNavigationChild,useListNavigationProps}=parentReturnType,listRest=_objectWithoutProperties(parentReturnType,_excluded15);return _objectSpread(_objectSpread({useListNavigationSingleSelectionChild:T$1(_ref40=>{var _rti$hidden;var{managedChild:{index,flags},rovingTabIndex:rti,listNavigation:ls,hasFocus,singleSelection:{focusSelf,unselectable},subInfo}=_ref40,ss=_objectWithoutProperties(_ref40.singleSelection,_excluded16);unselectable||(unselectable=(_rti$hidden=rti.hidden)!==null&&_rti$hidden!==void 0?_rti$hidden:false);var _useSingleSelectionCh=useSingleSelectionChild({managedChild:{index,flags},hasFocus,singleSelection:_objectSpread(_objectSpread({},ss),{},{focusSelf,unselectable})}),{useSingleSelectionChildProps,flags:ssflags}=_useSingleSelectionCh,singleSelectionInfo=_objectWithoutProperties(_useSingleSelectionCh,_excluded17);var{rovingTabIndex:rti_ret,useListNavigationChildProps}=useListNavigationChild({managedChild:{index,flags:_objectSpread(_objectSpread({},ssflags),flags)},rovingTabIndex:rti,listNavigation:ls,subInfo});return{useListNavigationSingleSelectionChildProps:props=>useSingleSelectionChildProps(useListNavigationChildProps(props)),rovingTabIndex:rti_ret,singleSelection:singleSelectionInfo.singleSelection};},[]),useListNavigationSingleSelectionProps:T$1(function(){return useListNavigationProps(...arguments);},[])},listRest),singleSelectionInfo);}/**
     * Returns a hook that modifies a set of props to provide a randomly-generated ID if one was not provided.
     *
     * If you'd like to use the ID in a property that's *not* named `id` (like `for` or `aria-labelledby` or whatnot), `useReferencedIdProps` is also provided.
     *
     * And the randomly-generated id itself is also provided in case you want to handle the logic yourself without `useMergedProps`.
     *
     * Unlike most other `use*Props` hooks, these are mostly stable.
     */function useRandomId(_ref41){var{randomId:{prefix},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange}}=_ref41;// Generate a random ID that will be used when no other ID is provided
useEnsureStability("useRandomId",prefix);var[backupRandomId,,getBackupRandomId]=useState(()=>generateRandomId(prefix));// By default, we just use a random ID.
// But if the element already supplies its own ID, then we need to make sure whoever references it uses that instead of the random one we made.
var[usedId,setUsedId,getUsedId]=useState(()=>getBackupRandomId());var mismatchErrorRef=_(false);// We need to be able to modify our children remotely
var _useManagedChildren=useManagedChildren({managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange}}),{useManagedChild}=_useManagedChildren,managedChildrenReturnType=_objectWithoutProperties(_useManagedChildren,_excluded18);var{managedChildren:{children}}=managedChildrenReturnType;var useRandomIdSourceElement=T$1(()=>{var[usedIdLocal,setUsedIdLocal,getUsedIdLocal]=useState(getUsedId());var{useRefElementProps,getElement}=useRefElement();// Every time the source element renders, inspect the ID it actually used
// (whether it was ours or not isn't up to us, it's up to the component)
// so this is how we notify the referencer component of changes
h(()=>{var element=getElement();if(element){children.getAt("referencer").subInfo.setUsedId(element.id);setUsedId(element.id);}});useManagedChild({managedChild:{index:"source"},subInfo:{setUsedId:setUsedIdLocal}});var useRandomIdSourceElementProps=T$1(function(p){p.id||(p.id=backupRandomId);return useRefElementProps(p);},[]);return{usedId:usedIdLocal,getUsedId:getUsedIdLocal,useRandomIdSourceElementProps};},[]);var useRandomIdReferencerElement=T$1(idPropName=>{var[usedIdLocal,setUsedIdLocal,getUsedIdLocal]=useState(getUsedId());// Whatever ID was most recently used by the actual "id" prop of the source element
useEnsureStability(idPropName);useManagedChild({managedChild:{index:"referencer"},subInfo:{setUsedId:setUsedIdLocal}});var useRandomIdReferencerElementProps=T$1(function(_ref42){var{[idPropName]:givenId}=_ref42,p=_objectWithoutProperties(_ref42,[idPropName].map(_toPropertyKey));if(givenId&&usedId){if(givenId!=usedId){if(!mismatchErrorRef.current){mismatchErrorRef.current=true;console.error("Multiple mis-matched IDs were provided for the ".concat(idPropName," prop: the child explicitly specified ").concat(givenId," in its  ").concat(idPropName," prop, but the parent told this child to use ").concat(usedId,"."));}}}return useMergedProps(p,{[idPropName]:usedId});},[usedId]);return{usedId:usedIdLocal,getUsedId:getUsedIdLocal,useRandomIdReferencerElementProps};},[]);return _objectSpread(_objectSpread({randomId:{usedId,getUsedId}},managedChildrenReturnType),{},{useRandomIdSourceElement,useRandomIdReferencerElement});}function useButton(_ref43){var{button:{tagButton,disabled,onPress,pressed},hasFocus}=_ref43;function useButtonProps(_ref44){var{"aria-pressed":ariaPressed,tabIndex,role}=_ref44,p=_objectWithoutProperties(_ref44,_excluded19);var usePressProps=usePress({onClickSync:e=>{var _ref45;return(_ref45=disabled?null:onPress)===null||_ref45===void 0?void 0:_ref45(enhanceEvent(e,{pressed:pressed==null?null:!pressed}));},exclude:undefined,hasFocus,focusSelf:T$1(e=>{var _e$focus;return(_e$focus=e.focus)===null||_e$focus===void 0?void 0:_e$focus.call(e);},[])});var props=usePressProps(p);var baseProps={role,tabIndex,"aria-pressed":ariaPressed!==null&&ariaPressed!==void 0?ariaPressed:pressed===true?"true":pressed===false?"false":undefined};var buttonProps=_objectSpread(_objectSpread({},baseProps),{},{disabled:disabled&&disabled!="soft"?true:false,"aria-disabled":disabled==='soft'?'true':undefined});var divProps=_objectSpread(_objectSpread({},baseProps),{},{tabIndex:tabIndex!==null&&tabIndex!==void 0?tabIndex:disabled==="hard"?-1:0,role:role!==null&&role!==void 0?role:"button","aria-disabled":disabled?"true":undefined});switch(tagButton){case"button":return useMergedProps(buttonProps,props);default:return useMergedProps(divProps,props);}}return{useButtonProps};}//export type UseAccordionSectionHeader<E extends Element> = (args: UseButtonParameters<E>) => UseAccordionSectionHeaderReturnType<E>;
//export interface UseAccordionSectionHeaderReturnType<E extends Element> { useAccordionSectionHeaderProps: (props: h.JSX.HTMLAttributes<E>) => h.JSX.HTMLAttributes<E>; }
//export type UseAccordionSectionBody<E extends Element> = () => UseAccordionSectionBodyReturnType<E>;
//export interface UseAccordionSectionBodyReturnType<E extends Element> { useAccordionSectionBodyProps: (props: h.JSX.HTMLAttributes<E>) => h.JSX.HTMLAttributes<E>; }
function useAccordion(_ref46){var{accordion:{initialIndex},linearNavigation:{disableArrowKeys,disableHomeEndKeys,navigationDirection},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange}}=_ref46;var[_currentFocusedIndex,setCurrentFocusedIndex,getCurrentFocusedIndex]=useState(null);var mcReturnType=useManagedChildren({managedChildren:{onChildrenMountChange:useStableCallback((m,u)=>{ocmc2();onChildrenMountChange===null||onChildrenMountChange===void 0?void 0:onChildrenMountChange(m,u);}),onAfterChildLayoutEffect}});var{useManagedChild,managedChildren:{children}}=mcReturnType;var navigateToFirst=T$1(()=>{changeTabbedIndex(0);},[]);var navigateToLast=T$1(()=>{changeTabbedIndex(children.getHighestIndex());},[]);var navigateToPrev=T$1(()=>{changeTabbedIndex(i=>(i!==null&&i!==void 0?i:0)-1);},[]);var navigateToNext=T$1(()=>{changeTabbedIndex(i=>(i!==null&&i!==void 0?i:0)+1);},[]);var linearReturnType=useLinearNavigation({linearNavigation:{navigateToFirst,navigateToLast,navigateToNext,navigateToPrev,disableArrowKeys,disableHomeEndKeys,navigationDirection:navigationDirection!==null&&navigationDirection!==void 0?navigationDirection:"vertical"// TODO: Make this relative to the page's logical direction
}});var{useLinearNavigationProps}=linearReturnType;var{changeIndex:changeExpandedIndex,getCurrentIndex:_getCurrentExpandedIndex}=useChildrenFlag({initialIndex,children,key:"open",closestFit:false});var{changeIndex:changeTabbedIndex,getCurrentIndex:_getTabbedIndex,reevaluateClosestFit:ocmc2}=useChildrenFlag({initialIndex,children,key:"tabbed",closestFit:true,onIndexChange:T$1(i=>{if(i!=null){var _children$getAt4;(_children$getAt4=children.getAt(i))===null||_children$getAt4===void 0?void 0:_children$getAt4.subInfo.focus();}},[])});var useAccordionSection=T$1(_ref47=>{var _ref48;var{button:{disabled,tagButton},accordionSection:{open:openFromUser},managedChild:{index,flags},subInfo,hasFocus:{onFocusedInnerChanged}}=_ref47,hasFocus=_objectWithoutProperties(_ref47.hasFocus,_excluded20);var[openFromParent,setOpenFromParent,getOpenFromParent]=useState(null);var{useRandomIdSourceElement:useBodyAsSourceId,useRandomIdReferencerElement:useHeaderAsReferencerId,randomId:{usedId:bodyId,getUsedId:getBodyId}}=useRandomId({randomId:{prefix:"aria-accordion-section-body-"},managedChildren:{onAfterChildLayoutEffect:null,onChildrenMountChange:null}});var{useRandomIdSourceElement:useHeaderAsSourceId,useRandomIdReferencerElement:useBodyAsReferencerId,randomId:{usedId:headerId,getUsedId:getHeaderId}}=useRandomId({randomId:{prefix:"aria-accordion-section-header-"},managedChildren:{onAfterChildLayoutEffect:null,onChildrenMountChange:null}});var{useRandomIdSourceElementProps:useBodyAsSourceIdProps}=useBodyAsSourceId();var{useRandomIdReferencerElementProps:useBodyAsReferencerIdProps}=useBodyAsReferencerId("aria-labelledby");var{useRandomIdSourceElementProps:useHeaderAsSourceIdProps}=useHeaderAsSourceId();var{useRandomIdReferencerElementProps:useHeaderAsReferencerIdProps}=useHeaderAsReferencerId("aria-controls");var open=(_ref48=openFromUser!==null&&openFromUser!==void 0?openFromUser:openFromParent)!==null&&_ref48!==void 0?_ref48:false;//const getOpen = useStableGetter(!!open);
var getIndex=useStableGetter(index);var{getElement:getHeaderElement,useRefElementProps:useHeaderRefElementProps}=useRefElement({});var{getElement:getBodyElement,useRefElementProps:useBodyRefElementProps}=useRefElement({});var focus=T$1(()=>{var _getHeaderElement;if(getCurrentFocusedIndex()!=null)(_getHeaderElement=getHeaderElement())===null||_getHeaderElement===void 0?void 0:_getHeaderElement.focus();},[]);var openRef=_({get:()=>!!getOpenFromParent(),set:open=>{setOpenFromParent(open);if(open){var bodyElement=getBodyElement();setCurrentFocusedIndex(getIndex());if(bodyElement){queueMicrotask(()=>bodyElement.focus());}}},isValid:returnTrue});var tabbedRef=_({get:()=>getCurrentFocusedIndex()==getIndex(),set:open=>{if(open)setCurrentFocusedIndex(getIndex());},isValid:returnTrue});useManagedChild({managedChild:{index:index,flags:_objectSpread({open:openRef.current,tabbed:tabbedRef.current},flags)},subInfo:{focus,getOpenFromParent,setOpenFromParent,subInfo}});function useAccordionSectionHeaderProps(_ref49){var _ref50;var{["aria-expanded"]:ariaExpanded,["aria-disabled"]:ariaDisabled}=_ref49,props=_objectWithoutProperties(_ref49,_excluded21);//const onFocus = () => { changeTabbedIndex(index); }
var onPress=()=>{if(getOpenFromParent())changeExpandedIndex(null);else changeExpandedIndex(index);};props.tabIndex=0;var{useButtonProps}=useButton({button:{tagButton,disabled,onPress},hasFocus:_objectSpread(_objectSpread({},hasFocus),{},{onFocusedInnerChanged:useStableCallback((focused,prev)=>{onFocusedInnerChanged===null||onFocusedInnerChanged===void 0?void 0:onFocusedInnerChanged(focused,prev);if(focused)changeTabbedIndex(index);})})});var retB=useButtonProps(props);//const ret3: h.JSX.HTMLAttributes<HeaderElement>
//    = useMergedProps<HeaderElement>(retD, { onFocus });
return useLinearNavigationProps(useHeaderAsSourceIdProps(useHeaderAsReferencerIdProps(_objectSpread({"aria-expanded":((_ref50=ariaExpanded!==null&&ariaExpanded!==void 0?ariaExpanded:open)!==null&&_ref50!==void 0?_ref50:false).toString(),"aria-disabled":ariaDisabled!==null&&ariaDisabled!==void 0?ariaDisabled:open?"true":undefined},useHeaderRefElementProps(retB)))));}function useAccordionSectionBodyProps(_ref51){var _ret2$tabIndex;var{role}=_ref51,props=_objectWithoutProperties(_ref51,_excluded22);var ret1=useBodyAsReferencerIdProps(_objectSpread({role:role!==null&&role!==void 0?role:"region"},props));var ret2=useBodyAsSourceIdProps(ret1);(_ret2$tabIndex=ret2.tabIndex)!==null&&_ret2$tabIndex!==void 0?_ret2$tabIndex:ret2.tabIndex=-1;return useBodyRefElementProps(ret2);}return{accordionSection:{expanded:open,focused:getCurrentFocusedIndex()==index,bodyId,headerId,getBodyId,getHeaderId},useAccordionSectionHeaderProps,useAccordionSectionBodyProps};},[]);return{managedChildren:mcReturnType.managedChildren,accordion:{changeExpandedIndex},useAccordionSection};}/**
     * Adds an ID and "aria-labelledby" for two elements, an "input" element and a "label" element.
     *
     * Returns the `useReferencedIdProps` hooks if you need to also add other ID-referencer attributes, like `for`
     *
     * @see useInputLabel
     */function useLabel(_ref52){var{label:{prefixInput,prefixLabel,tagInput,tagLabel}}=_ref52;var{useRandomIdSourceElement:useLabelAsSourceId,useRandomIdReferencerElement:useLabelAsReferencerId,randomId:{usedId:labelId,getUsedId:getLabelId}}=useRandomId({randomId:{prefix:prefixLabel},managedChildren:{onAfterChildLayoutEffect:null,onChildrenMountChange:null}});var{useRandomIdSourceElement:useInputAsSourceId,useRandomIdReferencerElement:useInputAsReferencerId,randomId:{usedId:inputId,getUsedId:getInputId}}=useRandomId({randomId:{prefix:prefixInput},managedChildren:{onAfterChildLayoutEffect:null,onChildrenMountChange:null}});var{useRandomIdSourceElementProps:useLabelAsSourceIdProps}=useLabelAsSourceId();var{useRandomIdSourceElementProps:useInputAsSourceIdProps}=useInputAsSourceId();var{useRandomIdReferencerElementProps:useLabelAsReferencerIdProps}=useLabelAsReferencerId("aria-labelledby");var{useRandomIdReferencerElementProps:useInputAsReferencerIdProps}=useInputAsReferencerId("for");var isSyntheticLabel=tagInput!="input"||tagLabel!="label";var useLabelLabel=T$1(function useLabelLabel(){return{useLabelLabelProps:props=>{var propsWithoutFor=useLabelAsSourceIdProps(props);var propsWithFor=useInputAsReferencerIdProps(propsWithoutFor);if(tagLabel=="label"&&tagInput=="input")return propsWithFor;else return propsWithoutFor;}};},[isSyntheticLabel]);var useLabelInput=T$1(function useLabelInput(){return{useLabelInputProps:_ref53=>{var{"aria-labelledby":ariaLabelledby}=_ref53,props=_objectWithoutProperties(_ref53,_excluded23);console.assert(!ariaLabelledby);var propsWithoutAriaLabelledBy=useInputAsSourceIdProps(props);var propsWithAriaLabelledBy=useLabelAsReferencerIdProps(propsWithoutAriaLabelledBy);if(isSyntheticLabel&&!props["aria-label"])return propsWithAriaLabelledBy;else return propsWithoutAriaLabelledBy;}};},[isSyntheticLabel]);return{useLabelInput,useLabelLabel,label:{labelId,inputId,getLabelId,getInputId}};}var handlesInput=(tag,labelPosition,which)=>{if(labelPosition==="separate"){if(which==="input-element")return true;else if(which==="label-element")return tag!="input";}else if(labelPosition==="wrapping"){if(which==="input-element")return false;if(which=="label-element")return true;}};/**
     * Handles label type (wrapping or separate) for checkboxes, radios, switches, etc.
     *
     * If it's a toggleable click-thing with a label (that can also be clicked), then it's a checkbox-like.
     * @param param0
     * @returns
     */function useCheckboxLike(_ref54){var{checkboxLike:{checked,disabled,labelPosition,role,onCheckedChange},label:{tagInput,tagLabel},hasFocusInput,hasFocusLabel}=_ref54;var stableOnInput=useStableCallback(e=>{e.preventDefault();onCheckedChange===null||onCheckedChange===void 0?void 0:onCheckedChange(e);});var focusSelf=useStableCallback(()=>{var element=getControlElement();element===null||element===void 0?void 0:element.focus();});var{useLabelInput:useILInput,useLabelLabel:useILLabel,label}=useLabel({label:{prefixLabel:"aria-checkbox-label-",prefixInput:"aria-checkbox-input-",tagInput:tagInput,tagLabel:tagLabel}});var{getElement:getLabelElement,useRefElementProps:useLabelRefElementProps}=useRefElement();var{getElement:getInputElement,useRefElementProps:useInputRefElementProps}=useRefElement();var useCheckboxLikeInputElement=T$1(function useCheckboxInputElement(){var tag=tagInput;var{useLabelInputProps:useILInputProps}=useILInput();var{useRefElementProps,getElement}=useRefElement({});// onClick and onChange are a bit messy, so we need to
// *always* make sure that the visible state is correct
// after all the event dust settles.
// See https://github.com/preactjs/preact/issues/2745,
// and https://github.com/preactjs/preact/issues/1899#issuecomment-525690194
h(()=>{var element=getElement();if(element&&tag=="input"){element.indeterminate=checked==="mixed";element.checked=checked===true;}},[tag,checked]);return{getInputElement:getElement,useCheckboxLikeInputElementProps};function useCheckboxLikeInputElementProps(_ref55){var userProps=_extends({},_ref55);// For some reason, Chrome won't fire onInput events for radio buttons that are tabIndex=-1??
// Needs investigating, but onInput works fine in Firefox
// TODO
var usePressProps=usePress({onClickSync:!!disabled||!handlesInput(tag,labelPosition,"input-element")?undefined:stableOnInput,exclude:undefined,hasFocus:hasFocusInput,focusSelf});var props=useMergedProps(useRefElementProps(useILInputProps(usePressProps({}))),{onInput:tag=="input"?e=>e.preventDefault():undefined});if(labelPosition=="wrapping"){// Because the wrapped label handles all interactions,
// we need to make sure this element can't be interacted with
// even if it's an input element.
props.inert=true;props.tabIndex=-1;props.role="presentation";props["aria-hidden"]="true";props.onFocus=_=>{var _getLabelElement,_getLabelElement$focu;return(_getLabelElement=getLabelElement())===null||_getLabelElement===void 0?void 0:(_getLabelElement$focu=_getLabelElement.focus)===null||_getLabelElement$focu===void 0?void 0:_getLabelElement$focu.call(_getLabelElement);};}else{if(tag==="input"){props.checked=checked===true;if(disabled===true||disabled==='hard')props.disabled=true;else props["aria-disabled"]="true";}else{props.role=role;props.tabIndex=0;props["aria-checked"]=checked==="mixed"?"mixed":checked===true?"true":undefined;props["aria-disabled"]="true";}}// Make sure that label clicks can't affect the checkbox while it's disabled
props.onClick=disabled?e=>{e.preventDefault();}:props.onClick;return useInputRefElementProps(useMergedProps(userProps,props));}},[useILInput,role,labelPosition,disabled,checked,tagInput]);var useCheckboxLikeLabelElement=T$1(function useCheckboxLabelElement(){var tag=tagLabel;var{useLabelLabelProps:useILLabelProps}=useILLabel();function useCheckboxLikeLabelElementProps(_ref56){var userProps=_extends({},_ref56);var usePressProps=usePress({onClickSync:!!disabled||!handlesInput(tag,labelPosition,"label-element")?undefined:stableOnInput,exclude:undefined,hasFocus:hasFocusLabel,focusSelf});var newProps=usePressProps({});if(labelPosition=="wrapping"){if(newProps.tabIndex==null)newProps.tabIndex=0;if(newProps.role==null)newProps.role=role;newProps["aria-disabled"]=(!!disabled).toString();newProps["aria-checked"]=checked.toString();}// Just make sure that label clicks can't affect the checkbox while it's disabled
newProps.onClick=disabled?e=>{e.preventDefault();}:newProps.onClick;return useILLabelProps(useLabelRefElementProps(useMergedProps(newProps,userProps)));}return{useCheckboxLikeLabelElementProps};},[useILLabel,disabled,checked,role,labelPosition,tagLabel]);var getControlElement=useStableCallback(()=>{return labelPosition=="wrapping"?getLabelElement():getInputElement();});return{useCheckboxLikeInputElement,useCheckboxLikeLabelElement,checkboxLike:{getLabelElement,getInputElement,focusSelf,getControlElement},label};}function useCheckbox(_ref57){var{checkboxLike,label,checkbox,hasFocusInput,hasFocusLabel}=_ref57;var{disabled,labelPosition,checked}=checkboxLike;var{tagInput,tagLabel}=label;var{onCheckedChange:onInput}=checkbox;var onInputEnhanced=e=>onInput===null||onInput===void 0?void 0:onInput(enhanceEvent(e,{checked:!checked}));var _useCheckboxLike=useCheckboxLike({hasFocusInput,hasFocusLabel,checkboxLike:{role:"checkbox",checked,onCheckedChange:onInputEnhanced,disabled,labelPosition},label}),{useCheckboxLikeInputElement,useCheckboxLikeLabelElement}=_useCheckboxLike,checkboxLikeRest=_objectWithoutProperties(_useCheckboxLike,_excluded24);var useCheckboxInputElement=T$1(function useCheckboxInputElement(){var tag=tagInput;var{useCheckboxLikeInputElementProps}=useCheckboxLikeInputElement();return{useCheckboxInputElementProps};function useCheckboxInputElementProps(_ref58){var _props$checked;var p0=_extends({},_ref58);var props=useCheckboxLikeInputElementProps(p0);(_props$checked=props.checked)!==null&&_props$checked!==void 0?_props$checked:props.checked=!!checked;if(tag=="input")props.type="checkbox";return props;}},[useCheckboxLikeInputElement,checked,labelPosition,disabled,tagInput]);var useCheckboxLabelElement=T$1(function useCheckboxLabelElement(){var{useCheckboxLikeLabelElementProps}=useCheckboxLikeLabelElement();function useCheckboxLabelElementProps(_ref59){var props=_extends({},_ref59);return useCheckboxLikeLabelElementProps(props);}return{useCheckboxLabelElementProps};},[useCheckboxLikeLabelElement,disabled,labelPosition,tagLabel]);return _objectSpread({useCheckboxInputElement,useCheckboxLabelElement},checkboxLikeRest);}/**
     *
     *
     * @param param0
     * @returns
     */function useCheckboxGroup(_ref60){var{linearNavigation,listNavigation,managedChildren,rovingTabIndex,typeaheadNavigation}=_ref60;//const onUpdateChildren = useStableCallback(onUpdateChildrenUnstable ?? (() => {}));
var _useListNavigation2=useListNavigation({linearNavigation,listNavigation,managedChildren,rovingTabIndex,typeaheadNavigation}),{useListNavigationChild,useListNavigationProps}=_useListNavigation2,listReturnType=_objectWithoutProperties(_useListNavigation2,_excluded25);var{managedChildren:{children}}=listReturnType;//const [uncheckedCount, setUnheckedCount] = useState(0);
// Keep track of all child IDs, and any time any of them change, 
// generate a new string with all of them concatenated together
// (but only once per render);
var allIds=_(new Set());var updateParentControlIds=useStableCallback(setter=>{setter===null||setter===void 0?void 0:setter(Array.from(allIds.current).join(" "));});var[getSetter,setSetter]=usePassiveState(updateParentControlIds,returnNull);var[_getUpdateIndex,setUpdateIndex]=usePassiveState(useStableCallback(()=>{updateParentControlIds(getSetter());}),returnZero);// Lots of machenery to track what total percentage of all checkboxes are checked,
// and notifying the parent checkbox of this information (while re-rendering as little as possible)
var getSelfIsChecked=T$1(percentChecked=>{return percentChecked<=0?false:percentChecked>=1?true:"mixed";},[]);var onAnyChildCheckedUpdate=useStableCallback((setter,percentChecked)=>{setter===null||setter===void 0?void 0:setter(getSelfIsChecked(percentChecked));});var[getTotalChildren,setTotalChildren]=usePassiveState(T$1(totalChildren=>{onAnyChildCheckedUpdate(getSetParentCheckboxChecked(),getPercentChecked(getTotalChecked(),totalChildren));},[]),returnZero);var[getTotalChecked,setTotalChecked]=usePassiveState(T$1(totalChecked=>{onAnyChildCheckedUpdate(getSetParentCheckboxChecked(),getPercentChecked(totalChecked,getTotalChildren()));},[]),returnZero);var getPercentChecked=T$1((totalChecked,totalChildren)=>{if(totalChildren>0)return totalChecked/totalChildren;else return totalChecked==0?0:1;},[]);var[getSetParentCheckboxChecked,setSetParentCheckboxChecked]=usePassiveState(useStableCallback(setter=>{onAnyChildCheckedUpdate(setter,getPercentChecked(getTotalChecked(),getTotalChildren()));}));// If the user has changed the parent checkbox's value, then this ref holds a memory of what values were held before.
// Otherwise, it's null when the last input was from a child checkbox. 
//const savedCheckedValues = useRef<Map<number, boolean | "mixed"> | null>(null);
var useCheckboxGroupParent=T$1(_ref61=>{var listNavArgs=_extends({},_ref61);var _useListNavigationChi=useListNavigationChild({listNavigation:listNavArgs.listNavigation,managedChild:listNavArgs.managedChild,rovingTabIndex:listNavArgs.rovingTabIndex,subInfo:{type:"parent",subInfo:listNavArgs.subInfo}}),{useListNavigationChildProps}=_useListNavigationChi,listNavigationReturnType=_objectWithoutProperties(_useListNavigationChi,_excluded26);var[ariaControls,setControls]=useState("");s(()=>{setSetter(()=>setControls);},[setControls]);var[checked,setChecked]=useState(false);h(()=>{setSetParentCheckboxChecked(()=>setChecked);},[]);var checkboxGroupParent={checked,onParentCheckedChange:onCheckboxGroupParentInput,getPercent:useStableCallback(()=>{return getPercentChecked(getTotalChecked(),getTotalChildren());})};return _objectSpread(_objectSpread({checkboxGroupParent},listNavigationReturnType),{},{useCheckboxGroupParentProps:function useCheckboxGroupParentInputProps(props){return useListNavigationChildProps(useMergedProps(useMergedProps({},{"aria-controls":ariaControls}),props));}});},[]);var onCheckboxGroupParentInput=T$1(/*#__PURE__*/function(){var _ref62=_asyncToGenerator(function*(e){e.preventDefault();var selfIsChecked=getSelfIsChecked(getPercentChecked(getTotalChecked(),getTotalChildren()));var nextChecked=selfIsChecked===false?"mixed":selfIsChecked==="mixed"?true:false;var willChangeAny=false;var promises=[];children.forEach(child=>{if(child.subInfo.subInfo.subInfo.type=="child")willChangeAny||(willChangeAny=child.subInfo.subInfo.subInfo.getChecked()!=child.subInfo.subInfo.subInfo.getLastUserChecked());});children.forEach(child=>{if(child.subInfo.subInfo.subInfo.type=="child"){var prevChecked=child.subInfo.subInfo.subInfo.getChecked();var checked;if(nextChecked=="mixed"){if(willChangeAny)checked=child.subInfo.subInfo.subInfo.getLastUserChecked();else checked=true;}else{checked=nextChecked;}if(checked!=prevChecked){var promise=child.subInfo.subInfo.subInfo.setCheckedFromParentInput(checked,e);if(promise){promises.push(promise);}}}});yield Promise.all(promises);});return function(_x){return _ref62.apply(this,arguments);};}(),[]);var useCheckboxGroupChild=T$1(function(asCheckboxGroupChild){debugLog("useCheckboxGroupChild",asCheckboxGroupChild.managedChild.index);//const { checkbox: { onCheckedChange }, checkboxLike: { checked, disabled, labelPosition }, label: { tagInput, tagLabel }, hasFocusInput, hasFocusLabel } = asCheckbox;
var{subInfo,checkboxGroupChild:{checked,focusSelf,onChangeFromParent}}=asCheckboxGroupChild;var getChecked=useStableGetter(checked);//labelPosition ??= "separate";
var[getLastUserChecked,setLastUserChecked]=usePassiveState(null,returnFalse$1);var onChildCheckedChange=useStableCallback(checked=>{setLastUserChecked(checked);});var onControlIdChanged=T$1((next,prev)=>{if(prev)allIds.current.delete(prev);if(next)allIds.current.add(next);if(!!next||!!prev){setUpdateIndex(i=>(i!==null&&i!==void 0?i:0)+1);}},[]);h(()=>{setTotalChildren(c=>(c!==null&&c!==void 0?c:0)+1);return()=>setTotalChildren(c=>(c!==null&&c!==void 0?c:0)-1);},[]);h(()=>{if(checked){setTotalChecked(c=>(c!==null&&c!==void 0?c:0)+1);return()=>setTotalChecked(c=>(c!==null&&c!==void 0?c:0)-1);}},[checked]);var _useListNavigationChi2=useListNavigationChild({subInfo:{type:"child",getLastUserChecked,setCheckedFromParentInput:onChangeFromParent,getChecked,subInfo},listNavigation:asCheckboxGroupChild.listNavigation,managedChild:asCheckboxGroupChild.managedChild,rovingTabIndex:_objectSpread(_objectSpread({},asCheckboxGroupChild.rovingTabIndex),{},{focusSelf})}),{useListNavigationChildProps}=_useListNavigationChi2,listNavigationReturnType=_objectWithoutProperties(_useListNavigationChi2,_excluded27);return _objectSpread(_objectSpread({checkboxGroupChild:{onChildCheckedChange,onControlIdChanged}},listNavigationReturnType),{},{useListNavigationChildProps:useListNavigationChildProps});},[]);return{useCheckboxGroupChild,useCheckboxGroupParent,useListNavigationProps,linearNavigation:listReturnType.linearNavigation,listNavigation:listReturnType.listNavigation,managedChildren:listReturnType.managedChildren,rovingTabIndex:listReturnType.rovingTabIndex,typeaheadNavigation:listReturnType.typeaheadNavigation/*checkboxGroup: {
                parentIsChecked: getSelfIsCheckedUnstable() as boolean | "mixed",
                parentPercentChecked: (checkedCount / (children.getHighestIndex() + 1)),
            }*/};}/**
     * Adds event handlers for a modal-like soft-dismiss interaction.
     *
     * That is, any clicks or taps outside of the given component,
     * or any time the Escape key is pressed within the component,
     * (with various browser oddities regarding clicks on blank or inert areas handled)
     * the component will request to close itself.
     *
     * Of course, if you don't do anything in the `onClose` function,
     * it won't be a soft dismiss anymore.
     *
     * @param param0
     * @returns
     */function useSoftDismiss(_ref63){var{softDismiss:{onClose,getElements,open},activeElement:{onLastActiveElementChange}}=_ref63,activeElement=_objectWithoutProperties(_ref63.activeElement,_excluded28);var stableOnClose=useStableCallback(onClose);var stableGetElements=useStableCallback(getElements);var getOpen=useStableGetter(open);var{getDocument}=activeElement;var onBackdropClick=T$1(function onBackdropClick(e){if(!getOpen())return;var document=getDocument();// Basically, "was this event fired on the root-most element, or at least an element not contained by the modal?"
// Either could be how the browser handles these sorts of "interacting with nothing" events.
if(e.target==(document===null||document===void 0?void 0:document.documentElement)){stableOnClose("backdrop");}var elements=stableGetElements();if(elements&&e.target instanceof Element){if(!Array.isArray(elements))elements=[elements];var foundInsideClick=false;for(var element of elements){if(element&&element.contains(e.target)){foundInsideClick=true;break;}}if(!foundInsideClick){onClose("backdrop");}}},[]);useActiveElement(_objectSpread(_objectSpread({},activeElement),{},{onLastActiveElementChange:T$1((newElement,prev)=>{onLastActiveElementChange===null||onLastActiveElementChange===void 0?void 0:onLastActiveElementChange(newElement,prev);var validFocusableElements=stableGetElements();if(validFocusableElements){if(!Array.isArray(validFocusableElements))validFocusableElements=[validFocusableElements];for(var focusable of validFocusableElements){if(focusable!==null&&focusable!==void 0&&focusable.contains(newElement))return;}}onClose("lost-focus");},[])}));var{useRefElementProps}=useRefElement({onElementChange:T$1(e=>{if(e){var _document2=e.ownerDocument;var _window=_document2===null||_document2===void 0?void 0:_document2.defaultView;// Since everything else is inert, we listen for captured clicks on the window
// (we don't use onClick since that doesn't fire when clicked on empty/inert areas)
// Note: We need a *separate* touch event on mobile Safari, because
// it doesn't let click events bubble or be captured from traditionally non-interactive elements,
// but touch events work as expected.
var mouseDown=e=>{if(getOpen())onBackdropClick(e);};var touchStart=e=>{if(getOpen())onBackdropClick(e);};var keyDown=e=>{if(e.key==="Escape"){stableOnClose("escape");}};_window===null||_window===void 0?void 0:_window.addEventListener("mousedown",mouseDown,{capture:true});_window===null||_window===void 0?void 0:_window.addEventListener("touchstart",touchStart,{capture:true});_window===null||_window===void 0?void 0:_window.addEventListener("keydown",keyDown);return()=>{_window===null||_window===void 0?void 0:_window.removeEventListener("mousedown",mouseDown);_window===null||_window===void 0?void 0:_window.removeEventListener("touchstart",touchStart);_window===null||_window===void 0?void 0:_window.removeEventListener("keydown",keyDown);};}},[])});return{useSoftDismissProps:useRefElementProps,softDismiss:{onBackdropClick}};}/**
     * A generic modal hook, used by modal dialogs, but can also
     * be used by anything that's modal with a backdrop.
     * @param param0
     * @returns
     */function useModal(_ref64){var _focusSelf;var{modal:{bodyIsOnlySemantic:descriptive,focusSelf},softDismiss:{onClose,open},activeElement}=_ref64;var{useRefElementProps:useTitleRefElementProps,getElement:getTitleElement}=useRefElement({});var{useRefElementProps:useBodyRefElementProps,getElement:getBodyElement}=useRefElement({});(_focusSelf=focusSelf)!==null&&_focusSelf!==void 0?_focusSelf:focusSelf=()=>{if(descriptive){var _getBodyElement;(_getBodyElement=getBodyElement())===null||_getBodyElement===void 0?void 0:_getBodyElement.focus({preventScroll:true});}else{var titleElement=getTitleElement();if(titleElement)titleElement.focus({preventScroll:true});}//const elementToFocus = getTitleElement() ?? getBodyElement()
};var stableOnClose=useStableCallback(onClose);var stableFocusSelf=useStableCallback(focusSelf);//const [modalDescribedByBody, setModalDescribedByBody] = useState(false);
useHideScroll(open);var{useRandomIdSourceElement:useModalIdAsSource,useRandomIdReferencerElement:useModalIdAsReferencerElement}=useRandomId({randomId:{prefix:"aria-modal-"},managedChildren:{onAfterChildLayoutEffect:null,onChildrenMountChange:null}});var{useRandomIdSourceElement:useBodyIdAsSource,useRandomIdReferencerElement:useBodyIdReferencerElement}=useRandomId({randomId:{prefix:"aria-modal-body-"},managedChildren:{onAfterChildLayoutEffect:null,onChildrenMountChange:null}});var{useRandomIdSourceElement:useTitleIdAsSource,useRandomIdReferencerElement:useTitleIdReferencerElement}=useRandomId({randomId:{prefix:"aria-modal-title-"},managedChildren:{onAfterChildLayoutEffect:null,onChildrenMountChange:null}});var{useRefElementProps:useModalRefElement,getElement:getModalElement}=useRefElement({});var{softDismiss:{onBackdropClick},useSoftDismissProps}=useSoftDismiss({softDismiss:{onClose:stableOnClose,getElements:getModalElement,open:!!open},activeElement});var useModalBackdrop=T$1(function useModalBackdrop(){function useModalBackdropProps(props){return useMergedProps({onPointerUp:onBackdropClick},props);}return{useModalBackdropProps};},[]);var useModalFocusContainerProps=function(props){var{useFocusTrapProps}=useFocusTrap({trapActive:open});return useFocusTrapProps(props);};var useModalProps=function(_ref65){var{"aria-modal":ariaModal,role}=_ref65,p0=_objectWithoutProperties(_ref65,_excluded29);var{useRandomIdSourceElementProps:useModalIdAsSourceProps}=useModalIdAsSource();var{useRandomIdReferencerElementProps:useTitleIdReferencerElementProps}=useTitleIdReferencerElement("aria-labelledby");var{useRandomIdReferencerElementProps:useBodyIdReferencerElementProps}=useBodyIdReferencerElement("aria-describedby");console.assert(!ariaModal);h(()=>{if(open)stableFocusSelf();},[open]);var p1=useBodyIdReferencerElementProps(p0);var p2=useModalIdAsSourceProps(p1);var pFinal=useTitleIdReferencerElementProps(p2);return useSoftDismissProps(useMergedProps(useModalRefElement({role:role||"dialog"}),descriptive?pFinal:p2));};var useModalTitle=T$1(function useModalTitle(){var{useRandomIdSourceElementProps:useTitleIdAsSourceProps}=useTitleIdAsSource();var useModalTitleProps=function(props){var _props$tabIndex;(_props$tabIndex=props.tabIndex)!==null&&_props$tabIndex!==void 0?_props$tabIndex:props.tabIndex=-1;return useTitleRefElementProps(useTitleIdAsSourceProps(props));};return{useModalTitleProps};},[]);var useModalBody=T$1(function useModalBody(){var{useRandomIdSourceElementProps:useBodyIdAsSourceProps}=useBodyIdAsSource();var{useRandomIdReferencerElementProps:useModalIdAsReferencerElementProps}=useModalIdAsReferencerElement("data-modal-id");var useModalBodyProps=function(props){var _props$tabIndex2;(_props$tabIndex2=props.tabIndex)!==null&&_props$tabIndex2!==void 0?_props$tabIndex2:props.tabIndex=-1;return useBodyRefElementProps(useBodyIdAsSourceProps(useModalIdAsReferencerElementProps(props)));};return{useModalBodyProps};},[]);return{useModalProps,useModalTitle,useModalBody,useModalBackdrop,useModalFocusContainerProps,softDismiss:{onBackdropClick}};}/**
     * Allows for hiding the scroll bar of the root HTML element
     * without shifting the layout of the page more than adding a fow pixels
     * of padding to the root element if necessary.
     * @param hideScroll
     */function useHideScroll(hideScroll){var[getScrollbarWidth,setScrollbarWidth]=usePassiveState(null);var[getScrollbarHeight,setScrollbarHeight]=usePassiveState(null);h(()=>{if(hideScroll){// When scrolling is resumed, we'll need to restore the original scroll positions
// so we need to keep this information around
var originalScrollTop=document.documentElement.scrollTop;var originalScrollLeft=document.documentElement.scrollLeft;// Measure the width of the page (minus the scrollbar)
var widthWithScrollBar=document.documentElement.scrollWidth;var heightWithScrollBar=document.documentElement.scrollHeight;// Apply a class that hides the scrollbar.
document.documentElement.classList.add("document-scroll-hidden");// In case multiple things are locking scroll, keep track of how many are doing that
// (just add 1 on enable, subtract 1 on disable)
document.documentElement.dataset["scrollHiders"]=(+(document.documentElement.dataset["scrollHiders"]||"0")+1).toString();// Measure the new width without a scrollbar 
// so we can take the difference as the scrollbar width.
var widthWithoutScrollBar=document.documentElement.scrollWidth;var heightWithoutScrollBar=document.documentElement.scrollHeight;var scrollbarWidth=widthWithoutScrollBar-widthWithScrollBar;var scrollbarHeight=heightWithoutScrollBar-heightWithScrollBar;// Failsafe -- if this measuring trick does something unexpected, just ignore it
if(scrollbarWidth>80)scrollbarWidth=0;if(scrollbarHeight>80)scrollbarHeight=0;// Make our measurements available as CSS properties for general use
document.documentElement.style.setProperty("--root-scrollbar-width","".concat(scrollbarWidth,"px"));document.documentElement.style.setProperty("--root-scrollbar-height","".concat(scrollbarHeight,"px"));document.documentElement.style.setProperty("--root-scrollstop-top","".concat(originalScrollTop,"px"));document.documentElement.style.setProperty("--root-scrollstop-left","".concat(originalScrollLeft,"px"));setScrollbarWidth(scrollbarWidth);setScrollbarHeight(scrollbarHeight);return()=>{// Undo all the things we just did
document.documentElement.dataset["scrollHiders"]=(+(document.documentElement.dataset["scrollHiders"]||"0")-1).toString();if(document.documentElement.dataset["scrollHiders"]=="0"){// If we were the last scroll-locking thing to stop, then remove the class that stops scrolling.
document.documentElement.removeAttribute("data-scroll-hiders");document.documentElement.classList.remove("document-scroll-hidden");// Also, restore the original scroll position
// We do this by forcing the scroll behavior to not be smooth
// (it's instant if nothing is set to smooth, https://www.w3.org/TR/cssom-view/#scrolling),
// scrolling, then restoring the original scroll behavior 
// (which was probably already auto anyway, but just to be safe)
var originalScrollBehavior=document.documentElement.style.scrollBehavior;document.documentElement.style.scrollBehavior="auto";document.documentElement.scrollTo({top:originalScrollTop,left:originalScrollLeft,behavior:"auto"});document.documentElement.style.scrollBehavior=originalScrollBehavior;}};}},[hideScroll]);return{getScrollbarWidth,getScrollbarHeight};}function useDialog(_ref66){var{softDismiss:{open},modal:{bodyIsOnlySemantic,focusSelf},dialog:{onClose},activeElement}=_ref66;// TODO: Differences between dialog and modal go here, presumably.
// Non-modal dialogs need to be able to be repositioned, etc.
var{useModalBackdrop,useModalBody,useModalProps,useModalTitle,softDismiss:{onBackdropClick},useModalFocusContainerProps}=useModal({modal:{bodyIsOnlySemantic,focusSelf},softDismiss:{onClose,open},activeElement});var useDialogBackdrop=T$1(()=>{var{useModalBackdropProps}=useModalBackdrop();return{useDialogBackdropProps:useModalBackdropProps};},[useModalBackdrop]);var useDialogBody=T$1(()=>{var{useModalBodyProps}=useModalBody();return{useDialogBodyProps:useModalBodyProps};},[useModalBackdrop]);var useDialogProps=useModalProps;var useDialogTitle=T$1(()=>{var{useModalTitleProps}=useModalTitle();return{useDialogTitleProps:useModalTitleProps};},[useModalTitle]);return{useDialogProps,useDialogTitle,useDialogBody,useDialogBackdrop,useDialogFocusContainerProps:useModalFocusContainerProps,softDismiss:{onBackdropClick}};}function useDrawer(_ref67){var{softDismiss:{open,onClose},activeElement,modal:{bodyIsOnlySemantic,focusSelf}}=_ref67;// TODO: Drawers are not always modal.
var{useModalBackdrop,useModalBody,useModalProps,useModalTitle,useModalFocusContainerProps,softDismiss:{onBackdropClick}}=useModal({modal:{bodyIsOnlySemantic:bodyIsOnlySemantic!==null&&bodyIsOnlySemantic!==void 0?bodyIsOnlySemantic:false,focusSelf},softDismiss:{onClose,open},activeElement});var useDrawerBackdrop=T$1(()=>{var{useModalBackdropProps}=useModalBackdrop();return{useDrawerBackdropProps:useModalBackdropProps};},[useModalBackdrop]);var useDrawerBody=T$1(()=>{var{useModalBodyProps}=useModalBody();return{useDrawerBodyProps:useModalBodyProps};},[useModalBackdrop]);var useDrawerProps=useModalProps;var useDrawerTitle=T$1(()=>{var{useModalTitleProps}=useModalTitle();return{useDrawerTitleProps:useModalTitleProps};},[useModalTitle]);return{useDrawerProps,useDrawerTitle,useDrawerBody,useDrawerBackdrop,useDrawerFocusContainerProps:useModalFocusContainerProps,softDismiss:{onBackdropClick}};}function identity$1(t){return t;}function useGridlist(_ref68){var{linearNavigation,listNavigation,managedChildren,rovingTabIndex,typeaheadNavigation,childrenHaveFocus,singleSelection,gridlist}=_ref68;// TODO: Comparing the location should happen out here, not in each section so that grid navigation works right...
var manglers=_({rowIndexMangler:identity$1,rowIndexDemangler:identity$1});var _useGridNavigation=useGridNavigation({linearNavigation,listNavigation,managedChildren,rovingTabIndex,typeaheadNavigation,gridNavigation:{rowIndexDemangler:T$1(n=>manglers.current.rowIndexDemangler(n),[]),rowIndexMangler:T$1(n=>manglers.current.rowIndexMangler(n),[])}}),{useGridNavigationProps,useGridNavigationRow}=_useGridNavigation,gridNavRet1=_objectWithoutProperties(_useGridNavigation,_excluded30);gridNavRet1.managedChildren.children;var _useSingleSelection2=useSingleSelection({childrenHaveFocus,singleSelection:{children:gridNavRet1.managedChildren.children,selectedIndex:typeof gridlist.selectedIndex=="number"?gridlist.selectedIndex:null,selectionMode:singleSelection.selectionMode,setSelectedIndex:singleSelection.setSelectedIndex,setTabbableIndex:gridNavRet1.rovingTabIndex.setTabbableIndex}}),{useSingleSelectionChild}=_useSingleSelection2,singleSelectInfo=_objectWithoutProperties(_useSingleSelection2,_excluded31);var useGridlistRow=T$1(_ref69=>{var{asChildRowOfSection,asParentRowOfCells,gridlistRow:{locationIndex,selected},hasFocus,singleSelection}=_ref69;debugLog("useGridlistRow",asChildRowOfSection.managedChild.index);var getCells=T$1(()=>{return cells;},[]);var _useSingleSelectionCh2=useSingleSelectionChild({hasFocus:hasFocus,managedChild:asChildRowOfSection.managedChild,singleSelection:_objectSpread(_objectSpread({},singleSelection),{},{focusSelf:useStableCallback(()=>{debugger;gridNavRet2.asParentOfCells.rovingTabIndex.focusSelf();})})}),{flags:ssflags,useSingleSelectionChildProps}=_useSingleSelectionCh2,singleSelectInfo=_objectWithoutProperties(_useSingleSelectionCh2,_excluded32);var _useGridNavigationRow=useGridNavigationRow({asChildRowOfSection:{subInfo:{getCells,locationIndex,subInfo:asChildRowOfSection.subInfo},listNavigation:asChildRowOfSection.listNavigation,managedChild:{index:asChildRowOfSection.managedChild.index,flags:_objectSpread(_objectSpread({},asChildRowOfSection.managedChild.flags),ssflags)},rovingTabIndex:asChildRowOfSection.rovingTabIndex},asParentRowOfCells}),{useGridNavigationCell,useGridNavigationRowProps}=_useGridNavigationRow,gridNavRet2=_objectWithoutProperties(_useGridNavigationRow,_excluded33);var{asParentOfCells:{managedChildren:{children:cells}}}=gridNavRet2;var useGridlistChild=T$1(_ref70=>{var{listNavigation,managedChild,rovingTabIndex,subInfo,hasFocus,gridlistChild:{locationIndex}}=_ref70;debugLog("useGridlistChild",managedChild.index);var _useGridNavigationCel=useGridNavigationCell({listNavigation,managedChild,rovingTabIndex,subInfo:{locationIndex,subInfo},hasFocus}),{useGridNavigationCellProps}=_useGridNavigationCel,gridNavRet3=_objectWithoutProperties(_useGridNavigationCel,_excluded34);var useGridlistChildProps=props=>{overwriteWithWarning("useGridlistChild",props,"role","cell");return useGridNavigationCellProps(props);};return _objectSpread({useGridlistChildProps},gridNavRet3);},[]);var useGridlistRowProps=props=>{overwriteWithWarning("useGridlistRow",props,"role","row");var ret=useGridNavigationRowProps(useSingleSelectionChildProps(props));ret[singleSelection.ariaPropName]=(selected||singleSelectInfo.singleSelection.selected||false).toString();return ret;};var ret=_objectSpread({useGridlistChild,useGridlistRowProps},gridNavRet2);return ret;},[]);var useGridlistSection=T$1(_ref71=>{var{compareRows}=_ref71;var getIndex=T$1(i=>i.index,[]);var _useSortableChildren=useSortableChildren({rearrangeableChildren:{getIndex},sortableChildren:{compare:(lhs,rhs)=>{if(lhs.subInfo.subInfo.subInfo.locationIndex===rhs.subInfo.subInfo.subInfo.locationIndex)return compareRows(lhs.index,rhs.index);return lhs.subInfo.subInfo.subInfo.locationIndex-rhs.subInfo.subInfo.subInfo.locationIndex;}}}),{useSortableProps}=_useSortableChildren,sortableRet=_objectWithoutProperties(_useSortableChildren,_excluded35);var useGridlistSectionProps=props=>{console.assert(props.children!=null);overwriteWithWarning("useGridlistSection",props,"role","rowgroup");return useSortableProps(props);};return _objectSpread({useGridlistSectionProps},sortableRet);},[]);var useGridlistProps=props=>{overwriteWithWarning("useGridlist",props,"role","grid");overwriteWithWarning("useGridlist",props,"aria-multiselectable",(gridlist.selectedIndex==="multi").toString());return useGridNavigationProps(props);};return{useGridlistProps,useGridlistSection,useGridlistRow,gridNavigation:gridNavRet1.gridNavigation,linearNavigation:gridNavRet1.linearNavigation,listNavigation:gridNavRet1.listNavigation,managedChildren:gridNavRet1.managedChildren,rovingTabIndex:gridNavRet1.rovingTabIndex,singleSelection:singleSelectInfo.singleSelection,typeaheadNavigation:gridNavRet1.typeaheadNavigation};}function useListboxMulti(_ref72){var{listboxMulti:{tagLabel,tagList},rovingTabIndex:{onTabbableIndexChange}}=_ref72,ln=_extends({},_ref72.linearNavigation),ls=_extends({},_ref72.listNavigation),mc=_extends({},_ref72.managedChildren),rti=_objectWithoutProperties(_ref72.rovingTabIndex,_excluded36),tn=_extends({},_ref72.typeaheadNavigation);var{useLabelInput,useLabelLabel}=useLabel({label:{prefixLabel:"aria-listbox-label-",prefixInput:"aria-listbox-",tagLabel:tagLabel,tagInput:tagList}});var listReturnType=useListNavigation({linearNavigation:_objectSpread({},ln),listNavigation:_objectSpread({},ls),managedChildren:_objectSpread({},mc),rovingTabIndex:_objectSpread(_objectSpread({},rti),{},{onTabbableIndexChange:useStableCallback(i=>{onTabbableIndexChange===null||onTabbableIndexChange===void 0?void 0:onTabbableIndexChange(i);})}),typeaheadNavigation:tn});var{useListNavigationChild,useListNavigationProps,rovingTabIndex:{setTabbableIndex}}=listReturnType;var{useLabelInputProps}=useLabelInput();var[getShiftHeld,setShiftHeld]=usePassiveState(null,returnFalse$1);var useListboxMultiItem=T$1(_ref73=>{var{listboxMultiItem:{selected,disabled,onSelectedChange},managedChild,listNavigation:ls,rovingTabIndex:rti,hasFocus,subInfo}=_ref73;debugLog("useListboxMultiItem",managedChild.index,selected);var getSelected=useStableGetter(selected);var{useRefElementProps,getElement}=useRefElement({});var stableOnSelect=useStableCallback(onSelectedChange!==null&&onSelectedChange!==void 0?onSelectedChange:()=>{});var{useListNavigationChildProps,rovingTabIndex:rti2_ret}=useListNavigationChild({listNavigation:ls,managedChild,rovingTabIndex:rti,subInfo:{subInfo,selected,onSelect:stableOnSelect}});s(()=>{var element=getElement();if(element&&getShiftHeld()){stableOnSelect===null||stableOnSelect===void 0?void 0:stableOnSelect({target:element,currentTarget:element,[EventDetail]:{selected:true}});}},[rti2_ret.tabbable]);return{useListboxMultiItemProps,listboxMultiItem:{getSelected,tabbable:rti2_ret.tabbable},rovingTabIndex:rti2_ret};function useListboxMultiItemProps(props){var _rti2_ret$tabbable;var usePressProps=usePress({onClickSync:disabled?null:e=>{setTabbableIndex(managedChild.index,false);stableOnSelect===null||stableOnSelect===void 0?void 0:stableOnSelect(_objectSpread(_objectSpread({},e),{},{[EventDetail]:{selected:!getSelected()}}));e.preventDefault();},exclude:{},hasFocus,focusSelf:e=>rti.focusSelf});props.role="option";//props["aria-setsize"] = (childCount).toString();
//props["aria-posinset"] = (info.index + 1).toString();
props["aria-selected"]=((_rti2_ret$tabbable=rti2_ret.tabbable)!==null&&_rti2_ret$tabbable!==void 0?_rti2_ret$tabbable:false).toString();if(disabled)props["aria-disabled"]="true";return useRefElementProps(useListNavigationChildProps(usePressProps(props)));}},[useListNavigationChild]);var useListboxMultiLabel=T$1(function useListboxMultiLabel(){function useListboxMultiLabelProps(props){var{useLabelLabelProps}=useLabelLabel();return useLabelLabelProps(props);}return{useListboxMultiLabelProps};},[useLabelLabel]);return{useListboxMultiItem,useListboxMultiProps,useListboxMultiLabel,linearNavigation:listReturnType.linearNavigation,listNavigation:listReturnType.listNavigation,rovingTabIndex:listReturnType.rovingTabIndex,typeaheadNavigation:listReturnType.typeaheadNavigation,managedChildren:listReturnType.managedChildren};function useListboxMultiProps(props){props.role="listbox";props["aria-multiselectable"]="true";return useListNavigationProps(useLabelInputProps(useMergedProps({onKeyDown,onKeyUp,onfocusout:onFocusOut},props)));}function onKeyDown(e){if(e.key=="Shift")setShiftHeld(true);}function onKeyUp(e){if(e.key=="Shift")setShiftHeld(false);}function onFocusOut(_){setShiftHeld(false);}}function useListboxSingle(_ref74){var{listboxSingle:{tagLabel,tagList,onSelect},singleSelection:{selectedIndex},linearNavigation,listNavigation,managedChildren,rovingTabIndex,typeaheadNavigation,childrenHaveFocus}=_ref74,_lbs=_objectWithoutProperties(_ref74.listboxSingle,_excluded37),ss=_objectWithoutProperties(_ref74.singleSelection,_excluded38);var _useLabel=useLabel({label:{prefixLabel:"aria-listbox-label-",prefixInput:"aria-listbox-",tagInput:tagList,tagLabel:tagLabel}}),{useLabelInput,useLabelLabel}=_useLabel,labelReturnType=_objectWithoutProperties(_useLabel,_excluded39);var onSelectedIndexChange=useStableCallback((newIndex,event)=>{stableOnSelect(enhanceEvent(event,{selectedIndex:newIndex}));});var _useListNavigationSin=useListNavigationSingleSelection({childrenHaveFocus,linearNavigation,listNavigation,managedChildren,rovingTabIndex,singleSelection:_objectSpread(_objectSpread({},ss),{},{setSelectedIndex:onSelectedIndexChange,selectedIndex}),typeaheadNavigation}),{useListNavigationSingleSelectionChild,useListNavigationSingleSelectionProps}=_useListNavigationSin,listReturnType=_objectWithoutProperties(_useListNavigationSin,_excluded40);var{useLabelInputProps}=useLabelInput();var stableOnSelect=useStableCallback(onSelect!==null&&onSelect!==void 0?onSelect:()=>{});var useListboxSingleItem=T$1(_ref75=>{var{listboxSingleItem:{disabled},listNavigation,managedChild,rovingTabIndex,hasFocus,singleSelection,subInfo}=_ref75;debugLog("useListboxSingleItem",managedChild.index);var{rovingTabIndex:rti_ret,singleSelection:ss_ret,useListNavigationSingleSelectionChildProps}=useListNavigationSingleSelectionChild({managedChild,listNavigation,rovingTabIndex,hasFocus,singleSelection:_objectSpread({},singleSelection),subInfo:{subInfo}});return{useListboxSingleItemProps,rovingTabIndex:rti_ret,singleSelection:ss_ret};function useListboxSingleItemProps(props){var _ss_ret$selected;props.role="option";props["aria-selected"]=((_ss_ret$selected=ss_ret.selected)!==null&&_ss_ret$selected!==void 0?_ss_ret$selected:false).toString();if(disabled)props["aria-disabled"]="true";return useListNavigationSingleSelectionChildProps(props);}},[useListNavigationSingleSelectionChild]);var useListboxSingleLabel=T$1(function useListboxSingleLabel(){function useListboxSingleLabelProps(props){var{useLabelLabelProps}=useLabelLabel();return useLabelLabelProps(props);}return{useListboxSingleLabelProps};},[useLabelLabel]);return{useListboxSingleItem,useListboxSingleProps,useListboxSingleLabel,label:labelReturnType.label,linearNavigation:listReturnType.linearNavigation,listNavigation:listReturnType.listNavigation,managedChildren:listReturnType.managedChildren,rovingTabIndex:listReturnType.rovingTabIndex,singleSelection:listReturnType.singleSelection,typeaheadNavigation:listReturnType.typeaheadNavigation};function useListboxSingleProps(props){props.role="listbox";return useListNavigationSingleSelectionProps(useLabelInputProps(props));}}function useListboxGroup(){var{useRandomIdReferencerElement,useRandomIdSourceElement}=useRandomId({randomId:{prefix:"listbox-multi-group"},managedChildren:{}});var{useRandomIdSourceElementProps}=useRandomIdSourceElement();var{useRandomIdReferencerElementProps}=useRandomIdReferencerElement("aria-labelledby");var useListboxGroupHeadingProps=props=>{return useRandomIdSourceElementProps(props);};var useListboxGroupContainerProps=props=>{overwriteWithWarning("useListboxMultiGroupProps",props,"role","group");return useRandomIdReferencerElementProps(props);};return{useListboxGroupContainerProps,useListboxGroupHeadingProps};}/**
     * A menu surface is what handles user interaction with an interactive but transient surface (like a menu or a popup).
     *
     * This isn't strictly an ARIA thing, but the keyboard (etc.) interactions are shared among a lot of widgets.
     *
     * Related to menus, which are a menu contained within a menu surface. Not related to menubars -- menus contain menubars, but not all menubars are contained within a menu or its surface.
     *
     */function useMenuSurface(_ref76){var _intersectionObserver;var{softDismiss,menuSurface:{sendFocusToMenu,role},activeElement}=_ref76;//const sendFocusWithinMenu = useStableCallback(sendFocusToMenu);
//const [focusTrapActive, setFocusTrapActive] = useState<null | boolean>(null);
var{open,onClose:userOnClose}=softDismiss;var onClose=useStableCallback(reason=>{if(reason!="lost-focus"){var opener=getOpenerElement();if(opener&&"focus"in opener)opener.focus({preventScroll:true});}return userOnClose(reason);});useEnsureStability("useMenuSurface",onClose,role,sendFocusToMenu);var getIsOpen=useStableGetter(open);var intersectionObserver=_(null);var[getSurfaceFullyVisible,setSurfaceFullyVisible]=usePassiveState(null,returnFalse$1);(_intersectionObserver=intersectionObserver.current)!==null&&_intersectionObserver!==void 0?_intersectionObserver:intersectionObserver.current=new IntersectionObserver((entries,_observer)=>{for(var entry of entries){setSurfaceFullyVisible(entry.intersectionRatio>=1);}},{root:null,threshold:[0,1]});var[,setOpenerElement,getOpenerElement]=useState(null);var{useRandomIdSourceElement,useRandomIdReferencerElement}=useRandomId({randomId:{prefix:"aria-menu-"},managedChildren:{}});var{useRandomIdSourceElementProps}=useRandomIdSourceElement();var{useRandomIdReferencerElementProps}=useRandomIdReferencerElement("aria-controls");var{getElement:getButtonElement,useRefElementProps:useButtonRefElementProps}=useRefElement({onElementChange:setOpenerElement});var{getElement:getMenuElement,useRefElementProps:useMenuBaseRefElementProps}=useRefElement({});var _useSoftDismiss=useSoftDismiss({softDismiss:_objectSpread(_objectSpread({},softDismiss),{},{getElements:()=>[getButtonElement(),getMenuElement()]}),activeElement}),{useSoftDismissProps}=_useSoftDismiss,softDismissReturn=_objectWithoutProperties(_useSoftDismiss,_excluded41);var useMenuSurfaceProps=props=>{function onKeyDown(e){var open=getIsOpen();if(e.key=="Escape"&&open){onClose("escape");e.stopPropagation();e.stopImmediatePropagation();e.preventDefault();}}return useSoftDismissProps(useMenuBaseRefElementProps(useMergedProps({onKeyDown},props)));};var useMenuSurfaceButtonProps=props=>{overwriteWithWarning("useMenuSurfaceButtonProps",props,"aria-expanded",open.toString());overwriteWithWarning("useMenuSurfaceButtonProps",props,"aria-haspopup",role);return useButtonRefElementProps(useRandomIdReferencerElementProps(props));};h(()=>{if(open===true){sendFocusToMenu===null||sendFocusToMenu===void 0?void 0:sendFocusToMenu();setTimeout(()=>{if(!getSurfaceFullyVisible()){var _getMenuElement;(_getMenuElement=getMenuElement())===null||_getMenuElement===void 0?void 0:_getMenuElement.scrollIntoView();}});}},[open]);function useMenuSurfaceChildProps(props){props.role=role;return useRandomIdSourceElementProps(props);}return _objectSpread({useMenuSurfaceChildProps,useMenuSurfaceSentinel:T$1(()=>{var _useFocusSentinel=useFocusSentinel({focusSentinel:{open:open===true,onClose:()=>onClose("escape"),sendFocusToMenu}}),{useSentinelProps:useMenuSentinelProps}=_useFocusSentinel,rest=_objectWithoutProperties(_useFocusSentinel,_excluded42);return _objectSpread({useMenuSentinelProps},rest);},[open,onClose]),useMenuSurfaceProps,useMenuSurfaceButtonProps},softDismissReturn);}// A focus sentinal is a hidden but focusable element that comes at the start or end 
// of the out-of-place-focusable component that, when activated or focused over, closes the component
// (if focused within 100ms of the open prop changing, instead of
// closing, focusing the sentinel immediately asks it to focus itself).
// This exists for things like menus which can have focus but also need a way to return
// to whatever out-of-place parent they came from when naturally tabbed out of (as opposed
// to dialogs which loop back around when tabbed out of). While mouse users can click out of a menu
// and keyboard users can escape to close a menu, screen readers and other input methods 
// that don't use those two would become stuck.
function useFocusSentinel(_ref77){var{focusSentinel:{open,onClose,sendFocusToMenu}}=_ref77;var getSendFocusWithinMenu=useStableGetter(sendFocusToMenu);var stableOnClose=useStableCallback(onClose);var[firstSentinelIsActive,setFirstSentinelIsActive]=useState(false);useTimeout({callback:()=>{setFirstSentinelIsActive(open);},timeout:100,triggerIndex:"".concat(open,"-").concat(firstSentinelIsActive)});var onFocus=firstSentinelIsActive?()=>stableOnClose():()=>{var _getSendFocusWithinMe;return(_getSendFocusWithinMe=getSendFocusWithinMenu())===null||_getSendFocusWithinMe===void 0?void 0:_getSendFocusWithinMe();};var onClick=()=>stableOnClose();return{useSentinelProps:function(p){overwriteWithWarning("useFocusSentinel",p,"tabIndex",0);return useMergedProps({onFocus,onClick},p);}};}/**
     * A toolbar is just a collection of widgets in an expected order and with the usual keyboard navigation stuff.
     *
     * The main difference between a toolbar and a menubar is that a menubar contains purely static menuitems,
     * but a toolbar is the more general case, being able to contain anything at all.
     * A menubar is implemented as a special case of a toolbar, and a menu is implemented as a specialized menubar
     *
     * Either way, be sure to specify the role and orientation this toolbar has (role=toolbar if you're using this as an actual toolbar).
     *
     * @param param0
     * @returns
     */function useToolbar(_ref78){var{linearNavigation,listNavigation,managedChildren,rovingTabIndex,typeaheadNavigation,toolbar:{orientation,role}}=_ref78;var _useListNavigation3=useListNavigation({linearNavigation:_objectSpread(_objectSpread({},linearNavigation),{},{navigationDirection:orientation}),listNavigation,managedChildren,rovingTabIndex,typeaheadNavigation}),{useListNavigationChild,useListNavigationProps}=_useListNavigation3,listRet=_objectWithoutProperties(_useListNavigation3,_excluded43);var useToolbarChild=T$1(_ref79=>{var{listNavigation,managedChild,rovingTabIndex,subInfo}=_ref79;var _useListNavigationChi3=useListNavigationChild({listNavigation,managedChild,rovingTabIndex,subInfo:{subInfo}}),{useListNavigationChildProps}=_useListNavigationChi3,listRet=_objectWithoutProperties(_useListNavigationChi3,_excluded44);return _objectSpread(_objectSpread({},listRet),{},{useToolbarChildProps:useListNavigationChildProps});},[]);function useToolbarProps(p){overwriteWithWarning("useToolbar",p,"role",role!==null&&role!==void 0?role:undefined);return useListNavigationProps(p);}return{useToolbarProps,useToolbarChild,linearNavigation:listRet.linearNavigation,listNavigation:listRet.listNavigation,managedChildren:listRet.managedChildren,rovingTabIndex:listRet.rovingTabIndex,typeaheadNavigation:listRet.typeaheadNavigation};}function useMenubar(_ref80){var{linearNavigation,listNavigation,managedChildren,rovingTabIndex,typeaheadNavigation,toolbar}=_ref80;var _useToolbar=useToolbar({linearNavigation,listNavigation,rovingTabIndex,managedChildren,typeaheadNavigation,toolbar}),{useToolbarChild,useToolbarProps}=_useToolbar,toolbarInfo=_objectWithoutProperties(_useToolbar,_excluded45);var{role}=toolbar;var useMenuItem=T$1(_ref81=>{var{listNavigation,managedChild,rovingTabIndex,subInfo,menuItem:{disabled,onPress,role},hasFocus}=_ref81;debugLog("useMenuItem",managedChild.index);var usePressProps=usePress({onClickSync:e=>{var _ref82;return(_ref82=disabled?null:onPress)===null||_ref82===void 0?void 0:_ref82(enhanceEvent(e,{index:managedChild.index}));},exclude:undefined,hasFocus,focusSelf:rovingTabIndex.focusSelf});var _useToolbarChild=useToolbarChild({listNavigation,managedChild,rovingTabIndex,subInfo}),{useToolbarChildProps}=_useToolbarChild,listNavRet=_objectWithoutProperties(_useToolbarChild,_excluded46);function useMenuItemProps(props){overwriteWithWarning("useMenuItem",props,"role",role);return usePressProps(useToolbarChildProps(props));}return _objectSpread({useMenuItemProps},listNavRet);},[]);function useMenubarProps(props){overwriteWithWarning("useMenubar",props,"role",role!==null&&role!==void 0?role:undefined);return useToolbarProps(props);}return _objectSpread({useMenubarProps,useMenuItem},toolbarInfo);}function useMenu(_ref83){var{menuButtonHasFocus,linearNavigation,listNavigation,managedChildren,menuSurface,rovingTabIndex,softDismiss,typeaheadNavigation,menu,activeElement,toolbar}=_ref83;var{onOpen}=menu;var{open,onClose}=softDismiss;var _useMenubar=useMenubar({linearNavigation,listNavigation,managedChildren,rovingTabIndex,typeaheadNavigation,toolbar:_objectSpread({role:null},toolbar)}),{useMenuItem:useListNavigationChild,useMenubarProps:useListNavigationProps}=_useMenubar,useListNavReturn=_objectWithoutProperties(_useMenubar,_excluded47);var{managedChildren:{children}}=useListNavReturn;var _useMenuSurface=useMenuSurface({menuSurface:_objectSpread(_objectSpread({},menuSurface),{},{role:"menu",sendFocusToMenu:T$1(()=>{var _children$getAt5;return(_children$getAt5=children.getAt(0))===null||_children$getAt5===void 0?void 0:_children$getAt5.subInfo.focusSelf();},[])}),softDismiss,activeElement}),{useMenuSurfaceButtonProps,useMenuSurfaceProps,useMenuSurfaceSentinel,useMenuSurfaceChildProps}=_useMenuSurface,menuRest=_objectWithoutProperties(_useMenuSurface,_excluded48);var useMenuButtonProps=p=>{var usePressProps=usePress({onClickSync:()=>{if(open)onClose===null||onClose===void 0?void 0:onClose("escape");else onOpen===null||onOpen===void 0?void 0:onOpen();},exclude:{},hasFocus:menuButtonHasFocus,focusSelf:T$1(e=>{var _e$focus2;return(_e$focus2=e.focus)===null||_e$focus2===void 0?void 0:_e$focus2.call(e);},[])});var props=useMenuSurfaceButtonProps(p);return usePressProps(props);};var useMenuItem=T$1(_ref84=>{var{listNavigation,managedChild,rovingTabIndex,subInfo,menuItem,hasFocus}=_ref84;debugLog("useMenuItem",managedChild.index);var _useListNavigationChi4=useListNavigationChild({listNavigation,managedChild,rovingTabIndex,subInfo:{subInfo},hasFocus,menuItem}),{useMenuItemProps:useListNavigationChildProps}=_useListNavigationChi4,listNavRet=_objectWithoutProperties(_useListNavigationChi4,_excluded49);function useMenuItemProps(_ref85){var props=_extends({},_ref85);return useListNavigationChildProps(props);}return _objectSpread({useMenuItemProps},listNavRet);},[]);function useMenuProps(props){return useListNavigationProps(useMenuSurfaceChildProps(props));}return _objectSpread(_objectSpread({useMenuProps,useMenuSurfaceProps,useMenuButtonProps,useMenuItem,useMenuSentinel:useMenuSurfaceSentinel},useListNavReturn),menuRest);}function useRadioGroup(_ref86){var{linearNavigation,listNavigation,managedChildren,radioGroup:{name,onSelectedValueChange,selectedValue,tagGroup,tagGroupLabel},rovingTabIndex,typeaheadNavigation,childrenHaveFocus,singleSelection:{selectionMode}}=_ref86;var{getElement:_getRadioGroupParentElement,useRefElementProps}=useRefElement({});var[selectedIndex,setSelectedIndex]=useState(0);var byName=_(new Map());var{useLabelInput:useGroupLabelInput,useLabelLabel:useGroupLabelLabel}=useLabel({label:{prefixLabel:"aria-radio-group-label-",tagInput:tagGroup,tagLabel:tagGroupLabel,prefixInput:"aria-radio-group-"}});var{useLabelInputProps:useGroupLabelInputProps}=useGroupLabelInput();var{useLabelLabelProps:useGroupLabelLabelProps}=useGroupLabelLabel();var onSelectedIndexChange=useStableCallback((e,newIndex)=>{var _listNavRet$managedCh;onSelectedValueChange(enhanceEvent(e,{selectedValue:(_listNavRet$managedCh=listNavRet.managedChildren.children.getAt(newIndex))===null||_listNavRet$managedCh===void 0?void 0:_listNavRet$managedCh.subInfo.subInfo.subInfo.getValue()}));});var _useListNavigationSin2=useListNavigationSingleSelection({linearNavigation,listNavigation,managedChildren,rovingTabIndex,singleSelection:{selectedIndex,setSelectedIndex,selectionMode},typeaheadNavigation,childrenHaveFocus}),{useListNavigationSingleSelectionChild,useListNavigationSingleSelectionProps}=_useListNavigationSin2,listNavRet=_objectWithoutProperties(_useListNavigationSin2,_excluded50);var useRadioGroupProps=T$1(_ref87=>{var props=_extends({},_ref87);props.role="radiogroup";return useGroupLabelInputProps(useListNavigationSingleSelectionProps(useRefElementProps(props)));},[useRefElementProps]);var useRadioGroupLabelProps=T$1(props=>{return useGroupLabelLabelProps(props);},[useGroupLabelLabelProps]);h(()=>{if(selectedValue==null){setSelectedIndex(null);}else{var _selectedIndex=byName.current.get(selectedValue);setSelectedIndex(_selectedIndex!==null&&_selectedIndex!==void 0?_selectedIndex:null);}},[byName,selectedValue]);var useRadio=T$1(function useRadio(_ref88){var{listNavigation,managedChild,rovingTabIndex,radio:{disabled,labelPosition,tagInput,tagLabel,value},hasFocus,singleSelection,subInfo}=_ref88;var index=managedChild.index;var onInput=useStableCallback(e=>{e.preventDefault();onSelectedIndexChange(e,index);});var getValue=useStableGetter(value);var _useListNavigationSin3=useListNavigationSingleSelectionChild({listNavigation,rovingTabIndex,managedChild:{index:managedChild.index,flags:managedChild.flags},hasFocus,subInfo:{getValue,subInfo},singleSelection:_objectSpread({ariaPropName:tagInput=="input"&&labelPosition=="separate"?null:"aria-selected"},singleSelection)}),{useListNavigationSingleSelectionChildProps}=_useListNavigationSin3,listNavRet=_objectWithoutProperties(_useListNavigationSin3,_excluded51);var{singleSelection:{selected:checked}}=listNavRet;var _useCheckboxLike2=useCheckboxLike({checkboxLike:{checked:checked!==null&&checked!==void 0?checked:false,labelPosition,disabled,onCheckedChange:onInput,role:"radio"},label:{tagInput:tagInput,tagLabel:tagLabel},hasFocusInput:hasFocus,hasFocusLabel:hasFocus}),{useCheckboxLikeInputElement,useCheckboxLikeLabelElement}=_useCheckboxLike2,checkboxRet=_objectWithoutProperties(_useCheckboxLike2,_excluded52);s(()=>{byName.current.set(value,index);return()=>{byName.current.delete(value);};},[byName,value,index]);var useRadioInput=()=>{var tag=tagInput;var useRadioInputProps=props=>{if(tag=="input"){props.name=name;props.checked=checked!==null&&checked!==void 0?checked:false;props.type="radio";}else{props["aria-checked"]=(checked!==null&&checked!==void 0?checked:false).toString();}var propsIfInputHandlesFocus=useListNavigationSingleSelectionChildProps(props);var{useCheckboxLikeInputElementProps}=useCheckboxLikeInputElement();return useMergedProps(useCheckboxLikeInputElementProps({}),labelPosition=="separate"?propsIfInputHandlesFocus:props);};return{useRadioInputProps};};var useRadioLabel=T$1(()=>{//const tag = tagLabel;
var useRadioLabelProps=props=>{var{useCheckboxLikeLabelElementProps}=useCheckboxLikeLabelElement();var propsIfLabelHandlesFocus=useListNavigationSingleSelectionChildProps(props);return useCheckboxLikeLabelElementProps(useMergedProps({},labelPosition=="wrapping"?propsIfLabelHandlesFocus:props));};return{useRadioLabelProps};},[useCheckboxLikeLabelElement]);return _objectSpread(_objectSpread({useRadioInput,useRadioLabel},listNavRet),checkboxRet);},[byName,useListNavigationSingleSelectionChild]);return _objectSpread({useRadio,useRadioGroupProps,useRadioGroupLabelProps,radioGroup:{selectedIndex,selectedValue}},listNavRet);}function useSlider(_ref89){var{slider:{max:maxParent,min:minParent},managedChildren}=_ref89;var _useManagedChildren2=useManagedChildren({managedChildren}),{useManagedChild}=_useManagedChildren2,childrenInfo=_objectWithoutProperties(_useManagedChildren2,_excluded53);var useSliderThumb=T$1(function useSliderThumb(_ref90){var{managedChild,sliderThumb,subInfo}=_ref90;debugLog("useSliderThumb",managedChild.index);var[minParentCopy,setMinParentCopy]=p(minParent);var[maxParentCopy,setMaxParentCopy]=p(maxParent);useManagedChild({managedChild:_objectSpread({},managedChild),subInfo:{setMax:setMaxParentCopy,setMin:setMinParentCopy,subInfo}});var{tag,value,max:maxOverride,min:minOverride,onValueChange,valueText,label}=sliderThumb;var min=minOverride!==null&&minOverride!==void 0?minOverride:minParentCopy;var max=maxOverride!==null&&maxOverride!==void 0?maxOverride:maxParentCopy;return{useSliderThumbProps,sliderThumb:{min,max}};function useSliderThumbProps(props){var newProps=tag=="input"?{min,max,value,type:"range"}:{"aria-valuemax":"".concat(max),"aria-valuemin":"".concat(min),"aria-valuenow":"".concat(value)};newProps=_objectSpread(_objectSpread({},newProps),{},{"aria-label":label,"aria-valuetext":valueText,style:{"--range-value":"".concat(value),"--range-value-text":"".concat(valueText)}});if(tag=="input"){newProps.onInput=e=>{onValueChange===null||onValueChange===void 0?void 0:onValueChange({currentTarget:e.currentTarget,target:e.target,[EventDetail]:{value:e.currentTarget.valueAsNumber}});};}else{throw new Error("Unimplemented");}return useMergedProps(newProps,props);}},[]);return _objectSpread({useSliderThumb},childrenInfo);}function identity(t){return t;}function updateSortColumn(_ref91){var _getCurrentSortColumn;var{getCurrentSortColumn,setCurrentSortColumn,cellIndex,cells}=_ref91;var sortInfo=(_getCurrentSortColumn=getCurrentSortColumn())!==null&&_getCurrentSortColumn!==void 0?_getCurrentSortColumn:{index:-1,direction:'ascending'};//const cellIndex = managedChild.index;
if(sortInfo.index==cellIndex){if(sortInfo.direction[0]=='a'){sortInfo.direction='descending';}else{sortInfo.direction='ascending';}}else{sortInfo.direction="ascending";}sortInfo.index=cellIndex;setCurrentSortColumn(sortInfo);cells.forEach(cell=>{if(cell.index==cellIndex){cell.subInfo.subInfo.subInfo.subInfo.setMySortDirection(sortInfo.direction);}else{cell.subInfo.subInfo.subInfo.subInfo.setMySortDirection(null);}});//bodySort.current!();
}function useTable(_ref92){var{linearNavigation,listNavigation,managedChildren,rovingTabIndex,typeaheadNavigation}=_ref92;var[getCurrentSortColumn,setCurrentSortColumn]=usePassiveState(null,returnNull);var bodySort=_(null);var manglers=_({rowIndexMangler:identity,rowIndexDemangler:identity});var _useGridNavigation2=useGridNavigation({linearNavigation,listNavigation:_objectSpread({},listNavigation),gridNavigation:{rowIndexDemangler:T$1(n=>manglers.current.rowIndexDemangler(n),[]),rowIndexMangler:T$1(n=>manglers.current.rowIndexMangler(n),[])},managedChildren,rovingTabIndex,typeaheadNavigation}),{useGridNavigationProps,useGridNavigationRow}=_useGridNavigation2,gridNavRet1=_objectWithoutProperties(_useGridNavigation2,_excluded54);var{managedChildren:{children:rows}}=gridNavRet1;var useTableRow=T$1(_ref93=>{var{asChildRowOfSection:{subInfo},asParentRowOfCells,tableRow:{location,tagTableRow}}=_ref93,asChildRowOfSection=_objectWithoutProperties(_ref93.asChildRowOfSection,_excluded55);debugLog("useTableRow",asChildRowOfSection.managedChild.index);var getCells=T$1(()=>{return cells;},[]);var _useGridNavigationRow2=useGridNavigationRow({asChildRowOfSection:_objectSpread(_objectSpread({},asChildRowOfSection),{},{subInfo:{getCells,location,subInfo}}),asParentRowOfCells}),{useGridNavigationCell,useGridNavigationRowProps}=_useGridNavigationRow2,gridNavRet2=_objectWithoutProperties(_useGridNavigationRow2,_excluded56);var{asParentOfCells:{managedChildren:{children:cells}}}=gridNavRet2;var useTableCell=T$1(_ref94=>{var{listNavigation,managedChild,rovingTabIndex,subInfo,hasFocus,tableCell:{tagTableCell,headerType,location,value}}=_ref94;var[mySortDirection,setMySortDirection]=useState(null);debugLog("useTableCell",managedChild.index);var _useGridNavigationCel2=useGridNavigationCell({listNavigation,managedChild,rovingTabIndex,subInfo:{setMySortDirection,location,value,subInfo},hasFocus}),{useGridNavigationCellProps}=_useGridNavigationCel2,gridNavRet3=_objectWithoutProperties(_useGridNavigationCel2,_excluded57);var sort=useStableCallback(()=>{updateSortColumn({getCurrentSortColumn,setCurrentSortColumn,cellIndex:managedChild.index,cells:getCells()});bodySort.current();});var useTableCellProps=props=>{if(tagTableCell!="td"&&tagTableCell!="th"){if(headerType=="row")overwriteWithWarning("useTableCell",props,"role","rowheader");else if(headerType=="column")overwriteWithWarning("useTableCell",props,"role","columnheader");else overwriteWithWarning("useTableCell",props,"role","cell");}else{if(headerType=="row")overwriteWithWarning("useTableCell",props,"scope","row");else if(headerType=="column")overwriteWithWarning("useTableCell",props,"scope","col");}if(headerType!=null){if(mySortDirection=="descending"){overwriteWithWarning("useTableCell",props,"aria-sort","descending");}else if(mySortDirection=="ascending"){overwriteWithWarning("useTableCell",props,"aria-sort","ascending");}}return useGridNavigationCellProps(props);};return _objectSpread({tableHeaderCell:{sort,sortDirection:mySortDirection},useTableCellProps},gridNavRet3);},[]);var useTableRowProps=props=>{if(tagTableRow!="tr")overwriteWithWarning("useTableRow",props,"role","row");return useGridNavigationRowProps(props);};return _objectSpread({useTableCell,useTableRowProps},gridNavRet2);},[]);var useTableBody=T$1(()=>{var getIndex=T$1(i=>i.index,[]);var _useSortableChildren2=useSortableChildren({rearrangeableChildren:{getIndex},sortableChildren:{compare:(lhs,rhs)=>{var _getCurrentSortColumn2,_getCurrentSortColumn3,_getCurrentSortColumn4,_getCurrentSortColumn5;var lhsCells=lhs.subInfo.subInfo.subInfo.subInfo.getCells();var rhsCells=rhs.subInfo.subInfo.subInfo.subInfo.getCells();var lhsCell=lhsCells.getAt((_getCurrentSortColumn2=(_getCurrentSortColumn3=getCurrentSortColumn())===null||_getCurrentSortColumn3===void 0?void 0:_getCurrentSortColumn3.index)!==null&&_getCurrentSortColumn2!==void 0?_getCurrentSortColumn2:0);var rhsCell=rhsCells.getAt((_getCurrentSortColumn4=(_getCurrentSortColumn5=getCurrentSortColumn())===null||_getCurrentSortColumn5===void 0?void 0:_getCurrentSortColumn5.index)!==null&&_getCurrentSortColumn4!==void 0?_getCurrentSortColumn4:0);var lhsLocation=lhsCell===null||lhsCell===void 0?void 0:lhsCell.subInfo.subInfo.subInfo.subInfo.location;var rhsLocation=rhsCell===null||rhsCell===void 0?void 0:rhsCell.subInfo.subInfo.subInfo.subInfo.location;var lhsValue=lhsCell===null||lhsCell===void 0?void 0:lhsCell.subInfo.subInfo.subInfo.subInfo.value;var rhsValue=rhsCell===null||rhsCell===void 0?void 0:rhsCell.subInfo.subInfo.subInfo.subInfo.value;if(lhsLocation===rhsLocation)return+(lhsValue!==null&&lhsValue!==void 0?lhsValue:-Infinity)-+(rhsValue!==null&&rhsValue!==void 0?rhsValue:-Infinity);if(lhsLocation=='head')return-1;if(lhsLocation=='body')return rhsLocation=='head'?-1:1;return 1;}}}),{useSortableProps}=_useSortableChildren2,sortableRet=_objectWithoutProperties(_useSortableChildren2,_excluded58);var{sortableChildren:{sort},rearrangeableChildren:{indexDemangler,indexMangler}}=sortableRet;h(()=>{manglers.current.rowIndexDemangler=indexDemangler;manglers.current.rowIndexMangler=indexMangler;},[indexDemangler,indexMangler]);s(()=>{bodySort.current=()=>{var _getCurrentSortColumn6,_getCurrentSortColumn7;sort(rows,(_getCurrentSortColumn6=(_getCurrentSortColumn7=getCurrentSortColumn())===null||_getCurrentSortColumn7===void 0?void 0:_getCurrentSortColumn7.direction)!==null&&_getCurrentSortColumn6!==void 0?_getCurrentSortColumn6:'ascending');};},[sort]);var useTableBodyProps=props=>{console.assert(props.children!=null);return useSortableProps(props);};return _objectSpread({useTableBodyProps},sortableRet);},[]);var useTableProps=useGridNavigationProps;var useTableSectionProps=T$1((tag,location,props)=>{if(!(tag=="thead"||tag=="tbody"||tag=="tfoot")){overwriteWithWarning("useTableSectionProps",props,"role","rowgroup");}return props;},[]);return _objectSpread({useTableProps,useTableBody,useTableRow,useTableSectionProps},gridNavRet1);}/*
    export function useTabs<TabListElement extends Element, TabElement extends Element, PanelElement extends Element, LabelElement extends Element>({ tabPanels: { managedChildren: { onChildrenMountChange: ocmc, ...tabPanelsManagedChildren } } }: UseTabsParameters): UseTabsReturnTypeWithHooks<TabListElement, TabElement, PanelElement, LabelElement> {
        const {
            useListNavigationSingleSelectionChild,
            useListNavigationSingleSelectionProps
        } = useListNavigationSingleSelection<TabListElement, TabElement, TabInfo, never>({
            childrenHaveFocus: {},
            linearNavigation: {},
            listNavigation: {},
            managedChildren: {},
            rovingTabIndex: {},
            singleSelection: {},
            typeaheadNavigation: {}
         });

        const useTab = useCallback(() => {}, []);
        const useTabPanel = useCallback(() => {});
        function useTabListProps(props: h.JSX.HTMLAttributes<TabListElement>) { return useListNavigationSingleSelectionProps(props); }
        function useTabLabelProps() {}

        return {

        }
        
    }*/function useTabs(_ref95){var{tabPanels:{managedChildren:{onChildrenMountChange:ocmc}}}=_ref95,tabPanelsManagedChildren=_objectWithoutProperties(_ref95.tabPanels.managedChildren,_excluded59);var baseId=generateRandomId("aria-tabs-");//const getTabListId = useCallback(() => { return baseId + "-tab-list"; }, []);
var getTabId=T$1(index=>{return baseId+"-tab-"+index;},[]);var getPanelId=T$1(index=>{return baseId+"-panel-"+index;},[]);// Used for the panels, not the tabs in the tablist.
// Those are in useTabList itself.
var _useManagedChildren3=useManagedChildren({managedChildren:_objectSpread(_objectSpread({},tabPanelsManagedChildren),{},{onChildrenMountChange:useStableCallback((m,u)=>{ocmc===null||ocmc===void 0?void 0:ocmc(m,u);reevaluateClosestFit();})})}),{useManagedChild}=_useManagedChildren3,managedChildrenRet=_objectWithoutProperties(_useManagedChildren3,_excluded60);var{changeIndex:changeVisiblePanel,getCurrentIndex:getVisibleIndex,reevaluateClosestFit}=useChildrenFlag({children:managedChildrenRet.managedChildren.children,closestFit:false,initialIndex:null,key:"visible"});//const { useRandomIdReferencerElement, useRandomIdSourceElement } = useRandomId({ randomId: { prefix: "aria-tabs-" }, managedChildren: { onAfterChildLayoutEffect: null, onChildrenMountChange: null } });
var{useLabelInput,useLabelLabel}=useLabel({label:{prefixInput:"",prefixLabel:"",tagInput:"div",tagLabel:"div"}});var useTabListLabel=T$1(()=>{var{useLabelLabelProps}=useLabelLabel();function useTabListLabelProps(props){return useLabelLabelProps(props);}return{useTabListLabelProps};},[useLabelLabel]);var useTabList=T$1(_ref96=>{var{childrenHaveFocus,linearNavigation,listNavigation,managedChildren:tabListManagedChildren,rovingTabIndex,singleSelection,typeaheadNavigation}=_ref96;var stableOnSelectedIndexChange=useStableCallback(singleSelection.setSelectedIndex);var _useListNavigationSin4=useListNavigationSingleSelection({linearNavigation,listNavigation,managedChildren:tabListManagedChildren,rovingTabIndex,singleSelection,typeaheadNavigation,childrenHaveFocus}),{useListNavigationSingleSelectionChild,useListNavigationSingleSelectionProps}=_useListNavigationSin4,listNavRet1=_objectWithoutProperties(_useListNavigationSin4,_excluded61);h(()=>{changeVisiblePanel(singleSelection.selectedIndex);},[singleSelection.selectedIndex]);var{useLabelInputProps}=useLabelInput();var useTab=T$1(_ref97=>{var{listNavigation,managedChild,rovingTabIndex,hasFocus,singleSelection,subInfo}=_ref97;debugLog("useTab",managedChild.index);var _useListNavigationSin5=useListNavigationSingleSelectionChild({listNavigation,managedChild,rovingTabIndex,subInfo:{subInfo},hasFocus,singleSelection:_objectSpread({ariaPropName:"aria-selected"},singleSelection)}),{useListNavigationSingleSelectionChildProps}=_useListNavigationSin5,listNavRet2=_objectWithoutProperties(_useListNavigationSin5,_excluded62);var{singleSelection:{selected},rovingTabIndex:{tabbable}}=listNavRet2;var useTabProps=props=>{var panelId=getPanelId(managedChild.index);var tabId=getTabId(managedChild.index);var usePressProps=usePress({onClickSync:e=>{stableOnSelectedIndexChange(managedChild.index,e);},exclude:{},hasFocus,focusSelf:rovingTabIndex.focusSelf});overwriteWithWarning("useTab",props,"role","tab");overwriteWithWarning("useTab",props,"aria-controls",panelId);return useListNavigationSingleSelectionChildProps(useMergedProps({"data-tabbable":tabbable.toString(),id:tabId},usePressProps(props)));};return _objectSpread({useTabProps},listNavRet2);},[useLabelInput,useListNavigationSingleSelectionChild]);var useTabListProps=_ref98=>{var{"aria-orientation":ariaOrientation}=_ref98,props=_objectWithoutProperties(_ref98,_excluded63);overwriteWithWarning("useTabList",props,"role","tablist");return useListNavigationSingleSelectionProps(useLabelInputProps(useMergedProps({"aria-orientation":ariaOrientation!==null&&ariaOrientation!==void 0?ariaOrientation:"horizontal"},props)));};return{tabList:listNavRet1,useTabListProps,useTab};},[useLabelInput]);var useTabPanel=T$1(_ref99=>{var{managedChild:{flags},subInfo}=_ref99,managedChild=_objectWithoutProperties(_ref99.managedChild,_excluded64);debugLog("useTabPanel",managedChild.index);//const [correspondingTabId, setCorrespondingTabId] = useState<string | null>(null);
var[isVisible,setIsVisible,getIsVisible]=useState(getVisibleIndex()==managedChild.index);var visibleRef=_({get:getIsVisible,set:setIsVisible,isValid:returnTrue});useManagedChild({managedChild:_objectSpread(_objectSpread({},managedChild),{},{flags:_objectSpread({visible:visibleRef.current},flags)}),subInfo:{subInfo}});var panelId=getPanelId(managedChild.index);var tabId=getTabId(managedChild.index);var useTabPanelProps=props=>{overwriteWithWarning("useTabPanelProps",props,"role","tabpanel");overwriteWithWarning("useTabPanelProps",props,"aria-labelledby",tabId);overwriteWithWarning("useTabPanelProps",props,"id",panelId);return useMergedProps({},props);};return{useTabPanelProps,tabPanel:{visible:isVisible,getVisible:getIsVisible}};},[]);return{useTabListLabel,useTabList,useTabPanel,tabPanels:managedChildrenRet};}function useToasts(_ref100){var{managedChildren:{onChildrenMountChange:ocmu,onAfterChildLayoutEffect},toasts:{visibleCount}}=_ref100;// Normally, this does just look like [0, 1, 2, 3], etc
// so it could be just an index to the current toast,
// but if we dismiss toasts out of order, it's [0, 2, 3] or something.
// So just keep track of it all in a big ol', there's only one of these on a page anyway,
// and if you're pusing 10000 toasts at once an Array<number> isn't going to be your bottleneck.
var currentIndexQueue=_([]);var[politeness,setPoliteness]=useState("polite");var getMaxVisibleCount=useStableGetter(visibleCount);var{getElement,useRefElementProps}=useRefElement({});var _useManagedChildren4=useManagedChildren({managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange:ocmu}}),{useManagedChild}=_useManagedChildren4,childInfo=_objectWithoutProperties(_useManagedChildren4,_excluded65);var{managedChildren:{children:toastQueue}}=childInfo;// When a toast is shown or hidden, always make sure that we're showing all the toasts that we should be.
var showHighestPriorityToast=T$1(()=>{var max=Math.min(getMaxVisibleCount(),currentIndexQueue.current.length);for(var _i6=0;_i6<max;++_i6){var highestPriorityToast=toastQueue.getAt(currentIndexQueue.current[_i6]);console.assert(!!highestPriorityToast);highestPriorityToast===null||highestPriorityToast===void 0?void 0:highestPriorityToast.subInfo.show();}},[]);// Any time a new toast mounts, update our bottommostToastIndex to point to it if necessary
// ("necessary" just meaning if it's the first toast ever or all prior toasts have been dismissed)
var onAnyToastMounted=T$1(toastIndex=>{var _toastQueue$getAt;currentIndexQueue.current.push(toastIndex);(_toastQueue$getAt=toastQueue.getAt(toastIndex))===null||_toastQueue$getAt===void 0?void 0:_toastQueue$getAt.subInfo.setNumberAheadOfMe(currentIndexQueue.current.length-1);showHighestPriorityToast();},[]);// Any time a toast is dismissed, update our bottommostToastIndex to point to the next toast in the queue, if one exists.
var onAnyToastDismissed=T$1(_index=>{var _toastQueue$getAt2;// When we dismiss a toast, remove it from the "to-display" queue by actually splicing it out of the array.
// Then notify each toast of its change in position within that queue to keep the two in sync.
var removalIndex=currentIndexQueue.current.findIndex(i=>i==_index);// For all toasts that have already been dismissed, shift them even further back by one to "make space" 
// (they're removed from the queue but this is the negative index they would have if we kept negatives in the queue)
// for the newly-dismissed toast.
toastQueue.forEach(c=>{c.subInfo.setNumberAheadOfMe(prev=>{if(prev<0)return prev-1;else return prev;});});// Let this toast know that it's now the most recently dismissed toast
(_toastQueue$getAt2=toastQueue.getAt(_index))===null||_toastQueue$getAt2===void 0?void 0:_toastQueue$getAt2.subInfo.setNumberAheadOfMe(-1);// Notify all toasts waiting behind this one in the queue that they've moved up one slot
toastQueue.forEach(c=>{c.subInfo.setNumberAheadOfMe(prev=>{if(prev>removalIndex)return prev-1;else return prev;});});// Actually modify the queue itself
currentIndexQueue.current.splice(removalIndex,1);// And after all that, make sure that we're showing any toasts that have been waiting in the queue
showHighestPriorityToast();},[]);var[_mouseOver2,setMouseOver,_getMouseOver]=useState(false);useGlobalHandler(document,"pointermove",e=>{var _getElement3;var mouseOver=e.target!=null&&e.target instanceof Node&&(((_getElement3=getElement())===null||_getElement3===void 0?void 0:_getElement3.contains(e.target))||getElement()==e.target);setMouseOver(mouseOver);});// Any time the index pointing to the currently-showing toast changes,
// update the relevant children and let them know that they're now either active or dismissed.
/*const { changeIndex, reevaluateClosestFit } = useChildrenFlag<ToastInfo, "showing">({
            initialIndex: activeToastIndex,
            children: toastQueue,
            key: "showing",
            closestFit: false,
        });
        useEffect(() => {
            changeIndex(activeToastIndex);
        }, [activeToastIndex]);*/var useToast=T$1(_ref101=>{var{toast:{politeness,timeout},managedChild:{index,flags},subInfo}=_ref101;var[numberOfToastsAheadOfUs,setNumberOfToastsAheadOfUs]=useState(Infinity);var getIndex=useStableGetter(index);var[dismissed2,setDismissed2,getDismissed2]=useState(false);var[showing2,setShowing2,getShowing2]=useState(false);//const [dismissed, setDismissed] = useState(false);
//const [status, setStatus, getStatus] = useState<"pending" | "active" | "dismissed">("pending");
//const dismissed = (status === "dismissed");
var dismiss=T$1(()=>{if(!getDismissed2())onAnyToastDismissed(getIndex());setDismissed2(true);setShowing2(false);},[]);var show=T$1(()=>{setShowing2(true);},[]);h(()=>{if(!getDismissed2()&&!getShowing2()){if(numberOfToastsAheadOfUs>=0&&numberOfToastsAheadOfUs<getMaxVisibleCount()){show();}}},[numberOfToastsAheadOfUs]);//const toastId = generateRandomId("toast-");
s(()=>{setPoliteness(politeness!==null&&politeness!==void 0?politeness:"polite");},[politeness]);var focus=T$1(()=>{var element=getElement();if(element){var _firstFocusable$focus;var firstFocusable=findFirstFocusable(element);firstFocusable===null||firstFocusable===void 0?void 0:(_firstFocusable$focus=firstFocusable.focus)===null||_firstFocusable$focus===void 0?void 0:_firstFocusable$focus.call(firstFocusable);}},[]);/*const [showing, setShowing2, getShowing] = useState(false);
            const setShowing: StateUpdater<boolean> = ((u) => {
                setShowing2(prev => {
                    const ret: boolean = (typeof u == 'function') ? u(prev) : u;

                    if (ret === false) {
                        setDismissed(true);
                        onAnyToastDismissed(getIndex())
                    }

                    return ret;
                });
            })*/ //const showingRef = useRef<ChildFlagOperations>({ get: getShowing, set: setShowing, isValid: returnTrue });
useManagedChild({managedChild:{index,flags:_objectSpread({},flags)},subInfo:{focus,setNumberAheadOfMe:setNumberOfToastsAheadOfUs,show,subInfo}});//const isActive = (status === "active");
var[triggerIndex,setTriggerIndex]=useState(1);var resetDismissTimer=T$1(()=>{setTriggerIndex(i=>++i);},[]);h(()=>{onAnyToastMounted(index);},[]);/*useEffect(() => {
                if (!showing)
                    onAnyToastDismissed(index)
            }, [showing]);*/var dismissTimeoutKey=timeout==null||numberOfToastsAheadOfUs!=0?null:isFinite(timeout)?timeout:timeout>0?null:0;useTimeout({timeout:dismissTimeoutKey,callback:()=>{if(showing2)dismiss();},triggerIndex:showing2?triggerIndex:false});return{toast:{dismissed:dismissed2,showing:showing2,numberOfToastsAheadOfUs,dismiss,resetDismissTimer}};},[]);function useToastContainerProps(_ref102){var _ref103;var{role,"aria-live":ariaLive,"aria-relevant":ariaRelevant}=_ref102,props=_objectWithoutProperties(_ref102,_excluded66);return useMergedProps(useRefElementProps({class:"toasts-container",role:role||"status","aria-live":(_ref103=politeness!==null&&politeness!==void 0?politeness:ariaLive)!==null&&_ref103!==void 0?_ref103:"polite","aria-relevant":ariaRelevant!==null&&ariaRelevant!==void 0?ariaRelevant:"additions"}),props);}return _objectSpread(_objectSpread({useToast,useToastContainerProps},childInfo),{},{toasts:{}});}function returnFalse(){return false;}function useTooltip(_ref104){var _mouseoverDelay,_mouseoutToleranceDel,_focusDelay;var{mouseoverDelay,mouseoutToleranceDelay,focusDelay}=_ref104;(_mouseoverDelay=mouseoverDelay)!==null&&_mouseoverDelay!==void 0?_mouseoverDelay:mouseoverDelay=400;(_mouseoutToleranceDel=mouseoutToleranceDelay)!==null&&_mouseoutToleranceDel!==void 0?_mouseoutToleranceDel:mouseoutToleranceDelay=500;(_focusDelay=focusDelay)!==null&&_focusDelay!==void 0?_focusDelay:focusDelay=1;// The escape key should close tooltips, but do nothing else.
// (i.e. closing a tooltip in a dialog MUST NOT close the dialog too)
// TODO: Tooltips are, effectively, always the topmost component,
// so we can just have them listen to and swallow all "Escape"
// key presses before anyone else. For a more general popup,
// or a tooltip in a tooltip (!!) a different solution would be needed.
useGlobalHandler(document,"keydown",e=>{if(getOpen()&&e.key==="Escape"&&!e.defaultPrevented){e.preventDefault();e.stopImmediatePropagation();setOpen(false);setHoverState("hidden");setTriggerFocusedDelayCorrected(false);setTooltipFocusedDelayCorrected(false);}},{capture:true});var[open,setOpen,getOpen]=useState(false);var{useRandomIdSourceElement,//: useTooltipIdProps, 
useRandomIdReferencerElement//: useTooltipIdReferencingProps 
}=useRandomId({randomId:{prefix:"aria-tooltip-"},managedChildren:{onAfterChildLayoutEffect:null,onChildrenMountChange:null}});var[,setTriggerFocused]=usePassiveState(useStableCallback(focused=>{var delay=focused?focusDelay:1;if(delay!=null&&isFinite(delay)){var handle=setTimeout(()=>setTriggerFocusedDelayCorrected(focused),focused?focusDelay:1);return()=>clearTimeout(handle);}}),returnFalse);var[,setTooltipFocused]=usePassiveState(useStableCallback(focused=>{var delay=focused?focusDelay:1;if(delay!=null&&isFinite(delay)){var handle=setTimeout(()=>setTooltipFocusedDelayCorrected(focused),delay);return()=>clearTimeout(handle);}}),returnFalse);var onHoverChange=useStableCallback(function onHoverChange(hovering){if(hovering){switch(hoverState){case"hiding":{// We're hoving over the tooltip right after hovering away from it.
// In this case, we show it again immediately
setHoverState("shown");break;}case"hidden":{// The tooltip isn't showing and hasn't for awhile (if ever)
// Wait for our mouseover delay
setHoverState("showing2");break;//const handle = setTimeout(() => { console.log("setHoverState(shown)");  setHoverState("shown") }, mouseoverDelay);
//return () => clearTimeout(handle);
}}}else{switch(hoverState){case"shown":{// The mouse has left the trigger, but delay truly hiding it for a moment
setHoverState("hiding");break;//const handle = setTimeout(() => { console.log("setHoverState(hidden)"); setHoverState("hidden");}, mouseoverDelay);
//return () => clearTimeout(handle);
}case"showing2":{// During a mouseover delay, when we mouseout,
// just reset the timer
setHoverState("hidden");break;}}}});var[,setTriggerHover]=usePassiveState(onHoverChange,returnFalse);var[,setTooltipHover]=usePassiveState(onHoverChange,returnFalse);var[triggerFocusedDelayCorrected,setTriggerFocusedDelayCorrected]=useState(false);var[hoverState,setHoverState]=useState("hidden");useTimeout({triggerIndex:hoverState,timeout:hoverState=="showing2"?mouseoverDelay:null,callback:()=>{if(hoverState=="showing2"){setHoverState("shown");}}});useTimeout({triggerIndex:hoverState,timeout:hoverState=="hiding"?mouseoutToleranceDelay:null,callback:()=>{if(hoverState=="hiding"){setHoverState("hidden");}}});//const [triggerHoverDelayCorrected, setTriggerHoverDelayCorrected] = useState(false);
var[tooltipFocusedDelayCorrected,setTooltipFocusedDelayCorrected]=useState(false);//const [tooltipHoverDelayCorrected, setTooltipHoverDelayCorrected] = useState(false);
var hoverDelayCorrected=hoverState=="shown";h(()=>{setOpen(triggerFocusedDelayCorrected||hoverDelayCorrected||tooltipFocusedDelayCorrected);},[triggerFocusedDelayCorrected||hoverDelayCorrected||tooltipFocusedDelayCorrected]);var useTooltipTrigger=T$1(function useTooltipTrigger(_ref105){var{hasFocus:{onFocusedInnerChanged}}=_ref105,hasFocus=_objectWithoutProperties(_ref105.hasFocus,_excluded67);useGlobalHandler(document,"pointermove",e=>{var _getElement4;var target=e.target;setTriggerHover(target==getElement()||!!((_getElement4=getElement())!==null&&_getElement4!==void 0&&_getElement4.contains(target)));},{capture:true});function onTouchEnd(e){var _e$target$focus,_e$target;(_e$target$focus=(_e$target=e.target).focus)===null||_e$target$focus===void 0?void 0:_e$target$focus.call(_e$target);}var{useHasFocusProps,getElement}=useHasFocus(_objectSpread(_objectSpread({},hasFocus),{},{onFocusedInnerChanged:useStableCallback((focused,prev)=>{onFocusedInnerChanged===null||onFocusedInnerChanged===void 0?void 0:onFocusedInnerChanged(focused,prev);setTriggerFocused(focused);})}));function useTooltipTriggerProps(_ref106){var _props$tabIndex3;var props=_extends({},_ref106);var{useRandomIdReferencerElementProps}=useRandomIdReferencerElement("aria-describedby");// Note: Though it's important to make sure that focusing activates a tooltip,
// it's perfectly reasonable that a child element will be the one that's focused,
// not this one, so we don't set tabIndex=0
(_props$tabIndex3=props.tabIndex)!==null&&_props$tabIndex3!==void 0?_props$tabIndex3:props.tabIndex=-1;return useRandomIdReferencerElementProps(useHasFocusProps(useMergedProps({onTouchEnd},props)));}return{useTooltipTriggerProps};},[]);var useTooltipPopup=T$1(function useTooltip(_ref107){var{hasFocus:{onFocusedInnerChanged}}=_ref107,hasFocus=_objectWithoutProperties(_ref107.hasFocus,_excluded68);var{useRandomIdSourceElementProps}=useRandomIdSourceElement();var{useHasFocusProps,getElement}=useHasFocus(_objectSpread({onFocusedInnerChanged:useStableCallback((focused,prev)=>{onFocusedInnerChanged===null||onFocusedInnerChanged===void 0?void 0:onFocusedInnerChanged(focused,prev);setTooltipFocused(focused);})},hasFocus));useGlobalHandler(document,"pointermove",e=>{var _getElement5;var target=e.target;setTooltipHover(target==getElement()||!!((_getElement5=getElement())!==null&&_getElement5!==void 0&&_getElement5.contains(target)));},{capture:true});function useTooltipPopupProps(_ref108){var props=_extends({},_ref108);return useRandomIdSourceElementProps(useHasFocusProps(useMergedProps({},props)));}return{useTooltipPopupProps};},[]);return{useTooltipPopup,useTooltipTrigger,isOpen:open,getIsOpen:getOpen};}function memoForwardRef(fn){return w(N(fn));//(props: Parameters<T>[0]) => ReturnType<T>;
}var AccordionSectionContext=B$2(null);var Accordion=memoForwardRef(function Accordion(_ref109,ref){var{disableArrowKeys,disableHomeEndKeys,expandedIndex,initialIndex,navigationDirection,onAfterChildLayoutEffect,onChildrenMountChange,render}=_ref109,_rest=_objectWithoutProperties(_ref109,_excluded69);var _useAccordion=useAccordion({accordion:{initialIndex},linearNavigation:{disableArrowKeys,disableHomeEndKeys,navigationDirection},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange}}),{useAccordionSection}=_useAccordion,provider=_objectWithoutProperties(_useAccordion,_excluded70);A(ref,()=>provider);h(()=>{provider.accordion.changeExpandedIndex(expandedIndex!==null&&expandedIndex!==void 0?expandedIndex:null);},[expandedIndex]);return o$1(AccordionSectionContext.Provider,{value:useAccordionSection,children:render(provider)});});function defaultRenderAccordionSection(_ref110){var{makePropsHeadingContainer,makePropsHeadingButton,makePropsBody,tagBody,tagHeadingButton}=_ref110;return function(info,modifyHeadingButtonProps,modifyBodyProps){return o$1(p$1,{children:o$1(Heading,_objectSpread(_objectSpread({},makePropsHeadingContainer(info)),{},{heading:h$1(tagHeadingButton,modifyHeadingButtonProps(makePropsHeadingButton(info))),children:h$1(tagBody,modifyBodyProps(makePropsBody(info)))}))});};}var AccordionSection=memoForwardRef(function AccordionSection(_ref111,ref){var{open,index,tagButton,disabled,flags,render,getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange,subInfo}=_ref111;var useAccordionSection=q$1(AccordionSectionContext);var _useAccordionSection=useAccordionSection({button:{disabled,tagButton},accordionSection:{open},managedChild:{index,flags},hasFocus:{getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange},subInfo}),{useAccordionSectionBodyProps,useAccordionSectionHeaderProps}=_useAccordionSection,sectionInfo=_objectWithoutProperties(_useAccordionSection,_excluded71);A(ref,()=>sectionInfo);return render(sectionInfo,useAccordionSectionHeaderProps,useAccordionSectionBodyProps);});function defaultRenderButton(_ref112){var{tagButton,makePropsButton}=_ref112;return function(modifyButtonProps){return h$1(tagButton,modifyButtonProps(makePropsButton({})));};}var Button=memoForwardRef(function Button(_ref113,ref){var{tagButton,onPress,pressed,render,disabled,getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange}=_ref113;var _useButton=useButton({button:{tagButton,onPress,pressed,disabled},hasFocus:{getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange}}),{useButtonProps}=_useButton,info=_objectWithoutProperties(_useButton,_excluded72);A(ref,()=>info);return render(useButtonProps);});function defaultRenderCheckboxLike(_ref114){var{labelPosition,tagInput,tagLabel,makeInputProps,makeLabelProps}=_ref114;return function(info,modifyInputProps,modifyLabelProps){if(labelPosition=="wrapping"){var inputPropsBase=makeInputProps(info);var labelPropsBase=makeLabelProps(info);var inputProps=modifyInputProps(inputPropsBase);var _modifyLabelProps=modifyLabelProps(labelPropsBase),{children}=_modifyLabelProps,labelProps=_objectWithoutProperties(_modifyLabelProps,_excluded73);var input=h$1(tagInput,inputProps);var label=h$1(tagLabel,_objectSpread(_objectSpread({},labelProps),{},{children:o$1(p$1,{children:[input,children]})}));return o$1(p$1,{children:label});}else if(labelPosition=="separate"){var _inputProps=modifyInputProps(makeInputProps(info));var labelProps=modifyLabelProps(makeLabelProps(info));var _input=h$1(tagInput,_inputProps);var _label=h$1(tagLabel,labelProps);return o$1(p$1,{children:[_input,_label]});}else{var userProps=makeInputProps(info);console.assert(!!userProps["aria-label"]);return h$1(tagInput,modifyInputProps(userProps));}};}function defaultRenderCheckbox(_ref115){var{labelPosition,tagInput,tagLabel,makeInputProps,makeLabelProps}=_ref115;return defaultRenderCheckboxLike({labelPosition,tagInput,tagLabel,makeInputProps,makeLabelProps});}var Checkbox=memoForwardRef(function Checkbox(_ref116,ref){var{checked,disabled,tagLabel,labelPosition,tagInput,onCheckedChange,render,getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange}=_ref116;var _useCheckbox=useCheckbox({checkbox:{onCheckedChange},checkboxLike:{checked,disabled,labelPosition},label:{tagInput,tagLabel},hasFocusInput:{getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange},hasFocusLabel:{getDocument,getWindow,onActiveElementChange,onElementChange:onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount:onMount,onUnmount:onUnmount,onWindowFocusedChange}}),{useCheckboxInputElement,useCheckboxLabelElement}=_useCheckbox,checkboxInfo=_objectWithoutProperties(_useCheckbox,_excluded74);A(ref,()=>checkboxInfo);var{useCheckboxInputElementProps}=useCheckboxInputElement();var{useCheckboxLabelElementProps}=useCheckboxLabelElement();return render(checkboxInfo,useCheckboxInputElementProps,useCheckboxLabelElementProps);});function defaultRenderCheckboxGroupParent(_ref117){var{render,disabled,getDocument,labelPosition,tagInput,tagLabel,getWindow,onActiveElementChange,onCheckedChangeStart,onCheckedChangeEnd,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange}=_ref117;return function(parentInfo,modifyControlProps){var{checkboxGroupParent:{checked,onParentCheckedChange}}=parentInfo;return o$1(Checkbox,{checked:checked,disabled:disabled,getDocument:getDocument,labelPosition:labelPosition,render:(info,modifyInputProps,modifyLabelProps)=>{if(labelPosition=="separate")return render(info,props=>modifyControlProps(modifyInputProps(props)),modifyLabelProps);else return render(info,modifyInputProps,props=>modifyControlProps(modifyLabelProps(props)));},tagInput:tagInput,tagLabel:tagLabel,getWindow:getWindow,onActiveElementChange:onActiveElementChange,onCheckedChange:e=>{var exception;onCheckedChangeStart();_asyncToGenerator(function*(){try{yield onParentCheckedChange(e);}catch(ex){exception=ex;}finally{onCheckedChangeEnd(exception);}})();},onElementChange:onElementChange,onFocusedChanged:onFocusedChanged,onFocusedInnerChanged:onFocusedInnerChanged,onLastActiveElementChange:onLastActiveElementChange,onLastFocusedChanged:onLastFocusedChanged,onLastFocusedInnerChanged:onLastFocusedInnerChanged,onMount:onMount,onUnmount:onUnmount,onWindowFocusedChange:onWindowFocusedChange});};}var UseCheckboxGroupChildContext=B$2(null);var UseCheckboxGroupParentContext=B$2(null);var CheckboxGroup=memoForwardRef(function CheckboxGroup(_ref119,ref){var{render,initialIndex,collator,disableArrowKeys,disableHomeEndKeys,navigationDirection,noTypeahead,typeaheadTimeout,indexDemangler,indexMangler,onAfterChildLayoutEffect,onChildrenMountChange,onTabbableIndexChange,onTabbableRender}=_ref119,_rest=_objectWithoutProperties(_ref119,_excluded75);var _useCheckboxGroup=useCheckboxGroup({linearNavigation:{disableArrowKeys,disableHomeEndKeys,navigationDirection},listNavigation:{indexDemangler,indexMangler},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange},rovingTabIndex:{initialIndex,onTabbableIndexChange,onTabbableRender},typeaheadNavigation:{collator,noTypeahead,typeaheadTimeout}}),{useCheckboxGroupChild,useCheckboxGroupParent,useListNavigationProps}=_useCheckboxGroup,checkboxGroupParentInfo=_objectWithoutProperties(_useCheckboxGroup,_excluded76);A(ref,()=>checkboxGroupParentInfo);return o$1(UseCheckboxGroupParentContext.Provider,{value:useCheckboxGroupParent,children:o$1(UseCheckboxGroupChildContext.Provider,{value:useCheckboxGroupChild,children:render(checkboxGroupParentInfo,useListNavigationProps)})});});var CheckboxGroupParent=memoForwardRef(function CheckboxGroupParent(_ref120,ref){var{subInfo,render,index,text,flags,hidden,noModifyTabIndex,focusSelf}=_ref120,_rest=_objectWithoutProperties(_ref120,_excluded77);var _q$=q$1(UseCheckboxGroupParentContext)({listNavigation:{text},managedChild:{index,flags},rovingTabIndex:{hidden,noModifyTabIndex,focusSelf},subInfo:subInfo}),{useCheckboxGroupParentProps}=_q$,info=_objectWithoutProperties(_q$,_excluded78);A(ref,()=>info);return render(info,useCheckboxGroupParentProps);});var CheckboxGroupChild=memoForwardRef(function CheckboxGroupChild(_ref121,ref){var{index,text,subInfo,flags,hidden,render,checked,noModifyTabIndex,focusSelf,onChangeFromParent}=_ref121,_rest=_objectWithoutProperties(_ref121,_excluded79);var _q$2=q$1(UseCheckboxGroupChildContext)({listNavigation:{text},managedChild:{index,flags},rovingTabIndex:{hidden,noModifyTabIndex},checkboxGroupChild:{checked,focusSelf,onChangeFromParent},subInfo}),{useListNavigationChildProps}=_q$2,checkboxGroupChildInfo=_objectWithoutProperties(_q$2,_excluded80);A(ref,()=>checkboxGroupChildInfo);return render(checkboxGroupChildInfo,useListNavigationChildProps);});function defaultRenderPortal(_ref122){var _portalRef$current;var{portalId,children}=_ref122;var portalRef=_(null);(_portalRef$current=portalRef.current)!==null&&_portalRef$current!==void 0?_portalRef$current:portalRef.current=document.getElementById(portalId);if(portalRef.current)return $(children,portalRef.current);else return children;}function defaultRenderModal(_ref123){var{portalId,tagFocusContainer,tagBackdrop,tagBody,tagDialog,tagTitle,makePropsFocusContainer,makePropsBackdrop,makePropsBody,makePropsDialog,makePropsTitle}=_ref123;return function(dialogInfo,modifyFocusContainerProps,modifyDialogProps,modifyTitleProps,modifyBodyProps,modifyBackdropProps){var _modifyTitleProps=modifyTitleProps(makePropsTitle(dialogInfo)),{children:titleChildren}=_modifyTitleProps,titleProps=_objectWithoutProperties(_modifyTitleProps,_excluded81);var _modifyBodyProps=modifyBodyProps(makePropsBody(dialogInfo)),{children:bodyChildren}=_modifyBodyProps,bodyProps=_objectWithoutProperties(_modifyBodyProps,_excluded82);var _modifyDialogProps=modifyDialogProps(makePropsDialog(dialogInfo)),{children:dialogChildren}=_modifyDialogProps,dialogProps=_objectWithoutProperties(_modifyDialogProps,_excluded83);var _modifyBackdropProps=modifyBackdropProps(makePropsBackdrop(dialogInfo)),{children:backdropChildren}=_modifyBackdropProps,backdropProps=_objectWithoutProperties(_modifyBackdropProps,_excluded84);var _modifyFocusContainer=modifyFocusContainerProps(makePropsFocusContainer(dialogInfo)),{children:focusContainerChildren}=_modifyFocusContainer,focusContainerProps=_objectWithoutProperties(_modifyFocusContainer,_excluded85);var title=h$1(tagTitle,titleProps,titleChildren);var body=h$1(tagBody,bodyProps,bodyChildren);var dialog=h$1(tagDialog,dialogProps,dialogChildren,title,body);var backdrop=h$1(tagBackdrop,backdropProps,backdropChildren);var focusContainer=h$1(tagFocusContainer,focusContainerProps,o$1("div",{children:[focusContainerChildren,dialog,backdrop]}));return defaultRenderPortal({portalId,children:focusContainer});};}function defaultRenderDialog(_ref124){var{portalId,tagFocusContainer,tagBackdrop,tagBody,tagDialog,tagTitle,makePropsFocusContainer,makePropsBackdrop,makePropsBody,makePropsDialog,makePropsTitle}=_ref124;return defaultRenderModal({portalId,tagFocusContainer,tagBackdrop,tagBody,tagDialog,tagTitle,makePropsFocusContainer,makePropsBackdrop,makePropsBody,makePropsDialog,makePropsTitle});}var Dialog=memoForwardRef(function Dialog(_ref125,ref){var{onClose,open,bodyIsOnlySemantic,getDocument,getWindow,onActiveElementChange,onLastActiveElementChange,onWindowFocusedChange,focusSelf,render}=_ref125;var _useDialog=useDialog({dialog:{onClose},modal:{bodyIsOnlySemantic,focusSelf},softDismiss:{open},activeElement:{getDocument,getWindow,onActiveElementChange,onLastActiveElementChange,onWindowFocusedChange}}),{useDialogBackdrop,useDialogBody,useDialogProps,useDialogTitle,useDialogFocusContainerProps}=_useDialog,r=_objectWithoutProperties(_useDialog,_excluded86);A(ref,()=>r);var{useDialogTitleProps}=useDialogTitle();var{useDialogBodyProps}=useDialogBody();var{useDialogBackdropProps}=useDialogBackdrop();return render(r,useDialogFocusContainerProps,useDialogProps,useDialogTitleProps,useDialogBodyProps,useDialogBackdropProps);});memoForwardRef(function Drawer(_ref126,ref){var{render,onClose,open,bodyIsOnlySemantic,focusSelf,getDocument,getWindow,onActiveElementChange,onLastActiveElementChange,onWindowFocusedChange}=_ref126;var _useDrawer=useDrawer({modal:{bodyIsOnlySemantic,focusSelf},softDismiss:{onClose,open},activeElement:{getDocument,getWindow,onActiveElementChange,onLastActiveElementChange,onWindowFocusedChange}}),{useDrawerBackdrop,useDrawerBody,useDrawerProps,useDrawerTitle,useDrawerFocusContainerProps}=_useDrawer,drawerInfo=_objectWithoutProperties(_useDrawer,_excluded87);A(ref,()=>drawerInfo);var{useDrawerTitleProps}=useDrawerTitle();var{useDrawerBodyProps}=useDrawerBody();var{useDrawerBackdropProps}=useDrawerBackdrop();return render(drawerInfo,useDrawerFocusContainerProps,useDrawerProps,useDrawerTitleProps,useDrawerBodyProps,useDrawerBackdropProps);});var LocationIndexContext=B$2(0);//const SetManglersContext = createContext<(m: (n: number) => number, d: (n: number) => number) => void>(null!);
var GridlistSectionContext=B$2(null);var GridlistRowContext=B$2(null);var GridlistChildContext=B$2(null);function defaultRenderGridlist(_ref127){var{tagGridlist,makePropsGridlist}=_ref127;return function(info,modifyPropsGridlist){return h$1(tagGridlist,modifyPropsGridlist(makePropsGridlist(info)));};}function defaultRenderGridlistSection(_ref128){var{tagGridlistSection,makePropsGridlistSection}=_ref128;return function(info,modifyPropsGridlistSection){return h$1(tagGridlistSection,modifyPropsGridlistSection(makePropsGridlistSection(info)));};}function defaultRenderGridlistRow(_ref129){var{tagGridlistRow,makePropsGridlistRow}=_ref129;return function(info,modifyPropsGridlistRow){return h$1(tagGridlistRow,modifyPropsGridlistRow(makePropsGridlistRow(info)));};}function defaultRenderGridlistChild(_ref130){var{tagGridlistChild,makePropsGridlistChild}=_ref130;return function(info,modifyPropsGridlistChild){return h$1(tagGridlistChild,modifyPropsGridlistChild(makePropsGridlistChild(info)));};}var Gridlist=memoForwardRef(function GridlistU(_ref131,ref){var{collator,disableArrowKeys,disableHomeEndKeys,initialIndex,noTypeahead,onAfterChildLayoutEffect,onChildrenMountChange,onTabbableIndexChange,onTabbableRender,typeaheadTimeout,selectedIndex,selectionMode,setSelectedIndex,render}=_ref131;var _useGridlist=useGridlist({linearNavigation:{disableArrowKeys,disableHomeEndKeys},listNavigation:{},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange},rovingTabIndex:{initialIndex,onTabbableIndexChange,onTabbableRender},typeaheadNavigation:{collator,noTypeahead,typeaheadTimeout},childrenHaveFocus:{},singleSelection:{selectionMode,setSelectedIndex},gridlist:{selectedIndex}}),{useGridlistSection,useGridlistProps,useGridlistRow}=_useGridlist,gridlistInfo=_objectWithoutProperties(_useGridlist,_excluded88);A(ref,()=>gridlistInfo);return o$1(GridlistSectionContext.Provider,{value:useGridlistSection,children:o$1(GridlistRowContext.Provider,{value:useGridlistRow,children:render(gridlistInfo,useGridlistProps)})});});var GridlistSection=memoForwardRef(function GridlistSectionU(_ref132,ref){var{render,compareRows,index}=_ref132;var _q$3=q$1(GridlistSectionContext)({compareRows}),{useGridlistSectionProps}=_q$3,sectionInfo=_objectWithoutProperties(_q$3,_excluded89);A(ref,()=>sectionInfo);return o$1(LocationIndexContext.Provider,{value:index,children:render(sectionInfo,useGridlistSectionProps)});});var GridlistRow=memoForwardRef(function GridlistRowU(_ref133,ref){var{index,text,collator,disableArrowKeys,disableHomeEndKeys,flags,subInfo,hidden,indexDemangler,indexMangler,initialIndex,noTypeahead,onAfterChildLayoutEffect,onChildrenMountChange,onTabbableIndexChange,onTabbableRender,typeaheadTimeout,noModifyTabIndex,ariaPropName,getDocument,unselectable,selected,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange,render}=_ref133;var _q$4=q$1(GridlistRowContext)({asChildRowOfSection:{listNavigation:{text},managedChild:{index,flags},rovingTabIndex:{hidden,noModifyTabIndex},subInfo},asParentRowOfCells:{linearNavigation:{disableArrowKeys,disableHomeEndKeys},listNavigation:{indexDemangler,indexMangler},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange},rovingTabIndex:{initialIndex,onTabbableIndexChange,onTabbableRender},typeaheadNavigation:{collator,noTypeahead,typeaheadTimeout}},gridlistRow:{locationIndex:q$1(LocationIndexContext),selected},hasFocus:{getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange},singleSelection:{ariaPropName,unselectable}}),{useGridlistChild,useGridlistRowProps}=_q$4,rowInfo=_objectWithoutProperties(_q$4,_excluded90);A(ref,()=>rowInfo);return o$1(GridlistChildContext.Provider,{value:useGridlistChild,children:render(rowInfo,useGridlistRowProps)});});var GridlistChild=memoForwardRef(function GridlistChild(_ref134,ref){var{index,text,flags,noModifyTabIndex,focusSelf,hidden,getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange,render,subInfo}=_ref134;var _q$5=q$1(GridlistChildContext)({listNavigation:{text},managedChild:{index,flags},rovingTabIndex:{focusSelf,hidden,noModifyTabIndex},hasFocus:{getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange},gridlistChild:{locationIndex:q$1(LocationIndexContext)},subInfo}),{useGridlistChildProps}=_q$5,cellInfo=_objectWithoutProperties(_q$5,_excluded91);A(ref,()=>cellInfo);return render(cellInfo,useGridlistChildProps);});var ListboxSingleContext=B$2(null);var ListboxSingle=memoForwardRef(function ListboxSingleU(_ref135,ref){var{render,selectedIndex,tagLabel,collator,disableArrowKeys,disableHomeEndKeys,indexDemangler,indexMangler,navigationDirection,noTypeahead,onAfterChildLayoutEffect,onChildrenMountChange,onTabbableIndexChange,onTabbableRender,typeaheadTimeout,onAllLostFocus,onAnyGainedFocus,selectionMode,tagList,onSelect}=_ref135;var _useListboxSingle=useListboxSingle({linearNavigation:{disableArrowKeys,disableHomeEndKeys,navigationDirection},listboxSingle:{tagLabel,tagList,onSelect},listNavigation:{indexDemangler,indexMangler},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange},rovingTabIndex:{onTabbableIndexChange,onTabbableRender},singleSelection:{selectedIndex,selectionMode},typeaheadNavigation:{collator,noTypeahead,typeaheadTimeout},childrenHaveFocus:{onAllLostFocus,onAnyGainedFocus}}),{useListboxSingleItem,useListboxSingleLabel,useListboxSingleProps}=_useListboxSingle,listboxReturnType=_objectWithoutProperties(_useListboxSingle,_excluded92);A(ref,()=>listboxReturnType);var{useListboxSingleLabelProps}=useListboxSingleLabel();//const label = createElement(tagLabel, useListboxSingleLabelProps({}) as any);
//const list = createElement(tagList, useListboxSingleProps({ children: vnodeChildren, ref }) as any);
return o$1(ListboxSingleContext.Provider,{value:useListboxSingleItem,children:render(listboxReturnType,useListboxSingleLabelProps,useListboxSingleProps)});});function defaultRenderListboxSingle(_ref136){var{makePropsList,makePropsLabel,tagLabel,tagList}=_ref136;return defaultRenderList({makePropsLabel,makePropsList,tagLabel,tagList});}function defaultRenderListboxSingleItem(_ref137){var{makePropsListItem,tagListItem}=_ref137;return defaultRenderListItem({makePropsListItem,tagListItem});}var ListboxSingleItem=memoForwardRef(function ListboxSingleItem(_ref138,ref){var{index,disabled,noModifyTabIndex,flags,focusSelf,getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange,render,text,hidden,subInfo,ariaPropName,unselectable}=_ref138;var _q$6=q$1(ListboxSingleContext)({managedChild:{index,flags},rovingTabIndex:{focusSelf,hidden,noModifyTabIndex},listNavigation:{text},listboxSingleItem:{disabled},singleSelection:{ariaPropName,unselectable,focusSelf},hasFocus:{getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange},subInfo}),{useListboxSingleItemProps}=_q$6,info=_objectWithoutProperties(_q$6,_excluded93);A(ref,()=>info);return o$1(p$1,{children:render(info,useListboxSingleItemProps)});});memoForwardRef(function ListboxGroupU(_ref139,ref){var{render}=_ref139;var _useListboxGroup=useListboxGroup(),{useListboxGroupHeadingProps,useListboxGroupContainerProps}=_useListboxGroup,info=_objectWithoutProperties(_useListboxGroup,_excluded94);A(ref,()=>info);return render(useListboxGroupContainerProps,useListboxGroupHeadingProps);});function defaultRenderList(_ref140){var{makePropsList,makePropsLabel,tagLabel,tagList}=_ref140;return function(info,modifyPropsLabel,modifyPropsList){var label=h$1(tagLabel,modifyPropsLabel(makePropsLabel(info)));var list=h$1(tagList,modifyPropsList(makePropsList(info)));return o$1(p$1,{children:[label,list]});};}function defaultRenderListItem(_ref141){var{makePropsListItem,tagListItem}=_ref141;return function(info,modifyPropsListItem){return h$1(tagListItem,modifyPropsListItem(makePropsListItem(info)));};}var ListboxMultiContext=B$2(null);var ListboxMulti=memoForwardRef(function ListboxMulti(_ref142,ref){var{render,tagLabel,collator,disableArrowKeys,disableHomeEndKeys,indexDemangler,indexMangler,initialIndex,navigationDirection,noTypeahead,onAfterChildLayoutEffect,onChildrenMountChange,onTabbableIndexChange,onTabbableRender,typeaheadTimeout,tagList}=_ref142;var _useListboxMulti=useListboxMulti({linearNavigation:{disableArrowKeys,disableHomeEndKeys,navigationDirection},listboxMulti:{tagLabel,tagList},listNavigation:{indexDemangler,indexMangler},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange},rovingTabIndex:{initialIndex,onTabbableIndexChange,onTabbableRender},typeaheadNavigation:{collator,noTypeahead,typeaheadTimeout}}),{useListboxMultiItem,useListboxMultiLabel,useListboxMultiProps}=_useListboxMulti,listboxReturnType=_objectWithoutProperties(_useListboxMulti,_excluded95);A(ref,()=>listboxReturnType);var{useListboxMultiLabelProps}=useListboxMultiLabel();return o$1(ListboxMultiContext.Provider,{value:useListboxMultiItem,children:render(listboxReturnType,useListboxMultiLabelProps,useListboxMultiProps)});});function defaultRenderListboxMulti(_ref143){var{makePropsList,makePropsLabel,tagLabel,tagList}=_ref143;return defaultRenderList({makePropsLabel,makePropsList,tagLabel,tagList});}function defaultRenderListboxMultiItem(_ref144){var{makePropsListItem,tagListItem}=_ref144;return defaultRenderListItem({makePropsListItem,tagListItem});}var ListboxMultiItem=memoForwardRef(function ListboxMultiItem(_ref145,ref){var{index,noModifyTabIndex,disabled,flags,focusSelf,render,text,hidden,selected,onSelectedChange,getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange,subInfo}=_ref145;var _q$7=q$1(ListboxMultiContext)({managedChild:{index,flags},rovingTabIndex:{focusSelf,hidden,noModifyTabIndex},listNavigation:{text},listboxMultiItem:{disabled,selected,onSelectedChange},hasFocus:{getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange},subInfo}),{useListboxMultiItemProps}=_q$7,itemReturn=_objectWithoutProperties(_q$7,_excluded96);A(ref,()=>itemReturn);return o$1(p$1,{children:render(itemReturn,useListboxMultiItemProps)});});var MenuItemContext=B$2(null);memoForwardRef(function MenubarU(_ref146,ref){var{render,role,collator,disableArrowKeys,disableHomeEndKeys,indexDemangler,indexMangler,orientation,noTypeahead,onAfterChildLayoutEffect,onChildrenMountChange,onTabbableIndexChange,onTabbableRender,typeaheadTimeout,initialIndex}=_ref146;var _useMenubar2=useMenubar({linearNavigation:{disableArrowKeys,disableHomeEndKeys},toolbar:{orientation,role},listNavigation:{indexDemangler,indexMangler},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange},rovingTabIndex:{onTabbableIndexChange,onTabbableRender,initialIndex},typeaheadNavigation:{collator,noTypeahead,typeaheadTimeout}}),{useMenuItem,useMenubarProps}=_useMenubar2,menubarReturnType=_objectWithoutProperties(_useMenubar2,_excluded97);A(ref,()=>menubarReturnType);return o$1(MenuItemContext.Provider,{value:useMenuItem,children:render(menubarReturnType,useMenubarProps)});});var MenuItem=memoForwardRef(function MenuItemU(_ref147,ref){var{index,render,flags,focusSelf,hidden,text,subInfo,noModifyTabIndex,disabled,getDocument,onPress,role,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange}=_ref147;var _q$8=q$1(MenuItemContext)({managedChild:{index,flags},rovingTabIndex:{focusSelf,hidden,noModifyTabIndex},listNavigation:{text},hasFocus:{getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange},menuItem:{disabled,onPress,role},subInfo}),{useMenuItemProps}=_q$8,info=_objectWithoutProperties(_q$8,_excluded98);A(ref,()=>info);return o$1(p$1,{children:render(info,useMenuItemProps)});});function defaultRenderMenuItem(_ref148){var{makePropsChild,tagChild}=_ref148;return function(info,modifyPropsListItem){return h$1(tagChild,modifyPropsListItem(makePropsChild(info)));};}//const MenuItemContext = createContext<UseMenuItem<any, any, any>>(null!);
var Menu=memoForwardRef(function Menu(_ref149,ref){var{initialIndex,collator,disableArrowKeys,disableHomeEndKeys,noTypeahead,typeaheadTimeout,orientation,onOpen,onClose,open,openDirection,indexDemangler,indexMangler,onAfterChildLayoutEffect,onChildrenMountChange,onTabbableIndexChange,onTabbableRender,getDocument,getWindow,render}=_ref149;var _useMenu=useMenu({linearNavigation:{disableArrowKeys,disableHomeEndKeys},listNavigation:{indexDemangler,indexMangler},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange},menu:{onOpen:useStableCallback(onOpen),openDirection},menuSurface:{},rovingTabIndex:{initialIndex,onTabbableIndexChange,onTabbableRender},softDismiss:{onClose:useStableCallback(onClose),open},typeaheadNavigation:{collator,noTypeahead,typeaheadTimeout},activeElement:{getDocument,getWindow},menuButtonHasFocus:{getDocument,getWindow},toolbar:{orientation}}),{useMenuButtonProps,useMenuItem,useMenuProps,useMenuSentinel,useMenuSurfaceProps}=_useMenu,menuReturn=_objectWithoutProperties(_useMenu,_excluded99);A(ref,()=>menuReturn);var{useMenuSentinelProps:useFirstSentinelProps}=useMenuSentinel();var{useMenuSentinelProps:useLastSentinelProps}=useMenuSentinel();return o$1(MenuItemContext.Provider,{value:useMenuItem,children:render(menuReturn,useMenuButtonProps,useMenuSurfaceProps,useMenuProps,useFirstSentinelProps,useLastSentinelProps)});});function defaultRenderMenu(_ref150){var{portalId,tagButton,tagMenu,tagSurface,tagSentinel,makePropsButton,makePropsMenu,makePropsSurface,makePropsSentinel}=_ref150;return function(menuInfo,modifyMenuButtonProps,modifyMenuSurfaceProps,modifyMenuProps,modifyFirstSentinelProps,modifyLastSentinelProps){var _modifyMenuSurfacePro=modifyMenuSurfaceProps(makePropsSurface(menuInfo)),{children:surfaceChildren}=_modifyMenuSurfacePro,surfaceProps=_objectWithoutProperties(_modifyMenuSurfacePro,_excluded100);var _modifyMenuProps=modifyMenuProps(makePropsMenu(menuInfo)),{children:menuChildren}=_modifyMenuProps,menuProps=_objectWithoutProperties(_modifyMenuProps,_excluded101);return o$1(p$1,{children:[h$1(tagButton,modifyMenuButtonProps(makePropsButton(menuInfo))),defaultRenderPortal({portalId,children:h$1(tagSurface,_objectSpread(_objectSpread({},surfaceProps),{},{children:o$1(p$1,{children:[h$1(tagSentinel,modifyFirstSentinelProps(makePropsSentinel(menuInfo))),surfaceChildren,h$1(tagMenu,_objectSpread(_objectSpread({},menuProps),{},{children:o$1(p$1,{children:menuChildren})})),h$1(tagSentinel,modifyLastSentinelProps(makePropsSentinel(menuInfo)))]})}))})]});};}function defaultRenderRadioGroup(_ref151){var{tagGroup,tagLabel,makePropsGroup,makePropsLabel}=_ref151;return function(info,modifyLabelProps,modifyGroupProps){return o$1(p$1,{children:[h$1(tagLabel,modifyLabelProps(makePropsLabel(info))),h$1(tagGroup,modifyGroupProps(makePropsGroup(info)))]});};}var RadioContext=B$2(null);var RadioGroup=memoForwardRef(function RadioGroup(_ref152,ref){var{render,tagGroup,tagGroupLabel,name,onSelectedValueChange,selectedValue,collator,disableArrowKeys,disableHomeEndKeys,navigationDirection,noTypeahead,typeaheadTimeout,indexDemangler,indexMangler,onAllLostFocus,onAnyGainedFocus,onAfterChildLayoutEffect,onChildrenMountChange,onTabbableIndexChange,onTabbableRender}=_ref152;var _useRadioGroup=useRadioGroup({linearNavigation:{disableArrowKeys,disableHomeEndKeys,navigationDirection},listNavigation:{indexDemangler,indexMangler},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange},radioGroup:{name,onSelectedValueChange,selectedValue,tagGroup,tagGroupLabel},rovingTabIndex:{onTabbableIndexChange,onTabbableRender},typeaheadNavigation:{collator,noTypeahead,typeaheadTimeout},childrenHaveFocus:{onAllLostFocus,onAnyGainedFocus},singleSelection:{selectionMode:"focus"}}),{useRadio,useRadioGroupLabelProps,useRadioGroupProps}=_useRadioGroup,radioGroupReturn=_objectWithoutProperties(_useRadioGroup,_excluded102);A(ref,()=>radioGroupReturn);return o$1(RadioContext.Provider,{value:useRadio,children:render(radioGroupReturn,useRadioGroupLabelProps,useRadioGroupProps)});});function defaultRenderRadio(_ref153){var{tagInput,tagLabel,makeInputProps,makeLabelProps,labelPosition}=_ref153;return defaultRenderCheckboxLike({labelPosition,tagInput,tagLabel,makeInputProps,makeLabelProps});}var Radio=memoForwardRef(function Radio(_ref154,ref){var{disabled,index,text,hidden,tagInput,labelPosition,tagLabel,value,render,flags,focusSelf,getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange,subInfo,noModifyTabIndex,unselectable}=_ref154;var _q$9=q$1(RadioContext)({listNavigation:{text},managedChild:{index,flags},radio:{disabled,labelPosition,tagInput,tagLabel,value},rovingTabIndex:{hidden,focusSelf,noModifyTabIndex},hasFocus:{getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange},subInfo,singleSelection:{unselectable,focusSelf}}),{useRadioInput,useRadioLabel}=_q$9,radioReturn=_objectWithoutProperties(_q$9,_excluded103);A(ref,()=>radioReturn);var{useRadioInputProps}=useRadioInput({tag:tagInput});var{useRadioLabelProps}=useRadioLabel({tag:tagLabel});return render(radioReturn,useRadioInputProps,useRadioLabelProps);});var SliderThumbContext=B$2(null);var Slider=memoForwardRef(function Slider(_ref155,ref){var{max,min,onAfterChildLayoutEffect,onChildrenMountChange,children}=_ref155;var _useSlider=useSlider({managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange},slider:{max,min}}),{useSliderThumb}=_useSlider,sliderInfo=_objectWithoutProperties(_useSlider,_excluded104);A(ref,()=>sliderInfo);return o$1(SliderThumbContext.Provider,{value:useSliderThumb,children:children});});var SliderThumb=memoForwardRef(function SliderThumbU(_ref156,ref){var{label,tag,value,max,min,onValueChange,index,flags,render,valueText,subInfo}=_ref156;var _q$10=q$1(SliderThumbContext)({managedChild:{index,flags},sliderThumb:{label,tag,value,max,min,onValueChange,valueText},subInfo}),{useSliderThumbProps}=_q$10,sliderInfo=_objectWithoutProperties(_q$10,_excluded105);A(ref,()=>sliderInfo);return render(sliderInfo,useSliderThumbProps);});function defaultRenderSliderThumb(_ref157){var{tagThumb,makePropsThumb}=_ref157;return function(info,modifyThumbProps){return h$1(tagThumb,modifyThumbProps(makePropsThumb(info)));};}var LocationContext=B$2(null);var TableSectionContext=B$2(null);var TableBodyContext=B$2(null);var TableRowContext=B$2(null);var TableCellContext=B$2(null);function defaultRenderTable(_ref158){var{tagTable,makePropsTable}=_ref158;return function(info,modifyPropsTable){return h$1(tagTable,modifyPropsTable(makePropsTable(info)));};}function defaultRenderTableBody(_ref159){var{tagTableBody,makePropsTableBody}=_ref159;return function(info,modifyPropsTableBody){return h$1(tagTableBody,modifyPropsTableBody(makePropsTableBody(info)));};}function defaultRenderTableHead(_ref160){var{tagTableHead,makePropsTableHead}=_ref160;return function(modifyPropsTableHead){return h$1(tagTableHead,modifyPropsTableHead(makePropsTableHead()));};}function defaultRenderTableRow(_ref161){var{tagTableRow,makePropsTableRow}=_ref161;return function(info,modifyPropsTableRow){return h$1(tagTableRow,modifyPropsTableRow(makePropsTableRow(info)));};}function defaultRenderTableCell(_ref162){var{tagTableCell,makePropsTableCell}=_ref162;return function(info,modifyPropsTableCell){return h$1(tagTableCell,modifyPropsTableCell(makePropsTableCell(info)));};}var Table=memoForwardRef(function TableU(_ref163,ref){var{collator,disableArrowKeys,disableHomeEndKeys,initialIndex,noTypeahead,onAfterChildLayoutEffect,onChildrenMountChange,onTabbableIndexChange,onTabbableRender,typeaheadTimeout,render}=_ref163;var _useTable=useTable({linearNavigation:{disableArrowKeys,disableHomeEndKeys},listNavigation:{},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange},rovingTabIndex:{initialIndex,onTabbableIndexChange,onTabbableRender},typeaheadNavigation:{collator,noTypeahead,typeaheadTimeout}}),{useTableBody,useTableProps,useTableRow,useTableSectionProps}=_useTable,tableInfo=_objectWithoutProperties(_useTable,_excluded106);A(ref,()=>tableInfo);return o$1(TableSectionContext.Provider,{value:useTableSectionProps,children:o$1(TableBodyContext.Provider,{value:useTableBody,children:o$1(TableRowContext.Provider,{value:useTableRow,children:render(tableInfo,useTableProps)})})});});var TableBody=memoForwardRef(function TableBodyU(_ref164,ref){var{render}=_ref164;var _q$11=q$1(TableBodyContext)({}),{useTableBodyProps}=_q$11,sectionInfo=_objectWithoutProperties(_q$11,_excluded107);A(ref,()=>sectionInfo);return o$1(LocationContext.Provider,{value:"body",children:render(sectionInfo,useTableBodyProps)});});var TableHead=memoForwardRef(function TableHeadU(_ref165){var{render,tagTableHead}=_ref165;var useTableSectionPropsBase=q$1(TableSectionContext);var useTableSectionProps=props=>useTableSectionPropsBase(tagTableHead,"head",props);return o$1(LocationContext.Provider,{value:"head",children:render(useTableSectionProps)});});memoForwardRef(function TableFootU(_ref166){var{render,tagTableFoot}=_ref166;var useTableSectionPropsBase=q$1(TableSectionContext);var useTableSectionProps=props=>useTableSectionPropsBase(tagTableFoot,"foot",props);return o$1(LocationContext.Provider,{value:"foot",children:render(useTableSectionProps)});});var TableRow=memoForwardRef(function TableRowU(_ref167,ref){var{index,text,tagTableRow,collator,disableArrowKeys,disableHomeEndKeys,flags,hidden,noModifyTabIndex,indexDemangler,indexMangler,initialIndex,noTypeahead,onAfterChildLayoutEffect,onChildrenMountChange,onTabbableIndexChange,onTabbableRender,typeaheadTimeout,subInfo,render}=_ref167;var _q$12=q$1(TableRowContext)({asChildRowOfSection:{listNavigation:{text},managedChild:{index,flags},rovingTabIndex:{hidden,noModifyTabIndex},subInfo},asParentRowOfCells:{linearNavigation:{disableArrowKeys,disableHomeEndKeys},listNavigation:{indexDemangler,indexMangler},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange},rovingTabIndex:{initialIndex,onTabbableIndexChange,onTabbableRender},typeaheadNavigation:{collator,noTypeahead,typeaheadTimeout}},tableRow:{location:q$1(LocationContext),tagTableRow}}),{useTableCell,useTableRowProps}=_q$12,rowInfo=_objectWithoutProperties(_q$12,_excluded108);A(ref,()=>rowInfo);return o$1(TableCellContext.Provider,{value:useTableCell,children:render(rowInfo,useTableRowProps)});});var TableCell=memoForwardRef(function TableCell(_ref168,ref){var{noModifyTabIndex,index,text,flags,focusSelf,hidden,value,headerType,tagTableCell,getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange,render,subInfo}=_ref168;var _q$13=q$1(TableCellContext)({listNavigation:{text},managedChild:{index,flags},rovingTabIndex:{focusSelf,hidden,noModifyTabIndex},hasFocus:{getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange},subInfo,tableCell:{value,headerType,tagTableCell,location:q$1(LocationContext)}}),{useTableCellProps}=_q$13,cellInfo=_objectWithoutProperties(_q$13,_excluded109);A(ref,()=>cellInfo);return render(cellInfo,useTableCellProps);});var TabContext=B$2(null);var TabPanelContext=B$2(null);var Tabs=memoForwardRef(function Tabs(_ref169,ref){var{selectedIndex,selectionMode,collator,disableArrowKeys,disableHomeEndKeys,indexDemangler,indexMangler,navigationDirection,noTypeahead,onAfterChildLayoutEffect,onChildrenMountChange,onTabbableIndexChange,onTabbableRender,typeaheadTimeout,onAllLostFocus,onAnyGainedFocus,setSelectedIndex,render}=_ref169;var _useTabs=useTabs({tabPanels:{managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange}}}),{useTabList,useTabListLabel,useTabPanel}=_useTabs,tabsInfo=_objectWithoutProperties(_useTabs,_excluded110);A(ref,()=>tabsInfo);var _useTabList=useTabList({childrenHaveFocus:{onAllLostFocus,onAnyGainedFocus},linearNavigation:{disableArrowKeys,disableHomeEndKeys,navigationDirection},listNavigation:{indexDemangler,indexMangler},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange},rovingTabIndex:{onTabbableIndexChange,onTabbableRender},singleSelection:{selectedIndex,selectionMode,setSelectedIndex},typeaheadNavigation:{collator,noTypeahead,typeaheadTimeout}}),{useTab,useTabListProps}=_useTabList,tablistInfo=_objectWithoutProperties(_useTabList,_excluded111);var{useTabListLabelProps}=useTabListLabel({});return o$1(TabContext.Provider,{value:useTab,children:o$1(TabPanelContext.Provider,{value:useTabPanel,children:render(tablistInfo,tabsInfo,useTabListLabelProps,useTabListProps)})});});var Tab=memoForwardRef(function Tab(_ref170,ref){var{index,text,flags,focusSelf,hidden,getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange,render,subInfo,noModifyTabIndex,unselectable}=_ref170;var _q$14=q$1(TabContext)({listNavigation:{text},singleSelection:{unselectable,focusSelf},managedChild:{index,flags},rovingTabIndex:{focusSelf,hidden,noModifyTabIndex},hasFocus:{getDocument,getWindow,onActiveElementChange,onElementChange,onFocusedChanged,onFocusedInnerChanged,onLastActiveElementChange,onLastFocusedChanged,onLastFocusedInnerChanged,onMount,onUnmount,onWindowFocusedChange},subInfo}),{useTabProps}=_q$14,tabInfo=_objectWithoutProperties(_q$14,_excluded112);A(ref,()=>tabInfo);return render(tabInfo,useTabProps);});var TabPanel=memoForwardRef(function TabPanel(_ref171,ref){var{index,flags,render,subInfo}=_ref171;var _q$15=q$1(TabPanelContext)({managedChild:{index,flags},subInfo}),{useTabPanelProps}=_q$15,tabPanelInfo=_objectWithoutProperties(_q$15,_excluded113);A(ref,()=>tabPanelInfo);return render(tabPanelInfo,useTabPanelProps);});function defaultRenderTabs(_ref172){var{tagLabel,tagList,makePropsLabel,makePropsList,panels}=_ref172;return function(tablistInfo,tabsInfo,modifyLabelProps,modifyListProps){var label=h$1(tagLabel,modifyLabelProps(makePropsLabel(tabsInfo,tablistInfo)));var list=h$1(tagList,modifyListProps(makePropsList(tabsInfo,tablistInfo)));return o$1(p$1,{children:[label,list,panels]});};}function defaultRenderTab(_ref173){var{makePropsTab,tagTab}=_ref173;return function(tabInfo,modifyTabProps){return h$1(tagTab,modifyTabProps(makePropsTab(tabInfo)));};}function defaultRenderTabPanel(_ref174){var{makePropsTabPanel,tagTabPanel}=_ref174;return function(tabPanelInfo,modifyTabPanelProps){return h$1(tagTabPanel,modifyTabPanelProps(makePropsTabPanel(tabPanelInfo)));};}/*export function defaultRenderToasts({}: {}) {
        return function (args: UseToastsReturnTypeInfo, props: h.JSX.HTMLAttributes<ContainerType>) {
            return (
            <div>

            </div>
            )
        }
    }*/var ToastContext=B$2(null);var Toasts=memoForwardRef(function Toasts(_ref175,ref){var{onAfterChildLayoutEffect,onChildrenMountChange,render,visibleCount}=_ref175;var _useToasts=useToasts({managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange},toasts:{visibleCount}}),{useToast,useToastContainerProps}=_useToasts,info=_objectWithoutProperties(_useToasts,_excluded114);A(ref,()=>info);return o$1(ToastContext.Provider,{value:useToast,children:render(info,useToastContainerProps({}))});});var Toast=memoForwardRef(function Toast(_ref176,ref){var{render,index,timeout,flags,politeness,subInfo}=_ref176;var _q$16=q$1(ToastContext)({managedChild:{index,flags},toast:{timeout,politeness},subInfo}),toastInfo=_extends({},_q$16);A(ref,()=>toastInfo);return render(toastInfo);});var ToolbarContext=B$2(null);var Toolbar=memoForwardRef(function ToolbarU(_ref177,ref){var{render,role,collator,disableArrowKeys,disableHomeEndKeys,indexDemangler,indexMangler,orientation,noTypeahead,onAfterChildLayoutEffect,onChildrenMountChange,onTabbableIndexChange,onTabbableRender,typeaheadTimeout,initialIndex}=_ref177;var _useToolbar2=useToolbar({linearNavigation:{disableArrowKeys,disableHomeEndKeys},toolbar:{orientation,role},listNavigation:{indexDemangler,indexMangler},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange},rovingTabIndex:{onTabbableIndexChange,onTabbableRender,initialIndex},typeaheadNavigation:{collator,noTypeahead,typeaheadTimeout}}),{useToolbarChild,useToolbarProps}=_useToolbar2,listboxReturnType=_objectWithoutProperties(_useToolbar2,_excluded115);A(ref,()=>listboxReturnType);return o$1(ToolbarContext.Provider,{value:useToolbarChild,children:render(listboxReturnType,useToolbarProps)});});var ToolbarChild=memoForwardRef(function ToolbarChildU(_ref178,ref){var{index,render,flags,focusSelf,hidden,text,noModifyTabIndex,subInfo}=_ref178;var _q$17=q$1(ToolbarContext)({managedChild:{index,flags},rovingTabIndex:{focusSelf,hidden,noModifyTabIndex},listNavigation:{text},subInfo}),{useToolbarChildProps}=_q$17,info=_objectWithoutProperties(_q$17,_excluded116);A(ref,()=>info);return o$1(p$1,{children:render(info,useToolbarChildProps)});});function defaultRenderToolbar(_ref179){var{makePropsContainer,tagContainer}=_ref179;return function(info,modifyPropsContainer){var list=h$1(tagContainer,modifyPropsContainer(makePropsContainer(info)));return o$1(p$1,{children:list});};}function defaultRenderTooltip(_ref180){var{tagTooltip,tagTrigger,makeTooltipProps,makeTriggerProps,portalId}=_ref180;return function(info,modifyPropsTrigger,modifyPropsTooltip){return o$1(p$1,{children:[h$1(tagTrigger,modifyPropsTrigger(makeTriggerProps(info))),defaultRenderPortal({portalId,children:h$1(tagTooltip,modifyPropsTooltip(makeTooltipProps(info)))})]});};}var Tooltip=memoForwardRef(function TooltipU(_ref181,ref){var{focusDelay,mouseoutToleranceDelay,mouseoverDelay,getDocument,getWindow,render}=_ref181;var _useTooltip=useTooltip({focusDelay,mouseoutToleranceDelay,mouseoverDelay}),{useTooltipPopup,useTooltipTrigger}=_useTooltip,info=_objectWithoutProperties(_useTooltip,_excluded117);var{useTooltipTriggerProps}=useTooltipTrigger({hasFocus:{getDocument,getWindow}});var{useTooltipPopupProps}=useTooltipPopup({hasFocus:{getDocument,getWindow}});A(ref,()=>info);return render(info,useTooltipTriggerProps,useTooltipPopupProps);});function useProgress(_ref182){var{managedChildren,progress:{tagProgress:tag,tagLabel}}=_ref182;var _useLabel2=useLabel({label:{prefixInput:"progress-indicator",prefixLabel:"progress-label-",tagInput:tag,tagLabel}}),{useLabelInput,useLabelLabel}=_useLabel2,labelInfo=_objectWithoutProperties(_useLabel2,_excluded118);var _useManagedChildren5=useManagedChildren({managedChildren}),{useManagedChild}=_useManagedChildren5,mcInfo=_objectWithoutProperties(_useManagedChildren5,_excluded119);var{managedChildren:{children}}=mcInfo;var useProgressIndicator=T$1(_ref183=>{var{managedChild,subInfo,progress:{max,value,valueText}}=_ref183;useManagedChild({managedChild:_objectSpread({index:"indicator"},managedChild),subInfo:{type:"indicator",subInfo}});var busy=!!value;h(()=>{var region=children.getAt("region");var label=children.getAt("label");if(region&&region.subInfo.type=="region"){region.subInfo.setBusy(busy);}if(label&&label.subInfo.type=="label"){label.subInfo.setHidden(busy);}},[busy]);var{useLabelInputProps}=useLabelInput();return{progress:{busy},useProgressIndicatorProps:_ref184=>{var _value;var{"aria-valuemax":ariaValueMax,"aria-valuenow":ariaValueNow,"aria-valuetext":ariaValueText,role}=_ref184,p=_objectWithoutProperties(_ref184,_excluded120);if(value=="disabled"){p["aria-hidden"]="true";}if(typeof value!="number"){var _max;value=null;(_max=max)!==null&&_max!==void 0?_max:max=100;}var extraProps=tag==="progress"?{max,value:(_value=value)!==null&&_value!==void 0?_value:undefined,"aria-valuemin":"0","aria-valuenow":value==null?undefined:"".concat(value)}:{"aria-valuemin":"0","aria-valuemax":max==null?undefined:"".concat(max),"aria-valuetext":valueText==null?undefined:"".concat(valueText),"aria-valuenow":value==null?undefined:"".concat(value),role:"progressbar"};return useLabelInputProps(useMergedProps(p,extraProps));}};},[useLabelInput]);var useProgressLabel=T$1(_ref185=>{var{managedChild,subInfo}=_ref185;var[hidden,setHidden]=useState(false);useManagedChild({managedChild:_objectSpread({index:"label"},managedChild),subInfo:{type:"label",setHidden,subInfo}});var{useLabelLabelProps}=useLabelLabel();return{progress:{busy:!hidden},useProgressLabelProps:props=>useLabelLabelProps(useMergedProps(props,{"aria-hidden":hidden?"true":undefined}))};},[useLabelLabel]);var useProgressRegion=T$1(_ref186=>{var{managedChild,subInfo}=_ref186;var[busy,setBusy]=useState(false);useManagedChild({managedChild:_objectSpread({index:"region"},managedChild),subInfo:{type:"region",setBusy,subInfo}});return{progress:{busy},useProgressRegionProps:props=>{return useMergedProps(props,{"aria-busy":busy.toString()});}};},[]);return _objectSpread(_objectSpread(_objectSpread({},labelInfo),mcInfo),{},{useProgressIndicator,useProgressRegion,useProgressLabel});}function useProgressWithHandler(_ref187){var{asyncHandler,progress,managedChildren}=_ref187;var asyncRet=useAsyncHandler(asyncHandler);var _useProgress=useProgress({progress,managedChildren}),{useProgressIndicator,useProgressLabel,useProgressRegion}=_useProgress,progressRet=_objectWithoutProperties(_useProgress,_excluded121);return _objectSpread(_objectSpread({useProgressIndicator,useProgressLabel,useProgressRegion},progressRet),{},{asyncHandler:asyncRet});}var IndicatorContext=B$2(null);var RegionContext=B$2(null);var LabelContext=B$2(null);memoForwardRef(function Progress(_ref188,ref){var{asyncHandler,capture,tagLabel,tagProgress,debounce,onAfterChildLayoutEffect,onChildrenMountChange,throttle,render}=_ref188;var _useProgressWithHandl=useProgressWithHandler({asyncHandler:{asyncHandler,capture,debounce,throttle},managedChildren:{onAfterChildLayoutEffect,onChildrenMountChange},progress:{tagLabel,tagProgress}}),{useProgressIndicator,useProgressLabel,useProgressRegion}=_useProgressWithHandl,info=_objectWithoutProperties(_useProgressWithHandl,_excluded122);A(ref,()=>info);return o$1(IndicatorContext.Provider,{value:useProgressIndicator,children:o$1(RegionContext.Provider,{value:useProgressRegion,children:o$1(LabelContext.Provider,{value:useProgressLabel,children:render(info)})})});});memoForwardRef(function ProgressIndicator(_ref189,ref){var{max,render,subInfo,value,valueText,flags}=_ref189;var useProgressIndicator=q$1(IndicatorContext);var _useProgressIndicator=useProgressIndicator({managedChild:{flags},progress:{max,value,valueText},subInfo}),{useProgressIndicatorProps}=_useProgressIndicator,info=_objectWithoutProperties(_useProgressIndicator,_excluded123);A(ref,()=>info);return render(info,useProgressIndicatorProps);});memoForwardRef(function ProgressLabel(_ref190,ref){var{render,subInfo,flags}=_ref190;var useProgressLabel=q$1(LabelContext);var _useProgressLabel=useProgressLabel({managedChild:{flags},subInfo}),{useProgressLabelProps}=_useProgressLabel,info=_objectWithoutProperties(_useProgressLabel,_excluded124);A(ref,()=>info);return render(info,useProgressLabelProps);});memoForwardRef(function ProgressRegion(_ref191,ref){var{render,subInfo,flags}=_ref191;var useProgressRegion=q$1(RegionContext);var _useProgressRegion=useProgressRegion({managedChild:{flags},subInfo}),{useProgressRegionProps}=_useProgressRegion,info=_objectWithoutProperties(_useProgressRegion,_excluded125);A(ref,()=>info);return render(info,useProgressRegionProps);});function DemoAccordion(_ref192){var{children}=_ref192,props=_objectWithoutProperties(_ref192,_excluded126);return o$1(Accordion,_objectSpread(_objectSpread({},props),{},{render:_info=>{return o$1("div",{id:"accordion-demo",children:children});}}));}function getDocument$d(){return window.document;}var DemoAccordionSection=w(function DemoAccordionSection(_ref193){var{index,body,heading,disabled,open}=_ref193;return o$1(AccordionSection,{index:index,tagButton:"button",open:open,disabled:disabled,getDocument:getDocument$d,subInfo:undefined,render:defaultRenderAccordionSection({makePropsBody:info=>{return{hidden:!info.accordionSection.expanded,children:body};},makePropsHeadingButton:()=>{return{children:heading};},makePropsHeadingContainer:()=>({}),tagBody:"div",tagHeadingButton:"button"})});});function Blurb$f(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/accordion/",children:"In accordance with the ARIA guidelines for Accordion patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["Each section's header and body are linked via ID; the body is ",o$1("code",{children:"labelled-by"})," the header and the header ",o$1("code",{children:"control"}),"s the body."]}),o$1("li",{children:"The header is a button and responds to keyboard, mouse, touch, etc. events, regardless of the element used."}),o$1("li",{children:["If the header element is not a ",o$1("code",{children:"<button>"})," element, it is given that ",o$1("code",{children:"role"}),"."]}),o$1("li",{children:"Up/down & Home/End keys navigate through the list, as does Tab and Shift+Tab"}),o$1("li",{})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:["The ",o$1("code",{children:"render"})," prop each ",o$1("code",{children:"AccordionSection"})," takes must wrap the header button with a ",o$1("a",{href:"https://w3c.github.io/aria/#heading",children:"heading"})," (e.g. ",o$1("code",{children:"h3"}),", or ",o$1("code",{children:"<Heading>"}),"). See the default implementation for an example."]})})]});}function Code$f(){return o$1("code",{children:"<Accordion render={...}>\n    <AccordionSection index={0} render={...} />\n    <AccordionSection index={1} render={...} />\n    <AccordionSection index={2} render={...} />\n</Accordion>"});}function Demo$f(){var[count,setCount]=p(5);return o$1(p$1,{children:[o$1(Blurb$f,{}),o$1(Code$f,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of accordion sections"]}),o$1(DemoAccordion,{children:o$1(p$1,{children:Array.from(function*(){yield o$1(DemoAccordionSection,{index:0,heading:"Accordion section #0",body:"Body content #0",disabled:false});yield o$1(DemoAccordionSection,{index:1,heading:"Accordion section #1",body:"Body content #1",disabled:false});yield o$1(DemoAccordionSection,{index:2,heading:"Accordion section #2 (disabled)",body:"Body content #2",disabled:true});yield o$1(DemoAccordionSection,{index:3,heading:"Accordion section #3 (forced open)",body:"Body content #3",disabled:false,open:true});yield o$1(DemoAccordionSection,{index:4,heading:"Accordion section #4 (forced closed)",body:"Body content #4",disabled:false,open:false});for(var _i7=5;_i7<count;++_i7){yield o$1(DemoAccordionSection,{index:_i7,heading:"Accordion section #".concat(_i7),body:"BodyContent #".concat(_i7),disabled:false});}}()).slice(0,count)})})]});}function getDocument$c(){return window.document;}function Blurb$e(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/button/",children:"In accordance with the ARIA guidelines for Button patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["Whether using an actual ",o$1("code",{children:"<button>"}),", or something else like a ",o$1("code",{children:"<div>"}),", the proper roles and event handlers will be applied."]}),o$1("li",{children:"Buttons can be toggled (pressed or unpressed)."}),o$1("li",{children:["The button responds to keyboard, mouse, touch, etc. events, regardless of the element used.",o$1("ul",{children:[o$1("li",{children:"Double-clicks do not select text, but text is still selectable without it counting as a press/click"}),o$1("li",{children:"When Enter is pressed, the button is immediately activated"}),o$1("li",{children:"When Space is pressed, the button is activated once released"}),o$1("li",{children:"iOS Safari properly focuses the button"})]})]})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:["If your button contains only an icon (or other non-descriptive content, etc.), you must provide an ",o$1("code",{children:"aria-label"})," manually stating what happens when the button is pressed."]})})]});}function Code$e(){return o$1("code",{children:"<Button tag=\"button\">Button</Button>\n    <Button tag=\"div\">Div</Button>"});}function Demo$e(){var[pressed,setPressed]=useState(false);return o$1(p$1,{children:[o$1(Blurb$e,{}),o$1(Code$e,{}),o$1(DemoButton,{disabled:false,tag:"button"}),o$1(DemoButton,{disabled:"soft",tag:"button"}),o$1(DemoButton,{disabled:"hard",tag:"button"}),o$1(DemoButton,{disabled:false,tag:"div"}),o$1(DemoButton,{disabled:"soft",tag:"div"}),o$1(DemoButton,{disabled:"hard",tag:"div"}),o$1(Button,{getDocument:getDocument$c,disabled:false,tagButton:"button",pressed:pressed,onPress:e=>{var _e$EventDetail$presse;return setPressed((_e$EventDetail$presse=e[EventDetail].pressed)!==null&&_e$EventDetail$presse!==void 0?_e$EventDetail$presse:false);},render:defaultRenderButton({tagButton:"button",makePropsButton:()=>({children:"Toggle button (".concat(pressed?"pressed":"unpressed",")")})})})]});}function DemoButton(_ref194){var{tag,disabled}=_ref194;var onPress=()=>{alert("Button clicked");};return o$1(Button,{getDocument:getDocument$c,tagButton:tag,onPress:onPress,render:defaultRenderButton({tagButton:tag,makePropsButton:()=>({class:"btn",children:"".concat(tag," ").concat(disabled?" disabled (".concat(disabled=="soft"?"soft":"hard",")"):"")})})});}/*function DemoButton({ tag, ...props }: { tag: string } & RenderableProps<{}>) {
        return <Button disabled={disabled} onPress={onPress} pressed={} {...props} tag={tag as any}   />
    }*/function Blurb$d(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/",children:"In accordance with the ARIA guidelines for Checkbox patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:"Toggles between checked and unchecked when pressed (clicked, Enter pressed, Space released, etc.)"}),o$1("li",{children:["Can be ",o$1("code",{children:"mixed"})," instead, though ",o$1("code",{children:"onInput"})," will only ever be called with ",o$1("code",{children:"true"})," or ",o$1("code",{children:"false"})]}),o$1("li",{children:["Supports using ",o$1("code",{children:"<input>"}),"s and ",o$1("code",{children:"<label>"}),"s, as well as just plain ol' ",o$1("code",{children:"<div>"}),"s on either/both"]}),o$1("li",{children:"The checkbox and label can be sibling elements, like normal, or the label can wrap the input for a larger hit area. In all cases, the appropriate roles/event handlers will be applied to each element."}),o$1("li",{children:"When selecting the text of a checkbox's label, this does not change the checkbox's state"}),o$1("li",{children:"Double-clicking the label checks & un-checks the checkbox instead of selecting the label's text"}),o$1("li",{children:"Checkbox groups (with a tri-state parent) are a separate component/hook"})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:["If your checkbox does not have a visible label (achievable by by overriding the ",o$1("code",{children:"render"})," prop and setting ",o$1("code",{children:"labelPosition"})," to be \"separate\"), you must pass ",o$1("code",{children:"aria-label"})," as a prop to the checkbox manually. Not providing one will print an error to the console, but it it not required by the type system."]})})]});}function Code$d(){return o$1("code",{children:"<Checkbox checked={true} labelPosition=\"separate\" tagInput=\"input\" tagLabel=\"label\">Label text</Checkbox>"});}function Demo$d(){var[checked,setChecked]=useState(false);return o$1(p$1,{children:[o$1(Blurb$d,{}),o$1(Code$d,{}),o$1(Button,{tagButton:"button",getDocument:getDocument$b,onPress:()=>{setChecked("mixed");},render:defaultRenderButton({tagButton:"button",makePropsButton:()=>({children:"Change to mixed"})})}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"separate",disabled:false,tagInput:"input",tagLabel:"label"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"wrapping",disabled:false,tagInput:"input",tagLabel:"label"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"separate",disabled:false,tagInput:"div",tagLabel:"label"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"wrapping",disabled:false,tagInput:"div",tagLabel:"label"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"separate",disabled:false,tagInput:"input",tagLabel:"div"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"wrapping",disabled:false,tagInput:"input",tagLabel:"div"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"separate",disabled:false,tagInput:"div",tagLabel:"div"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"wrapping",disabled:false,tagInput:"div",tagLabel:"div"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"hidden",disabled:false,tagInput:"input",tagLabel:"label"})]});}function DemoCheckbox$1(_ref195){var{labelPosition,tagInput,tagLabel,disabled,checked,setChecked}=_ref195;//const [checked, setChecked] = useState(false);
return o$1("div",{style:{border:"1px solid black"},children:[o$1(Checkbox,{getDocument:getDocument$b,disabled:disabled,checked:checked,onCheckedChange:e=>setChecked(e[EventDetail].checked),labelPosition:labelPosition=="hidden"?"separate":labelPosition,tagInput:tagInput,tagLabel:tagLabel,render:defaultRenderCheckbox({labelPosition,tagInput:tagInput,tagLabel:tagLabel,makeInputProps:()=>({"aria-label":labelPosition=="hidden"?"Hidden label (technically separate), ".concat(tagInput," and ").concat(tagLabel," ").concat(checked?"checked":"not checked"):undefined}),makeLabelProps:()=>({children:"".concat(labelPosition,", ").concat(tagInput," and ").concat(tagLabel,", ").concat(checked?"checked":"not checked")})})}),labelPosition=="hidden"&&o$1("div",{children:["(This is not a label -- the actual label is via the ",o$1("code",{children:"aria-label"})," prop)"]})]});}function getDocument$b(){return window.document;}function getDocument$a(){return window.document;}function DemoCheckbox(_ref196){var{index}=_ref196;var[checked,setChecked]=useState(false);var labelText="Checkbox #".concat(index);return o$1(CheckboxGroupChild,{checked:checked,index:index,text:labelText,subInfo:undefined,onChangeFromParent:function(){var _ref197=_asyncToGenerator(function*(checked){yield new Promise(resolve=>setTimeout(resolve,Math.random()*2000));setChecked(checked);});return function onChangeFromParent(_x2){return _ref197.apply(this,arguments);};}(),focusSelf:useStableCallback(e=>e.focus()),render:(_ref198,modifyControlProps)=>{var{checkboxGroupChild:{onControlIdChanged,onChildCheckedChange}}=_ref198;return o$1(Checkbox,{checked:checked,disabled:false,getDocument:getDocument$a,onCheckedChange:e=>{setChecked(e[EventDetail].checked);onChildCheckedChange(e[EventDetail].checked);},labelPosition:"separate",tagInput:"input",tagLabel:"label",render:(_ref199,modifyInput,modifyLabel)=>{var{label:{inputId}}=_ref199;var[_getControlId,setControlId]=usePassiveState(onControlIdChanged,returnUndefined);h(()=>{setControlId(inputId);return()=>setControlId(undefined);},[inputId]);return o$1("div",{style:{border:"1px solid black"},children:[o$1("input",_objectSpread({},modifyControlProps(modifyInput({})))),o$1("label",_objectSpread({},modifyLabel({children:"Checkbox #".concat(index)})))]});}});}});}function Blurb$c(){return o$1(p$1,{children:[o$1("p",{children:["Checkbox groups are an alternative to multi-select lists. There is no role of ",o$1("code",{children:"checkboxgroup"}),", but this aims to be an ARIA-compliant implementation of a checkbox group."]}),o$1("ul",{children:[o$1("li",{children:["All normal ",o$1("code",{children:"Checkbox"})," functionality is supported on each individual checkbox."]}),o$1("li",{children:"The parent checkbox switches between 3 states, remembering the last state that caused it to be \"mixed\"."}),o$1("li",{children:["The parent's \"mixed\" state changes all children back to whatever state the user had most recently created; the distinction is drawn when a child calls ",o$1("code",{children:"onChildCheckedChange"})," during its event handler. This call is what notifies the parent checkbox what to use when switching to that \"mixed\" state."]}),o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:[o$1("code",{children:"aria-controls"})," is set on the parent Checkbox to contain the IDs of all child checkboxes. This has no effect on any technology that I am aware of, but it's there just in case."]})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:[o$1("code",{children:"CheckboxGroupParent"})," has supports child checkboxes being asyncronous (e.g. if each child's ",o$1("code",{children:"onChangeFromParent"})," is async, then the parent's ",o$1("code",{children:"onParentCheckedChange"})," will asyncronously wait for all of them), but you must apply any relevant labelling of this circumstance yourself."]}),o$1("li",{children:["As mentioned, ",o$1("code",{children:"aria-controls"})," basically does nothing. Please ensure you're using good labelling here; it is assumed that the parent checkbox provides sufficient labelling for all the children, which how the demo example identifies these elements. If you have a separate label, you will need to wrap the children in a ",o$1("code",{children:"role=group"})," that references that label by overriding ",o$1("code",{children:"render"}),"."]})]})]});}function Code$c(){return o$1("code",{children:""});}function Demo$c(){var[count,setCount]=useState(5);var[pending,setPending]=useState(false);return o$1(p$1,{children:[o$1(Blurb$c,{}),o$1(Code$c,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of checkboxes"]}),o$1("div",{children:[o$1("p",{children:[o$1("strong",{children:"Note:"})," Each checkbox takes a random amount of time to update when modified via the parent checkbox to test async handling."]}),o$1(CheckboxGroup,{render:(info,modifyChildContainerProps)=>{return o$1("div",_objectSpread({},{children:o$1(p$1,{children:[o$1(CheckboxGroupParent,{index:0,focusSelf:e=>e.focus(),subInfo:undefined,text:"Parent checkbox",render:defaultRenderCheckboxGroupParent({disabled:pending,getDocument:getDocument$a,labelPosition:"separate",tagInput:"input",tagLabel:"label",onCheckedChangeStart:()=>{setPending(true);},onCheckedChangeEnd:()=>{setPending(false);},render:defaultRenderCheckbox({tagInput:"input",tagLabel:"label",labelPosition:"separate",makeInputProps:()=>({}),makeLabelProps:()=>({children:"Parent checkbox"})})})}),o$1("div",_objectSpread(_objectSpread({style:{display:"flex"}},modifyChildContainerProps({})),{},{children:o$1(p$1,{children:Array.from(function*(){for(var _i8=0;_i8<count;++_i8){yield o$1(DemoCheckbox,{index:_i8+1},_i8);}}())})}))]})}));}})]})]});}function getDocument$9(){return window.document;}var DemoListItem$3=w(function DemoListItem(_ref200){var{index}=_ref200;var[selected,setSelected]=useState(false);var labelText="List item #".concat(index).concat(selected?" (selected)":"");return o$1(ListboxMultiItem,{getDocument:getDocument$9,focusSelf:e=>e.focus(),selected:selected,index:index,disabled:false,text:labelText,onSelectedChange:e=>{setSelected(e[EventDetail].selected);},render:defaultRenderListboxMultiItem({tagListItem:"li",makePropsListItem:()=>({children:labelText})}),subInfo:undefined});});function Blurb$b(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/listbox/",children:"In accordance with the ARIA guidelines for Listbox patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:"The parent checkbox switches between 3 states, remembering the last state that caused it to be \"mixed\"."}),o$1("li",{children:["The parent checkbox reacts to each child's ",o$1("code",{children:"checked"})," prop and updates its own internal ",o$1("code",{children:"checked"})," attribute (be aware of this if they're asyncronous, as you'll want to ensure they all resolve on the same tick with ",o$1("code",{children:"Promise.all"})," to not clobber the user's inputs)."]}),o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:"Grouping is supported"}),o$1("li",{children:"Sorting/reordering is supported, though not provided by default, as it's mutually exclusive with grouping."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["It is assumed that the parent checkbox provides sufficient labelling for all the children, which how the demo example identifies these elements. If you have a separate label, you will need to wrap the children in a ",o$1("code",{children:"role=group"})," that references that label by overriding ",o$1("code",{children:"render"}),"."]}),o$1("li",{children:["See the caveat above for when each child's ",o$1("code",{children:"onInput"})," takes a variable amount of time to actually update the ",o$1("code",{children:"checked"})," prop, as it can clobber the user's last input when clicking on the parent"]})]})]});}function Code$b(){return o$1("code",{children:""});}function Demo$b(){var[count,setCount]=useState(5);return o$1(p$1,{children:[o$1(Blurb$b,{}),o$1(Code$b,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of list items"]}),o$1("div",{children:o$1(ListboxMulti,{tagLabel:"label",tagList:"ul",render:defaultRenderListboxMulti({tagLabel:"label",tagList:"ul",makePropsLabel:()=>({}),makePropsList:()=>({children:Array.from(function*(){for(var _i9=0;_i9<count;++_i9){yield o$1(DemoListItem$3,{index:_i9},_i9);}}())})})})})]});}function getDocument$8(){return window.document;}var DemoListItem$2=w(function DemoListItem(_ref201){var{index}=_ref201;return o$1(ListboxSingleItem,{index:index,focusSelf:e=>e.focus(),ariaPropName:"aria-selected",unselectable:false,getDocument:getDocument$8,disabled:false,text:"List item #".concat(index),render:defaultRenderListboxSingleItem({tagListItem:"li",makePropsListItem:_ref202=>{var{singleSelection:{selected}}=_ref202;return{children:"List item #".concat(index).concat(selected?" (selected)":"")};}}),subInfo:undefined});});function Blurb$a(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/listbox/",children:"In accordance with the ARIA guidelines for Listbox patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["In terms of keyboard navigation and tabbing through elements, a Listbox is considered a ",o$1("strong",{children:"single"})," tab stop; in other words, no matter how many list items there are in a Listbox, it only takes one press of the Tab button to go through it.",o$1("ul",{children:[o$1("li",{children:"When a Listbox is tabbed into, the most recently selected item is given focus"}),o$1("li",{children:"Pressing Tab again navigates out of the listbox; no other list items are tabbable other than the one currently designated."}),o$1("li",{children:"Pressing the arrow keys navigates through the Listbox one item at a time"}),o$1("li",{children:"Pressing the Home/End keys move focus to the first/last items respectively"}),o$1("li",{children:"Typing any sequence of text starts typeahead that navigates to the next item that matches what's being typed"}),o$1("li",{children:"Focus & selection management is as optimized as possible; only two children re-render at a time when focus or selection changes"}),o$1("li",{children:"These apply generally to all composite components with a variable number of children (Tab Lists, Radio Groups, Multi-Select Listboxes etc.)"})]})]}),o$1("li",{children:["Rather than each individual list item knowing whether it is selected or not (as with multi-select lists), here the parent knows the ",o$1("code",{children:"selectedIndex"})," and simply notifies the (max two) relevant children any time it changes."]}),o$1("li",{children:"Grouping is supported"}),o$1("li",{children:"Sorting/reordering is supported, though not provided by default, as it's mutually exclusive with grouping."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:"Listboxes do not support interactive content within them (e.g. a dropdown menu), as ARIA specifies that this is a different pattern."})})]});}function Code$a(){return o$1("code",{children:""});}function Demo$a(){var[selectedIndex,setSelectedIndex]=useState(null);var[count,setCount]=useState(5);return o$1(p$1,{children:[o$1(Blurb$a,{}),o$1(Code$a,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of list items"]}),o$1("div",{children:o$1(ListboxSingle,{render:defaultRenderListboxSingle({tagLabel:"label",tagList:"ol",makePropsLabel:()=>({}),makePropsList:()=>({children:o$1(p$1,{children:Array.from(function*(){for(var _i10=0;_i10<count;++_i10){yield o$1(DemoListItem$2,{index:_i10},_i10);}}())})})}),selectionMode:"activation",tagLabel:"label",tagList:"ol",selectedIndex:selectedIndex,onSelect:e=>setSelectedIndex(e[EventDetail].selectedIndex)})})]});}function DemoListItem$1(_ref203){var{index}=_ref203;return o$1(MenuItem,{index:index,focusSelf:e=>e.focus(),role:"menuitem",text:"List item #".concat(index),subInfo:undefined,onPress:e=>alert("Menu item #".concat(e[EventDetail].index," pressed")),disabled:false,getDocument:getDocument$7,render:defaultRenderMenuItem({tagChild:"li",makePropsChild:()=>({children:"Menu item #".concat(index)})})});}function getDocument$7(){return window.document;}function Blurb$9(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/listbox/",children:"In accordance with the ARIA guidelines for Listbox patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:"When opened, the menu will focus the first element within it. When closed (by pressing escape, pressing the button again, or tabbing out of the menu), the button that opened it will have focus restored to it."}),o$1("li",{children:"When the menu is closed because another element on the page was focused instead, focus will not be modified."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:"TODO"})})]});}function Code$9(){return o$1("code",{children:""});}function Demo$9(){var[count,setCount]=useState(5);var[open,setOpen]=useState(false);return o$1(p$1,{children:[o$1(Blurb$9,{}),o$1(Code$9,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of menu items"]}),o$1("div",{children:o$1(Menu,{orientation:"vertical",getDocument:getDocument$7,onOpen:()=>setOpen(true),onClose:()=>setOpen(false),open:open,openDirection:"down",render:defaultRenderMenu({tagButton:"button",tagMenu:"ul",tagSentinel:"div",tagSurface:"div",portalId:"portal",makePropsButton:()=>({children:"Open menu"+(open?" (open)":" (closed)")}),makePropsMenu:()=>({children:o$1(p$1,{children:Array.from(function*(){for(var _i11=0;_i11<count;++_i11){yield o$1("div",{children:o$1(DemoListItem$1,{index:_i11},_i11)});}}())})}),makePropsSurface:()=>({style:{display:!open?"none":undefined}}),makePropsSentinel:()=>({})})})})]});}function getDocument$6(){return window.document;}var DemoRadioButton=w(function DemoRadioButton(_ref204){var{index}=_ref204;var value="Radio button #".concat(index);return o$1("div",{children:o$1(Radio,{index:index,focusSelf:e=>e.focus(),subInfo:undefined,getDocument:getDocument$6,disabled:false,labelPosition:"separate",text:value,value:index,unselectable:false,tagInput:"input",tagLabel:"label",render:defaultRenderRadio({labelPosition:"separate",tagInput:"input",tagLabel:"label",makeInputProps:()=>({name:"radio-demo"}),makeLabelProps:()=>({children:value})})})});});function Blurb$8(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/radiobutton/",children:"In accordance with the ARIA guidelines for Radio Button patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:"The input & label support the same text-selection affordances as Checkboxes (labels can be selected, but double-clicking doesn't select the text and selecting text doesn't count as an input)"}),o$1("li",{children:"Selection state is handled by the parent; instead of specifying whether any given radio button is checked or not, the parent notifies each child of the necessary changes."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["If your checkbox does not have a visible label (achievable by by overriding the ",o$1("code",{children:"render"})," prop and setting ",o$1("code",{children:"labelPosition"})," to be \"separate\"), you must pass ",o$1("code",{children:"aria-label"})," as a prop to the checkbox manually. Not providing one will print an error to the console, but it it not required by the type system."]}),o$1("li",{children:["The above also applies to the radio group as a whole; ARIA requires that all Radio Buttons be contained within an element with a specific role which is labelled either by an element (handled for you) or ",o$1("code",{children:"aria-label"})," (specified by you manually on the input)."]})]})]});}function Code$8(){return o$1("code",{children:""});}function Demo$8(){var[selectedIndex,setSelectedIndex]=useState(null);var[count,setCount]=useState(5);return o$1(p$1,{children:[o$1(Blurb$8,{}),o$1(Code$8,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of radio buttons"]}),o$1("div",{children:o$1(RadioGroup,{name:"radio-demo",onSelectedValueChange:e=>{var _e$EventDetail$select;return setSelectedIndex((_e$EventDetail$select=e[EventDetail].selectedValue)!==null&&_e$EventDetail$select!==void 0?_e$EventDetail$select:0);},selectedValue:selectedIndex,tagGroupLabel:"label",tagGroup:"div",render:defaultRenderRadioGroup({tagGroup:"div",tagLabel:"label",makePropsGroup:()=>({children:o$1("div",{children:Array.from(function*(){for(var _i12=0;_i12<count;++_i12){yield o$1(DemoRadioButton,{index:_i12},_i12);}}())})}),makePropsLabel:info=>{var _info$radioGroup$sele;return{children:"Radio group example "+"("+((_info$radioGroup$sele=info.radioGroup.selectedIndex)!==null&&_info$radioGroup$sele!==void 0?_info$radioGroup$sele:"null").toString()+")"};}})})})]});}function DemoSliderThumb(_ref205){var{index}=_ref205;var[value,setValue]=useState(0);return o$1(SliderThumb,{index:index,tag:"input",label:"Slider thumb #".concat(index),value:value,onValueChange:e=>setValue(e[EventDetail].value),min:0,max:10,subInfo:undefined,render:defaultRenderSliderThumb({tagThumb:"input",makePropsThumb:()=>({})})});}function Blurb$7(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/listbox/",children:"In accordance with the ARIA guidelines for Listbox patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:"When opened, the menu will focus the first element within it. When closed (by pressing escape, pressing the button again, or tabbing out of the menu), the button that opened it will have focus restored to it."}),o$1("li",{children:"When the menu is closed because another element on the page was focused instead, focus will not be modified."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:"TODO"})})]});}function Code$7(){return o$1("code",{children:""});}function Demo$7(){var[count,setCount]=useState(5);return o$1(p$1,{children:[o$1(Blurb$7,{}),o$1(Code$7,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of slider thumbs"]}),o$1("div",{children:o$1(Slider,{min:0,max:10,children:o$1(p$1,{children:Array.from(function*(){for(var _i13=0;_i13<count;++_i13){yield o$1("div",{children:o$1(DemoSliderThumb,{index:_i13},_i13)});}}())})})})]});}function getDocument$5(){return window.document;}function Blurb$6(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/dialogmodal/",children:"In accordance with the ARIA guidelines for Modal Dialog patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:"Dialogs block all other elements on the page from receiving focus/interaction and being perceivable to screen readers."}),o$1("li",{children:"Dialogs can be dismissed by pressing Escape or clicking the element designated as the backdrop, both of which can be cancelled/ignored if you need"}),o$1("li",{children:"When opened, the dialog will focus its title or body content as appropriate, however read below under Things Not Handled for caveats."}),o$1("li",{children:"When closed for any reason, the element that was responsible for opening the dialog will be focused."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["By default, when opened, a dialog will focus its body content or title content depending on ",o$1("code",{children:"bodyIsOnlySemantic"}),", which indicates that the dialog's body contains no interactive elements. This may not be suitable for all situations."]}),o$1("li",{children:["It is ",o$1("em",{children:"hightly"})," recommended to override ",o$1("code",{children:"focusSelf"})," for all dialogs you create, and have it focus whatever element makes the most sense for your particular dialog.",o$1("ul",{children:[o$1("li",{children:"Dialogs that act like a form should focus the first interactive element"}),o$1("li",{children:"Dialogs that perform destructive actions should focus the \"Cancel\" button"}),o$1("li",{children:"In some cases, it's best to focus the first paragraph of the body."})]}),"In all cases, consider that the first focused element will both be how keyboard users interact with the dialog, but also the first thing a screen reader will read aloud."]})]})]});}function Code$6(){return o$1("code",{children:""});}function Demo$6(){var[open,setOpen]=useState(false);//const r = useCallback((...args: any[]) => { console.log(...args); }, []);
return o$1(p$1,{children:[o$1(Blurb$6,{}),o$1(Code$6,{}),o$1("div",{children:[o$1(Button,{tagButton:"button",getDocument:getDocument$5,onPress:()=>setOpen(true),render:defaultRenderButton({tagButton:"button",makePropsButton:()=>({children:"Open dialog "+(open?"(open)":"(closed)")})})}),o$1(Dialog,{getDocument:getDocument$5,onClose:()=>setOpen(false),open:open,bodyIsOnlySemantic:true,render:defaultRenderDialog({portalId:"portal",makePropsBackdrop:()=>({"data-type":"backdrop"}),makePropsFocusContainer:()=>({"data-type":"focus"}),makePropsBody:()=>({children:"Dialog body","data-type":"body"}),makePropsDialog:()=>({style:{display:!open?"none":undefined},"data-type":"dialog"}),makePropsTitle:()=>({children:"Dialog title","data-type":"title"}),tagBackdrop:"div",tagBody:"div",tagDialog:"div",tagTitle:"div",tagFocusContainer:"div"})})]})]});}function getDocument$4(){return window.document;}function Blurb$5(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/",children:"In accordance with the ARIA guidelines for Tab and Tab Panel patterns,"})," this widget supports the following:"]}),o$1("ul",{children:o$1("li",{children:["The tabs are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]})}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:"TODO"})})]});}function Code$5(){return o$1("code",{children:""});}function Demo$5(){var[count,setCount]=useState(5);var[selectedIndex,setSelectedIndex]=useState(0);return o$1(p$1,{children:[o$1(Blurb$5,{}),o$1(Code$5,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of tabs"]}),o$1("div",{children:o$1(Tabs,{selectedIndex:selectedIndex,selectionMode:"focus",setSelectedIndex:setSelectedIndex,render:defaultRenderTabs({panels:Array.from(function*(){for(var _i14=0;_i14<count;++_i14){yield o$1(DemoTabPanel,{i:_i14});}}()),tagLabel:"label",tagList:"ul",makePropsLabel:()=>({children:"Tabs example"}),makePropsList:()=>({children:o$1(p$1,{children:Array.from(function*(){for(var _i15=0;_i15<count;++_i15){yield o$1(DemoTab,{i:_i15});}}())})})})})})]});}var DemoTab=w(function DemoTab(_ref206){var{i}=_ref206;var label="Tab #".concat(i);return o$1(Tab,{focusSelf:e=>e.focus(),index:i,getDocument:getDocument$4,render:defaultRenderTab({tagTab:"li",makePropsTab:()=>({children:label})}),text:label,subInfo:undefined,unselectable:false},i);});var DemoTabPanel=w(function DemoTabPanel(_ref207){var{i}=_ref207;var label="Tab panel #".concat(i);return o$1(TabPanel,{index:i,render:defaultRenderTabPanel({tagTabPanel:"div",makePropsTabPanel:_ref208=>{var{tabPanel:{visible}}=_ref208;return{hidden:!visible,children:label};}}),subInfo:undefined},i);});function getDocument$3(){return window.document;}function Blurb$4(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/tooltip/",children:"Tooltips have yet to be well defined in many areas"}),", but this implementation aims to support common use cases:"]}),o$1("ul",{children:[o$1("li",{children:"Hovering or focusing the trigger element shows the tooltip"}),o$1("li",{children:"The tooltip stays shown when it itself is hovered/focused as well, so that the text inside can be selected"}),o$1("li",{children:"Moving the mouse between the trigger and the tooltip has some tolerance associated with immediately hiding the tooltip."}),o$1("li",{children:"Hovering, focusing, and re-hovering can each have a custom delay associated with it"})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["You must ensure that either the tooltip contains a focusable element (a button, link, ",o$1("code",{children:"<div tabIndex=\"-1\" />"}),", etc.)"]}),o$1("li",{children:"Long presses on mobile devices are not yet handled (e.g. a long press on a button triggers a tooltip but does not activate the button)"})]})]});}function Code$4(){return o$1("code",{children:""});}function Demo$4(){return o$1(p$1,{children:[o$1(Blurb$4,{}),o$1(Code$4,{}),o$1("div",{children:["The following text triggers a tooltip: ",o$1(Tooltip,{getDocument:getDocument$3,render:defaultRenderTooltip({portalId:"portal",makeTooltipProps:_ref209=>{var{isOpen}=_ref209;return{children:"This text describes the triggering text in more detail.",style:{opacity:+isOpen}};},makeTriggerProps:()=>({children:"Tooltip-triggering text that is hoverable and focusable:",tabIndex:0}),tagTooltip:"div",tagTrigger:"span"})})]})]});}function Blurb$3(){return o$1(p$1,{children:[o$1("p",{children:o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/alert/",children:"Toasts (aka snackbars) are implemented using the Alert pattern."})}),o$1("ul",{children:[o$1("li",{children:"Pushing a toasts causes its contents to be shown visibly (and audibly with a screen reader)"}),o$1("li",{children:"Only new toasts are announced"}),o$1("li",{children:"Toasts are shown as soon as they are pushed, but you can control the maximum number shown at once with"}),o$1("li",{children:"Toasts can be dismissed in any order"}),o$1("li",{children:"Toasts can be set to auto-dismiss."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:"Auto-dismiss behavior is very situational. An auto-dismissed toast should only refer to information that can be viewed elsewhere; \"X files deleted\" can be double-checked in the Recycle Bin, \"X has logged in\" which you can along with everyone else in a tab somewhere, etc. This obviously cannot be checked programmatically."}),o$1("li",{children:"TODO: Focus management related to toasts that have interactive content"}),o$1("li",{children:"TODO: Toasts are still announced even when the current browser tab is hidden instead of saving them for when the user returns"}),o$1("li",{children:"TODO: Toasts still auto-dismiss when they have focus/are being interacted with"})]})]});}function Code$3(){return o$1("code",{children:""});}function Demo$3(){var currentIndex=_(0);var[toasts,setToasts]=useState([]);var pushToast=T$1(()=>{var index=currentIndex.current;currentIndex.current+=1;setToasts(t=>[...t,o$1(Toast,{subInfo:undefined,index:index,render:_ref210=>{var{toast:{dismiss,showing,dismissed,numberOfToastsAheadOfUs}}=_ref210;return o$1("div",{style:showing?{}:{opacity:0.5},children:["This the toast with an index of ",index,". (#",numberOfToastsAheadOfUs," in the queue to be shown). ",o$1("button",{disabled:dismissed,onClick:dismiss,children:"Click to dismiss"})]});},timeout:null},index)]);},[]);return o$1(p$1,{children:[o$1(Blurb$3,{}),o$1(Code$3,{}),o$1("button",{onClick:pushToast,children:"Push a toast"}),o$1("div",{children:o$1(Toasts,{visibleCount:3,render:(info,props)=>{return o$1("div",_objectSpread(_objectSpread({},props),{},{children:toasts}));}})})]});}function getDocument$2(){return window.document;}function Blurb$2(){return o$1(p$1,{children:[o$1("p",{children:["This is an implementation of an interactive data table that complies with ",o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/table/",children:"the ARIA guidelines for Table patterns"}),"."]}),o$1("ul",{children:[o$1("li",{children:["In terms of keyboard navigation and tabbing through elements, a Table is considered a ",o$1("strong",{children:"single"})," tab stop; in other words, no matter how many cells there are in a table (including if the cells contain interactive elements), it only takes one press of the Tab button to go through it.",o$1("ul",{children:[o$1("li",{children:["Pressing the arrow keys navigates through the cells of the Table. You can override each cell's ",o$1("code",{children:"focusSelf"})," prop to handle child elements."]}),o$1("li",{children:"Most other rules of list navigation apply (as in Listboxes), but in two dimensions."})]})]}),o$1("li",{children:["The body rows are sortable via each cell's ",o$1("code",{children:"value"})," prop. As a result of this, each row must be a ",o$1("em",{children:"direct"})," child of the body, like as a normal array of children with no intervening JSX."]})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["If you don't need all the sorting and focus management and such, there's no reason not to just use the good old ",o$1("code",{children:"<table>"})," element."]}),o$1("li",{children:["It's up to you to make sure that any interactive elements within a table cell respond to focus management properly with the aforementioned ",o$1("code",{children:"focusSelf"})," prop and a properly placed ",o$1("code",{children:["tabIndex=","{","info.rovingTabIndex.tabbable? 0 : -1","}"]})," in the ",o$1("code",{children:"render"})," prop."]})]})]});}function Code$2(){return o$1("code",{children:""});}function DemoInput(_ref211){var{tabbable}=_ref211;var[v,setV]=useState("");return o$1("input",{type:"text",tabIndex:tabbable?0:-1,onInput:T$1(e=>{setV(e.currentTarget.value);e.preventDefault();},[]),value:v});}function DemoTableCell(_ref212){var{index,header}=_ref212;var r=_(Math.random());if(header){var text="Header #".concat(index);return o$1(TableCell,{focusSelf:e=>e.focus(),location:"head",headerType:"column",tagTableCell:"th",index:index,getDocument:getDocument$2,text:text,value:text,render:defaultRenderTableCell({tagTableCell:"th",makePropsTableCell:info=>({children:o$1("button",{tabIndex:info.rovingTabIndex.tabbable?0:-1,onClick:()=>info.tableHeaderCell.sort(),children:text})})}),subInfo:undefined});}else{//const text = `Cell in column #${index}`;
switch(index){case 0:return o$1(TableCell,{focusSelf:e=>e.focus(),location:"body",headerType:null,tagTableCell:"td",index:index,getDocument:getDocument$2,text:"",value:"",render:defaultRenderTableCell({tagTableCell:"td",makePropsTableCell:info=>({children:o$1(DemoInput,{tabbable:info.rovingTabIndex.tabbable})})}),subInfo:undefined});default:return o$1(TableCell,{focusSelf:e=>e.focus(),location:"body",headerType:null,tagTableCell:"td",index:index,getDocument:getDocument$2,text:r.current.toString(),value:r.current.toString(),render:defaultRenderTableCell({tagTableCell:"td",makePropsTableCell:()=>({children:r.current.toString()})}),subInfo:undefined});}}}function Demo$2(){var[count,setCount]=useState(5);return o$1(p$1,{children:[o$1(Blurb$2,{}),o$1(Code$2,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of table rows"]}),o$1("div",{children:o$1(Table,{noTypeahead:true,render:defaultRenderTable({tagTable:"table",makePropsTable:()=>({children:o$1(p$1,{children:[o$1(TableHead,{tagTableHead:"thead",render:defaultRenderTableHead({tagTableHead:"thead",makePropsTableHead:()=>({children:o$1(TableRow,{tagTableRow:"tr",noTypeahead:true,index:0,text:"",render:defaultRenderTableRow({tagTableRow:"tr",makePropsTableRow:()=>({children:o$1(p$1,{children:[o$1(DemoTableCell,{index:0,header:true},0),o$1(DemoTableCell,{index:1,header:true},1),o$1(DemoTableCell,{index:2,header:true},2)]})})}),subInfo:undefined})})})}),o$1(TableBody,{render:defaultRenderTableBody({tagTableBody:"tbody",makePropsTableBody:()=>({children:Array.from(function*(){for(var _i16=0;_i16<count;++_i16){yield o$1(TableRow,{tagTableRow:"tr",noTypeahead:true,index:_i16+1,text:"",render:defaultRenderTableRow({tagTableRow:"tr",makePropsTableRow:()=>({children:o$1(p$1,{children:[o$1(DemoTableCell,{index:0},0),o$1(DemoTableCell,{index:1},1),o$1(DemoTableCell,{index:2},2)]})})}),subInfo:undefined},_i16);}}())})})})]})})})})})]});}function getDocument$1(){return window.document;}function Blurb$1(){return o$1(p$1,{children:[o$1("p",{children:["Because Listboxes are not allowed to contain interactive content, a Gridlist is semantically a list that ",o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/grid/",children:"complies with the ARIA pattern for grids"}),"."]}),o$1("ul",{children:[o$1("li",{children:"In terms of keyboard navigation and tabbing through elements, a Gridlist is like a Listbox, but in two dimensions, like a Table."}),o$1("li",{children:"The rows of a Gridlist are sortable. It is possible to have multiple, independently sortable sections within the same Gridlist."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["It's up to you to make sure that any interactive elements within a Gridlist respond to focus management properly with ",o$1("code",{children:"focusSelf"})," prop and a properly placed ",o$1("code",{children:["tabIndex=","{","info.rovingTabIndex.tabbable? 0 : -1","}"]})," in the ",o$1("code",{children:"render"})," prop."]}),o$1("li",{children:"Any given row in a Gridlist can be marked as selected, but this is up to you to handle manually at the moment"})]})]});}function Code$1(){return o$1("code",{children:""});}function DemoGridlistChild1(_ref213){var{row}=_ref213;var text="Gridlist child "+row;return o$1(GridlistChild,{getDocument:getDocument$1,focusSelf:e=>e.focus(),index:0,text:text,render:defaultRenderGridlistChild({tagGridlistChild:"div",makePropsGridlistChild:_info=>({children:text})}),subInfo:undefined});}function DemoGridlistChild2(){var cb=_(null);var[b,setB]=useState(false);return o$1(GridlistChild,{noModifyTabIndex:true,focusSelf:e=>{var _cb$current;debugger;(_cb$current=cb.current)===null||_cb$current===void 0?void 0:_cb$current.checkboxLike.focusSelf();},getDocument:getDocument$1,index:1,text:b.toString(),render:defaultRenderGridlistChild({tagGridlistChild:"div",makePropsGridlistChild:info=>({children:o$1(Checkbox,{ref:cb,labelPosition:"separate",tagInput:"input",tagLabel:"label",checked:b,disabled:false,getDocument:getDocument$1,onCheckedChange:e=>setB(e[EventDetail].checked),render:defaultRenderCheckbox({labelPosition:"separate",tagInput:"input",tagLabel:"label",makeInputProps:()=>({tabIndex:info.rovingTabIndex.tabbable?0:-1}),makeLabelProps:()=>({children:"Checkbox"})})})})}),subInfo:undefined});}function Demo$1(){var[count,setCount]=useState(5);var[selectedIndex,setSelectedIndex]=useState(null);return o$1(p$1,{children:[o$1(Blurb$1,{}),o$1(Code$1,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of table rows"]}),o$1("div",{children:o$1(Gridlist,{initialIndex:0,selectedIndex:selectedIndex,selectionMode:"activation",setSelectedIndex:setSelectedIndex,render:defaultRenderGridlist({tagGridlist:"div",makePropsGridlist:_info=>({children:o$1(GridlistSection,{index:0,compareRows:(lhs,rhs)=>lhs-rhs,render:defaultRenderGridlistSection({tagGridlistSection:"div",makePropsGridlistSection:_info=>({children:Array.from(function*(){var _loop=function*(_i17){yield o$1(GridlistRow,{ariaPropName:"aria-selected",getDocument:getDocument$1,selected:false,unselectable:true,subInfo:undefined,index:_i17,text:"",render:defaultRenderGridlistRow({tagGridlistRow:"div",makePropsGridlistRow:_info=>({children:[o$1(DemoGridlistChild1,{row:_i17}),o$1(DemoGridlistChild2,{})]})})});};for(var _i17=0;_i17<count;++_i17){yield*_loop(_i17);}}())})})})})})})})]});}function getDocument(){return window.document;}var DemoListItem=w(function DemoListItem(_ref214){var{index}=_ref214;return o$1(ToolbarChild,{index:index,subInfo:undefined,focusSelf:e=>e.focus(),text:"List item #".concat(index),render:(_ref215,modifyProps)=>{var{rovingTabIndex:{tabbable}}=_ref215;return o$1(Button,{getDocument:getDocument,tagButton:"button",render:defaultRenderButton({tagButton:"button",makePropsButton:()=>modifyProps(_objectSpread(_objectSpread({},{"data-tabbable":tabbable.toString()}),{},{children:"Button #".concat(index)}))})});}});});function Blurb(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/toolbar/",children:"In accordance with the ARIA guidelines for Toolbar patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:"A Toolbar is a single widget for the purposes of keyboard navigation, like a Listbox."}),o$1("li",{children:"Toolbars are well-suited for \"button group\" patterns as well. Multiple groups can be contained within a single Toolbar, even multiple different types of components."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:["You must label the Toolbar with ",o$1("code",{children:"aria-label"}),"."]})})]});}function Code(){return o$1("code",{children:""});}function Demo(){var[count,setCount]=useState(5);return o$1(p$1,{children:[o$1(Blurb,{}),o$1(Code,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of list items"]}),o$1("div",{children:o$1(Toolbar,{orientation:"horizontal",role:"toolbar",render:defaultRenderToolbar({tagContainer:"div",makePropsContainer:()=>({children:o$1(p$1,{children:Array.from(function*(){for(var _i18=0;_i18<count;++_i18){yield o$1(DemoListItem,{index:_i18},_i18);}}())})})})})})]});}//import { options } from "preact";
//options.debounceRendering = queueMicrotask;
//const RandomWords = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.".split(" ");
var Component=()=>{return o$1(Heading,{heading:"Demos",children:[o$1(Heading,{heading:"Toolbar",children:o$1(Demo,{})}),o$1(Heading,{heading:"Dialog",children:o$1(Demo$6,{})}),o$1(Heading,{heading:"Gridlist",children:o$1(Demo$1,{})}),o$1(Heading,{heading:"Table",children:o$1(Demo$2,{})}),o$1(Heading,{heading:"Toast",children:o$1(Demo$3,{})}),o$1(Heading,{heading:"Tooltip",children:o$1(Demo$4,{})}),o$1(Heading,{heading:"Tabs",children:o$1(Demo$5,{})}),o$1(Heading,{heading:"Slider",children:o$1(Demo$7,{})}),o$1(Heading,{heading:"Single-select Listbox",children:o$1(Demo$a,{})}),o$1(Heading,{heading:"Accordion",children:o$1(Demo$f,{})}),o$1(Heading,{heading:"Button",children:o$1(Demo$e,{})}),o$1(Heading,{heading:"Checkbox",children:o$1(Demo$d,{})}),o$1(Heading,{heading:"Checkbox Group",children:o$1(Demo$c,{})}),o$1(Heading,{heading:"Multi-select Listbox",children:o$1(Demo$b,{})}),o$1(Heading,{heading:"Menu",children:o$1(Demo$9,{})}),o$1(Heading,{heading:"Radio",children:o$1(Demo$8,{})})]});};requestAnimationFrame(()=>{P$1(o$1(Component,{}),document.getElementById("root"));});})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
