(function () {
	'use strict';

	var n,
	    l$1,
	    u$1,
	    t$1,
	    o$2,
	    r$1,
	    f$1,
	    e$2 = {},
	    c$1 = [],
	    s$1 = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;

	function a$1(n, l) {
	  for (var u in l) n[u] = l[u];

	  return n;
	}

	function h$1(n) {
	  var l = n.parentNode;
	  l && l.removeChild(n);
	}

	function v$1(l, u, i) {
	  var t,
	      o,
	      r,
	      f = {};

	  for (r in u) "key" == r ? t = u[r] : "ref" == r ? o = u[r] : f[r] = u[r];

	  if (arguments.length > 2 && (f.children = arguments.length > 3 ? n.call(arguments, 2) : i), "function" == typeof l && null != l.defaultProps) for (r in l.defaultProps) void 0 === f[r] && (f[r] = l.defaultProps[r]);
	  return y$1(l, f, t, o, null);
	}

	function y$1(n, i, t, o, r) {
	  var f = {
	    type: n,
	    props: i,
	    key: t,
	    ref: o,
	    __k: null,
	    __: null,
	    __b: 0,
	    __e: null,
	    __d: void 0,
	    __c: null,
	    __h: null,
	    constructor: void 0,
	    __v: null == r ? ++u$1 : r
	  };
	  return null == r && null != l$1.vnode && l$1.vnode(f), f;
	}

	function d$1(n) {
	  return n.children;
	}

	function _(n, l) {
	  this.props = n, this.context = l;
	}

	function k$1(n, l) {
	  if (null == l) return n.__ ? k$1(n.__, n.__.__k.indexOf(n) + 1) : null;

	  for (var u; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) return u.__e;

	  return "function" == typeof n.type ? k$1(n) : null;
	}

	function b$1(n) {
	  var l, u;

	  if (null != (n = n.__) && null != n.__c) {
	    for (n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) {
	      n.__e = n.__c.base = u.__e;
	      break;
	    }

	    return b$1(n);
	  }
	}

	function m$1(n) {
	  (!n.__d && (n.__d = !0) && t$1.push(n) && !g$2.__r++ || r$1 !== l$1.debounceRendering) && ((r$1 = l$1.debounceRendering) || o$2)(g$2);
	}

	function g$2() {
	  for (var n; g$2.__r = t$1.length;) n = t$1.sort(function (n, l) {
	    return n.__v.__b - l.__v.__b;
	  }), t$1 = [], n.some(function (n) {
	    var l, u, i, t, o, r;
	    n.__d && (o = (t = (l = n).__v).__e, (r = l.__P) && (u = [], (i = a$1({}, t)).__v = t.__v + 1, j$2(r, t, i, l.__n, void 0 !== r.ownerSVGElement, null != t.__h ? [o] : null, u, null == o ? k$1(t) : o, t.__h), z$2(u, t), t.__e != o && b$1(t)));
	  });
	}

	function w$2(n, l, u, i, t, o, r, f, s, a) {
	  var h,
	      v,
	      p,
	      _,
	      b,
	      m,
	      g,
	      w = i && i.__k || c$1,
	      A = w.length;

	  for (u.__k = [], h = 0; h < l.length; h++) if (null != (_ = u.__k[h] = null == (_ = l[h]) || "boolean" == typeof _ ? null : "string" == typeof _ || "number" == typeof _ || "bigint" == typeof _ ? y$1(null, _, null, null, _) : Array.isArray(_) ? y$1(d$1, {
	    children: _
	  }, null, null, null) : _.__b > 0 ? y$1(_.type, _.props, _.key, null, _.__v) : _)) {
	    if (_.__ = u, _.__b = u.__b + 1, null === (p = w[h]) || p && _.key == p.key && _.type === p.type) w[h] = void 0;else for (v = 0; v < A; v++) {
	      if ((p = w[v]) && _.key == p.key && _.type === p.type) {
	        w[v] = void 0;
	        break;
	      }

	      p = null;
	    }
	    j$2(n, _, p = p || e$2, t, o, r, f, s, a), b = _.__e, (v = _.ref) && p.ref != v && (g || (g = []), p.ref && g.push(p.ref, null, _), g.push(v, _.__c || b, _)), null != b ? (null == m && (m = b), "function" == typeof _.type && _.__k === p.__k ? _.__d = s = x(_, s, n) : s = P$1(n, _, p, w, b, s), "function" == typeof u.type && (u.__d = s)) : s && p.__e == s && s.parentNode != n && (s = k$1(p));
	  }

	  for (u.__e = m, h = A; h--;) null != w[h] && ("function" == typeof u.type && null != w[h].__e && w[h].__e == u.__d && (u.__d = k$1(i, h + 1)), N(w[h], w[h]));

	  if (g) for (h = 0; h < g.length; h++) M$2(g[h], g[++h], g[++h]);
	}

	function x(n, l, u) {
	  for (var i, t = n.__k, o = 0; t && o < t.length; o++) (i = t[o]) && (i.__ = n, l = "function" == typeof i.type ? x(i, l, u) : P$1(u, i, i, t, i.__e, l));

	  return l;
	}

	function A$2(n, l) {
	  return l = l || [], null == n || "boolean" == typeof n || (Array.isArray(n) ? n.some(function (n) {
	    A$2(n, l);
	  }) : l.push(n)), l;
	}

	function P$1(n, l, u, i, t, o) {
	  var r, f, e;
	  if (void 0 !== l.__d) r = l.__d, l.__d = void 0;else if (null == u || t != o || null == t.parentNode) n: if (null == o || o.parentNode !== n) n.appendChild(t), r = null;else {
	    for (f = o, e = 0; (f = f.nextSibling) && e < i.length; e += 2) if (f == t) break n;

	    n.insertBefore(t, o), r = o;
	  }
	  return void 0 !== r ? r : t.nextSibling;
	}

	function C$1(n, l, u, i, t) {
	  var o;

	  for (o in u) "children" === o || "key" === o || o in l || H$1(n, o, null, u[o], i);

	  for (o in l) t && "function" != typeof l[o] || "children" === o || "key" === o || "value" === o || "checked" === o || u[o] === l[o] || H$1(n, o, l[o], u[o], i);
	}

	function $(n, l, u) {
	  "-" === l[0] ? n.setProperty(l, u) : n[l] = null == u ? "" : "number" != typeof u || s$1.test(l) ? u : u + "px";
	}

	function H$1(n, l, u, i, t) {
	  var o;

	  n: if ("style" === l) {
	    if ("string" == typeof u) n.style.cssText = u;else {
	      if ("string" == typeof i && (n.style.cssText = i = ""), i) for (l in i) u && l in u || $(n.style, l, "");
	      if (u) for (l in u) i && u[l] === i[l] || $(n.style, l, u[l]);
	    }
	  } else if ("o" === l[0] && "n" === l[1]) o = l !== (l = l.replace(/Capture$/, "")), l = l.toLowerCase() in n ? l.toLowerCase().slice(2) : l.slice(2), n.l || (n.l = {}), n.l[l + o] = u, u ? i || n.addEventListener(l, o ? T$2 : I, o) : n.removeEventListener(l, o ? T$2 : I, o);else if ("dangerouslySetInnerHTML" !== l) {
	    if (t) l = l.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");else if ("href" !== l && "list" !== l && "form" !== l && "tabIndex" !== l && "download" !== l && l in n) try {
	      n[l] = null == u ? "" : u;
	      break n;
	    } catch (n) {}
	    "function" == typeof u || (null != u && (!1 !== u || "a" === l[0] && "r" === l[1]) ? n.setAttribute(l, u) : n.removeAttribute(l));
	  }
	}

	function I(n) {
	  this.l[n.type + !1](l$1.event ? l$1.event(n) : n);
	}

	function T$2(n) {
	  this.l[n.type + !0](l$1.event ? l$1.event(n) : n);
	}

	function j$2(n, u, i, t, o, r, f, e, c) {
	  var s,
	      h,
	      v,
	      y,
	      p,
	      k,
	      b,
	      m,
	      g,
	      x,
	      A,
	      P,
	      C,
	      $ = u.type;
	  if (void 0 !== u.constructor) return null;
	  null != i.__h && (c = i.__h, e = u.__e = i.__e, u.__h = null, r = [e]), (s = l$1.__b) && s(u);

	  try {
	    n: if ("function" == typeof $) {
	      if (m = u.props, g = (s = $.contextType) && t[s.__c], x = s ? g ? g.props.value : s.__ : t, i.__c ? b = (h = u.__c = i.__c).__ = h.__E : ("prototype" in $ && $.prototype.render ? u.__c = h = new $(m, x) : (u.__c = h = new _(m, x), h.constructor = $, h.render = O$1), g && g.sub(h), h.props = m, h.state || (h.state = {}), h.context = x, h.__n = t, v = h.__d = !0, h.__h = []), null == h.__s && (h.__s = h.state), null != $.getDerivedStateFromProps && (h.__s == h.state && (h.__s = a$1({}, h.__s)), a$1(h.__s, $.getDerivedStateFromProps(m, h.__s))), y = h.props, p = h.state, v) null == $.getDerivedStateFromProps && null != h.componentWillMount && h.componentWillMount(), null != h.componentDidMount && h.__h.push(h.componentDidMount);else {
	        if (null == $.getDerivedStateFromProps && m !== y && null != h.componentWillReceiveProps && h.componentWillReceiveProps(m, x), !h.__e && null != h.shouldComponentUpdate && !1 === h.shouldComponentUpdate(m, h.__s, x) || u.__v === i.__v) {
	          h.props = m, h.state = h.__s, u.__v !== i.__v && (h.__d = !1), h.__v = u, u.__e = i.__e, u.__k = i.__k, u.__k.forEach(function (n) {
	            n && (n.__ = u);
	          }), h.__h.length && f.push(h);
	          break n;
	        }

	        null != h.componentWillUpdate && h.componentWillUpdate(m, h.__s, x), null != h.componentDidUpdate && h.__h.push(function () {
	          h.componentDidUpdate(y, p, k);
	        });
	      }
	      if (h.context = x, h.props = m, h.__v = u, h.__P = n, A = l$1.__r, P = 0, "prototype" in $ && $.prototype.render) h.state = h.__s, h.__d = !1, A && A(u), s = h.render(h.props, h.state, h.context);else do {
	        h.__d = !1, A && A(u), s = h.render(h.props, h.state, h.context), h.state = h.__s;
	      } while (h.__d && ++P < 25);
	      h.state = h.__s, null != h.getChildContext && (t = a$1(a$1({}, t), h.getChildContext())), v || null == h.getSnapshotBeforeUpdate || (k = h.getSnapshotBeforeUpdate(y, p)), C = null != s && s.type === d$1 && null == s.key ? s.props.children : s, w$2(n, Array.isArray(C) ? C : [C], u, i, t, o, r, f, e, c), h.base = u.__e, u.__h = null, h.__h.length && f.push(h), b && (h.__E = h.__ = null), h.__e = !1;
	    } else null == r && u.__v === i.__v ? (u.__k = i.__k, u.__e = i.__e) : u.__e = L$1(i.__e, u, i, t, o, r, f, c);

	    (s = l$1.diffed) && s(u);
	  } catch (n) {
	    u.__v = null, (c || null != r) && (u.__e = e, u.__h = !!c, r[r.indexOf(e)] = null), l$1.__e(n, u, i);
	  }
	}

	function z$2(n, u) {
	  l$1.__c && l$1.__c(u, n), n.some(function (u) {
	    try {
	      n = u.__h, u.__h = [], n.some(function (n) {
	        n.call(u);
	      });
	    } catch (n) {
	      l$1.__e(n, u.__v);
	    }
	  });
	}

	function L$1(l, u, i, t, o, r, f, c) {
	  var s,
	      a,
	      v,
	      y = i.props,
	      p = u.props,
	      d = u.type,
	      _ = 0;
	  if ("svg" === d && (o = !0), null != r) for (; _ < r.length; _++) if ((s = r[_]) && "setAttribute" in s == !!d && (d ? s.localName === d : 3 === s.nodeType)) {
	    l = s, r[_] = null;
	    break;
	  }

	  if (null == l) {
	    if (null === d) return document.createTextNode(p);
	    l = o ? document.createElementNS("http://www.w3.org/2000/svg", d) : document.createElement(d, p.is && p), r = null, c = !1;
	  }

	  if (null === d) y === p || c && l.data === p || (l.data = p);else {
	    if (r = r && n.call(l.childNodes), a = (y = i.props || e$2).dangerouslySetInnerHTML, v = p.dangerouslySetInnerHTML, !c) {
	      if (null != r) for (y = {}, _ = 0; _ < l.attributes.length; _++) y[l.attributes[_].name] = l.attributes[_].value;
	      (v || a) && (v && (a && v.__html == a.__html || v.__html === l.innerHTML) || (l.innerHTML = v && v.__html || ""));
	    }

	    if (C$1(l, p, y, o, c), v) u.__k = [];else if (_ = u.props.children, w$2(l, Array.isArray(_) ? _ : [_], u, i, t, o && "foreignObject" !== d, r, f, r ? r[0] : i.__k && k$1(i, 0), c), null != r) for (_ = r.length; _--;) null != r[_] && h$1(r[_]);
	    c || ("value" in p && void 0 !== (_ = p.value) && (_ !== l.value || "progress" === d && !_ || "option" === d && _ !== y.value) && H$1(l, "value", _, y.value, !1), "checked" in p && void 0 !== (_ = p.checked) && _ !== l.checked && H$1(l, "checked", _, y.checked, !1));
	  }
	  return l;
	}

	function M$2(n, u, i) {
	  try {
	    "function" == typeof n ? n(u) : n.current = u;
	  } catch (n) {
	    l$1.__e(n, i);
	  }
	}

	function N(n, u, i) {
	  var t, o;

	  if (l$1.unmount && l$1.unmount(n), (t = n.ref) && (t.current && t.current !== n.__e || M$2(t, null, u)), null != (t = n.__c)) {
	    if (t.componentWillUnmount) try {
	      t.componentWillUnmount();
	    } catch (n) {
	      l$1.__e(n, u);
	    }
	    t.base = t.__P = null;
	  }

	  if (t = n.__k) for (o = 0; o < t.length; o++) t[o] && N(t[o], u, "function" != typeof n.type);
	  i || null == n.__e || h$1(n.__e), n.__e = n.__d = void 0;
	}

	function O$1(n, l, u) {
	  return this.constructor(n, u);
	}

	function S$1(u, i, t) {
	  var o, r, f;
	  l$1.__ && l$1.__(u, i), r = (o = "function" == typeof t) ? null : t && t.__k || i.__k, f = [], j$2(i, u = (!o && t || i).__k = v$1(d$1, null, [u]), r || e$2, e$2, void 0 !== i.ownerSVGElement, !o && t ? [t] : r ? null : i.firstChild ? n.call(i.childNodes) : null, f, !o && t ? t : r ? r.__e : i.firstChild, o), z$2(f, u);
	}

	function D(n, l) {
	  var u = {
	    __c: l = "__cC" + f$1++,
	    __: n,
	    Consumer: function (n, l) {
	      return n.children(l);
	    },
	    Provider: function (n) {
	      var u, i;
	      return this.getChildContext || (u = [], (i = {})[l] = this, this.getChildContext = function () {
	        return i;
	      }, this.shouldComponentUpdate = function (n) {
	        this.props.value !== n.value && u.some(m$1);
	      }, this.sub = function (n) {
	        u.push(n);
	        var l = n.componentWillUnmount;

	        n.componentWillUnmount = function () {
	          u.splice(u.indexOf(n), 1), l && l.call(n);
	        };
	      }), n.children;
	    }
	  };
	  return u.Provider.__ = u.Consumer.contextType = u;
	}

	n = c$1.slice, l$1 = {
	  __e: function (n, l, u, i) {
	    for (var t, o, r; l = l.__;) if ((t = l.__c) && !t.__) try {
	      if ((o = t.constructor) && null != o.getDerivedStateFromError && (t.setState(o.getDerivedStateFromError(n)), r = t.__d), null != t.componentDidCatch && (t.componentDidCatch(n, i || {}), r = t.__d), r) return t.__E = t;
	    } catch (l) {
	      n = l;
	    }

	    throw n;
	  }
	}, u$1 = 0, _.prototype.setState = function (n, l) {
	  var u;
	  u = null != this.__s && this.__s !== this.state ? this.__s : this.__s = a$1({}, this.state), "function" == typeof n && (n = n(a$1({}, u), this.props)), n && a$1(u, n), null != n && this.__v && (l && this.__h.push(l), m$1(this));
	}, _.prototype.forceUpdate = function (n) {
	  this.__v && (this.__e = !0, n && this.__h.push(n), m$1(this));
	}, _.prototype.render = d$1, t$1 = [], o$2 = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, g$2.__r = 0, f$1 = 0;

	var o$1 = 0;

	function e$1(_, e, n, t, f) {
	  var l,
	      s,
	      u = {};

	  for (s in e) "ref" == s ? l = e[s] : u[s] = e[s];

	  var a = {
	    type: _,
	    props: u,
	    key: n,
	    ref: l,
	    __k: null,
	    __: null,
	    __b: 0,
	    __e: null,
	    __d: void 0,
	    __c: null,
	    __h: null,
	    constructor: void 0,
	    __v: --o$1,
	    __source: f,
	    __self: t
	  };
	  if ("function" == typeof _ && (l = _.defaultProps)) for (s in l) void 0 === u[s] && (u[s] = l[s]);
	  return l$1.vnode && l$1.vnode(a), a;
	}

	var t,
	    u,
	    r,
	    o,
	    i = 0,
	    c = [],
	    f = l$1.__b,
	    e = l$1.__r,
	    a = l$1.diffed,
	    v = l$1.__c,
	    l = l$1.unmount;

	function m(t, r) {
	  l$1.__h && l$1.__h(u, t, i || r), i = 0;
	  var o = u.__H || (u.__H = {
	    __: [],
	    __h: []
	  });
	  return t >= o.__.length && o.__.push({}), o.__[t];
	}

	function d(n) {
	  return i = 1, p(z$1, n);
	}

	function p(n, r, o) {
	  var i = m(t++, 2);
	  return i.t = n, i.__c || (i.__ = [o ? o(r) : z$1(void 0, r), function (n) {
	    var t = i.t(i.__[0], n);
	    i.__[0] !== t && (i.__ = [t, i.__[1]], i.__c.setState({}));
	  }], i.__c = u), i.__;
	}

	function y(r, o) {
	  var i = m(t++, 3);
	  !l$1.__s && w$1(i.__H, o) && (i.__ = r, i.u = o, u.__H.__h.push(i));
	}

	function h(r, o) {
	  var i = m(t++, 4);
	  !l$1.__s && w$1(i.__H, o) && (i.__ = r, i.u = o, u.__h.push(i));
	}

	function s(n) {
	  return i = 5, A$1(function () {
	    return {
	      current: n
	    };
	  }, []);
	}

	function A$1(n, u) {
	  var r = m(t++, 7);
	  return w$1(r.__H, u) ? (r.o = n(), r.u = u, r.__h = n, r.o) : r.__;
	}

	function F(n, t) {
	  return i = 8, A$1(function () {
	    return n;
	  }, t);
	}

	function T$1(n) {
	  var r = u.context[n.__c],
	      o = m(t++, 9);
	  return o.c = n, r ? (null == o.__ && (o.__ = !0, r.sub(u)), r.props.value) : n.__;
	}

	function b() {
	  for (var t; t = c.shift();) if (t.__P) try {
	    t.__H.__h.forEach(j$1), t.__H.__h.forEach(k), t.__H.__h = [];
	  } catch (u) {
	    t.__H.__h = [], l$1.__e(u, t.__v);
	  }
	}

	l$1.__b = function (n) {
	  u = null, f && f(n);
	}, l$1.__r = function (n) {
	  e && e(n), t = 0;
	  var o = (u = n.__c).__H;
	  o && (r === u ? (o.__h = [], u.__h = [], o.__.forEach(function (n) {
	    n.o = n.u = void 0;
	  })) : (o.__.forEach(function (n) {
	    n.u && (n.__H = n.u), n.o && (n.__ = n.o), n.o = n.u = void 0;
	  }), o.__h.forEach(j$1), o.__h.forEach(k), o.__h = [])), r = u;
	}, l$1.diffed = function (t) {
	  a && a(t);
	  var i = t.__c;
	  i && i.__H && i.__H.__h.length && (1 !== c.push(i) && o === l$1.requestAnimationFrame || ((o = l$1.requestAnimationFrame) || function (n) {
	    var t,
	        u = function () {
	      clearTimeout(r), g$1 && cancelAnimationFrame(t), setTimeout(n);
	    },
	        r = setTimeout(u, 100);

	    g$1 && (t = requestAnimationFrame(u));
	  })(b)), u = null, r = null;
	}, l$1.__c = function (t, u) {
	  u.some(function (t) {
	    try {
	      t.__H && t.__H.__.forEach(function (n) {
	        n.u && (n.__H = n.u), n.o && (n.__ = n.o), n.o = n.u = void 0;
	      }), t.__h.forEach(j$1), t.__h = t.__h.filter(function (n) {
	        return !n.__ || k(n);
	      });
	    } catch (r) {
	      u.some(function (n) {
	        n.__h && (n.__h = []);
	      }), u = [], l$1.__e(r, t.__v);
	    }
	  }), v && v(t, u);
	}, l$1.unmount = function (t) {
	  l && l(t);
	  var u,
	      r = t.__c;
	  r && r.__H && (r.__H.__.forEach(function (n) {
	    try {
	      j$1(n);
	    } catch (n) {
	      u = n;
	    }
	  }), u && l$1.__e(u, r.__v));
	};
	var g$1 = "function" == typeof requestAnimationFrame;

	function j$1(n) {
	  var t = u,
	      r = n.__c;
	  "function" == typeof r && (n.__c = void 0, r()), u = t;
	}

	function k(n) {
	  var t = u;
	  n.__c = n.__(), u = t;
	}

	function w$1(n, t) {
	  return !n || n.length !== t.length || t.some(function (t, u) {
	    return t !== n[u];
	  });
	}

	function z$1(n, t) {
	  return "function" == typeof t ? t(n) : t;
	}

	function toVal(mix) {
	  var k,
	      y,
	      str = '';

	  if (typeof mix === 'string' || typeof mix === 'number') {
	    str += mix;
	  } else if (typeof mix === 'object') {
	    if (Array.isArray(mix)) {
	      for (k = 0; k < mix.length; k++) {
	        if (mix[k]) {
	          if (y = toVal(mix[k])) {
	            str && (str += ' ');
	            str += y;
	          }
	        }
	      }
	    } else {
	      for (k in mix) {
	        if (mix[k]) {
	          str && (str += ' ');
	          str += k;
	        }
	      }
	    }
	  }

	  return str;
	}

	function clsx () {
	  var i = 0,
	      tmp,
	      x,
	      str = '';

	  while (i < arguments.length) {
	    if (tmp = arguments[i++]) {
	      if (x = toVal(tmp)) {
	        str && (str += ' ');
	        str += x;
	      }
	    }
	  }

	  return str;
	}

	function getDocument(element) {
	  var _ref, _ref2, _element$ownerDocumen;

	  return (_ref = (_ref2 = (_element$ownerDocumen = element === null || element === void 0 ? void 0 : element.ownerDocument) !== null && _element$ownerDocumen !== void 0 ? _element$ownerDocumen : document) !== null && _ref2 !== void 0 ? _ref2 : window.document) !== null && _ref !== void 0 ? _ref : globalThis.document;
	}

	/**
	 * Debug hook.
	 *
	 * Given a value or set of values, emits a console error if any of them change from one render to the next.
	 *
	 * Eventually, when useEvent lands, we hopefully won't need this.
	 */

	function useEnsureStability(parentHookName) {
	  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    values[_key - 1] = arguments[_key];
	  }

	  useHelper(values.length, 0);
	  values.forEach(useHelper);
	  return;

	  function useHelper(value, index) {
	    // Make sure that the provided functions are perfectly stable across renders
	    const helperToEnsureStability = s(value);
	    const shownError = s(false);

	    if (helperToEnsureStability.current != value) {
	      if (!shownError.current) {
	        /* eslint-disable no-debugger */
	        debugger;
	        console.error(`The hook ${parentHookName} requires some or all of its arguments remain stable across each render; please check the ${index}-indexed argument.`);
	        shownError.current = true;
	      }
	    }
	  }
	}
	/**
	 * Similar to `useState`, but for values that aren't "render-important" &ndash; updates don't cause a re-render and so the value shouldn't be used during render (though it certainly can, at least by re-rendering again).
	 *
	 * To compensate for this, you should pass a `useEffect`-esque callback that is run whenever the value changes.  Just like `useEffect`, this callback can return a cleanup function that's run before the value changes.  If you would like to re-render when the value changes (or, say, when the value meets some criteria), this is where you'll want to put in a call to a `setState` function.
	 *
	 * To summarize, it's like a `useState`-`useEffect` mashup:
	 *
	 * 1. It's like `useState`, except this version of `setState` doesn't re-render the whole component
	 * 2. It's like `useState`, except you can run a function when the value changes that optionally returns a cleanup function
	 * 3. It's like `useEffect`, except you trigger the effect function "remotely" instead of it running after rendering
	 * 4. It's like `useEffect`, except the single "dependency" is based on your calls to `setState`
	 *
	 * Note that while calling `setState` doesn't cause any re-renders, you can do that within your `onChange` function, called whenever the value changes via that `setState`.
	 *
	 * @param onChange The "effect" function to run when the value changes. Effectively the same as `useEffect`'s "effect" function.  MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.
	 * @param getInitialValue If provided, the effect will be invoked once with this value on mount. MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.
	 * @returns
	 */

	function usePassiveState(onChange, getInitialValue) {
	  const valueRef = s(Unset$1);
	  const warningRef = s(false);
	  const cleanupCallbackRef = s(undefined); // Make sure that the provided functions are perfectly stable across renders

	  useEnsureStability("usePassiveState", onChange, getInitialValue); // Shared between "dependency changed" and "component unmounted".

	  const onShouldCleanUp = F(() => {
	    const cleanupCallback = cleanupCallbackRef.current;
	    if (cleanupCallback) cleanupCallback();
	  }, []); // There are a couple places where we'd like to use our initial
	  // value in place of having no value at all yet.
	  // This is the shared code for that, used on mount and whenever
	  // getValue is called.

	  const tryEnsureValue = F(() => {
	    if (valueRef.current === Unset$1 && getInitialValue != undefined) {
	      try {
	        var _onChange;

	        const initialValue = getInitialValue();
	        valueRef.current = initialValue;
	        cleanupCallbackRef.current = (_onChange = onChange === null || onChange === void 0 ? void 0 : onChange(initialValue, undefined)) !== null && _onChange !== void 0 ? _onChange : undefined;
	      } catch (ex) {// Exceptions are intentional to allow bailout (without exposing the Unset symbol)
	      }
	    }
	  }, [
	    /* getInitialValue and onChange intentionally omitted */
	  ]);
	  const getValue = F(() => {
	    if (warningRef.current) console.warn("During onChange, prefer using the (value, prevValue) arguments instead of getValue -- it's ambiguous as to if you're asking for the old or new value at this point in time for this component."); // The first time we call getValue, if we haven't been given a value yet,
	    // (and we were given an initial value to use)
	    // return the initial value instead of nothing.

	    if (valueRef.current === Unset$1) tryEnsureValue();
	    return valueRef.current === Unset$1 ? undefined : valueRef.current;
	  }, []);
	  h(() => {
	    // Make sure we've run our effect at least once on mount.
	    // (If we have an initial value, of course)
	    tryEnsureValue();
	  }, []); // The actual code the user calls to (possibly) run a new effect.

	  const setValue = F(arg => {
	    const prevDep = valueRef.current === Unset$1 ? undefined : getValue();
	    const dep = arg instanceof Function ? arg(prevDep) : arg;

	    if (dep !== valueRef.current) {
	      var _onChange2;

	      // Indicate to the user that they shouldn't call getValue during onChange
	      warningRef.current = true; // Call any registerd cleanup function

	      onShouldCleanUp();
	      cleanupCallbackRef.current = (_onChange2 = onChange === null || onChange === void 0 ? void 0 : onChange(dep, prevDep)) !== null && _onChange2 !== void 0 ? _onChange2 : undefined;
	      valueRef.current = dep; // Allow the user to normally call getValue again

	      warningRef.current = false;
	    }
	  }, []);
	  return [getValue, setValue];
	}
	const Unset$1 = Symbol(); // Easy constants for getInitialValue

	function returnTrue() {
	  return true;
	}
	function returnFalse$1() {
	  return false;
	}
	function returnNull$1() {
	  return null;
	}

	function useMergedChildren(lhsProps, rhsProps) {
	  const lhs = lhsProps === null || lhsProps === void 0 ? void 0 : lhsProps.children;
	  const rhs = rhsProps === null || rhsProps === void 0 ? void 0 : rhsProps.children;

	  if (lhs == null && rhs == null) {
	    return undefined;
	  } else if (lhs == null) {
	    return rhs;
	  } else if (rhs == null) {
	    return lhs;
	  } else {
	    const ret = v$1(d$1, {}, lhs, rhs);
	    return ret;
	  }
	}

	/**
	 * Given two sets of props, merges their `class` and `className` properties.
	 * Duplicate classes are removed (order doesn't matter anyway).
	 *
	 * @param lhs Classes of the first component
	 * @param rhs Classes of the second component
	 * @returns A string representing all combined classes from both arguments.
	 */

	function useMergedClasses(lhs, rhs) {
	  // Note: For the sake of forward compatibility, this function is labelled as
	  // a hook, but as it uses no other hooks it technically isn't one.
	  return mergeClasses(lhs, rhs);
	}

	function mergeClasses(lhs, rhs) {
	  const lhsClass = lhs === null || lhs === void 0 ? void 0 : lhs.class;
	  const lhsClassName = lhs === null || lhs === void 0 ? void 0 : lhs.className;
	  const rhsClass = rhs === null || rhs === void 0 ? void 0 : rhs.class;
	  const rhsClassName = rhs === null || rhs === void 0 ? void 0 : rhs.className;

	  if (lhsClass || rhsClass || lhsClassName || rhsClassName) {
	    const lhsClasses = clsx(lhsClass, lhsClassName).split(" ");
	    const rhsClasses = clsx(rhsClass, rhsClassName).split(" ");
	    const allClasses = new Set([...Array.from(lhsClasses), ...Array.from(rhsClasses)]);
	    return Array.from(allClasses).join(" ");
	  } else {
	    return undefined;
	  }
	}

	function processRef(instance, ref) {
	  if (typeof ref === "function") {
	    ref(instance);
	  } else if (ref != null) {
	    ref.current = instance;
	  } else {
	    /* eslint-disable no-debugger */
	    debugger;
	    console.assert(false, "Unknown ref type found that was neither a RefCallback nor a RefObject");
	  }
	}
	/**
	 * Combines two refs into one. This allows a component to both use its own ref *and* forward a ref that was given to it.
	 * @param lhs
	 * @param rhs
	 * @returns
	 */


	function useMergedRefs() {
	  return function (lhsProps, rhsProps) {
	    const lhs = lhsProps === null || lhsProps === void 0 ? void 0 : lhsProps.ref;
	    const rhs = rhsProps === null || rhsProps === void 0 ? void 0 : rhsProps.ref;
	    const combined = F(current => {
	      processRef(current, lhs);
	      processRef(current, rhs);
	    }, [lhs, rhs]);

	    if (lhs == null && rhs == null) {
	      return undefined;
	    } else if (lhs == null) {
	      return rhs;
	    } else if (rhs == null) {
	      return lhs;
	    } else {
	      return combined;
	    }
	  };
	}

	function styleStringToObject(style) {
	  // TODO: This sucks D:
	  return Object.fromEntries(style.split(";").map(statement => statement.split(":")));
	}
	/**
	 * Merges two style objects, returning the result.
	 *
	 * @param style The user-given style prop for this component
	 * @param obj The CSS properties you want added to the user-given style
	 * @returns A CSS object containing the properties of both objects.
	 */


	function useMergedStyles(lhs, rhs) {
	  var _lhs$style, _rhs$style2;

	  // Easy case, when there are no styles to merge return nothing.
	  if (!(lhs !== null && lhs !== void 0 && lhs.style) && !(rhs !== null && rhs !== void 0 && rhs.style)) return undefined;

	  if (typeof lhs != typeof rhs) {
	    // Easy cases, when one is null and the other isn't.
	    if (lhs !== null && lhs !== void 0 && lhs.style && !(rhs !== null && rhs !== void 0 && rhs.style)) return lhs.style;
	    if (!(lhs !== null && lhs !== void 0 && lhs.style) && rhs !== null && rhs !== void 0 && rhs.style) return rhs.style; // They're both non-null but different types.
	    // Convert the string type to an object bag type and run it again.

	    if (lhs !== null && lhs !== void 0 && lhs.style && rhs !== null && rhs !== void 0 && rhs.style) {
	      // (useMergedStyles isn't a true hook -- this isn't a violation)
	      if (typeof (lhs === null || lhs === void 0 ? void 0 : lhs.style) == "string") return useMergedStyles({
	        style: styleStringToObject(lhs === null || lhs === void 0 ? void 0 : lhs.style)
	      }, rhs);
	      if (typeof (rhs === null || rhs === void 0 ? void 0 : rhs.style) == "string") return useMergedStyles(lhs, {
	        style: styleStringToObject(rhs === null || rhs === void 0 ? void 0 : rhs.style)
	      });
	    } // Logic???


	    return undefined;
	  } // They're both strings, just concatenate them.


	  if (typeof (lhs === null || lhs === void 0 ? void 0 : lhs.style) == "string") {
	    var _rhs$style;

	    return `${lhs.style};${(_rhs$style = rhs === null || rhs === void 0 ? void 0 : rhs.style) !== null && _rhs$style !== void 0 ? _rhs$style : ""}`;
	  } // They're both objects, just merge them.


	  return { ...((_lhs$style = lhs === null || lhs === void 0 ? void 0 : lhs.style) !== null && _lhs$style !== void 0 ? _lhs$style : {}),
	    ...((_rhs$style2 = rhs === null || rhs === void 0 ? void 0 : rhs.style) !== null && _rhs$style2 !== void 0 ? _rhs$style2 : {})
	  };
	}

	let log = console.warn;
	/**
	 * Given two sets of props, merges them and returns the result.
	 *
	 * The hook is aware of and can intelligently merge `className`, `class`, `style`, `ref`, and all event handlers.
	 * @param lhs2
	 * @param rhs2
	 * @returns
	 */

	function useMergedProps() {
	  return function (lhsAll, rhsAll) {
	    // First, separate the props we were given into two groups:
	    // lhsAll and rhsAll contain all the props we were given, and
	    // lhsMisc and rhsMisc contain all props *except* for the easy ones
	    // like className and style that we already know how to merge.
	    const {
	      children: _lhsChildren,
	      class: _lhsClass,
	      className: _lhsClassName,
	      style: _lhsStyle,
	      ref: _lhsRef,
	      ...lhsMisc
	    } = lhsAll;
	    const {
	      children: _rhsChildren,
	      class: _rhsClass,
	      className: _rhsClassName,
	      style: _rhsStyle,
	      ref: _rhsRef,
	      ...rhsMisc
	    } = rhsAll;
	    const ret = { ...lhsMisc,
	      ref: useMergedRefs()(lhsAll, rhsAll),
	      style: useMergedStyles(lhsAll, rhsAll),
	      className: useMergedClasses(lhsAll, rhsAll),
	      children: useMergedChildren(lhsAll, rhsAll)
	    };
	    if (ret.ref === undefined) delete ret.ref;
	    if (ret.style === undefined) delete ret.style;
	    if (ret.className === undefined) delete ret.className;
	    if (ret.children === undefined) delete ret.children; // Now, do *everything* else
	    // Merge every remaining existing entry in lhs with what we've already put in ret.
	    //const lhsEntries = Object.entries(lhs) as [keyof T, T[keyof T]][];

	    const rhsEntries = Object.entries(rhsMisc);

	    for (const [rhsKey, rhsValue] of rhsEntries) {
	      const lhsValue = lhsMisc[rhsKey];

	      if (typeof lhsValue === "function" || typeof rhsValue === "function") {
	        // They're both functions that can be merged (or one's a function and the other's null).
	        // Not an *easy* case, but a well-defined one.
	        const merged = mergeFunctions(lhsValue, rhsValue);
	        ret[rhsKey] = merged;
	      } else {
	        // Uh...we're here because one of them's null, right?
	        if (lhsValue == null && rhsValue == null) {
	          if (rhsValue === null && lhsValue === undefined) ret[rhsKey] = rhsValue;else ret[rhsKey] = lhsValue;
	        }

	        if (lhsValue == null) ret[rhsKey] = rhsValue;else if (rhsValue == null) ret[rhsKey] = lhsValue;else if (rhsValue == lhsValue) ; else {
	          var _log;

	          // Ugh.
	          // No good strategies here, just log it if requested
	          (_log = log) === null || _log === void 0 ? void 0 : _log(`The prop "${typeof rhsKey == "symbol" ? "<symbol>" : rhsKey}" cannot simultaneously be the values ${lhsValue} and ${rhsValue}. One must be chosen outside of useMergedProps.`);
	          ret[rhsKey] = rhsValue;
	        }
	      }
	    }

	    return ret;
	  };
	}

	function mergeFunctions(lhs, rhs) {
	  if (!lhs) return rhs;
	  if (!rhs) return lhs;
	  return function () {
	    const lv = lhs(...arguments);
	    const rv = rhs(...arguments);
	    if (lv instanceof Promise || rv instanceof Promise) return Promise.all([lv, rv]);
	  };
	}
	/*
	function test<P extends h.JSX.HTMLAttributes<HTMLInputElement>>(props: P) {

	    const id0: GenericGet<{}, "id", string> = "";
	    const id3: GenericGet<{ id: undefined }, "id", string> = undefined;
	    const id4: GenericGet<{ id: undefined }, "id", string> = undefined;
	    const id5: GenericGet<{ id: undefined }, "id", string> = undefined;
	    const id6: GenericGet<{ id: undefined }, "id", string> = undefined;
	    //const id2: ZipSingle<string | undefined, string | undefined> = undefined;
	    const id1: ZipObject<{ id: undefined }, { id: string }> = { id: undefined };

	    type M1 = GenericGet<P, "style", string>;
	    type M2 = GenericGet<{}, "style", string>;
	    const m1: M1 = "";
	    const m2: M1 = undefined;
	    /// @ts-expect-error    Because number isn't assignable to string
	    const m3: M1 = 0;

	    const m4: M2 = "";
	    const m5: M2 = undefined;
	    /// @ts-expect-error    Because number isn't assignable to string
	    const m6: M2 = 0;

	    const p1: MergedProps<HTMLInputElement, {}, { id: string }> = useMergedProps<HTMLInputElement>()({}, { id: "string" });
	    const p2: MergedProps<HTMLInputElement, { id: undefined }, { id: string }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: "string" });
	    const p3: MergedProps<HTMLInputElement, { id: undefined }, { id: undefined }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: undefined });
	    const p4: MergedProps<HTMLInputElement, {}, {}> = useMergedProps<HTMLInputElement>()({}, {});
	    const p5 = useMergedProps<HTMLInputElement>()(props, {});
	    const p6 = useMergedProps<HTMLInputElement>()(props, { id: undefined });
	    const p7 = useMergedProps<HTMLInputElement>()(props, { id: "string" });


	    p1.id?.concat("");
	    p2.id?.concat("");
	    /// @ts-expect-error    id can't be anything but undefined
	    p3.id?.concat("");
	    /// @ts-expect-error    id can't be anything but undefined
	    p4.id?.concat("");


	    p5.id?.concat("");
	    p6.id?.concat("");
	    p7.id?.concat("");

	    /// @ts-expect-error    id must contain undefined
	    p5.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    p6.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    p7.id.concat("");


	    if (p5.allowFullScreen === undefined) {}
	    else if (p5.allowFullScreen === false) {}
	    else if (p5.allowFullScreen === true) {}
	    else {
	        acceptsNever(p5.allowFullScreen);
	    }


	    if (p6.allowFullScreen === undefined) {}
	    else if (p6.allowFullScreen === false) {}
	    else if (p6.allowFullScreen === true) {}
	    else {
	        acceptsNever(p6.allowFullScreen);
	    }


	    if (p7.allowFullScreen === undefined) {}
	    else if (p7.allowFullScreen === false) {}
	    else if (p7.allowFullScreen === true) {}
	    else {
	        acceptsNever(p7.allowFullScreen);
	    }


	    // Make sure it works recursively
	    const r1a = useMergedProps<HTMLInputElement>()({}, p1);
	    const r1b = useMergedProps<HTMLInputElement>()(props, p1);
	    const r2a = useMergedProps<HTMLInputElement>()({}, p2);
	    const r2b = useMergedProps<HTMLInputElement>()(props, p2);
	    const r3a = useMergedProps<HTMLInputElement>()({}, p3);
	    const r3b = useMergedProps<HTMLInputElement>()(props, p3);
	    const r4a = useMergedProps<HTMLInputElement>()({}, p4);
	    const r4b = useMergedProps<HTMLInputElement>()(props, p4);
	    const r5a = useMergedProps<HTMLInputElement>()({}, p5);
	    const r5b = useMergedProps<HTMLInputElement>()(props, p5);
	    const r6a = useMergedProps<HTMLInputElement>()({}, p6);
	    const r6b = useMergedProps<HTMLInputElement>()(props, p6);
	    const r7a = useMergedProps<HTMLInputElement>()({}, p7);
	    const r7b = useMergedProps<HTMLInputElement>()(props, p7);


	    r1a.id?.concat("");
	    r1b.id?.concat("");
	    r2a.id?.concat("");
	    r2b.id?.concat("");
	    // @ts-expect-error    id can't be anything but undefined
	    r3a.id?.concat("");
	    r3b.id?.concat("");
	    /// @ts-expect-error    id can't be anything but undefined
	    r4a.id?.concat("");
	    r4b.id?.concat("");


	    r5a.id?.concat("");
	    r5b.id?.concat("");
	    r6a.id?.concat("");
	    r6b.id?.concat("");
	    r7a.id?.concat("");
	    r7b.id?.concat("");

	    /// @ts-expect-error    id must contain undefined
	    r5a.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r5b.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r6a.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r6b.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r7a.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r7b.id.concat("");


	    if (r5a.allowFullScreen === undefined) {}
	    else if (r5a.allowFullScreen === false) {}
	    else if (r5a.allowFullScreen === true) {}
	    else {
	        acceptsNever(r5a.allowFullScreen);
	    }


	    if (r5b.allowFullScreen === undefined) {}
	    else if (r5b.allowFullScreen === false) {}
	    else if (r5b.allowFullScreen === true) {}
	    else {
	        acceptsNever(r5b.allowFullScreen);
	    }


	    if (r6a.allowFullScreen === undefined) {}
	    else if (r6a.allowFullScreen === false) {}
	    else if (r6a.allowFullScreen === true) {}
	    else {
	        acceptsNever(r6a.allowFullScreen);
	    }


	    if (r6b.allowFullScreen === undefined) {}
	    else if (r6b.allowFullScreen === false) {}
	    else if (r6b.allowFullScreen === true) {}
	    else {
	        acceptsNever(r6b.allowFullScreen);
	    }


	    if (r7a.allowFullScreen === undefined) {}
	    else if (r7a.allowFullScreen === false) {}
	    else if (r7a.allowFullScreen === true) {}
	    else {
	        acceptsNever(r7a.allowFullScreen);
	    }


	    if (r7b.allowFullScreen === undefined) {}
	    else if (r7b.allowFullScreen === false) {}
	    else if (r7b.allowFullScreen === true) {}
	    else {
	        acceptsNever(r7b.allowFullScreen);
	    }

	}
	function acceptsNever(n: never) {}
	*/

	function returnNull() {
	  return null;
	}
	/**
	 * Allows accessing the element a ref references as soon as it does so.
	 * *This hook itself returns a hook*--useRefElementProps modifies the props that you were going to pass to an HTMLElement,
	 * adding a RefCallback and merging it with any existing ref that existed on the props.
	 *
	 * Don't forget to provide the Element as the type argument!
	 *
	 * @returns The element, and the sub-hook that makes it retrievable.
	 */


	function useRefElement(args) {
	  const {
	    onElementChange,
	    onMount,
	    onUnmount
	  } = args !== null && args !== void 0 ? args : {};
	  useEnsureStability("useRefElement", onElementChange, onMount, onUnmount); // Called (indirectly) by the ref that the element receives.

	  const handler = F((e, prevValue) => {
	    onElementChange === null || onElementChange === void 0 ? void 0 : onElementChange(e, prevValue);
	    if (prevValue) onUnmount === null || onUnmount === void 0 ? void 0 : onUnmount(prevValue);
	    if (e) onMount === null || onMount === void 0 ? void 0 : onMount(e);
	  }, []); // Let us store the actual (reference to) the element we capture

	  const [getElement, setElement] = usePassiveState(handler, returnNull); // Create a RefCallback that's fired when mounted 
	  // and that notifies us of our element when we have it

	  const myRef = F(e => {
	    if (e) setElement(() => e);
	  }, []);
	  const useRefElementProps = F(props => useMergedProps()({
	    ref: myRef
	  }, props), []); // Return both the element and the hook that modifies 
	  // the props and allows us to actually find the element

	  return {
	    useRefElementProps,
	    getElement
	  };
	}

	function useElementSize(_ref) {
	  let {
	    getObserveBox,
	    onSizeChange
	  } = _ref;
	  useEnsureStability("useElementSize", getObserveBox, onSizeChange);
	  const [getSize, setSize] = usePassiveState(onSizeChange, returnNull$1);
	  const currentObserveBox = s(undefined);
	  const needANewObserver = F((element, observeBox) => {
	    if (element) {
	      const document = getDocument(element);
	      const window = document.defaultView;

	      const handleUpdate = () => {
	        if (element.isConnected) {
	          const {
	            clientWidth,
	            scrollWidth,
	            offsetWidth,
	            clientHeight,
	            scrollHeight,
	            offsetHeight,
	            clientLeft,
	            scrollLeft,
	            offsetLeft,
	            clientTop,
	            scrollTop,
	            offsetTop
	          } = element;
	          setSize({
	            clientWidth,
	            scrollWidth,
	            offsetWidth,
	            clientHeight,
	            scrollHeight,
	            offsetHeight,
	            clientLeft,
	            scrollLeft,
	            offsetLeft,
	            clientTop,
	            scrollTop,
	            offsetTop
	          });
	        }
	      };

	      if (window && "ResizeObserver" in window) {
	        const observer = new ResizeObserver(_entries => {
	          handleUpdate();
	        });
	        observer.observe(element, {
	          box: observeBox
	        });
	        return () => observer.disconnect();
	      } else {
	        document.addEventListener("resize", handleUpdate, {
	          passive: true
	        });
	        return () => document.removeEventListener("resize", handleUpdate);
	      }
	    }
	  }, []);
	  const {
	    getElement,
	    useRefElementProps
	  } = useRefElement({
	    onElementChange: F(e => needANewObserver(e, getObserveBox === null || getObserveBox === void 0 ? void 0 : getObserveBox()), [])
	  });
	  y(() => {
	    if (getObserveBox) {
	      if (currentObserveBox.current !== getObserveBox()) needANewObserver(getElement(), getObserveBox());
	    }
	  });
	  return {
	    getElement,
	    getSize,
	    useElementSizeProps: useRefElementProps
	  };
	}

	function capitalize(str) {
	  return str[0].toUpperCase() + str.substr(1);
	}
	/**
	 * Inspects the element's style and determines the logical direction that text flows.
	 *
	 * Certain CSS properties, like `block-size`, respect the current writing mode and text direction.
	 * But `transform`, `clip`, etc. don't.
	 *
	 * This is provided so that CSS properties can consistently use those logical properties.
	 *
	 * See https://drafts.csswg.org/css-writing-modes/#logical-to-physical
	 *
	 * @returns An object containing the following functions:
	 * * `getLogicalDirection`: retrieves a `LogicalDirectionInfo` representing the current state of the element. (Function is constant between renders)
	 * * `convertElementSize`: When used in conjunction with `useElementSize`, allows you to retrieve the logical size of an element instead of the physical size.
	 * * `convertToLogicalOrientation`: Based on the current direction, converts "horizontal" or "vertical" to "inline" or "block".
	 * * `convertToPhysicalOrientation`:  Based on the current direction, converts "inline" or "block" to "horizontal" or "vertical".
	 */


	function useLogicalDirection(_ref) {
	  let {
	    onLogicalDirectionChange
	  } = _ref;
	  useEnsureStability("useLogicalDirection", onLogicalDirectionChange);
	  const [getComputedStyles, setComputedStyles] = usePassiveState(null, returnNull$1);
	  const {
	    getElement,
	    useRefElementProps
	  } = useRefElement({
	    onElementChange: F(element => {
	      if (element) {
	        setComputedStyles(window.getComputedStyle(element));
	      }
	    }, [])
	  }); // TODO: There's no way to refresh which writing mode we have once mounted.
	  //   A. There's no way to watch for CSS style changes
	  //   B. Calling getComputedStyle after every render for every element gets expensive fast and
	  //   C. Is not necessary for most use cases that will never switch writing-mode within a single component
	  //      (Those that do will need to mount and unmount the component that uses it)
	  //
	  // As a solution, here's a cheap workaround that checks when the element's size has changed,
	  // and if so, tests if the writing mode has changed too.
	  //
	  // This will work for at least some number of cases, but a better solution is still needed.

	  const {
	    useElementSizeProps
	  } = useElementSize({
	    onSizeChange: F(_ => onLogicalDirectionChange === null || onLogicalDirectionChange === void 0 ? void 0 : onLogicalDirectionChange(getLogicalDirectionInfo()), [])
	  });
	  const getLogicalDirectionInfo = F(() => {
	    const computedStyles = getComputedStyles();

	    if (computedStyles) {
	      const w = computedStyles.writingMode;
	      let d = computedStyles.direction;
	      const t = computedStyles.textOrientation;
	      if (t == "upright") d = "ltr";
	      return { ...WritingModes[w || "horizontal-tb"][d || "ltr"]
	      };
	    }

	    return null;
	  }, []); //const [getLogicalDirectionInfo, setLogicalDirectionInfo] = usePassiveState<LogicalDirectionInfo>(onLogicalDirectionChange);

	  const convertToLogicalOrientation = F((elementOrientation, direction) => {
	    var _direction, _direction2;

	    (_direction = direction) !== null && _direction !== void 0 ? _direction : direction = getLogicalDirectionInfo();
	    if (((_direction2 = direction) === null || _direction2 === void 0 ? void 0 : _direction2.inlineOrientation) === elementOrientation) return "inline";
	    return "block";
	  }, []);
	  const convertToPhysicalSide = F((side, direction) => {
	    var _direction3, _direction$blockDirec, _direction4, _direction$blockDirec2, _direction5, _direction$inlineDire, _direction6, _direction$inlineDire2, _direction7;

	    (_direction3 = direction) !== null && _direction3 !== void 0 ? _direction3 : direction = getLogicalDirectionInfo();

	    switch (side) {
	      case "block-start":
	        return M$1[((_direction$blockDirec = (_direction4 = direction) === null || _direction4 === void 0 ? void 0 : _direction4.blockDirection) !== null && _direction$blockDirec !== void 0 ? _direction$blockDirec : "ttb")[0]];

	      case "block-end":
	        return M$1[((_direction$blockDirec2 = (_direction5 = direction) === null || _direction5 === void 0 ? void 0 : _direction5.blockDirection) !== null && _direction$blockDirec2 !== void 0 ? _direction$blockDirec2 : "ttb")[2]];

	      case "inline-start":
	        return M$1[((_direction$inlineDire = (_direction6 = direction) === null || _direction6 === void 0 ? void 0 : _direction6.inlineDirection) !== null && _direction$inlineDire !== void 0 ? _direction$inlineDire : "ltr")[0]];

	      case "inline-end":
	        return M$1[((_direction$inlineDire2 = (_direction7 = direction) === null || _direction7 === void 0 ? void 0 : _direction7.inlineDirection) !== null && _direction$inlineDire2 !== void 0 ? _direction$inlineDire2 : "ltr")[2]];
	    }
	  }, []);
	  const convertToLogicalSide = F((side, direction) => {
	    var _direction8, _direction9, _direction10;

	    (_direction8 = direction) !== null && _direction8 !== void 0 ? _direction8 : direction = getLogicalDirectionInfo();

	    if (((_direction9 = direction) === null || _direction9 === void 0 ? void 0 : _direction9.inlineOrientation) === "vertical") {
	      switch (side) {
	        case "top":
	          return direction.inlineDirection === "ttb" ? "inline-start" : "inline-end";

	        case "bottom":
	          return direction.inlineDirection === "btt" ? "inline-start" : "inline-end";

	        case "left":
	          return direction.blockDirection === "ltr" ? "block-start" : "block-end";

	        case "right":
	          return direction.blockDirection === "rtl" ? "block-start" : "block-end";
	      }
	    } else if (((_direction10 = direction) === null || _direction10 === void 0 ? void 0 : _direction10.inlineOrientation) === "horizontal") {
	      switch (side) {
	        case "top":
	          return direction.blockDirection === "ttb" ? "block-start" : "block-end";

	        case "bottom":
	          return direction.blockDirection === "btt" ? "block-start" : "block-end";

	        case "left":
	          return direction.inlineDirection === "ltr" ? "inline-start" : "inline-end";

	        case "right":
	          return direction.inlineDirection === "rtl" ? "inline-start" : "inline-end";
	      }
	    }
	    /* eslint-disable no-debugger */


	    debugger;
	    console.assert(false);
	    return "inline-start";
	  }, []);
	  const convertToPhysicalOrientation = F((elementOrientation, direction) => {
	    var _direction11;

	    (_direction11 = direction) !== null && _direction11 !== void 0 ? _direction11 : direction = getLogicalDirectionInfo();

	    if (elementOrientation == "inline") {
	      var _direction12;

	      if (((_direction12 = direction) === null || _direction12 === void 0 ? void 0 : _direction12.inlineOrientation) == "horizontal") return "horizontal";
	      return "vertical";
	    } else {
	      var _direction13;

	      if (((_direction13 = direction) === null || _direction13 === void 0 ? void 0 : _direction13.blockOrientation) == "vertical") return "vertical";
	      return "horizontal";
	    }
	  }, []);
	  const convertElementSize = F((elementSize, direction) => {
	    var _direction14;

	    (_direction14 = direction) !== null && _direction14 !== void 0 ? _direction14 : direction = getLogicalDirectionInfo();

	    if (direction) {
	      const {
	        inlineSize,
	        blockSize,
	        inlineDirection,
	        blockDirection
	      } = direction; // Size is relatively simple

	      const clientInlineSize = elementSize[`client${capitalize(inlineSize)}`];
	      const clientBlockSize = elementSize[`client${capitalize(blockSize)}`];
	      const offsetInlineSize = elementSize[`offset${capitalize(inlineSize)}`];
	      const offsetBlockSize = elementSize[`offset${capitalize(blockSize)}`];
	      const scrollInlineSize = elementSize[`scroll${capitalize(inlineSize)}`];
	      const scrollBlockSize = elementSize[`scroll${capitalize(blockSize)}`];
	      const f1 = getPhysicalLeftTop(inlineDirection);
	      const f2 = getPhysicalRightBottom(inlineDirection);
	      const f3 = getPhysicalLeftTop(blockDirection);
	      const f4 = getPhysicalRightBottom(blockDirection);
	      const clientInlineInset = elementSize[`client${capitalize(f1)}`] + (!f2 ? 0 : elementSize[`client${capitalize(f2)}`]);
	      const scrollInlineInset = elementSize[`scroll${capitalize(f1)}`] + (!f2 ? 0 : elementSize[`scroll${capitalize(f2)}`]);
	      const offsetInlineInset = elementSize[`offset${capitalize(f1)}`] == undefined ? undefined : elementSize[`offset${capitalize(f1)}`] + (!f2 ? 0 : elementSize[`offset${capitalize(f2)}`]);
	      const clientBlockInset = elementSize[`client${capitalize(f3)}`] + (!f4 ? 0 : elementSize[`client${capitalize(f4)}`]);
	      const scrollBlockInset = elementSize[`scroll${capitalize(f3)}`] + (!f4 ? 0 : elementSize[`scroll${capitalize(f4)}`]);
	      const offsetBlockInset = elementSize[`offset${capitalize(f3)}`] == undefined ? undefined : elementSize[`offset${capitalize(f3)}`] + (!f4 ? 0 : elementSize[`offset${capitalize(f4)}`]);
	      return {
	        clientInlineSize,
	        scrollInlineSize,
	        offsetInlineSize,
	        clientBlockSize,
	        scrollBlockSize,
	        offsetBlockSize,
	        clientInlineInset,
	        scrollInlineInset,
	        offsetInlineInset,
	        clientBlockInset,
	        scrollBlockInset,
	        offsetBlockInset
	      };
	    }

	    return null;
	  }, []);
	  return {
	    useLogicalDirectionProps: F(props => useRefElementProps(useElementSizeProps(props)), []),
	    getElement,
	    getLogicalDirectionInfo,
	    convertToLogicalSize: convertElementSize,
	    convertToLogicalOrientation,
	    convertToPhysicalOrientation,
	    convertToLogicalSide,
	    convertToPhysicalSide
	  };
	} // Position requires us to sometimes use one property (like `left`)
	// or sometimes two (like `left` + `width`)

	function getPhysicalLeftTop(dir) {
	  if (dir === "ltr" || dir == "rtl") return "left";
	  return "top";
	}

	function getPhysicalRightBottom(dir) {
	  if (dir === "rtl") return "width";
	  if (dir === "btt") return "height";
	  return null;
	} // Helper for extracting info from "ltr", "ttb", etc.


	const M$1 = {
	  t: "top",
	  b: "bottom",
	  l: "left",
	  r: "right"
	};
	const HorizontalTbLtr = {
	  inlineDirection: "ltr",
	  blockDirection: "ttb",
	  inlineOrientation: "horizontal",
	  blockOrientation: "vertical",
	  inlineSize: "width",
	  blockSize: "height",
	  leftRightDirection: "ltr",
	  overUnderDirection: "ttb"
	};
	const HorizontalTbRtl = { ...HorizontalTbLtr,
	  inlineDirection: "rtl"
	};
	const VerticalRlLtr = {
	  inlineDirection: "ttb",
	  blockDirection: "rtl",
	  inlineOrientation: "vertical",
	  blockOrientation: "horizontal",
	  inlineSize: "height",
	  blockSize: "width",
	  leftRightDirection: "ttb",
	  overUnderDirection: "rtl"
	};
	const VerticalRlRtl = { ...VerticalRlLtr,
	  inlineDirection: "btt"
	};
	const SidewaysRlLtr = { ...VerticalRlLtr
	};
	const SidewaysRlRtl = { ...VerticalRlRtl
	};
	const VerticalLrLtr = { ...VerticalRlLtr,
	  blockDirection: "ltr"
	};
	const VerticalLrRtl = { ...VerticalRlRtl,
	  blockDirection: "ltr"
	};
	const SidewaysLtLtr = { ...VerticalLrLtr,
	  inlineDirection: "btt",
	  leftRightDirection: "btt",
	  overUnderDirection: "ltr"
	};
	const SidewaysLtRtl = { ...SidewaysLtLtr,
	  inlineDirection: "ttb"
	};
	const HorizontalTb = {
	  ltr: HorizontalTbLtr,
	  rtl: HorizontalTbRtl
	};
	const VerticalRl = {
	  ltr: VerticalRlLtr,
	  rtl: VerticalRlRtl
	};
	const VerticalLr = {
	  ltr: VerticalLrLtr,
	  rtl: VerticalLrRtl
	};
	const SidewaysRl = {
	  ltr: SidewaysRlLtr,
	  rtl: SidewaysRlRtl
	};
	const SidewaysLr = {
	  ltr: SidewaysLtLtr,
	  rtl: SidewaysLtRtl
	};
	const WritingModes = {
	  "horizontal-tb": HorizontalTb,
	  "vertical-lr": VerticalLr,
	  "vertical-rl": VerticalRl,
	  "sideways-lr": SidewaysLr,
	  "sideways-rl": SidewaysRl
	};

	/**
	 * Slightly enhanced version of `useState` that includes a getter that remains constant
	 * (i.e. you can use it in `useEffect` and friends without it being a dependency).
	 *
	 * @param initialState
	 * @returns
	 */

	function useState(initialState) {
	  // We keep both, but overrride the `setState` functionality
	  const [state, setStateP] = d(initialState);
	  const ref = s(state); // Hijack the normal setter function 
	  // to also set our ref to the new value

	  const setState = F(value => {
	    if (typeof value === "function") {
	      const callback = value;
	      setStateP(prevValue => {
	        const nextValue = callback(prevValue);
	        ref.current = nextValue;
	        return nextValue;
	      });
	    } else {
	      ref.current = value;
	      setStateP(value);
	    }
	  }, []);

	  const getState = () => {
	    return ref.current;
	  };

	  console.assert(ref.current === state || typeof state === "number" && isNaN(state));
	  return [state, setState, getState];
	}

	const Table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";

	function base64(value) {
	  return Table[value];
	}

	function random6Bits() {
	  return Math.floor(Math.random() * 0b1000000);
	}

	function random64Bits() {
	  return [random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits()];
	}
	/**
	 * Returns a randomly-generated ID with an optional prefix.
	 * Note that if the prefix is *explicitly* set to "", then
	 * IDs that are not valid under HTML4 may be generated. Oh no.
	 */


	function generateRandomId(prefix) {
	  return `${prefix !== null && prefix !== void 0 ? prefix : "id-"}${random64Bits().map(n => base64(n)).join("")}`;
	}
	/**
	 * Returns a hook that modifies a set of props to provide a randomly-generated ID if one was not provided.
	 *
	 * If you'd like to use the ID in a property that's *not* named `id` (like `for` or `aria-labelledby` or whatnot), `useReferencedIdProps` is also provided.
	 *
	 * And the randomly-generated id itself is also provided in case you want to handle the logic yourself without `useMergedProps`.
	 *
	 * Unlike most other `use*Props` hooks, these are mostly stable.
	 */

	function useRandomId() {
	  let {
	    prefix
	  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  const [randomId, setRandomId] = useState(() => generateRandomId(prefix));
	  const [_watchPrefixUpdates, setWatchPrefixUpdates, getWatchPrefixUpdates] = useState(false);
	  h(() => {
	    const watchPrefixUpdates = getWatchPrefixUpdates();
	    if (watchPrefixUpdates) setRandomId(() => generateRandomId(prefix));
	    setWatchPrefixUpdates(true);
	  }, [prefix]); // Whatever ID was most recently used by the actual "id" prop.
	  // Used so that any ID-referencing props don't need to provide the same value.
	  //
	  // TODO: This does mean that on the first render, if just the ID is provided,
	  // there will be a temporary mismatch, but it's corrected before rendering finishes.
	  // Is this okay?

	  const [usedId, setUsedId, getUsedId] = useState(undefined);
	  const useReferencedIdProps = F(function useReferencedIdProps(idPropName) {
	    const ret = function (_ref) {
	      var _ref2, _ref3;

	      let {
	        [idPropName]: givenId,
	        ...props
	      } = _ref;
	      const usedId2 = (_ref2 = (_ref3 = givenId !== null && givenId !== void 0 ? givenId : usedId) !== null && _ref3 !== void 0 ? _ref3 : randomId) !== null && _ref2 !== void 0 ? _ref2 : undefined;
	      if (idPropName === "id") setUsedId(usedId2);
	      return useMergedProps()({
	        [idPropName]: usedId2
	      }, props);
	    };

	    return ret;
	  }, [usedId, randomId]);
	  const useRandomIdProps = F(function useRandomIdProps(p) {
	    return useReferencedIdProps("id")(p);
	  }, [useReferencedIdProps]);
	  return {
	    randomId,
	    id: usedId,
	    getId: getUsedId,
	    useRandomIdProps,
	    useReferencedIdProps
	  };
	}

	const previousInputs = new Map();
	const toRun = new Map(); // TODO: Whether this goes in options.diffed or options._commit
	// is a post-suspense question.
	// Right now, using options._commit has the problem of running
	// *after* refs are applied, but we need to come before even that
	// so `ref={someStableFunction}` works.
	// 
	// Also it's private.
	//
	// ...
	// Well, useEvent or whatever is finally, finally 4 years later finally here
	// which is cool and means we won't need this at all soon.
	// So for now we'll stick with diff to prevent any weirdness with
	// commit being private and all.

	const commitName = "diffed";
	const originalCommit = l$1[commitName];

	const newCommit = function () {
	  for (const [id, effectInfo] of toRun) {
	    const oldInputs = previousInputs.get(id);

	    if (argsChanged(oldInputs, effectInfo.inputs)) {
	      var _effectInfo$cleanup;

	      (_effectInfo$cleanup = effectInfo.cleanup) === null || _effectInfo$cleanup === void 0 ? void 0 : _effectInfo$cleanup.call(effectInfo);
	      effectInfo.cleanup = effectInfo.effect();
	      previousInputs.set(id, effectInfo.inputs);
	    }
	  }

	  toRun.clear();

	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  originalCommit === null || originalCommit === void 0 ? void 0 : originalCommit(...args);
	};

	l$1[commitName] = newCommit;
	/**
	 * Semi-private function to allow stable callbacks even within `useLayoutEffect` and ref assignment.
	 *
	 * Every render, we send the arguments to be evaluated after diffing has completed,
	 * which happens before.
	 *
	 * @param effect
	 * @param inputs
	 */

	function useBeforeLayoutEffect(effect, inputs) {
	  /*(() => {
	      const cleanup = useRef<void | (() => void) | null>(null);
	      const prevArgsRef = useRef<Inputs>(null!);
	      if (argsChanged(inputs, prevArgsRef.current)) {
	          prevArgsRef.current = inputs!;
	          if (cleanup.current)
	              cleanup.current();
	          cleanup.current = effect();
	      }
	  })();*/
	  const [id] = d(() => generateRandomId());
	  toRun.set(id, {
	    effect,
	    inputs,
	    cleanup: null
	  });
	  y(() => {
	    return () => {
	      toRun.delete(id);
	      previousInputs.delete(id);
	    };
	  }, [id]);
	}

	function argsChanged(oldArgs, newArgs) {
	  return !!(!oldArgs || oldArgs.length !== (newArgs === null || newArgs === void 0 ? void 0 : newArgs.length) || newArgs !== null && newArgs !== void 0 && newArgs.some((arg, index) => arg !== oldArgs[index]));
	}

	const Unset = Symbol("unset");
	/**
	 * Given an input value, returns a constant getter function that can be used
	 * inside of `useEffect` and friends without including it in the dependency array.
	 *
	 * This uses `options.diffed` in order to run before everything, even
	 * ref assignment. This means this getter is safe to use anywhere ***except the render phase***.
	 *
	 * @param value
	 * @returns
	 */

	function useStableGetter(value) {
	  const ref = s(Unset);
	  useBeforeLayoutEffect(() => {
	    ref.current = value;
	  }, [value]);
	  return F(() => {
	    if (ref.current === Unset) {
	      throw new Error('Value retrieved from useStableGetter() cannot be called during render.');
	    }

	    return ref.current;
	  }, []);
	}

	/**
	 * Alternate useCallback() which always returns the same (wrapped) function reference
	 * so that it can be excluded from the dependency arrays of `useEffect` and friends.
	 *
	 * Do not use during the render phase!  `useLayoutEffect` is fine though.
	 */

	function useStableCallback(fn) {
	  const currentCallbackGetter = useStableGetter(fn);
	  return F(function () {
	    return currentCallbackGetter()(...arguments);
	  }, []);
	}

	/**
	 * Wrap the native `useEffect` to add arguments
	 * that allow accessing the previous value as the first argument,
	 * as well as the changes that caused the hook to be called as the second argument.
	 *
	 * @param effect
	 * @param inputs
	 * @param impl You can choose whether to use `useEffect` or `useLayoutEffect` by
	 * passing one of them as this argument. By default, it's `useEffect`.
	 */

	function useEffect(effect, inputs) {
	  let impl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : y;
	  const prevInputs = s(undefined);

	  const effect2 = () => {
	    const changes = [];

	    if (inputs && prevInputs.current) {
	      for (let i = 0; i < Math.max(prevInputs.current.length, inputs.length); ++i) {
	        if (prevInputs.current[i] != inputs[i]) changes[i] = {
	          from: prevInputs.current[i],
	          to: inputs[i]
	        };
	      }
	    }

	    const ret = effect(prevInputs.current, changes);
	    prevInputs.current = inputs;
	    return ret;
	  };

	  impl(effect2, inputs);
	}

	/**
	 * Wrap the native `useLayoutEffect` to add arguments
	 * that allow accessing the previous value as the first argument,
	 * as well as the changes that caused the hook to be called as the second argument.
	 *
	 * @param effect
	 * @param inputs
	 */

	function useLayoutEffect(effect, inputs) {
	  return useEffect(effect, inputs, h);
	}

	function useTimeout(_ref) {
	  let {
	    timeout,
	    callback,
	    triggerIndex
	  } = _ref;
	  const stableCallback = useStableCallback(() => {
	    startTimeRef.current = null;
	    callback();
	  });
	  const getTimeout = useStableGetter(timeout); // Set any time we start timeout.
	  // Unset any time the timeout completes

	  const startTimeRef = s(null);
	  const timeoutIsNull = timeout == null; // Any time the triggerIndex changes (including on mount)
	  // restart the timeout.  The timeout does NOT reset
	  // when the duration or callback changes, only triggerIndex.

	  y(() => {
	    if (!timeoutIsNull) {
	      const timeout = getTimeout();
	      console.assert(timeoutIsNull == (timeout == null));

	      if (timeout != null) {
	        startTimeRef.current = +new Date();
	        const handle = setTimeout(stableCallback, timeout);
	        return () => clearTimeout(handle);
	      }
	    }
	  }, [triggerIndex, timeoutIsNull]);
	  const getElapsedTime = F(() => {
	    var _startTimeRef$current;

	    return +new Date() - +((_startTimeRef$current = startTimeRef.current) !== null && _startTimeRef$current !== void 0 ? _startTimeRef$current : new Date());
	  }, []);
	  const getRemainingTime = F(() => {
	    const timeout = getTimeout();
	    return timeout == null ? null : Math.max(0, timeout - getElapsedTime());
	  }, []);
	  return {
	    getElapsedTime,
	    getRemainingTime
	  };
	}

	/**
	 * When used in tandem with `useRovingTabIndex`, allows control of
	 * the tabbable index with the arrow keys.
	 *
	 * @see useListNavigation, which packages everything up together.
	 */

	function useLinearNavigation(_ref) {
	  var _navigationDirection;

	  let {
	    index,
	    navigateToFirst,
	    navigateToLast,
	    navigateToNext,
	    navigateToPrev,
	    managedChildren,
	    navigationDirection,
	    disableArrowKeys,
	    disableHomeEndKeys
	  } = _ref;
	  (_navigationDirection = navigationDirection) !== null && _navigationDirection !== void 0 ? _navigationDirection : navigationDirection = "either";
	  const childCount = managedChildren.length; // Make sure the tabbable index never escapes the bounds of all available children
	  // TODO: Keep track of the original index and keep it, at least until keyboard navigation.

	  useLayoutEffect(() => {
	    if (index !== null) {
	      if (index < 0) {
	        navigateToFirst();
	      } else if (childCount > 0 && index >= childCount) {
	        navigateToLast();
	      }
	    }
	  }, [index, childCount, navigateToFirst, navigateToLast]);
	  const {
	    getLogicalDirectionInfo,
	    useLogicalDirectionProps
	  } = useLogicalDirection({});

	  const onKeyDown = e => {
	    // Not handled by typeahead (i.e. assume this is a keyboard shortcut)
	    if (e.ctrlKey || e.metaKey) return;
	    const info = getLogicalDirectionInfo();
	    const allowsBlockNavigation = navigationDirection == "block" || navigationDirection == "either";
	    const allowsInlineNavigation = navigationDirection == "inline" || navigationDirection == "either";

	    switch (e.key) {
	      case "ArrowUp":
	        {
	          const propName = (info === null || info === void 0 ? void 0 : info.blockOrientation) === "vertical" ? "blockDirection" : "inlineDirection";
	          const directionAllowed = !disableArrowKeys && ((info === null || info === void 0 ? void 0 : info.blockOrientation) === "vertical" ? allowsBlockNavigation : allowsInlineNavigation);

	          if (directionAllowed) {
	            if ((info === null || info === void 0 ? void 0 : info[propName]) === "btt") {
	              navigateToNext();
	            } else {
	              navigateToPrev();
	            }

	            e.preventDefault();
	            e.stopPropagation();
	          }

	          break;
	        }

	      case "ArrowDown":
	        {
	          const propName = (info === null || info === void 0 ? void 0 : info.blockOrientation) === "vertical" ? "blockDirection" : "inlineDirection";
	          const directionAllowed = !disableArrowKeys && ((info === null || info === void 0 ? void 0 : info.blockOrientation) === "vertical" ? allowsBlockNavigation : allowsInlineNavigation);

	          if (directionAllowed) {
	            if ((info === null || info === void 0 ? void 0 : info[propName]) === "btt") {
	              navigateToPrev();
	            } else {
	              navigateToNext();
	            }

	            e.preventDefault();
	            e.stopPropagation();
	          }

	          break;
	        }

	      case "ArrowLeft":
	        {
	          const propName = (info === null || info === void 0 ? void 0 : info.inlineOrientation) === "horizontal" ? "inlineDirection" : "blockDirection";
	          const directionAllowed = !disableArrowKeys && ((info === null || info === void 0 ? void 0 : info.inlineOrientation) === "horizontal" ? allowsInlineNavigation : allowsBlockNavigation);

	          if (directionAllowed) {
	            if ((info === null || info === void 0 ? void 0 : info[propName]) === "rtl") {
	              navigateToNext();
	            } else {
	              navigateToPrev();
	            }

	            e.preventDefault();
	            e.stopPropagation();
	          }

	          break;
	        }

	      case "ArrowRight":
	        {
	          const propName = (info === null || info === void 0 ? void 0 : info.inlineOrientation) === "horizontal" ? "inlineDirection" : "blockDirection";
	          const directionAllowed = !disableArrowKeys && ((info === null || info === void 0 ? void 0 : info.inlineOrientation) === "horizontal" ? allowsInlineNavigation : allowsBlockNavigation);

	          if (directionAllowed) {
	            if ((info === null || info === void 0 ? void 0 : info[propName]) === "rtl") {
	              navigateToPrev();
	            } else {
	              navigateToNext();
	            }

	            e.preventDefault();
	            e.stopPropagation();
	          }

	          e.preventDefault();
	          e.stopPropagation();
	          break;
	        }

	      case "Home":
	        if (!disableHomeEndKeys) {
	          navigateToFirst();
	          e.preventDefault();
	          e.stopPropagation();
	        }

	        break;

	      case "End":
	        if (!disableHomeEndKeys) {
	          navigateToLast();
	          e.preventDefault();
	          e.stopPropagation();
	        }

	        break;
	    }
	  };

	  return {
	    useLinearNavigationProps: F(props => {
	      return useLogicalDirectionProps(useMergedProps()({
	        onKeyDown
	      }, props));
	    }, [])
	  };
	}
	/**
	 * Allows for the selection of a managed child by typing the given text associated with it.
	 *
	 * @see useListNavigation, which packages everything up together.
	 */

	function useTypeaheadNavigation(_ref2) {
	  let {
	    collator,
	    getIndex,
	    typeaheadTimeout,
	    setIndex
	  } = _ref2;
	  // For typeahead, keep track of what our current "search" string is (if we have one)
	  // and also clear it every 1000 ms since the last time it changed.
	  // Next, keep a mapping of typeahead values to indices for faster searching.
	  // And, for the user's sake, let them know when their typeahead can't match anything anymore
	  const [currentTypeahead, setCurrentTypeahead, getCurrentTypeahead] = useState(null);
	  useTimeout({
	    timeout: typeaheadTimeout !== null && typeaheadTimeout !== void 0 ? typeaheadTimeout : 1000,
	    callback: () => {
	      setCurrentTypeahead(null);
	      setInvalidTypeahead(null);
	    },
	    triggerIndex: currentTypeahead
	  });
	  const sortedTypeaheadInfo = s([]);
	  const [invalidTypeahead, setInvalidTypeahead] = useState(false); // Handle typeahead for input method editors as well
	  // Essentially, when active, ignore further keys 
	  // because we're waiting for a CompositionEnd event

	  const [, setImeActive, getImeActive] = useState(false); // Because composition events fire *after* keydown events 
	  // (but within the same task, which, TODO, could be browser-dependent),
	  // we can use this to keep track of which event we're listening for on the first keydown.

	  const [nextTypeaheadChar, setNextTypeaheadChar] = useState(null);
	  useLayoutEffect(() => {
	    if (nextTypeaheadChar !== null) {
	      setCurrentTypeahead(typeahead => (typeahead !== null && typeahead !== void 0 ? typeahead : "") + nextTypeaheadChar);
	      setNextTypeaheadChar(null);
	    }
	  }, [nextTypeaheadChar]);
	  const comparatorShared = useStableCallback((safeLhs, safeRhs) => {
	    var _safeRhs$toLowerCase;

	    let compare; // For the purposes of typeahead, only compare a string of the same size as our currently typed string.
	    // By normalizing them first, we ensure this byte-by-byte handling of raw character data works out okay.

	    safeLhs = safeLhs.normalize("NFD");
	    safeRhs = safeRhs.normalize("NFD");
	    if (collator) compare = collator.compare(safeLhs, safeRhs);else compare = safeLhs.toLowerCase().localeCompare((_safeRhs$toLowerCase = safeRhs.toLowerCase()) !== null && _safeRhs$toLowerCase !== void 0 ? _safeRhs$toLowerCase : "");
	    return compare;
	  });
	  const insertingComparator = useStableCallback((lhs, rhs) => {
	    if (typeof lhs === "string" && typeof rhs.text === "string") {
	      return comparatorShared(lhs, rhs.text);
	    }

	    return lhs - rhs;
	  });
	  const typeaheadComparator = useStableCallback((lhs, rhs) => {
	    if (typeof lhs === "string" && typeof rhs.text === "string") {
	      // During typeahead, all strings longer than ours should be truncated
	      // so that they're all considered equally by that point.
	      return comparatorShared(lhs, rhs.text.substring(0, lhs.length));
	    }

	    return lhs - rhs;
	  });
	  const useTypeaheadNavigationProps = F(function (_ref3) {
	    let { ...props
	    } = _ref3;

	    const onCompositionStart = _e => {
	      setImeActive(true);
	    };

	    const onCompositionEnd = e => {
	      setNextTypeaheadChar(e.data);
	      setImeActive(false);
	    };

	    const onKeyDown = e => {
	      const imeActive = getImeActive();
	      const key = e.key; // Not handled by typeahead (i.e. assume this is a keyboard shortcut)

	      if (e.ctrlKey || e.metaKey) return;

	      if (!imeActive && e.key === "Backspace") {
	        // Remove the last character in a way that doesn't split UTF-16 surrogates.
	        setCurrentTypeahead(t => t === null ? null : [...t].reverse().slice(1).reverse().join(""));
	        e.preventDefault();
	        e.stopPropagation();
	        return;
	      } // The key property represents the typed character OR the "named key attribute" of the key pressed.
	      // There's no definite way to tell the difference, but for all intents and purposes
	      // there are no one-character names, and there are no non-ASCII-alpha names.
	      // Thus, any one-character or non-ASCII value for `key` is *almost certainly* a typed character.


	      const isCharacterKey = key.length === 1 || !/^[A-Za-z]/.test(key);

	      if (isCharacterKey) {
	        var _getCurrentTypeahead;

	        if (key == " " && ((_getCurrentTypeahead = getCurrentTypeahead()) !== null && _getCurrentTypeahead !== void 0 ? _getCurrentTypeahead : "").trim().length == 0) ; else {
	          e.preventDefault();
	          e.stopPropagation(); // Note: Won't be true for the first keydown
	          // but will be overwritten before useLayoutEffect is called
	          // to actually apply the change

	          if (!imeActive) setNextTypeaheadChar(key);
	        }
	      }
	    };

	    return useMergedProps()({
	      onKeyDown,
	      onCompositionStart,
	      onCompositionEnd
	    }, props);
	  }, []); // Handle changes in typeahead that cause changes to the tabbable index

	  y(() => {
	    if (currentTypeahead && sortedTypeaheadInfo.current.length) {
	      const sortedTypeaheadIndex = binarySearch(sortedTypeaheadInfo.current, currentTypeahead, typeaheadComparator);

	      if (sortedTypeaheadIndex < 0) {
	        // The user has typed an entry that doesn't exist in the list
	        // (or more specifically "for which there is no entry that starts with that input")
	        setInvalidTypeahead(true);
	      } else {
	        setInvalidTypeahead(false);
	        /*
	          We know roughly where, in the sorted array of strings, our next typeahead location is.
	          But roughly isn't good enough if there are multiple matches.
	          To convert our sorted index to the unsorted index we need, we have to find the first
	          element that matches us *and* (if any such exist) is *after* our current selection.
	           In other words, the only way typeahead moves backwards relative to our current
	          position is if the only other option is behind us.
	           It's not specified in WAI-ARIA what to do in that case.  I suppose wrap back to the start?
	          Though there's also a case for just going upwards to the nearest to prevent jumpiness.
	          But if you're already doing typeahead on an unsorted list, like, jumpiness can't be avoided.
	          I dunno. Going back to the start is the simplist though.
	           Basically what this does: Starting from where we found ourselves after our binary search,
	          scan backwards and forwards through all adjacent entries that also compare equally so that
	          we can find the one whose `unsortedIndex` is the lowest amongst all other equal strings
	          (and also the lowest `unsortedIndex` yadda yadda except that it comes after us).
	           TODO: The binary search starts this off with a solid O(log n), but one-character
	          searches are, thanks to pigeonhole principal, eventually guaranteed to become
	          O(n*log n). This is annoying but probably not easily solvable? There could be an
	          exception for one-character strings, but that's just kicking the can down
	          the road. Maybe one or two characters would be good enough though.
	        */
	        // These are used to keep track of the candidates' positions in both our sorted array and the unsorted DOM.

	        let lowestUnsortedIndexAll = null;
	        let lowestSortedIndexAll = sortedTypeaheadIndex; // These two are only set for elements that are ahead of us, but the principle's the same otherwise

	        let lowestUnsortedIndexNext = null;
	        let lowestSortedIndexNext = sortedTypeaheadIndex;

	        const updateBestFit = u => {
	          var _getIndex;

	          if (lowestUnsortedIndexAll == null || u < lowestUnsortedIndexAll) {
	            lowestUnsortedIndexAll = u;
	            lowestSortedIndexAll = i;
	          }

	          if ((lowestUnsortedIndexNext == null || u < lowestUnsortedIndexNext) && u > ((_getIndex = getIndex()) !== null && _getIndex !== void 0 ? _getIndex : -Infinity)) {
	            lowestUnsortedIndexNext = u;
	            lowestSortedIndexNext = i;
	          }
	        };

	        let i = sortedTypeaheadIndex;

	        while (i >= 0 && typeaheadComparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
	          updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
	          --i;
	        }

	        i = sortedTypeaheadIndex;

	        while (i < sortedTypeaheadInfo.current.length && typeaheadComparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
	          updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
	          ++i;
	        }

	        if (lowestUnsortedIndexNext !== null) setIndex(sortedTypeaheadInfo.current[lowestSortedIndexNext].unsortedIndex);else if (lowestUnsortedIndexAll !== null) setIndex(sortedTypeaheadInfo.current[lowestSortedIndexAll].unsortedIndex);
	      }
	    }
	  }, [currentTypeahead]);
	  const useTypeaheadNavigationChild = F(_ref4 => {
	    let {
	      text,
	      ...i
	    } = _ref4;
	    y(() => {
	      if (text) {
	        // Find where to insert this item.
	        // Because all index values should be unique, the returned sortedIndex
	        // should always refer to a new location (i.e. be negative)                
	        const sortedIndex = binarySearch(sortedTypeaheadInfo.current, text, insertingComparator);
	        console.assert(sortedIndex < 0 || sortedTypeaheadInfo.current[sortedIndex].text == text);

	        if (sortedIndex < 0) {
	          sortedTypeaheadInfo.current.splice(-sortedIndex - 1, 0, {
	            text,
	            unsortedIndex: i.index
	          });
	        } else {
	          sortedTypeaheadInfo.current.splice(sortedIndex, 0, {
	            text,
	            unsortedIndex: i.index
	          });
	        }

	        return () => {
	          // When unmounting, find where we were and remove ourselves.
	          // Again, we should always find ourselves because there should be no duplicate values if each index is unique.
	          const sortedIndex = binarySearch(sortedTypeaheadInfo.current, text, insertingComparator);
	          console.assert(sortedIndex < 0 || sortedTypeaheadInfo.current[sortedIndex].text == text);

	          if (sortedIndex >= 0) {
	            sortedTypeaheadInfo.current.splice(sortedIndex, 1);
	          }
	        };
	      }
	    }, [text]);
	    return {};
	  }, []);
	  return {
	    useTypeaheadNavigationChild,
	    useTypeaheadNavigationProps,
	    currentTypeahead,
	    invalidTypeahead
	  };
	}
	/**
	 * Your usual binary search implementation.
	 *
	 * It's used here to quickly find a good spot to start searching for our next typeahead candidate.
	 * @param array The array to search through
	 * @param wanted The value you'd like to find
	 * @param comparator Compares `wanted` with the current value in `array`
	 * @returns A non-negative value if `wanted` was found, and a negative number if not.
	 * The absolute value of this number, minus one, is where `wanted` *would* be found if it *was* in `array`
	 */

	function binarySearch(array, wanted, comparator) {
	  let firstIndex = 0;
	  let lastIndex = array.length - 1;

	  while (firstIndex <= lastIndex) {
	    const testIndex = lastIndex + firstIndex >> 1;
	    const comparisonResult = comparator(wanted, array[testIndex]);

	    if (comparisonResult > 0) {
	      firstIndex = testIndex + 1;
	    } else if (comparisonResult < 0) {
	      lastIndex = testIndex - 1;
	    } else {
	      return testIndex;
	    }
	  }

	  return -firstIndex - 1;
	}

	/**
	 * Allows a parent component to access information about certain
	 * child components once they have rendered.
	 *
	 * This hook is slightly more complicated in that it returns both a
	 * prop-modifying hook, but also a hook that each child will need
	 * to use: `useManagedChild`.  It's stable across renders, so just
	 * toss it into a `Context` so the children can have access to it.
	 * This function registers the child with the parent and provides
	 * it with any requested information, but doesn't do anything else
	 * until it unmounts and retracts that information.
	 */

	function useChildManager() {
	  // This is blindly updated any time a child mounts or unmounts itself.
	  // Used to make sure that any time the array of managed children updates,
	  // we also re-render.
	  const [_childUpdateIndex, setChildUpdateIndex] = useState(0);
	  const [totalChildrenMounted, setTotalChildrenMounted, getTotalChildrenMounted] = useState(0);
	  const [totalChildrenUnounted, setTotalChildrenUnounted, _getTotalChildrenUnounted] = useState(0);
	  const childrenCurrentlyMounted = totalChildrenMounted - totalChildrenUnounted;
	  const managedChildren = s([]
	  /** TODO: Any problems caused by using an array when it should be an object? */
	  );
	  const mountedChildren = s([]);
	  const mountOrder = s(new Map());
	  const indicesByElement = s(new Map());
	  const deletedIndices = s(new Set()); // Used to keep track of indices that have "over-mounted" and by how much.
	  // We need this so that we don't erase saved information when a component
	  // "overmounts" over another which then, correctly, switches *itself* to something else.
	  // In general, this should only happen when components are swapping between indices.
	  // By the time they're done, this map should be all 0s again, at which point
	  // it's okay to actually run the unmount code.
	  // 
	  // TODO: throw a console.assert somewhere to make up for the lost 
	  // "are you sure you want to overwrite this child's index!" assertion.
	  // Namely, is this map all 0s when the parent element re-renders? 
	  // Probably not because of setChildUpdateIndex

	  const overmountCount = s(new Map());
	  const getMountIndex = F(index => {
	    return mountOrder.current.get(index);
	  }, []);
	  const useManagedChild = F(info => {
	    const {
	      getElement,
	      useRefElementProps
	    } = useRefElement({
	      onElementChange: F(element => {
	        if (element) {
	          indicesByElement.current.set(element, info.index);
	          deletedIndices.current.delete(info.index);

	          if (managedChildren.current[info.index] != undefined) {
	            var _overmountCount$curre;

	            overmountCount.current.set(info.index, ((_overmountCount$curre = overmountCount.current.get(info.index)) !== null && _overmountCount$curre !== void 0 ? _overmountCount$curre : 0) + 1);
	          }

	          setChildUpdateIndex(c => ++c);
	          managedChildren.current[info.index] = { ...info
	          };
	          return () => {
	            var _overmountCount$curre2;

	            setChildUpdateIndex(c => ++c);

	            if (((_overmountCount$curre2 = overmountCount.current.get(info.index)) !== null && _overmountCount$curre2 !== void 0 ? _overmountCount$curre2 : 0) > 0) {
	              var _overmountCount$curre3;

	              overmountCount.current.set(info.index, ((_overmountCount$curre3 = overmountCount.current.get(info.index)) !== null && _overmountCount$curre3 !== void 0 ? _overmountCount$curre3 : 0) - 1);
	            } else {
	              delete managedChildren.current[info.index];
	              deletedIndices.current.add(info.index);

	              if (typeof info.index === "number") {
	                while (managedChildren.current.length && managedChildren.current[managedChildren.current.length - 1] === undefined) managedChildren.current.length -= 1;
	              }

	              indicesByElement.current.delete(element);
	            }
	          };
	        }
	      }, [])
	    });
	    useLayoutEffect(() => {
	      const index = getTotalChildrenMounted();
	      mountOrder.current.set(info.index, index);
	      mountedChildren.current[index] = info;
	      setTotalChildrenMounted(t => ++t);
	      return () => {
	        mountOrder.current.delete(info.index);
	        mountedChildren.current[index] = null;
	        setTotalChildrenUnounted(t => ++t);
	      };
	    }, [info.index]); // Any time our child props change, make that information available generally.
	    // *Don't re-render*, otherwise we'd be stuck in an
	    // infinite loop every time an anonymous function is passed.
	    // It comes in from the props so the child was already updated by it --
	    // we don't need the parent to re-render every single child any time
	    // "onClick" updates or whatever.  The relevant child already knows,
	    // and that's what matters.

	    useLayoutEffect(() => {
	      if (managedChildren.current[info.index] != undefined) managedChildren.current[info.index] = { ...info
	      };
	    }, [...Object.entries(info).flat()]);
	    return {
	      getElement,
	      useManagedChildProps: useRefElementProps
	    };
	  }, []);
	  return {
	    useManagedChild,
	    childCount: childrenCurrentlyMounted,
	    managedChildren: managedChildren.current,
	    mountedChildren: mountedChildren.current,
	    indicesByElement: indicesByElement.current,
	    totalChildrenMounted,
	    totalChildrenUnounted,
	    getMountIndex,
	    deletedIndices: deletedIndices.current
	  };
	}
	/**
	 * Helper function for letting children know when they are or are not the
	 * current selected/expanded/focused/whatever child.
	 *
	 * Automatically handles when children are mounted & unmounted and such.
	 *
	 * While it will be called once for every child on mount, after that setFlag
	 * is guaranteed to only be called once on activation and once on deactivation,
	 * so it's generally safe to put side effects inside if necessary.
	 * It's also safe to make it non-stable.
	 *
	 * @param activatedIndex What index the current selected (etc.) child is
	 * @param length How many children exist (as managedChildren.length)
	 * @param setFlag A function that probably looks like (i, flag) => managedChildren[i].setActive(flag)
	 * @param useEffect Which version of useEffect to use. Default is `useLayoutEffect`.
	 */

	function useChildFlag(_ref) {
	  var _useEffect;

	  let {
	    activatedIndex,
	    closestFit,
	    managedChildren,
	    setChildFlag,
	    getChildFlag,
	    useEffect
	  } = _ref;
	  (_useEffect = useEffect) !== null && _useEffect !== void 0 ? _useEffect : useEffect = useLayoutEffect;
	  if (closestFit) console.assert(typeof activatedIndex == "number" || activatedIndex == null); // Whenever we re-render, make sure that any children that have mounted
	  // have their flags properly set.  We know it's unset if it was null,
	  // in which case we just set it to true or false.
	  //
	  // And, I mean, as long as we're already iterating through every child
	  // on every render to check for newly mounted children, might as well
	  // just handle changed in the activatedIndex here too.

	  useEffect(() => {
	    // TODO: We have limited information about when a child mounts or unmounts
	    // and so we don't know where to look for any null entries that need changing.
	    // We know when activatedIndex changes and what it was, but not much else.
	    // Looping over every child *works*, and it's not an expensive loop by any means,
	    // but, like, eugh.
	    // Also, before we do anything, see if we need to "correct" activatedIndex.
	    // It could be pointing to a child that doesn't exist, and if closestFit is given,
	    // we need to adjust activatedIndex to point to a valid child.
	    if (typeof activatedIndex == "number" && Array.isArray(managedChildren) && managedChildren[activatedIndex] == null) {
	      // Oh dear. Are we actively correcting this?
	      if (closestFit) {
	        // Oh dear.
	        // Search up and down the list of children for any that actually exist.
	        let searchHigh = activatedIndex + 1;
	        let searchLow = activatedIndex - 1;

	        while (searchLow >= 0 && managedChildren[searchLow] == null || searchHigh < managedChildren.length && managedChildren[searchHigh] == null) {
	          ++searchHigh;
	          --searchLow;
	        }

	        if (searchLow >= 0 && managedChildren[searchLow] != null) {
	          activatedIndex = searchLow;
	        } else if (searchHigh < managedChildren.length && managedChildren[searchHigh] != null) {
	          activatedIndex = searchHigh;
	        } // Now that we've done that, if any valid children exist, we've reset activatedIndex to point to it instead.
	        // Now we'll fall through to the for loop set and unset our flags based on this "corrected" value.
	        //
	        // We don't correct it or save it anywhere because we'd very much like to return to it
	        // if the child remounts itself.

	      }
	    }

	    if (Array.isArray(managedChildren)) {
	      for (let i = 0; i < managedChildren.length; ++i) {
	        const shouldBeSet = i == activatedIndex;

	        if (getChildFlag(i) != shouldBeSet) {
	          setChildFlag(i, shouldBeSet);
	        }
	      }
	    } else {
	      Object.entries(managedChildren).forEach(_ref2 => {
	        let [i, _info] = _ref2;
	        const shouldBeSet = i == activatedIndex;

	        if (getChildFlag(i) != shouldBeSet) {
	          setChildFlag(i, shouldBeSet);
	        }
	      });
	    }
	  });
	}

	/**
	 * Implements a roving tabindex system where only one "focusable"
	 * component in a set is able to receive a tab focus. *Which*
	 * of those elements receives focus is determined by you, but it's
	 * recommended to offload that logic then to another hook, like
	 * `useLinearNavigation`, which lets you change the tabbable
	 * element with the arrow keys, `useTypeaheadNavigation`, which
	 * lets you change the tabbable index with typeahead, or
	 * `useListNavigation` if you just want everything bundled together.
	 *
	 * Note that the child hook returned by this function must be used
	 * by every child that uses this roving tabindex logic.  The
	 * prop-modifying hook *that* hook returns should then be used
	 * on the child's element, as well as any other elements you'd like
	 * to be explicitly made untabbable too.
	 *
	 * `shouldFocusOnChange` should return true if focus is
	 * contained within whatever element contains the roving tab index.
	 * Generally as simple as the following:
	 * ```
	 * const [focusedInner, setFocusedInner] = useState(false);
	 * const { useHasFocusProps } = useHasFocus<ParentElement>({ setFocusedInner });
	 * const focusOnChange = (focusedInner != false);
	 * ```
	 * It's not included here because `useRovingTabIndex` doesn't know
	 * anything about the container element, only children elements.
	 * And just as well! Children should be allowed at the root,
	 * regardless of if it's the whole app or just a given component.
	 */

	function useRovingTabIndex(_ref) {
	  let {
	    shouldFocusOnChange: foc,
	    tabbableIndex
	  } = _ref;
	  const getShouldFocusOnChange = useStableGetter(foc);
	  const getTabbableIndex = useStableGetter(tabbableIndex); // Call the hook that allows us to collect information from children who provide it

	  const {
	    managedChildren,
	    childCount,
	    useManagedChild,
	    indicesByElement,
	    ...rest
	  } = useChildManager(); // Any time the tabbable index changes,
	  // notify the previous child that it's no longer tabbable,
	  // and notify the next child that is allowed to be tabbed to.

	  useChildFlag({
	    activatedIndex: tabbableIndex,
	    managedChildren,
	    closestFit: true,
	    setChildFlag: (index, tabbable) => {
	      var _managedChildren$inde;

	      if (index != null) (_managedChildren$inde = managedChildren[index]) === null || _managedChildren$inde === void 0 ? void 0 : _managedChildren$inde.setTabbable(tabbable);
	    },
	    getChildFlag: index => {
	      var _managedChildren$inde2, _managedChildren$inde3;

	      return (_managedChildren$inde2 = (_managedChildren$inde3 = managedChildren[index]) === null || _managedChildren$inde3 === void 0 ? void 0 : _managedChildren$inde3.getTabbable()) !== null && _managedChildren$inde2 !== void 0 ? _managedChildren$inde2 : null;
	    }
	  });
	  const useRovingTabIndexChild = F(info => {
	    const [rrafIndex, setRrafIndex] = useState(1);
	    const rerenderAndFocus = F(() => {
	      setRrafIndex(i => ++i);
	    }, []);
	    const [tabbable, setTabbable, getTabbable] = useState(null);
	    const newInfo = { ...info,
	      rerenderAndFocus,
	      setTabbable: F(tabbable => {
	        setTabbable(tabbable);
	      }, []),
	      getTabbable
	    };
	    const {
	      getElement,
	      useManagedChildProps
	    } = useManagedChild(newInfo);
	    y(() => {
	      const element = getElement();

	      if (tabbable) {
	        const shouldFocusOnChange = getShouldFocusOnChange()();

	        if (shouldFocusOnChange && "focus" in element) {
	          requestAnimationFrame(() => {
	            queueMicrotask(() => {
	              element.focus();
	            });
	          });
	        }
	      }
	    }, [tabbable, rrafIndex]);

	    function useRovingTabIndexSiblingProps(_ref2) {
	      let {
	        tabIndex,
	        ...props
	      } = _ref2;

	      if (tabIndex == null) {
	        if (tabbable) tabIndex = 0;else tabIndex = -1;
	      }

	      return useMergedProps()({
	        tabIndex
	      }, props);
	    }

	    function useRovingTabIndexChildProps(_ref3) {
	      let {
	        tabIndex,
	        ...props
	      } = _ref3;

	      if (tabIndex == null) {
	        if (tabbable) tabIndex = 0;else tabIndex = -1;
	      }

	      return useMergedProps()(useManagedChildProps({
	        tabIndex
	      }), props);
	    }

	    return {
	      useRovingTabIndexChildProps,
	      useRovingTabIndexSiblingProps,
	      tabbable
	    };
	  }, [useManagedChild]);
	  return {
	    useRovingTabIndexChild,
	    childCount,
	    managedChildren,
	    indicesByElement,
	    focusCurrent: F(() => {
	      var _getTabbableIndex;

	      if (managedChildren[(_getTabbableIndex = getTabbableIndex()) !== null && _getTabbableIndex !== void 0 ? _getTabbableIndex : 0].getTabbable()) {
	        var _managedChildren, _getTabbableIndex2;

	        (_managedChildren = managedChildren[(_getTabbableIndex2 = getTabbableIndex()) !== null && _getTabbableIndex2 !== void 0 ? _getTabbableIndex2 : 0]) === null || _managedChildren === void 0 ? void 0 : _managedChildren.rerenderAndFocus();
	      } else {
	        var _getTabbableIndex3;

	        // For whatever reason, the previously tabbable child
	        // is no longer tabbable without us knowing about it.
	        // Maybe it unmounted?
	        // Either way, try to find the newly-selected child.
	        // (I don't think this code path has ever been run)

	        /* eslint-disable no-debugger */
	        debugger;
	        let i = (_getTabbableIndex3 = getTabbableIndex()) !== null && _getTabbableIndex3 !== void 0 ? _getTabbableIndex3 : 0;
	        let j = i + 1;

	        while (i >= 0) {
	          var _getTabbableIndex4;

	          --i;

	          if (managedChildren[(_getTabbableIndex4 = getTabbableIndex()) !== null && _getTabbableIndex4 !== void 0 ? _getTabbableIndex4 : 0].getTabbable()) {
	            var _managedChildren2, _getTabbableIndex5;

	            (_managedChildren2 = managedChildren[(_getTabbableIndex5 = getTabbableIndex()) !== null && _getTabbableIndex5 !== void 0 ? _getTabbableIndex5 : 0]) === null || _managedChildren2 === void 0 ? void 0 : _managedChildren2.rerenderAndFocus();
	            return;
	          }
	        }

	        while (j < managedChildren.length) {
	          var _getTabbableIndex6;

	          ++j;

	          if (managedChildren[(_getTabbableIndex6 = getTabbableIndex()) !== null && _getTabbableIndex6 !== void 0 ? _getTabbableIndex6 : 0].getTabbable()) {
	            var _managedChildren3, _getTabbableIndex7;

	            (_managedChildren3 = managedChildren[(_getTabbableIndex7 = getTabbableIndex()) !== null && _getTabbableIndex7 !== void 0 ? _getTabbableIndex7 : 0]) === null || _managedChildren3 === void 0 ? void 0 : _managedChildren3.rerenderAndFocus();
	            return;
	          }
	        }
	      }
	    }, []),
	    ...rest
	  };
	}

	function identity(t) {
	  return t;
	}
	/**
	 * Implements proper keyboard navigation for components like listboxes, button groups, menus, etc.
	 *
	 * In the document order, there will be only one "focused" or "tabbable" element, making it act more like one complete unit in comparison to everything around it.
	 * Navigating forwards/backwards can be done with the arrow keys, Home/End keys, or any any text for typeahead to focus the next item that matches.
	 */


	function useListNavigation(_ref) {
	  var _indexMangler, _indexDemangler, _keyNavigation, _getTabbableIndex;

	  let {
	    initialIndex,
	    shouldFocusOnChange,
	    collator,
	    keyNavigation,
	    indexMangler,
	    indexDemangler
	  } = _ref;
	  (_indexMangler = indexMangler) !== null && _indexMangler !== void 0 ? _indexMangler : indexMangler = identity;
	  (_indexDemangler = indexDemangler) !== null && _indexDemangler !== void 0 ? _indexDemangler : indexDemangler = identity;
	  (_keyNavigation = keyNavigation) !== null && _keyNavigation !== void 0 ? _keyNavigation : keyNavigation = "either";
	  useEnsureStability("useListNavigation", indexMangler, indexDemangler); // Keep track of three things related to the currently tabbable element's index:
	  // What it is, and whether, when we render this component and it's changed, to also focus the element that was made tabbable.

	  const [tabbableIndex, setTabbableIndex, getTabbableIndex] = useState(initialIndex === undefined ? 0 : initialIndex);
	  const {
	    managedChildren,
	    indicesByElement,
	    useRovingTabIndexChild,
	    focusCurrent,
	    ...rest
	  } = useRovingTabIndex({
	    shouldFocusOnChange,
	    tabbableIndex
	  });
	  /*const navigateToIndex = useCallback((i: number | null) => { setTabbableIndex(i); }, []);
	  const navigateToFirst = useCallback(() => { tryNavigateToIndex(managedChildren,) setTabbableIndex(indexMangler!(0)); }, []);
	  const navigateToLast = useCallback(() => { setTabbableIndex(indexMangler!(managedChildren.length - 1)); }, []);
	  const navigateToPrev = useCallback(() => { setTabbableIndex(i => indexMangler!(indexDemangler!(i ?? 0) - 1)) }, [indexDemangler, indexMangler]);
	  const navigateToNext = useCallback(() => { setTabbableIndex(i => indexMangler!(indexDemangler!(i ?? 0) + 1)) }, [indexDemangler, indexMangler]);
	  */

	  const navigateToIndex = F(i => {
	    var _indexMangler2, _indexDemangler2;

	    setTabbableIndex(i == null ? null : tryNavigateToIndex(managedChildren, 0, i, 1, (_indexMangler2 = indexMangler) !== null && _indexMangler2 !== void 0 ? _indexMangler2 : identity, (_indexDemangler2 = indexDemangler) !== null && _indexDemangler2 !== void 0 ? _indexDemangler2 : identity));
	  }, []);
	  const navigateToFirst = F(() => {
	    var _indexMangler3, _indexDemangler3;

	    setTabbableIndex(tryNavigateToIndex(managedChildren, 0, 0, 1, (_indexMangler3 = indexMangler) !== null && _indexMangler3 !== void 0 ? _indexMangler3 : identity, (_indexDemangler3 = indexDemangler) !== null && _indexDemangler3 !== void 0 ? _indexDemangler3 : identity));
	  }, []);
	  const navigateToLast = F(() => {
	    var _indexMangler4, _indexDemangler4;

	    setTabbableIndex(tryNavigateToIndex(managedChildren, managedChildren.length, managedChildren.length, -1, (_indexMangler4 = indexMangler) !== null && _indexMangler4 !== void 0 ? _indexMangler4 : identity, (_indexDemangler4 = indexDemangler) !== null && _indexDemangler4 !== void 0 ? _indexDemangler4 : identity));
	  }, []);
	  const navigateToPrev = F(() => {
	    setTabbableIndex(c => {
	      var _indexMangler5, _indexDemangler5;

	      return tryNavigateToIndex(managedChildren, c !== null && c !== void 0 ? c : 0, (c !== null && c !== void 0 ? c : 0) - 1, -1, (_indexMangler5 = indexMangler) !== null && _indexMangler5 !== void 0 ? _indexMangler5 : identity, (_indexDemangler5 = indexDemangler) !== null && _indexDemangler5 !== void 0 ? _indexDemangler5 : identity);
	    });
	  }, []);
	  const navigateToNext = F(() => {
	    setTabbableIndex(c => {
	      var _indexMangler6, _indexDemangler6;

	      return tryNavigateToIndex(managedChildren, c !== null && c !== void 0 ? c : 0, (c !== null && c !== void 0 ? c : 0) + 1, 1, (_indexMangler6 = indexMangler) !== null && _indexMangler6 !== void 0 ? _indexMangler6 : identity, (_indexDemangler6 = indexDemangler) !== null && _indexDemangler6 !== void 0 ? _indexDemangler6 : identity);
	    });
	  }, []);
	  const setIndex = F(index => {
	    setTabbableIndex(index);
	  }, []);
	  const {
	    currentTypeahead,
	    invalidTypeahead,
	    useTypeaheadNavigationChild,
	    useTypeaheadNavigationProps
	  } = useTypeaheadNavigation({
	    collator,
	    getIndex: getTabbableIndex,
	    setIndex,
	    typeaheadTimeout: 1000
	  });
	  const {
	    useLinearNavigationProps
	  } = useLinearNavigation({
	    navigationDirection: keyNavigation,
	    index: (_getTabbableIndex = getTabbableIndex()) !== null && _getTabbableIndex !== void 0 ? _getTabbableIndex : 0,
	    managedChildren,
	    navigateToPrev,
	    navigateToNext,
	    navigateToFirst,
	    navigateToLast
	  });
	  const useListNavigationProps = F(props => {
	    return useLinearNavigationProps(useTypeaheadNavigationProps(props));
	  }, [useLinearNavigationProps, useTypeaheadNavigationProps]);
	  const useListNavigationChild = F(info => {
	    useTypeaheadNavigationChild(info); //const { useLinearNavigationChildProps } = useLinearNavigationChild(info as I);


	    const {
	      useRovingTabIndexChildProps,
	      useRovingTabIndexSiblingProps,
	      tabbable
	    } = useRovingTabIndexChild(info);

	    const useListNavigationChildProps = function (_ref2) {
	      let { ...props
	      } = _ref2;
	      return useMergedProps()(useRovingTabIndexChildProps({
	        onClick: roveToSelf,
	        hidden: info.hidden
	      }), props);
	    };

	    const roveToSelf = F(() => {
	      navigateToIndex(info.index);
	    }, []);
	    return {
	      useListNavigationChildProps,
	      useListNavigationSiblingProps: useRovingTabIndexSiblingProps,
	      tabbable
	    };
	  }, [useTypeaheadNavigationChild, useRovingTabIndexChild, navigateToIndex]);
	  return {
	    useListNavigationChild,
	    useListNavigationProps,
	    currentTypeahead,
	    invalidTypeahead,
	    tabbableIndex,
	    managedChildren,
	    indicesByElement,
	    navigateToIndex,
	    navigateToNext,
	    navigateToPrev,
	    navigateToFirst,
	    navigateToLast,
	    focusCurrent,
	    ...rest
	  };
	}
	function tryNavigateToIndex(managedCells, initial, target, searchDirection, indexMangler, indexDemangler) {
	  function helper() {
	    if (searchDirection === -1) {
	      while (target >= 0 && (managedCells[target] == null || !!((_managedCells$target = managedCells[target]) !== null && _managedCells$target !== void 0 && _managedCells$target.hidden))) {
	        var _managedCells$target;

	        target = indexMangler(indexDemangler(target) - 1);
	      }

	      return target < 0 ? initial : target;
	    } else if (searchDirection === 1) {
	      while (target < managedCells.length && managedCells[target] == null || !!((_managedCells$target2 = managedCells[target]) !== null && _managedCells$target2 !== void 0 && _managedCells$target2.hidden)) {
	        var _managedCells$target2;

	        target = indexMangler(indexDemangler(target) + 1);
	      }

	      return target >= managedCells.length ? initial : target;
	    } else {
	      return initial;
	    }
	  }

	  return helper();
	}

	D(null);

	function useDraggable(_ref) {
	  let {
	    effectAllowed,
	    data,
	    dragImage,
	    dragImageXOffset,
	    dragImageYOffset
	  } = _ref;
	  const [dragging, setDragging, getDragging] = useState(false);
	  const [lastDropEffect, setLastDropEffect, getLastDropEffect] = useState(null);
	  const useDraggableProps = F(p => {
	    const ref = s(null);

	    const onDragStart = e => {
	      //e.preventDefault();
	      setDragging(true);

	      if (e.dataTransfer) {
	        e.dataTransfer.effectAllowed = effectAllowed !== null && effectAllowed !== void 0 ? effectAllowed : "all";
	        if (dragImage) e.dataTransfer.setDragImage(dragImage, dragImageXOffset !== null && dragImageXOffset !== void 0 ? dragImageXOffset : 0, dragImageYOffset !== null && dragImageYOffset !== void 0 ? dragImageYOffset : 0);
	        const entries = Object.entries(data);

	        for (const [mimeType, data] of entries) {
	          e.dataTransfer.setData(mimeType, data);
	        }
	      }
	    };

	    const onDragEnd = e => {
	      e.preventDefault();
	      setDragging(false);

	      if (e.dataTransfer) {
	        if (e.dataTransfer.dropEffect != "none") {
	          setLastDropEffect(e.dataTransfer.dropEffect);
	        } else {
	          setLastDropEffect(null);
	        }
	      }
	    };

	    return useMergedProps()({
	      draggable: true,
	      onDragStart,
	      onDragEnd,
	      ref
	    }, p);
	  }, [effectAllowed, dragImage, dragImageXOffset, dragImageYOffset, ...Object.entries(data).flat()]); // Return both the element and the hook that modifies 
	  // the props and allows us to actually find the element

	  const ret = {
	    useDraggableProps,
	    dragging,
	    getDragging,
	    // Set once a drag has completed with the resulting action
	    // Useful for removing the element afterwards if it was "move"
	    lastDropEffect,

	    /**
	     * Test
	     */
	    getLastDropEffect
	  };
	  return ret;
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	class DroppableFileError extends Error {
	  constructor(fileName, base) {
	    var _base$message;

	    super((_base$message = base === null || base === void 0 ? void 0 : base.message) !== null && _base$message !== void 0 ? _base$message : "An unspecified error occurred reading the file.");

	    _defineProperty(this, "fileName", void 0);

	    _defineProperty(this, "errorType", void 0);

	    this.fileName = fileName;
	    this.errorType = base === null || base === void 0 ? void 0 : base.name;
	  }

	} //MergedProps<UseRefElementPropsReturnType<E, Pick<h.JSX.HTMLAttributes<E>, "onDragEnter" | "onDragLeave" | "onDragOver" | "onDrop">>, P>;

	function useDroppable(_ref) {
	  let {
	    effect
	  } = _ref;
	  const [filesForConsideration, setFilesForConsideration] = useState(null);
	  const [stringsForConsideration, setStringsForConsideration] = useState(null);
	  const [droppedFiles, setDroppedFiles] = useState(null);
	  const [droppedStrings, setDroppedStrings] = useState(null);
	  const [dropError, setDropError] = useState(undefined); // All the promises generated from the drop events.
	  // Used to process multiple drop events in succession

	  const dropPromisesRef = s([]);
	  const [currentPromiseIndex, setCurrentPromiseIndex, getCurrentPromiseIndex] = useState(-1);
	  const [promiseCount, setPromiseCount, getPromiseCount] = useState(0); // Any time we add a new promise, if there's no current promise running, we need to start one.
	  // If there is one, then we don't need to do anything, since it runs the same check.

	  y(() => {
	    const currentPromiseIndex = getCurrentPromiseIndex();
	    const promiseCount = getPromiseCount();

	    if (promiseCount > 0) {
	      if (currentPromiseIndex + 1 < promiseCount) {
	        setCurrentPromiseIndex(i => ++i);
	      }
	    }
	  }, [promiseCount]); // Anytime our current promise changes,
	  // wait for it to finish, then set our state to its result.
	  // Finally, check to see if there are anymore promises.
	  // If there are, then increase currentPromiseCount,
	  // which will trigger this again.
	  //
	  // This shouldn't happen *often*, but maybe in the case of
	  // individually dropping a bunch of large files or something.

	  y(() => {
	    if (currentPromiseIndex >= 0) {
	      const currentPromise = dropPromisesRef.current[currentPromiseIndex];
	      currentPromise.then(info => {
	        if (info !== null) {
	          const {
	            files,
	            strings
	          } = info;
	          setDroppedFiles(files);
	          setDroppedStrings(strings);
	        } // Now that we're done, are there more promises in the queue?


	        const currentPromiseIndex = getCurrentPromiseIndex();
	        const promiseCount = getPromiseCount();

	        if (currentPromiseIndex + 1 < promiseCount) {
	          // Since this promise has started, more have been added.
	          // Run this effect again.
	          setCurrentPromiseIndex(i => ++i);
	        }
	      });
	    }
	  }, [currentPromiseIndex]);

	  const useDroppableProps = p => {
	    //const ref = useRef<E>(null);
	    // Handle collecting the current file metadata or MIME types.
	    const onDragEnter = e => {
	      e.preventDefault();

	      if (e.dataTransfer) {
	        // Is there a default? I can't find one anywhere.
	        e.dataTransfer.dropEffect = effect !== null && effect !== void 0 ? effect : "move";
	        const newMimeTypes = new Set();
	        const newFiles = new Array();

	        for (const item of (_e$dataTransfer$items = (_e$dataTransfer = e.dataTransfer) === null || _e$dataTransfer === void 0 ? void 0 : _e$dataTransfer.items) !== null && _e$dataTransfer$items !== void 0 ? _e$dataTransfer$items : []) {
	          var _e$dataTransfer$items, _e$dataTransfer;

	          const {
	            kind,
	            type
	          } = item;

	          if (kind === "string") {
	            newMimeTypes.add(type);
	          } else if (kind === "file") {
	            newFiles.push({
	              type: item.type
	            });
	          }
	        }

	        setFilesForConsideration(newFiles);
	        setStringsForConsideration(newMimeTypes);
	      }
	    }; // Handle resetting the current file metadata or MIME types


	    const onDragLeave = e => {
	      e.preventDefault();
	      setFilesForConsideration(null);
	      setStringsForConsideration(null);
	    }; // Boilerplate, I guess


	    const onDragOver = e => {
	      e.preventDefault();
	    }; // Handle getting the drop data asynchronously


	    const onDrop = e => {
	      e.preventDefault();
	      setFilesForConsideration(null);
	      setStringsForConsideration(null);
	      const allPromises = new Array();
	      const dropData = {};
	      const dropFile = [];

	      for (const item of (_e$dataTransfer$items2 = (_e$dataTransfer2 = e.dataTransfer) === null || _e$dataTransfer2 === void 0 ? void 0 : _e$dataTransfer2.items) !== null && _e$dataTransfer$items2 !== void 0 ? _e$dataTransfer$items2 : []) {
	        var _e$dataTransfer$items2, _e$dataTransfer2;

	        const {
	          kind,
	          type
	        } = item;

	        if (kind === "string") {
	          allPromises.push(new Promise((resolve, _reject) => item.getAsString(resolve)).then(str => dropData[type] = str));
	        } else if (kind === "file") {
	          const file = item.getAsFile();

	          if (file) {
	            allPromises.push(new Promise((resolve, reject) => {
	              const reader = new FileReader();

	              reader.onload = _ => {
	                resolve();
	                const data = reader.result;
	                dropFile.push({
	                  data,
	                  name: file.name,
	                  type: file.type,
	                  size: data.byteLength,
	                  lastModified: file.lastModified
	                });
	              };

	              reader.onerror = _ => {
	                reject(new DroppableFileError(file.name, reader.error));
	              };

	              reader.onabort = _ => {
	                reject(new DroppableFileError(file.name, reader.error));
	              };

	              reader.readAsArrayBuffer(file);
	            }));
	            dropFile.push();
	          }
	        }
	      }

	      dropPromisesRef.current.push(Promise.all(allPromises).then(() => {
	        setPromiseCount(i => ++i);
	        setDropError(null);
	        return {
	          strings: dropData,
	          files: dropFile
	        };
	      }).catch(ex => {
	        /* eslint-disable no-debugger */
	        debugger;
	        setPromiseCount(i => ++i);
	        setDropError(ex);
	        return null;
	      }));
	    };

	    return useMergedProps()({
	      onDragEnter,
	      onDragLeave,
	      onDragOver,
	      onDrop
	    }, p);
	  };

	  return {
	    useDroppableProps,
	    filesForConsideration,
	    stringsForConsideration,
	    droppedFiles,
	    droppedStrings,
	    dropError
	  };
	}

	/**
	 * Allows attaching an event handler to any *non-Preact* element, and removing it when the component using the hook unmounts. The callback does not need to be stable across renders.
	 *
	 * Due to typing limitations, this function must be called like this:
	 *
	 * `useEventHandler(element, "input")<InputEvent>(e => {})`
	 *
	 * The type argument is optional, but narrows down the type from "a union of all events" to whatever you specify, and errors if it doesn't exist.
	 *
	 * There is a separate version that attaches event handlers to a set of props.
	 * It takes different event string types (onEvent vs onevent).
	 *
	 * @param target A *non-Preact* node to attach the event to.
	 * @returns
	 * *
	 */

	function useGlobalHandler(target, type, handler, options) {
	  // Note to self: The typing doesn't improve even if this is split up into a sub-function.
	  // No matter what, it seems impossible to get the handler's event object typed perfectly.
	  // It seems like it's guaranteed to always be a union of all available tupes.
	  // Again, no matter what combination of sub- or sub-sub-functions used.
	  let stableHandler = useStableCallback(handler !== null && handler !== void 0 ? handler : () => {});
	  if (handler == null) stableHandler = null;
	  y(() => {
	    if (stableHandler) {
	      target.addEventListener(type, stableHandler, options);
	      return () => target.removeEventListener(type, stableHandler, options);
	    }
	  }, [target, type, stableHandler]);
	}

	const activeElementUpdaters = new Map();
	const lastActiveElementUpdaters = new Map();
	const windowFocusedUpdaters = new Map();
	const windowsFocusedUpdaters = new Map();

	function forEachUpdater(window, map, value) {
	  for (const [otherWindow, updaters] of map) {
	    if (window === otherWindow) {
	      for (const updater of updaters) {
	        updater === null || updater === void 0 ? void 0 : updater(value);
	      }
	    }
	  }
	}

	function focusout(e) {
	  const window = e.target.ownerDocument.defaultView;

	  if (e.relatedTarget == null) {
	    forEachUpdater(window, activeElementUpdaters, null);
	  }
	}

	function focusin(e) {
	  const window = e.target.ownerDocument.defaultView;
	  const currentlyFocusedElement = e.target;
	  forEachUpdater(window, activeElementUpdaters, currentlyFocusedElement);
	  forEachUpdater(window, lastActiveElementUpdaters, currentlyFocusedElement);
	}

	function windowFocus(e) {
	  const window = e.target instanceof Window ? e.target : e.currentTarget instanceof Window ? e.currentTarget : e.target.ownerDocument.defaultView;
	  windowsFocusedUpdaters.set(window, true);
	  forEachUpdater(window, windowFocusedUpdaters, true);
	}

	function windowBlur(e) {
	  const window = e.target instanceof Window ? e.target : e.currentTarget instanceof Window ? e.currentTarget : e.target.ownerDocument.defaultView;
	  windowsFocusedUpdaters.set(window, false);
	  forEachUpdater(window, windowFocusedUpdaters, false);
	}
	/**
	 * Allows you to inspect which element in the `document` currently has focus, which was most recently focused if none are currently, and whether or not the window has focus by returning the following functions:
	 * * `getActiveElement()`
	 * * `getLastActiveElement()`
	 * * `getWindowFocused()`
	 *
	 * (The document's body receiving focus, like it does when you click on an empty area, is counted as no element having focus for all intents and purposes)
	 *
	 * This is a passive hook, so by default it returns getter functions that report this information but the component will not re-render by default when the active element changes.
	 *
	 * If you need the component to re-render when the active element changes, use the `on*Change` arguments to set some state on your end.
	 */


	function useActiveElement(_ref) {
	  let {
	    onActiveElementChange,
	    onLastActiveElementChange,
	    onWindowFocusedChange,
	    onMount,
	    onUnmount,
	    onMountChange
	  } = _ref;
	  useEnsureStability("useActiveElement", onActiveElementChange, onLastActiveElementChange, onWindowFocusedChange, onMountChange, onMount, onUnmount);
	  const {
	    getElement,
	    useRefElementProps
	  } = useRefElement({
	    onMount,
	    onUnmount,
	    onElementChange: F((element, prevValue) => {
	      onMountChange === null || onMountChange === void 0 ? void 0 : onMountChange(element, prevValue);

	      if (element) {
	        var _activeElementUpdater, _activeElementUpdater2, _activeElementUpdater3, _lastActiveElementUpd, _windowFocusedUpdater;

	        const document = element.ownerDocument;
	        const window = document === null || document === void 0 ? void 0 : document.defaultView;

	        if (((_activeElementUpdater = (_activeElementUpdater2 = activeElementUpdaters.get(window)) === null || _activeElementUpdater2 === void 0 ? void 0 : _activeElementUpdater2.size) !== null && _activeElementUpdater !== void 0 ? _activeElementUpdater : 0) === 0) {
	          document === null || document === void 0 ? void 0 : document.addEventListener("focusin", focusin, {
	            passive: true
	          });
	          document === null || document === void 0 ? void 0 : document.addEventListener("focusout", focusout, {
	            passive: true
	          });
	          window === null || window === void 0 ? void 0 : window.addEventListener("focus", windowFocus, {
	            passive: true
	          });
	          window === null || window === void 0 ? void 0 : window.addEventListener("blur", windowBlur, {
	            passive: true
	          });
	        } // Add them even if they're undefined to more easily
	        // manage the ">0 means don't add handlers" logic.


	        const localActiveElementUpdaters = (_activeElementUpdater3 = activeElementUpdaters.get(window)) !== null && _activeElementUpdater3 !== void 0 ? _activeElementUpdater3 : new Set();
	        const localLastActiveElementUpdaters = (_lastActiveElementUpd = lastActiveElementUpdaters.get(window)) !== null && _lastActiveElementUpd !== void 0 ? _lastActiveElementUpd : new Set();
	        const localWindowFocusedUpdaters = (_windowFocusedUpdater = windowFocusedUpdaters.get(window)) !== null && _windowFocusedUpdater !== void 0 ? _windowFocusedUpdater : new Set();
	        localActiveElementUpdaters.add(setActiveElement);
	        localLastActiveElementUpdaters.add(setLastActiveElement);
	        localWindowFocusedUpdaters.add(setWindowFocused);
	        activeElementUpdaters.set(window, localActiveElementUpdaters);
	        lastActiveElementUpdaters.set(window, localLastActiveElementUpdaters);
	        windowFocusedUpdaters.set(window, localWindowFocusedUpdaters);
	        return () => {
	          activeElementUpdaters.get(window).delete(setActiveElement);
	          lastActiveElementUpdaters.get(window).delete(setLastActiveElement);
	          windowFocusedUpdaters.get(window).delete(setWindowFocused);

	          if (activeElementUpdaters.size === 0) {
	            document === null || document === void 0 ? void 0 : document.removeEventListener("focusin", focusin);
	            document === null || document === void 0 ? void 0 : document.removeEventListener("focusout", focusout);
	            window === null || window === void 0 ? void 0 : window.removeEventListener("focus", windowFocus);
	            window === null || window === void 0 ? void 0 : window.removeEventListener("blur", windowBlur);
	          }
	        };
	      }
	    }, [])
	  });
	  const [getActiveElement, setActiveElement] = usePassiveState(onActiveElementChange, returnNull$1);
	  const [getLastActiveElement, setLastActiveElement] = usePassiveState(onLastActiveElementChange, returnNull$1);
	  const [getWindowFocused, setWindowFocused] = usePassiveState(onWindowFocusedChange, returnTrue);
	  return {
	    getElement,
	    useActiveElementProps: useRefElementProps,
	    getActiveElement,
	    getLastActiveElement,
	    getWindowFocused
	  };
	}

	function useHasFocus(_ref) {
	  let {
	    onFocusedChanged,
	    onFocusedInnerChanged,
	    onLastFocusedChanged,
	    onLastFocusedInnerChanged,
	    onLastActiveElementChange,
	    onActiveElementChange,
	    onWindowFocusedChange
	  } = _ref;
	  useEnsureStability("useHasFocus", onFocusedChanged, onFocusedInnerChanged, onLastFocusedChanged, onLastFocusedInnerChanged, onLastActiveElementChange, onActiveElementChange, onWindowFocusedChange);
	  const [getFocused, setFocused] = usePassiveState(onFocusedChanged, returnFalse$1);
	  const [getFocusedInner, setFocusedInner] = usePassiveState(onFocusedInnerChanged, returnFalse$1);
	  const [getLastFocused, setLastFocused] = usePassiveState(onLastFocusedChanged, returnFalse$1);
	  const [getLastFocusedInner, setLastFocusedInner] = usePassiveState(onLastFocusedInnerChanged, returnFalse$1);
	  const {
	    getActiveElement,
	    getLastActiveElement,
	    getWindowFocused,
	    useActiveElementProps,
	    getElement
	  } = useActiveElement({
	    onActiveElementChange: F((activeElement, prevActiveElement) => {
	      const selfElement = getElement();
	      const focused = selfElement != null && selfElement == activeElement;
	      const focusedInner = !!(selfElement !== null && selfElement !== void 0 && selfElement.contains(activeElement));
	      setFocused(focused);
	      setFocusedInner(focusedInner);
	      onActiveElementChange === null || onActiveElementChange === void 0 ? void 0 : onActiveElementChange(activeElement, prevActiveElement);
	    }, []),
	    onLastActiveElementChange: F((lastActiveElement, prevLastActiveElement) => {
	      const selfElement = getElement();
	      const focused = selfElement != null && selfElement == lastActiveElement;
	      const focusedInner = !!(selfElement !== null && selfElement !== void 0 && selfElement.contains(lastActiveElement));
	      setLastFocused(focused);
	      setLastFocusedInner(focusedInner);
	      onLastActiveElementChange === null || onLastActiveElementChange === void 0 ? void 0 : onLastActiveElementChange(lastActiveElement, prevLastActiveElement);
	    }, []),
	    onWindowFocusedChange
	  });
	  const useHasFocusProps = F(props => {
	    return useActiveElementProps(props);
	  }, [useActiveElementProps]);
	  return {
	    useHasFocusProps,
	    getElement,
	    getFocused,
	    getFocusedInner,
	    getLastFocused,
	    getLastFocusedInner,
	    getActiveElement,
	    getLastActiveElement,
	    getWindowFocused
	  };
	}

	function useInterval(_ref) {
	  let {
	    interval,
	    callback
	  } = _ref;
	  // Get a wrapper around the given callback that's stable
	  const stableCallback = useStableCallback(callback);
	  const getInterval = useStableGetter(interval);
	  y(() => {
	    const interval = getInterval();
	    let lastDelayUsed = interval;
	    if (interval == null) return; // Get a wrapper around the wrapper around the callback
	    // that clears and resets the interval if it changes.

	    const adjustableCallback = () => {
	      stableCallback();
	      const currentInterval = getInterval();

	      if (currentInterval != lastDelayUsed) {
	        clearInterval(handle);
	        if (currentInterval != null) handle = setInterval(adjustableCallback, lastDelayUsed = currentInterval);
	      }
	    };

	    let handle = setInterval(adjustableCallback, interval);
	    return () => clearInterval(handle);
	  }, []);
	}

	/*!
	* tabbable 5.3.3
	* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
	*/
	var candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]:not(slot)', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])', 'details>summary:first-of-type', 'details'];
	var NoElement = typeof Element === 'undefined';
	var matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
	var getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {
	  return element.getRootNode();
	} : function (element) {
	  return element.ownerDocument;
	};

	var isInput = function isInput(node) {
	  return node.tagName === 'INPUT';
	};

	var isHiddenInput = function isHiddenInput(node) {
	  return isInput(node) && node.type === 'hidden';
	};

	var isDetailsWithSummary = function isDetailsWithSummary(node) {
	  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {
	    return child.tagName === 'SUMMARY';
	  });
	  return r;
	};

	var isZeroArea = function isZeroArea(node) {
	  var _node$getBoundingClie = node.getBoundingClientRect(),
	      width = _node$getBoundingClie.width,
	      height = _node$getBoundingClie.height;

	  return width === 0 && height === 0;
	};

	var isHidden = function isHidden(node, _ref) {
	  var displayCheck = _ref.displayCheck,
	      getShadowRoot = _ref.getShadowRoot; // NOTE: visibility will be `undefined` if node is detached from the document
	  //  (see notes about this further down), which means we will consider it visible
	  //  (this is legacy behavior from a very long way back)
	  // NOTE: we check this regardless of `displayCheck="none"` because this is a
	  //  _visibility_ check, not a _display_ check

	  if (getComputedStyle(node).visibility === 'hidden') {
	    return true;
	  }

	  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');
	  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;

	  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {
	    return true;
	  } // The root node is the shadow root if the node is in a shadow DOM; some document otherwise
	  //  (but NOT _the_ document; see second 'If' comment below for more).
	  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow
	  //  is attached, and the one we need to check if it's in the document or not (because the
	  //  shadow, and all nodes it contains, is never considered in the document since shadows
	  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,
	  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's
	  //  visibility, including all the nodes it contains). The host could be any normal node,
	  //  or a custom element (i.e. web component). Either way, that's the one that is considered
	  //  part of the document, not the shadow root, nor any of its children (i.e. the node being
	  //  tested).
	  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the
	  //  document (per the docs) and while it's a Document-type object, that document does not
	  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer
	  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,
	  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when
	  //  node is actually detached.


	  var nodeRootHost = getRootNode(node).host;
	  var nodeIsAttached = (nodeRootHost === null || nodeRootHost === void 0 ? void 0 : nodeRootHost.ownerDocument.contains(nodeRootHost)) || node.ownerDocument.contains(node);

	  if (!displayCheck || displayCheck === 'full') {
	    if (typeof getShadowRoot === 'function') {
	      // figure out if we should consider the node to be in an undisclosed shadow and use the
	      //  'non-zero-area' fallback
	      var originalNode = node;

	      while (node) {
	        var parentElement = node.parentElement;
	        var rootNode = getRootNode(node);

	        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow
	        ) {
	          // node has an undisclosed shadow which means we can only treat it as a black box, so we
	          //  fall back to a non-zero-area test
	          return isZeroArea(node);
	        } else if (node.assignedSlot) {
	          // iterate up slot
	          node = node.assignedSlot;
	        } else if (!parentElement && rootNode !== node.ownerDocument) {
	          // cross shadow boundary
	          node = rootNode.host;
	        } else {
	          // iterate up normal dom
	          node = parentElement;
	        }
	      }

	      node = originalNode;
	    } // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support
	    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or
	    //  it might be a falsy value, which means shadow DOM support is disabled
	    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)
	    //  now we can just test to see if it would normally be visible or not, provided it's
	    //  attached to the main document.
	    // NOTE: We must consider case where node is inside a shadow DOM and given directly to
	    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.


	    if (nodeIsAttached) {
	      // this works wherever the node is: if there's at least one client rect, it's
	      //  somehow displayed; it also covers the CSS 'display: contents' case where the
	      //  node itself is hidden in place of its contents; and there's no need to search
	      //  up the hierarchy either
	      return !node.getClientRects().length;
	    } // Else, the node isn't attached to the document, which means the `getClientRects()`
	    //  API will __always__ return zero rects (this can happen, for example, if React
	    //  is used to render nodes onto a detached tree, as confirmed in this thread:
	    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)
	    //
	    // It also means that even window.getComputedStyle(node).display will return `undefined`
	    //  because styles are only computed for nodes that are in the document.
	    //
	    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable
	    //  somehow. Though it was never stated officially, anyone who has ever used tabbable
	    //  APIs on nodes in detached containers has actually implicitly used tabbable in what
	    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck="none"` mode -- essentially
	    //  considering __everything__ to be visible because of the innability to determine styles.

	  } else if (displayCheck === 'non-zero-area') {
	    // NOTE: Even though this tests that the node's client rect is non-zero to determine
	    //  whether it's displayed, and that a detached node will __always__ have a zero-area
	    //  client rect, we don't special-case for whether the node is attached or not. In
	    //  this mode, we do want to consider nodes that have a zero area to be hidden at all
	    //  times, and that includes attached or not.
	    return isZeroArea(node);
	  } // visible, as far as we can tell, or per current `displayCheck` mode


	  return false;
	}; // form fields (nested) inside a disabled fieldset are not focusable/tabbable
	//  unless they are in the _first_ <legend> element of the top-most disabled
	//  fieldset


	var isDisabledFromFieldset = function isDisabledFromFieldset(node) {
	  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
	    var parentNode = node.parentElement; // check if `node` is contained in a disabled <fieldset>

	    while (parentNode) {
	      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {
	        // look for the first <legend> among the children of the disabled <fieldset>
	        for (var i = 0; i < parentNode.children.length; i++) {
	          var child = parentNode.children.item(i); // when the first <legend> (in document order) is found

	          if (child.tagName === 'LEGEND') {
	            // if its parent <fieldset> is not nested in another disabled <fieldset>,
	            // return whether `node` is a descendant of its first <legend>
	            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);
	          }
	        } // the disabled <fieldset> containing `node` has no <legend>


	        return true;
	      }

	      parentNode = parentNode.parentElement;
	    }
	  } // else, node's tabbable/focusable state should not be affected by a fieldset's
	  //  enabled/disabled state


	  return false;
	};

	var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {
	  if (node.disabled || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
	  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
	    return false;
	  }

	  return true;
	};

	var focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');

	var isFocusable = function isFocusable(node, options) {
	  options = options || {};

	  if (!node) {
	    throw new Error('No node provided');
	  }

	  if (matches.call(node, focusableCandidateSelector) === false) {
	    return false;
	  }

	  return isNodeMatchingSelectorFocusable(options, node);
	};

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	(function (module, exports) {
	  (function (global, factory) {
	    factory() ;
	  })(commonjsGlobal, function () {

	    var _createClass = function () {
	      function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	          var descriptor = props[i];
	          descriptor.enumerable = descriptor.enumerable || false;
	          descriptor.configurable = true;
	          if ("value" in descriptor) descriptor.writable = true;
	          Object.defineProperty(target, descriptor.key, descriptor);
	        }
	      }

	      return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	      };
	    }();

	    function _classCallCheck(instance, Constructor) {
	      if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	      }
	    }
	    /**
	     * This work is licensed under the W3C Software and Document License
	     * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).
	     */


	    (function () {
	      // Return early if we're not running inside of the browser.
	      if (typeof window === 'undefined') {
	        return;
	      } // Convenience function for converting NodeLists.

	      /** @type {typeof Array.prototype.slice} */


	      var slice = Array.prototype.slice;
	      /**
	       * IE has a non-standard name for "matches".
	       * @type {typeof Element.prototype.matches}
	       */

	      var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;
	      /** @type {string} */

	      var _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'details', 'summary', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');
	      /**
	       * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`
	       * attribute.
	       *
	       * Its main functions are:
	       *
	       * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the
	       *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering
	       *   each focusable node in the subtree with the singleton `InertManager` which manages all known
	       *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`
	       *   instance exists for each focusable node which has at least one inert root as an ancestor.
	       *
	       * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`
	       *   attribute is removed from the root node). This is handled in the destructor, which calls the
	       *   `deregister` method on `InertManager` for each managed inert node.
	       */


	      var InertRoot = function () {
	        /**
	         * @param {!HTMLElement} rootElement The HTMLElement at the root of the inert subtree.
	         * @param {!InertManager} inertManager The global singleton InertManager object.
	         */
	        function InertRoot(rootElement, inertManager) {
	          _classCallCheck(this, InertRoot);
	          /** @type {!InertManager} */


	          this._inertManager = inertManager;
	          /** @type {!HTMLElement} */

	          this._rootElement = rootElement;
	          /**
	           * @type {!Set<!InertNode>}
	           * All managed focusable nodes in this InertRoot's subtree.
	           */

	          this._managedNodes = new Set(); // Make the subtree hidden from assistive technology

	          if (this._rootElement.hasAttribute('aria-hidden')) {
	            /** @type {?string} */
	            this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');
	          } else {
	            this._savedAriaHidden = null;
	          }

	          this._rootElement.setAttribute('aria-hidden', 'true'); // Make all focusable elements in the subtree unfocusable and add them to _managedNodes


	          this._makeSubtreeUnfocusable(this._rootElement); // Watch for:
	          // - any additions in the subtree: make them unfocusable too
	          // - any removals from the subtree: remove them from this inert root's managed nodes
	          // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable
	          //   element, make that node a managed node.


	          this._observer = new MutationObserver(this._onMutation.bind(this));

	          this._observer.observe(this._rootElement, {
	            attributes: true,
	            childList: true,
	            subtree: true
	          });
	        }
	        /**
	         * Call this whenever this object is about to become obsolete.  This unwinds all of the state
	         * stored in this object and updates the state of all of the managed nodes.
	         */


	        _createClass(InertRoot, [{
	          key: 'destructor',
	          value: function destructor() {
	            this._observer.disconnect();

	            if (this._rootElement) {
	              if (this._savedAriaHidden !== null) {
	                this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);
	              } else {
	                this._rootElement.removeAttribute('aria-hidden');
	              }
	            }

	            this._managedNodes.forEach(function (inertNode) {
	              this._unmanageNode(inertNode.node);
	            }, this); // Note we cast the nulls to the ANY type here because:
	            // 1) We want the class properties to be declared as non-null, or else we
	            //    need even more casts throughout this code. All bets are off if an
	            //    instance has been destroyed and a method is called.
	            // 2) We don't want to cast "this", because we want type-aware optimizations
	            //    to know which properties we're setting.


	            this._observer =
	            /** @type {?} */
	            null;
	            this._rootElement =
	            /** @type {?} */
	            null;
	            this._managedNodes =
	            /** @type {?} */
	            null;
	            this._inertManager =
	            /** @type {?} */
	            null;
	          }
	          /**
	           * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.
	           */

	        }, {
	          key: '_makeSubtreeUnfocusable',

	          /**
	           * @param {!Node} startNode
	           */
	          value: function _makeSubtreeUnfocusable(startNode) {
	            var _this2 = this;

	            composedTreeWalk(startNode, function (node) {
	              return _this2._visitNode(node);
	            });
	            var activeElement = document.activeElement;

	            if (!document.body.contains(startNode)) {
	              // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.
	              var node = startNode;
	              /** @type {!ShadowRoot|undefined} */

	              var root = undefined;

	              while (node) {
	                if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
	                  root =
	                  /** @type {!ShadowRoot} */
	                  node;
	                  break;
	                }

	                node = node.parentNode;
	              }

	              if (root) {
	                activeElement = root.activeElement;
	              }
	            }

	            if (startNode.contains(activeElement)) {
	              activeElement.blur(); // In IE11, if an element is already focused, and then set to tabindex=-1
	              // calling blur() will not actually move the focus.
	              // To work around this we call focus() on the body instead.

	              if (activeElement === document.activeElement) {
	                document.body.focus();
	              }
	            }
	          }
	          /**
	           * @param {!Node} node
	           */

	        }, {
	          key: '_visitNode',
	          value: function _visitNode(node) {
	            if (node.nodeType !== Node.ELEMENT_NODE) {
	              return;
	            }

	            var element =
	            /** @type {!HTMLElement} */
	            node; // If a descendant inert root becomes un-inert, its descendants will still be inert because of
	            // this inert root, so all of its managed nodes need to be adopted by this InertRoot.

	            if (element !== this._rootElement && element.hasAttribute('inert')) {
	              this._adoptInertRoot(element);
	            }

	            if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {
	              this._manageNode(element);
	            }
	          }
	          /**
	           * Register the given node with this InertRoot and with InertManager.
	           * @param {!Node} node
	           */

	        }, {
	          key: '_manageNode',
	          value: function _manageNode(node) {
	            var inertNode = this._inertManager.register(node, this);

	            this._managedNodes.add(inertNode);
	          }
	          /**
	           * Unregister the given node with this InertRoot and with InertManager.
	           * @param {!Node} node
	           */

	        }, {
	          key: '_unmanageNode',
	          value: function _unmanageNode(node) {
	            var inertNode = this._inertManager.deregister(node, this);

	            if (inertNode) {
	              this._managedNodes['delete'](inertNode);
	            }
	          }
	          /**
	           * Unregister the entire subtree starting at `startNode`.
	           * @param {!Node} startNode
	           */

	        }, {
	          key: '_unmanageSubtree',
	          value: function _unmanageSubtree(startNode) {
	            var _this3 = this;

	            composedTreeWalk(startNode, function (node) {
	              return _this3._unmanageNode(node);
	            });
	          }
	          /**
	           * If a descendant node is found with an `inert` attribute, adopt its managed nodes.
	           * @param {!HTMLElement} node
	           */

	        }, {
	          key: '_adoptInertRoot',
	          value: function _adoptInertRoot(node) {
	            var inertSubroot = this._inertManager.getInertRoot(node); // During initialisation this inert root may not have been registered yet,
	            // so register it now if need be.


	            if (!inertSubroot) {
	              this._inertManager.setInert(node, true);

	              inertSubroot = this._inertManager.getInertRoot(node);
	            }

	            inertSubroot.managedNodes.forEach(function (savedInertNode) {
	              this._manageNode(savedInertNode.node);
	            }, this);
	          }
	          /**
	           * Callback used when mutation observer detects subtree additions, removals, or attribute changes.
	           * @param {!Array<!MutationRecord>} records
	           * @param {!MutationObserver} self
	           */

	        }, {
	          key: '_onMutation',
	          value: function _onMutation(records, self) {
	            records.forEach(function (record) {
	              var target =
	              /** @type {!HTMLElement} */
	              record.target;

	              if (record.type === 'childList') {
	                // Manage added nodes
	                slice.call(record.addedNodes).forEach(function (node) {
	                  this._makeSubtreeUnfocusable(node);
	                }, this); // Un-manage removed nodes

	                slice.call(record.removedNodes).forEach(function (node) {
	                  this._unmanageSubtree(node);
	                }, this);
	              } else if (record.type === 'attributes') {
	                if (record.attributeName === 'tabindex') {
	                  // Re-initialise inert node if tabindex changes
	                  this._manageNode(target);
	                } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {
	                  // If a new inert root is added, adopt its managed nodes and make sure it knows about the
	                  // already managed nodes from this inert subroot.
	                  this._adoptInertRoot(target);

	                  var inertSubroot = this._inertManager.getInertRoot(target);

	                  this._managedNodes.forEach(function (managedNode) {
	                    if (target.contains(managedNode.node)) {
	                      inertSubroot._manageNode(managedNode.node);
	                    }
	                  });
	                }
	              }
	            }, this);
	          }
	        }, {
	          key: 'managedNodes',
	          get: function get() {
	            return new Set(this._managedNodes);
	          }
	          /** @return {boolean} */

	        }, {
	          key: 'hasSavedAriaHidden',
	          get: function get() {
	            return this._savedAriaHidden !== null;
	          }
	          /** @param {?string} ariaHidden */

	        }, {
	          key: 'savedAriaHidden',
	          set: function set(ariaHidden) {
	            this._savedAriaHidden = ariaHidden;
	          }
	          /** @return {?string} */
	          ,
	          get: function get() {
	            return this._savedAriaHidden;
	          }
	        }]);

	        return InertRoot;
	      }();
	      /**
	       * `InertNode` initialises and manages a single inert node.
	       * A node is inert if it is a descendant of one or more inert root elements.
	       *
	       * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and
	       * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element
	       * is intrinsically focusable or not.
	       *
	       * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an
	       * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the
	       * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s
	       * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,
	       * or removes the `tabindex` attribute if the element is intrinsically focusable.
	       */


	      var InertNode = function () {
	        /**
	         * @param {!Node} node A focusable element to be made inert.
	         * @param {!InertRoot} inertRoot The inert root element associated with this inert node.
	         */
	        function InertNode(node, inertRoot) {
	          _classCallCheck(this, InertNode);
	          /** @type {!Node} */


	          this._node = node;
	          /** @type {boolean} */

	          this._overrodeFocusMethod = false;
	          /**
	           * @type {!Set<!InertRoot>} The set of descendant inert roots.
	           *    If and only if this set becomes empty, this node is no longer inert.
	           */

	          this._inertRoots = new Set([inertRoot]);
	          /** @type {?number} */

	          this._savedTabIndex = null;
	          /** @type {boolean} */

	          this._destroyed = false; // Save any prior tabindex info and make this node untabbable

	          this.ensureUntabbable();
	        }
	        /**
	         * Call this whenever this object is about to become obsolete.
	         * This makes the managed node focusable again and deletes all of the previously stored state.
	         */


	        _createClass(InertNode, [{
	          key: 'destructor',
	          value: function destructor() {
	            this._throwIfDestroyed();

	            if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {
	              var element =
	              /** @type {!HTMLElement} */
	              this._node;

	              if (this._savedTabIndex !== null) {
	                element.setAttribute('tabindex', this._savedTabIndex);
	              } else {
	                element.removeAttribute('tabindex');
	              } // Use `delete` to restore native focus method.


	              if (this._overrodeFocusMethod) {
	                delete element.focus;
	              }
	            } // See note in InertRoot.destructor for why we cast these nulls to ANY.


	            this._node =
	            /** @type {?} */
	            null;
	            this._inertRoots =
	            /** @type {?} */
	            null;
	            this._destroyed = true;
	          }
	          /**
	           * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.
	           * If the object has been destroyed, any attempt to access it will cause an exception.
	           */

	        }, {
	          key: '_throwIfDestroyed',

	          /**
	           * Throw if user tries to access destroyed InertNode.
	           */
	          value: function _throwIfDestroyed() {
	            if (this.destroyed) {
	              throw new Error('Trying to access destroyed InertNode');
	            }
	          }
	          /** @return {boolean} */

	        }, {
	          key: 'ensureUntabbable',

	          /** Save the existing tabindex value and make the node untabbable and unfocusable */
	          value: function ensureUntabbable() {
	            if (this.node.nodeType !== Node.ELEMENT_NODE) {
	              return;
	            }

	            var element =
	            /** @type {!HTMLElement} */
	            this.node;

	            if (matches.call(element, _focusableElementsString)) {
	              if (
	              /** @type {!HTMLElement} */
	              element.tabIndex === -1 && this.hasSavedTabIndex) {
	                return;
	              }

	              if (element.hasAttribute('tabindex')) {
	                this._savedTabIndex =
	                /** @type {!HTMLElement} */
	                element.tabIndex;
	              }

	              element.setAttribute('tabindex', '-1');

	              if (element.nodeType === Node.ELEMENT_NODE) {
	                element.focus = function () {};

	                this._overrodeFocusMethod = true;
	              }
	            } else if (element.hasAttribute('tabindex')) {
	              this._savedTabIndex =
	              /** @type {!HTMLElement} */
	              element.tabIndex;
	              element.removeAttribute('tabindex');
	            }
	          }
	          /**
	           * Add another inert root to this inert node's set of managing inert roots.
	           * @param {!InertRoot} inertRoot
	           */

	        }, {
	          key: 'addInertRoot',
	          value: function addInertRoot(inertRoot) {
	            this._throwIfDestroyed();

	            this._inertRoots.add(inertRoot);
	          }
	          /**
	           * Remove the given inert root from this inert node's set of managing inert roots.
	           * If the set of managing inert roots becomes empty, this node is no longer inert,
	           * so the object should be destroyed.
	           * @param {!InertRoot} inertRoot
	           */

	        }, {
	          key: 'removeInertRoot',
	          value: function removeInertRoot(inertRoot) {
	            this._throwIfDestroyed();

	            this._inertRoots['delete'](inertRoot);

	            if (this._inertRoots.size === 0) {
	              this.destructor();
	            }
	          }
	        }, {
	          key: 'destroyed',
	          get: function get() {
	            return (
	              /** @type {!InertNode} */
	              this._destroyed
	            );
	          }
	        }, {
	          key: 'hasSavedTabIndex',
	          get: function get() {
	            return this._savedTabIndex !== null;
	          }
	          /** @return {!Node} */

	        }, {
	          key: 'node',
	          get: function get() {
	            this._throwIfDestroyed();

	            return this._node;
	          }
	          /** @param {?number} tabIndex */

	        }, {
	          key: 'savedTabIndex',
	          set: function set(tabIndex) {
	            this._throwIfDestroyed();

	            this._savedTabIndex = tabIndex;
	          }
	          /** @return {?number} */
	          ,
	          get: function get() {
	            this._throwIfDestroyed();

	            return this._savedTabIndex;
	          }
	        }]);

	        return InertNode;
	      }();
	      /**
	       * InertManager is a per-document singleton object which manages all inert roots and nodes.
	       *
	       * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`
	       * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.
	       * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant
	       * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance
	       * is created for each such node, via the `_managedNodes` map.
	       */


	      var InertManager = function () {
	        /**
	         * @param {!Document} document
	         */
	        function InertManager(document) {
	          _classCallCheck(this, InertManager);

	          if (!document) {
	            throw new Error('Missing required argument; InertManager needs to wrap a document.');
	          }
	          /** @type {!Document} */


	          this._document = document;
	          /**
	           * All managed nodes known to this InertManager. In a map to allow looking up by Node.
	           * @type {!Map<!Node, !InertNode>}
	           */

	          this._managedNodes = new Map();
	          /**
	           * All inert roots known to this InertManager. In a map to allow looking up by Node.
	           * @type {!Map<!Node, !InertRoot>}
	           */

	          this._inertRoots = new Map();
	          /**
	           * Observer for mutations on `document.body`.
	           * @type {!MutationObserver}
	           */

	          this._observer = new MutationObserver(this._watchForInert.bind(this)); // Add inert style.

	          addInertStyle(document.head || document.body || document.documentElement); // Wait for document to be loaded.

	          if (document.readyState === 'loading') {
	            document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));
	          } else {
	            this._onDocumentLoaded();
	          }
	        }
	        /**
	         * Set whether the given element should be an inert root or not.
	         * @param {!HTMLElement} root
	         * @param {boolean} inert
	         */


	        _createClass(InertManager, [{
	          key: 'setInert',
	          value: function setInert(root, inert) {
	            if (inert) {
	              if (this._inertRoots.has(root)) {
	                // element is already inert
	                return;
	              }

	              var inertRoot = new InertRoot(root, this);
	              root.setAttribute('inert', '');

	              this._inertRoots.set(root, inertRoot); // If not contained in the document, it must be in a shadowRoot.
	              // Ensure inert styles are added there.


	              if (!this._document.body.contains(root)) {
	                var parent = root.parentNode;

	                while (parent) {
	                  if (parent.nodeType === 11) {
	                    addInertStyle(parent);
	                  }

	                  parent = parent.parentNode;
	                }
	              }
	            } else {
	              if (!this._inertRoots.has(root)) {
	                // element is already non-inert
	                return;
	              }

	              var _inertRoot = this._inertRoots.get(root);

	              _inertRoot.destructor();

	              this._inertRoots['delete'](root);

	              root.removeAttribute('inert');
	            }
	          }
	          /**
	           * Get the InertRoot object corresponding to the given inert root element, if any.
	           * @param {!Node} element
	           * @return {!InertRoot|undefined}
	           */

	        }, {
	          key: 'getInertRoot',
	          value: function getInertRoot(element) {
	            return this._inertRoots.get(element);
	          }
	          /**
	           * Register the given InertRoot as managing the given node.
	           * In the case where the node has a previously existing inert root, this inert root will
	           * be added to its set of inert roots.
	           * @param {!Node} node
	           * @param {!InertRoot} inertRoot
	           * @return {!InertNode} inertNode
	           */

	        }, {
	          key: 'register',
	          value: function register(node, inertRoot) {
	            var inertNode = this._managedNodes.get(node);

	            if (inertNode !== undefined) {
	              // node was already in an inert subtree
	              inertNode.addInertRoot(inertRoot);
	            } else {
	              inertNode = new InertNode(node, inertRoot);
	            }

	            this._managedNodes.set(node, inertNode);

	            return inertNode;
	          }
	          /**
	           * De-register the given InertRoot as managing the given inert node.
	           * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert
	           * node from the InertManager's set of managed nodes if it is destroyed.
	           * If the node is not currently managed, this is essentially a no-op.
	           * @param {!Node} node
	           * @param {!InertRoot} inertRoot
	           * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.
	           */

	        }, {
	          key: 'deregister',
	          value: function deregister(node, inertRoot) {
	            var inertNode = this._managedNodes.get(node);

	            if (!inertNode) {
	              return null;
	            }

	            inertNode.removeInertRoot(inertRoot);

	            if (inertNode.destroyed) {
	              this._managedNodes['delete'](node);
	            }

	            return inertNode;
	          }
	          /**
	           * Callback used when document has finished loading.
	           */

	        }, {
	          key: '_onDocumentLoaded',
	          value: function _onDocumentLoaded() {
	            // Find all inert roots in document and make them actually inert.
	            var inertElements = slice.call(this._document.querySelectorAll('[inert]'));
	            inertElements.forEach(function (inertElement) {
	              this.setInert(inertElement, true);
	            }, this); // Comment this out to use programmatic API only.

	            this._observer.observe(this._document.body || this._document.documentElement, {
	              attributes: true,
	              subtree: true,
	              childList: true
	            });
	          }
	          /**
	           * Callback used when mutation observer detects attribute changes.
	           * @param {!Array<!MutationRecord>} records
	           * @param {!MutationObserver} self
	           */

	        }, {
	          key: '_watchForInert',
	          value: function _watchForInert(records, self) {
	            var _this = this;

	            records.forEach(function (record) {
	              switch (record.type) {
	                case 'childList':
	                  slice.call(record.addedNodes).forEach(function (node) {
	                    if (node.nodeType !== Node.ELEMENT_NODE) {
	                      return;
	                    }

	                    var inertElements = slice.call(node.querySelectorAll('[inert]'));

	                    if (matches.call(node, '[inert]')) {
	                      inertElements.unshift(node);
	                    }

	                    inertElements.forEach(function (inertElement) {
	                      this.setInert(inertElement, true);
	                    }, _this);
	                  }, _this);
	                  break;

	                case 'attributes':
	                  if (record.attributeName !== 'inert') {
	                    return;
	                  }

	                  var target =
	                  /** @type {!HTMLElement} */
	                  record.target;
	                  var inert = target.hasAttribute('inert');

	                  _this.setInert(target, inert);

	                  break;
	              }
	            }, this);
	          }
	        }]);

	        return InertManager;
	      }();
	      /**
	       * Recursively walk the composed tree from |node|.
	       * @param {!Node} node
	       * @param {(function (!HTMLElement))=} callback Callback to be called for each element traversed,
	       *     before descending into child nodes.
	       * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.
	       */


	      function composedTreeWalk(node, callback, shadowRootAncestor) {
	        if (node.nodeType == Node.ELEMENT_NODE) {
	          var element =
	          /** @type {!HTMLElement} */
	          node;

	          if (callback) {
	            callback(element);
	          } // Descend into node:
	          // If it has a ShadowRoot, ignore all child elements - these will be picked
	          // up by the <content> or <shadow> elements. Descend straight into the
	          // ShadowRoot.


	          var shadowRoot =
	          /** @type {!HTMLElement} */
	          element.shadowRoot;

	          if (shadowRoot) {
	            composedTreeWalk(shadowRoot, callback);
	            return;
	          } // If it is a <content> element, descend into distributed elements - these
	          // are elements from outside the shadow root which are rendered inside the
	          // shadow DOM.


	          if (element.localName == 'content') {
	            var content =
	            /** @type {!HTMLContentElement} */
	            element; // Verifies if ShadowDom v0 is supported.

	            var distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];

	            for (var i = 0; i < distributedNodes.length; i++) {
	              composedTreeWalk(distributedNodes[i], callback);
	            }

	            return;
	          } // If it is a <slot> element, descend into assigned nodes - these
	          // are elements from outside the shadow root which are rendered inside the
	          // shadow DOM.


	          if (element.localName == 'slot') {
	            var slot =
	            /** @type {!HTMLSlotElement} */
	            element; // Verify if ShadowDom v1 is supported.

	            var _distributedNodes = slot.assignedNodes ? slot.assignedNodes({
	              flatten: true
	            }) : [];

	            for (var _i = 0; _i < _distributedNodes.length; _i++) {
	              composedTreeWalk(_distributedNodes[_i], callback);
	            }

	            return;
	          }
	        } // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>
	        // element, nor a <shadow> element recurse normally.


	        var child = node.firstChild;

	        while (child != null) {
	          composedTreeWalk(child, callback);
	          child = child.nextSibling;
	        }
	      }
	      /**
	       * Adds a style element to the node containing the inert specific styles
	       * @param {!Node} node
	       */


	      function addInertStyle(node) {
	        if (node.querySelector('style#inert-style, link#inert-style')) {
	          return;
	        }

	        var style = document.createElement('style');
	        style.setAttribute('id', 'inert-style');
	        style.textContent = '\n' + '[inert] {\n' + '  pointer-events: none;\n' + '  cursor: default;\n' + '}\n' + '\n' + '[inert], [inert] * {\n' + '  -webkit-user-select: none;\n' + '  -moz-user-select: none;\n' + '  -ms-user-select: none;\n' + '  user-select: none;\n' + '}\n';
	        node.appendChild(style);
	      }

	      if (!HTMLElement.prototype.hasOwnProperty('inert')) {
	        /** @type {!InertManager} */
	        var inertManager = new InertManager(document);
	        Object.defineProperty(HTMLElement.prototype, 'inert', {
	          enumerable: true,

	          /** @this {!HTMLElement} */
	          get: function get() {
	            return this.hasAttribute('inert');
	          },

	          /** @this {!HTMLElement} */
	          set: function set(inert) {
	            inertManager.setInert(this, inert);
	          }
	        });
	      }
	    })();
	  });
	})();

	/**
	 * @license
	 * Copyright 2016 Google Inc. All rights reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	(() => {
	  var _a, _b, _c;
	  /* Symbols for private properties */


	  const _blockingElements = Symbol();

	  const _alreadyInertElements = Symbol();

	  const _topElParents = Symbol();

	  const _siblingsToRestore = Symbol();

	  const _parentMO = Symbol();
	  /* Symbols for private static methods */


	  const _topChanged = Symbol();

	  const _swapInertedSibling = Symbol();

	  const _inertSiblings = Symbol();

	  const _restoreInertedSiblings = Symbol();

	  const _getParents = Symbol();

	  const _getDistributedChildren = Symbol();

	  const _isInertable = Symbol();

	  const _handleMutations = Symbol();

	  class BlockingElementsImpl {
	    constructor() {
	      /**
	       * The blocking elements.
	       */
	      this[_a] = [];
	      /**
	       * Used to keep track of the parents of the top element, from the element
	       * itself up to body. When top changes, the old top might have been removed
	       * from the document, so we need to memoize the inerted parents' siblings
	       * in order to restore their inerteness when top changes.
	       */

	      this[_b] = [];
	      /**
	       * Elements that are already inert before the first blocking element is
	       * pushed.
	       */

	      this[_c] = new Set();
	    }

	    destructor() {
	      // Restore original inertness.
	      this[_restoreInertedSiblings](this[_topElParents]); // Note we don't want to make these properties nullable on the class,
	      // since then we'd need non-null casts in many places. Calling a method on
	      // a BlockingElements instance after calling destructor will result in an
	      // exception.


	      const nullable = this;
	      nullable[_blockingElements] = null;
	      nullable[_topElParents] = null;
	      nullable[_alreadyInertElements] = null;
	    }

	    get top() {
	      const elems = this[_blockingElements];
	      return elems[elems.length - 1] || null;
	    }

	    push(element) {
	      if (!element || element === this.top) {
	        return;
	      } // Remove it from the stack, we'll bring it to the top.


	      this.remove(element);

	      this[_topChanged](element);

	      this[_blockingElements].push(element);
	    }

	    remove(element) {
	      const i = this[_blockingElements].indexOf(element);

	      if (i === -1) {
	        return false;
	      }

	      this[_blockingElements].splice(i, 1); // Top changed only if the removed element was the top element.


	      if (i === this[_blockingElements].length) {
	        this[_topChanged](this.top);
	      }

	      return true;
	    }

	    pop() {
	      const top = this.top;
	      top && this.remove(top);
	      return top;
	    }

	    has(element) {
	      return this[_blockingElements].indexOf(element) !== -1;
	    }
	    /**
	     * Sets `inert` to all document elements except the new top element, its
	     * parents, and its distributed content.
	     */


	    [(_a = _blockingElements, _b = _topElParents, _c = _alreadyInertElements, _topChanged)](newTop) {
	      const toKeepInert = this[_alreadyInertElements];
	      const oldParents = this[_topElParents]; // No new top, reset old top if any.

	      if (!newTop) {
	        this[_restoreInertedSiblings](oldParents);

	        toKeepInert.clear();
	        this[_topElParents] = [];
	        return;
	      }

	      const newParents = this[_getParents](newTop); // New top is not contained in the main document!


	      if (newParents[newParents.length - 1].parentNode !== document.body) {
	        throw Error('Non-connected element cannot be a blocking element');
	      } // Cast here because we know we'll call _inertSiblings on newParents
	      // below.


	      this[_topElParents] = newParents;

	      const toSkip = this[_getDistributedChildren](newTop); // No previous top element.


	      if (!oldParents.length) {
	        this[_inertSiblings](newParents, toSkip, toKeepInert);

	        return;
	      }

	      let i = oldParents.length - 1;
	      let j = newParents.length - 1; // Find common parent. Index 0 is the element itself (so stop before it).

	      while (i > 0 && j > 0 && oldParents[i] === newParents[j]) {
	        i--;
	        j--;
	      } // If up the parents tree there are 2 elements that are siblings, swap
	      // the inerted sibling.


	      if (oldParents[i] !== newParents[j]) {
	        this[_swapInertedSibling](oldParents[i], newParents[j]);
	      } // Restore old parents siblings inertness.


	      i > 0 && this[_restoreInertedSiblings](oldParents.slice(0, i)); // Make new parents siblings inert.

	      j > 0 && this[_inertSiblings](newParents.slice(0, j), toSkip, null);
	    }
	    /**
	     * Swaps inertness between two sibling elements.
	     * Sets the property `inert` over the attribute since the inert spec
	     * doesn't specify if it should be reflected.
	     * https://html.spec.whatwg.org/multipage/interaction.html#inert
	     */


	    [_swapInertedSibling](oldInert, newInert) {
	      const siblingsToRestore = oldInert[_siblingsToRestore]; // oldInert is not contained in siblings to restore, so we have to check
	      // if it's inertable and if already inert.

	      if (this[_isInertable](oldInert) && !oldInert.inert) {
	        oldInert.inert = true;
	        siblingsToRestore.add(oldInert);
	      } // If newInert was already between the siblings to restore, it means it is
	      // inertable and must be restored.


	      if (siblingsToRestore.has(newInert)) {
	        newInert.inert = false;
	        siblingsToRestore.delete(newInert);
	      }

	      newInert[_parentMO] = oldInert[_parentMO];
	      newInert[_siblingsToRestore] = siblingsToRestore;
	      oldInert[_parentMO] = undefined;
	      oldInert[_siblingsToRestore] = undefined;
	    }
	    /**
	     * Restores original inertness to the siblings of the elements.
	     * Sets the property `inert` over the attribute since the inert spec
	     * doesn't specify if it should be reflected.
	     * https://html.spec.whatwg.org/multipage/interaction.html#inert
	     */


	    [_restoreInertedSiblings](elements) {
	      for (const element of elements) {
	        const mo = element[_parentMO];
	        mo.disconnect();
	        element[_parentMO] = undefined;
	        const siblings = element[_siblingsToRestore];

	        for (const sibling of siblings) {
	          sibling.inert = false;
	        }

	        element[_siblingsToRestore] = undefined;
	      }
	    }
	    /**
	     * Inerts the siblings of the elements except the elements to skip. Stores
	     * the inerted siblings into the element's symbol `_siblingsToRestore`.
	     * Pass `toKeepInert` to collect the already inert elements.
	     * Sets the property `inert` over the attribute since the inert spec
	     * doesn't specify if it should be reflected.
	     * https://html.spec.whatwg.org/multipage/interaction.html#inert
	     */


	    [_inertSiblings](elements, toSkip, toKeepInert) {
	      for (const element of elements) {
	        // Assume element is not a Document, so it must have a parentNode.
	        const parent = element.parentNode;
	        const children = parent.children;
	        const inertedSiblings = new Set();

	        for (let j = 0; j < children.length; j++) {
	          const sibling = children[j]; // Skip the input element, if not inertable or to be skipped.

	          if (sibling === element || !this[_isInertable](sibling) || toSkip && toSkip.has(sibling)) {
	            continue;
	          } // Should be collected since already inerted.


	          if (toKeepInert && sibling.inert) {
	            toKeepInert.add(sibling);
	          } else {
	            sibling.inert = true;
	            inertedSiblings.add(sibling);
	          }
	        } // Store the siblings that were inerted.


	        element[_siblingsToRestore] = inertedSiblings; // Observe only immediate children mutations on the parent.

	        const mo = new MutationObserver(this[_handleMutations].bind(this));
	        element[_parentMO] = mo;
	        let parentToObserve = parent; // If we're using the ShadyDOM polyfill, then our parent could be a
	        // shady root, which is an object that acts like a ShadowRoot, but isn't
	        // actually a node in the real DOM. Observe the real DOM parent instead.

	        const maybeShadyRoot = parentToObserve;

	        if (maybeShadyRoot.__shady && maybeShadyRoot.host) {
	          parentToObserve = maybeShadyRoot.host;
	        }

	        mo.observe(parentToObserve, {
	          childList: true
	        });
	      }
	    }
	    /**
	     * Handles newly added/removed nodes by toggling their inertness.
	     * It also checks if the current top Blocking Element has been removed,
	     * notifying and removing it.
	     */


	    [_handleMutations](mutations) {
	      const parents = this[_topElParents];
	      const toKeepInert = this[_alreadyInertElements];

	      for (const mutation of mutations) {
	        // If the target is a shadowRoot, get its host as we skip shadowRoots when
	        // computing _topElParents.
	        const target = mutation.target.host || mutation.target;
	        const idx = target === document.body ? parents.length : parents.indexOf(target);
	        const inertedChild = parents[idx - 1];
	        const inertedSiblings = inertedChild[_siblingsToRestore]; // To restore.

	        for (let i = 0; i < mutation.removedNodes.length; i++) {
	          const sibling = mutation.removedNodes[i];

	          if (sibling === inertedChild) {
	            console.info('Detected removal of the top Blocking Element.');
	            this.pop();
	            return;
	          }

	          if (inertedSiblings.has(sibling)) {
	            sibling.inert = false;
	            inertedSiblings.delete(sibling);
	          }
	        } // To inert.


	        for (let i = 0; i < mutation.addedNodes.length; i++) {
	          const sibling = mutation.addedNodes[i];

	          if (!this[_isInertable](sibling)) {
	            continue;
	          }

	          if (toKeepInert && sibling.inert) {
	            toKeepInert.add(sibling);
	          } else {
	            sibling.inert = true;
	            inertedSiblings.add(sibling);
	          }
	        }
	      }
	    }
	    /**
	     * Returns if the element is inertable.
	     */


	    [_isInertable](element) {
	      return false === /^(style|template|script)$/.test(element.localName);
	    }
	    /**
	     * Returns the list of newParents of an element, starting from element
	     * (included) up to `document.body` (excluded).
	     */


	    [_getParents](element) {
	      const parents = [];
	      let current = element; // Stop to body.

	      while (current && current !== document.body) {
	        // Skip shadow roots.
	        if (current.nodeType === Node.ELEMENT_NODE) {
	          parents.push(current);
	        } // ShadowDom v1


	        if (current.assignedSlot) {
	          // Collect slots from deepest slot to top.
	          while (current = current.assignedSlot) {
	            parents.push(current);
	          } // Continue the search on the top slot.


	          current = parents.pop();
	          continue;
	        }

	        current = current.parentNode || current.host;
	      }

	      return parents;
	    }
	    /**
	     * Returns the distributed children of the element's shadow root.
	     * Returns null if the element doesn't have a shadow root.
	     */


	    [_getDistributedChildren](element) {
	      const shadowRoot = element.shadowRoot;

	      if (!shadowRoot) {
	        return null;
	      }

	      const result = new Set();
	      let i;
	      let j;
	      let nodes;
	      const slots = shadowRoot.querySelectorAll('slot');

	      if (slots.length && slots[0].assignedNodes) {
	        for (i = 0; i < slots.length; i++) {
	          nodes = slots[i].assignedNodes({
	            flatten: true
	          });

	          for (j = 0; j < nodes.length; j++) {
	            if (nodes[j].nodeType === Node.ELEMENT_NODE) {
	              result.add(nodes[j]);
	            }
	          }
	        } // No need to search for <content>.

	      }

	      return result;
	    }

	  }

	  document.$blockingElements = new BlockingElementsImpl();
	})();

	function blockingElements() {
	  return getDocument().$blockingElements;
	}
	/**
	 * Allows an element to trap focus by applying the "inert" attribute to all sibling, aunt, and uncle nodes.
	 *
	 * Automatically handles consecutive calls with a loosely applied stack operation
	 * (specifically via `blockingElements`, with a small polyfill because I'm not sure how long
	 * it'll take to find its way into the spec, if ever)
	 * @param target
	 */


	function useBlockingElement(enabled, getTarget) {
	  const stableGetTarget = useStableCallback(getTarget);
	  /**
	   * Push/pop the element from the blockingElements stack.
	   */

	  h(() => {
	    const target = stableGetTarget();

	    if (enabled) {
	      // Sometimes blockingElements will fail if, for example,
	      // the target element isn't connected to document.body.
	      // This is rare, but it's better to fail silently with weird tabbing behavior
	      // than to crash the entire application.
	      try {
	        blockingElements().push(target);
	        return () => {
	          blockingElements().remove(target);
	        };
	      } catch (ex) {
	        // Well, semi-silently.
	        console.error(ex);
	      }
	    }
	  }, [enabled]);
	}
	function getTopElement() {
	  return blockingElements().top;
	}

	const elementsToRestoreFocusTo = new Map();
	function useFocusTrap(_ref) {
	  let {
	    trapActive
	  } = _ref;
	  const handleActiveChange = F((trapActive, element) => {
	    if (trapActive && element) {
	      let rafHandle = requestAnimationFrame(() => {
	        // TODO: This extra queueMicrotask is needed for
	        // ...reasons?
	        queueMicrotask(() => {
	          var _findFirstFocusable;

	          (_findFirstFocusable = findFirstFocusable(element)) === null || _findFirstFocusable === void 0 ? void 0 : _findFirstFocusable.focus();
	          rafHandle = 0;
	        });
	      });
	      return () => {
	        if (rafHandle) cancelAnimationFrame(rafHandle);
	      };
	    } else if (element) {
	      // Restore the focus to the element
	      // that has returned to the top of the stack
	      let rafHandle = requestAnimationFrame(() => {
	        queueMicrotask(() => {
	          var _elementsToRestoreFoc;

	          (_elementsToRestoreFoc = elementsToRestoreFocusTo.get(getTopElement())) === null || _elementsToRestoreFoc === void 0 ? void 0 : _elementsToRestoreFoc.focus();
	          rafHandle = 0;
	        });
	      });
	      return () => {
	        if (rafHandle) cancelAnimationFrame(rafHandle);
	      };
	    }
	  }, []);
	  const {
	    getLastActiveElement,
	    useActiveElementProps,
	    getElement
	  } = useActiveElement({
	    onMountChange: useStableCallback(element => handleActiveChange(trapActive, element))
	  }); // When the trap becomes active, before we let the blockingElements hook run,
	  // keep track of whatever's currently focused and save it.

	  h(() => {
	    const element = getElement();

	    if (trapActive && element) {
	      var _getLastActiveElement;

	      const document = getDocument(element); // Save the currently focused element
	      // to whatever's currently at the top of the stack

	      elementsToRestoreFocusTo.set(getTopElement(), (_getLastActiveElement = getLastActiveElement()) !== null && _getLastActiveElement !== void 0 ? _getLastActiveElement : document.body);
	    }
	  }, [trapActive]);
	  useBlockingElement(trapActive, getElement);
	  /**
	   * Any time we activate or deactivate the trap,
	   * change focus to something else (something in
	   * the trap if it's active, or whatever we've
	   * tracked in elementsToRestoreFocusTo if not)
	   */

	  h(() => {
	    handleActiveChange(trapActive, getElement());
	  }, [trapActive]);

	  const useFocusTrapProps = props => {
	    const p1 = useActiveElementProps(props);
	    const p2 = {
	      "aria-modal": trapActive ? "true" : undefined
	    };
	    return useMergedProps()(p1, p2);
	  };

	  return {
	    useFocusTrapProps,
	    getElement
	  };
	}
	/**
	 * Returns the first focusable element contained within the given node, or null if none are found.
	 * @param element
	 * @returns
	 */

	function findFirstFocusable(element) {
	  const treeWalker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {
	    acceptNode: node => node instanceof Element && isFocusable(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP
	  });
	  const firstFocusable = treeWalker.firstChild();
	  return firstFocusable;
	}

	function C(n, t) {
	  for (var e in t) n[e] = t[e];

	  return n;
	}

	function S(n, t) {
	  for (var e in n) if ("__source" !== e && !(e in t)) return !0;

	  for (var r in t) if ("__source" !== r && n[r] !== t[r]) return !0;

	  return !1;
	}

	function E(n) {
	  this.props = n;
	}

	function g(n, t) {
	  function e(n) {
	    var e = this.props.ref,
	        r = e == n.ref;
	    return !r && e && (e.call ? e(null) : e.current = null), t ? !t(this.props, n) || !r : S(this.props, n);
	  }

	  function r(t) {
	    return this.shouldComponentUpdate = e, v$1(n, t);
	  }

	  return r.displayName = "Memo(" + (n.displayName || n.name) + ")", r.prototype.isReactComponent = !0, r.__f = !0, r;
	}

	(E.prototype = new _()).isPureReactComponent = !0, E.prototype.shouldComponentUpdate = function (n, t) {
	  return S(this.props, n) || S(this.state, t);
	};
	var w = l$1.__b;

	l$1.__b = function (n) {
	  n.type && n.type.__f && n.ref && (n.props.ref = n.ref, n.ref = null), w && w(n);
	};

	var A = l$1.__e;

	l$1.__e = function (n, t, e, r) {
	  if (n.then) for (var u, o = t; o = o.__;) if ((u = o.__c) && u.__c) return null == t.__e && (t.__e = e.__e, t.__k = e.__k), u.__c(n, t);
	  A(n, t, e, r);
	};

	var O = l$1.unmount;

	function L() {
	  this.__u = 0, this.t = null, this.__b = null;
	}

	function U(n) {
	  var t = n.__.__c;
	  return t && t.__e && t.__e(n);
	}

	function M() {
	  this.u = null, this.o = null;
	}

	l$1.unmount = function (n) {
	  var t = n.__c;
	  t && t.__R && t.__R(), t && !0 === n.__h && (n.type = null), O && O(n);
	}, (L.prototype = new _()).__c = function (n, t) {
	  var e = t.__c,
	      r = this;
	  null == r.t && (r.t = []), r.t.push(e);

	  var u = U(r.__v),
	      o = !1,
	      i = function () {
	    o || (o = !0, e.__R = null, u ? u(l) : l());
	  };

	  e.__R = i;

	  var l = function () {
	    if (! --r.__u) {
	      if (r.state.__e) {
	        var n = r.state.__e;

	        r.__v.__k[0] = function n(t, e, r) {
	          return t && (t.__v = null, t.__k = t.__k && t.__k.map(function (t) {
	            return n(t, e, r);
	          }), t.__c && t.__c.__P === e && (t.__e && r.insertBefore(t.__e, t.__d), t.__c.__e = !0, t.__c.__P = r)), t;
	        }(n, n.__c.__P, n.__c.__O);
	      }

	      var t;

	      for (r.setState({
	        __e: r.__b = null
	      }); t = r.t.pop();) t.forceUpdate();
	    }
	  },
	      f = !0 === t.__h;

	  r.__u++ || f || r.setState({
	    __e: r.__b = r.__v.__k[0]
	  }), n.then(i, i);
	}, L.prototype.componentWillUnmount = function () {
	  this.t = [];
	}, L.prototype.render = function (n, t) {
	  if (this.__b) {
	    if (this.__v.__k) {
	      var e = document.createElement("div"),
	          r = this.__v.__k[0].__c;

	      this.__v.__k[0] = function n(t, e, r) {
	        return t && (t.__c && t.__c.__H && (t.__c.__H.__.forEach(function (n) {
	          "function" == typeof n.__c && n.__c();
	        }), t.__c.__H = null), null != (t = C({}, t)).__c && (t.__c.__P === r && (t.__c.__P = e), t.__c = null), t.__k = t.__k && t.__k.map(function (t) {
	          return n(t, e, r);
	        })), t;
	      }(this.__b, e, r.__O = r.__P);
	    }

	    this.__b = null;
	  }

	  var u = t.__e && v$1(d$1, null, n.fallback);
	  return u && (u.__h = null), [v$1(d$1, null, t.__e ? null : n.children), u];
	};

	var T = function (n, t, e) {
	  if (++e[1] === e[0] && n.o.delete(t), n.props.revealOrder && ("t" !== n.props.revealOrder[0] || !n.o.size)) for (e = n.u; e;) {
	    for (; e.length > 3;) e.pop()();

	    if (e[1] < e[0]) break;
	    n.u = e = e[2];
	  }
	};

	(M.prototype = new _()).__e = function (n) {
	  var t = this,
	      e = U(t.__v),
	      r = t.o.get(n);
	  return r[0]++, function (u) {
	    var o = function () {
	      t.props.revealOrder ? (r.push(u), T(t, n, r)) : u();
	    };

	    e ? e(o) : o();
	  };
	}, M.prototype.render = function (n) {
	  this.u = null, this.o = new Map();
	  var t = A$2(n.children);
	  n.revealOrder && "b" === n.revealOrder[0] && t.reverse();

	  for (var e = t.length; e--;) this.o.set(t[e], this.u = [1, 0, this.u]);

	  return n.children;
	}, M.prototype.componentDidUpdate = M.prototype.componentDidMount = function () {
	  var n = this;
	  this.o.forEach(function (t, e) {
	    T(n, e, t);
	  });
	};

	var P = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103,
	    V = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,
	    j = "undefined" != typeof document,
	    z = function (n) {
	  return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/i : /fil|che|ra/i).test(n);
	};

	_.prototype.isReactComponent = {}, ["componentWillMount", "componentWillReceiveProps", "componentWillUpdate"].forEach(function (n) {
	  Object.defineProperty(_.prototype, n, {
	    configurable: !0,
	    get: function () {
	      return this["UNSAFE_" + n];
	    },
	    set: function (t) {
	      Object.defineProperty(this, n, {
	        configurable: !0,
	        writable: !0,
	        value: t
	      });
	    }
	  });
	});
	var H = l$1.event;

	function Z() {}

	function Y() {
	  return this.cancelBubble;
	}

	function q() {
	  return this.defaultPrevented;
	}

	l$1.event = function (n) {
	  return H && (n = H(n)), n.persist = Z, n.isPropagationStopped = Y, n.isDefaultPrevented = q, n.nativeEvent = n;
	};

	var J = {
	  configurable: !0,
	  get: function () {
	    return this.class;
	  }
	},
	    K = l$1.vnode;

	l$1.vnode = function (n) {
	  var t = n.type,
	      e = n.props,
	      r = e;

	  if ("string" == typeof t) {
	    var u = -1 === t.indexOf("-");

	    for (var o in r = {}, e) {
	      var i = e[o];
	      j && "children" === o && "noscript" === t || "value" === o && "defaultValue" in e && null == i || ("defaultValue" === o && "value" in e && null == e.value ? o = "value" : "download" === o && !0 === i ? i = "" : /ondoubleclick/i.test(o) ? o = "ondblclick" : /^onchange(textarea|input)/i.test(o + t) && !z(e.type) ? o = "oninput" : /^onfocus$/i.test(o) ? o = "onfocusin" : /^onblur$/i.test(o) ? o = "onfocusout" : /^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(o) ? o = o.toLowerCase() : u && V.test(o) ? o = o.replace(/[A-Z0-9]/, "-$&").toLowerCase() : null === i && (i = void 0), /^oninput/i.test(o) && (o = o.toLowerCase(), r[o] && (o = "oninputCapture")), r[o] = i);
	    }

	    "select" == t && r.multiple && Array.isArray(r.value) && (r.value = A$2(e.children).forEach(function (n) {
	      n.props.selected = -1 != r.value.indexOf(n.props.value);
	    })), "select" == t && null != r.defaultValue && (r.value = A$2(e.children).forEach(function (n) {
	      n.props.selected = r.multiple ? -1 != r.defaultValue.indexOf(n.props.value) : r.defaultValue == n.props.value;
	    })), n.props = r, e.class != e.className && (J.enumerable = "className" in e, null != e.className && (r.class = e.className), Object.defineProperty(r, "className", J));
	  }

	  n.$$typeof = P, K && K(n);
	};

	var Q = l$1.__r;

	l$1.__r = function (n) {
	  Q && Q(n), n.__c;
	};

	const EventDetail = Symbol("event-detail");
	function enhanceEvent(e, detail) {
	  const event = e;
	  event[EventDetail] = detail;
	  return event;
	}

	let pulse = "vibrate" in navigator ? () => navigator.vibrate(10) : () => {};

	function excludes(target, exclude) {
	  if (exclude !== null && exclude !== void 0 && exclude[target]) return true;
	  return false;
	}
	/**
	 * selection.containsNode doesn't account for selection.isCollapsed,
	 * so here's a workaround for that.
	 *
	 * We also only look for the selection end to only catch the
	 * essense of a non-existant "selectionstop" event.
	 *
	 * @param element
	 * @returns
	 */


	function nodeSelectedTextLength(element) {
	  if (element && element instanceof Node) {
	    const selection = window.getSelection();

	    for (let i = 0; i < ((_selection$rangeCount = selection === null || selection === void 0 ? void 0 : selection.rangeCount) !== null && _selection$rangeCount !== void 0 ? _selection$rangeCount : 0); ++i) {
	      var _selection$rangeCount;

	      const range = selection.getRangeAt(i);

	      if (element.contains(range.endContainer) && !(selection !== null && selection !== void 0 && selection.isCollapsed)) {
	        return selection.toString().length;
	      }
	    }
	  }

	  return 0;
	}
	/**
	 * Adds the necessary event handlers to create a "press"-like event for
	 * buttons and anything else that's "click/tap/press/touch"-able.
	 *
	 * Notably, the following cases are covered:
	 * * The target element is properly focused, even on iOS Safari (*especially* on iOS Safari)
	 * * Double-clicks won't select text.
	 * * Conversely, manually selecting text won't invoke a press.
	 * * Keyboard events &mdash; `enter` immediately invokes the handler, while `space` invokes it on keyup.
	 * * Haptic feedback (on, like, the one browser combination that supports it &mdash; this can be disabled app-wide with `setButtonVibrate`)
	 *
	 * In addition, when the CSS `:active` pseudo-class would apply to a normal button
	 * (i.e. when holding the spacebar or during mousedown), `{ "data-pseudo-active": "true" }`
	 * is added to the props.  You can either let it pass through and style it through new CSS,
	 * or inspect the returned props for it and add e.g. an `.active` class for existing CSS
	 *
	 * @param onClickSync
	 * @param exclude Whether the polyfill shouldn't apply (can specify for specific interactions)
	 */


	function usePressEventHandlers(onClickSync, exclude) {
	  const {
	    useRefElementProps,
	    getElement
	  } = useRefElement({}); // A button can be activated in multiple ways, so on the off chance
	  // that multiple are triggered at once, we only *actually* register
	  // a press once all of our "on" signals have turned back to "off".
	  // We approximate this by just incrementing when active, and
	  // decrementing when deactivated.
	  //
	  // As an emergency failsafe, when the element looses focus,
	  // this is reset back to 0.

	  const [active, setActive, getActive] = useState(0); // If we the current text selection changes to include this element
	  // DURING e.g. a mousedown, then we don't want the mouseup to "count", as it were,
	  // because its only purpose was selecting text, not clicking buttons.
	  //
	  // To catch this, any time the text selection includes us while in the middle
	  // of a click, this flag is set, which cancels the activation of a press.
	  // The flag is reset any time the selection is empty or the button is
	  // no longer active.

	  const [textSelectedDuringActivationStartTime, setTextSelectedDuringActivationStartTime] = useState(null);
	  useGlobalHandler(document, "selectionchange", _ => {
	    setTextSelectedDuringActivationStartTime(prev => nodeSelectedTextLength(getElement()) == 0 ? null : prev != null ? prev : new Date());
	  });
	  useEffect(() => {
	    if (active == 0) setTextSelectedDuringActivationStartTime(null);
	  }, [active == 0]);
	  const onActiveStart = useStableCallback(_ => {
	    setActive(a => ++a);
	  });
	  const onActiveStop = useStableCallback(e => {
	    setActive(a => Math.max(0, --a));
	    const currentTime = new Date();
	    const timeDifference = textSelectedDuringActivationStartTime == null ? null : +currentTime - +textSelectedDuringActivationStartTime; // If we're selecting text (heuristically determined by selecting for longer than 1/4 a second, or more than 2 characters)
	    // then this isn't a press event.
	    // TODO: This should measure glyphs instead of characters.

	    if (timeDifference && timeDifference > 250 || nodeSelectedTextLength(getElement()) >= 2) {
	      e.preventDefault();
	      return;
	    }

	    if (getActive() <= 0) {
	      handlePress(e);
	    }
	  });
	  const handlePress = useStableCallback(e => {
	    if (onClickSync) {
	      // Note: The element is focused here because of iOS Safari.
	      //
	      // It's always iOS Safari.
	      //
	      // iOS Safari (tested on 12) downright refuses to allow 
	      // elements to be manually focused UNLESS it happens within
	      // an event handler like this.  It also doesn't focus
	      // buttons by default when clicked, tapped, etc.
	      //
	      // If it becomes problematic that button-likes explicitly become
	      // focused when they are pressed, then an alternative solution for
	      // the question of "how do menu buttons keep their menus open"
	      // and other focus-related nonsense needs to be figured out.
	      //
	      // For iOS Safari.
	      //
	      const element = getElement();
	      if (element && "focus" in element) element === null || element === void 0 ? void 0 : element.focus(); // Whatever the browser was going to do with this event,
	      // forget it. We're turning it into a "press" event.

	      e.preventDefault(); // Also stop anyone else from listening to this event,
	      // since we're explicitly handling it.
	      // (Notably, this allows labels to wrap inputs, with them
	      // both having press event handlers, without double-firing)

	      e.stopPropagation(); // Haptic feedback for this press event

	      pulse(); // Actually call our handler.

	      onClickSync(e);
	    }
	  });
	  const onMouseDown = excludes("click", exclude) ? undefined : e => {
	    // Stop double clicks from selecting text in an component that's *supposed* to be acting like a button,
	    // but also don't prevent the user from selecting that text manually if they really want to
	    // (which user-select: none would do, but cancelling a double click on mouseDown doesn't)
	    if (e.detail > 1) e.preventDefault();
	    if (e.button === 0) onActiveStart(e);
	  };
	  const onMouseUp = excludes("click", exclude) ? undefined : e => {
	    if (e.button === 0 && active > 0) onActiveStop(e);
	  };

	  const onBlur = _ => {
	    setActive(0);
	  };

	  const onMouseLeave = excludes("click", exclude) ? undefined : onBlur;
	  const onKeyDown = excludes("space", exclude) && excludes("enter", exclude) ? undefined : e => {
	    if (e.key == " " && onClickSync && !excludes("space", exclude)) {
	      // We don't actually activate it on a space keydown
	      // but we do preventDefault to stop the page from scrolling.
	      onActiveStart(e);
	      e.preventDefault();
	    }

	    if (e.key == "Enter" && !excludes("enter", exclude)) {
	      e.preventDefault();
	      onActiveStart(e);
	      onActiveStop(e);
	    }
	  };
	  const onKeyUp = excludes("space", exclude) ? undefined : e => {
	    if (e.key == " " && !excludes("space", exclude)) onActiveStop(e);
	  };

	  const onClick = e => {
	    e.preventDefault();

	    if (e.detail > 1) {
	      e.stopImmediatePropagation();
	      e.stopPropagation();
	    }
	  };

	  return props => useRefElementProps(useMergedProps()({
	    onKeyDown,
	    onKeyUp,
	    onBlur,
	    onMouseDown,
	    onMouseUp,
	    onMouseLeave,
	    onClick,
	    style: textSelectedDuringActivationStartTime != null ? {
	      cursor: "text"
	    } : undefined,
	    ...{
	      "data-pseudo-active": active && textSelectedDuringActivationStartTime == null ? "true" : undefined
	    }
	  }, props));
	}

	function useAriaAccordion(_ref) {
	  let {
	    expandedIndex,
	    setExpandedIndex
	  } = _ref;
	  const [lastFocusedIndex, setLastFocusedIndex, _getLastFocusedIndex] = useState(null);
	  const [_currentFocusedIndex, setCurrentFocusedIndex, getCurrentFocusedIndex] = useState(null);
	  const stableSetExpandedIndex = useStableCallback(setExpandedIndex !== null && setExpandedIndex !== void 0 ? setExpandedIndex : () => {});
	  const {
	    managedChildren: managedAccordionSections,
	    useManagedChild: useManagedChildSection
	  } = useChildManager();
	  const navigateToFirst = F(() => {
	    setLastFocusedIndex(0);
	  }, []);
	  const navigateToLast = F(() => {
	    setLastFocusedIndex(managedAccordionSections.length - 1);
	  }, []);
	  const navigateToPrev = F(() => {
	    setLastFocusedIndex(i => (i !== null && i !== void 0 ? i : 0) - 1);
	  }, []);
	  const navigateToNext = F(() => {
	    setLastFocusedIndex(i => (i !== null && i !== void 0 ? i : 0) + 1);
	  }, []);
	  const {
	    useLinearNavigationProps
	  } = useLinearNavigation({
	    managedChildren: managedAccordionSections,
	    navigationDirection: "block",
	    index: lastFocusedIndex !== null && lastFocusedIndex !== void 0 ? lastFocusedIndex : 0,
	    navigateToFirst,
	    navigateToLast,
	    navigateToPrev,
	    navigateToNext
	  });
	  useChildFlag({
	    activatedIndex: expandedIndex,
	    managedChildren: managedAccordionSections,
	    setChildFlag: (i, open) => {
	      var _managedAccordionSect;

	      return (_managedAccordionSect = managedAccordionSections[i]) === null || _managedAccordionSect === void 0 ? void 0 : _managedAccordionSect.setOpenFromParent(open);
	    },
	    getChildFlag: i => {
	      var _managedAccordionSect2, _managedAccordionSect3;

	      return (_managedAccordionSect2 = (_managedAccordionSect3 = managedAccordionSections[i]) === null || _managedAccordionSect3 === void 0 ? void 0 : _managedAccordionSect3.getOpenFromParent()) !== null && _managedAccordionSect2 !== void 0 ? _managedAccordionSect2 : null;
	    }
	  });
	  useChildFlag({
	    activatedIndex: lastFocusedIndex,
	    managedChildren: managedAccordionSections,
	    setChildFlag: (i, open) => open && managedAccordionSections[i].focus(),
	    getChildFlag: _ => false
	  });
	  const useAriaAccordionSection = F(args => {
	    var _ref2, _args$open;

	    const index = args.index;
	    const [openFromParent, setOpenFromParent, getOpenFromParent] = useState(null);
	    const {
	      useRandomIdProps: useBodyRandomIdProps,
	      useReferencedIdProps: useReferencedBodyIdProps
	    } = useRandomId({
	      prefix: "aria-accordion-section-body-"
	    });
	    const {
	      useRandomIdProps: useHeadRandomIdProps,
	      useReferencedIdProps: useReferencedHeadIdProps
	    } = useRandomId({
	      prefix: "aria-accordion-section-header-"
	    });
	    const open = (_ref2 = (_args$open = args.open) !== null && _args$open !== void 0 ? _args$open : openFromParent) !== null && _ref2 !== void 0 ? _ref2 : null; // TODO: Convert to use useManagedChild so that this hook 
	    // is stable without (directly) depending on the open state.

	    const useAriaAccordionSectionHeader = F(function useAriaAccordionSectionHeader(_ref3) {
	      const {
	        getElement,
	        useHasFocusProps
	      } = useHasFocus({
	        onFocusedChanged: F(focused => {
	          if (focused) setCurrentFocusedIndex(index);else setCurrentFocusedIndex(oldIndex => oldIndex === index ? null : index);
	        }, [])
	      });
	      const focus = F(() => {
	        var _getElement;

	        if (getCurrentFocusedIndex() != null) (_getElement = getElement()) === null || _getElement === void 0 ? void 0 : _getElement.focus();
	      }, []);
	      const {
	        useManagedChildProps
	      } = useManagedChildSection({
	        index,
	        open,
	        setOpenFromParent,
	        getOpenFromParent,
	        focus
	      });

	      function useAriaAccordionSectionHeaderProps(_ref4) {
	        let {
	          ["aria-expanded"]: ariaExpanded,
	          ["aria-disabled"]: ariaDisabled,
	          ...props
	        } = _ref4;

	        const onFocus = () => {
	          setLastFocusedIndex(args.index);
	        };

	        const onClick = () => {
	          if (getOpenFromParent()) stableSetExpandedIndex(null);else stableSetExpandedIndex(args.index);
	        };

	        const retB = useMergedProps()({
	          tabIndex: 0
	        }, usePressEventHandlers(onClick, undefined)(props));
	        const ret3 = useMergedProps()(useHeadRandomIdProps(useReferencedBodyIdProps("aria-controls")({
	          "aria-expanded": ariaExpanded !== null && ariaExpanded !== void 0 ? ariaExpanded : (!!open).toString(),
	          "aria-disabled": ariaDisabled !== null && ariaDisabled !== void 0 ? ariaDisabled : open ? "true" : undefined,
	          ...useHasFocusProps(useManagedChildProps(retB))
	        })), {
	          onFocus
	        });
	        return useLinearNavigationProps(ret3);
	      }

	      return {
	        useAriaAccordionSectionHeaderProps
	      };
	    }, [useLinearNavigationProps, index, open]);
	    const useAriaAccordionSectionBody = F(function useAriaAccordionSectionBody() {
	      function useAriaAccordionSectionBodyProps(_ref5) {
	        let {
	          role,
	          ...props
	        } = _ref5;
	        const ret1 = useReferencedHeadIdProps("aria-labelledby")({
	          role: role !== null && role !== void 0 ? role : "region",
	          ...props
	        });
	        const ret2 = useBodyRandomIdProps(ret1);
	        return ret2;
	      }

	      return {
	        useAriaAccordionSectionBodyProps
	      };
	    }, []);
	    return {
	      expanded: open,
	      useAriaAccordionSectionHeader,
	      useAriaAccordionSectionBody
	    };
	  }, [useLinearNavigationProps]);
	  return {
	    useAriaAccordionSection,
	    managedChildren: managedAccordionSections
	  };
	}

	/**
	 * Adds an ID and "aria-labelledby" for two elements, an "input" element and a "label" element.
	 *
	 * Returns the `useReferencedIdProps` hooks if you need to also add other ID-referencing attributes, like `for`
	 *
	 * @see useInputLabel
	 */

	function useGenericLabel() {
	  let {
	    labelPrefix,
	    inputPrefix,
	    backupText
	  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
	    labelPrefix: "label-",
	    inputPrefix: "input-"
	  };
	  const [labelElement, setLabelElement] = d(null);
	  const [inputElement, setInputElement] = d(null);
	  const {
	    getElement: getLabelElement,
	    useRefElementProps: useLabelRefElementProps
	  } = useRefElement({
	    onElementChange: setLabelElement
	  });
	  const {
	    getElement: getInputElement,
	    useRefElementProps: useInputRefElementProps
	  } = useRefElement({
	    onElementChange: setInputElement
	  });
	  const {
	    useRandomIdProps: useLabelRandomIdProps,
	    id: labelId,
	    useReferencedIdProps: useReferencedLabelIdProps
	  } = useRandomId({
	    prefix: labelPrefix
	  });
	  const {
	    useRandomIdProps: useInputRandomIdProps,
	    id: inputId,
	    useReferencedIdProps: useReferencedInputIdProps
	  } = useRandomId({
	    prefix: inputPrefix
	  });
	  const labelHasMounted = !!labelElement;
	  const useGenericLabelLabel = F(function useGenericLabelLabel() {
	    return {
	      useGenericLabelLabelProps: props => {
	        return useLabelRandomIdProps(useLabelRefElementProps(props));
	      }
	    };
	  }, []);
	  const useGenericLabelInput = F(function useGenericLabelInput() {
	    return {
	      useGenericLabelInputProps: _ref => {
	        var _ref2;

	        let {
	          "aria-labelledby": ariaLabelledby,
	          "aria-label": ariaLabel,
	          ...props
	        } = _ref;
	        console.assert(!ariaLabelledby);
	        return useInputRandomIdProps(useReferencedLabelIdProps("aria-labelledby")(useInputRefElementProps(useMergedProps()({
	          "aria-label": (_ref2 = !labelHasMounted ? backupText : ariaLabel) !== null && _ref2 !== void 0 ? _ref2 : ariaLabel
	        }, props))));
	      }
	    };
	  }, [labelHasMounted]);
	  return {
	    useGenericLabelInput,
	    useGenericLabelLabel,
	    useReferencedLabelIdProps,
	    useReferencedInputIdProps,
	    labelId,
	    inputId,
	    labelElement,
	    inputElement,
	    getLabelElement,
	    getInputElement
	  };
	}
	/**
	 * Handles the attributes `id`, `for`, and `aria-labelledby` for to related elements.
	 *
	 * It's assumed that the label is an `HTMLLabelElement`, and the input is something for which
	 * the `for` attribute can reference.
	 *
	 */

	function useInputLabel() {
	  let {
	    labelPrefix,
	    inputPrefix
	  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
	    labelPrefix: "label-",
	    inputPrefix: "input-"
	  };
	  const {
	    useGenericLabelInput,
	    useGenericLabelLabel,
	    useReferencedInputIdProps,
	    inputId,
	    labelId,
	    inputElement,
	    getInputElement,
	    labelElement,
	    getLabelElement
	  } = useGenericLabel({
	    labelPrefix,
	    inputPrefix
	  });
	  const useInputLabelLabel = F(function useInputLabelLabel(_ref3) {
	    let {
	      tag
	    } = _ref3;
	    const {
	      useGenericLabelLabelProps
	    } = useGenericLabelLabel();
	    return {
	      useInputLabelLabelProps(props) {
	        const withFor = useReferencedInputIdProps("for")(props);
	        const withoutFor = props;
	        return useGenericLabelLabelProps(tag == "label" ? withFor : withoutFor);
	      }

	    };
	  }, [useGenericLabelInput]);
	  const useInputLabelInput = F(function useInputLabelInput() {
	    const {
	      useGenericLabelInputProps
	    } = useGenericLabelInput();
	    return {
	      useInputLabelInputProps(props) {
	        return useGenericLabelInputProps(props);
	      }

	    };
	  }, [useGenericLabelLabel]);
	  return {
	    useInputLabelLabel,
	    useInputLabelInput,
	    labelId,
	    inputId,
	    inputElement,
	    labelElement,
	    getInputElement,
	    getLabelElement
	  };
	}

	const handlesInput = (tag, labelPosition, which) => {
	  if (labelPosition === "separate") {
	    if (which === "input-element") return true;else if (which === "label-element") return tag != "input";
	  } else if (labelPosition === "wrapping") {
	    if (which === "input-element") return false;
	    if (which == "label-element") return true;
	  }
	};
	/**
	 * Handles label type (wrapping or separate) for checkboxes, radios, switches, etc.
	 * @param param0
	 * @returns
	 */


	function useCheckboxLike(_ref4) {
	  let {
	    checked,
	    disabled,
	    labelPosition,
	    onInput,
	    role
	  } = _ref4;
	  const stableOnInput = useStableCallback(e => {
	    e.preventDefault();
	    onInput === null || onInput === void 0 ? void 0 : onInput(e);
	  });
	  const {
	    useInputLabelInput: useILInput,
	    useInputLabelLabel: useILLabel,
	    getLabelElement,
	    getInputElement
	  } = useInputLabel({
	    labelPrefix: "aria-checkbox-label-",
	    inputPrefix: "aria-checkbox-input-"
	  });
	  const useCheckboxLikeInputElement = F(function useCheckboxInputElement(_ref5) {
	    let {
	      tag
	    } = _ref5;
	    const {
	      useInputLabelInputProps: useILInputProps
	    } = useILInput();
	    const {
	      useRefElementProps,
	      getElement
	    } = useRefElement({}); // onClick and onChange are a bit messy, so we need to
	    // *always* make sure that the visible state is correct
	    // after all the event dust settles.
	    // See https://github.com/preactjs/preact/issues/2745,
	    // and https://github.com/preactjs/preact/issues/1899#issuecomment-525690194

	    y(() => {
	      const element = getElement();

	      if (element && tag == "input") {
	        element.checked = checked;
	      }
	    }, [tag, checked]);
	    return {
	      getInputElement: getElement,
	      useCheckboxLikeInputElementProps
	    };

	    function useCheckboxLikeInputElementProps(_ref6) {
	      let { ...p0
	      } = _ref6;
	      // For some reason, Chrome won't fire onInput events for radio buttons that are tabIndex=-1??
	      // Needs investigating, but onInput works fine in Firefox
	      // TODO
	      let props = usePressEventHandlers(disabled || !handlesInput(tag, labelPosition, "input-element") ? undefined : stableOnInput, undefined)({});
	      if (tag == "input") props.onInput = e => e.preventDefault();
	      props = useRefElementProps(useILInputProps(props));

	      if (labelPosition == "wrapping") {
	        // Because the wrapped label handles all interactions,
	        // we need to make sure this element can't be interacted with
	        // even if it's an input element.
	        props.inert = true;
	        props.tabIndex = -1;

	        props.onFocus = _ => getLabelElement().focus();
	      } else {
	        if (tag === "input") {
	          props.checked = checked;
	        } else {
	          props.role = role;
	          props.tabIndex = 0;
	          props["aria-checked"] = checked ? "true" : undefined;
	        }

	        props["aria-disabled"] = disabled.toString();
	      } // Make sure that label clicks can't affect the checkbox while it's disabled


	      props.onClick = disabled ? e => {
	        e.preventDefault();
	      } : props.onClick;
	      return useMergedProps()(p0, props);
	    }
	  }, [useILInput, role, labelPosition, disabled, checked]);
	  const useCheckboxLikeLabelElement = F(function useCheckboxLabelElement(_ref7) {
	    let {
	      tag
	    } = _ref7;
	    const {
	      useInputLabelLabelProps: useILLabelProps
	    } = useILLabel({
	      tag
	    });

	    function useCheckboxLikeLabelElementProps(_ref8) {
	      let { ...p0
	      } = _ref8;
	      const newProps = usePressEventHandlers(disabled || !handlesInput(tag, labelPosition, "label-element") ? undefined : stableOnInput, undefined)({});

	      if (labelPosition == "wrapping") {
	        if (p0.tabIndex == null) newProps.tabIndex = 0;
	        if (p0.role == null) newProps.role = role;
	        newProps["aria-disabled"] = disabled.toString();
	        newProps["aria-checked"] = checked.toString();
	      } // Just make sure that label clicks can't affect the checkbox while it's disabled


	      newProps.onClick = disabled ? e => {
	        e.preventDefault();
	      } : newProps.onClick;
	      return useMergedProps()(newProps, useILLabelProps(p0));
	    }

	    return {
	      useCheckboxLikeLabelElementProps
	    };
	  }, [useILLabel, disabled, checked, role, labelPosition]);
	  return {
	    useCheckboxLikeInputElement,
	    useCheckboxLikeLabelElement,
	    getLabelElement,
	    getInputElement
	  };
	}

	function useAriaCheckbox(_ref) {
	  let {
	    labelPosition,
	    checked,
	    onInput,
	    disabled
	  } = _ref;

	  const onInputEnhanced = e => onInput === null || onInput === void 0 ? void 0 : onInput(enhanceEvent(e, {
	    checked: !checked
	  }));

	  const {
	    useCheckboxLikeInputElement,
	    useCheckboxLikeLabelElement
	  } = useCheckboxLike({
	    checked: !!checked,
	    labelPosition,
	    role: "checkbox",
	    disabled,
	    onInput: onInputEnhanced
	  });
	  const useCheckboxInputElement = F(function useCheckboxInputElement(_ref2) {
	    let {
	      tag
	    } = _ref2;
	    const {
	      getInputElement,
	      useCheckboxLikeInputElementProps
	    } = useCheckboxLikeInputElement({
	      tag
	    });
	    const isMixed = checked == "mixed";
	    y(() => {
	      const inputElement = getInputElement();

	      if (inputElement && tag === "input") {
	        inputElement.indeterminate = isMixed;
	      }
	    }, [isMixed, tag]);
	    return {
	      useCheckboxInputElementProps
	    };

	    function useCheckboxInputElementProps(_ref3) {
	      var _props$checked;

	      let { ...p0
	      } = _ref3;
	      const props = useCheckboxLikeInputElementProps(p0);
	      (_props$checked = props.checked) !== null && _props$checked !== void 0 ? _props$checked : props.checked = !!checked;
	      if (tag == "input") props.type = "checkbox";
	      return props;
	    }
	  }, [useCheckboxLikeInputElement, checked, labelPosition, disabled]);
	  const useCheckboxLabelElement = F(function useCheckboxLabelElement(_ref4) {
	    let {
	      tag
	    } = _ref4;
	    const {
	      useCheckboxLikeLabelElementProps
	    } = useCheckboxLikeLabelElement({
	      tag
	    });

	    function useCheckboxLabelElementProps(_ref5) {
	      let { ...props
	      } = _ref5;
	      return useCheckboxLikeLabelElementProps(props);
	    }

	    return {
	      useCheckboxLabelElementProps
	    };
	  }, [useCheckboxLikeLabelElement, disabled, labelPosition]);
	  return {
	    useCheckboxInputElement,
	    useCheckboxLabelElement
	  };
	}

	/**
	 *
	 *
	 * @param param0
	 * @returns
	 */

	function useCheckboxGroup(_ref) {
	  let {
	    collator,
	    keyNavigation,
	    shouldFocusOnChange,
	    onUpdateChildren: onUpdateChildrenUnstable
	  } = _ref;
	  const onUpdateChildren = useStableCallback(onUpdateChildrenUnstable);
	  const {
	    managedChildren,
	    useListNavigationChild,
	    useListNavigationProps,
	    tabbableIndex,
	    focusCurrent,
	    currentTypeahead,
	    invalidTypeahead
	  } = useListNavigation({
	    collator,
	    keyNavigation,
	    shouldFocusOnChange
	  }); //const [uncheckedCount, setUnheckedCount] = useState(0);

	  const [checkedCount, setCheckedCount] = useState(0);
	  const checkedIndices = s(new Set()); //const [selfIsChecked, setSelfIsChecked, getSelfIsChecked] = useState<boolean | "mixed">(false);

	  const getSelfIsCheckedUnstable = F(() => {
	    const percentage = checkedCount / managedChildren.length;
	    return percentage <= 0 ? false : percentage >= 1 ? true : "mixed";
	  }, [checkedCount, managedChildren.length]);
	  const getSelfIsCheckedStable = useStableCallback(getSelfIsCheckedUnstable); // If the user has changed the parent checkbox's value, then this ref holds a memory of what values were held before.
	  // Otherwise, it's null when the last input was from a child checkbox. 

	  const savedCheckedValues = s(null);
	  const onCheckboxGroupParentInput = F(e => {
	    e.preventDefault();
	    const selfIsChecked = getSelfIsCheckedStable();

	    if (selfIsChecked === true || selfIsChecked === false && savedCheckedValues.current == null) {
	      return onUpdateChildren(enhanceEvent(e, {
	        childrenChecked: false
	      }));
	    } else if (selfIsChecked === "mixed") {
	      savedCheckedValues.current = new Map();

	      for (const child of managedChildren) {
	        savedCheckedValues.current.set(child.index, child.getChecked());
	      }

	      return onUpdateChildren(enhanceEvent(e, {
	        childrenChecked: true
	      }));
	    } else {
	      var _savedCheckedValues$c;

	      return onUpdateChildren(enhanceEvent(e, {
	        childrenChecked: (_savedCheckedValues$c = savedCheckedValues.current) !== null && _savedCheckedValues$c !== void 0 ? _savedCheckedValues$c : true
	      }));
	    }
	  }, []); // Keep track of all child IDs, and any time any of them change, 
	  // generate a new string with all of them concatenated together
	  // (but only once per render);

	  const allIds = s(new Set());
	  const [ariaControls, setAriaControls] = useState("");
	  const [updateIndex, setIdUpdateIndex] = useState(0);
	  const notifyChecked = F((index, checked) => {
	    if (checked === true) {
	      if (!checkedIndices.current.has(index)) {
	        setCheckedCount(c => c + 1);
	        checkedIndices.current.add(index);
	      }
	    } else {
	      if (checkedIndices.current.has(index)) {
	        setCheckedCount(c => c - 1);
	        checkedIndices.current.delete(index);
	      }
	    }
	  }, [setCheckedCount, checkedIndices]);
	  /*useEffect(() => {
	      let percentage = checkedCount / managedChildren.length;
	      setSelfIsChecked(percentage <= 0 ? false : percentage >= 1 ? true : "mixed")
	  }, [setSelfIsChecked, managedChildren.length, checkedCount]);*/

	  const useCheckboxGroupParentProps = F(props => {
	    return useMergedProps()({
	      "aria-controls": ariaControls
	    }, props);
	  }, [ariaControls]);
	  useEffect(() => {
	    setAriaControls(Array.from(allIds.current).join(" "));
	  }, [updateIndex]);
	  const useCheckboxGroupChild = F(function (_ref2) {
	    let {
	      index,
	      text,
	      checked,
	      id,
	      ...rest
	    } = _ref2;
	    const getChecked = useStableGetter(checked);
	    useEffect(() => {
	      allIds.current.add(id);
	      setIdUpdateIndex(i => ++i);
	      return () => {
	        allIds.current.delete(id);
	        setIdUpdateIndex(i => ++i);
	      };
	    }, [id]);
	    useEffect(() => {
	      notifyChecked(index, checked);
	    }, [index, checked]);
	    const {
	      tabbable,
	      useListNavigationChildProps
	    } = useListNavigationChild({
	      index,
	      text,
	      id,
	      getChecked,
	      ...rest
	    });
	    return {
	      tabbable,
	      useCheckboxGroupChildProps: F(props => useMergedProps()({}, useListNavigationChildProps(useListNavigationProps(props))), [useListNavigationProps, useListNavigationChildProps])
	    };
	  }, [useListNavigationProps, notifyChecked, useListNavigationChild]);
	  return {
	    managedCheckboxes: managedChildren,
	    useCheckboxGroupChild,
	    useCheckboxGroupParentProps,
	    parentIsChecked: getSelfIsCheckedUnstable(),
	    parentPercentChecked: checkedCount / managedChildren.length,
	    onCheckboxGroupParentInput,
	    tabbableIndex,
	    focus: focusCurrent,
	    currentTypeahead,
	    invalidTypeahead,
	    managedChildren
	  };
	}

	/**
	 * Adds event handlers for a modal-like soft-dismiss interaction.
	 *
	 * That is, any clicks or taps outside of the given component,
	 * or any time the Escape key is pressed within the component,
	 * (with various browser oddities regarding clicks on blank or inert areas handled)
	 * the component will request to close itself.
	 *
	 * Of course, if you don't do anything in the `onClose` function,
	 * it won't be a soft dismiss anymore.
	 *
	 * @param param0
	 * @returns
	 */

	function useSoftDismiss(_ref) {
	  let {
	    onClose,
	    getElements
	  } = _ref;
	  const stableOnClose = useStableCallback(onClose);
	  const stableGetElements = useStableCallback(getElements);
	  const getOpen = useStableGetter(open);
	  const onBackdropClick = F(function onBackdropClick(e) {
	    var _getElement;

	    const document = (_getElement = getElement()) === null || _getElement === void 0 ? void 0 : _getElement.ownerDocument; // Basically, "was this event fired on the root-most element, or at least an element not contained by the modal?"
	    // Either could be how the browser handles these sorts of "interacting with nothing" events.

	    if (e.target == (document === null || document === void 0 ? void 0 : document.documentElement)) {
	      stableOnClose("backdrop");
	    }

	    let elements = stableGetElements();

	    if (elements && e.target instanceof Element) {
	      if (!Array.isArray(elements)) elements = [elements];
	      let foundInsideClick = false;

	      for (const element of elements) {
	        if (element.contains(e.target)) {
	          foundInsideClick = true;
	          break;
	        }
	      }

	      if (!foundInsideClick) onClose("backdrop");
	    }
	  }, []);
	  const {
	    useActiveElementProps,
	    getElement
	  } = useActiveElement({
	    onLastActiveElementChange: F(newElement => {
	      let validFocusableElements = stableGetElements();

	      if (validFocusableElements) {
	        if (!Array.isArray(validFocusableElements)) validFocusableElements = [validFocusableElements];

	        for (const focusable of validFocusableElements) {
	          if (focusable !== null && focusable !== void 0 && focusable.contains(newElement)) return;
	        }
	      }

	      onClose("lost-focus");
	    }, [])
	  });
	  const {
	    useRefElementProps
	  } = useRefElement({
	    onElementChange: F(e => {
	      const document = e === null || e === void 0 ? void 0 : e.ownerDocument;
	      const window = document === null || document === void 0 ? void 0 : document.defaultView; // Since everything else is inert, we listen for captured clicks on the window
	      // (we don't use onClick since that doesn't fire when clicked on empty/inert areas)
	      // Note: We need a *separate* touch event on mobile Safari, because
	      // it doesn't let click events bubble or be captured from traditionally non-interactive elements,
	      // but touch events work as expected.

	      const mouseDown = e => {
	        if (getOpen()) onBackdropClick(e);
	      };

	      const touchStart = e => {
	        if (getOpen()) onBackdropClick(e);
	      };

	      const keyDown = e => {
	        if (e.key === "Escape") {
	          stableOnClose("escape");
	        }
	      };

	      window === null || window === void 0 ? void 0 : window.addEventListener("mousedown", mouseDown, {
	        capture: true
	      });
	      window === null || window === void 0 ? void 0 : window.addEventListener("touchstart", touchStart, {
	        capture: true
	      });
	      window === null || window === void 0 ? void 0 : window.addEventListener("keydown", keyDown);
	      return () => {
	        window === null || window === void 0 ? void 0 : window.removeEventListener("mousedown", mouseDown);
	        window === null || window === void 0 ? void 0 : window.removeEventListener("touchstart", touchStart);
	        window === null || window === void 0 ? void 0 : window.removeEventListener("keydown", keyDown);
	      };
	    }, [])
	  });
	  return {
	    useSoftDismissProps: F(props => useActiveElementProps(useRefElementProps(props)), [useActiveElementProps, useRefElementProps])
	  };
	}
	/**
	 * A generic modal hook, used by modal dialogs, but can also
	 * be used by anything that's modal with a backdrop.
	 * @param param0
	 * @returns
	 */

	function useModal(_ref2) {
	  let {
	    open,
	    onClose
	  } = _ref2;
	  const stableOnClose = useStableCallback(onClose);
	  const [modalDescribedByBody, setModalDescribedByBody] = useState(false);
	  useHideScroll(open);
	  const {
	    useRandomIdProps: useModalIdProps
	  } = useRandomId({
	    prefix: "aria-modal-"
	  });
	  const {
	    useRandomIdProps: useBodyIdProps,
	    useReferencedIdProps: useBodyReferencingIdProps
	  } = useRandomId({
	    prefix: "aria-modal-body-"
	  });
	  const {
	    useRandomIdProps: useTitleIdProps,
	    useReferencedIdProps: useTitleReferencingIdProps
	  } = useRandomId({
	    prefix: "aria-modal-title-"
	  });
	  const {
	    useRefElementProps: useModalRefElement,
	    getElement: getModalElement
	  } = useRefElement({});
	  const {
	    useSoftDismissProps
	  } = useSoftDismiss({
	    onClose: stableOnClose,
	    getElements: getModalElement
	  });
	  const useModalBackdrop = F(function useModalBackdrop() {
	    function useModalBackdropProps(props) {
	      return useMergedProps()({
	        onPointerUp: () => stableOnClose("backdrop")
	      }, props);
	    }

	    return {
	      useModalBackdropProps
	    };
	  }, []);

	  const useModalProps = function (_ref3) {
	    let {
	      "aria-modal": ariaModal,
	      role,
	      ...p0
	    } = _ref3;
	    console.assert(!ariaModal);
	    const {
	      useFocusTrapProps
	    } = useFocusTrap({
	      trapActive: open
	    });
	    const p1 = useTitleReferencingIdProps("aria-labelledby")(p0);
	    const p2 = useModalIdProps(p1);
	    const pFinal = useBodyReferencingIdProps("aria-describedby")(p2);
	    return useFocusTrapProps(useSoftDismissProps(useMergedProps()(useModalRefElement({
	      role: role || "dialog"
	    }), modalDescribedByBody ? pFinal : p2)));
	  };

	  const useModalTitle = F(function useModalTitle() {
	    const useModalTitleProps = function (props) {
	      return useTitleIdProps(props);
	    };

	    return {
	      useModalTitleProps
	    };
	  }, []);
	  const useModalBody = F(function useModalBody(_ref4) {
	    let {
	      descriptive
	    } = _ref4;
	    setModalDescribedByBody(descriptive);

	    const useModalBodyProps = function (props) {
	      return useBodyIdProps(props);
	    };

	    return {
	      useModalBodyProps
	    };
	  }, []);
	  return {
	    useModalProps,
	    useModalTitle,
	    useModalBody,
	    useModalBackdrop
	  };
	}
	/**
	 * Allows for hiding the scroll bar of the root HTML element
	 * without shifting the layout of the page more than adding a fow pixels
	 * of padding to the root element if necessary.
	 * @param hideScroll
	 */

	function useHideScroll(hideScroll) {
	  const [getScrollbarWidth, setScrollbarWidth] = usePassiveState(null);
	  const [getScrollbarHeight, setScrollbarHeight] = usePassiveState(null);
	  y(() => {
	    if (hideScroll) {
	      // When scrolling is resumed, we'll need to restore the original scroll positions
	      // so we need to keep this information around
	      const originalScrollTop = document.documentElement.scrollTop;
	      const originalScrollLeft = document.documentElement.scrollLeft; // Measure the width of the page (minus the scrollbar)

	      const widthWithScrollBar = document.documentElement.scrollWidth;
	      const heightWithScrollBar = document.documentElement.scrollHeight; // Apply a class that hides the scrollbar.

	      document.documentElement.classList.add("document-scroll-hidden"); // In case multiple things are locking scroll, keep track of how many are doing that
	      // (just add 1 on enable, subtract 1 on disable)

	      document.documentElement.dataset["scrollHiders"] = (+(document.documentElement.dataset["scrollHiders"] || "0") + 1).toString(); // Measure the new width without a scrollbar 
	      // so we can take the difference as the scrollbar width.

	      const widthWithoutScrollBar = document.documentElement.scrollWidth;
	      const heightWithoutScrollBar = document.documentElement.scrollHeight;
	      let scrollbarWidth = widthWithoutScrollBar - widthWithScrollBar;
	      let scrollbarHeight = heightWithoutScrollBar - heightWithScrollBar; // Failsafe -- if this measuring trick does something unexpected, just ignore it

	      if (scrollbarWidth > 80) scrollbarWidth = 0;
	      if (scrollbarHeight > 80) scrollbarHeight = 0; // Make our measurements available as CSS properties for general use

	      document.documentElement.style.setProperty("--root-scrollbar-width", `${scrollbarWidth}px`);
	      document.documentElement.style.setProperty("--root-scrollbar-height", `${scrollbarHeight}px`);
	      document.documentElement.style.setProperty("--root-scrollstop-top", `${originalScrollTop}px`);
	      document.documentElement.style.setProperty("--root-scrollstop-left", `${originalScrollLeft}px`);
	      setScrollbarWidth(scrollbarWidth);
	      setScrollbarHeight(scrollbarHeight);
	      return () => {
	        // Undo all the things we just did
	        document.documentElement.dataset["scrollHiders"] = (+(document.documentElement.dataset["scrollHiders"] || "0") - 1).toString();

	        if (document.documentElement.dataset["scrollHiders"] == "0") {
	          // If we were the last scroll-locking thing to stop, then remove the class that stops scrolling.
	          document.documentElement.removeAttribute("data-scroll-hiders");
	          document.documentElement.classList.remove("document-scroll-hidden"); // Also, restore the original scroll position
	          // We do this by forcing the scroll behavior to not be smooth
	          // (it's instant if nothing is set to smooth, https://www.w3.org/TR/cssom-view/#scrolling),
	          // scrolling, then restoring the original scroll behavior 
	          // (which was probably already auto anyway, but just to be safe)

	          const originalScrollBehavior = document.documentElement.style.scrollBehavior;
	          document.documentElement.style.scrollBehavior = "auto";
	          document.documentElement.scrollTo({
	            top: originalScrollTop,
	            left: originalScrollLeft,
	            behavior: "auto"
	          });
	          document.documentElement.style.scrollBehavior = originalScrollBehavior;
	        }
	      };
	    }
	  }, [hideScroll]);
	  return {
	    getScrollbarWidth,
	    getScrollbarHeight
	  };
	}

	function useAriaDialog(_ref) {
	  let {
	    open,
	    onClose
	  } = _ref;
	  // TODO: Differences between dialog and modal go here, presumably.
	  // Non-modal dialogs need to be able to be repositioned, etc.
	  const {
	    useModalBackdrop,
	    useModalBody,
	    useModalProps,
	    useModalTitle
	  } = useModal({
	    open,
	    onClose
	  });
	  const useDialogBackdrop = F(() => {
	    const {
	      useModalBackdropProps
	    } = useModalBackdrop();
	    return {
	      useDialogBackdropProps: useModalBackdropProps
	    };
	  }, [useModalBackdrop]);
	  const useDialogBody = F(_ref2 => {
	    let {
	      descriptive
	    } = _ref2;
	    const {
	      useModalBodyProps
	    } = useModalBody({
	      descriptive
	    });
	    return {
	      useDialogBodyProps: useModalBodyProps
	    };
	  }, [useModalBackdrop]);
	  const useDialogProps = useModalProps;
	  const useDialogTitle = F(() => {
	    const {
	      useModalTitleProps
	    } = useModalTitle();
	    return {
	      useDialogTitleProps: useModalTitleProps
	    };
	  }, [useModalTitle]);
	  return {
	    useDialogProps,
	    useDialogTitle,
	    useDialogBody,
	    useDialogBackdrop
	  };
	}

	function useAriaListboxMulti(_ref) {
	  let { ...args
	  } = _ref;
	  const {
	    useHasFocusProps,
	    getFocusedInner
	  } = useHasFocus({});
	  const {
	    useGenericLabelInput,
	    useGenericLabelLabel
	  } = useGenericLabel({
	    labelPrefix: "aria-listbox-label-",
	    inputPrefix: "aria-listbox-"
	  });
	  const {
	    useListNavigationChild,
	    useListNavigationProps,
	    navigateToIndex,
	    managedChildren,
	    currentTypeahead,
	    focusCurrent,
	    tabbableIndex,
	    invalidTypeahead
	  } = useListNavigation({ ...args,
	    shouldFocusOnChange: getFocusedInner
	  });
	  const {
	    useGenericLabelInputProps
	  } = useGenericLabelInput();
	  const childCount = managedChildren.length;
	  const [, setShiftHeld, getShiftHeld] = useState(false);
	  const typeaheadInProgress = !!currentTypeahead;
	  y(() => {
	    for (let i = 0; i < childCount; ++i) {
	      managedChildren[i].setTypeaheadInProgress(typeaheadInProgress);
	    }
	  }, [typeaheadInProgress, childCount]);
	  const useListboxMultiItem = F(info => {
	    var _info$onSelect;

	    const selected = info.selected;
	    const [typeaheadInProgress, setTypeaheadInProgress] = useState(false);
	    const getSelected = useStableGetter(selected);
	    const {
	      useRefElementProps,
	      getElement
	    } = useRefElement({});
	    const stableOnSelect = useStableCallback((_info$onSelect = info.onSelect) !== null && _info$onSelect !== void 0 ? _info$onSelect : () => {});
	    const {
	      tabbable,
	      useListNavigationChildProps
	    } = useListNavigationChild({ ...info,
	      setTypeaheadInProgress
	    });
	    useLayoutEffect(() => {
	      const element = getElement();

	      if (element && getShiftHeld()) {
	        stableOnSelect === null || stableOnSelect === void 0 ? void 0 : stableOnSelect({
	          target: element,
	          currentTarget: element,
	          [EventDetail]: {
	            selected: true
	          }
	        });
	      }
	    }, [tabbable]);
	    return {
	      useListboxMultiItemProps,
	      tabbable
	    };

	    function useListboxMultiItemProps(props) {
	      const newProps = usePressEventHandlers(info.disabled ? null : e => {
	        navigateToIndex(info.index);
	        stableOnSelect === null || stableOnSelect === void 0 ? void 0 : stableOnSelect({ ...e,
	          [EventDetail]: {
	            selected: !getSelected()
	          }
	        });
	        e.preventDefault();
	      }, {
	        space: typeaheadInProgress ? "exclude" : undefined
	      })({});
	      props.role = "option";
	      props["aria-setsize"] = childCount.toString();
	      props["aria-posinset"] = (info.index + 1).toString();
	      props["aria-selected"] = (tabbable !== null && tabbable !== void 0 ? tabbable : false).toString();
	      if (info.disabled) props["aria-disabled"] = "true";
	      return useRefElementProps(useListNavigationChildProps(useMergedProps()(newProps, props)));
	    }
	  }, [useListNavigationChild, childCount, typeaheadInProgress]);
	  const useListboxMultiLabel = F(function useListboxMultiLabel() {
	    function useListboxMultiLabelProps(props) {
	      const {
	        useGenericLabelLabelProps
	      } = useGenericLabelLabel();
	      return useGenericLabelLabelProps(props);
	    }

	    return {
	      useListboxMultiLabelProps
	    };
	  }, [useGenericLabelLabel]);
	  return {
	    useListboxMultiItem,
	    useListboxMultiProps,
	    useListboxMultiLabel,
	    tabbableIndex,
	    currentTypeahead,
	    invalidTypeahead,
	    focus: focusCurrent,
	    managedChildren
	  };

	  function useListboxMultiProps(props) {
	    props.role = "listbox";
	    props["aria-multiselectable"] = "true";
	    return useListNavigationProps(useHasFocusProps(useGenericLabelInputProps(useMergedProps()({
	      onKeyDown,
	      onKeyUp,
	      onFocusOut
	    }, props))));
	  }

	  function onKeyDown(e) {
	    if (e.key == "Shift") setShiftHeld(true);
	  }

	  function onKeyUp(e) {
	    if (e.key == "Shift") setShiftHeld(false);
	  }

	  function onFocusOut(_) {
	    setShiftHeld(false);
	  }
	}

	function useAriaListboxSingle(_ref) {
	  let {
	    selectedIndex,
	    onSelect,
	    selectionMode,
	    ...args
	  } = _ref;
	  const [anyItemsFocused, setAnyItemsFocused, getAnyItemsFocused] = useState(false);
	  const {
	    useGenericLabelInput,
	    useGenericLabelLabel,
	    getInputElement
	  } = useGenericLabel({
	    labelPrefix: "aria-listbox-label-",
	    inputPrefix: "aria-listbox-"
	  });
	  const {
	    useListNavigationChild,
	    useListNavigationProps,
	    navigateToIndex,
	    managedChildren,
	    tabbableIndex,
	    focusCurrent,
	    currentTypeahead,
	    invalidTypeahead
	  } = useListNavigation({ ...args,
	    shouldFocusOnChange: getAnyItemsFocused
	  });
	  const {
	    useGenericLabelInputProps
	  } = useGenericLabelInput();
	  const stableOnSelect = useStableCallback(onSelect !== null && onSelect !== void 0 ? onSelect : () => {}); // Track whether the currently focused element is a child of the list box parent element.
	  // When it's not, we reset the tabbable index back to the currently selected element.

	  const {
	    useActiveElementProps
	  } = useActiveElement({
	    onActiveElementChange: F(activeElement => {
	      var _getInputElement;

	      return setAnyItemsFocused(!!((_getInputElement = getInputElement()) !== null && _getInputElement !== void 0 && _getInputElement.contains(activeElement)));
	    }, [])
	  });
	  y(() => {
	    if (!anyItemsFocused) navigateToIndex(selectedIndex);
	  }, [anyItemsFocused, selectedIndex, navigateToIndex]);
	  useChildFlag({
	    activatedIndex: selectedIndex,
	    managedChildren,
	    setChildFlag: (i, selected) => {
	      var _managedChildren$i;

	      return (_managedChildren$i = managedChildren[i]) === null || _managedChildren$i === void 0 ? void 0 : _managedChildren$i.setSelected(selected);
	    },
	    getChildFlag: i => {
	      var _managedChildren$i$ge, _managedChildren$i2;

	      return (_managedChildren$i$ge = (_managedChildren$i2 = managedChildren[i]) === null || _managedChildren$i2 === void 0 ? void 0 : _managedChildren$i2.getSelected()) !== null && _managedChildren$i$ge !== void 0 ? _managedChildren$i$ge : null;
	    }
	  });
	  useLayoutEffect(() => {
	    navigateToIndex(selectedIndex);
	  }, [selectedIndex, managedChildren.length]);
	  const childCount = managedChildren.length;
	  const useListboxSingleItem = F(info => {
	    const [selected, setSelected, getSelected] = useState(null);
	    const {
	      tabbable,
	      useListNavigationChildProps
	    } = useListNavigationChild({
	      setSelected,
	      getSelected,
	      ...info
	    });
	    const {
	      getElement,
	      useRefElementProps
	    } = useRefElement({});
	    const index = info.index;
	    y(() => {
	      const element = getElement();

	      if (element && tabbable && selectionMode == "focus") {
	        stableOnSelect === null || stableOnSelect === void 0 ? void 0 : stableOnSelect({
	          target: element,
	          currentTarget: element,
	          [EventDetail]: {
	            selectedIndex: index
	          }
	        });
	      }
	    }, [tabbable, selectionMode, index]);
	    return {
	      useListboxSingleItemProps,
	      tabbable,
	      selected,
	      getSelected
	    };

	    function useListboxSingleItemProps(props) {
	      const newProps = usePressEventHandlers(info.disabled ? null : e => {
	        navigateToIndex(info.index);
	        const element = getElement();
	        if (element) stableOnSelect === null || stableOnSelect === void 0 ? void 0 : stableOnSelect({
	          target: element,
	          currentTarget: element,
	          [EventDetail]: {
	            selectedIndex: index
	          }
	        });
	        e.preventDefault();
	      }, undefined)({});
	      props.role = "option";
	      props["aria-setsize"] = childCount.toString();
	      props["aria-posinset"] = (info.index + 1).toString();
	      props["aria-selected"] = (selected !== null && selected !== void 0 ? selected : false).toString();
	      if (info.disabled) props["aria-disabled"] = "true";
	      return useListNavigationChildProps(useMergedProps()(newProps, useRefElementProps(props)));
	    }
	  }, [useListNavigationChild, selectionMode, childCount]);
	  const useListboxSingleLabel = F(function useListboxSingleLabel() {
	    function useListboxSingleLabelProps(props) {
	      const {
	        useGenericLabelLabelProps
	      } = useGenericLabelLabel();
	      useGenericLabelLabelProps(props);
	    }

	    return {
	      useListboxSingleLabelProps
	    };
	  }, [useGenericLabelLabel]);
	  return {
	    useListboxSingleItem,
	    useListboxSingleProps,
	    useListboxSingleLabel,
	    tabbableIndex,
	    focus: focusCurrent,
	    currentTypeahead,
	    invalidTypeahead,
	    managedChildren
	  };

	  function useListboxSingleProps(props) {
	    props.role = "listbox";
	    return useListNavigationProps(useGenericLabelInputProps(useActiveElementProps(props)));
	  }
	}

	/**
	 * A menu is a popup control that contains a list of menu items, and that's it.
	 * It has very well-defined logic for managing those items as the menu's state changes.
	 *
	 * A MenuBase is just the "popup" part without the "list of menu items" part. It can
	 * (really, must) have interactive controls, but these controls are allowed to be more
	 * free-form. This means that, like a dialog, you must tell this hook
	 * where within the popup to send focus when opened (for a menu it's just the first
	 * menu item, but with custom content you'll need to provide this).
	 *
	 */

	function useMenuBase(_ref) {
	  let {
	    sendFocusWithinMenu,
	    ...args
	  } = _ref;
	  const getSendFocusWithinMenu = useStableGetter(sendFocusWithinMenu);
	  const [focusTrapActive, setFocusTrapActive] = useState(null);
	  const onClose = args.onClose;
	  const onOpen = args.onOpen;
	  const menubar = args.menubar;
	  const open = menubar ? true : args.open;
	  const stableOnClose = useStableCallback(onClose !== null && onClose !== void 0 ? onClose : () => {});
	  const getOpen = useStableGetter(open); // TODO: It's awkward that the button focus props are out here where we don't have its type,
	  // but focus management is super sensitive, and even waiting for a useLayoutEffect to sync state here
	  // would be too late, so it would look like there's a moment between menu focus lost and button focus gained
	  // where nothing is focused. 

	  const {
	    useHasFocusProps: useMenuBaseHasFocusProps,
	    getLastFocusedInner: getMenuBaseLastFocusedInner
	  } = useHasFocus({
	    /*onLastFocusedInnerChanged: onMenuOrButtonLostLastFocus*/
	  });
	  const {
	    useHasFocusProps: useButtonHasFocusProps,
	    getLastFocusedInner: getMenuBaseButtonLastFocusedInner
	  } = useHasFocus({
	    /*onLastFocusedInnerChanged: onMenuOrButtonLostLastFocus*/
	  });
	  const [, setOpenerElement, getOpenerElement] = useState(null);
	  const {
	    useRandomIdProps: useMenuBaseIdProps,
	    useReferencedIdProps: useMenuBaseIdReferencingProps
	  } = useRandomId({
	    prefix: "aria-menu-"
	  });
	  const {
	    getElement: getButtonElement,
	    useRefElementProps: useButtonRefElementProps
	  } = useRefElement({
	    onElementChange: setOpenerElement
	  });
	  const {
	    getElement: getMenuElement,
	    useRefElementProps: useMenuBaseRefElementProps
	  } = useRefElement({});
	  const {
	    useSoftDismissProps
	  } = useSoftDismiss({
	    onClose: stableOnClose,
	    getElements: () => [getButtonElement(), getMenuElement()]
	  });
	  y(() => {
	    setFocusTrapActive(open);
	  }, [open]);
	  const useMenuBaseProps = F(props => {
	    function onKeyDown(e) {
	      if (e.key == "Escape" && getOpen()) {
	        stableOnClose();
	        e.stopPropagation();
	        e.stopImmediatePropagation();
	        e.preventDefault();
	      }
	    }

	    return useSoftDismissProps(useMenuBaseHasFocusProps(useMenuBaseRefElementProps(useMenuBaseIdProps(useMergedProps()({
	      onKeyDown
	    }, props)))));
	  }, [useSoftDismissProps, useMenuBaseHasFocusProps, useMenuBaseRefElementProps, useMenuBaseIdProps]);
	  const useMenuBaseButtonProps = F(props => {
	    return useButtonRefElementProps(useButtonHasFocusProps(useMenuBaseIdReferencingProps("aria-controls")(props)));
	  }, [useButtonHasFocusProps, useButtonRefElementProps, useMenuBaseIdReferencingProps]);
	  y(() => {
	    const sendFocusWithinMenu = getSendFocusWithinMenu();

	    if (focusTrapActive) {
	      sendFocusWithinMenu === null || sendFocusWithinMenu === void 0 ? void 0 : sendFocusWithinMenu();
	    } else if (focusTrapActive === false) {
	      var _getOpenerElement;

	      if (getMenuBaseLastFocusedInner()) (_getOpenerElement = getOpenerElement()) === null || _getOpenerElement === void 0 ? void 0 : _getOpenerElement.focus({
	        preventScroll: true
	      });
	    } else ;
	  }, [focusTrapActive]);
	  return {
	    useMenuSentinel: F(() => {
	      const {
	        useSentinelProps: useMenuSentinelProps,
	        ...rest
	      } = useFocusSentinel({
	        open,
	        onClose: onClose !== null && onClose !== void 0 ? onClose : () => {},
	        sendFocusWithinMenu
	      });
	      return {
	        useMenuSentinelProps,
	        ...rest
	      };
	    }, [open, onClose, sendFocusWithinMenu]),
	    focusTrapActive,
	    useMenuBaseProps,
	    useMenuBaseButtonProps,
	    getMenuBaseLastFocusedInner,
	    getMenuBaseButtonLastFocusedInner,
	    open,
	    onOpen,
	    onClose
	  };
	} // A focus sentinal is a hidden but focusable element that comes at the start or end 
	// of the out-of-place-focusable component that, when activated or focused over, closes the component
	// (if focused within 100ms of the open prop changing, instead of
	// closing, focusing the sentinel immediately asks it to focus itself).
	// This exists for things like menus which can have focus but also need a way to return
	// to whatever out-of-place parent they came from when naturally tabbed out of (as opposed
	// to dialogs which loop back around when tabbed out of). While mouse users can click out of a menu
	// and keyboard users can escape to close a menu, screen readers and other input methods 
	// that don't use those two would become stuck.

	function useFocusSentinel(_ref2) {
	  let {
	    open,
	    onClose,
	    sendFocusWithinMenu
	  } = _ref2;
	  const getSendFocusWithinMenu = useStableGetter(sendFocusWithinMenu);
	  const stableOnClose = useStableCallback(onClose);
	  const [firstSentinelIsActive, setFirstSentinelIsActive] = useState(false);
	  useTimeout({
	    callback: () => {
	      setFirstSentinelIsActive(open);
	    },
	    timeout: 100,
	    triggerIndex: `${open}-${firstSentinelIsActive}`
	  });
	  const onFocus = firstSentinelIsActive ? () => stableOnClose() : () => {
	    var _getSendFocusWithinMe;

	    return (_getSendFocusWithinMe = getSendFocusWithinMenu()) === null || _getSendFocusWithinMe === void 0 ? void 0 : _getSendFocusWithinMe();
	  };

	  const onClick = () => stableOnClose();

	  return {
	    useSentinelProps: function (p) {
	      return useMergedProps()({
	        onFocus,
	        onClick
	      }, p);
	    }
	  };
	}
	function useAriaMenu(_ref3) {
	  let {
	    collator,
	    keyNavigation,
	    noTypeahead,
	    noWrap,
	    typeaheadTimeout,
	    ...args
	  } = _ref3;
	  const {
	    managedChildren,
	    useListNavigationChild,
	    useListNavigationProps,
	    tabbableIndex,
	    focusCurrent: focusMenu,
	    currentTypeahead,
	    invalidTypeahead
	  } = useListNavigation({
	    collator,
	    keyNavigation,
	    noTypeahead,
	    noWrap,
	    typeaheadTimeout,
	    shouldFocusOnChange: F(() => getMenuBaseLastFocusedInner() || getMenuBaseButtonLastFocusedInner(), [])
	  });
	  const {
	    useMenuSentinel,
	    useMenuBaseButtonProps,
	    useMenuBaseProps,
	    getMenuBaseButtonLastFocusedInner,
	    getMenuBaseLastFocusedInner,
	    open,
	    onOpen,
	    onClose
	  } = useMenuBase({ ...args,
	    sendFocusWithinMenu: focusMenu !== null && focusMenu !== void 0 ? focusMenu : () => {}
	  });
	  const useMenuButton = F(_ref4 => {
	    return {
	      useMenuButtonProps: function (p) {
	        const props = useMenuBaseButtonProps(p);
	        props["aria-haspopup"] = "menu";
	        props["aria-expanded"] = open ? "true" : undefined;
	        return props;
	      }
	    };
	  }, [open, onClose, onOpen, useMenuBaseButtonProps]);
	  const useMenuItem = F(args => {
	    const {
	      useListNavigationChildProps
	    } = useListNavigationChild(args);

	    function useMenuItemProps(_ref5) {
	      let { ...props
	      } = _ref5;
	      props.role = "menuitem";
	      return useMergedProps()({}, useListNavigationChildProps(props));
	    }

	    return {
	      useMenuItemProps
	    };
	  }, []);

	  function useMenuProps(_ref6) {
	    let { ...props
	    } = _ref6;
	    props.role = "menu";
	    return useMenuBaseProps(useListNavigationProps(props));
	  }

	  return {
	    useMenuProps,
	    useMenuButton,
	    useMenuItem,
	    useMenuSentinel,
	    //useMenuSubmenuItem,
	    focusMenu,
	    currentTypeahead,
	    invalidTypeahead,
	    tabbableIndex,
	    managedChildren
	  };
	}

	function useAriaTabs(_ref) {
	  let {
	    selectionMode,
	    selectedIndex,
	    onSelect,
	    orientation: logicalOrientation,
	    ...args
	  } = _ref;
	  const {
	    useHasFocusProps: useTabListHasFocusProps,
	    getFocusedInner: getTabListFocusedInner
	  } = useHasFocus({});
	  const [physicalOrientation, setPhysicalOrientation] = useState("horizontal");
	  const {
	    convertToPhysicalOrientation,
	    useLogicalDirectionProps
	  } = useLogicalDirection({
	    onLogicalDirectionChange: F(logicalDirectionInfo => setPhysicalOrientation(convertToPhysicalOrientation(logicalOrientation, logicalDirectionInfo)), [])
	  }); //const { useRandomIdProps: useTabListIdProps, useReferencedIdProps: useReferencedTabListId } = useRandomId({ prefix: "aria-tab-list-" });

	  const {
	    useRandomIdProps: useTabLabelIdProps,
	    useReferencedIdProps: useReferencedTabLabelId
	  } = useRandomId({
	    prefix: "aria-tab-label-"
	  });
	  const {
	    managedChildren: managedTabs,
	    navigateToIndex,
	    useListNavigationChild,
	    useListNavigationProps,
	    tabbableIndex,
	    invalidTypeahead,
	    currentTypeahead,
	    focusCurrent
	  } = useListNavigation({ ...args,
	    shouldFocusOnChange: getTabListFocusedInner,
	    keyNavigation: logicalOrientation
	  });
	  const {
	    managedChildren: managedPanels,
	    useManagedChild: useManagedTabPanel
	  } = useChildManager();
	  const childCount = managedTabs.length;
	  useLayoutEffect(() => {
	    for (const child of managedTabs) child.setSelectionMode(selectionMode);
	  }, [selectionMode]);
	  useChildFlag({
	    activatedIndex: selectedIndex,
	    managedChildren: managedTabs,
	    setChildFlag: (i, selected) => {
	      var _managedTabs$i;

	      return (_managedTabs$i = managedTabs[i]) === null || _managedTabs$i === void 0 ? void 0 : _managedTabs$i.setSelected(selected);
	    },
	    getChildFlag: i => {
	      var _managedTabs$i2;

	      return (_managedTabs$i2 = managedTabs[i]) === null || _managedTabs$i2 === void 0 ? void 0 : _managedTabs$i2.getSelected();
	    }
	  });
	  useChildFlag({
	    activatedIndex: selectedIndex,
	    managedChildren: managedPanels,
	    setChildFlag: (i, visible) => {
	      var _managedPanels$i;

	      return (_managedPanels$i = managedPanels[i]) === null || _managedPanels$i === void 0 ? void 0 : _managedPanels$i.setVisible(visible);
	    },
	    getChildFlag: i => {
	      var _managedPanels$i2;

	      return (_managedPanels$i2 = managedPanels[i]) === null || _managedPanels$i2 === void 0 ? void 0 : _managedPanels$i2.getVisible();
	    }
	  });
	  useLayoutEffect(_prev => {
	    if (selectedIndex != null && selectionMode == "activate") {
	      // TODO: We need to wait a moment so that the tab panel we want to focus
	      // is actually visible (i.e. we need to wait for the child to re-render itself).
	      // We could, alternatively, signal to the child that it should focus itself
	      // the next time it renders itself as visible,
	      // which might be better?
	      queueMicrotask(() => {
	        var _managedPanels$select;

	        (_managedPanels$select = managedPanels[selectedIndex]) === null || _managedPanels$select === void 0 ? void 0 : _managedPanels$select.focus();
	      });
	    }
	  }, [childCount, selectedIndex, selectionMode]);
	  const useTab = F(function useTab(info) {
	    const [selectionModeL, setSelectionModeL] = useState(selectionMode);
	    const {
	      useRefElementProps,
	      getElement
	    } = useRefElement({});
	    const [tabPanelId, setTabPanelId] = useState(undefined);
	    const {
	      useRandomIdProps: useTabIdProps,
	      id: tabId
	    } = useRandomId({
	      prefix: "aria-tab-"
	    });
	    const [selected, setSelected, getSelected] = useState(null);
	    const {
	      tabbable,
	      useListNavigationChildProps
	    } = useListNavigationChild({
	      setSelected,
	      getSelected,
	      tabId,
	      setTabPanelId,
	      setSelectionMode: setSelectionModeL,
	      ...info
	    });
	    const getIndex = useStableGetter(info.index);
	    y(() => {
	      const element = getElement();

	      if (tabbable && selectionModeL == "focus") {
	        onSelect({
	          target: element,
	          currentTarget: element,
	          [EventDetail]: {
	            selectedIndex: getIndex()
	          }
	        });
	      }
	    }, [tabbable, selectionMode]);
	    y(() => {
	      var _managedPanels$info$i;

	      (_managedPanels$info$i = managedPanels[info.index]) === null || _managedPanels$info$i === void 0 ? void 0 : _managedPanels$info$i.setTabId(tabId);
	    }, [tabId, info.index]);

	    function useTabProps(_ref2) {
	      let { ...props
	      } = _ref2;
	      const newProps = usePressEventHandlers(e => {
	        navigateToIndex(info.index);
	        onSelect === null || onSelect === void 0 ? void 0 : onSelect(enhanceEvent(e, {
	          selectedIndex: getIndex()
	        }));
	        e.preventDefault();
	      }, undefined)(props);
	      newProps.role = "tab";
	      newProps["aria-selected"] = (selected !== null && selected !== void 0 ? selected : false).toString();
	      newProps["aria-controls"] = tabPanelId;
	      return useMergedProps()({}, useTabIdProps(useListNavigationChildProps(useRefElementProps(newProps))));
	    }

	    return {
	      useTabProps,
	      selected
	    };
	  }, []);
	  const useTabPanel = F(function usePanel(info) {
	    //const [shouldFocus, setShouldFocus] = useState(false);
	    const [, setTabId] = useState(undefined);
	    const [visible, setVisible, getVisible] = useState(null);
	    const {
	      useRandomIdProps: usePanelIdProps,
	      id: tabPanelId
	    } = useRandomId({
	      prefix: "aria-tab-panel-"
	    });
	    const {
	      useManagedChildProps,
	      getElement
	    } = useManagedTabPanel({ ...info,
	      tabPanelId,
	      setTabId,
	      focus,
	      setVisible: setVisible,
	      getVisible: getVisible
	    });

	    function focus() {
	      const element = getElement();

	      if (element && getTabListFocusedInner()) {
	        element === null || element === void 0 ? void 0 : element.focus({
	          preventScroll: true
	        });
	      }
	    }

	    y(() => {
	      var _managedTabs$info$ind;

	      (_managedTabs$info$ind = managedTabs[info.index]) === null || _managedTabs$info$ind === void 0 ? void 0 : _managedTabs$info$ind.setTabPanelId(tabPanelId);
	    }, [tabPanelId, info.index]);

	    function useTabPanelProps(_ref3) {
	      var _managedTabs$info$ind2, _props$tabIndex;

	      let { ...props
	      } = _ref3;
	      props["aria-labelledby"] = (_managedTabs$info$ind2 = managedTabs[info.index]) === null || _managedTabs$info$ind2 === void 0 ? void 0 : _managedTabs$info$ind2.tabId;
	      props.role = "tabpanel";
	      (_props$tabIndex = props.tabIndex) !== null && _props$tabIndex !== void 0 ? _props$tabIndex : props.tabIndex = -1; // Make sure the tab panel is tabbable.

	      return useMergedProps()({}, usePanelIdProps(useManagedChildProps(props)));
	    }

	    return {
	      useTabPanelProps,
	      visible
	    };
	  }, []);
	  const useTabsList = F(function useTabList() {
	    function useTabListProps(_ref4) {
	      let { ...props
	      } = _ref4;
	      props.role = "tablist";
	      props["aria-orientation"] = physicalOrientation;
	      return useReferencedTabLabelId("aria-labelledby")(useTabListHasFocusProps(useLogicalDirectionProps(useListNavigationProps(props))));
	    }

	    return {
	      useTabListProps
	    };
	  }, [useListNavigationProps, physicalOrientation]);
	  const useTabsLabel = F(function useTabsLabel() {
	    function useTabsLabelProps(_ref5) {
	      let { ...props
	      } = _ref5;
	      return useTabLabelIdProps(props);
	    }

	    return {
	      useTabsLabelProps
	    };
	  }, []);
	  return {
	    useTab,
	    useTabPanel,
	    useTabsList,
	    useTabsLabel,
	    tabbableIndex,
	    focusTabList: focusCurrent,
	    currentTypeahead,
	    invalidTypeahead,
	    managedPanels,
	    managedTabs
	  };
	}

	function returnFalse() {
	  return false;
	}

	function useAriaTooltip(_ref) {
	  var _mouseoverDelay, _mouseoutDelay, _focusDelay;

	  let {
	    mouseoverDelay,
	    mouseoutDelay,
	    focusDelay
	  } = _ref;
	  (_mouseoverDelay = mouseoverDelay) !== null && _mouseoverDelay !== void 0 ? _mouseoverDelay : mouseoverDelay = 400;
	  (_mouseoutDelay = mouseoutDelay) !== null && _mouseoutDelay !== void 0 ? _mouseoutDelay : mouseoutDelay = 40;
	  (_focusDelay = focusDelay) !== null && _focusDelay !== void 0 ? _focusDelay : focusDelay = 1; // The escape key should close tooltips, but do nothing else.
	  // (i.e. closing a tooltip in a dialog MUST NOT close the dialog too)
	  // TODO: Tooltips are, effectively, always the topmost component,
	  // so we can just have them listen to and swallow all "Escape"
	  // key presses before anyone else. For a more general popup,
	  // or a tooltip in a tooltip (!!) a different solution would be needed.

	  useGlobalHandler(document, "keydown", e => {
	    if (getOpen() && e.key === "Escape" && !e.defaultPrevented) {
	      e.preventDefault();
	      e.stopImmediatePropagation();
	      setOpen(false);
	      setTriggerHoverDelayCorrected(false);
	      setTooltipHoverDelayCorrected(false);
	      setTriggerFocusedDelayCorrected(false);
	      setTooltipFocusedDelayCorrected(false);
	    }
	  }, {
	    capture: true
	  });
	  const [open, setOpen, getOpen] = useState(false);
	  const {
	    useRandomIdProps: useTooltipIdProps,
	    useReferencedIdProps: useTooltipIdReferencingProps
	  } = useRandomId({
	    prefix: "aria-tooltip-"
	  });
	  const [, setTriggerFocused] = usePassiveState(useStableCallback(focused => {
	    const delay = focused ? focusDelay : 1;

	    if (delay != null && isFinite(delay)) {
	      const handle = setTimeout(() => setTriggerFocusedDelayCorrected(focused), focused ? focusDelay : 1);
	      return () => clearTimeout(handle);
	    }
	  }), returnFalse);
	  const [, setTooltipFocused] = usePassiveState(useStableCallback(focused => {
	    const delay = focused ? focusDelay : 1;

	    if (delay != null && isFinite(delay)) {
	      const handle = setTimeout(() => setTooltipFocusedDelayCorrected(focused), delay);
	      return () => clearTimeout(handle);
	    }
	  }), returnFalse);
	  const [, setTriggerHover] = usePassiveState(useStableCallback(hovering => {
	    const delay = hovering ? mouseoverDelay : mouseoutDelay;

	    if (delay != null && isFinite(delay)) {
	      const handle = setTimeout(() => setTriggerHoverDelayCorrected(hovering), delay);
	      return () => clearTimeout(handle);
	    }
	  }), returnFalse);
	  const [, setTooltipHover] = usePassiveState(useStableCallback(hovering => {
	    const delay = hovering ? mouseoverDelay : mouseoutDelay;

	    if (delay != null && isFinite(delay)) {
	      const handle = setTimeout(() => setTooltipHoverDelayCorrected(hovering), delay);
	      return () => clearTimeout(handle);
	    }
	  }), returnFalse);
	  const [triggerFocusedDelayCorrected, setTriggerFocusedDelayCorrected] = useState(false);
	  const [triggerHoverDelayCorrected, setTriggerHoverDelayCorrected] = useState(false);
	  const [tooltipFocusedDelayCorrected, setTooltipFocusedDelayCorrected] = useState(false);
	  const [tooltipHoverDelayCorrected, setTooltipHoverDelayCorrected] = useState(false);
	  y(() => {
	    setOpen(triggerFocusedDelayCorrected || triggerHoverDelayCorrected || tooltipFocusedDelayCorrected || tooltipHoverDelayCorrected);
	  }, [triggerFocusedDelayCorrected || triggerHoverDelayCorrected || tooltipFocusedDelayCorrected || tooltipHoverDelayCorrected]);
	  const useTooltipTrigger = F(function useTooltipTrigger() {
	    useGlobalHandler(document, "pointermove", e => {
	      var _getElement;

	      const target = e.target;
	      setTriggerHover(target == getElement() || !!((_getElement = getElement()) !== null && _getElement !== void 0 && _getElement.contains(target)));
	    }, {
	      capture: true
	    });

	    function onTouchEnd(e) {
	      e.target.focus();
	    }

	    const {
	      useHasFocusProps,
	      getElement
	    } = useHasFocus({
	      onFocusedInnerChanged: setTriggerFocused
	    });

	    function useTooltipTriggerProps(_ref2) {
	      var _props$tabIndex;

	      let { ...props
	      } = _ref2;
	      // Note: Though it's important to make sure that focusing activates a tooltip,
	      // it's perfectly reasonable that a child element will be the one that's focused,
	      // not this one, so we don't set tabIndex=0
	      (_props$tabIndex = props.tabIndex) !== null && _props$tabIndex !== void 0 ? _props$tabIndex : props.tabIndex = -1;
	      return useTooltipIdReferencingProps("aria-describedby")(useHasFocusProps(useMergedProps()({
	        onTouchEnd
	      }, props)));
	    }

	    return {
	      useTooltipTriggerProps
	    };
	  }, [useTooltipIdReferencingProps]);
	  const useTooltip = F(function useTooltip() {
	    const {
	      useHasFocusProps,
	      getElement
	    } = useHasFocus({
	      onFocusedInnerChanged: setTooltipFocused
	    });
	    useGlobalHandler(document, "pointermove", e => {
	      var _getElement2;

	      const target = e.target;
	      setTooltipHover(target == getElement() || !!((_getElement2 = getElement()) !== null && _getElement2 !== void 0 && _getElement2.contains(target)));
	    }, {
	      capture: true
	    });

	    function useTooltipProps(_ref3) {
	      let { ...props
	      } = _ref3;
	      return useTooltipIdProps(useHasFocusProps(useMergedProps()({}, props)));
	    }

	    return {
	      useTooltipProps
	    };
	  }, [useTooltipIdProps]);
	  return {
	    useTooltip,
	    useTooltipTrigger,
	    isOpen: open,
	    getIsOpen: getOpen
	  };
	}

	function useAriaRadioGroup(_ref) {
	  let {
	    name,
	    selectedValue,
	    onInput
	  } = _ref;
	  const {
	    getElement: getRadioGroupParentElement,
	    useRefElementProps
	  } = useRefElement({}); //const getSelectedIndex = useCallback((selectedValue: V) => { return byName.current.get(selectedValue) ?? 0 }, [])

	  const [selectedIndex, setSelectedIndex] = useState(0);
	  const byName = s(new Map());
	  const stableOnInput = useStableCallback(onInput);
	  const [anyRadiosFocused, setAnyRadiosFocused, getAnyRadiosFocused] = useState(false);
	  const {
	    managedChildren,
	    useListNavigationChild,
	    useListNavigationProps,
	    navigateToIndex,
	    tabbableIndex,
	    focusCurrent,
	    currentTypeahead,
	    invalidTypeahead
	  } = useListNavigation({
	    shouldFocusOnChange: getAnyRadiosFocused
	  }); // Track whether the currently focused element is a child of the radio group parent element.
	  // When it's not, we reset the tabbable index back to the currently selected element.

	  const {
	    useActiveElementProps
	  } = useActiveElement({
	    onActiveElementChange: F(activeElement => {
	      var _getRadioGroupParentE;

	      return setAnyRadiosFocused(!!((_getRadioGroupParentE = getRadioGroupParentElement()) !== null && _getRadioGroupParentE !== void 0 && _getRadioGroupParentE.contains(activeElement)));
	    }, [])
	  });
	  y(() => {
	    if (!anyRadiosFocused) navigateToIndex(selectedIndex !== null && selectedIndex !== void 0 ? selectedIndex : 0);
	  }, [anyRadiosFocused, selectedIndex, navigateToIndex]);
	  const useRadioGroupProps = F(_ref2 => {
	    let { ...props
	    } = _ref2;
	    props.role = "radiogroup";
	    return useListNavigationProps(useRefElementProps(useActiveElementProps(props)));
	  }, [useRefElementProps, useActiveElementProps]);
	  const correctedIndex = selectedIndex == null || selectedIndex < 0 || selectedIndex >= managedChildren.length ? null : selectedIndex;
	  useChildFlag({
	    activatedIndex: correctedIndex,
	    managedChildren,
	    setChildFlag: (i, checked) => {
	      var _managedChildren$i;

	      return (_managedChildren$i = managedChildren[i]) === null || _managedChildren$i === void 0 ? void 0 : _managedChildren$i.setChecked(checked);
	    },
	    getChildFlag: i => {
	      var _managedChildren$i$ge, _managedChildren$i2;

	      return (_managedChildren$i$ge = (_managedChildren$i2 = managedChildren[i]) === null || _managedChildren$i2 === void 0 ? void 0 : _managedChildren$i2.getChecked()) !== null && _managedChildren$i$ge !== void 0 ? _managedChildren$i$ge : false;
	    }
	  });
	  y(() => {
	    const selectedIndex = byName.current.get(selectedValue);
	    setSelectedIndex(selectedIndex !== null && selectedIndex !== void 0 ? selectedIndex : null);
	  }, [byName, selectedValue]);
	  const useRadio = F(function useAriaRadio(_ref3) {
	    let {
	      value,
	      index,
	      text,
	      disabled,
	      labelPosition,
	      ...rest
	    } = _ref3;
	    const [checked, setChecked, getChecked] = useState(null);
	    const onInput = F(e => {
	      stableOnInput(enhanceEvent(e, {
	        selectedValue: value
	      }));
	    }, [stableOnInput, value, index]);
	    const {
	      useCheckboxLikeInputElement,
	      useCheckboxLikeLabelElement
	    } = useCheckboxLike({
	      checked: checked !== null && checked !== void 0 ? checked : false,
	      disabled,
	      labelPosition,
	      onInput,
	      role: "radio"
	    });
	    h(() => {
	      byName.current.set(value, index);
	      return () => {
	        byName.current.delete(value);
	      };
	    }, [byName, value, index]);
	    const {
	      tabbable,
	      useListNavigationChildProps
	    } = useListNavigationChild({
	      index,
	      setChecked,
	      getChecked,
	      text,
	      ...rest
	    });

	    const useRadioInput = _ref4 => {
	      let {
	        tag
	      } = _ref4;

	      const useRadioInputProps = props => {
	        if (tag == "input") {
	          props.name = name;
	          props.checked = checked !== null && checked !== void 0 ? checked : false;
	          props.type = "radio";
	        } else {
	          props["aria-checked"] = (checked !== null && checked !== void 0 ? checked : false).toString();
	        }

	        const propsIfInputHandlesFocus = useListNavigationChildProps(props);
	        const {
	          useCheckboxLikeInputElementProps
	        } = useCheckboxLikeInputElement({
	          tag
	        });
	        return useMergedProps()(useCheckboxLikeInputElementProps({}), labelPosition == "separate" ? propsIfInputHandlesFocus : props);
	      };

	      return {
	        useRadioInputProps
	      };
	    };

	    const useRadioLabel = F(_ref5 => {
	      let {
	        tag
	      } = _ref5;

	      const useRadioLabelProps = props => {
	        const {
	          useCheckboxLikeLabelElementProps
	        } = useCheckboxLikeLabelElement({
	          tag
	        });
	        const propsIfLabelHandlesFocus = useListNavigationChildProps(props);
	        return useCheckboxLikeLabelElementProps(useMergedProps()({}, labelPosition == "wrapping" ? propsIfLabelHandlesFocus : props));
	      };

	      return {
	        useRadioLabelProps
	      };
	    }, [useCheckboxLikeLabelElement]);
	    return {
	      useRadioInput,
	      useRadioLabel,
	      checked: checked !== null && checked !== void 0 ? checked : false,
	      tabbable: tabbable !== null && tabbable !== void 0 ? tabbable : false
	    };
	  }, [byName, useListNavigationChild]);
	  return {
	    useRadio,
	    useRadioGroupProps,
	    managedChildren,
	    selectedIndex,
	    tabbableIndex,
	    focusRadio: focusCurrent,
	    currentTypeahead,
	    invalidTypeahead,
	    anyRadiosFocused
	  };
	}

	const DemoUseInterval = () => {
	    const [interval, setInterval] = d(1000);
	    const [fireCount, setFireCount] = d(0);
	    useInterval({ interval, callback: () => setFireCount(i => ++i) });
	    return (e$1("div", { class: "demo", children: [e$1("label", { children: ["Interval duration: ", e$1("input", { type: "number", value: interval, onInput: e => setInterval(e.currentTarget.valueAsNumber) })] }), e$1("div", { children: ["The callback has been called ", fireCount, " time", fireCount === 1 ? "" : "s", "."] })] }));
	};

	const RandomWords$1 = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.".split(" ");
	const RovingChildContext = D(null);
	const DemoUseRovingTabIndex = g(() => {
	    const [lastFocusedInner, setLastFocusedInner, getLastFocusedInner] = useState(false);
	    const { useHasFocusProps } = useHasFocus({ onLastFocusedInnerChanged: setLastFocusedInner });
	    const { useListNavigationChild, currentTypeahead, tabbableIndex, useListNavigationProps, navigateToIndex } = useListNavigation({ shouldFocusOnChange: getLastFocusedInner });
	    //const { useRovingTabIndexChild, useRovingTabIndexProps } = useRovingTabIndex<HTMLUListElement, RovingTabIndexChildInfo>({ tabbableIndex, focusOnChange: false });
	    return (e$1("div", { className: "demo", children: [e$1("h2", { children: "Keyboard & List Navigation" }), e$1("h3", { children: e$1("code", { children: "useRovingTabIndex" }) }), e$1("p", { children: ["Native HTML elements offer fantastic keyboard accessability, but cover a relatively limited number of use cases. There is no native HTML tree element, for example, that allows keyboard navigation of its items, nor is it possible to combine the keyboard navigation behavior of a ", e$1("code", { children: "<select>" }), " menu with the menu in a drawer component."] }), e$1("p", { children: ["When coming across a List or a Menu or a RadioGroup or a ToggleButtonGroup or any other \"one component made up of child components\", the usual expected behavior, at least natively, is that tabbing into the component is one action, and tabbing out is another.  Navigating ", e$1("em", { children: "within" }), " the component is done with the arrow keys or other methods."] }), e$1("p", { children: ["This is important both for accessability, but also just for general usability.  When tabbing back and forth, the ability to skip a long list without needing to trudge through ", e$1("em", { children: "every one" }), " of its child elements is extremely important."] }), e$1("p", { children: [e$1("code", { children: "useListNavigation" }), " wraps up the functionality of a few hooks (", e$1("code", { children: "useRovingTabIndex" }), ", ", e$1("code", { children: "useLinearNavigation" }), ", ", e$1("code", { children: "useTypeaheadNavigation" }), "to allow for ARIA-compliant navigation of lists and other similar components.  For more advanced use cases, you can use the other hooks individually."] }), e$1("p", { children: [e$1("code", { children: "useListNavigation" }), " (and ", e$1("code", { children: "useRovingTabIndex" }), ") internally use ", e$1("code", { children: "useChildManager" }), ", which is how the child elements and the parent communicate with each other. This means there are virtually no restrictions on how the DOM is set up as long as you can provide the children with the ", e$1("code", { children: "useListNavigationChild" }), " hook that's returned, usually with a simple ", e$1("code", { children: "Context" }), ". If the child element itself has a focusable element, like a button, it can also be wired up to disable itself Feel free to nest them too, as long as you are aware of your ", e$1("code", { children: "Context" }), " management (i.e. remember that you need to create a new ", e$1("code", { children: "Context" }), " for each use case)."] }), e$1("label", { children: ["Tabbable index: ", e$1("input", { type: "number", value: tabbableIndex ?? undefined, onInput: e => { e.preventDefault(); navigateToIndex(e.currentTarget.valueAsNumber); } })] }), e$1("ul", { ...useHasFocusProps(useListNavigationProps({})), children: e$1(RovingChildContext.Provider, { value: useListNavigationChild, children: Array.from((function* () {
	                        for (let i = 0; i < 10; ++i) {
	                            yield e$1(DemoUseRovingTabIndexChild, { index: i }, i);
	                        }
	                    })()) }) }), currentTypeahead && e$1("div", { children: ["Typeahead: ", currentTypeahead] })] }));
	});
	const DemoUseRovingTabIndexChild = g((({ index }) => {
	    const [randomWord] = useState(() => RandomWords$1[index /*Math.floor(Math.random() * (RandomWords.length - 1))*/]);
	    const useRovingTabIndexChild = T$1(RovingChildContext);
	    const text = `${randomWord} This is item #${index + 1}`;
	    const { useListNavigationChildProps, useListNavigationSiblingProps, tabbable } = useRovingTabIndexChild({ index, text, hidden: (index == 5) });
	    const props = useListNavigationChildProps({});
	    return (e$1("li", { ...props, children: [text, " (", tabbable ? "Tabbable" : "Not tabbable", ")", e$1("input", { ...useListNavigationSiblingProps({ type: "checkbox" }) })] }));
	}));

	const DemoUseTimeout = () => {
	    const [timeout, setTimeout] = d(1000);
	    const [triggerIndex, setTriggerIndex] = d("");
	    const [fireCount, setFireCount] = d(0);
	    useTimeout({ timeout, triggerIndex, callback: () => setFireCount(i => ++i) });
	    return (e$1("div", { class: "demo", children: [e$1("label", { children: ["Timeout duration: ", e$1("input", { type: "number", value: timeout, onInput: e => setTimeout(e.currentTarget.valueAsNumber) })] }), e$1("label", { children: ["Refresh key: ", e$1("input", { type: "text", value: triggerIndex, onInput: e => setTriggerIndex(e.currentTarget.value) })] }), e$1("div", { children: ["The callback has been called ", fireCount, " time", fireCount === 1 ? "" : "s", "."] })] }));
	};

	const RandomWords = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.".split(" ");
	const DemoUseDroppable = () => {
	    const { droppedFiles, droppedStrings, filesForConsideration, stringsForConsideration, useDroppableProps, dropError } = useDroppable({ effect: "copy" });
	    useMergedProps()({}, { ref: s(null) });
	    const p = useDroppableProps({ className: "demo droppable" });
	    p.ref;
	    return (e$1("div", { ...p, children: [droppedStrings != null && e$1("div", { children: ["Data dropped: ", e$1("ul", { children: Object.entries(droppedStrings).map(([type, value]) => e$1("li", { children: [type, ": ", value] })) })] }), droppedFiles != null && e$1("div", { children: ["Files dropped: ", e$1("table", { children: [e$1("thead", { children: e$1("tr", { children: [e$1("th", { children: "Name" }), e$1("th", { children: "Size" }), e$1("th", { children: "Type" }), e$1("th", { children: "Last modified" })] }) }), e$1("tbody", { children: droppedFiles.map(f => e$1("tr", { children: [e$1("td", { children: f.name }), f.data.byteLength, e$1("td", { children: f.type }), e$1("td", { children: new Date(f.lastModified ?? 0) })] })) })] })] }), e$1("hr", {}), stringsForConsideration != null && e$1("div", { children: ["Data being considered: ", e$1("ul", { children: Array.from(stringsForConsideration).map(type => e$1("li", { children: type })) })] }), filesForConsideration != null && e$1("div", { children: ["Files being considered: ", e$1("ul", { children: filesForConsideration.map(f => e$1("li", { children: JSON.stringify(f) })) })] }), e$1("hr", {}), dropError && e$1("div", { children: dropError instanceof Error ? dropError.message : JSON.stringify(dropError) })] }));
	};
	const DemoUseDraggable = () => {
	    const { dragging, useDraggableProps, lastDropEffect, getLastDropEffect, getDragging } = useDraggable({ data: { "text/plain": "This is custom draggable content of type text/plain." } });
	    return (e$1("div", { ...useDraggableProps({ className: "demo" }), children: "Draggable content" }));
	};
	const DemoUseFocusTrap = g(({ depth }) => {
	    const [active, setActive] = useState(false);
	    const { useFocusTrapProps } = useFocusTrap({ trapActive: active });
	    const divProps = useFocusTrapProps({ ref: undefined, className: "focus-trap-demo" });
	    if (depth == 2)
	        return e$1("div", {});
	    return (e$1("div", { className: "demo", children: [e$1("label", { children: ["Active: ", e$1("input", { type: "checkbox", checked: active, onInput: e => { e.preventDefault(); setActive(e.currentTarget.checked); } })] }), e$1("div", { ...divProps, children: e$1(DemoUseFocusTrapChild, { active: active, setActive: setActive, depth: depth ?? 0 }) })] }));
	});
	const DemoUseFocusTrapChild = g(({ setActive, active, depth }) => {
	    return (e$1(d$1, { children: [e$1("button", { children: "Button 1" }), e$1("button", { children: "Button 2" }), e$1("button", { children: "Button 3" }), e$1("label", { children: ["Active: ", e$1("input", { type: "checkbox", checked: active, onInput: e => { e.preventDefault(); setActive(e.currentTarget.checked); } })] })] }));
	});
	const UseAccordionSectionContext = D(null);
	const DemoUseAccordion = g(() => {
	    const [expandedIndex, setExpandedIndex] = useState(0);
	    const { useAriaAccordionSection } = useAriaAccordion({ expandedIndex, setExpandedIndex });
	    return (e$1(UseAccordionSectionContext.Provider, { value: useAriaAccordionSection, children: e$1("div", { className: "demo", children: e$1("div", { children: [e$1(DemoAccordionSection, { index: 0 }), e$1(DemoAccordionSection, { index: 1 }), e$1(DemoAccordionSection, { index: 2 })] }) }) }));
	});
	const DemoAccordionSection = g(({ index }) => {
	    const useAccordionSection = T$1(UseAccordionSectionContext);
	    const { expanded, useAriaAccordionSectionBody, useAriaAccordionSectionHeader } = useAccordionSection({ index });
	    const { useAriaAccordionSectionBodyProps } = useAriaAccordionSectionBody();
	    const { useAriaAccordionSectionHeaderProps } = useAriaAccordionSectionHeader({ tag: "button" });
	    const p = useAriaAccordionSectionBodyProps({ className: "accordion-section-body", hidden: !expanded });
	    p.id;
	    return (e$1("div", { className: "accordion-section", children: [e$1("button", { ...useAriaAccordionSectionHeaderProps({ className: "accordion-section-header" }), children: ["Header #", index + 1] }), e$1("div", { ...p, children: [e$1("p", { children: ["Body content #", index + 1] }), e$1("p", { children: RandomWords.join(" ") })] })] }));
	});
	const DemoUseCheckbox = g(() => {
	    return (e$1(d$1, { children: [e$1("div", { className: "demo", children: [e$1(Checkbox1, {}), e$1(Checkbox2, {})] }), e$1(DemoUseCheckboxGroup, {})] }));
	});
	const Checkbox1 = g(() => {
	    const [checked, setChecked] = useState(false);
	    const { useCheckboxInputElement, useCheckboxLabelElement } = useAriaCheckbox({ disabled: false, checked, labelPosition: "separate", onInput: e => setChecked(e[EventDetail].checked) });
	    const { useCheckboxInputElementProps } = useCheckboxInputElement({ tag: "input" });
	    const { useCheckboxLabelElementProps } = useCheckboxLabelElement({ tag: "label" });
	    return (e$1("div", { children: [e$1("input", { ...useCheckboxInputElementProps({ type: "checkbox", }) }), e$1("label", { ...useCheckboxLabelElementProps({}), children: "Label" })] }));
	});
	const Checkbox2 = g(() => {
	    const [checked, setChecked] = useState(false);
	    const { useCheckboxLabelElement, useCheckboxInputElement } = useAriaCheckbox({ disabled: false, labelPosition: "wrapping", onInput: e => setChecked(e[EventDetail].checked), checked });
	    const { useCheckboxInputElementProps } = useCheckboxInputElement({ tag: "input" });
	    const { useCheckboxLabelElementProps } = useCheckboxLabelElement({ tag: "label" });
	    return (e$1("div", { children: e$1("label", { ...useCheckboxLabelElementProps({}), children: [e$1("input", { ...useCheckboxInputElementProps({ type: "checkbox" }) }), " Label"] }) }));
	});
	const CheckboxGroupContext = D(null);
	const DemoUseCheckboxGroup = g(() => {
	    const onUpdateChildren = (event) => {
	        const value = event[EventDetail].childrenChecked;
	        let selectedValues = new Set();
	        for (let i = 0; i < 10; ++i) {
	            if (value === false) ;
	            else if (value === true)
	                selectedValues.add(i);
	            else if (value.get(i) === true)
	                selectedValues.add(i);
	        }
	        setSelectedValues(selectedValues);
	    };
	    const { useHasFocusProps, getFocusedInner } = useHasFocus({});
	    const { useCheckboxGroupParentProps: useCheckboxGroupCheckboxProps, useCheckboxGroupChild, parentIsChecked: selfIsChecked, parentPercentChecked: percentChecked, onCheckboxGroupParentInput: onCheckboxGroupInput } = useCheckboxGroup({ shouldFocusOnChange: getFocusedInner, onUpdateChildren });
	    const { useCheckboxInputElement, useCheckboxLabelElement } = useAriaCheckbox({ checked: selfIsChecked, disabled: false, labelPosition: "separate", onInput: onCheckboxGroupInput });
	    const { useCheckboxInputElementProps } = useCheckboxInputElement({ tag: "input" });
	    const { useCheckboxLabelElementProps } = useCheckboxLabelElement({ tag: "label" });
	    const [selectedValues, setSelectedValues] = useState(new Set());
	    return e$1("div", { class: "demo", children: e$1(CheckboxGroupContext.Provider, { value: useCheckboxGroupChild, children: [e$1("div", { children: [e$1("input", { ...useCheckboxInputElementProps(useCheckboxGroupCheckboxProps({})) }), e$1("label", { ...useCheckboxLabelElementProps({}), children: "All checked?" })] }), e$1("div", { ...useHasFocusProps({ style: { "display": "flex", "flexDirection": "column" } }), children: Array.from((function* () {
	                        for (let i = 0; i < 10; ++i) {
	                            function setSelected2(selected) {
	                                setSelectedValues(selectedValues => {
	                                    let next = new Set(selectedValues);
	                                    if (selected && !next.has(i)) {
	                                        next.add(i);
	                                        return next;
	                                    }
	                                    else if (!selected && next.has(i)) {
	                                        next.delete(i);
	                                        return next;
	                                    }
	                                    return selectedValues;
	                                });
	                            }
	                            yield e$1(DemoUseCheckboxGroupChild, { index: i, checked: !!selectedValues.has(i), setChecked: setSelected2 }, i);
	                        }
	                    })()) })] }) });
	});
	const DemoUseCheckboxGroupChild = g(({ index, checked, setChecked }) => {
	    const { randomId } = useRandomId();
	    const useCheckboxGroupChild = T$1(CheckboxGroupContext);
	    let text = `Number ${index + 1} checkbox ${checked ? "(checked)" : ""}`;
	    const { tabbable, useCheckboxGroupChildProps } = useCheckboxGroupChild({ index, text, checked, id: randomId });
	    text = `Number ${index + 1} checkbox ${checked ? "(checked)" : ""} ${tabbable ? "(tabbble)" : ""}`;
	    const { useCheckboxInputElement, useCheckboxLabelElement } = useAriaCheckbox({ checked, disabled: false, labelPosition: "separate", onInput: e => { setChecked(e[EventDetail].checked); } });
	    const { useCheckboxInputElementProps } = useCheckboxInputElement({ tag: "input" });
	    const { useCheckboxLabelElementProps } = useCheckboxLabelElement({ tag: "label" });
	    return (e$1("div", { children: [e$1("input", { ...useCheckboxInputElementProps(useCheckboxGroupChildProps({})) }), e$1("label", { ...useCheckboxLabelElementProps({}), children: text })] }));
	});
	const DemoUseDialog = g(() => {
	    const onClose = (() => setOpen(false));
	    const [open, setOpen] = useState(false);
	    const { useDialogBackdrop, useDialogBody, useDialogProps, useDialogTitle } = useAriaDialog({ open, onClose });
	    const { useDialogBackdropProps } = useDialogBackdrop();
	    const { useDialogBodyProps } = useDialogBody({ descriptive: true });
	    const { useDialogTitleProps } = useDialogTitle();
	    return (e$1("div", { class: "demo", children: [e$1("label", { children: e$1("input", { type: "checkbox", checked: open, onInput: e => { e.preventDefault(); setOpen(e.currentTarget.checked); } }) }), e$1("div", { ...useDialogBackdropProps({ hidden: !open }), children: e$1("div", { ...useDialogProps({}), children: [e$1("div", { ...useDialogTitleProps({}), children: "Dialog Title" }), e$1("div", { ...useDialogBodyProps({}), children: [e$1("p", { tabIndex: -1, children: "Dialog body content" }), e$1("p", { children: RandomWords.join(" ") }), e$1("p", { children: RandomWords.join(" ") }), e$1("p", { children: RandomWords.join(" ") }), e$1("p", { children: e$1("button", { onClick: onClose, children: "Close" }) })] })] }) })] }));
	});
	const RadioWrapContext = D(false);
	const RadioContext = D(null);
	const DemoUseRadioGroup = g(() => {
	    const [selectedIndex, setSelectedIndex] = useState(0);
	    const [wrap, setWrap] = useState(T$1(RadioWrapContext));
	    const { useRadio, useRadioGroupProps, anyRadiosFocused } = useAriaRadioGroup({
	        name: "radio-demo-1",
	        onInput: (e) => setSelectedIndex(+e[EventDetail].selectedValue),
	        selectedValue: selectedIndex
	    });
	    return e$1("div", { class: "demo", children: [e$1("label", { children: [e$1("input", { type: "checkbox", checked: wrap, onInput: e => setWrap(w => !w) }), " Wrapper label"] }), e$1(RadioWrapContext.Provider, { value: wrap, children: [anyRadiosFocused.toString(), e$1(RadioContext.Provider, { value: useRadio, children: e$1("div", { ...useRadioGroupProps({}), children: Array.from((function* () {
	                                for (let i = 0; i < 10; ++i) {
	                                    yield e$1(DemoRadio, { index: i }, i);
	                                }
	                            })()) }) })] }, wrap)] });
	});
	const DemoRadio = g(({ index }) => {
	    const wrap = T$1(RadioWrapContext);
	    const { useRadioInput, useRadioLabel, checked, tabbable } = T$1(RadioContext)({ index, text: null, value: index, disabled: false, labelPosition: wrap ? "wrapping" : "separate" });
	    const { useRadioInputProps } = useRadioInput({ tag: "input" });
	    const { useRadioLabelProps } = useRadioLabel({ tag: "label" });
	    if (wrap)
	        return e$1("label", { ...useRadioLabelProps({}), children: [e$1("input", { ...useRadioInputProps({}) }), "Number ", index + 1, " radio", checked ? " (checked)" : "", tabbable ? " (tabbable)" : ""] });
	    else
	        return e$1("div", { children: [e$1("input", { ...useRadioInputProps({}) }), "Number ", index + 1, " radio", checked ? " (checked)" : "", tabbable ? " (tabbable)" : "", e$1("label", { ...useRadioLabelProps({}) })] });
	});
	const ListBoxSingleItemContext = D(null);
	const DemoUseListboxSingle = g(() => {
	    const [selectedIndex, setSelectedIndex] = useState(0);
	    const { useListboxSingleItem, useListboxSingleLabel, useListboxSingleProps } = useAriaListboxSingle({ selectedIndex, onSelect: e => setSelectedIndex(e[EventDetail].selectedIndex), selectionMode: "activate" });
	    return e$1("div", { class: "demo", children: e$1(ListBoxSingleItemContext.Provider, { value: useListboxSingleItem, children: e$1("ul", { ...useListboxSingleProps({}), children: Array.from((function* () {
	                    for (let i = 0; i < 10; ++i) {
	                        yield e$1(DemoListboxSingleOption, { index: i }, i);
	                    }
	                })()) }) }) });
	});
	const DemoListboxSingleOption = g(({ index }) => {
	    const { getSelected, selected, tabbable, useListboxSingleItemProps } = T$1(ListBoxSingleItemContext)({ index, text: null, tag: "li" });
	    return e$1("li", { ...useListboxSingleItemProps({}), children: ["Number ", index + 1, " option", selected ? " (selected)" : "", tabbable ? " (tabbable)" : ""] });
	});
	const ListBoxMultiItemContext = D(null);
	const DemoUseListboxMulti = g(() => {
	    const { useListboxMultiItem, useListboxMultiLabel, useListboxMultiProps, currentTypeahead } = useAriaListboxMulti({});
	    const [selectedValues, setSelectedValues] = useState(new Set());
	    return e$1("div", { class: "demo", children: e$1(ListBoxMultiItemContext.Provider, { value: useListboxMultiItem, children: [e$1("ul", { ...useListboxMultiProps({}), children: Array.from((function* () {
	                        for (let i = 0; i < 10; ++i) {
	                            function setSelected2(selected) {
	                                setSelectedValues(selectedValues => {
	                                    let next = new Set(selectedValues);
	                                    if (selected && !next.has(i)) {
	                                        next.add(i);
	                                        return next;
	                                    }
	                                    else if (!selected && next.has(i)) {
	                                        next.delete(i);
	                                        return next;
	                                    }
	                                    return selectedValues;
	                                });
	                            }
	                            yield e$1(DemoListboxMultiOption, { index: i, selected: !!selectedValues.has(i), setSelected: setSelected2 }, i);
	                        }
	                    })()) }), currentTypeahead != null && e$1("p", { children: currentTypeahead })] }) });
	});
	const MenuItemContext = D(null);
	const DemoListboxMultiOption = g(({ index, selected, setSelected }) => {
	    let text = `Number ${index + 1} option${selected ? " (selected)" : ""}`;
	    const { tabbable, useListboxMultiItemProps } = T$1(ListBoxMultiItemContext)({ tag: "li", index, text, onSelect: e => setSelected(e[EventDetail].selected), selected });
	    text = `Number ${index + 1} option${selected ? " (selected)" : ""}${tabbable ? " (tabbable)" : ""}`;
	    return e$1("li", { ...useListboxMultiItemProps({}), children: text });
	});
	const DemoMenu = g(() => {
	    const [open, setOpen] = useState(false);
	    const onClose = () => setOpen(false);
	    const onOpen = () => setOpen(true);
	    const { useHasFocusProps, getFocusedInner: getMenuFocusedInner } = useHasFocus({});
	    const { useMenuButton, useMenuItem, useMenuProps } = useAriaMenu({ open, onClose, onOpen, shouldFocusOnChange: getMenuFocusedInner });
	    const { useMenuButtonProps } = useMenuButton({ tag: "button" });
	    return (e$1("div", { class: "demo", children: e$1(MenuItemContext.Provider, { value: useMenuItem, children: [e$1("button", { ...useMenuButtonProps({ onClick: e => setOpen(open => !open) }), children: "Open menu" }), e$1("ul", { ...useMenuProps(useHasFocusProps({})), hidden: !open, children: [e$1(DemoMenuItem, { index: 0 }), e$1(DemoMenuItem, { index: 1 }), e$1(DemoMenuItem, { index: 2 })] })] }) }));
	});
	const DemoMenuItem = g(({ index }) => {
	    const useAriaMenuItem = T$1(MenuItemContext);
	    const { useMenuItemProps } = useAriaMenuItem({ index, text: null });
	    return e$1("li", { ...useMenuItemProps({}), children: ["Item ", index + 1] });
	});
	const TabContext = D(null);
	const TabPanelContext = D(null);
	const DemoTabs = g(() => {
	    const [selectedIndex, setSelectedIndex] = useState(0);
	    const [selectionMode, setSelectionMode] = useState("focus");
	    const { useTabPanel, useTabsLabel, useTab, useTabsList } = useAriaTabs({ onSelect: e => setSelectedIndex(e[EventDetail].selectedIndex), selectedIndex, selectionMode, orientation: "block" });
	    const { useTabListProps } = useTabsList();
	    return (e$1(TabContext.Provider, { value: useTab, children: e$1(TabPanelContext.Provider, { value: useTabPanel, children: e$1("div", { class: "demo", children: [e$1("label", { children: [e$1("input", { type: "checkbox", checked: selectionMode == "focus", onInput: (e) => { e.preventDefault(); setSelectionMode(e.currentTarget.checked ? "focus" : "activate"); } }), " Activate on focus?"] }), e$1("ul", { ...useTabListProps({}), children: [e$1(DemoTab, { index: 0 }), e$1(DemoTab, { index: 1 }), e$1(DemoTab, { index: 2 }), e$1(DemoTab, { index: 3 }), e$1(DemoTab, { index: 4 })] }), e$1("div", { children: [e$1(DemoTabPanel, { index: 0 }), e$1(DemoTabPanel, { index: 1 }), e$1(DemoTabPanel, { index: 2 }), e$1(DemoTabPanel, { index: 3 }), e$1(DemoTabPanel, { index: 4 })] })] }) }) }));
	});
	const DemoTab = g(({ index }) => {
	    const useTab = T$1(TabContext);
	    const { useTabProps, selected } = useTab({ index, text: null, tag: "li" });
	    return (e$1(d$1, { children: e$1("li", { ...useTabProps({}), children: ["Tab #", index + 1, " (", `Selected: ${selected}`, ")"] }) }));
	});
	const DemoTabPanel = g(({ index }) => {
	    const useTabPanel = T$1(TabPanelContext);
	    const { useTabPanelProps, visible } = useTabPanel({ index });
	    return (e$1("div", { ...useTabPanelProps({ hidden: !visible }), children: [e$1("p", { children: ["Tab panel content #", index + 1, " (", `Selected: ${visible}`, ")."] }), e$1("p", { children: RandomWords.slice(0, Math.floor(RandomWords.length / (index + 1))).join(" ") })] }));
	});
	const DemoTooltip = g(() => {
	    const { useTooltip, useTooltipTrigger, isOpen } = useAriaTooltip({});
	    const { useTooltipProps } = useTooltip();
	    const { useTooltipTriggerProps } = useTooltipTrigger();
	    return (e$1("div", { class: "demo", children: e$1("p", { children: ["This is a paragraph with a ", e$1("span", { ...useTooltipTriggerProps({}), children: "tooltip right here." }), e$1("span", { ...useTooltipProps({ hidden: !isOpen }), children: "This is the tooltip content." })] }) }));
	});
	/*
	const DemoTable = memo(() => {

	    const { useTableBody, useTableFoot, useTableHead, useTableProps, useTableRow } = useTable<
	        HTMLTableElement, HTMLTableSectionElement, HTMLTableSectionElement, HTMLTableSectionElement, HTMLTableRowElement, HTMLTableCellElement, HTMLTableCellElement>({});

	    const { useTableHeadProps } = useTableHead({});
	    const { useTableBodyProps } = useTableBody({});

	    const rows: VNode<any>[] = Array.from(function* () {
	        for (let i = 0; i < 10; ++i) {
	            yield <TableRow rowIndex={i + 1} />;
	        }
	    }());


	    return (
	        <TableRowContext.Provider value={useTableRow}>
	            <table {...useTableProps({})}>
	                <thead {...useTableHeadProps({ children: [<TableHeaderRow rowIndex={0} />] })} />
	                <tbody {...useTableBodyProps({ children: rows })} />
	            </table>
	        </TableRowContext.Provider>
	    )

	});

	const TableRowContext = createContext<UseTableRow<HTMLTableRowElement, HTMLTableCellElement, HTMLTableCellElement>>(null!);


	const TableRow = memo(function TableRow({ rowIndex }: { rowIndex: number }) {
	    const i = rowIndex - 1;
	    const useTableRow = useContext(TableRowContext);
	    const { rowIndexAsSorted, rowIndexAsUnsorted, useTableCell, useTableRowProps } = useTableRow({ rowIndex, location: "body" });
	    const date = new Date(new Date().getFullYear(), new Date().getMonth(), (i * 7) ** 2);

	    const { useTableCellProps: useTableCellProps1, useTableCellDelegateProps: useTableCellDelegateProps1 } = useTableCell({ columnIndex: 0, value: i });
	    const { useTableCellProps: useTableCellProps2, useTableCellDelegateProps: useTableCellDelegateProps2 } = useTableCell({ columnIndex: 1, value: RandomWords[i] });
	    const { useTableCellProps: useTableCellProps3, useTableCellDelegateProps: useTableCellDelegateProps3 } = useTableCell({ columnIndex: 2, value: date });
	    return (
	        <tr {...useTableRowProps({ "data-index": rowIndex } as {})}>
	            <td {...useTableCellProps1(useTableCellDelegateProps1({}))}>{i}</td>
	            <td {...useTableCellProps2(useTableCellDelegateProps2({}))}>{RandomWords[i]}</td>
	            <td {...useTableCellProps3(useTableCellDelegateProps3({}))}>{date.toLocaleDateString()}</td>
	        </tr>
	    )
	})


	const TableHeaderRow = memo(function TableHeaderRow({ rowIndex }: { rowIndex: number }) {
	    const useTableRow = useContext(TableRowContext);
	    const { useTableHeadCell, useTableRowProps: useTableHeadRowProps } = useTableRow({ rowIndex, location: "head" });
	    const { useTableHeadCellProps: useTableHeadCellProps1, useTableHeadCellDelegateProps: useTableHeadCellDelegateProps1, sortDirection: sortDirection1 } = useTableHeadCell({ tag: "th", columnIndex: 0 });
	    const { useTableHeadCellProps: useTableHeadCellProps2, useTableHeadCellDelegateProps: useTableHeadCellDelegateProps2, sortDirection: sortDirection2 } = useTableHeadCell({ tag: "th", columnIndex: 1 });
	    const { useTableHeadCellProps: useTableHeadCellProps3, useTableHeadCellDelegateProps: useTableHeadCellDelegateProps3, sortDirection: sortDirection3 } = useTableHeadCell({ tag: "th", columnIndex: 2 });


	    return (<tr {...useTableHeadRowProps({ "data-index": rowIndex } as {})}>
	        <th {...useTableHeadCellProps1(useTableHeadCellDelegateProps1({}))}>Number {sortDirection1}</th>
	        <th {...useTableHeadCellProps2(useTableHeadCellDelegateProps2({}))}>String {sortDirection2}</th>
	        <th {...useTableHeadCellProps3(useTableHeadCellDelegateProps3({}))}>Date {sortDirection3}</th>
	    </tr>)
	})*/
	const Component = () => {
	    return e$1("div", { class: "flex", style: { flexWrap: "wrap" }, children: [e$1(DemoTooltip, {}), e$1(DemoTabs, {}), e$1(DemoUseTimeout, {}), e$1(DemoUseInterval, {}), e$1(DemoMenu, {}), e$1(DemoUseListboxSingle, {}), e$1(DemoUseListboxMulti, {}), e$1(DemoUseCheckbox, {}), e$1(DemoUseRadioGroup, {}), e$1(DemoUseAccordion, {}), e$1(DemoUseDialog, {}), e$1(DemoUseRovingTabIndex, {}), e$1(DemoUseFocusTrap, {}), e$1(DemoUseDroppable, {}), e$1(DemoUseDraggable, {}), e$1("input", {})] });
	};
	requestAnimationFrame(() => {
	    S$1(e$1(Component, {}), document.getElementById("root"));
	});

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
