(function(){'use strict';var n,l$1,u$1,t$1,r$2,o$2,f$1,e$1={},c$1=[],s$1=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function a$1(n,l){for(var u in l)n[u]=l[u];return n;}function h$1(n){var l=n.parentNode;l&&l.removeChild(n);}function v$1(l,u,i){var t,r,o,f={};for(o in u)"key"==o?t=u[o]:"ref"==o?r=u[o]:f[o]=u[o];if(arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):i),"function"==typeof l&&null!=l.defaultProps)for(o in l.defaultProps)void 0===f[o]&&(f[o]=l.defaultProps[o]);return y$1(l,f,t,r,null);}function y$1(n,i,t,r,o){var f={type:n,props:i,key:t,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==o?++u$1:o};return null==o&&null!=l$1.vnode&&l$1.vnode(f),f;}function d$1(n){return n.children;}function _$2(n,l){this.props=n,this.context=l;}function k$2(n,l){if(null==l)return n.__?k$2(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return"function"==typeof n.type?k$2(n):null;}function b$1(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break;}return b$1(n);}}function g$2(n){(!n.__d&&(n.__d=!0)&&t$1.push(n)&&!m$1.__r++||r$2!==l$1.debounceRendering)&&((r$2=l$1.debounceRendering)||o$2)(m$1);}function m$1(){var n,l,u,i,r,o,f,e;for(t$1.sort(function(n,l){return n.__v.__b-l.__v.__b;});n=t$1.shift();)n.__d&&(l=t$1.length,i=void 0,r=void 0,f=(o=(u=n).__v).__e,(e=u.__P)&&(i=[],(r=a$1({},o)).__v=o.__v+1,z$2(e,o,r,u.__n,void 0!==e.ownerSVGElement,null!=o.__h?[f]:null,i,null==f?k$2(o):f,o.__h),L$1(i,o),o.__e!=f&&b$1(o)),t$1.length>l&&t$1.sort(function(n,l){return n.__v.__b-l.__v.__b;}));m$1.__r=0;}function w$2(n,l,u,i,t,r,o,f,s,a){var h,v,p,_,b,g,m,w=i&&i.__k||c$1,A=w.length;for(u.__k=[],h=0;h<l.length;h++)if(null!=(_=u.__k[h]=null==(_=l[h])||"boolean"==typeof _?null:"string"==typeof _||"number"==typeof _||"bigint"==typeof _?y$1(null,_,null,null,_):Array.isArray(_)?y$1(d$1,{children:_},null,null,null):_.__b>0?y$1(_.type,_.props,_.key,_.ref?_.ref:null,_.__v):_)){if(_.__=u,_.__b=u.__b+1,null===(p=w[h])||p&&_.key==p.key&&_.type===p.type)w[h]=void 0;else for(v=0;v<A;v++){if((p=w[v])&&_.key==p.key&&_.type===p.type){w[v]=void 0;break;}p=null;}z$2(n,_,p=p||e$1,t,r,o,f,s,a),b=_.__e,(v=_.ref)&&p.ref!=v&&(m||(m=[]),p.ref&&m.push(p.ref,null,_),m.push(v,_.__c||b,_)),null!=b?(null==g&&(g=b),"function"==typeof _.type&&_.__k===p.__k?_.__d=s=x$1(_,s,n):s=P$1(n,_,p,w,b,s),"function"==typeof u.type&&(u.__d=s)):s&&p.__e==s&&s.parentNode!=n&&(s=k$2(p));}for(u.__e=g,h=A;h--;)null!=w[h]&&("function"==typeof u.type&&null!=w[h].__e&&w[h].__e==u.__d&&(u.__d=C$1(i).nextSibling),O(w[h],w[h]));if(m)for(h=0;h<m.length;h++)N$1(m[h],m[++h],m[++h]);}function x$1(n,l,u){for(var i,t=n.__k,r=0;t&&r<t.length;r++)(i=t[r])&&(i.__=n,l="function"==typeof i.type?x$1(i,l,u):P$1(u,i,i,t,i.__e,l));return l;}function A$1(n,l){return l=l||[],null==n||"boolean"==typeof n||(Array.isArray(n)?n.some(function(n){A$1(n,l);}):l.push(n)),l;}function P$1(n,l,u,i,t,r){var o,f,e;if(void 0!==l.__d)o=l.__d,l.__d=void 0;else if(null==u||t!=r||null==t.parentNode)n:if(null==r||r.parentNode!==n)n.appendChild(t),o=null;else{for(f=r,e=0;(f=f.nextSibling)&&e<i.length;e+=1)if(f==t)break n;n.insertBefore(t,r),o=r;}return void 0!==o?o:t.nextSibling;}function C$1(n){var l,u,i;if(null==n.type||"string"==typeof n.type)return n.__e;if(n.__k)for(l=n.__k.length-1;l>=0;l--)if((u=n.__k[l])&&(i=C$1(u)))return i;return null;}function $$1(n,l,u,i,t){var r;for(r in u)"children"===r||"key"===r||r in l||I$1(n,r,null,u[r],i);for(r in l)t&&"function"!=typeof l[r]||"children"===r||"key"===r||"value"===r||"checked"===r||u[r]===l[r]||I$1(n,r,l[r],u[r],i);}function H$1(n,l,u){"-"===l[0]?n.setProperty(l,null==u?"":u):n[l]=null==u?"":"number"!=typeof u||s$1.test(l)?u:u+"px";}function I$1(n,l,u,i,t){var r;n:if("style"===l){if("string"==typeof u)n.style.cssText=u;else{if("string"==typeof i&&(n.style.cssText=i=""),i)for(l in i)u&&l in u||H$1(n.style,l,"");if(u)for(l in u)i&&u[l]===i[l]||H$1(n.style,l,u[l]);}}else if("o"===l[0]&&"n"===l[1])r=l!==(l=l.replace(/Capture$/,"")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+r]=u,u?i||n.addEventListener(l,r?j$2:T$2,r):n.removeEventListener(l,r?j$2:T$2,r);else if("dangerouslySetInnerHTML"!==l){if(t)l=l.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==l&&"height"!==l&&"href"!==l&&"list"!==l&&"form"!==l&&"tabIndex"!==l&&"download"!==l&&l in n)try{n[l]=null==u?"":u;break n;}catch(n){}"function"==typeof u||(null==u||!1===u&&-1==l.indexOf("-")?n.removeAttribute(l):n.setAttribute(l,u));}}function T$2(n){return this.l[n.type+!1](l$1.event?l$1.event(n):n);}function j$2(n){return this.l[n.type+!0](l$1.event?l$1.event(n):n);}function z$2(n,u,i,t,r,o,f,e,c){var s,h,v,y,p,k,b,g,m,x,A,P,C,$,H,I=u.type;if(void 0!==u.constructor)return null;null!=i.__h&&(c=i.__h,e=u.__e=i.__e,u.__h=null,o=[e]),(s=l$1.__b)&&s(u);try{n:if("function"==typeof I){if(g=u.props,m=(s=I.contextType)&&t[s.__c],x=s?m?m.props.value:s.__:t,i.__c?b=(h=u.__c=i.__c).__=h.__E:("prototype"in I&&I.prototype.render?u.__c=h=new I(g,x):(u.__c=h=new _$2(g,x),h.constructor=I,h.render=S),m&&m.sub(h),h.props=g,h.state||(h.state={}),h.context=x,h.__n=t,v=h.__d=!0,h.__h=[],h._sb=[]),null==h.__s&&(h.__s=h.state),null!=I.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=a$1({},h.__s)),a$1(h.__s,I.getDerivedStateFromProps(g,h.__s))),y=h.props,p=h.state,h.__v=u,v)null==I.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else{if(null==I.getDerivedStateFromProps&&g!==y&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(g,x),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(g,h.__s,x)||u.__v===i.__v){for(u.__v!==i.__v&&(h.props=g,h.state=h.__s,h.__d=!1),h.__e=!1,u.__e=i.__e,u.__k=i.__k,u.__k.forEach(function(n){n&&(n.__=u);}),A=0;A<h._sb.length;A++)h.__h.push(h._sb[A]);h._sb=[],h.__h.length&&f.push(h);break n;}null!=h.componentWillUpdate&&h.componentWillUpdate(g,h.__s,x),null!=h.componentDidUpdate&&h.__h.push(function(){h.componentDidUpdate(y,p,k);});}if(h.context=x,h.props=g,h.__P=n,P=l$1.__r,C=0,"prototype"in I&&I.prototype.render){for(h.state=h.__s,h.__d=!1,P&&P(u),s=h.render(h.props,h.state,h.context),$=0;$<h._sb.length;$++)h.__h.push(h._sb[$]);h._sb=[];}else do{h.__d=!1,P&&P(u),s=h.render(h.props,h.state,h.context),h.state=h.__s;}while(h.__d&&++C<25);h.state=h.__s,null!=h.getChildContext&&(t=a$1(a$1({},t),h.getChildContext())),v||null==h.getSnapshotBeforeUpdate||(k=h.getSnapshotBeforeUpdate(y,p)),H=null!=s&&s.type===d$1&&null==s.key?s.props.children:s,w$2(n,Array.isArray(H)?H:[H],u,i,t,r,o,f,e,c),h.base=u.__e,u.__h=null,h.__h.length&&f.push(h),b&&(h.__E=h.__=null),h.__e=!1;}else null==o&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=M(i.__e,u,i,t,r,o,f,c);(s=l$1.diffed)&&s(u);}catch(n){u.__v=null,(c||null!=o)&&(u.__e=e,u.__h=!!c,o[o.indexOf(e)]=null),l$1.__e(n,u,i);}}function L$1(n,u){l$1.__c&&l$1.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u);});}catch(n){l$1.__e(n,u.__v);}});}function M(l,u,i,t,r,o,f,c){var s,a,v,y=i.props,p=u.props,d=u.type,_=0;if("svg"===d&&(r=!0),null!=o)for(;_<o.length;_++)if((s=o[_])&&"setAttribute"in s==!!d&&(d?s.localName===d:3===s.nodeType)){l=s,o[_]=null;break;}if(null==l){if(null===d)return document.createTextNode(p);l=r?document.createElementNS("http://www.w3.org/2000/svg",d):document.createElement(d,p.is&&p),o=null,c=!1;}if(null===d)y===p||c&&l.data===p||(l.data=p);else{if(o=o&&n.call(l.childNodes),a=(y=i.props||e$1).dangerouslySetInnerHTML,v=p.dangerouslySetInnerHTML,!c){if(null!=o)for(y={},_=0;_<l.attributes.length;_++)y[l.attributes[_].name]=l.attributes[_].value;(v||a)&&(v&&(a&&v.__html==a.__html||v.__html===l.innerHTML)||(l.innerHTML=v&&v.__html||""));}if($$1(l,p,y,r,c),v)u.__k=[];else if(_=u.props.children,w$2(l,Array.isArray(_)?_:[_],u,i,t,r&&"foreignObject"!==d,o,f,o?o[0]:i.__k&&k$2(i,0),c),null!=o)for(_=o.length;_--;)null!=o[_]&&h$1(o[_]);c||("value"in p&&void 0!==(_=p.value)&&(_!==l.value||"progress"===d&&!_||"option"===d&&_!==y.value)&&I$1(l,"value",_,y.value,!1),"checked"in p&&void 0!==(_=p.checked)&&_!==l.checked&&I$1(l,"checked",_,y.checked,!1));}return l;}function N$1(n,u,i){try{"function"==typeof n?n(u):n.current=u;}catch(n){l$1.__e(n,i);}}function O(n,u,i){var t,r;if(l$1.unmount&&l$1.unmount(n),(t=n.ref)&&(t.current&&t.current!==n.__e||N$1(t,null,u)),null!=(t=n.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount();}catch(n){l$1.__e(n,u);}t.base=t.__P=null,n.__c=void 0;}if(t=n.__k)for(r=0;r<t.length;r++)t[r]&&O(t[r],u,i||"function"!=typeof n.type);i||null==n.__e||h$1(n.__e),n.__=n.__e=n.__d=void 0;}function S(n,l,u){return this.constructor(n,u);}function q$1(u,i,t){var r,o,f;l$1.__&&l$1.__(u,i),o=(r="function"==typeof t)?null:t&&t.__k||i.__k,f=[],z$2(i,u=(!r&&t||i).__k=v$1(d$1,null,[u]),o||e$1,e$1,void 0!==i.ownerSVGElement,!r&&t?[t]:o?null:i.firstChild?n.call(i.childNodes):null,f,!r&&t?t:o?o.__e:i.firstChild,r),L$1(f,u);}function D$1(l,u,i){var t,r,o,f=a$1({},l.props);for(o in u)"key"==o?t=u[o]:"ref"==o?r=u[o]:f[o]=u[o];return arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):i),y$1(l.type,f,t||l.key,r||l.ref,null);}function E(n,l){var u={__c:l="__cC"+f$1++,__:n,Consumer:function(n,l){return n.children(l);},Provider:function(n){var u,i;return this.getChildContext||(u=[],(i={})[l]=this,this.getChildContext=function(){return i;},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(function(n){n.__e=!0,g$2(n);});},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n);};}),n.children;}};return u.Provider.__=u.Consumer.contextType=u;}n=c$1.slice,l$1={__e:function(n,l,u,i){for(var t,r,o;l=l.__;)if((t=l.__c)&&!t.__)try{if((r=t.constructor)&&null!=r.getDerivedStateFromError&&(t.setState(r.getDerivedStateFromError(n)),o=t.__d),null!=t.componentDidCatch&&(t.componentDidCatch(n,i||{}),o=t.__d),o)return t.__E=t;}catch(l){n=l;}throw n;}},u$1=0,_$2.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=a$1({},this.state),"function"==typeof n&&(n=n(a$1({},u),this.props)),n&&a$1(u,n),null!=n&&this.__v&&(l&&this._sb.push(l),g$2(this));},_$2.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),g$2(this));},_$2.prototype.render=d$1,t$1=[],o$2="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,m$1.__r=0,f$1=0;var _$1=0;function o$1(o,e,n,t,f,l){var s,u,a={};for(u in e)"ref"==u?s=e[u]:a[u]=e[u];var i={type:o,props:a,key:n,ref:s,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--_$1,__source:f,__self:l};if("function"==typeof o&&(s=o.defaultProps))for(u in s)void 0===a[u]&&(a[u]=s[u]);return l$1.vnode&&l$1.vnode(i),i;}var t,r$1,u,i,o=0,f=[],c=[],e=l$1.__b,a=l$1.__r,v=l$1.diffed,l=l$1.__c,m=l$1.unmount;function d(t,u){l$1.__h&&l$1.__h(r$1,t,o||u),o=0;var i=r$1.__H||(r$1.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({__V:c}),i.__[t];}function p(n){return o=1,y(B$1,n);}function y(n,u,i){var o=d(t++,2);if(o.t=n,!o.__c&&(o.__=[i?i(u):B$1(void 0,u),function(n){var t=o.__N?o.__N[0]:o.__[0],r=o.t(t,n);t!==r&&(o.__N=[r,o.__[1]],o.__c.setState({}));}],o.__c=r$1,!r$1.u)){r$1.u=!0;var f=r$1.shouldComponentUpdate;r$1.shouldComponentUpdate=function(n,t,r){if(!o.__c.__H)return!0;var u=o.__c.__H.__.filter(function(n){return n.__c;});if(u.every(function(n){return!n.__N;}))return!f||f.call(this,n,t,r);var i=!1;return u.forEach(function(n){if(n.__N){var t=n.__[0];n.__=n.__N,n.__N=void 0,t!==n.__[0]&&(i=!0);}}),!(!i&&o.__c.props===n)&&(!f||f.call(this,n,t,r));};}return o.__N||o.__;}function h(u,i){var o=d(t++,3);!l$1.__s&&z$1(o.__H,i)&&(o.__=u,o.i=i,r$1.__H.__h.push(o));}function s(u,i){var o=d(t++,4);!l$1.__s&&z$1(o.__H,i)&&(o.__=u,o.i=i,r$1.__h.push(o));}function _(n){return o=5,F$1(function(){return{current:n};},[]);}function A(n,t,r){o=6,s(function(){return"function"==typeof n?(n(t()),function(){return n(null);}):n?(n.current=t(),function(){return n.current=null;}):void 0;},null==r?r:r.concat(n));}function F$1(n,r){var u=d(t++,7);return z$1(u.__H,r)?(u.__V=n(),u.i=r,u.__h=n,u.__V):u.__;}function T$1(n,t){return o=8,F$1(function(){return n;},t);}function q(n){var u=r$1.context[n.__c],i=d(t++,9);return i.c=n,u?(null==i.__&&(i.__=!0,u.sub(r$1)),u.props.value):n.__;}function V$1(){var n=d(t++,11);if(!n.__){for(var u=r$1.__v;null!==u&&!u.__m&&null!==u.__;)u=u.__;var i=u.__m||(u.__m=[0,0]);n.__="P"+i[0]+"-"+i[1]++;}return n.__;}function b(){for(var t;t=f.shift();)if(t.__P&&t.__H)try{t.__H.__h.forEach(k$1),t.__H.__h.forEach(w$1),t.__H.__h=[];}catch(r){t.__H.__h=[],l$1.__e(r,t.__v);}}l$1.__b=function(n){r$1=null,e&&e(n);},l$1.__r=function(n){a&&a(n),t=0;var i=(r$1=n.__c).__H;i&&(u===r$1?(i.__h=[],r$1.__h=[],i.__.forEach(function(n){n.__N&&(n.__=n.__N),n.__V=c,n.__N=n.i=void 0;})):(i.__h.forEach(k$1),i.__h.forEach(w$1),i.__h=[])),u=r$1;},l$1.diffed=function(t){v&&v(t);var o=t.__c;o&&o.__H&&(o.__H.__h.length&&(1!==f.push(o)&&i===l$1.requestAnimationFrame||((i=l$1.requestAnimationFrame)||j$1)(b)),o.__H.__.forEach(function(n){n.i&&(n.__H=n.i),n.__V!==c&&(n.__=n.__V),n.i=void 0,n.__V=c;})),u=r$1=null;},l$1.__c=function(t,r){r.some(function(t){try{t.__h.forEach(k$1),t.__h=t.__h.filter(function(n){return!n.__||w$1(n);});}catch(u){r.some(function(n){n.__h&&(n.__h=[]);}),r=[],l$1.__e(u,t.__v);}}),l&&l(t,r);},l$1.unmount=function(t){m&&m(t);var r,u=t.__c;u&&u.__H&&(u.__H.__.forEach(function(n){try{k$1(n);}catch(n){r=n;}}),u.__H=void 0,r&&l$1.__e(r,u.__v));};var g$1="function"==typeof requestAnimationFrame;function j$1(n){var t,r=function(){clearTimeout(u),g$1&&cancelAnimationFrame(t),setTimeout(n);},u=setTimeout(r,100);g$1&&(t=requestAnimationFrame(r));}function k$1(n){var t=r$1,u=n.__c;"function"==typeof u&&(n.__c=void 0,u()),r$1=t;}function w$1(n){var t=r$1;n.__c=n.__(),r$1=t;}function z$1(n,t){return!n||n.length!==t.length||t.some(function(t,r){return t!==n[r];});}function B$1(n,t){return"function"==typeof t?t(n):t;}function useEnsureStability(parentHookName){for(var _len=arguments.length,values=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){values[_key-1]=arguments[_key];}const helperToEnsureStability=_([]);const shownError=_([]);useHelper(values.length,-1);values.forEach(useHelper);return;function useHelper(value,i){const index=i+1;if(helperToEnsureStability.current[index]===undefined)helperToEnsureStability.current[index]=value;if(helperToEnsureStability.current[index]!=value){if(!shownError.current[index]){debugger;console.error("The hook ".concat(parentHookName," requires some or all of its arguments remain stable across each render; please check the ").concat(i,"-indexed argument (").concat(i>=0?JSON.stringify(values[i]):"the number of supposedly stable elements",")."));shownError.current[index]=true;}}}}function debounceRendering(f){var _l$1$debounceRenderin;((_l$1$debounceRenderin=l$1.debounceRendering)!==null&&_l$1$debounceRenderin!==void 0?_l$1$debounceRenderin:setTimeout)(f);}function usePassiveState(onChange,getInitialValue,customDebounceRendering){const valueRef=_(Unset$2);const reasonRef=_(Unset$2);const warningRef=_(false);const dependencyToCompareAgainst=_(Unset$2);const cleanupCallbackRef=_(undefined);useEnsureStability("usePassiveState",onChange,getInitialValue,customDebounceRendering);const onShouldCleanUp=T$1(()=>{const cleanupCallback=cleanupCallbackRef.current;if(cleanupCallback)cleanupCallback();},[]);const tryEnsureValue=T$1(()=>{if(valueRef.current===Unset$2&&getInitialValue!=undefined){try{var _onChange;const initialValue=getInitialValue();valueRef.current=initialValue;cleanupCallbackRef.current=(_onChange=onChange===null||onChange===void 0?void 0:onChange(initialValue,undefined,undefined))!==null&&_onChange!==void 0?_onChange:undefined;}catch(ex){}}},[]);const getValue=T$1(()=>{if(warningRef.current)console.warn("During onChange, prefer using the (value, prevValue) arguments instead of getValue -- it's ambiguous as to if you're asking for the old or new value at this point in time for this component.");if(valueRef.current===Unset$2)tryEnsureValue();return valueRef.current===Unset$2?undefined:valueRef.current;},[]);s(()=>{tryEnsureValue();},[]);const setValue=T$1((arg,reason)=>{const nextValue=arg instanceof Function?arg(valueRef.current===Unset$2?undefined:valueRef.current):arg;if(dependencyToCompareAgainst.current===Unset$2&&nextValue!==valueRef.current){dependencyToCompareAgainst.current=valueRef.current;valueRef.current=nextValue;reasonRef.current=reason;(customDebounceRendering!==null&&customDebounceRendering!==void 0?customDebounceRendering:debounceRendering)(()=>{const nextReason=reasonRef.current;const nextDep=valueRef.current;const prevDep=dependencyToCompareAgainst.current;if(dependencyToCompareAgainst.current!=valueRef.current){warningRef.current=true;try{var _onChange2;onShouldCleanUp();cleanupCallbackRef.current=(_onChange2=onChange===null||onChange===void 0?void 0:onChange(nextDep,prevDep===Unset$2?undefined:prevDep,nextReason))!==null&&_onChange2!==void 0?_onChange2:undefined;valueRef.current=nextDep;}finally{warningRef.current=false;}}dependencyToCompareAgainst.current=Unset$2;});}valueRef.current=nextValue;},[]);return[getValue,setValue];}const Unset$2=Symbol();function returnTrue(){return true;}function returnFalse(){return false;}function returnNull(){return null;}function returnZero(){return 0;}function runImmediately(f){f();}const Table$1="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";function base64(value){return Table$1[value];}function random6Bits(){return Math.floor(Math.random()*0b1000000);}function random64Bits(){return[random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits()];}function generateRandomId(prefix){return"".concat(prefix!==null&&prefix!==void 0?prefix:"id-").concat(random64Bits().map(n=>base64(n)).join(""));}const previousInputs=new Map();const toRun=new Map();const commitName="diffed";const originalCommit=l$1[commitName];const newCommit=function(){for(const[id,effectInfo]of toRun){const oldInputs=previousInputs.get(id);if(argsChanged(oldInputs,effectInfo.inputs)){var _effectInfo$cleanup;(_effectInfo$cleanup=effectInfo.cleanup)===null||_effectInfo$cleanup===void 0?void 0:_effectInfo$cleanup.call(effectInfo);effectInfo.cleanup=effectInfo.effect();previousInputs.set(id,effectInfo.inputs);}}toRun.clear();for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}originalCommit===null||originalCommit===void 0?void 0:originalCommit(...args);};l$1[commitName]=newCommit;function useBeforeLayoutEffect(effect,inputs){const[id]=p(()=>generateRandomId());if(effect)toRun.set(id,{effect,inputs,cleanup:null});else toRun.delete(id);h(()=>{return()=>{toRun.delete(id);previousInputs.delete(id);};},[id]);}function argsChanged(oldArgs,newArgs){return!!(!oldArgs||oldArgs.length!==(newArgs===null||newArgs===void 0?void 0:newArgs.length)||newArgs!==null&&newArgs!==void 0&&newArgs.some((arg,index)=>arg!==oldArgs[index]));}const Unset$1=Symbol("unset");function useStableGetter(value){const ref=_(Unset$1);useBeforeLayoutEffect(()=>{ref.current=value;},[value]);return T$1(()=>{if(ref.current===Unset$1){throw new Error('Value retrieved from useStableGetter() cannot be called during render.');}return ref.current;},[]);}function useStableObject(t){const e=Object.entries(t);useEnsureStability("useStableObject",e.length,...e.map(_ref2=>{let[_k,v]=_ref2;return v;}));return _(t).current;}const map=new WeakMap();function isStableGetter(obj){var _map$get;return(_map$get=map.get(obj))!==null&&_map$get!==void 0?_map$get:false;}function setIsStableGetter(obj){map.set(obj,true);return obj;}function useStableCallback(fn,noDeps){useEnsureStability("useStableCallback",noDeps==null,noDeps===null||noDeps===void 0?void 0:noDeps.length,isStableGetter(fn));if(isStableGetter(fn))return fn;if(noDeps==null){const currentCallbackGetter=useStableGetter(fn);return setIsStableGetter(T$1(function(){return currentCallbackGetter()(...arguments);},[]));}else{console.assert(noDeps.length===0);return setIsStableGetter(T$1(fn,[]));}}function useMergedChildren(lhs,rhs){if(lhs==null&&rhs==null){return undefined;}else if(lhs==null){return rhs;}else if(rhs==null){return lhs;}else{return v$1(d$1,{},lhs,rhs);}}function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n;}function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n;}function useMergedClasses(lhsClass,lhsClassName,rhsClass,rhsClassName){if(lhsClass||rhsClass||lhsClassName||rhsClassName){const lhsClasses=clsx(lhsClass,lhsClassName).split(" ");const rhsClasses=clsx(rhsClass,rhsClassName).split(" ");const allClasses=new Set([...Array.from(lhsClasses),...Array.from(rhsClasses)]);return Array.from(allClasses).join(" ");}else{return undefined;}}function processRef(instance,ref){if(typeof ref==="function"){ref(instance);}else if(ref!=null){ref.current=instance;}else{debugger;console.assert(false,"Unknown ref type found that was neither a RefCallback nor a RefObject");}}function useMergedRefs(rhs,lhs){if(lhs==null&&rhs==null){return undefined;}else if(lhs==null){return rhs;}else if(rhs==null){return lhs;}else{return combined;}function combined(current){processRef(current,lhs);processRef(current,rhs);}}function styleStringToObject(style){return Object.fromEntries(style.split(";").map(statement=>statement.split(":")));}function useMergedStyles(lhs,rhs){if(!lhs&&!rhs)return undefined;if(typeof lhs!=typeof rhs){if(lhs&&!rhs)return lhs;if(!lhs&&rhs)return rhs;if(lhs&&rhs){if(typeof lhs=="string")return useMergedStyles(styleStringToObject(lhs),rhs);if(typeof rhs=="string")return useMergedStyles(lhs,styleStringToObject(rhs));}return undefined;}if(typeof lhs=="string"){return"".concat(lhs,";").concat(rhs!==null&&rhs!==void 0?rhs:"");}return{...(lhs!==null&&lhs!==void 0?lhs:{}),...(rhs!==null&&rhs!==void 0?rhs:{})};}let log=console.warn;function useMergedProps(){for(var _len3=arguments.length,allProps=new Array(_len3),_key3=0;_key3<_len3;_key3++){allProps[_key3]=arguments[_key3];}useEnsureStability("useMergedProps",allProps.length);let ret={};for(let nextProps of allProps){ret=useMergedProps2(ret,nextProps);}return ret;}const knowns=new Set(["children","ref","className","class","style"]);function mergeUnknown(key,lhsValue,rhsValue){if(typeof lhsValue==="function"||typeof rhsValue==="function"){const merged=mergeFunctions(lhsValue,rhsValue);return merged;}else{if(lhsValue==null&&rhsValue==null){if(rhsValue===null&&lhsValue===undefined)return rhsValue;else return lhsValue;}if(lhsValue==null)return rhsValue;else if(rhsValue==null)return lhsValue;else if(rhsValue==lhsValue){return rhsValue;}else{log===null||log===void 0?void 0:log("The prop \"".concat(key,"\" cannot simultaneously be the values ").concat(lhsValue," and ").concat(rhsValue,". One must be chosen outside of useMergedProps."));return rhsValue;}}}function useMergedProps2(lhsAll,rhsAll){const ret={ref:useMergedRefs(lhsAll.ref,rhsAll.ref),style:useMergedStyles(lhsAll.style,rhsAll.style),className:useMergedClasses(lhsAll["class"],lhsAll.className,rhsAll["class"],rhsAll.className),children:useMergedChildren(lhsAll.children,rhsAll.children)};if(ret.ref===undefined)delete ret.ref;if(ret.style===undefined)delete ret.style;if(ret.className===undefined)delete ret.className;if(ret["class"]===undefined)delete ret["class"];if(ret.children===undefined)delete ret.children;for(const lhsKeyU in lhsAll){const lhsKey=lhsKeyU;if(knowns.has(lhsKey))continue;ret[lhsKey]=lhsAll[lhsKey];}for(const rhsKeyU in rhsAll){const rhsKey=rhsKeyU;if(knowns.has(rhsKey))continue;ret[rhsKey]=mergeUnknown(rhsKey,ret[rhsKey],rhsAll[rhsKey]);}return ret;}function mergeFunctions(lhs,rhs){if(!lhs)return rhs;if(!rhs)return lhs;return function(){const lv=lhs(...arguments);const rv=rhs(...arguments);if(lv instanceof Promise||rv instanceof Promise)return Promise.all([lv,rv]);};}function useGlobalHandler(target,type,handler,options,mode){mode||(mode="grouped");useEnsureStability("useGlobalHandler",mode);if(mode==="grouped"){useGlobalHandlerGrouped(target,type,handler,options);}else{useGlobalHandlerSingle(target,type,handler,options);}}let mapThing=new Map();function doMapThing(op,target,type,handler,options){if(handler){const optionsKey=JSON.stringify(options);const byType=mapThing.get(target)||new Map();const byOptions=byType.get(type)||new Map();const info=byOptions.get(optionsKey)||{listener:null,listeners:new Set()};op(info,handler);byOptions.set(optionsKey,info);byType.set(type,byOptions);mapThing.set(target,byType);}}function addToMapThing(target,type,handler,options){doMapThing((info,h)=>{info.listeners.add(h);if(info.listener==null)target.addEventListener(type,info.listener=e=>info.listeners.forEach(fn=>fn(e)),options);},target,type,handler,options);}function removeFromMapThing(target,type,handler,options){doMapThing((info,h)=>{info.listeners.delete(h);if(info.listener==null)target.removeEventListener(type,info.listener=e=>info.listeners.forEach(fn=>fn(e)),options);},target,type,handler,options);}function useGlobalHandlerGrouped(target,type,handler,options){let stableHandler=useStableCallback(handler!==null&&handler!==void 0?handler:()=>{});if(handler==null)stableHandler=null;h(()=>{if(stableHandler){addToMapThing(target,type,stableHandler,options);return()=>removeFromMapThing(target,type,stableHandler,options);}},[target,type,stableHandler]);}function useGlobalHandlerSingle(target,type,handler,options){let stableHandler=useStableCallback(handler!==null&&handler!==void 0?handler:()=>{});if(handler==null)stableHandler=null;h(()=>{if(stableHandler){target.addEventListener(type,stableHandler,options);return()=>target.removeEventListener(type,stableHandler,options);}},[target,type,stableHandler]);}function useRefElement(args){const{onElementChange,onMount,onUnmount}=args.refElementParameters||{};useEnsureStability("useRefElement",onElementChange,onMount,onUnmount);const handler=T$1((e,prevValue)=>{const cleanup=onElementChange===null||onElementChange===void 0?void 0:onElementChange(e,prevValue);if(prevValue)onUnmount===null||onUnmount===void 0?void 0:onUnmount(prevValue);if(e)onMount===null||onMount===void 0?void 0:onMount(e);return cleanup;},[]);const[getElement,setElement]=usePassiveState(handler,returnNull,runImmediately);const propsStable=_({ref:setElement});return{refElementReturn:{getElement,propsStable:propsStable.current}};}const activeElementUpdaters=new Map();const lastActiveElementUpdaters=new Map();const windowFocusedUpdaters=new Map();const windowsFocusedUpdaters=new Map();function forEachUpdater(window,map,value,reason){const updaters=map.get(window);if(updaters){if(updaters){for(const updater of updaters){const{lastSent,send}=updater;if(value!==lastSent){send(value,reason);updater.lastSent=value;}}}}}function focusout(e){const window=e.target.ownerDocument.defaultView;if(e.relatedTarget==null){forEachUpdater(window,activeElementUpdaters,null,e);}}function focusin(e){const window=e.target.ownerDocument.defaultView;const currentlyFocusedElement=e.target;forEachUpdater(window,activeElementUpdaters,currentlyFocusedElement,e);forEachUpdater(window,lastActiveElementUpdaters,currentlyFocusedElement,e);}function windowFocus(e){const window=e.target instanceof Window?e.target:e.currentTarget instanceof Window?e.currentTarget:e.target.ownerDocument.defaultView;windowsFocusedUpdaters.set(window,true);forEachUpdater(window,windowFocusedUpdaters,true,e);}function windowBlur(e){const window=e.target instanceof Window?e.target:e.currentTarget instanceof Window?e.currentTarget:e.target.ownerDocument.defaultView;windowsFocusedUpdaters.set(window,false);forEachUpdater(window,windowFocusedUpdaters,false,e);}function useActiveElement(_ref3){let{activeElementParameters:{onActiveElementChange,onLastActiveElementChange,onWindowFocusedChange,getDocument,getWindow}}=_ref3;useEnsureStability("useActiveElement",onActiveElementChange,onLastActiveElementChange,onWindowFocusedChange,getDocument,getWindow);h(()=>{var _getWindow,_activeElementUpdater,_activeElementUpdater2,_activeElementUpdater3,_lastActiveElementUpd,_windowFocusedUpdater;const document=getDocument();const window=(_getWindow=getWindow===null||getWindow===void 0?void 0:getWindow(document))!==null&&_getWindow!==void 0?_getWindow:document===null||document===void 0?void 0:document.defaultView;if(((_activeElementUpdater=(_activeElementUpdater2=activeElementUpdaters.get(window))===null||_activeElementUpdater2===void 0?void 0:_activeElementUpdater2.size)!==null&&_activeElementUpdater!==void 0?_activeElementUpdater:0)===0){document===null||document===void 0?void 0:document.addEventListener("focusin",focusin,{passive:true});document===null||document===void 0?void 0:document.addEventListener("focusout",focusout,{passive:true});window===null||window===void 0?void 0:window.addEventListener("focus",windowFocus,{passive:true});window===null||window===void 0?void 0:window.addEventListener("blur",windowBlur,{passive:true});}const localActiveElementUpdaters=(_activeElementUpdater3=activeElementUpdaters.get(window))!==null&&_activeElementUpdater3!==void 0?_activeElementUpdater3:new Set();const localLastActiveElementUpdaters=(_lastActiveElementUpd=lastActiveElementUpdaters.get(window))!==null&&_lastActiveElementUpd!==void 0?_lastActiveElementUpd:new Set();const localWindowFocusedUpdaters=(_windowFocusedUpdater=windowFocusedUpdaters.get(window))!==null&&_windowFocusedUpdater!==void 0?_windowFocusedUpdater:new Set();const laeu={send:setActiveElement,lastSent:undefined};const llaeu={send:setLastActiveElement,lastSent:undefined};const lwfu={send:setWindowFocused,lastSent:undefined};localActiveElementUpdaters.add(laeu);localLastActiveElementUpdaters.add(llaeu);localWindowFocusedUpdaters.add(lwfu);activeElementUpdaters.set(window,localActiveElementUpdaters);lastActiveElementUpdaters.set(window,localLastActiveElementUpdaters);windowFocusedUpdaters.set(window,localWindowFocusedUpdaters);return()=>{activeElementUpdaters.get(window).delete(laeu);lastActiveElementUpdaters.get(window).delete(laeu);windowFocusedUpdaters.get(window).delete(lwfu);if(activeElementUpdaters.size===0){document===null||document===void 0?void 0:document.removeEventListener("focusin",focusin);document===null||document===void 0?void 0:document.removeEventListener("focusout",focusout);window===null||window===void 0?void 0:window.removeEventListener("focus",windowFocus);window===null||window===void 0?void 0:window.removeEventListener("blur",windowBlur);}};},[]);const[getActiveElement,setActiveElement]=usePassiveState(onActiveElementChange,returnNull,runImmediately);const[getLastActiveElement,setLastActiveElement]=usePassiveState(onLastActiveElementChange,returnNull,runImmediately);const[getWindowFocused,setWindowFocused]=usePassiveState(onWindowFocusedChange,returnTrue,runImmediately);return{activeElementReturn:{getActiveElement,getLastActiveElement,getWindowFocused}};}function useManagedChildren(parentParameters){const{managedChildrenParameters:{onAfterChildLayoutEffect,onChildrenMountChange,onChildCountChange},...rest}=parentParameters;useEnsureStability("useManagedChildren",onAfterChildLayoutEffect,onChildrenMountChange,onChildCountChange);const getHighestIndex=T$1(()=>{return managedChildrenArray.current.highestIndex;},[]);const managedChildrenArray=_({arr:[],rec:{},highestIndex:0,lowestIndex:0});const forEachChild=T$1(f=>{for(const child of managedChildrenArray.current.arr){if(child)f(child);}for(const field in managedChildrenArray.current.rec){const child=managedChildrenArray.current.rec[field];if(child)f(child);}},[]);const getManagedChildInfo=T$1(index=>{if(typeof index=="number")return managedChildrenArray.current.arr[index];else return managedChildrenArray.current.rec[index];},[]);const hasRemoteULEChildMounted=_(null);const remoteULEChildChangedCausers=_(new Set());const remoteULEChildChanged=T$1(index=>{if(remoteULEChildChangedCausers.current.size==0){if(onAfterChildLayoutEffect!=null){debounceRendering(()=>{onAfterChildLayoutEffect===null||onAfterChildLayoutEffect===void 0?void 0:onAfterChildLayoutEffect(remoteULEChildChangedCausers.current);remoteULEChildChangedCausers.current.clear();});}}remoteULEChildChangedCausers.current.add(index);return()=>{};},[]);const remoteULEChildMounted=T$1((index,mounted)=>{if(!hasRemoteULEChildMounted.current){hasRemoteULEChildMounted.current={mounts:new Set(),unmounts:new Set()};if(onChildCountChange||onChildrenMountChange){debounceRendering(()=>{onChildrenMountChange===null||onChildrenMountChange===void 0?void 0:onChildrenMountChange(hasRemoteULEChildMounted.current.mounts,hasRemoteULEChildMounted.current.unmounts);onChildCountChange===null||onChildCountChange===void 0?void 0:onChildCountChange(getChildren().getHighestIndex()+1);hasRemoteULEChildMounted.current=null;});}}if(mounted){if(typeof index=="number")managedChildrenArray.current.highestIndex=Math.max(managedChildrenArray.current.highestIndex,index);}else{if(typeof index=="number"){delete managedChildrenArray.current.arr[index];let shave=0;while(shave<=managedChildrenArray.current.arr.length&&managedChildrenArray.current.arr[managedChildrenArray.current.arr.length-1-shave]===undefined){++shave;}managedChildrenArray.current.arr.splice(managedChildrenArray.current.arr.length-shave,shave);}else delete managedChildrenArray.current.rec[index];if(typeof index=="number")managedChildrenArray.current.highestIndex=managedChildrenArray.current.arr.length-1;}hasRemoteULEChildMounted.current[mounted?"mounts":"unmounts"].add(index);},[]);const managedChildren=useStableObject({...{_:managedChildrenArray.current},forEach:forEachChild,getAt:getManagedChildInfo,getHighestIndex:getHighestIndex,arraySlice:T$1(()=>{return managedChildrenArray.current.arr.slice();},[])});const getChildren=T$1(()=>managedChildren,[]);return{context:useStableObject({managedChildContext:useStableObject({managedChildrenArray:managedChildrenArray.current,remoteULEChildMounted,remoteULEChildChanged,getChildren})}),managedChildrenReturn:{getChildren}};}function useManagedChild(info,managedChildParameters){var _info$context;const{managedChildContext:{getChildren,managedChildrenArray,remoteULEChildMounted,remoteULEChildChanged}}=(_info$context=info.context)!==null&&_info$context!==void 0?_info$context:{managedChildContext:{}};const index=managedChildParameters.index;s(()=>{if(managedChildrenArray==null||remoteULEChildChanged==null)return;if(typeof index=="number"){managedChildrenArray.arr[index]={...managedChildParameters};}else{managedChildrenArray.rec[index]={...managedChildParameters};}return remoteULEChildChanged(index);},[...Object.entries(info).flat(9)]);s(()=>{remoteULEChildMounted===null||remoteULEChildMounted===void 0?void 0:remoteULEChildMounted(index,true);return()=>remoteULEChildMounted===null||remoteULEChildMounted===void 0?void 0:remoteULEChildMounted(index,false);},[index]);return{managedChildReturn:{getChildren:getChildren}};}function useChildrenFlag(_ref4){let{getChildren,initialIndex,closestFit,onIndexChange,getAt,setAt,isValid}=_ref4;useEnsureStability("useChildrenFlag",onIndexChange,getAt,setAt,isValid);const[getCurrentIndex,setCurrentIndex]=usePassiveState(onIndexChange);const[getRequestedIndex,setRequestedIndex]=usePassiveState(null);const getClosestFit=T$1(requestedIndex=>{const children=getChildren();let closestDistance=Infinity;let closestIndex=null;children.forEach(child=>{if(child!=null&&isValid(child)){console.assert(typeof child.index=="number","closestFit can only be used when each child has a numeric index, and cannot be used when children use string indices instead.");const newDistance=Math.abs(child.index-requestedIndex);if(newDistance<closestDistance||newDistance==closestDistance&&child.index<requestedIndex){closestDistance=newDistance;closestIndex=child.index;}}});return closestIndex;},[]);const reevaluateClosestFit=useStableCallback(()=>{const children=getChildren();const requestedIndex=getRequestedIndex();const currentIndex=getCurrentIndex();const currentChild=currentIndex==null?null:children.getAt(currentIndex);if(requestedIndex!=null&&closestFit&&(requestedIndex!=currentIndex||currentChild==null||!isValid(currentChild))){console.assert(typeof requestedIndex=="number","closestFit can only be used when each child has a numeric index, and cannot be used when children use string indices instead.");const closestFitIndex=getClosestFit(requestedIndex);setCurrentIndex(closestFitIndex,undefined);if(currentChild)setAt(currentChild,false,closestFitIndex,currentIndex);if(closestFitIndex!=null){const closestFitChild=children.getAt(closestFitIndex);console.assert(closestFitChild!=null,"Internal logic???");setAt(closestFitChild,true,closestFitIndex,currentIndex);}}});const changeIndex=T$1((arg,reason)=>{const children=getChildren();const requestedIndex=arg instanceof Function?arg(getRequestedIndex()):arg;setRequestedIndex(requestedIndex,reason);const currentIndex=getCurrentIndex();if(currentIndex==requestedIndex)return requestedIndex;let newMatchingChild=requestedIndex==null?null:children.getAt(requestedIndex);const oldMatchingChild=currentIndex==null?null:children.getAt(currentIndex);if(requestedIndex==null){setCurrentIndex(null,reason);if(oldMatchingChild)setAt(oldMatchingChild,false,requestedIndex,currentIndex);return null;}else{const childIsValid=newMatchingChild&&isValid(newMatchingChild);if(childIsValid||!closestFit){setCurrentIndex(requestedIndex,reason);if(oldMatchingChild)setAt(oldMatchingChild,false,requestedIndex,currentIndex);if(newMatchingChild)setAt(newMatchingChild,true,requestedIndex,currentIndex);return requestedIndex;}else{console.assert(typeof requestedIndex=="number","closestFit can only be used when each child has a numeric index, and cannot be used when children use string indices instead.");const closestFitIndex=getClosestFit(requestedIndex);setCurrentIndex(closestFitIndex,reason);if(closestFitIndex!=null){newMatchingChild=children.getAt(closestFitIndex);console.assert(newMatchingChild!=null,"Internal logic???");if(oldMatchingChild)setAt(oldMatchingChild,false,closestFitIndex,currentIndex);setAt(newMatchingChild,true,closestFitIndex,currentIndex);return closestFitIndex;}else{if(oldMatchingChild)setAt(oldMatchingChild,false,closestFitIndex,currentIndex);return null;}}}},[]);s(()=>{changeIndex(initialIndex!==null&&initialIndex!==void 0?initialIndex:null,undefined);},[]);return{changeIndex,reevaluateClosestFit,getCurrentIndex};}const MagicWindowKey="__preact-prop-helpers-escape-key-dismiss__";function getElementDepth(element){let depth=0;let parent=element.parentElement;while(parent){depth+=1;parent=parent.parentElement;}return depth;}function useEscapeDismiss(_ref5){let{escapeDismissParameters:{onClose,open,getWindow:unstableGetWindow,parentDepth,...void1},refElementPopupReturn:{getElement,...void2}}=_ref5;const stableOnClose=useStableCallback(onClose);const getWindow=useStableCallback(unstableGetWindow);const getDepth=useStableGetter(parentDepth+1);h(()=>{var _window$MagicWindowKe;const window=getWindow();(_window$MagicWindowKe=window[MagicWindowKey])!==null&&_window$MagicWindowKe!==void 0?_window$MagicWindowKe:window[MagicWindowKey]={microtaskQueued:false,elementQueue:new Map()};const info=window[MagicWindowKey];if(open){window.addEventListener("keydown",handler,{capture:true});return()=>{const element=getElement();if(element&&info.elementQueue)info.elementQueue.delete(element);window.removeEventListener("keydown",handler,{capture:true});};}function handler(e){if(e.key=="Escape"){e.preventDefault();e.stopPropagation();const onClose2=()=>{stableOnClose("escape");};const element=getElement();if(element){const treeDepth=getElementDepth(element);const depth=getDepth();info.elementQueue.set(element,{depth,onClose:onClose2,treeDepth});}if(!info.microtaskQueued){info.microtaskQueued=true;setTimeout(()=>{var _deepestOnClose;const{elementQueue}=info;info.microtaskQueued=false;info.elementQueue=new Map();let deepestDepth=-Infinity;let deepestTreeDepth=-Infinity;let deepestOnClose=null;for(const[element,{depth,onClose,treeDepth}]of elementQueue){let tieBroken=false;if(depth==deepestDepth){if(treeDepth>deepestTreeDepth){tieBroken=true;}}if(depth>deepestDepth||depth==deepestDepth&&tieBroken){deepestDepth=depth;deepestTreeDepth=treeDepth;deepestOnClose=onClose;}}(_deepestOnClose=deepestOnClose)===null||_deepestOnClose===void 0?void 0:_deepestOnClose();},0);}}}},[open]);}function useLostFocusDismiss(_ref6){let{refElementPopupReturn:{getElement:getPopupElement,...void3},refElementSourceReturn,lostFocusDismiss:{open,onClose},...void1}=_ref6;const{getElement:getSourceElement,...void2}=refElementSourceReturn!==null&&refElementSourceReturn!==void 0?refElementSourceReturn:{};const stableOnClose=useStableCallback(onClose);const getOpen=useStableGetter(open);const onLastActiveElementChange=T$1((newElement,_prevElement,_e)=>{const open=getOpen();const sourceElement=getSourceElement===null||getSourceElement===void 0?void 0:getSourceElement();const popupElement=getPopupElement();if(!(sourceElement!==null&&sourceElement!==void 0&&sourceElement.contains(newElement)||popupElement!==null&&popupElement!==void 0&&popupElement.contains(newElement))){if(open)stableOnClose();}},[getSourceElement]);return{activeElementParameters:{onLastActiveElementChange}};}function useBackdropDismiss(_ref7){let{backdropDismissParameters:{open,onClose:onCloseUnstable,...void1},refElementPopupReturn:{getElement,...void3},...void2}=_ref7;const getOpen=useStableGetter(open);const onClose=useStableCallback(onCloseUnstable);const onBackdropClick=T$1(function onBackdropClick(e){if(!getOpen())return;let element=getElement();let foundInsideClick=false;if(e.target&&element&&element.contains(e.target)){foundInsideClick=true;}if(!foundInsideClick){onClose();}},[]);useGlobalHandler(window,"mousedown",open?onBackdropClick:null,{capture:true});useGlobalHandler(window,"touchstart",open?onBackdropClick:null,{capture:true});}function useDismiss(_ref8){let{dismissParameters:{open:globalOpen,onClose:globalOnClose,closeOnBackdrop,closeOnEscape,closeOnLostFocus},escapeDismissParameters:{getWindow,parentDepth}}=_ref8;const{refElementReturn:refElementSourceReturn}=useRefElement({refElementParameters:{}});const{refElementReturn:refElementPopupReturn}=useRefElement({refElementParameters:{}});const onCloseBackdrop=T$1(()=>{return globalOnClose===null||globalOnClose===void 0?void 0:globalOnClose("backdrop");},[globalOnClose]);const onCloseEscape=T$1(()=>{return globalOnClose===null||globalOnClose===void 0?void 0:globalOnClose("escape");},[globalOnClose]);const onCloseFocus=T$1(()=>{return globalOnClose===null||globalOnClose===void 0?void 0:globalOnClose("lost-focus");},[globalOnClose]);useBackdropDismiss({backdropDismissParameters:{onClose:onCloseBackdrop,open:closeOnBackdrop&&globalOpen},refElementPopupReturn});useEscapeDismiss({escapeDismissParameters:{getWindow,onClose:onCloseEscape,open:closeOnEscape&&globalOpen,parentDepth},refElementPopupReturn});const{activeElementParameters}=useLostFocusDismiss({lostFocusDismiss:{onClose:onCloseFocus,open:closeOnLostFocus&&globalOpen},refElementPopupReturn,refElementSourceReturn});const getDocument=T$1(()=>{return getWindow().document;},[getWindow]);useActiveElement({activeElementParameters:{...activeElementParameters,getWindow,getDocument}});return{refElementSourceReturn,refElementPopupReturn};}/*!
    * tabbable 6.1.1
    * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
    */var candidateSelectors=['input:not([inert])','select:not([inert])','textarea:not([inert])','a[href]:not([inert])','button:not([inert])','[tabindex]:not(slot):not([inert])','audio[controls]:not([inert])','video[controls]:not([inert])','[contenteditable]:not([contenteditable="false"]):not([inert])','details>summary:first-of-type:not([inert])','details:not([inert])'];var NoElement=typeof Element==='undefined';var matches=NoElement?function(){}:Element.prototype.matches||Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector;var getRootNode=!NoElement&&Element.prototype.getRootNode?function(element){var _element$getRootNode;return element===null||element===void 0?void 0:(_element$getRootNode=element.getRootNode)===null||_element$getRootNode===void 0?void 0:_element$getRootNode.call(element);}:function(element){return element===null||element===void 0?void 0:element.ownerDocument;};var isInert=function isInert(node,lookUp){var _node$getAttribute;if(lookUp===void 0){lookUp=true;}var inertAtt=node===null||node===void 0?void 0:(_node$getAttribute=node.getAttribute)===null||_node$getAttribute===void 0?void 0:_node$getAttribute.call(node,'inert');var inert=inertAtt===''||inertAtt==='true';var result=inert||lookUp&&node&&isInert(node.parentNode);return result;};var isInput=function isInput(node){return node.tagName==='INPUT';};var isHiddenInput=function isHiddenInput(node){return isInput(node)&&node.type==='hidden';};var isDetailsWithSummary=function isDetailsWithSummary(node){var r=node.tagName==='DETAILS'&&Array.prototype.slice.apply(node.children).some(function(child){return child.tagName==='SUMMARY';});return r;};var isNodeAttached=function isNodeAttached(node){var _nodeRoot;var nodeRoot=node&&getRootNode(node);var nodeRootHost=(_nodeRoot=nodeRoot)===null||_nodeRoot===void 0?void 0:_nodeRoot.host;var attached=false;if(nodeRoot&&nodeRoot!==node){var _nodeRootHost,_nodeRootHost$ownerDo,_node$ownerDocument;attached=!!((_nodeRootHost=nodeRootHost)!==null&&_nodeRootHost!==void 0&&(_nodeRootHost$ownerDo=_nodeRootHost.ownerDocument)!==null&&_nodeRootHost$ownerDo!==void 0&&_nodeRootHost$ownerDo.contains(nodeRootHost)||node!==null&&node!==void 0&&(_node$ownerDocument=node.ownerDocument)!==null&&_node$ownerDocument!==void 0&&_node$ownerDocument.contains(node));while(!attached&&nodeRootHost){var _nodeRoot2,_nodeRootHost2,_nodeRootHost2$ownerD;nodeRoot=getRootNode(nodeRootHost);nodeRootHost=(_nodeRoot2=nodeRoot)===null||_nodeRoot2===void 0?void 0:_nodeRoot2.host;attached=!!((_nodeRootHost2=nodeRootHost)!==null&&_nodeRootHost2!==void 0&&(_nodeRootHost2$ownerD=_nodeRootHost2.ownerDocument)!==null&&_nodeRootHost2$ownerD!==void 0&&_nodeRootHost2$ownerD.contains(nodeRootHost));}}return attached;};var isZeroArea=function isZeroArea(node){var _node$getBoundingClie=node.getBoundingClientRect(),width=_node$getBoundingClie.width,height=_node$getBoundingClie.height;return width===0&&height===0;};var isHidden=function isHidden(node,_ref){var displayCheck=_ref.displayCheck,getShadowRoot=_ref.getShadowRoot;if(getComputedStyle(node).visibility==='hidden'){return true;}var isDirectSummary=matches.call(node,'details>summary:first-of-type');var nodeUnderDetails=isDirectSummary?node.parentElement:node;if(matches.call(nodeUnderDetails,'details:not([open]) *')){return true;}if(!displayCheck||displayCheck==='full'||displayCheck==='legacy-full'){if(typeof getShadowRoot==='function'){var originalNode=node;while(node){var parentElement=node.parentElement;var rootNode=getRootNode(node);if(parentElement&&!parentElement.shadowRoot&&getShadowRoot(parentElement)===true){return isZeroArea(node);}else if(node.assignedSlot){node=node.assignedSlot;}else if(!parentElement&&rootNode!==node.ownerDocument){node=rootNode.host;}else{node=parentElement;}}node=originalNode;}if(isNodeAttached(node)){return!node.getClientRects().length;}if(displayCheck!=='legacy-full'){return true;}}else if(displayCheck==='non-zero-area'){return isZeroArea(node);}return false;};var isDisabledFromFieldset=function isDisabledFromFieldset(node){if(/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)){var parentNode=node.parentElement;while(parentNode){if(parentNode.tagName==='FIELDSET'&&parentNode.disabled){for(var i=0;i<parentNode.children.length;i++){var child=parentNode.children.item(i);if(child.tagName==='LEGEND'){return matches.call(parentNode,'fieldset[disabled] *')?true:!child.contains(node);}}return true;}parentNode=parentNode.parentElement;}}return false;};var isNodeMatchingSelectorFocusable=function isNodeMatchingSelectorFocusable(options,node){if(node.disabled||isInert(node)||isHiddenInput(node)||isHidden(node,options)||isDetailsWithSummary(node)||isDisabledFromFieldset(node)){return false;}return true;};var focusableCandidateSelector=candidateSelectors.concat('iframe').join(',');var isFocusable=function isFocusable(node,options){options=options||{};if(!node){throw new Error('No node provided');}if(matches.call(node,focusableCandidateSelector)===false){return false;}return isNodeMatchingSelectorFocusable(options,node);};/**
     * @license
     * Copyright 2016 Google Inc. All rights reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */(()=>{var _a,_b,_c;const _blockingElements=Symbol();const _alreadyInertElements=Symbol();const _topElParents=Symbol();const _siblingsToRestore=Symbol();const _parentMO=Symbol();const _topChanged=Symbol();const _swapInertedSibling=Symbol();const _inertSiblings=Symbol();const _restoreInertedSiblings=Symbol();const _getParents=Symbol();const _getDistributedChildren=Symbol();const _isInertable=Symbol();const _handleMutations=Symbol();class BlockingElementsImpl{constructor(){this[_a]=[];this[_b]=[];this[_c]=new Set();}destructor(){this[_restoreInertedSiblings](this[_topElParents]);const nullable=this;nullable[_blockingElements]=null;nullable[_topElParents]=null;nullable[_alreadyInertElements]=null;}get top(){const elems=this[_blockingElements];return elems[elems.length-1]||null;}push(element){if(!element||element===this.top){return;}this.remove(element);this[_topChanged](element);this[_blockingElements].push(element);}remove(element){const i=this[_blockingElements].indexOf(element);if(i===-1){return false;}this[_blockingElements].splice(i,1);if(i===this[_blockingElements].length){this[_topChanged](this.top);}return true;}pop(){const top=this.top;top&&this.remove(top);return top;}has(element){return this[_blockingElements].indexOf(element)!==-1;}[(_a=_blockingElements,_b=_topElParents,_c=_alreadyInertElements,_topChanged)](newTop){const toKeepInert=this[_alreadyInertElements];const oldParents=this[_topElParents];if(!newTop){this[_restoreInertedSiblings](oldParents);toKeepInert.clear();this[_topElParents]=[];return;}const newParents=this[_getParents](newTop);if(newParents[newParents.length-1].parentNode!==document.body){throw Error('Non-connected element cannot be a blocking element');}this[_topElParents]=newParents;const toSkip=this[_getDistributedChildren](newTop);if(!oldParents.length){this[_inertSiblings](newParents,toSkip,toKeepInert);return;}let i=oldParents.length-1;let j=newParents.length-1;while(i>0&&j>0&&oldParents[i]===newParents[j]){i--;j--;}if(oldParents[i]!==newParents[j]){this[_swapInertedSibling](oldParents[i],newParents[j]);}i>0&&this[_restoreInertedSiblings](oldParents.slice(0,i));j>0&&this[_inertSiblings](newParents.slice(0,j),toSkip,null);}[_swapInertedSibling](oldInert,newInert){const siblingsToRestore=oldInert[_siblingsToRestore];if(this[_isInertable](oldInert)&&!oldInert.inert){oldInert.inert=true;siblingsToRestore.add(oldInert);}if(siblingsToRestore.has(newInert)){newInert.inert=false;siblingsToRestore.delete(newInert);}newInert[_parentMO]=oldInert[_parentMO];newInert[_siblingsToRestore]=siblingsToRestore;oldInert[_parentMO]=undefined;oldInert[_siblingsToRestore]=undefined;}[_restoreInertedSiblings](elements){for(const element of elements){const mo=element[_parentMO];mo.disconnect();element[_parentMO]=undefined;const siblings=element[_siblingsToRestore];for(const sibling of siblings){sibling.inert=false;}element[_siblingsToRestore]=undefined;}}[_inertSiblings](elements,toSkip,toKeepInert){for(const element of elements){const parent=element.parentNode;const children=parent.children;const inertedSiblings=new Set();for(let j=0;j<children.length;j++){const sibling=children[j];if(sibling===element||!this[_isInertable](sibling)||toSkip&&toSkip.has(sibling)){continue;}if(toKeepInert&&sibling.inert){toKeepInert.add(sibling);}else{sibling.inert=true;inertedSiblings.add(sibling);}}element[_siblingsToRestore]=inertedSiblings;const mo=new MutationObserver(this[_handleMutations].bind(this));element[_parentMO]=mo;let parentToObserve=parent;const maybeShadyRoot=parentToObserve;if(maybeShadyRoot.__shady&&maybeShadyRoot.host){parentToObserve=maybeShadyRoot.host;}mo.observe(parentToObserve,{childList:true});}}[_handleMutations](mutations){const parents=this[_topElParents];const toKeepInert=this[_alreadyInertElements];for(const mutation of mutations){const target=mutation.target.host||mutation.target;const idx=target===document.body?parents.length:parents.indexOf(target);const inertedChild=parents[idx-1];const inertedSiblings=inertedChild[_siblingsToRestore];for(let i=0;i<mutation.removedNodes.length;i++){const sibling=mutation.removedNodes[i];if(sibling===inertedChild){console.info('Detected removal of the top Blocking Element.');this.pop();return;}if(inertedSiblings.has(sibling)){sibling.inert=false;inertedSiblings.delete(sibling);}}for(let i=0;i<mutation.addedNodes.length;i++){const sibling=mutation.addedNodes[i];if(!this[_isInertable](sibling)){continue;}if(toKeepInert&&sibling.inert){toKeepInert.add(sibling);}else{sibling.inert=true;inertedSiblings.add(sibling);}}}}[_isInertable](element){return false===/^(style|template|script)$/.test(element.localName);}[_getParents](element){const parents=[];let current=element;while(current&&current!==document.body){if(current.nodeType===Node.ELEMENT_NODE){parents.push(current);}if(current.assignedSlot){while(current=current.assignedSlot){parents.push(current);}current=parents.pop();continue;}current=current.parentNode||current.host;}return parents;}[_getDistributedChildren](element){const shadowRoot=element.shadowRoot;if(!shadowRoot){return null;}const result=new Set();let i;let j;let nodes;const slots=shadowRoot.querySelectorAll('slot');if(slots.length&&slots[0].assignedNodes){for(i=0;i<slots.length;i++){nodes=slots[i].assignedNodes({flatten:true});for(j=0;j<nodes.length;j++){if(nodes[j].nodeType===Node.ELEMENT_NODE){result.add(nodes[j]);}}}}return result;}}document.$blockingElements=new BlockingElementsImpl();})();var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}(function(){if(typeof window==='undefined'){return;}var slice=Array.prototype.slice;var matches=Element.prototype.matches||Element.prototype.msMatchesSelector;var _focusableElementsString=['a[href]','area[href]','input:not([disabled])','select:not([disabled])','textarea:not([disabled])','button:not([disabled])','details','summary','iframe','object','embed','[contenteditable]'].join(',');var InertRoot=function(){function InertRoot(rootElement,inertManager){_classCallCheck(this,InertRoot);this._inertManager=inertManager;this._rootElement=rootElement;this._managedNodes=new Set();if(this._rootElement.hasAttribute('aria-hidden')){this._savedAriaHidden=this._rootElement.getAttribute('aria-hidden');}else{this._savedAriaHidden=null;}this._rootElement.setAttribute('aria-hidden','true');this._makeSubtreeUnfocusable(this._rootElement);this._observer=new MutationObserver(this._onMutation.bind(this));this._observer.observe(this._rootElement,{attributes:true,childList:true,subtree:true});}_createClass(InertRoot,[{key:'destructor',value:function destructor(){this._observer.disconnect();if(this._rootElement){if(this._savedAriaHidden!==null){this._rootElement.setAttribute('aria-hidden',this._savedAriaHidden);}else{this._rootElement.removeAttribute('aria-hidden');}}this._managedNodes.forEach(function(inertNode){this._unmanageNode(inertNode.node);},this);this._observer=null;this._rootElement=null;this._managedNodes=null;this._inertManager=null;}},{key:'_makeSubtreeUnfocusable',value:function _makeSubtreeUnfocusable(startNode){var _this2=this;composedTreeWalk(startNode,function(node){return _this2._visitNode(node);});var activeElement=document.activeElement;if(!document.body.contains(startNode)){var node=startNode;var root=undefined;while(node){if(node.nodeType===Node.DOCUMENT_FRAGMENT_NODE){root=node;break;}node=node.parentNode;}if(root){activeElement=root.activeElement;}}if(startNode.contains(activeElement)){activeElement.blur();if(activeElement===document.activeElement){document.body.focus();}}}},{key:'_visitNode',value:function _visitNode(node){if(node.nodeType!==Node.ELEMENT_NODE){return;}var element=node;if(element!==this._rootElement&&element.hasAttribute('inert')){this._adoptInertRoot(element);}if(matches.call(element,_focusableElementsString)||element.hasAttribute('tabindex')){this._manageNode(element);}}},{key:'_manageNode',value:function _manageNode(node){var inertNode=this._inertManager.register(node,this);this._managedNodes.add(inertNode);}},{key:'_unmanageNode',value:function _unmanageNode(node){var inertNode=this._inertManager.deregister(node,this);if(inertNode){this._managedNodes['delete'](inertNode);}}},{key:'_unmanageSubtree',value:function _unmanageSubtree(startNode){var _this3=this;composedTreeWalk(startNode,function(node){return _this3._unmanageNode(node);});}},{key:'_adoptInertRoot',value:function _adoptInertRoot(node){var inertSubroot=this._inertManager.getInertRoot(node);if(!inertSubroot){this._inertManager.setInert(node,true);inertSubroot=this._inertManager.getInertRoot(node);}inertSubroot.managedNodes.forEach(function(savedInertNode){this._manageNode(savedInertNode.node);},this);}},{key:'_onMutation',value:function _onMutation(records,self){records.forEach(function(record){var target=record.target;if(record.type==='childList'){slice.call(record.addedNodes).forEach(function(node){this._makeSubtreeUnfocusable(node);},this);slice.call(record.removedNodes).forEach(function(node){this._unmanageSubtree(node);},this);}else if(record.type==='attributes'){if(record.attributeName==='tabindex'){this._manageNode(target);}else if(target!==this._rootElement&&record.attributeName==='inert'&&target.hasAttribute('inert')){this._adoptInertRoot(target);var inertSubroot=this._inertManager.getInertRoot(target);this._managedNodes.forEach(function(managedNode){if(target.contains(managedNode.node)){inertSubroot._manageNode(managedNode.node);}});}}},this);}},{key:'managedNodes',get:function get(){return new Set(this._managedNodes);}},{key:'hasSavedAriaHidden',get:function get(){return this._savedAriaHidden!==null;}},{key:'savedAriaHidden',set:function set(ariaHidden){this._savedAriaHidden=ariaHidden;},get:function get(){return this._savedAriaHidden;}}]);return InertRoot;}();var InertNode=function(){function InertNode(node,inertRoot){_classCallCheck(this,InertNode);this._node=node;this._overrodeFocusMethod=false;this._inertRoots=new Set([inertRoot]);this._savedTabIndex=null;this._destroyed=false;this.ensureUntabbable();}_createClass(InertNode,[{key:'destructor',value:function destructor(){this._throwIfDestroyed();if(this._node&&this._node.nodeType===Node.ELEMENT_NODE){var element=this._node;if(this._savedTabIndex!==null){element.setAttribute('tabindex',this._savedTabIndex);}else{element.removeAttribute('tabindex');}if(this._overrodeFocusMethod){delete element.focus;}}this._node=null;this._inertRoots=null;this._destroyed=true;}},{key:'_throwIfDestroyed',value:function _throwIfDestroyed(){if(this.destroyed){throw new Error('Trying to access destroyed InertNode');}}},{key:'ensureUntabbable',value:function ensureUntabbable(){if(this.node.nodeType!==Node.ELEMENT_NODE){return;}var element=this.node;if(matches.call(element,_focusableElementsString)){if(element.tabIndex===-1&&this.hasSavedTabIndex){return;}if(element.hasAttribute('tabindex')){this._savedTabIndex=element.tabIndex;}element.setAttribute('tabindex','-1');if(element.nodeType===Node.ELEMENT_NODE){element.focus=function(){};this._overrodeFocusMethod=true;}}else if(element.hasAttribute('tabindex')){this._savedTabIndex=element.tabIndex;element.removeAttribute('tabindex');}}},{key:'addInertRoot',value:function addInertRoot(inertRoot){this._throwIfDestroyed();this._inertRoots.add(inertRoot);}},{key:'removeInertRoot',value:function removeInertRoot(inertRoot){this._throwIfDestroyed();this._inertRoots['delete'](inertRoot);if(this._inertRoots.size===0){this.destructor();}}},{key:'destroyed',get:function get(){return this._destroyed;}},{key:'hasSavedTabIndex',get:function get(){return this._savedTabIndex!==null;}},{key:'node',get:function get(){this._throwIfDestroyed();return this._node;}},{key:'savedTabIndex',set:function set(tabIndex){this._throwIfDestroyed();this._savedTabIndex=tabIndex;},get:function get(){this._throwIfDestroyed();return this._savedTabIndex;}}]);return InertNode;}();var InertManager=function(){function InertManager(document){_classCallCheck(this,InertManager);if(!document){throw new Error('Missing required argument; InertManager needs to wrap a document.');}this._document=document;this._managedNodes=new Map();this._inertRoots=new Map();this._observer=new MutationObserver(this._watchForInert.bind(this));addInertStyle(document.head||document.body||document.documentElement);if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',this._onDocumentLoaded.bind(this));}else{this._onDocumentLoaded();}}_createClass(InertManager,[{key:'setInert',value:function setInert(root,inert){if(inert){if(this._inertRoots.has(root)){return;}var inertRoot=new InertRoot(root,this);root.setAttribute('inert','');this._inertRoots.set(root,inertRoot);if(!this._document.body.contains(root)){var parent=root.parentNode;while(parent){if(parent.nodeType===11){addInertStyle(parent);}parent=parent.parentNode;}}}else{if(!this._inertRoots.has(root)){return;}var _inertRoot=this._inertRoots.get(root);_inertRoot.destructor();this._inertRoots['delete'](root);root.removeAttribute('inert');}}},{key:'getInertRoot',value:function getInertRoot(element){return this._inertRoots.get(element);}},{key:'register',value:function register(node,inertRoot){var inertNode=this._managedNodes.get(node);if(inertNode!==undefined){inertNode.addInertRoot(inertRoot);}else{inertNode=new InertNode(node,inertRoot);}this._managedNodes.set(node,inertNode);return inertNode;}},{key:'deregister',value:function deregister(node,inertRoot){var inertNode=this._managedNodes.get(node);if(!inertNode){return null;}inertNode.removeInertRoot(inertRoot);if(inertNode.destroyed){this._managedNodes['delete'](node);}return inertNode;}},{key:'_onDocumentLoaded',value:function _onDocumentLoaded(){var inertElements=slice.call(this._document.querySelectorAll('[inert]'));inertElements.forEach(function(inertElement){this.setInert(inertElement,true);},this);this._observer.observe(this._document.body||this._document.documentElement,{attributes:true,subtree:true,childList:true});}},{key:'_watchForInert',value:function _watchForInert(records,self){var _this=this;records.forEach(function(record){switch(record.type){case'childList':slice.call(record.addedNodes).forEach(function(node){if(node.nodeType!==Node.ELEMENT_NODE){return;}var inertElements=slice.call(node.querySelectorAll('[inert]'));if(matches.call(node,'[inert]')){inertElements.unshift(node);}inertElements.forEach(function(inertElement){this.setInert(inertElement,true);},_this);},_this);break;case'attributes':if(record.attributeName!=='inert'){return;}var target=record.target;var inert=target.hasAttribute('inert');_this.setInert(target,inert);break;}},this);}}]);return InertManager;}();function composedTreeWalk(node,callback,shadowRootAncestor){if(node.nodeType==Node.ELEMENT_NODE){var element=node;if(callback){callback(element);}var shadowRoot=element.shadowRoot;if(shadowRoot){composedTreeWalk(shadowRoot,callback);return;}if(element.localName=='content'){var content=element;var distributedNodes=content.getDistributedNodes?content.getDistributedNodes():[];for(var i=0;i<distributedNodes.length;i++){composedTreeWalk(distributedNodes[i],callback);}return;}if(element.localName=='slot'){var slot=element;var _distributedNodes=slot.assignedNodes?slot.assignedNodes({flatten:true}):[];for(var _i=0;_i<_distributedNodes.length;_i++){composedTreeWalk(_distributedNodes[_i],callback);}return;}}var child=node.firstChild;while(child!=null){composedTreeWalk(child,callback);child=child.nextSibling;}}function addInertStyle(node){if(node.querySelector('style#inert-style, link#inert-style')){return;}var style=document.createElement('style');style.setAttribute('id','inert-style');style.textContent='\n'+'[inert] {\n'+'  pointer-events: none;\n'+'  cursor: default;\n'+'}\n'+'\n'+'[inert], [inert] * {\n'+'  -webkit-user-select: none;\n'+'  -moz-user-select: none;\n'+'  -ms-user-select: none;\n'+'  user-select: none;\n'+'}\n';node.appendChild(style);}if(!HTMLElement.prototype.hasOwnProperty('inert')){var inertManager=new InertManager(document);Object.defineProperty(HTMLElement.prototype,'inert',{enumerable:true,get:function get(){return this.hasAttribute('inert');},set:function set(inert){inertManager.setInert(this,inert);}});}})();function getDocument(element){var _ref9,_ref10,_element$ownerDocumen;return(_ref9=(_ref10=(_element$ownerDocumen=element===null||element===void 0?void 0:element.ownerDocument)!==null&&_element$ownerDocumen!==void 0?_element$ownerDocumen:document)!==null&&_ref10!==void 0?_ref10:window.document)!==null&&_ref9!==void 0?_ref9:globalThis.document;}function blockingElements(){return getDocument().$blockingElements;}function useBlockingElement(enabled,getTarget){const stableGetTarget=useStableCallback(getTarget);const getDocument=useStableCallback(()=>{var _getTarget$ownerDocum,_getTarget;return(_getTarget$ownerDocum=(_getTarget=getTarget())===null||_getTarget===void 0?void 0:_getTarget.ownerDocument)!==null&&_getTarget$ownerDocum!==void 0?_getTarget$ownerDocum:globalThis.document;});useActiveElement({activeElementParameters:{getDocument,onLastActiveElementChange:useStableCallback(e=>{if(e){if(enabled)setLastActiveWhenOpen(e);else setLastActiveWhenClosed(e);}})}});const[getTop,setTop]=usePassiveState(null,returnNull);const[getLastActiveWhenClosed,setLastActiveWhenClosed]=usePassiveState(null,returnNull);const[getLastActiveWhenOpen,setLastActiveWhenOpen]=usePassiveState(null,returnNull);s(()=>{const target=stableGetTarget();if(enabled){try{blockingElements().push(target);setTop(target);return()=>{blockingElements().remove(target);};}catch(ex){console.error(ex);}}},[enabled]);return{getTop,getLastActiveWhenClosed,getLastActiveWhenOpen};}function useFocusTrap(_ref11){let{focusTrapParameters:{onlyMoveFocus,trapActive,focusPopup:focusSelfUnstable,focusOpener:focusOpenerUnstable},refElementParameters}=_ref11;const{onElementChange,...rest}=refElementParameters||{};const focusSelf=useStableCallback(focusSelfUnstable);const focusOpener=useStableCallback(focusOpenerUnstable);h(()=>{if(trapActive){let top=getTop();getLastActiveWhenOpen();{var _top;(_top=top)!==null&&_top!==void 0?_top:top=refElementReturn.getElement();console.assert(!!top);if(top)focusSelf(top,()=>findFirstFocusable(top));}}else{const lastActive=getLastActiveWhenClosed();if(lastActive)focusOpener(lastActive);}},[trapActive]);const{refElementReturn}=useRefElement({refElementParameters:{onElementChange,...rest}});const{getElement}=refElementReturn;const{getTop,getLastActiveWhenClosed,getLastActiveWhenOpen}=useBlockingElement(trapActive&&!onlyMoveFocus,getElement);return{refElementReturn,focusTrapReturn:{propsUnstable:{"aria-modal":trapActive?"true":undefined}}};}function findFirstFocusable(element){return findFirstCondition(element,node=>node instanceof Element&&isFocusable(node));}function findFirstCondition(element,filter){var _element;if(element&&filter(element))return element;console.assert(!!element);(_element=element)!==null&&_element!==void 0?_element:element=document.body;const treeWalker=document.createTreeWalker(element,NodeFilter.SHOW_ELEMENT,{acceptNode:node=>filter(node)?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP});const firstFocusable=treeWalker.firstChild();return firstFocusable;}function useLinearNavigation(_ref12){let{rovingTabIndexReturn,linearNavigationParameters}=_ref12;const{getHighestIndex,indexDemangler,indexMangler,isValid,navigatePastEnd,navigatePastStart}=linearNavigationParameters;const{getTabbableIndex,setTabbableIndex}=rovingTabIndexReturn;const navigateAbsolute=T$1((i,e,fromUserInteraction)=>{const target=indexDemangler(i);const{value}=tryNavigateToIndex({isValid,highestChildIndex:getHighestIndex(),indexDemangler,indexMangler,searchDirection:-1,target});setTabbableIndex(value,e,fromUserInteraction);},[]);const navigateToFirst=useStableCallback((e,fromUserInteraction)=>{navigateAbsolute(0,e,fromUserInteraction);});const navigateToLast=useStableCallback((e,fromUserInteraction)=>{navigateAbsolute(getHighestIndex(),e,fromUserInteraction);});const navigateRelative2=useStableCallback((e,offset,fromUserInteraction,mode)=>{var _getTabbableIndex;const original=(_getTabbableIndex=getTabbableIndex())!==null&&_getTabbableIndex!==void 0?_getTabbableIndex:0;const{status,value}=tryNavigateToIndex({isValid,highestChildIndex:getHighestIndex(),indexDemangler,indexMangler,searchDirection:Math.sign(offset)||1,target:indexDemangler(indexMangler(original)+offset)});if(status=="past-end"){if(navigatePastEnd=="wrap"){if(mode=="single")navigateToFirst(e,fromUserInteraction);else{navigateToLast(e,fromUserInteraction);}return"stop";}else if(navigatePastEnd=="passthrough"){return"passthrough";}else{navigatePastEnd();return"stop";}}else if(status=="past-start"){if(navigatePastStart=="wrap"){if(mode=="single"){navigateToLast(e,fromUserInteraction);}else{navigateToFirst(e,fromUserInteraction);}return"stop";}else if(navigatePastStart=="passthrough"){return"passthrough";}else{navigatePastStart();return"stop";}}else{setTabbableIndex(value,e,fromUserInteraction);return"stop";}});const navigateToNext=useStableCallback((e,fromUserInteraction)=>{return navigateRelative2(e,1,fromUserInteraction,"single");});const navigateToPrev=useStableCallback((e,fromUserInteraction)=>{return navigateRelative2(e,-1,fromUserInteraction,"single");});const getDisableArrowKeys=useStableGetter(linearNavigationParameters.disableArrowKeys);const getDisableHomeEndKeys=useStableGetter(linearNavigationParameters.disableHomeEndKeys);const getNavigationDirection=useStableGetter(linearNavigationParameters.navigationDirection);const getPageNavigationSize=useStableGetter(linearNavigationParameters.pageNavigationSize);const stableProps=_({onKeyDown:e=>{if(e.ctrlKey||e.metaKey)return;const navigationDirection=getNavigationDirection();const disableArrowKeys=getDisableArrowKeys();const disableHomeEndKeys=getDisableHomeEndKeys();const pageNavigationSize=getPageNavigationSize();const allowsVerticalNavigation=navigationDirection=="vertical"||navigationDirection=="either";const allowsHorizontalNavigation=navigationDirection=="horizontal"||navigationDirection=="either";let truePageNavigationSize=pageNavigationSize;if(truePageNavigationSize<1){truePageNavigationSize=Math.round(pageNavigationSize*Math.max(100,getHighestIndex()+1));}switch(e.key){case"ArrowUp":{const directionAllowed=!disableArrowKeys&&allowsVerticalNavigation;if(directionAllowed){const result=navigateToPrev(e,true);if(result!="passthrough"){e.preventDefault();e.stopPropagation();}}break;}case"ArrowDown":{const directionAllowed=!disableArrowKeys&&allowsVerticalNavigation;if(directionAllowed){const result=navigateToNext(e,true);if(result!="passthrough"){e.preventDefault();e.stopPropagation();}}break;}case"ArrowLeft":{const directionAllowed=!disableArrowKeys&&allowsHorizontalNavigation;if(directionAllowed){const result=navigateToPrev(e,true);if(result!="passthrough"){e.preventDefault();e.stopPropagation();}}break;}case"ArrowRight":{const directionAllowed=!disableArrowKeys&&allowsHorizontalNavigation;if(directionAllowed){const result=navigateToNext(e,true);if(result!="passthrough"){e.preventDefault();e.stopPropagation();}}break;}case"PageUp":{if(truePageNavigationSize>0){navigateRelative2(e,-truePageNavigationSize,true,"page");e.preventDefault();e.stopPropagation();}break;}case"PageDown":{if(truePageNavigationSize>0){navigateRelative2(e,truePageNavigationSize,true,"page");e.preventDefault();e.stopPropagation();}break;}case"Home":if(!disableHomeEndKeys){navigateToFirst(e,true);e.preventDefault();e.stopPropagation();}break;case"End":if(!disableHomeEndKeys){navigateToLast(e,true);e.preventDefault();e.stopPropagation();}break;}}});return{linearNavigationReturn:{propsStable:stableProps.current}};}function tryNavigateToIndex(_ref13){let{isValid,highestChildIndex,searchDirection,indexDemangler,indexMangler,target}=_ref13;if(searchDirection===-1){var _bestUpResult;let bestUpResult=undefined;bestUpResult=tryNavigateUp({isValid,indexDemangler,indexMangler,target});(_bestUpResult=bestUpResult)!==null&&_bestUpResult!==void 0?_bestUpResult:bestUpResult=tryNavigateDown({isValid,indexDemangler,indexMangler,target,highestChildIndex});return bestUpResult||{value:target,status:"normal"};}else{var _bestDownResult;let bestDownResult=undefined;bestDownResult=tryNavigateDown({isValid,indexDemangler,indexMangler,target,highestChildIndex});(_bestDownResult=bestDownResult)!==null&&_bestDownResult!==void 0?_bestDownResult:bestDownResult=tryNavigateUp({isValid,indexDemangler,indexMangler,target});return bestDownResult||{value:target,status:"normal"};}}function tryNavigateUp(_ref14){let{isValid,indexDemangler,indexMangler,target}=_ref14;const lower=0;while(target>=lower&&!isValid(target))target=indexDemangler(indexMangler(target)-1);if(!isValid(target)){return undefined;}if(target<lower){return{value:indexDemangler(lower),status:"past-start"};}else{return{value:target,status:"normal"};}}function tryNavigateDown(_ref15){let{isValid,indexDemangler,indexMangler,target,highestChildIndex:upper}=_ref15;while(target<=upper&&!isValid(target))target=indexDemangler(indexMangler(target)+1);if(!isValid(target)){return undefined;}if(target>upper){return{value:indexDemangler(upper),status:"past-end"};}else{return{value:target,status:"normal"};}}function useState(initialState){const[state,setStateP]=p(initialState);const ref=_(state);const setState=T$1(value=>{if(typeof value==="function"){const callback=value;setStateP(prevValue=>{const nextValue=callback(prevValue);ref.current=nextValue;return nextValue;});}else{ref.current=value;setStateP(value);}},[]);const getState=()=>{return ref.current;};console.assert(ref.current===state||typeof state==="number"&&isNaN(state));return[state,setState,getState];}function useRovingTabIndex(_ref16){let{managedChildrenReturn:{getChildren},rovingTabIndexParameters:{untabbable,initiallyTabbedIndex,onTabbableIndexChange},..._void1}=_ref16;const getUntabbable=useStableGetter(untabbable);const setTabbableIndex=useStableCallback((updater,reason,fromUserInteraction)=>{const children=getChildren();return changeTabbableIndex(function returnModifiedTabbableIndex(prevIndex){let nextIndex=typeof updater==="function"?updater(prevIndex!==null&&prevIndex!==void 0?prevIndex:null):updater;const untabbable=getUntabbable();if(nextIndex!=null)setLastNonNullIndex(nextIndex);if(untabbable)return null;if(prevIndex!=nextIndex){const nextChild=nextIndex==null?null:children.getAt(nextIndex);if(nextChild!==null&&nextChild!==void 0&&nextChild.hidden){return prevIndex!==null&&prevIndex!==void 0?prevIndex:untabbable?null:0;}if(nextChild!=null&&fromUserInteraction){const element=nextChild.getElement();if(element){if(document.activeElement==null||!element.contains(document.activeElement))nextChild.focusSelf(element);}}}if(nextIndex!=null)setLastNonNullIndex(nextIndex);return nextIndex!==null&&nextIndex!==void 0?nextIndex:untabbable?null:0;},reason);},[]);const[getLastNonNullIndex,setLastNonNullIndex]=usePassiveState(null,T$1(()=>initiallyTabbedIndex!==null&&initiallyTabbedIndex!==void 0?initiallyTabbedIndex:0,[]));h(()=>{if(untabbable)changeTabbableIndex(null,undefined);else{changeTabbableIndex(getLastNonNullIndex(),undefined);}},[untabbable]);const getTabbableAt=T$1(m=>{return m.getTabbable();},[]);const setTabbableAt=T$1((m,t)=>{m.setTabbable(t);},[]);const isTabbableValid=T$1(m=>{return!m.hidden;},[]);const{changeIndex:changeTabbableIndex,getCurrentIndex:getTabbableIndex,reevaluateClosestFit}=useChildrenFlag({initialIndex:initiallyTabbedIndex!==null&&initiallyTabbedIndex!==void 0?initiallyTabbedIndex:untabbable?null:0,onIndexChange:onTabbableIndexChange,getChildren,closestFit:true,getAt:getTabbableAt,isValid:isTabbableValid,setAt:setTabbableAt});const focusSelf=T$1(reason=>{const children=getChildren();const index=getTabbableIndex();if(index!=null){var _children$getAt,_children$getAt2,_children$getAt2$focu;const element=(_children$getAt=children.getAt(index))===null||_children$getAt===void 0?void 0:_children$getAt.getElement();(_children$getAt2=children.getAt(index))===null||_children$getAt2===void 0?void 0:(_children$getAt2$focu=_children$getAt2.focusSelf)===null||_children$getAt2$focu===void 0?void 0:_children$getAt2$focu.call(_children$getAt2,element);}else setTabbableIndex(null,reason,true);},[]);const rovingTabIndexChildContext=useStableObject({setTabbableIndex,getInitiallyTabbedIndex:T$1(()=>{return initiallyTabbedIndex!==null&&initiallyTabbedIndex!==void 0?initiallyTabbedIndex:untabbable?null:0;},[]),reevaluateClosestFit});return{managedChildrenParameters:{onChildrenMountChange:reevaluateClosestFit},rovingTabIndexReturn:{setTabbableIndex,getTabbableIndex,focusSelf},rovingTabIndexChildContext};}function useRovingTabIndexChild(_ref17){let{managedChildParameters:{index,..._void2},rovingTabIndexChildContext:{reevaluateClosestFit,setTabbableIndex,getInitiallyTabbedIndex},rovingTabIndexChildParameters}=_ref17;const{hidden,..._void1}=rovingTabIndexChildParameters;const[tabbable,setTabbable,getTabbable]=useState(getInitiallyTabbedIndex()===index);h(()=>{reevaluateClosestFit();},[!!hidden]);return{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:useStableCallback((focused,_prevFocused,e)=>{if(focused){setTabbableIndex(index,e,false);}})},rovingTabIndexChildReturn:{propsUnstable:{tabIndex:tabbable?0:-1},tabbable,getTabbable,setTabbable}};}function useTextContent(_ref18){let{refElementReturn:{getElement},textContentParameters:{getText,onTextContentChange,hidden}}=_ref18;const[getTextContent,setTextContent]=usePassiveState(onTextContentChange,returnNull,runImmediately);h(()=>{if(!hidden){const element=getElement();if(element){const textContent=getText(element);if(textContent){setTextContent(textContent);}}}});return{textContentReturn:{getTextContent}};}function useTypeaheadNavigation(_ref19){let{typeaheadNavigationParameters:{collator,typeaheadTimeout,noTypeahead,isValid,..._void3},rovingTabIndexReturn:{getTabbableIndex:getIndex,setTabbableIndex:setIndex,..._void1},..._void2}=_ref19;const[getCurrentTypeahead,setCurrentTypeahead]=usePassiveState(useStableCallback((currentTypeahead,prev,reason)=>{const handle=setTimeout(()=>{setCurrentTypeahead(null,undefined);setTypeaheadStatus("none");},typeaheadTimeout!==null&&typeaheadTimeout!==void 0?typeaheadTimeout:1000);updateBasedOnTypeaheadChange(currentTypeahead,reason);return()=>clearTimeout(handle);}));const sortedTypeaheadInfo=_([]);const[typeaheadStatus,setTypeaheadStatus]=useState("none");const[,setImeActive,getImeActive]=useState(false);const[nextTypeaheadChar,setNextTypeaheadChar]=useState(null);s(()=>{if(nextTypeaheadChar!==null){setCurrentTypeahead(typeahead=>(typeahead!==null&&typeahead!==void 0?typeahead:"")+nextTypeaheadChar,undefined);setNextTypeaheadChar(null);}},[nextTypeaheadChar]);const comparatorShared=useStableCallback((safeLhs,safeRhs)=>{var _safeRhs$toLowerCase;let compare;safeLhs=safeLhs.normalize("NFD");safeRhs=safeRhs.normalize("NFD");if(collator)compare=collator.compare(safeLhs,safeRhs);else compare=safeLhs.toLowerCase().localeCompare((_safeRhs$toLowerCase=safeRhs.toLowerCase())!==null&&_safeRhs$toLowerCase!==void 0?_safeRhs$toLowerCase:"");return compare;});const insertingComparator=useStableCallback((lhs,rhs)=>{if(typeof lhs==="string"&&typeof rhs.text==="string"){return comparatorShared(lhs,rhs.text);}return lhs-rhs;});const typeaheadComparator=useStableCallback((lhs,rhs)=>{if(typeof lhs==="string"&&typeof rhs.text==="string"){return comparatorShared(lhs,rhs.text.substring(0,lhs.length));}return lhs-rhs;});const isDisabled=useStableGetter(noTypeahead);const propsStable=_({onKeyDown:useStableCallback(e=>{if(isDisabled())return;const imeActive=getImeActive();const key=e.key;if(e.ctrlKey||e.metaKey)return;if(!imeActive&&e.key==="Backspace"){setCurrentTypeahead(t=>t==null?null:[...t].reverse().slice(1).reverse().join(""),e);e.preventDefault();e.stopPropagation();return;}const isCharacterKey=key.length===1||!/^[A-Za-z]/.test(key);if(isCharacterKey){var _getCurrentTypeahead;if(key==" "&&((_getCurrentTypeahead=getCurrentTypeahead())!==null&&_getCurrentTypeahead!==void 0?_getCurrentTypeahead:"").trim().length==0);else{e.preventDefault();e.stopPropagation();if(!imeActive)setNextTypeaheadChar(key);}}}),onCompositionStart:useStableCallback(e=>{setNextTypeaheadChar(e.data);setImeActive(false);}),onCompositionEnd:useStableCallback(_e=>{setImeActive(true);})});const excludeSpace=useStableCallback(()=>{return typeaheadStatus!="none";});return{typeaheadNavigationChildContext:useStableObject({typeaheadNavigationChildParameters:useStableObject({insertingComparator,sortedTypeaheadInfo:sortedTypeaheadInfo.current,excludeSpace})}),typeaheadNavigationReturn:{getCurrentTypeahead,typeaheadStatus,propsStable:propsStable.current}};function updateBasedOnTypeaheadChange(currentTypeahead,reason){if(currentTypeahead&&sortedTypeaheadInfo.current.length){const sortedTypeaheadIndex=binarySearch(sortedTypeaheadInfo.current,currentTypeahead,typeaheadComparator);if(sortedTypeaheadIndex<0){setTypeaheadStatus("invalid");}else{setTypeaheadStatus("valid");let lowestUnsortedIndexAll=null;let lowestSortedIndexAll=sortedTypeaheadIndex;let lowestUnsortedIndexNext=null;let lowestSortedIndexNext=sortedTypeaheadIndex;const updateBestFit=u=>{var _getIndex;if(!isValid(u))return;if(lowestUnsortedIndexAll==null||u<lowestUnsortedIndexAll){lowestUnsortedIndexAll=u;lowestSortedIndexAll=i;}if((lowestUnsortedIndexNext==null||u<lowestUnsortedIndexNext)&&u>((_getIndex=getIndex())!==null&&_getIndex!==void 0?_getIndex:-Infinity)){lowestUnsortedIndexNext=u;lowestSortedIndexNext=i;}};let i=sortedTypeaheadIndex;while(i>=0&&typeaheadComparator(currentTypeahead,sortedTypeaheadInfo.current[i])==0){updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);--i;}i=sortedTypeaheadIndex;while(i<sortedTypeaheadInfo.current.length&&typeaheadComparator(currentTypeahead,sortedTypeaheadInfo.current[i])==0){updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);++i;}if(lowestUnsortedIndexNext!==null)setIndex(sortedTypeaheadInfo.current[lowestSortedIndexNext].unsortedIndex,reason,true);else if(lowestUnsortedIndexAll!==null)setIndex(sortedTypeaheadInfo.current[lowestSortedIndexAll].unsortedIndex,reason,true);}}}}function useTypeaheadNavigationChild(_ref20){let{managedChildParameters:{index,...void1},textContentParameters:{getText,hidden,...void5},typeaheadNavigationChildContext:{typeaheadNavigationChildParameters:{sortedTypeaheadInfo,insertingComparator,excludeSpace,...void2}},refElementReturn:{getElement,...void3},...void4}=_ref20;const{textContentReturn}=useTextContent({refElementReturn:{getElement},textContentParameters:{getText,hidden,onTextContentChange:T$1(text=>{if(text){const sortedIndex=binarySearch(sortedTypeaheadInfo,text,insertingComparator);console.assert(sortedIndex<0||insertingComparator(sortedTypeaheadInfo[sortedIndex].text,{unsortedIndex:index,text})==0);if(sortedIndex<0){sortedTypeaheadInfo.splice(-sortedIndex-1,0,{text,unsortedIndex:index});}else{sortedTypeaheadInfo.splice(sortedIndex,0,{text,unsortedIndex:index});}return()=>{const sortedIndex=binarySearch(sortedTypeaheadInfo,text,insertingComparator);console.assert(sortedIndex<0||insertingComparator(sortedTypeaheadInfo[sortedIndex].text,{unsortedIndex:index,text})==0);if(sortedIndex>=0){sortedTypeaheadInfo.splice(sortedIndex,1);}};}},[])}});return{textContentReturn,pressParameters:{excludeSpace}};}function binarySearch(array,wanted,comparator){let firstIndex=0;let lastIndex=array.length-1;while(firstIndex<=lastIndex){const testIndex=lastIndex+firstIndex>>1;const comparisonResult=comparator(wanted,array[testIndex]);if(comparisonResult>0){firstIndex=testIndex+1;}else if(comparisonResult<0){lastIndex=testIndex-1;}else{return testIndex;}}return-firstIndex-1;}function useListNavigation(_ref21){let{linearNavigationParameters,typeaheadNavigationParameters,rovingTabIndexParameters,managedChildrenReturn,..._void1}=_ref21;const rtir=useRovingTabIndex({managedChildrenReturn,rovingTabIndexParameters});const{rovingTabIndexReturn}=rtir;const tnr=useTypeaheadNavigation({rovingTabIndexReturn,typeaheadNavigationParameters});const lnr=useLinearNavigation({rovingTabIndexReturn,linearNavigationParameters});return{...lnr,...tnr,...rtir};}function useListNavigationChild(_ref22){let{rovingTabIndexChildParameters,rovingTabIndexChildContext,typeaheadNavigationChildContext,managedChildParameters,refElementReturn,textContentParameters,..._void2}=_ref22;const rticr=useRovingTabIndexChild({rovingTabIndexChildContext,rovingTabIndexChildParameters,managedChildParameters});const tncr=useTypeaheadNavigationChild({refElementReturn,typeaheadNavigationChildContext,managedChildParameters,textContentParameters});return{...tncr,...rticr};}function useGridNavigation(_ref23){let{gridNavigationParameters:{onTabbableColumnChange,...void3},linearNavigationParameters,rovingTabIndexParameters:{onTabbableIndexChange,...rovingTabIndexParameters},managedChildrenReturn,typeaheadNavigationParameters,..._void2}=_ref23;const{getChildren}=managedChildrenReturn;const{initiallyTabbedIndex}=rovingTabIndexParameters;const[getCurrentTabbableColumn,setCurrentTabbableColumn]=usePassiveState(onTabbableColumnChange,useStableCallback(()=>{return initiallyTabbedIndex!==null&&initiallyTabbedIndex!==void 0?initiallyTabbedIndex:0;}));const onTabbableIndexChangeOverride=useStableCallback((nextRow,previousRow,reason)=>{var _children$getAt3,_children$getAt4;const children=getChildren();onTabbableIndexChange===null||onTabbableIndexChange===void 0?void 0:onTabbableIndexChange(nextRow,previousRow,reason);const nextColumn=getCurrentTabbableColumn();if(previousRow!=null)(_children$getAt3=children.getAt(previousRow))===null||_children$getAt3===void 0?void 0:_children$getAt3.setTabbableColumnIndex(nextColumn,reason,false);if(nextRow!=null)(_children$getAt4=children.getAt(nextRow))===null||_children$getAt4===void 0?void 0:_children$getAt4.setTabbableColumnIndex(nextColumn,reason,false);});const{linearNavigationReturn,rovingTabIndexReturn,typeaheadNavigationReturn,managedChildrenParameters,rovingTabIndexChildContext,typeaheadNavigationChildContext,...void1}=useListNavigation({linearNavigationParameters:{navigationDirection:"vertical",...linearNavigationParameters},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChangeOverride,...rovingTabIndexParameters},managedChildrenReturn,typeaheadNavigationParameters});return{managedChildrenParameters,rovingTabIndexChildContext,typeaheadNavigationChildContext,linearNavigationReturn,rovingTabIndexReturn,typeaheadNavigationReturn,gridNavigationRowContext:useStableObject({gridNavigationRowParameters:useStableObject({setTabbableRow:rovingTabIndexReturn.setTabbableIndex,getCurrentTabbableColumn,setCurrentTabbableColumn})})};}function useGridNavigationRow(_ref24){let{rowAsChildOfGridParameters:{gridNavigationRowContext:{gridNavigationRowParameters:{setTabbableRow,getCurrentTabbableColumn,setCurrentTabbableColumn}},...asChildRowOfTable},rowAsParentOfCellsParameters:{linearNavigationParameters,rovingTabIndexParameters:{...rovingTabIndexParameters},...asParentRowOfCellsP},..._void1}=_ref24;const{managedChildrenReturn:{getChildren}}=asChildRowOfTable;const getIndex=useStableCallback(()=>{return asChildRowOfTable.managedChildParameters.index;});const focusSelf=useStableCallback(e=>{var _getCurrentTabbableCo;let index=(_getCurrentTabbableCo=getCurrentTabbableColumn())!==null&&_getCurrentTabbableCo!==void 0?_getCurrentTabbableCo:0;let child=getChildren().getAt(index);let highestIndex=getChildren().getHighestIndex();while((!child||child.hidden)&&index>0){--index;child=getChildren().getAt(index);}while((!child||child.hidden)&&index<=highestIndex){++index;child=getChildren().getAt(index);}if(child){const e=child.getElement();child.focusSelf(e);}else{var _e$focus;e===null||e===void 0?void 0:(_e$focus=e.focus)===null||_e$focus===void 0?void 0:_e$focus.call(e);}},[]);const lncr=useListNavigationChild(asChildRowOfTable);const untabbable=!lncr.rovingTabIndexChildReturn.tabbable;const lnr=useListNavigation({...asParentRowOfCellsP,rovingTabIndexParameters:{untabbable,...rovingTabIndexParameters},linearNavigationParameters:{navigationDirection:"horizontal",...linearNavigationParameters}});const{rovingTabIndexReturn:{setTabbableIndex},rovingTabIndexReturn,linearNavigationReturn,managedChildrenParameters,rovingTabIndexChildContext,typeaheadNavigationChildContext,typeaheadNavigationReturn}=lnr;return{rowAsChildOfGridReturn:{gridNavigationRowParameters:{focusSelf,setTabbableColumnIndex:setTabbableIndex},...lncr},rowAsParentOfCellsReturn:{...lnr,gridNavigationCellContext:useStableObject({gridNavigationCellParameters:useStableObject({setTabbableRow,getRowIndex:getIndex,getCurrentTabbableColumn,setCurrentTabbableColumn,setTabbableCell:setTabbableIndex})}),linearNavigationReturn,managedChildrenParameters,rovingTabIndexChildContext,rovingTabIndexReturn,typeaheadNavigationChildContext,typeaheadNavigationReturn}};}function useGridNavigationCell(_ref25){let{rovingTabIndexChildContext,typeaheadNavigationChildContext,rovingTabIndexChildParameters,managedChildParameters,refElementReturn,textContentParameters,gridNavigationCellParameters:{colSpan},gridNavigationCellContext:{gridNavigationCellParameters:{getRowIndex,setTabbableRow,getCurrentTabbableColumn:_getCurrentColumn,setCurrentTabbableColumn,setTabbableCell}},..._void1}=_ref25;const{index}=managedChildParameters;const{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:ocfic1},rovingTabIndexChildReturn,textContentReturn,pressParameters,...void2}=useListNavigationChild({rovingTabIndexChildParameters,managedChildParameters,rovingTabIndexChildContext,typeaheadNavigationChildContext,textContentParameters,refElementReturn});return{rovingTabIndexChildReturn,textContentReturn,pressParameters,hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:useStableCallback((focused,prev,e)=>{ocfic1===null||ocfic1===void 0?void 0:ocfic1(focused,prev,e);if(focused){setTabbableRow(getRowIndex(),e,false);setCurrentTabbableColumn(index,e);setTabbableCell(prev=>{if(prev!=null&&(prev<index||prev>index+colSpan)){return prev;}return index;},e,false);}})}};}var freeGlobal=typeof global=='object'&&global&&global.Object===Object&&global;var freeGlobal$1=freeGlobal;var freeSelf=typeof self=='object'&&self&&self.Object===Object&&self;var root=freeGlobal$1||freeSelf||Function('return this')();var root$1=root;var Symbol$1=root$1.Symbol;var Symbol$2=Symbol$1;var objectProto$5=Object.prototype;var hasOwnProperty$3=objectProto$5.hasOwnProperty;var nativeObjectToString$1=objectProto$5.toString;var symToStringTag$1=Symbol$2?Symbol$2.toStringTag:undefined;function getRawTag(value){var isOwn=hasOwnProperty$3.call(value,symToStringTag$1),tag=value[symToStringTag$1];try{value[symToStringTag$1]=undefined;var unmasked=true;}catch(e){}var result=nativeObjectToString$1.call(value);if(unmasked){if(isOwn){value[symToStringTag$1]=tag;}else{delete value[symToStringTag$1];}}return result;}var objectProto$4=Object.prototype;var nativeObjectToString=objectProto$4.toString;function objectToString(value){return nativeObjectToString.call(value);}var nullTag='[object Null]',undefinedTag='[object Undefined]';var symToStringTag=Symbol$2?Symbol$2.toStringTag:undefined;function baseGetTag(value){if(value==null){return value===undefined?undefinedTag:nullTag;}return symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value);}function isObjectLike(value){return value!=null&&typeof value=='object';}var symbolTag='[object Symbol]';function isSymbol(value){return typeof value=='symbol'||isObjectLike(value)&&baseGetTag(value)==symbolTag;}function arrayMap(array,iteratee){var index=-1,length=array==null?0:array.length,result=Array(length);while(++index<length){result[index]=iteratee(array[index],index,array);}return result;}var isArray=Array.isArray;var isArray$1=isArray;var reWhitespace=/\s/;function trimmedEndIndex(string){var index=string.length;while(index--&&reWhitespace.test(string.charAt(index))){}return index;}var reTrimStart=/^\s+/;function baseTrim(string){return string?string.slice(0,trimmedEndIndex(string)+1).replace(reTrimStart,''):string;}function isObject(value){var type=typeof value;return value!=null&&(type=='object'||type=='function');}var NAN=0/0;var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;var reIsBinary=/^0b[01]+$/i;var reIsOctal=/^0o[0-7]+$/i;var freeParseInt=parseInt;function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=baseTrim(value);var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}function identity$2(value){return value;}var asyncTag='[object AsyncFunction]',funcTag$1='[object Function]',genTag='[object GeneratorFunction]',proxyTag='[object Proxy]';function isFunction(value){if(!isObject(value)){return false;}var tag=baseGetTag(value);return tag==funcTag$1||tag==genTag||tag==asyncTag||tag==proxyTag;}function noop$1(){}function copyArray(source,array){var index=-1,length=source.length;array||(array=Array(length));while(++index<length){array[index]=source[index];}return array;}var MAX_SAFE_INTEGER$1=9007199254740991;var reIsUint=/^(?:0|[1-9]\d*)$/;function isIndex(value,length){var type=typeof value;length=length==null?MAX_SAFE_INTEGER$1:length;return!!length&&(type=='number'||type!='symbol'&&reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}var MAX_SAFE_INTEGER=9007199254740991;function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}var objectProto$3=Object.prototype;function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto$3;return value===proto;}function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}var argsTag$1='[object Arguments]';function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag$1;}var objectProto$2=Object.prototype;var hasOwnProperty$2=objectProto$2.hasOwnProperty;var propertyIsEnumerable=objectProto$2.propertyIsEnumerable;var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty$2.call(value,'callee')&&!propertyIsEnumerable.call(value,'callee');};var isArguments$1=isArguments;function stubFalse(){return false;}var freeExports$1=typeof exports=='object'&&exports&&!exports.nodeType&&exports;var freeModule$1=freeExports$1&&typeof module=='object'&&module&&!module.nodeType&&module;var moduleExports$1=freeModule$1&&freeModule$1.exports===freeExports$1;var Buffer=moduleExports$1?root$1.Buffer:undefined;var nativeIsBuffer=Buffer?Buffer.isBuffer:undefined;var isBuffer=nativeIsBuffer||stubFalse;var isBuffer$1=isBuffer;var argsTag='[object Arguments]',arrayTag='[object Array]',boolTag='[object Boolean]',dateTag='[object Date]',errorTag='[object Error]',funcTag='[object Function]',mapTag='[object Map]',numberTag='[object Number]',objectTag='[object Object]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',weakMapTag='[object WeakMap]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';var typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=true;typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=false;function baseIsTypedArray(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];}function baseUnary(func){return function(value){return func(value);};}var freeExports=typeof exports=='object'&&exports&&!exports.nodeType&&exports;var freeModule=freeExports&&typeof module=='object'&&module&&!module.nodeType&&module;var moduleExports=freeModule&&freeModule.exports===freeExports;var freeProcess=moduleExports&&freeGlobal$1.process;var nodeUtil=function(){try{var types=freeModule&&freeModule.require&&freeModule.require('util').types;if(types){return types;}return freeProcess&&freeProcess.binding&&freeProcess.binding('util');}catch(e){}}();var nodeUtil$1=nodeUtil;var nodeIsTypedArray=nodeUtil$1&&nodeUtil$1.isTypedArray;var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;var isTypedArray$1=isTypedArray;var objectProto$1=Object.prototype;var hasOwnProperty$1=objectProto$1.hasOwnProperty;function arrayLikeKeys(value,inherited){var isArr=isArray$1(value),isArg=!isArr&&isArguments$1(value),isBuff=!isArr&&!isArg&&isBuffer$1(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray$1(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value){if((inherited||hasOwnProperty$1.call(value,key))&&!(skipIndexes&&(key=='length'||isBuff&&(key=='offset'||key=='parent')||isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||isIndex(key,length)))){result.push(key);}}return result;}function overArg(func,transform){return function(arg){return func(transform(arg));};}var nativeKeys=overArg(Object.keys,Object);var nativeKeys$1=nativeKeys;var objectProto=Object.prototype;var hasOwnProperty=objectProto.hasOwnProperty;function baseKeys(object){if(!isPrototype(object)){return nativeKeys$1(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);}var now=function(){return root$1.Date.now();};var now$1=now;var FUNC_ERROR_TEXT='Expected a function';var nativeMax=Math.max,nativeMin=Math.min;function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=false,maxing=false,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}wait=toNumber(wait)||0;if(isObject(options)){leading=!!options.leading;maxing='maxWait'in options;maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;trailing='trailing'in options?!!options.trailing:trailing;}function invokeFunc(time){var args=lastArgs,thisArg=lastThis;lastArgs=lastThis=undefined;lastInvokeTime=time;result=func.apply(thisArg,args);return result;}function leadingEdge(time){lastInvokeTime=time;timerId=setTimeout(timerExpired,wait);return leading?invokeFunc(time):result;}function remainingWait(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime,timeWaiting=wait-timeSinceLastCall;return maxing?nativeMin(timeWaiting,maxWait-timeSinceLastInvoke):timeWaiting;}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime;return lastCallTime===undefined||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;}function timerExpired(){var time=now$1();if(shouldInvoke(time)){return trailingEdge(time);}timerId=setTimeout(timerExpired,remainingWait(time));}function trailingEdge(time){timerId=undefined;if(trailing&&lastArgs){return invokeFunc(time);}lastArgs=lastThis=undefined;return result;}function cancel(){if(timerId!==undefined){clearTimeout(timerId);}lastInvokeTime=0;lastArgs=lastCallTime=lastThis=timerId=undefined;}function flush(){return timerId===undefined?result:trailingEdge(now$1());}function debounced(){var time=now$1(),isInvoking=shouldInvoke(time);lastArgs=arguments;lastThis=this;lastCallTime=time;if(isInvoking){if(timerId===undefined){return leadingEdge(lastCallTime);}if(maxing){clearTimeout(timerId);timerId=setTimeout(timerExpired,wait);return invokeFunc(lastCallTime);}}if(timerId===undefined){timerId=setTimeout(timerExpired,wait);}return result;}debounced.cancel=cancel;debounced.flush=flush;return debounced;}function baseValues(object,props){return arrayMap(props,function(key){return object[key];});}function values(object){return object==null?[]:baseValues(object,keys(object));}var nativeFloor=Math.floor,nativeRandom=Math.random;function baseRandom(lower,upper){return lower+nativeFloor(nativeRandom()*(upper-lower+1));}function shuffleSelf(array,size){var index=-1,length=array.length,lastIndex=length-1;size=size===undefined?length:size;while(++index<size){var rand=baseRandom(index,lastIndex),value=array[rand];array[rand]=array[index];array[index]=value;}array.length=size;return array;}function arrayShuffle(array){return shuffleSelf(copyArray(array));}function baseShuffle(collection){return shuffleSelf(values(collection));}function shuffle(collection){var func=isArray$1(collection)?arrayShuffle:baseShuffle;return func(collection);}function useSingleSelection(_ref26){let{managedChildrenReturn:{getChildren},rovingTabIndexReturn:{setTabbableIndex},singleSelectionParameters:{onSelectedIndexChange:onSelectedIndexChange_U,initiallySelectedIndex}}=_ref26;const onSelectedIndexChange=useStableCallback(onSelectedIndexChange_U!==null&&onSelectedIndexChange_U!==void 0?onSelectedIndexChange_U:noop$1);const getSelectedAt=T$1(m=>{return m.getSelected();},[]);const setSelectedAt=T$1((m,t,newSelectedIndex,prevSelectedIndex)=>{if(m.hidden){console.assert(false);}const directionComparison=newSelectedIndex==m.index?prevSelectedIndex:newSelectedIndex;const direction=directionComparison==null?null:m.index-directionComparison;if(newSelectedIndex==null)console.assert(t==false);if(t)console.assert(newSelectedIndex===m.index);m.setLocalSelected(t,direction);},[]);const isSelectedValid=T$1(m=>{return!m.hidden;},[]);const{changeIndex:changeSelectedIndex,getCurrentIndex:getSelectedIndex}=useChildrenFlag({getChildren,onIndexChange:null,initialIndex:initiallySelectedIndex,getAt:getSelectedAt,setAt:setSelectedAt,isValid:isSelectedValid,closestFit:false});return{singleSelectionReturn:useStableObject({getSelectedIndex,changeSelectedIndex}),singleSelectionContext:useStableObject({getSelectedIndex,onSelectedIndexChange:onSelectedIndexChange}),childrenHaveFocusParameters:{onCompositeFocusChange:useStableCallback((anyFocused,prev,reason)=>{if(!anyFocused){const selectedIndex=getSelectedIndex();if(selectedIndex!=null)setTabbableIndex(selectedIndex,reason,false);}})}};}function useSingleSelectionChild(args){var _ariaPropName$split;const{singleSelectionContext:{getSelectedIndex,onSelectedIndexChange},singleSelectionChildParameters:{ariaPropName,selectionMode,disabled},managedChildParameters:{index}}=args;useEnsureStability("useSingleSelectionChild",getSelectedIndex,onSelectedIndexChange);const getDisabled=useStableGetter(disabled);const[localSelected,setLocalSelected,getLocalSelected]=useState(getSelectedIndex()==index);const[direction,setDirection,getDirection]=useState(getSelectedIndex()==null?null:getSelectedIndex()-index);const onCurrentFocusedInnerChanged=useStableCallback((focused,_prev,e)=>{if(selectionMode=='focus'&&focused){onSelectedIndexChange===null||onSelectedIndexChange===void 0?void 0:onSelectedIndexChange(index,e);}});const onPressSync=useStableCallback(e=>{if(selectionMode=="disabled")return;if(!disabled)onSelectedIndexChange===null||onSelectedIndexChange===void 0?void 0:onSelectedIndexChange(index,e);});const propParts=(_ariaPropName$split=ariaPropName===null||ariaPropName===void 0?void 0:ariaPropName.split("-"))!==null&&_ariaPropName$split!==void 0?_ariaPropName$split:[];return{managedChildParameters:{setLocalSelected:useStableCallback((selected,direction)=>{setLocalSelected(selected);setDirection(direction);})},singleSelectionChildReturn:{selected:localSelected,setThisOneSelected:useStableCallback(event=>{console.assert(!getDisabled());onSelectedIndexChange===null||onSelectedIndexChange===void 0?void 0:onSelectedIndexChange(index,event);}),getSelectedOffset:getDirection,selectedOffset:direction,getSelected:getLocalSelected,propsUnstable:ariaPropName==null||selectionMode=="disabled"?{}:{["".concat(propParts[0],"-").concat(propParts[1])]:localSelected?propParts[1]=="current"?"".concat(propParts[2]):"true":"false"}},pressParameters:{onPressSync},hasCurrentFocusParameters:{onCurrentFocusedInnerChanged}};}function useSingleSelectionDeclarative(_ref27){let{singleSelectionReturn:{changeSelectedIndex},singleSelectionDeclarativeParameters:{selectedIndex}}=_ref27;h(()=>{changeSelectedIndex(selectedIndex);},[selectedIndex]);}function useGridNavigationSingleSelection(_ref28){let{gridNavigationParameters,linearNavigationParameters,rovingTabIndexParameters,managedChildrenReturn,typeaheadNavigationParameters,singleSelectionParameters,..._void2}=_ref28;const gnr=useGridNavigation({gridNavigationParameters,linearNavigationParameters,managedChildrenReturn,rovingTabIndexParameters,typeaheadNavigationParameters});const{rovingTabIndexReturn}=gnr;const ssr=useSingleSelection({managedChildrenReturn,rovingTabIndexReturn,singleSelectionParameters});return{...gnr,...ssr};}function useGridNavigationSingleSelectionRow(_ref29){let{rowAsChildOfGridParameters,rowAsParentOfCellsParameters,..._void1}=_ref29;const{managedChildParameters,hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:ocfic2,..._void3},singleSelectionChildReturn}=useSingleSelectionChild(rowAsChildOfGridParameters);const{rowAsChildOfGridReturn:{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:ocfic1,..._void2},gridNavigationRowParameters,rovingTabIndexChildReturn,textContentReturn,pressParameters,...void4},rowAsParentOfCellsReturn}=useGridNavigationRow({rowAsChildOfGridParameters,rowAsParentOfCellsParameters});const onCurrentFocusedInnerChanged=useStableCallback((focused,prevFocused,e)=>{ocfic1===null||ocfic1===void 0?void 0:ocfic1(focused,prevFocused,e);ocfic2===null||ocfic2===void 0?void 0:ocfic2(focused,prevFocused,e);});return{rowAsChildOfGridReturn:{pressParameters,textContentReturn,managedChildParameters,hasCurrentFocusParameters:{onCurrentFocusedInnerChanged},gridNavigationRowParameters,rovingTabIndexChildReturn,singleSelectionChildReturn},rowAsParentOfCellsReturn};}function useGridNavigationSingleSelectionCell(p){return useGridNavigationCell(p);}function useForceUpdate(){const[,set]=p(0);return _(()=>set(i=>++i)).current;}function useRearrangeableChildren(_ref30){let{rearrangeableChildrenParameters:{getIndex,onRearranged}}=_ref30;const mangleMap=_(new Map());const demangleMap=_(new Map());const indexMangler=T$1(n=>{var _mangleMap$current$ge;return(_mangleMap$current$ge=mangleMap.current.get(n))!==null&&_mangleMap$current$ge!==void 0?_mangleMap$current$ge:n;},[]);const indexDemangler=T$1(n=>{var _demangleMap$current$;return(_demangleMap$current$=demangleMap.current.get(n))!==null&&_demangleMap$current$!==void 0?_demangleMap$current$:n;},[]);const onRearrangedGetter=useStableGetter(onRearranged);const shuffle$1=T$1(managedRows=>{const shuffledRows=shuffle(managedRows.arraySlice());return rearrange(shuffledRows);},[]);const[getForceUpdate,setForceUpdate]=usePassiveState(null,returnNull);const rearrange=T$1(sortedRows=>{var _onRearrangedGetter,_getForceUpdate;mangleMap.current.clear();demangleMap.current.clear();for(let indexAsSorted=0;indexAsSorted<sortedRows.length;++indexAsSorted){const indexAsUnsorted=sortedRows[indexAsSorted].index;mangleMap.current.set(indexAsUnsorted,indexAsSorted);demangleMap.current.set(indexAsSorted,indexAsUnsorted);}(_onRearrangedGetter=onRearrangedGetter())===null||_onRearrangedGetter===void 0?void 0:_onRearrangedGetter();(_getForceUpdate=getForceUpdate())===null||_getForceUpdate===void 0?void 0:_getForceUpdate();},[]);const useRearrangedChildren=T$1(children=>{console.assert(Array.isArray(children));const forceUpdate=useForceUpdate();s(()=>{setForceUpdate(_prev=>forceUpdate);},[forceUpdate]);return children.slice().map(child=>({child,mangledIndex:indexMangler(getIndex(child)),demangledIndex:getIndex(child)})).sort((lhs,rhs)=>{return lhs.mangledIndex-rhs.mangledIndex;}).map(_ref31=>{let{child,mangledIndex,demangledIndex}=_ref31;return v$1(child.type,{...child.props,key:demangledIndex,"data-mangled-index":mangledIndex,"data-unmangled-index":demangledIndex});});},[]);const toJsonArray=T$1((managedRows,transform)=>{return managedRows.arraySlice().map(child=>{if(transform)return transform(child);else return child.getSortValue();});},[]);return{rearrangeableChildrenReturn:{indexMangler,indexDemangler,mangleMap,demangleMap,rearrange,shuffle:shuffle$1,useRearrangedChildren,toJsonArray}};}function useSortableChildren(_ref32){let{rearrangeableChildrenParameters,sortableChildrenParameters:{compare:userCompare}}=_ref32;const getCompare=useStableGetter(userCompare!==null&&userCompare!==void 0?userCompare:defaultCompare);const{rearrangeableChildrenReturn}=useRearrangeableChildren({rearrangeableChildrenParameters});const{rearrange}=rearrangeableChildrenReturn;const sort=T$1((managedRows,direction)=>{const compare=getCompare();const sortedRows=compare?managedRows.arraySlice().sort((lhsRow,rhsRow)=>{const lhsValue=lhsRow;const rhsValue=rhsRow;const result=compare(lhsValue,rhsValue);if(direction[0]=="d")return-result;return result;}):managedRows.arraySlice();return rearrange(sortedRows);},[]);return{sortableChildrenReturn:{sort},rearrangeableChildrenReturn};}function defaultCompare(lhs,rhs){return compare1(lhs===null||lhs===void 0?void 0:lhs.getSortValue(),rhs===null||rhs===void 0?void 0:rhs.getSortValue());function compare1(lhs,rhs){if(lhs==null||rhs==null){if(lhs==null)return-1;if(rhs==null)return 1;}return lhs-rhs;}}function useGridNavigationSingleSelectionSortable(_ref33){let{rearrangeableChildrenParameters,sortableChildrenParameters,linearNavigationParameters,...gridNavigationSingleSelectionParameters}=_ref33;const{...scr}=useSortableChildren({rearrangeableChildrenParameters,sortableChildrenParameters});const{rearrangeableChildrenReturn:{indexDemangler,indexMangler}}=scr;const gnr=useGridNavigationSingleSelection({linearNavigationParameters:{indexDemangler,indexMangler,...linearNavigationParameters},...gridNavigationSingleSelectionParameters});return{...gnr,...scr};}function useListNavigationSingleSelection(_ref34){let{linearNavigationParameters,rovingTabIndexParameters,typeaheadNavigationParameters,singleSelectionParameters,managedChildrenReturn,..._void3}=_ref34;const lnr=useListNavigation({linearNavigationParameters,rovingTabIndexParameters,typeaheadNavigationParameters,managedChildrenReturn});const{rovingTabIndexReturn}=lnr;const ssr=useSingleSelection({rovingTabIndexReturn,managedChildrenReturn,singleSelectionParameters});return{...ssr,...lnr};}function useListNavigationSingleSelectionChild(_ref35){let{managedChildParameters:{index,..._void5},rovingTabIndexChildParameters:{hidden,...void7},singleSelectionChildParameters,singleSelectionContext,rovingTabIndexChildContext,typeaheadNavigationChildContext,refElementReturn,textContentParameters,..._void1}=_ref35;const{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:ocfic2,..._void3},pressParameters:{onPressSync},...sscr}=useSingleSelectionChild({managedChildParameters:{index},singleSelectionChildParameters,singleSelectionContext});const{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:ocfic1,..._void6},pressParameters:{excludeSpace},...lncr}=useListNavigationChild({managedChildParameters:{index},rovingTabIndexChildParameters:{hidden},rovingTabIndexChildContext,typeaheadNavigationChildContext,refElementReturn,textContentParameters});return{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:useStableCallback((focused,previouslyFocused,e)=>{ocfic1===null||ocfic1===void 0?void 0:ocfic1(focused,previouslyFocused,e);ocfic2===null||ocfic2===void 0?void 0:ocfic2(focused,previouslyFocused,e);})},pressParameters:{onPressSync,excludeSpace},...sscr,...lncr};}function usePaginatedChildren(_ref36){let{managedChildrenReturn:{getChildren},linearNavigationParameters:{indexDemangler},paginatedChildrenParameters:{paginationMax,paginationMin}}=_ref36;const[childCount,setChildCount]=useState(null);const parentIsPaginated=paginationMin!=null||paginationMax!=null;const lastPagination=_({paginationMax:null,paginationMin:null});const refreshPagination=T$1((paginationMin,paginationMax)=>{const childMax=getChildren().getHighestIndex()+1;for(let i=0;i<=childMax;++i){var _getChildren$getAt,_getChildren$getAt2,_getChildren$getAt3;const visible=i>=(paginationMin!==null&&paginationMin!==void 0?paginationMin:-Infinity)&&i<(paginationMax!==null&&paginationMax!==void 0?paginationMax:Infinity);(_getChildren$getAt=getChildren().getAt(indexDemangler(i)))===null||_getChildren$getAt===void 0?void 0:_getChildren$getAt.setParentIsPaginated(parentIsPaginated);(_getChildren$getAt2=getChildren().getAt(indexDemangler(i)))===null||_getChildren$getAt2===void 0?void 0:_getChildren$getAt2.setPaginationVisible(visible);if(visible)(_getChildren$getAt3=getChildren().getAt(indexDemangler(i)))===null||_getChildren$getAt3===void 0?void 0:_getChildren$getAt3.setChildCountIfPaginated(getChildren().getHighestIndex()+1);}},[]);s(()=>{refreshPagination(paginationMin,paginationMax);lastPagination.current.paginationMax=paginationMax;lastPagination.current.paginationMin=paginationMin;},[paginationMax,paginationMin]);const p=_(parentIsPaginated);p.current=parentIsPaginated;return{context:useStableObject({paginatedChildContext:useStableObject({getDefaultIsPaginated:T$1(()=>{return p.current;},[]),getDefaultPaginationVisible:T$1(i=>{return parentIsPaginated?i>=(paginationMin!==null&&paginationMin!==void 0?paginationMin:-Infinity)&&i<(paginationMax!==null&&paginationMax!==void 0?paginationMax:Infinity):true;},[])})}),managedChildrenParameters:{onChildCountChange:useStableCallback(count=>{if(paginationMax!=null||paginationMin!=null){setChildCount(count);const min=paginationMin!==null&&paginationMin!==void 0?paginationMin:0;const max=paginationMax!==null&&paginationMax!==void 0?paginationMax:count;for(let i=min;i<max;++i){var _getChildren$getAt4,_getChildren$getAt5;(_getChildren$getAt4=getChildren().getAt(i))===null||_getChildren$getAt4===void 0?void 0:_getChildren$getAt4.setParentIsPaginated(parentIsPaginated);(_getChildren$getAt5=getChildren().getAt(i))===null||_getChildren$getAt5===void 0?void 0:_getChildren$getAt5.setChildCountIfPaginated(count);}}else{setChildCount(null);}})},paginatedChildrenReturn:{refreshPagination,childCount}};}function usePaginatedChild(_ref37){let{managedChildParameters:{index},context:{paginatedChildContext:{getDefaultPaginationVisible,getDefaultIsPaginated}}}=_ref37;const[parentIsPaginated,setParentIsPaginated]=useState(getDefaultIsPaginated());const[childCountIfPaginated,setChildCountIfPaginated]=useState(null);const[paginatedVisible,setPaginatedVisible]=useState(getDefaultPaginationVisible(index));return{props:!parentIsPaginated?{}:{"aria-setsize":childCountIfPaginated!==null&&childCountIfPaginated!==void 0?childCountIfPaginated:undefined,"aria-posinset":index+1},paginatedChildReturn:{paginatedVisible,isPaginated:parentIsPaginated,hideBecausePaginated:parentIsPaginated?!paginatedVisible:false},managedChildParameters:{setPaginationVisible:setPaginatedVisible,setChildCountIfPaginated,setParentIsPaginated}};}function useStaggeredChildren(_ref38){let{managedChildrenReturn:{getChildren},staggeredChildrenParameters:{staggered}}=_ref38;const[currentlyStaggering,setCurrentlyStaggering]=useState(staggered);const timeoutHandle=_(-1);const resetEmergencyTimeout=T$1(()=>{if(timeoutHandle.current!=-1)clearTimeout(timeoutHandle.current);timeoutHandle.current=setTimeout(()=>{timeoutHandle.current=-1;setDisplayedStaggerIndex(c=>{var _getTargetStaggerInde;return Math.min((_getTargetStaggerInde=getTargetStaggerIndex())!==null&&_getTargetStaggerInde!==void 0?_getTargetStaggerInde:0,(c!==null&&c!==void 0?c:0)+1);});},50);},[]);const[getTargetStaggerIndex,setTargetStaggerIndex]=usePassiveState(T$1((newIndex,prevIndex)=>{for(let i=prevIndex!==null&&prevIndex!==void 0?prevIndex:0;i<(newIndex!==null&&newIndex!==void 0?newIndex:0);++i){var _getChildren$getAt6;(_getChildren$getAt6=getChildren().getAt(i))===null||_getChildren$getAt6===void 0?void 0:_getChildren$getAt6.setParentIsStaggered(parentIsStaggered);}if(timeoutHandle.current==-1){resetEmergencyTimeout();setDisplayedStaggerIndex(c=>Math.min(newIndex!==null&&newIndex!==void 0?newIndex:0,(c!==null&&c!==void 0?c:0)+1));}},[]),returnNull);const[getDisplayedStaggerIndex,setDisplayedStaggerIndex]=usePassiveState(T$1((newIndex,prevIndex)=>{var _getTargetStaggerInde2;if(newIndex==null){return;}setCurrentlyStaggering(newIndex>=((_getTargetStaggerInde2=getTargetStaggerIndex())!==null&&_getTargetStaggerInde2!==void 0?_getTargetStaggerInde2:0));for(let i=prevIndex!==null&&prevIndex!==void 0?prevIndex:0;i<newIndex;++i){var _getChildren$getAt7;(_getChildren$getAt7=getChildren().getAt(i))===null||_getChildren$getAt7===void 0?void 0:_getChildren$getAt7.setStaggeredVisible(true);}resetEmergencyTimeout();},[]),returnNull);const parentIsStaggered=!!staggered;const childCallsThisToTellTheParentToMountTheNextOne=T$1(index=>{setDisplayedStaggerIndex(s=>{var _getTargetStaggerInde3;return Math.min((_getTargetStaggerInde3=getTargetStaggerIndex())!==null&&_getTargetStaggerInde3!==void 0?_getTargetStaggerInde3:0,1+Math.max(s!==null&&s!==void 0?s:0,index+1));});},[]);s(()=>{getChildren().forEach(child=>child.setParentIsStaggered(parentIsStaggered));},[parentIsStaggered]);const childCallsThisToTellTheParentTheHighestIndex=T$1(mountedIndex=>{setTargetStaggerIndex(i=>Math.max(i!==null&&i!==void 0?i:0,1+mountedIndex));},[]);const s$1=_(parentIsStaggered);s$1.current=parentIsStaggered;return{staggeredChildrenReturn:{stillStaggering:currentlyStaggering},context:useStableObject({staggeredChildContext:useStableObject({childCallsThisToTellTheParentToMountTheNextOne,childCallsThisToTellTheParentTheHighestIndex,getDefaultIsStaggered:T$1(()=>{return parentIsStaggered;},[]),getDefaultStaggeredVisible:T$1(i=>{if(parentIsStaggered){const staggerIndex=getDisplayedStaggerIndex();if(staggerIndex==null)return false;return i<staggerIndex;}else{return true;}},[])})})};}function useStaggeredChild(_ref39){let{managedChildParameters:{index},context:{staggeredChildContext:{childCallsThisToTellTheParentTheHighestIndex,getDefaultIsStaggered,getDefaultStaggeredVisible,childCallsThisToTellTheParentToMountTheNextOne}}}=_ref39;const[parentIsStaggered,setParentIsStaggered]=useState(getDefaultIsStaggered());const[staggeredVisible,setStaggeredVisible]=useState(getDefaultStaggeredVisible(index));s(()=>{childCallsThisToTellTheParentTheHighestIndex(index);},[index]);h(()=>{if(parentIsStaggered&&staggeredVisible)childCallsThisToTellTheParentToMountTheNextOne(index);},[index,parentIsStaggered&&staggeredVisible]);return{props:!parentIsStaggered?{}:{"aria-busy":(!staggeredVisible).toString()},staggeredChildReturn:{staggeredVisible,isStaggered:parentIsStaggered,hideBecauseStaggered:parentIsStaggered?!staggeredVisible:false},managedChildParameters:{setStaggeredVisible:setStaggeredVisible,setParentIsStaggered}};}function useChildrenHaveFocus(args){const{childrenHaveFocusParameters:{onCompositeFocusChange}}=args;const[getAnyFocused,setAnyFocused]=usePassiveState(onCompositeFocusChange,returnFalse,runImmediately);const[_getFocusCount,setFocusCount]=usePassiveState(useStableCallback((anyFocused,anyPreviouslyFocused,e)=>{console.assert(anyFocused>=0&&anyFocused<=1);setAnyFocused(!!(anyFocused&&!anyPreviouslyFocused),e);}));return{childrenHaveFocusReturn:{getAnyFocused},childrenHaveFocusChildContext:useStableObject({childrenHaveFocusChildParameters:useStableObject({setFocusCount})})};}function useChildrenHaveFocusChild(_ref40){let{childrenHaveFocusChildContext:{childrenHaveFocusChildParameters:{setFocusCount}}}=_ref40;return{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:useStableCallback((focused,prev,e)=>{if(focused){setFocusCount(p=>(p!==null&&p!==void 0?p:0)+1,e);}else if(!focused&&prev){setFocusCount(p=>(p!==null&&p!==void 0?p:0)-1,e);}})}};}function useHasCurrentFocus(args){const{hasCurrentFocusParameters:{onCurrentFocusedChanged:onFocusedChanged,onCurrentFocusedInnerChanged:onFocusedInnerChanged},refElementReturn:{getElement}}=args;useEnsureStability("useHasCurrentFocus",onFocusedChanged,onFocusedInnerChanged,getElement);const[getFocused,setFocused]=usePassiveState(onFocusedChanged,returnFalse,runImmediately);const[getFocusedInner,setFocusedInner]=usePassiveState(onFocusedInnerChanged,returnFalse,runImmediately);const onFocusIn=T$1(e=>{setFocusedInner(true,e);setFocused(e.target==getElement(),e);},[]);const onFocusOut=T$1(e=>{setFocusedInner(false,e);setFocused(false,e);},[]);h(()=>{return()=>{setFocused(false);setFocusedInner(false);};},[]);const propsStable=_({onfocusin:onFocusIn,onfocusout:onFocusOut});h(()=>{return()=>{setFocused(false);setFocusedInner(false);};},[]);return{hasCurrentFocusReturn:{propsStable:propsStable.current,getCurrentFocused:getFocused,getCurrentFocusedInner:getFocusedInner}};}function useCompleteGridNavigation(_ref41){let{gridNavigationParameters,linearNavigationParameters,rovingTabIndexParameters,singleSelectionParameters,typeaheadNavigationParameters,sortableChildrenParameters,rearrangeableChildrenParameters,paginatedChildrenParameters,staggeredChildrenParameters}=_ref41;const getChildren=T$1(()=>managedChildrenReturn.getChildren(),[]);const getHighestChildIndex=T$1(()=>getChildren().getHighestIndex(),[]);const isValid=T$1(i=>{const child=getChildren().getAt(i);if(child==null)return false;if(child.hidden)return false;return true;},[]);const{childrenHaveFocusParameters,managedChildrenParameters,rovingTabIndexChildContext,singleSelectionContext,typeaheadNavigationChildContext,gridNavigationRowContext,rearrangeableChildrenReturn,...gridNavigationSingleSelectionReturn}=useGridNavigationSingleSelectionSortable({gridNavigationParameters,linearNavigationParameters:{getHighestIndex:getHighestChildIndex,isValid,...linearNavigationParameters},managedChildrenReturn:{getChildren},rovingTabIndexParameters:{initiallyTabbedIndex:singleSelectionParameters.initiallySelectedIndex,...rovingTabIndexParameters},singleSelectionParameters,typeaheadNavigationParameters:{isValid,...typeaheadNavigationParameters},rearrangeableChildrenParameters:{onRearranged:useStableCallback(()=>{refreshPagination(paginatedChildrenParameters.paginationMin,paginatedChildrenParameters.paginationMax);}),...rearrangeableChildrenParameters},sortableChildrenParameters});const{linearNavigationReturn,typeaheadNavigationReturn}=gridNavigationSingleSelectionReturn;const{indexDemangler}=rearrangeableChildrenReturn;const{childrenHaveFocusChildContext,childrenHaveFocusReturn}=useChildrenHaveFocus({childrenHaveFocusParameters});const mcr=useManagedChildren({managedChildrenParameters:{onChildCountChange:useStableCallback(c=>onChildCountChange(c)),...managedChildrenParameters}});const{context:{managedChildContext},managedChildrenReturn}=mcr;const{paginatedChildrenReturn,paginatedChildrenReturn:{refreshPagination},managedChildrenParameters:{onChildCountChange},context:{paginatedChildContext}}=usePaginatedChildren({managedChildrenReturn,paginatedChildrenParameters,linearNavigationParameters:{indexDemangler}});const{context:{staggeredChildContext},staggeredChildrenReturn}=useStaggeredChildren({managedChildrenReturn,staggeredChildrenParameters});const props=useMergedProps(linearNavigationReturn.propsStable,typeaheadNavigationReturn.propsStable);const context=useStableObject({singleSelectionContext,managedChildContext,rovingTabIndexChildContext,typeaheadNavigationChildContext,childrenHaveFocusChildContext,gridNavigationRowContext,paginatedChildContext,staggeredChildContext});return{context,props,managedChildrenReturn,rearrangeableChildrenReturn,staggeredChildrenReturn,...gridNavigationSingleSelectionReturn,childrenHaveFocusReturn,paginatedChildrenReturn};}function useCompleteGridNavigationRow(_ref42){let{rowAsChildOfGridParameters:{managedChildParameters,context:{childrenHaveFocusChildContext,gridNavigationRowContext,managedChildContext:mcc1,rovingTabIndexChildContext,singleSelectionContext,typeaheadNavigationChildContext,staggeredChildContext,paginatedChildContext},completeGridNavigationRowParameters,singleSelectionChildParameters,rovingTabIndexChildParameters,rovingTabIndexChildParameters:{hidden},textContentParameters,...rowAsChildOfGridParameters},rowAsParentOfCellsParameters:{linearNavigationParameters,rovingTabIndexParameters,typeaheadNavigationParameters,...rowAsParentOfCellsParameters}}=_ref42;const{index}=managedChildParameters;const{managedChildParameters:{setChildCountIfPaginated,setPaginationVisible,setParentIsPaginated},paginatedChildReturn:{paginatedVisible,isPaginated,hideBecausePaginated},props:paginationProps}=usePaginatedChild({managedChildParameters:{index},context:{paginatedChildContext}});const{managedChildParameters:{setParentIsStaggered,setStaggeredVisible},staggeredChildReturn:{staggeredVisible,isStaggered,hideBecauseStaggered},props:staggeredProps}=useStaggeredChild({managedChildParameters:{index},context:{staggeredChildContext}});rovingTabIndexChildParameters.hidden||(rovingTabIndexChildParameters.hidden=hideBecausePaginated||hideBecauseStaggered);singleSelectionChildParameters.disabled||(singleSelectionChildParameters.disabled=rovingTabIndexChildParameters.hidden);const getChildren=T$1(()=>managedChildrenReturn.getChildren(),[]);const getHighestChildIndex=T$1(()=>getChildren().getHighestIndex(),[]);const isValid=T$1(i=>{const child=getChildren().getAt(i);if(child==null)return false;if(child.hidden)return false;return true;},[]);const{refElementReturn}=useRefElement({refElementParameters:{}});const r=useGridNavigationSingleSelectionRow({rowAsParentOfCellsParameters:{...rowAsParentOfCellsParameters,rovingTabIndexParameters:{initiallyTabbedIndex:0,...rovingTabIndexParameters},typeaheadNavigationParameters:{isValid,...typeaheadNavigationParameters},linearNavigationParameters:{isValid,getHighestIndex:getHighestChildIndex,pageNavigationSize:0,indexDemangler:identity$2,indexMangler:identity$2,...linearNavigationParameters},managedChildrenReturn:{getChildren}},rowAsChildOfGridParameters:{...rowAsChildOfGridParameters,refElementReturn,rovingTabIndexChildParameters,gridNavigationRowContext,rovingTabIndexChildContext,singleSelectionContext,typeaheadNavigationChildContext,singleSelectionChildParameters,managedChildParameters,textContentParameters:{hidden,...textContentParameters},managedChildrenReturn:{getChildren}}});const{rowAsChildOfGridReturn,rowAsParentOfCellsReturn}=r;const{context:{managedChildContext},managedChildrenReturn}=useManagedChildren({managedChildrenParameters:r.rowAsParentOfCellsReturn.managedChildrenParameters});const{getElement}=refElementReturn;const baseInfo={getElement,setTabbable:r.rowAsChildOfGridReturn.rovingTabIndexChildReturn.setTabbable,getTabbable:r.rowAsChildOfGridReturn.rovingTabIndexChildReturn.getTabbable,tabbable:r.rowAsChildOfGridReturn.rovingTabIndexChildReturn.tabbable,index:managedChildParameters.index,hidden:rovingTabIndexChildParameters.hidden,selected:r.rowAsChildOfGridReturn.singleSelectionChildReturn.selected,focusSelf:r.rowAsChildOfGridReturn.gridNavigationRowParameters.focusSelf,getSelected:r.rowAsChildOfGridReturn.singleSelectionChildReturn.getSelected,setLocalSelected:r.rowAsChildOfGridReturn.managedChildParameters.setLocalSelected,disabled:singleSelectionChildParameters.disabled,setTabbableColumnIndex:r.rowAsChildOfGridReturn.gridNavigationRowParameters.setTabbableColumnIndex,getSortValue:rowAsChildOfGridParameters.sortableChildParameters.getSortValue,setPaginationVisible,setChildCountIfPaginated:setChildCountIfPaginated,setParentIsPaginated,setParentIsStaggered,setStaggeredVisible};const{managedChildReturn}=useManagedChild({context:{managedChildContext:mcc1},managedChildParameters:{index}},{...baseInfo,...completeGridNavigationRowParameters});const context=useStableObject({managedChildContext,rovingTabIndexChildContext:r.rowAsParentOfCellsReturn.rovingTabIndexChildContext,typeaheadNavigationChildContext:r.rowAsParentOfCellsReturn.typeaheadNavigationChildContext,gridNavigationCellContext:r.rowAsParentOfCellsReturn.gridNavigationCellContext});const{hasCurrentFocusParameters}=useChildrenHaveFocusChild({childrenHaveFocusChildContext});const{hasCurrentFocusReturn}=useHasCurrentFocus({refElementReturn,hasCurrentFocusParameters:{...hasCurrentFocusParameters,onCurrentFocusedChanged:null}});const props=useMergedProps(refElementReturn.propsStable,r.rowAsChildOfGridReturn.singleSelectionChildReturn.propsUnstable,r.rowAsParentOfCellsReturn.linearNavigationReturn.propsStable,r.rowAsParentOfCellsReturn.typeaheadNavigationReturn.propsStable,hasCurrentFocusReturn.propsStable,paginationProps,staggeredProps);return{context,props,rowAsParentOfCellsReturn:{...rowAsParentOfCellsReturn,managedChildrenReturn},rowAsChildOfGridReturn:{...rowAsChildOfGridReturn,managedChildReturn,staggeredChildReturn:{isStaggered,staggeredVisible,hideBecauseStaggered},paginatedChildReturn:{isPaginated,paginatedVisible,hideBecausePaginated}},hasCurrentFocusReturn};}function useCompleteGridNavigationCell(_ref43){let{gridNavigationCellParameters,managedChildParameters,context:{gridNavigationCellContext,managedChildContext,rovingTabIndexChildContext,typeaheadNavigationChildContext},rovingTabIndexChildParameters:{hidden},rovingTabIndexChildParameters,textContentParameters,completeGridNavigationCellParameters:{focusSelf,...completeGridNavigationCellParameters}}=_ref43;const{index}=managedChildParameters;const{refElementReturn}=useRefElement({refElementParameters:{}});const{hasCurrentFocusParameters,rovingTabIndexChildReturn,textContentReturn,pressParameters}=useGridNavigationSingleSelectionCell({gridNavigationCellContext,gridNavigationCellParameters,managedChildParameters,rovingTabIndexChildContext,typeaheadNavigationChildContext,rovingTabIndexChildParameters,refElementReturn,textContentParameters:{hidden,...textContentParameters}});const{hasCurrentFocusReturn}=useHasCurrentFocus({hasCurrentFocusParameters:{onCurrentFocusedChanged:null,...hasCurrentFocusParameters},refElementReturn});const baseInfo={focusSelf,getElement:refElementReturn.getElement,hidden:rovingTabIndexChildParameters.hidden,index:managedChildParameters.index,getTabbable:rovingTabIndexChildReturn.getTabbable,setTabbable:rovingTabIndexChildReturn.setTabbable,tabbable:rovingTabIndexChildReturn.tabbable};const{managedChildReturn}=useManagedChild({context:{managedChildContext},managedChildParameters:{index}},{...baseInfo,...completeGridNavigationCellParameters});const props=useMergedProps(refElementReturn.propsStable,rovingTabIndexChildReturn.propsUnstable,hasCurrentFocusReturn.propsStable);return{props,refElementReturn,rovingTabIndexChildReturn,pressParameters,hasCurrentFocusReturn,managedChildReturn,textContentReturn};}function useCompleteListNavigation(_ref44){let{linearNavigationParameters,rearrangeableChildrenParameters,sortableChildrenParameters,typeaheadNavigationParameters,rovingTabIndexParameters,singleSelectionParameters,paginatedChildrenParameters,staggeredChildrenParameters,...completeListNavigationParameters}=_ref44;const{initiallySelectedIndex}=singleSelectionParameters;const getChildren=T$1(()=>managedChildrenReturn.getChildren(),[]);const getHighestChildIndex=T$1(()=>getChildren().getHighestIndex(),[]);const isValid=T$1(i=>{const child=getChildren().getAt(i);if(!child)return false;if(child.hidden)return false;return true;},[]);const{rearrangeableChildrenReturn:{indexDemangler,indexMangler,...rearrangeableChildrenReturn},sortableChildrenReturn}=useSortableChildren({rearrangeableChildrenParameters:{onRearranged:useStableCallback(()=>{refreshPagination(paginatedChildrenParameters.paginationMin,paginatedChildrenParameters.paginationMax);}),...rearrangeableChildrenParameters},sortableChildrenParameters});const{childrenHaveFocusParameters,managedChildrenParameters,rovingTabIndexChildContext,typeaheadNavigationChildContext,singleSelectionContext,linearNavigationReturn,rovingTabIndexReturn,singleSelectionReturn,typeaheadNavigationReturn}=useListNavigationSingleSelection({managedChildrenReturn:{getChildren},linearNavigationParameters:{getHighestIndex:getHighestChildIndex,isValid,indexDemangler,indexMangler,...linearNavigationParameters},typeaheadNavigationParameters:{isValid,...typeaheadNavigationParameters},rovingTabIndexParameters:{initiallyTabbedIndex:initiallySelectedIndex,...rovingTabIndexParameters},singleSelectionParameters,...completeListNavigationParameters});const{childrenHaveFocusChildContext,childrenHaveFocusReturn}=useChildrenHaveFocus({childrenHaveFocusParameters});const{context:{managedChildContext},managedChildrenReturn}=useManagedChildren({managedChildrenParameters:{onChildCountChange:useStableCallback(c=>{onChildCountChange(c);}),...managedChildrenParameters}});const{paginatedChildrenReturn,paginatedChildrenReturn:{refreshPagination},managedChildrenParameters:{onChildCountChange},context:{paginatedChildContext}}=usePaginatedChildren({managedChildrenReturn,paginatedChildrenParameters,linearNavigationParameters:{indexDemangler}});const{context:{staggeredChildContext},staggeredChildrenReturn}=useStaggeredChildren({managedChildrenReturn,staggeredChildrenParameters});const props=useMergedProps(linearNavigationReturn.propsStable,typeaheadNavigationReturn.propsStable);const context=useStableObject({singleSelectionContext,managedChildContext,rovingTabIndexChildContext,typeaheadNavigationChildContext,childrenHaveFocusChildContext,paginatedChildContext,staggeredChildContext});return{context,props,managedChildrenReturn,rearrangeableChildrenReturn:{indexDemangler,indexMangler,...rearrangeableChildrenReturn},staggeredChildrenReturn,paginatedChildrenReturn,sortableChildrenReturn,linearNavigationReturn,rovingTabIndexReturn,singleSelectionReturn,typeaheadNavigationReturn,childrenHaveFocusReturn};}function useCompleteListNavigationChild(_ref45){let{completeListNavigationChildParameters:{focusSelf,...completeListNavigationChildParameters},singleSelectionChildParameters,rovingTabIndexChildParameters:{hidden},managedChildParameters,textContentParameters,context:{childrenHaveFocusChildContext,managedChildContext,rovingTabIndexChildContext,singleSelectionContext,typeaheadNavigationChildContext,paginatedChildContext,staggeredChildContext},sortableChildParameters:{getSortValue},..._void}=_ref45;const{index}=managedChildParameters;const{managedChildParameters:{setChildCountIfPaginated,setPaginationVisible,setParentIsPaginated},paginatedChildReturn,paginatedChildReturn:{hideBecausePaginated},props:paginationProps}=usePaginatedChild({managedChildParameters:{index},context:{paginatedChildContext}});const{managedChildParameters:{setParentIsStaggered,setStaggeredVisible},staggeredChildReturn,staggeredChildReturn:{hideBecauseStaggered},props:staggeredProps}=useStaggeredChild({managedChildParameters,context:{staggeredChildContext}});hidden||(hidden=hideBecausePaginated||hideBecauseStaggered);let{disabled}=singleSelectionChildParameters;if(hidden)disabled=true;const{refElementReturn}=useRefElement({refElementParameters:{}});const{getElement}=refElementReturn;const{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:ocfic1},pressParameters,rovingTabIndexChildReturn,singleSelectionChildReturn,managedChildParameters:{setLocalSelected}}=useListNavigationSingleSelectionChild({managedChildParameters:{index},rovingTabIndexChildParameters:{hidden},singleSelectionChildParameters:{...singleSelectionChildParameters},rovingTabIndexChildContext,singleSelectionContext,typeaheadNavigationChildContext,refElementReturn,textContentParameters:{hidden,...textContentParameters}});const{getTabbable,setTabbable,tabbable}=rovingTabIndexChildReturn;const{getSelected,selected}=singleSelectionChildReturn;const mcp1={disabled,focusSelf,getElement,getSelected,getTabbable,hidden,index,selected,setLocalSelected,setTabbable,tabbable,getSortValue,setChildCountIfPaginated,setPaginationVisible,setParentIsPaginated,setParentIsStaggered,setStaggeredVisible};const{managedChildReturn}=useManagedChild({context:{managedChildContext},managedChildParameters:{index}},{...mcp1,...completeListNavigationChildParameters});const{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:ocfic2}}=useChildrenHaveFocusChild({childrenHaveFocusChildContext});const onCurrentFocusedInnerChanged=useStableCallback((focused,prev,e)=>{ocfic1===null||ocfic1===void 0?void 0:ocfic1(focused,prev,e);ocfic2===null||ocfic2===void 0?void 0:ocfic2(focused,prev,e);});const{hasCurrentFocusReturn}=useHasCurrentFocus({hasCurrentFocusParameters:{onCurrentFocusedInnerChanged,onCurrentFocusedChanged:null},refElementReturn});const props=useMergedProps(refElementReturn.propsStable,hasCurrentFocusReturn.propsStable,rovingTabIndexChildReturn.propsUnstable,singleSelectionChildReturn.propsUnstable,paginationProps,staggeredProps);return{props,pressParameters,refElementReturn,rovingTabIndexChildReturn,singleSelectionChildReturn,hasCurrentFocusReturn,managedChildReturn,paginatedChildReturn,staggeredChildReturn};}function useModal(_ref46){let{dismissParameters,escapeDismissParameters,focusTrapParameters:{trapActive,...focusTrapParameters}}=_ref46;const{open}=dismissParameters;const{refElementPopupReturn,refElementSourceReturn}=useDismiss({dismissParameters,escapeDismissParameters});const{focusTrapReturn,refElementReturn}=useFocusTrap({focusTrapParameters:{trapActive:open&&trapActive,...focusTrapParameters},refElementParameters:{}});const{propsStable:pp1}=refElementPopupReturn;const{propsStable:ps2}=refElementSourceReturn;const{propsUnstable:pp3}=focusTrapReturn;const{propsStable:pp4}=refElementReturn;return{propsPopup:pp1,propsFocusContainer:useMergedProps(pp3,pp4),propsSource:ps2,refElementPopupReturn,refElementSourceReturn,focusTrapReturn};}function useTimeout(_ref47){let{timeout,callback,triggerIndex}=_ref47;const stableCallback=useStableCallback(()=>{startTimeRef.current=null;callback();});const getTimeout=useStableGetter(timeout);const startTimeRef=_(null);const timeoutIsNull=timeout==null;h(()=>{if(!timeoutIsNull){const timeout=getTimeout();console.assert(timeoutIsNull==(timeout==null));if(timeout!=null){startTimeRef.current=+new Date();const handle=setTimeout(stableCallback,timeout);return()=>clearTimeout(handle);}}},[triggerIndex,timeoutIsNull]);const getElapsedTime=T$1(()=>{var _startTimeRef$current;return+new Date()-+((_startTimeRef$current=startTimeRef.current)!==null&&_startTimeRef$current!==void 0?_startTimeRef$current:new Date());},[]);const getRemainingTime=T$1(()=>{const timeout=getTimeout();return timeout==null?null:Math.max(0,timeout-getElapsedTime());},[]);return{getElapsedTime,getRemainingTime};}function supportsPointerEvents(){return"onpointerup"in window;}function usePress(args){const{refElementReturn:{getElement},pressParameters:{focusSelf,onPressSync,allowRepeatPresses,longPressThreshold,excludeEnter:ee,excludePointer:ep,excludeSpace:es}}=args;const excludeEnter=useStableCallback(ee!==null&&ee!==void 0?ee:returnFalse);const excludeSpace=useStableCallback(es!==null&&es!==void 0?es:returnFalse);const excludePointer=useStableCallback(ep!==null&&ep!==void 0?ep:returnFalse);const hasPressEvent=onPressSync!=null;const[getJustHandled,setJustHandled]=usePassiveState(useStableCallback((justHandled,_p,reason)=>{if(justHandled){const h=setTimeout(()=>{setJustHandled(false,reason);},1);return clearTimeout(h);}}),returnFalse);const[longPress,setLongPress]=useState(null);const[waitingForSpaceUp,setWaitingForSpaceUp,getWaitingForSpaceUp]=useState(false);const[pointerDownStartedHere,setPointerDownStartedHere,getPointerDownStartedHere]=useState(false);const[hovering,setHovering,getHovering]=useState(false);const onTouchStart=T$1(e=>{e.preventDefault();e.stopPropagation();setPointerDownStartedHere(true);setHovering(true);setLongPress(false);const element=getElement();if(element)focusSelf(element);},[]);const onTouchMove=T$1(e=>{e.preventDefault();e.stopPropagation();const element=getElement();const touch=e.touches[0];const offsets=[[0,0],[-touch.radiusX,-touch.radiusY],[+touch.radiusX,-touch.radiusY],[-touch.radiusX,+touch.radiusY],[+touch.radiusX,+touch.radiusY]];let hoveringAtAnyPoint=false;for(const[x,y]of offsets){var _touch$clientX,_touch$clientY,_element$contains;const elementAtTouch=document.elementFromPoint(((_touch$clientX=touch===null||touch===void 0?void 0:touch.clientX)!==null&&_touch$clientX!==void 0?_touch$clientX:0)+x,((_touch$clientY=touch===null||touch===void 0?void 0:touch.clientY)!==null&&_touch$clientY!==void 0?_touch$clientY:0)+y);hoveringAtAnyPoint||(hoveringAtAnyPoint=(_element$contains=element===null||element===void 0?void 0:element.contains(elementAtTouch))!==null&&_element$contains!==void 0?_element$contains:false);}setHovering(hoveringAtAnyPoint);},[]);const onTouchEnd=T$1(e=>{e.preventDefault();e.stopPropagation();const hovering=getHovering();const pointerDownStartedHere=getPointerDownStartedHere();setJustHandled(true);if(pointerDownStartedHere&&hovering){handlePress(e);}setWaitingForSpaceUp(false);setHovering(false);setPointerDownStartedHere(false);},[]);const onPointerDown=T$1(e=>{if(!excludePointer()){if(e.buttons&1){e.preventDefault();e.stopPropagation();setPointerDownStartedHere(true);setHovering(true);setLongPress(false);const element=getElement();if(element)focusSelf(element);}}},[]);const onPointerMove=useStableCallback(e=>{let listeningForPress=getPointerDownStartedHere();if(!(e.buttons&1))setPointerDownStartedHere(listeningForPress=false);if(listeningForPress){const element=getElement();const elementAtPointer=document.elementFromPoint(e.clientX,e.clientY);setHovering(element==elementAtPointer||(element===null||element===void 0?void 0:element.contains(elementAtPointer))||false);}});const onPointerUp=T$1(e=>{const hovering=getHovering();const pointerDownStartedHere=getPointerDownStartedHere();if(!excludePointer()){setJustHandled(true);if(pointerDownStartedHere&&hovering){handlePress(e);e.preventDefault();e.stopPropagation();}}setWaitingForSpaceUp(false);setHovering(false);setPointerDownStartedHere(false);setLongPress(false);},[]);const onPointerEnter=T$1(_e=>{setHovering(true);},[]);const onPointerLeave=T$1(_e=>{setHovering(false);setLongPress(false);},[]);useTimeout({callback:()=>{const element=getElement();setLongPress(pointerDownStartedHere&&hovering);if(element&&pointerDownStartedHere&&hovering){focusSelf(element);if(longPressThreshold){setWaitingForSpaceUp(false);setHovering(false);setPointerDownStartedHere(false);}}},timeout:longPressThreshold!==null&&longPressThreshold!==void 0?longPressThreshold:null,triggerIndex:longPress?true:pointerDownStartedHere&&hovering});const handlePress=useStableCallback(e=>{setWaitingForSpaceUp(false);setHovering(false);setPointerDownStartedHere(false);setLongPress(null);if(onPressSync){const element=getElement();if(element)focusSelf(element);e.preventDefault();e.stopPropagation();try{pulse();}finally{onPressSync(e);}}});const onKeyDown=useStableCallback(e=>{if(onPressSync){if(e.key==" "&&!excludeSpace()){setWaitingForSpaceUp(true);e.preventDefault();}if(e.key=="Enter"&&!excludeEnter()&&(!e.repeat||(allowRepeatPresses!==null&&allowRepeatPresses!==void 0?allowRepeatPresses:false))){handlePress(e);}}});const onKeyUp=useStableCallback(e=>{const waitingForSpaceUp=getWaitingForSpaceUp();if(waitingForSpaceUp&&e.key==" "&&!excludeSpace())handlePress(e);});const onClick=useStableCallback(e=>{const element=getElement();if(onPressSync){e.preventDefault();if(e.detail>1){e.stopImmediatePropagation();e.stopPropagation();}else{if(getJustHandled()==false&&e.target==element&&(element===null||element===void 0?void 0:element.tagName)=='input'&&element.type=='radio'&&element.checked){console.assert(false);debugger;handlePress(e);}}}});const onFocusOut=useStableCallback(_e=>{setWaitingForSpaceUp(false);});const p=supportsPointerEvents();return{pressReturn:{pseudoActive:pointerDownStartedHere&&hovering||waitingForSpaceUp||false,longPress,propsUnstable:{onKeyDown,onKeyUp,onTouchStart:!hasPressEvent?undefined:!p?onTouchStart:undefined,onTouchCancel:!hasPressEvent?undefined:!p?onTouchEnd:undefined,onTouchMove:!hasPressEvent?undefined:!p?onTouchMove:undefined,onTouchEnd:!hasPressEvent?undefined:!p?onTouchEnd:undefined,onPointerDown:!hasPressEvent?undefined:p?onPointerDown:undefined,onPointerCancel:!hasPressEvent?undefined:p?onPointerDown:undefined,onPointerMove:!pointerDownStartedHere||!hasPressEvent?undefined:p?onPointerMove:undefined,onPointerUp:!hasPressEvent?undefined:p?onPointerUp:undefined,onPointerEnter:!hasPressEvent?undefined:p?onPointerEnter:undefined,onPointerLeave:!hasPressEvent?undefined:p?onPointerLeave:undefined,onfocusout:onFocusOut,onClick}}};}let pulse="vibrate"in navigator&&navigator.vibrate instanceof Function?()=>navigator.vibrate(10):()=>{};function useRandomId(_ref48){let{randomIdParameters:{prefix,otherReferencerProp}}=_ref48;const id=prefix+V$1();useEnsureStability("useRandomId",prefix,id);const referencerElementProps=_(otherReferencerProp==null?{}:{[otherReferencerProp]:id});const sourceElementProps=_({id});useEnsureStability("useRandomIdReferencerElement",otherReferencerProp);return{propsReferencer:referencerElementProps.current,propsSource:sourceElementProps.current,randomIdReturn:{id:id}};}function useRandomDualIds(_ref49){let{randomIdInputParameters,randomIdLabelParameters}=_ref49;const{randomIdReturn:randomIdInputReturn,propsReferencer:propsLabelAsReferencer,propsSource:propsInputAsSource}=useRandomId({randomIdParameters:randomIdInputParameters});const{randomIdReturn:randomIdLabelReturn,propsReferencer:propsInputAsReferencer,propsSource:propsLabelAsSource}=useRandomId({randomIdParameters:randomIdLabelParameters});return{propsLabel:useMergedProps(propsLabelAsReferencer,propsLabelAsSource),propsInput:useMergedProps(propsInputAsReferencer,propsInputAsSource),randomIdInputReturn,randomIdLabelReturn};}function identity$1(){for(var _len4=arguments.length,t=new Array(_len4),_key4=0;_key4<_len4;_key4++){t[_key4]=arguments[_key4];}return t;}const AsyncFunction=async function(){}.constructor;function useAsync(asyncHandler2,options){const[pending,setPending,_getPending]=useState(false);const[result,setResult,_getResult]=useState(undefined);const[error,setError,_getError]=useState(undefined);const[hasError,setHasError,_getHasError]=useState(false);const[hasResult,setHasResult,_getHasResult]=useState(false);const[asyncDebouncing,setAsyncDebouncing]=useState(false);const[syncDebouncing,setSyncDebouncing]=useState(false);const[invocationResult,setInvocationResult]=useState(asyncHandler2 instanceof AsyncFunction?"async":null);const incrementCallCount=T$1(()=>{setRunCount(c=>c+1);},[]);const incrementResolveCount=T$1(()=>{setResolveCount(c=>c+1);},[]);const incrementRejectCount=T$1(()=>{setRejectCount(c=>c+1);},[]);const incrementFinallyCount=T$1(()=>{setSettleCount(c=>c+1);},[]);let{throttle,debounce,capture:captureUnstable}=options!==null&&options!==void 0?options:{};const captureStable=useStableCallback(captureUnstable!==null&&captureUnstable!==void 0?captureUnstable:identity$1);const asyncHandlerStable=useStableCallback(asyncHandler2!==null&&asyncHandler2!==void 0?asyncHandler2:identity$1);const{flush,syncOutput,cancel}=F$1(()=>{return asyncToSync({asyncInput:asyncHandlerStable,capture:captureStable,onAsyncDebounce:setAsyncDebouncing,onError:setError,onPending:setPending,onReturnValue:setResult,onSyncDebounce:setSyncDebouncing,onHasError:setHasError,onHasResult:setHasResult,onInvoked:setInvocationResult,onInvoke:incrementCallCount,onFinally:incrementFinallyCount,onReject:incrementRejectCount,onResolve:incrementResolveCount,throttle:options===null||options===void 0?void 0:options.throttle,wait:options===null||options===void 0?void 0:options.debounce});},[throttle,debounce]);h(()=>{return()=>cancel();},[cancel]);const[runCount,setRunCount]=useState(0);const[settleCount,setSettleCount]=useState(0);const[resolveCount,setResolveCount]=useState(0);const[rejectCount,setRejectCount]=useState(0);return{syncHandler:syncOutput,pending,result,error,hasError:hasError||false,hasResult:hasResult||false,resolveCount,rejectCount,settleCount,debouncingAsync:asyncDebouncing,debouncingSync:syncDebouncing,invocationResult,callCount:runCount,flushDebouncedPromise:flush};}function isPromise(p){return p instanceof Promise;}const Unset=Symbol("Unset");function asyncToSync(_ref50){let{asyncInput,onInvoke,onInvoked,onFinally:onFinallyAny,onReject,onResolve,onHasError,onHasResult,onError,onReturnValue,capture,onAsyncDebounce,onSyncDebounce,onPending,throttle,wait}=_ref50;let pending=false;let syncDebouncing=false;let asyncDebouncing=false;let currentCapture=Unset;const onFinally=()=>{onFinallyAny();onPending(pending=false);let nothingElseToDo=!asyncDebouncing;onAsyncDebounce(asyncDebouncing=false);if(nothingElseToDo);else{console.assert(currentCapture!==Unset);if(currentCapture!=Unset){onSyncDebounce(syncDebouncing=true);syncDebounced();}}};const sync=function(){onPending(pending=true);console.assert(syncDebouncing==false);onHasError(null);onHasResult(null);let promiseOrReturn;let hadSyncError=false;try{onInvoke();promiseOrReturn=asyncInput(...arguments);onHasError(false);}catch(ex){hadSyncError=true;onError(ex);onInvoked("throw");}if(isPromise(promiseOrReturn)){onInvoked("async");promiseOrReturn.then(r=>{onResolve();onHasResult(true);onReturnValue(r);return r;}).catch(e=>{onReject();onHasError(true);onError(e);return e;}).finally(onFinally);}else{onInvoked("sync");if(!hadSyncError){onResolve();onHasResult(true);onHasError(false);}else{onReject();onHasResult(false);onHasError(true);}onReturnValue(promiseOrReturn);onPending(pending=false);onFinally();}};const lodashOptions={leading:!wait,trailing:true};if(throttle){if(wait==null||wait<throttle)wait=throttle;lodashOptions.maxWait=throttle;}const syncDebounced=debounce(()=>{onSyncDebounce(syncDebouncing=false);if(!pending){console.assert(currentCapture!=Unset);sync(...currentCapture);}else{onAsyncDebounce(asyncDebouncing=true);}},wait||undefined,lodashOptions);return{syncOutput:function(){currentCapture=capture(...arguments);onSyncDebounce(syncDebouncing=true);syncDebounced();},flush:()=>{syncDebounced.flush();},cancel:()=>{syncDebounced.cancel();}};}function useAsyncHandler(_ref51){let{asyncHandler,capture:originalCapture,...restAsyncOptions}=_ref51;const[currentCapture,setCurrentCapture,getCurrentCapture]=useState(undefined);const[hasCapture,setHasCapture]=useState(false);const capture=useStableCallback(e=>{const captured=originalCapture(e);setCurrentCapture(captured);setHasCapture(true);return[captured,e];});return{getCurrentCapture,currentCapture,hasCapture,...useAsync(asyncHandler,{capture,...restAsyncOptions})};}function g(n,t){for(var e in t)n[e]=t[e];return n;}function C(n,t){for(var e in n)if("__source"!==e&&!(e in t))return!0;for(var r in t)if("__source"!==r&&n[r]!==t[r])return!0;return!1;}function w(n){this.props=n;}function x(n,e){function r(n){var t=this.props.ref,r=t==n.ref;return!r&&t&&(t.call?t(null):t.current=null),e?!e(this.props,n)||!r:C(this.props,n);}function u(e){return this.shouldComponentUpdate=r,v$1(n,e);}return u.displayName="Memo("+(n.displayName||n.name)+")",u.prototype.isReactComponent=!0,u.__f=!0,u;}(w.prototype=new _$2()).isPureReactComponent=!0,w.prototype.shouldComponentUpdate=function(n,t){return C(this.props,n)||C(this.state,t);};var R=l$1.__b;l$1.__b=function(n){n.type&&n.type.__f&&n.ref&&(n.props.ref=n.ref,n.ref=null),R&&R(n);};var N="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function k(n){function t(t){var e=g({},t);return delete e.ref,n(e,t.ref||null);}return t.$$typeof=N,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(n.displayName||n.name)+")",t;}var T=l$1.__e;l$1.__e=function(n,t,e,r){if(n.then)for(var u,o=t;o=o.__;)if((u=o.__c)&&u.__c)return null==t.__e&&(t.__e=e.__e,t.__k=e.__k),u.__c(n,t);T(n,t,e,r);};var I=l$1.unmount;function L(n,t,e){return n&&(n.__c&&n.__c.__H&&(n.__c.__H.__.forEach(function(n){"function"==typeof n.__c&&n.__c();}),n.__c.__H=null),null!=(n=g({},n)).__c&&(n.__c.__P===e&&(n.__c.__P=t),n.__c=null),n.__k=n.__k&&n.__k.map(function(n){return L(n,t,e);})),n;}function U(n,t,e){return n&&(n.__v=null,n.__k=n.__k&&n.__k.map(function(n){return U(n,t,e);}),n.__c&&n.__c.__P===t&&(n.__e&&e.insertBefore(n.__e,n.__d),n.__c.__e=!0,n.__c.__P=e)),n;}function D(){this.__u=0,this.t=null,this.__b=null;}function F(n){var t=n.__.__c;return t&&t.__a&&t.__a(n);}function V(){this.u=null,this.o=null;}l$1.unmount=function(n){var t=n.__c;t&&t.__R&&t.__R(),t&&!0===n.__h&&(n.type=null),I&&I(n);},(D.prototype=new _$2()).__c=function(n,t){var e=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(e);var u=F(r.__v),o=!1,i=function(){o||(o=!0,e.__R=null,u?u(l):l());};e.__R=i;var l=function(){if(! --r.__u){if(r.state.__a){var n=r.state.__a;r.__v.__k[0]=U(n,n.__c.__P,n.__c.__O);}var t;for(r.setState({__a:r.__b=null});t=r.t.pop();)t.forceUpdate();}},c=!0===t.__h;r.__u++||c||r.setState({__a:r.__b=r.__v.__k[0]}),n.then(i,i);},D.prototype.componentWillUnmount=function(){this.t=[];},D.prototype.render=function(n,e){if(this.__b){if(this.__v.__k){var r=document.createElement("div"),o=this.__v.__k[0].__c;this.__v.__k[0]=L(this.__b,r,o.__O=o.__P);}this.__b=null;}var i=e.__a&&v$1(d$1,null,n.fallback);return i&&(i.__h=null),[v$1(d$1,null,e.__a?null:n.children),i];};var W=function(n,t,e){if(++e[1]===e[0]&&n.o.delete(t),n.props.revealOrder&&("t"!==n.props.revealOrder[0]||!n.o.size))for(e=n.u;e;){for(;e.length>3;)e.pop()();if(e[1]<e[0])break;n.u=e=e[2];}};function P(n){return this.getChildContext=function(){return n.context;},n.children;}function $(n){var e=this,r=n.i;e.componentWillUnmount=function(){q$1(null,e.l),e.l=null,e.i=null;},e.i&&e.i!==r&&e.componentWillUnmount(),n.__v?(e.l||(e.i=r,e.l={nodeType:1,parentNode:r,childNodes:[],appendChild:function(n){this.childNodes.push(n),e.i.appendChild(n);},insertBefore:function(n,t){this.childNodes.push(n),e.i.appendChild(n);},removeChild:function(n){this.childNodes.splice(this.childNodes.indexOf(n)>>>1,1),e.i.removeChild(n);}}),q$1(v$1(P,{context:e.context},n.__v),e.l)):e.l&&e.componentWillUnmount();}function j(n,e){var r=v$1($,{__v:n,i:e});return r.containerInfo=e,r;}(V.prototype=new _$2()).__a=function(n){var t=this,e=F(t.__v),r=t.o.get(n);return r[0]++,function(u){var o=function(){t.props.revealOrder?(r.push(u),W(t,n,r)):u();};e?e(o):o();};},V.prototype.render=function(n){this.u=null,this.o=new Map();var t=A$1(n.children);n.revealOrder&&"b"===n.revealOrder[0]&&t.reverse();for(var e=t.length;e--;)this.o.set(t[e],this.u=[1,0,this.u]);return n.children;},V.prototype.componentDidUpdate=V.prototype.componentDidMount=function(){var n=this;this.o.forEach(function(t,e){W(n,e,t);});};var z="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,B=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,H="undefined"!=typeof document,Z=function(n){return("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(n);};_$2.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach(function(t){Object.defineProperty(_$2.prototype,t,{configurable:!0,get:function(){return this["UNSAFE_"+t];},set:function(n){Object.defineProperty(this,t,{configurable:!0,writable:!0,value:n});}});});var G=l$1.event;function J(){}function K(){return this.cancelBubble;}function Q(){return this.defaultPrevented;}l$1.event=function(n){return G&&(n=G(n)),n.persist=J,n.isPropagationStopped=K,n.isDefaultPrevented=Q,n.nativeEvent=n;};var nn={configurable:!0,get:function(){return this.class;}},tn=l$1.vnode;l$1.vnode=function(n){var t=n.type,e=n.props,u=e;if("string"==typeof t){var o=-1===t.indexOf("-");for(var i in u={},e){var l=e[i];H&&"children"===i&&"noscript"===t||"value"===i&&"defaultValue"in e&&null==l||("defaultValue"===i&&"value"in e&&null==e.value?i="value":"download"===i&&!0===l?l="":/ondoubleclick/i.test(i)?i="ondblclick":/^onchange(textarea|input)/i.test(i+t)&&!Z(e.type)?i="oninput":/^onfocus$/i.test(i)?i="onfocusin":/^onblur$/i.test(i)?i="onfocusout":/^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(i)?i=i.toLowerCase():o&&B.test(i)?i=i.replace(/[A-Z0-9]/g,"-$&").toLowerCase():null===l&&(l=void 0),/^oninput$/i.test(i)&&(i=i.toLowerCase(),u[i]&&(i="oninputCapture")),u[i]=l);}"select"==t&&u.multiple&&Array.isArray(u.value)&&(u.value=A$1(e.children).forEach(function(n){n.props.selected=-1!=u.value.indexOf(n.props.value);})),"select"==t&&null!=u.defaultValue&&(u.value=A$1(e.children).forEach(function(n){n.props.selected=u.multiple?-1!=u.defaultValue.indexOf(n.props.value):u.defaultValue==n.props.value;})),n.props=u,e.class!=e.className&&(nn.enumerable="className"in e,null!=e.className&&(u.class=e.className),Object.defineProperty(u,"className",nn));}n.$$typeof=z,tn&&tn(n);};var en=l$1.__r;l$1.__r=function(n){en&&en(n),n.__c;};var rn=l$1.diffed;l$1.diffed=function(n){rn&&rn(n);var t=n.props,e=n.__e;null!=e&&"textarea"===n.type&&"value"in t&&t.value!==e.value&&(e.value=null==t.value?"":t.value);};function usePortalChildren(_ref52){let{target}=_ref52;const[pushChild,setPushChild]=useState(null);const[updateChild,setUpdateChild]=useState(null);const[removeChild,setRemoveChild]=useState(null);const pushChildStable=useStableCallback(child=>{var _pushChild;return(_pushChild=pushChild===null||pushChild===void 0?void 0:pushChild(child))!==null&&_pushChild!==void 0?_pushChild:-1;});const updateChildStable=useStableCallback((index,child)=>{return updateChild===null||updateChild===void 0?void 0:updateChild(index,child);});const removeChildStable=useStableCallback(index=>{return removeChild===null||removeChild===void 0?void 0:removeChild(index);});const element=F$1(()=>{return target==null?null:typeof target=="string"?document.getElementById(target):target;},[target]);const children=!element?null:j(o$1(PortalChildren,{setPushChild:setPushChild,setUpdateChild:setUpdateChild,setRemoveChild:setRemoveChild}),element);return{children:children,pushChild:pushChildStable,updateChild:updateChildStable,removeChild:removeChildStable,portalElement:element};}function PortalChildren(_ref53){let{setPushChild,setUpdateChild,setRemoveChild}=_ref53;const[children,setChildren,getChildren]=useState([]);const pushChild=T$1(child=>{const randomKey=generateRandomId();let index=getChildren().length;setChildren(prev=>[...prev,D$1(child,{key:randomKey,index})]);return index;},[]);const updateChild=T$1((index,child)=>{var _getChildren$index;const key=(_getChildren$index=getChildren()[index])===null||_getChildren$index===void 0?void 0:_getChildren$index.key;console.assert(key);if(key){setChildren(prev=>{let newChildren=prev.slice();newChildren.splice(index,1,D$1(child,{key:key,index}));return newChildren;});return index;}},[]);const removeChild=T$1(index=>{var _getChildren$index2;const key=(_getChildren$index2=getChildren()[index])===null||_getChildren$index2===void 0?void 0:_getChildren$index2.key;console.assert(key);if(key){setChildren(prev=>{let newChildren=prev.slice();newChildren.splice(index,1);return newChildren;});return index;}},[]);s(()=>{setPushChild(_=>pushChild);},[pushChild]);s(()=>{setUpdateChild(_=>updateChild);},[updateChild]);s(()=>{setRemoveChild(_=>removeChild);},[removeChild]);return o$1(d$1,{children:children});}function getFromLocalStorage(key){let converter=arguments.length>1&&arguments[1]!==undefined?arguments[1]:JSON.parse;let storage=arguments.length>2&&arguments[2]!==undefined?arguments[2]:localStorage;try{const item=storage.getItem(key);if(item==null)return null;return converter(item);}catch(e){debugger;return null;}}function storeToLocalStorage(key,value){let converter=arguments.length>2&&arguments[2]!==undefined?arguments[2]:JSON.stringify;let storage=arguments.length>3&&arguments[3]!==undefined?arguments[3]:localStorage;try{if(value==null)storage.removeItem(key);else storage.setItem(key,converter(value));}catch(e){debugger;}}function usePersistentState(key,initialValue){let fromString=arguments.length>2&&arguments[2]!==undefined?arguments[2]:JSON.parse;let toString=arguments.length>3&&arguments[3]!==undefined?arguments[3]:JSON.stringify;let storage=arguments.length>4&&arguments[4]!==undefined?arguments[4]:localStorage;const[localCopy,setLocalCopy,getLocalCopy]=useState(()=>{var _ref54;return(_ref54=key?getFromLocalStorage(key,fromString,storage):null)!==null&&_ref54!==void 0?_ref54:initialValue;});const getInitialValue=useStableGetter(initialValue);s(()=>{if(key){const newCopy=getFromLocalStorage(key,fromString,storage);setLocalCopy(newCopy!==null&&newCopy!==void 0?newCopy:getInitialValue());}},[key,storage]);useGlobalHandler(window,"storage",useStableCallback(e=>{if(key&&e.key===key&&e.storageArea==storage){const newValue=e.newValue;if(newValue!=null)setLocalCopy(fromString(newValue));else setLocalCopy(initialValue);}}));const setValueWrapper=useStableCallback(valueOrSetter=>{const value=typeof valueOrSetter==="function"?valueOrSetter(getLocalCopy()):valueOrSetter;setLocalCopy(valueOrSetter);if(key){storeToLocalStorage(key,value,toString,storage);if(typeof value=="object"&&value instanceof Date){console.assert(fromString!=JSON.parse,"Dates (and other non-JSON types) must be given custom fromString and toString functions.");}}});const getValue=useStableCallback(()=>{const trueValue=!key?undefined:getFromLocalStorage(key,fromString,storage);return trueValue!==null&&trueValue!==void 0?trueValue:localCopy;});return[localCopy,setValueWrapper,getValue];}E(null);const EventDetail=Symbol("event-detail");function enhanceEvent(e,detail){const event=e;event[EventDetail]=detail;return event;}let debug=false;function setDebugLogging(logging){debug=logging;}function debugLog(who){for(var _len5=arguments.length,args=new Array(_len5>1?_len5-1:0),_key5=1;_key5<_len5;_key5++){args[_key5-1]=arguments[_key5];}if(debug)console.debug(who+":",...args);}function noop(){return;}const Prefices={accordionSectionHeaderButton:"ashb-",accordionSectionBody:"asb-",checkboxLikeInput:"cbli-",checkboxLikeLabel:"cbll-",dialog:"mdl-",dialogTitle:"mdlt-",drawer:"mdw-",drawerTitle:"mdwt-",gridlist:"gl-",gridlistLabel:"gll-",listbox:"lb-",listboxLabel:"lbl-",menu:"menu-",progressIndicator:"pi-",progressLabel:"pl-",radioGroup:"rg-",radioGroupLabel:"rgl-",radio:"rb-",radioLabel:"rbl-",sliderThumb:"st-",table:"tb-",tableLabel:"tbl-",tablist:"tl-",tablistLabel:"tll-",tooltip:"tt-",toolbar:"tlb-",toolbarLabel:"tlbl-"};function useButton(_ref55){let{buttonParameters:{tagButton,disabled,onPress,pressed,role},pressParameters,refElementParameters}=_ref55;debugLog("useButton");const refElementReturn=useRefElement({refElementParameters});const focusSelf=T$1(e=>{var _e$focus2;return(_e$focus2=e.focus)===null||_e$focus2===void 0?void 0:_e$focus2.call(e);},[]);const pressReturn=usePress({...refElementReturn,pressParameters:{onPressSync:e=>{var _ref56;return(_ref56=disabled?null:onPress)===null||_ref56===void 0?void 0:_ref56(enhanceEvent(e,{pressed:pressed==null?null:!pressed}));},focusSelf,...pressParameters}});const{pressReturn:{propsUnstable:pressProps}}=pressReturn;const{refElementReturn:{propsStable:refProps}}=refElementReturn;const baseProps={"aria-pressed":pressed===true?"true":pressed===false?"false":undefined};const buttonProps={...baseProps,disabled:disabled&&disabled!="soft"?true:false,"aria-disabled":disabled==='soft'?'true':undefined,role:role=="button"?undefined:role};const divProps={...baseProps,tabIndex:disabled==="hard"?-1:0,role,"aria-disabled":disabled?"true":undefined};return{...refElementReturn,...pressReturn,props:useMergedProps(pressProps,refProps,tagButton=='button'?buttonProps:divProps)};}function useAccordion(_ref57){var _initialIndex;let{accordionParameters:{initialIndex,localStorageKey},typeaheadNavigationParameters,linearNavigationParameters:{disableArrowKeys,disableHomeEndKeys,navigationDirection,navigatePastEnd,navigatePastStart,pageNavigationSize},managedChildrenParameters:{onAfterChildLayoutEffect,onChildrenMountChange}}=_ref57;debugLog("useAccordian");const[localStorageIndex,setLocalStorageIndex]=usePersistentState(localStorageKey!==null&&localStorageKey!==void 0?localStorageKey:null,(_initialIndex=initialIndex)!==null&&_initialIndex!==void 0?_initialIndex:null);if(localStorageIndex!=null)initialIndex=localStorageIndex;const{managedChildrenReturn,context}=useManagedChildren({managedChildrenParameters:{onChildrenMountChange:useStableCallback((m,u)=>{ocmc2();onChildrenMountChange===null||onChildrenMountChange===void 0?void 0:onChildrenMountChange(m,u);}),onAfterChildLayoutEffect}});const{getChildren}=managedChildrenReturn;const isValidByChild=T$1(c=>c&&!c.disabled&&!c.hidden,[]);const isValidByIndex=T$1(c=>{const child=getChildren().getAt(c);if(child){return isValidByChild(child);}return false;},[]);const{changeIndex:changeExpandedIndexLocalOnly,getCurrentIndex:getCurrentExpandedIndex}=useChildrenFlag({initialIndex,getChildren,getAt:T$1(child=>{var _child$getOpenFromPar;return(_child$getOpenFromPar=child.getOpenFromParent())!==null&&_child$getOpenFromPar!==void 0?_child$getOpenFromPar:false;},[]),setAt:T$1((child,open)=>{return child.setOpenFromParent(open);},[]),isValid:isValidByChild,onIndexChange:null,closestFit:false});const{changeIndex:changeTabbedIndex,getCurrentIndex:getTabbedIndex,reevaluateClosestFit:ocmc2}=useChildrenFlag({initialIndex,getChildren,getAt:T$1(child=>{var _child$getMostRecentl;return(_child$getMostRecentl=child.getMostRecentlyTabbed())!==null&&_child$getMostRecentl!==void 0?_child$getMostRecentl:false;},[]),setAt:T$1((child,tabbed)=>{return child.setMostRecentlyTabbed(tabbed);},[]),isValid:isValidByChild,closestFit:true,onIndexChange:T$1(i=>{if(i!=null){var _getChildren$getAt8;(_getChildren$getAt8=getChildren().getAt(i))===null||_getChildren$getAt8===void 0?void 0:_getChildren$getAt8.focusSelf();}},[])});const changeExpandedIndex=useStableCallback(value=>{changeExpandedIndexLocalOnly(value);setLocalStorageIndex(value);});const rovingTabIndexReturn=useStableObject({getTabbableIndex:getTabbedIndex,setTabbableIndex:changeTabbedIndex});const{typeaheadNavigationChildContext,typeaheadNavigationReturn}=useTypeaheadNavigation({rovingTabIndexReturn,typeaheadNavigationParameters});return{context:useStableObject({...context,...typeaheadNavigationChildContext,accordionSectionParameters:useStableObject({changeExpandedIndex,changeTabbedIndex,getExpandedIndex:getCurrentExpandedIndex,getTabbedIndex:getTabbedIndex,stableTypeaheadProps:typeaheadNavigationReturn.propsStable}),linearNavigationParameters:useStableObject({disableArrowKeys,disableHomeEndKeys,getHighestIndex:T$1(()=>getChildren().getHighestIndex(),[]),indexMangler:identity,indexDemangler:identity,navigationDirection,isValid:isValidByIndex,navigatePastEnd,navigatePastStart,pageNavigationSize}),rovingTabIndexReturn}),managedChildrenReturn,accordionReturn:useStableObject({changeExpandedIndex})};}function identity(t){return t;}function useAccordionSection(_ref58){var _ref59;let{buttonParameters,pressParameters:{},accordionSectionParameters:{open:openFromUser,bodyRole},managedChildParameters:{index},rovingTabIndexChildParameters:{hidden},textContentParameters,context,context:{accordionSectionParameters:{changeExpandedIndex,changeTabbedIndex:_setCurrentFocusedIndex,getTabbedIndex:getCurrentFocusedIndex,stableTypeaheadProps},linearNavigationParameters,rovingTabIndexReturn,typeaheadNavigationChildParameters},refElementParameters}=_ref58;const{disabled,onPress:userOnPress}=buttonParameters;debugLog("useAccordianSection");const[openFromParent,setOpenFromParent,getOpenFromParent]=useState(null);const[mostRecentlyTabbed,setMostRecentlyTabbed,getMostRecentlyTabbed]=useState(null);const{randomIdReturn:_bodyIdReturn,propsSource:propsBodySource,propsReferencer:propsHeadReferencer}=useRandomId({randomIdParameters:{prefix:Prefices.accordionSectionHeaderButton,otherReferencerProp:"aria-controls"}});const{randomIdReturn:_headIdReturn,propsSource:propsHeadSource,propsReferencer:propsBodyReferencer}=useRandomId({randomIdParameters:{prefix:Prefices.accordionSectionBody,otherReferencerProp:"aria-labelledby"}});const open=(_ref59=openFromUser!==null&&openFromUser!==void 0?openFromUser:openFromParent)!==null&&_ref59!==void 0?_ref59:false;const{refElementReturn:{getElement:getHeaderElement,propsStable:headerRefElementProps}}=useRefElement({refElementParameters:{}});const{refElementReturn:{getElement:_getBodyElement,propsStable:bodyRefElementProps}}=useRefElement({refElementParameters:{}});const focusSelf=T$1(()=>{var _getHeaderElement;(_getHeaderElement=getHeaderElement())===null||_getHeaderElement===void 0?void 0:_getHeaderElement.focus();},[]);useManagedChild({context,managedChildParameters:{index:index}},{index,disabled,focusSelf,getMostRecentlyTabbed,getOpenFromParent,hidden,setMostRecentlyTabbed,setOpenFromParent});const onPress=e=>{if(getOpenFromParent())changeExpandedIndex(null);else changeExpandedIndex(index);userOnPress===null||userOnPress===void 0?void 0:userOnPress(e);};const linearReturnType=useLinearNavigation({linearNavigationParameters,rovingTabIndexReturn});const{pressParameters:{excludeSpace},textContentReturn}=useTypeaheadNavigationChild({managedChildParameters:{index},refElementReturn:{getElement:useStableCallback(()=>refElementReturn.getElement())},textContentParameters,typeaheadNavigationChildContext:{typeaheadNavigationChildParameters}});const buttonReturn=useButton({buttonParameters:{...buttonParameters,pressed:null,onPress,role:"button"},pressParameters:{excludeSpace},refElementParameters});const{pressReturn,props:buttonProps,refElementReturn}=buttonReturn;const{linearNavigationReturn:{propsStable}}=linearReturnType;const headerButtonProps=useMergedProps(buttonProps,headerRefElementProps,propsHeadReferencer,propsHeadSource,propsStable,stableTypeaheadProps,{"aria-expanded":(open!==null&&open!==void 0?open:false).toString()});const bodyProps=useMergedProps(bodyRefElementProps,propsBodyReferencer,propsBodySource,{role:bodyRole,tabIndex:-1});return{pressReturn,refElementReturn,textContentReturn,accordionSectionReturn:{mostRecentlyTabbed:!!mostRecentlyTabbed,expanded:open,focused:getCurrentFocusedIndex()==index},propsHeaderButton:headerButtonProps,propsHeader:{},propsBody:bodyProps};}function useLabel(_ref60){let{randomIdInputParameters,randomIdLabelParameters,labelParameters:{tagInput,tagLabel,ariaLabel,labelPosition,onLabelClick}}=_ref60;const nativeHTMLBehavior=tagInput=="input"&&tagLabel=="label"&&labelPosition!="wrapping";const synthetic=!nativeHTMLBehavior;const{propsInput,propsLabel,randomIdInputReturn,randomIdLabelReturn}=useRandomDualIds({randomIdInputParameters:{...randomIdInputParameters,otherReferencerProp:!synthetic&&labelPosition==="separate"?"for":null},randomIdLabelParameters:{...randomIdLabelParameters,otherReferencerProp:synthetic?"aria-labelledby":null}});const{refElementReturn}=useRefElement({refElementParameters:{}});if(labelPosition=='none'){propsInput["aria-label"]=ariaLabel;propsInput["aria-labelledby"]=undefined;propsLabel["for"]=undefined;}const{pressReturn}=usePress({pressParameters:{excludeEnter:returnTrue,excludeSpace:returnTrue,onPressSync:onLabelClick,focusSelf:noop},refElementReturn});return{propsInput,propsLabel:useMergedProps(propsLabel,refElementReturn.propsStable,pressReturn.propsUnstable),randomIdInputReturn,randomIdLabelReturn};}function useLabelSynthetic(_ref61){let{labelParameters:{ariaLabel,onLabelClick},...rest}=_ref61;return useLabel({labelParameters:{ariaLabel,labelPosition:ariaLabel==null?"separate":"none",tagInput:"div",tagLabel:"div",onLabelClick},...rest});}function preventDefault(e){e.preventDefault();}function useCheckboxLike(_ref62){let{labelParameters,randomIdInputParameters,randomIdLabelParameters,checkboxLikeParameters:{checked,disabled,onInput:onInputSync,role},refElementInputReturn,refElementLabelReturn,pressParameters:{excludeSpace}}=_ref62;const{getElement:getInputElement}=refElementInputReturn;const{getElement:getLabelElement}=refElementLabelReturn;const{tagInput,tagLabel,labelPosition}=labelParameters;h(()=>{const element=getInputElement();if(element&&tagInput=="input"){element.indeterminate=checked==="mixed";element.checked=checked===true;}},[tagInput,checked!==null&&checked!==void 0?checked:false]);const{randomIdInputReturn,randomIdLabelReturn,propsInput,propsLabel}=useLabel({labelParameters:{...labelParameters,onLabelClick:useStableCallback(e=>{if(!disabled&&tagInput!="input"&&tagLabel!="label"&&labelPosition!="separate"){focusSelf();onInputSync(e);}})},randomIdInputParameters,randomIdLabelParameters});const focusSelf=useStableCallback(()=>{var _elementToFocus;let elementToFocus=null;if(labelPosition=="wrapping")elementToFocus=getLabelElement();else elementToFocus=getInputElement();(_elementToFocus=elementToFocus)===null||_elementToFocus===void 0?void 0:_elementToFocus.focus();});const onClickInputSync=labelPosition=="wrapping"?undefined:onInputSync;const onClickLabelSync=onInputSync;const{pressReturn:pressInputReturn}=usePress({pressParameters:{excludeSpace,focusSelf,onPressSync:disabled?undefined:onClickInputSync},refElementReturn:refElementInputReturn});const{pressReturn:pressLabelReturn}=usePress({pressParameters:{excludeSpace,focusSelf,onPressSync:disabled?undefined:onClickLabelSync},refElementReturn:refElementLabelReturn});const propsUnstableInput={};const propsUnstableLabel={};propsUnstableInput.onClick=preventDefault;propsUnstableLabel.onClick=preventDefault;propsUnstableInput.onInput=preventDefault;propsUnstableInput.onChange=preventDefault;propsUnstableInput.type=role=="radio"?"radio":"checkbox";switch(labelPosition){case"none":case"separate":{if(tagInput=="input"){propsUnstableInput.checked=checked===true;if(disabled===true||disabled==='hard')propsUnstableInput.disabled=true;else if(disabled=="soft")propsUnstableInput["aria-disabled"]="true";}else{propsUnstableInput.role=role;propsUnstableInput.tabIndex=0;propsUnstableInput["aria-checked"]=(checked!==null&&checked!==void 0?checked:false).toString();propsUnstableInput["aria-disabled"]=(!!disabled).toString();}break;}case"wrapping":{if(tagInput=="input"){propsUnstableInput.checked=checked===true;propsUnstableInput.disabled=disabled===true;propsUnstableInput.inert=true;propsUnstableInput.tabIndex=-1;propsUnstableInput.role="presentation";propsUnstableInput["aria-hidden"]="true";propsUnstableInput.onFocus=_=>{var _getLabelElement,_getLabelElement$focu;return getLabelElement===null||getLabelElement===void 0?void 0:(_getLabelElement=getLabelElement())===null||_getLabelElement===void 0?void 0:(_getLabelElement$focu=_getLabelElement.focus)===null||_getLabelElement$focu===void 0?void 0:_getLabelElement$focu.call(_getLabelElement);};}propsUnstableLabel.role=role;propsUnstableLabel.tabIndex=0;propsUnstableLabel["aria-checked"]=(checked!==null&&checked!==void 0?checked:false).toString();propsUnstableLabel["aria-disabled"]=(!!disabled).toString();break;}}return{randomIdInputReturn,randomIdLabelReturn,pressInputReturn,pressLabelReturn,checkboxLikeInputReturn:{propsUnstable:propsUnstableInput},checkboxLikeLabelReturn:{propsUnstable:propsUnstableLabel},propsInput:useMergedProps(propsInput,propsUnstableInput,pressInputReturn.propsUnstable,refElementInputReturn.propsStable),propsLabel:useMergedProps(propsLabel,propsUnstableLabel,pressLabelReturn.propsUnstable,refElementLabelReturn.propsStable),checkboxLikeReturn:{focusSelf}};}function useCheckbox(_ref63){let{checkboxParameters:{onCheckedChange},checkboxLikeParameters,labelParameters}=_ref63;debugLog("useCheckbox");const{tagInput,labelPosition}=labelParameters;const{checked}=checkboxLikeParameters;const{refElementReturn:refElementInputReturn}=useRefElement({});const{refElementReturn:refElementLabelReturn}=useRefElement({});const onInputEnhanced=useStableCallback(e=>onCheckedChange===null||onCheckedChange===void 0?void 0:onCheckedChange(enhanceEvent(e,{checked:!checked})));const ret=useCheckboxLike({randomIdInputParameters:{prefix:Prefices.checkboxLikeInput},randomIdLabelParameters:{prefix:Prefices.checkboxLikeLabel},refElementInputReturn,refElementLabelReturn,checkboxLikeParameters:{role:"checkbox",onInput:onInputEnhanced,...checkboxLikeParameters},pressParameters:{excludeSpace:returnFalse},labelParameters});return{checkboxReturn:{propsUnstable:{type:tagInput=="input"&&labelPosition!="wrapping"?"checkbox":undefined}},...ret};}function useCheckboxGroup(_ref64){let{linearNavigationParameters,rearrangeableChildrenParameters,sortableChildrenParameters,rovingTabIndexParameters,typeaheadNavigationParameters,staggeredChildrenParameters}=_ref64;debugLog("useCheckboxGroup");const{childrenHaveFocusReturn,context,linearNavigationReturn,managedChildrenReturn,props,rearrangeableChildrenReturn,rovingTabIndexReturn,singleSelectionReturn,staggeredChildrenReturn,paginatedChildrenReturn,sortableChildrenReturn,typeaheadNavigationReturn}=useCompleteListNavigation({linearNavigationParameters,staggeredChildrenParameters,rearrangeableChildrenParameters,rovingTabIndexParameters,singleSelectionParameters:{initiallySelectedIndex:null,onSelectedIndexChange:null},sortableChildrenParameters,paginatedChildrenParameters:{paginationMax:null,paginationMin:null},typeaheadNavigationParameters});const{getChildren}=managedChildrenReturn;const children=getChildren();const allIds=_(new Set());const updateParentControlIds=useStableCallback(setter=>{setter===null||setter===void 0?void 0:setter(Array.from(allIds.current).join(" "));});const[getSetter,setSetter]=usePassiveState(updateParentControlIds,returnNull);const[_getUpdateIndex,setUpdateIndex]=usePassiveState(useStableCallback(()=>{updateParentControlIds(getSetter());}),returnZero);const getSelfIsChecked=T$1(percentChecked=>{return percentChecked<=0?false:percentChecked>=1?true:"mixed";},[]);const onAnyChildCheckedUpdate=useStableCallback((setter,percentChecked)=>{setter===null||setter===void 0?void 0:setter(getSelfIsChecked(percentChecked));});const[getTotalChildren,setTotalChildren]=usePassiveState(T$1(totalChildren=>{onAnyChildCheckedUpdate(getSetParentCheckboxChecked(),getPercentChecked(getTotalChecked(),totalChildren));},[]),returnZero);const[getTotalChecked,setTotalChecked]=usePassiveState(T$1(totalChecked=>{onAnyChildCheckedUpdate(getSetParentCheckboxChecked(),getPercentChecked(totalChecked,getTotalChildren()));},[]),returnZero);const getPercentChecked=T$1((totalChecked,totalChildren)=>{if(totalChildren>0)return totalChecked/totalChildren;else return totalChecked==0?0:1;},[]);const[getSetParentCheckboxChecked,setSetParentCheckboxChecked]=usePassiveState(useStableCallback(setter=>{onAnyChildCheckedUpdate(setter,getPercentChecked(getTotalChecked(),getTotalChildren()));}));const onCheckboxGroupParentInput=T$1(async e=>{e.preventDefault();const selfIsChecked=getSelfIsChecked(getPercentChecked(getTotalChecked(),getTotalChildren()));const nextChecked=selfIsChecked===false?"mixed":selfIsChecked==="mixed"?true:false;let willChangeAny=false;const promises=[];children.forEach(child=>{if(child.checkboxInfo.checkboxChildType=="child")willChangeAny||(willChangeAny=child.checkboxInfo.getChecked()!=child.checkboxInfo.getLastUserChecked());});children.forEach(child=>{if(child.checkboxInfo.checkboxChildType=="child"){const prevChecked=child.checkboxInfo.getChecked();let checked;if(nextChecked=="mixed"){if(willChangeAny)checked=child.checkboxInfo.getLastUserChecked();else checked=true;}else{checked=nextChecked;}if(checked!=prevChecked){const promise=child.checkboxInfo.setCheckedFromParentInput(checked,e);if(promise){promises.push(promise);}}}});await Promise.all(promises);},[]);return{linearNavigationReturn,context:useStableObject({...context,checkboxGroupChildrenContext:useStableObject({setUpdateIndex,allIds:allIds.current,setTotalChecked,setTotalChildren}),checkboxGroupParentContext:useStableObject({setSetter,setSetParentCheckboxChecked,getPercentChecked,getTotalChecked,getTotalChildren,onCheckboxGroupParentInput})}),childrenHaveFocusReturn,props,staggeredChildrenReturn,paginatedChildrenReturn,rearrangeableChildrenReturn,singleSelectionReturn,sortableChildrenReturn,managedChildrenReturn,rovingTabIndexReturn,typeaheadNavigationReturn};}function useCheckboxGroupParent(_ref65){let{completeListNavigationChildParameters,context,managedChildParameters,rovingTabIndexChildParameters,textContentParameters,sortableChildParameters}=_ref65;const{checkboxGroupParentContext:{setSetter,setSetParentCheckboxChecked,getPercentChecked,getTotalChecked,getTotalChildren,onCheckboxGroupParentInput}}=context;const{hasCurrentFocusReturn,managedChildReturn,pressParameters,refElementReturn,props,paginatedChildReturn,rovingTabIndexChildReturn,staggeredChildReturn,singleSelectionChildReturn}=useCompleteListNavigationChild({completeListNavigationChildParameters,context,managedChildParameters,rovingTabIndexChildParameters,sortableChildParameters,textContentParameters,singleSelectionChildParameters:{ariaPropName:null,selectionMode:"disabled",disabled:true}});const[ariaControls,setControls]=useState("");s(()=>{setSetter(()=>setControls);},[setControls]);debugLog("useCheckboxGroupParent");const[checked,setChecked]=useState(false);h(()=>{setSetParentCheckboxChecked(()=>setChecked);},[]);const checkboxGroupParentReturn={checked,onParentCheckedChange:onCheckboxGroupParentInput,getPercent:useStableCallback(()=>{return getPercentChecked(getTotalChecked(),getTotalChildren());})};return{checkboxGroupParentReturn,hasCurrentFocusReturn,managedChildReturn,staggeredChildReturn,refElementReturn,props:useMergedProps({"aria-controls":ariaControls},props),rovingTabIndexChildReturn,paginatedChildReturn,singleSelectionChildReturn};}function useCheckboxGroupChild(_ref66){let{checkboxGroupChild,completeListNavigationChildParameters,context,managedChildParameters,textContentParameters,rovingTabIndexChildParameters,sortableChildParameters}=_ref66;const{checkboxGroupChildrenContext:{allIds,setUpdateIndex,setTotalChildren,setTotalChecked}}=context;debugLog("useCheckboxGroupChild",managedChildParameters.index);const{checked,onChangeFromParent}=checkboxGroupChild;const getChecked=useStableGetter(checked);const[getLastUserChecked,setLastUserChecked]=usePassiveState(null,returnFalse);const onChildCheckedChange=useStableCallback(checked=>{setLastUserChecked(checked);});const onControlIdChanged=T$1((next,prev)=>{if(prev)allIds.delete(prev);if(next)allIds.add(next);if(!!next||!!prev){setUpdateIndex(i=>(i!==null&&i!==void 0?i:0)+1);}},[]);h(()=>{setTotalChildren(c=>(c!==null&&c!==void 0?c:0)+1);return()=>setTotalChildren(c=>(c!==null&&c!==void 0?c:0)-1);},[]);h(()=>{if(checked){setTotalChecked(c=>(c!==null&&c!==void 0?c:0)+1);return()=>setTotalChecked(c=>(c!==null&&c!==void 0?c:0)-1);}},[checked]);const{hasCurrentFocusReturn,managedChildReturn,pressParameters,refElementReturn,props,singleSelectionChildReturn:_singleSelectionChildReturn,staggeredChildReturn,paginatedChildReturn,rovingTabIndexChildReturn}=useCompleteListNavigationChild({completeListNavigationChildParameters:{checkboxInfo:{checkboxChildType:"child",getLastUserChecked,getChecked,setCheckedFromParentInput:onChangeFromParent},...completeListNavigationChildParameters},context,managedChildParameters:{...managedChildParameters},rovingTabIndexChildParameters,textContentParameters,sortableChildParameters,singleSelectionChildParameters:{ariaPropName:null,selectionMode:"disabled",disabled:true}});return{checkboxGroupChild:{onChildCheckedChange,onControlIdChanged},hasCurrentFocusReturn,managedChildReturn,staggeredChildReturn,paginatedChildReturn,refElementReturn,props,pressParameters,rovingTabIndexChildReturn};}function useDialog(_ref67){let{dismissParameters,escapeDismissParameters,focusTrapParameters,labelParameters}=_ref67;const{focusTrapReturn,propsFocusContainer,propsPopup,propsSource,refElementPopupReturn,refElementSourceReturn}=useModal({dismissParameters:{closeOnLostFocus:false,...dismissParameters},escapeDismissParameters,focusTrapParameters:{trapActive:true,onlyMoveFocus:false,...focusTrapParameters}});const{propsInput,propsLabel}=useLabelSynthetic({labelParameters:{...labelParameters,onLabelClick:useStableCallback(()=>{const e=refElementPopupReturn.getElement();focusTrapParameters.focusPopup(e,()=>findFirstFocusable(e));})},randomIdInputParameters:{prefix:Prefices.dialog},randomIdLabelParameters:{prefix:Prefices.dialogTitle}});return{focusTrapReturn,propsFocusContainer,propsDialog:useMergedProps(propsPopup,propsInput),propsSource,propsTitle:propsLabel,refElementPopupReturn,refElementSourceReturn};}function useDrawer(_ref68){let{dismissParameters,escapeDismissParameters,focusTrapParameters,labelParameters}=_ref68;const{focusTrapReturn,propsFocusContainer,propsPopup,propsSource,refElementPopupReturn,refElementSourceReturn}=useModal({dismissParameters,escapeDismissParameters,focusTrapParameters:{onlyMoveFocus:false,...focusTrapParameters}});const{propsInput,propsLabel}=useLabelSynthetic({labelParameters:{...labelParameters,onLabelClick:useStableCallback(()=>{const e=refElementPopupReturn.getElement();focusTrapParameters.focusPopup(e,()=>findFirstFocusable(e));})},randomIdInputParameters:{prefix:Prefices.drawer},randomIdLabelParameters:{prefix:Prefices.drawerTitle}});return{focusTrapReturn,propsFocusContainer,propsDrawer:useMergedProps(propsPopup,propsInput),propsTitle:propsLabel,propsSource,refElementPopupReturn,refElementSourceReturn};}function useGridlist(_ref69){let{labelParameters,gridlistParameters:{selectionLimit,groupingType,selectedIndex,onSelectedIndexChange},...restParams}=_ref69;const{propsInput:propsLabelList,propsLabel:propsLabelLabel,randomIdInputReturn:{id:_gridlistId},randomIdLabelReturn:{id:_labelId}}=useLabelSynthetic({labelParameters:{...labelParameters,onLabelClick:useStableCallback(()=>{rovingTabIndexReturn.focusSelf();})},randomIdInputParameters:{prefix:Prefices.gridlist},randomIdLabelParameters:{prefix:Prefices.gridlistLabel}});const{context,props,rovingTabIndexReturn,singleSelectionReturn,...restRet}=useCompleteGridNavigation({singleSelectionParameters:{initiallySelectedIndex:selectedIndex,onSelectedIndexChange},...restParams});useSingleSelectionDeclarative({singleSelectionReturn,singleSelectionDeclarativeParameters:{selectedIndex}});let propsGridlist=useMergedProps(props,propsLabelList,{"aria-multiselectable":selectionLimit=="multi"?"true":undefined});let fullContext=useStableObject({...context,gridlistRowContext:useStableObject({selectionLimit})});if(groupingType=="group")propsGridlist.role="group";else if(groupingType=="with-groups"){propsGridlist={role:"grid"};fullContext=null;}else{propsGridlist.role="grid";}if(selectionLimit=="multi")console.assert(singleSelectionReturn.getSelectedIndex()==null);return{context:fullContext,rovingTabIndexReturn,singleSelectionReturn,propsGridlist,propsGridlistLabel:propsLabelLabel,...restRet};}function useGridlistRow(_ref70){let{rowAsChildOfGridParameters:{gridlistRowParameters:{selected},...rowAsChildOfGridParameters},rowAsParentOfCellsParameters:{linearNavigationParameters,...rowAsParentOfCellsParameters}}=_ref70;const{gridlistRowContext:{selectionLimit}}=rowAsChildOfGridParameters.context;const{rowAsChildOfGridReturn,rowAsParentOfCellsReturn,context:cx2,hasCurrentFocusReturn,props}=useCompleteGridNavigationRow({rowAsChildOfGridParameters,rowAsParentOfCellsParameters:{linearNavigationParameters:{disableHomeEndKeys:true,...linearNavigationParameters},...rowAsParentOfCellsParameters}});if(selectionLimit!="multi")console.assert(selected==null);props.role="option";return{rowAsChildOfGridReturn,rowAsParentOfCellsReturn,context:cx2,hasCurrentFocusReturn,props};}function useGridlistCell(_ref71){let{pressParameters,...p}=_ref71;const{props,...info}=useCompleteGridNavigationCell(p);const{pressReturn}=usePress({pressParameters:{...pressParameters,focusSelf:p.completeGridNavigationCellParameters.focusSelf},refElementReturn:info.refElementReturn});return{...info,props:useMergedProps(props,pressReturn.propsUnstable),pressReturn};}function useMenuSurface(_ref72){let{dismissParameters,escapeDismissParameters,focusTrapParameters,menuSurfaceParameters:{role,surfaceId}}=_ref72;debugLog("useMenuSurface");const{refElementReturn:{getElement:getButtonElement,propsStable:propsRefTrigger},...void4}=useRefElement({refElementParameters:{onElementChange:undefined}});const{refElementReturn:{getElement:getMenuElement,propsStable:propsRefSurface,...void5},...void6}=useRefElement({refElementParameters:{onElementChange:undefined}});const{focusTrapReturn,propsFocusContainer,propsPopup,propsSource:ps2,refElementPopupReturn,refElementSourceReturn}=useModal({dismissParameters,escapeDismissParameters,focusTrapParameters:{...focusTrapParameters,onlyMoveFocus:true,trapActive:true,focusOpener:useStableCallback(()=>{const buttonElement=getButtonElement();buttonElement===null||buttonElement===void 0?void 0:buttonElement.focus();})}});const propsSurface=useMergedProps(propsRefSurface,propsPopup,propsFocusContainer);const propsTarget=useMergedProps({role,id:surfaceId});const propsTrigger=useMergedProps({"aria-expanded":dismissParameters.open.toString(),"aria-haspopup":role},propsRefTrigger,ps2,{"aria-controls":surfaceId});const propsSentinel=useFocusSentinel({focusSentinel:{sendFocusToMenu:T$1(()=>{return focusTrapParameters.focusPopup(getMenuElement(),()=>findFirstFocusable(getMenuElement()));},[]),onClose:T$1(()=>{dismissParameters.onClose("lost-focus");},[dismissParameters.onClose]),open:dismissParameters.open}});return{focusTrapReturn,propsSentinel,propsSurface,propsTarget,propsTrigger,refElementPopupReturn,refElementSourceReturn};}function useFocusSentinel(_ref73){let{focusSentinel:{open,onClose,sendFocusToMenu}}=_ref73;debugLog("useFocusSentinel");const getSendFocusWithinMenu=useStableGetter(sendFocusToMenu);const stableOnClose=useStableCallback(onClose);const[sentinelIsActive,setSentinelIsActive]=useState(false);useTimeout({callback:()=>{setSentinelIsActive(open);},timeout:100,triggerIndex:"".concat(open,"-").concat(sentinelIsActive)});const onFocus=sentinelIsActive?()=>stableOnClose():()=>{var _getSendFocusWithinMe;return(_getSendFocusWithinMe=getSendFocusWithinMenu())===null||_getSendFocusWithinMe===void 0?void 0:_getSendFocusWithinMe();};const onClick=()=>stableOnClose();return{tabIndex:sentinelIsActive?0:-1,onFocus,onClick};}function useToolbar(_ref74){let{linearNavigationParameters,toolbarParameters:{orientation,role,onSelectedIndexChange},labelParameters,singleSelectionDeclarativeParameters:{selectedIndex},...listNavParameters}=_ref74;const{context,props,...listNavReturn}=useCompleteListNavigation({...listNavParameters,singleSelectionParameters:{initiallySelectedIndex:selectedIndex,onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null},paginatedChildrenParameters:{paginationMax:null,paginationMin:null},linearNavigationParameters:{...linearNavigationParameters,navigationDirection:orientation}});useSingleSelectionDeclarative({singleSelectionDeclarativeParameters:{selectedIndex},singleSelectionReturn:{changeSelectedIndex:listNavReturn.singleSelectionReturn.changeSelectedIndex}});const{propsInput:propsToolbar,propsLabel,randomIdInputReturn,randomIdLabelReturn}=useLabelSynthetic({labelParameters:{...labelParameters,onLabelClick:listNavReturn.rovingTabIndexReturn.focusSelf},randomIdInputParameters:{prefix:Prefices.toolbar},randomIdLabelParameters:{prefix:Prefices.toolbarLabel}});return{context,propsLabel,propsToolbar:useMergedProps({...propsToolbar,role:role!==null&&role!==void 0?role:undefined},props),randomIdInputReturn,randomIdLabelReturn,...listNavReturn};}function useToolbarChild(args){return useCompleteListNavigationChild(args);}function useMenubar(args){debugLog("useMenubar");const{propsToolbar:propsMenubar,...restReturn}=useToolbar(args);return{propsMenubar,...restReturn};}function useMenubarChild(_ref75){let{menuItemParameters:{onPress:opu,role},...restParams}=_ref75;debugLog("useMenuItem",restParams.managedChildParameters.index);const focusSelf=T$1(e=>{var _e$focus3;return(_e$focus3=e.focus)===null||_e$focus3===void 0?void 0:_e$focus3.call(e);},[]);const{pressParameters:{excludeSpace,onPressSync:ops},props,...restRet}=useToolbarChild({...restParams});const{pressReturn}=usePress({pressParameters:{focusSelf,excludeSpace,onPressSync:useStableCallback(e=>{ops===null||ops===void 0?void 0:ops(e);opu===null||opu===void 0?void 0:opu(e);})},refElementReturn:restRet.refElementReturn});props.role=role;return{pressReturn,props:useMergedProps(props,pressReturn.propsUnstable),...restRet};}function useMenu(_ref76){let{dismissParameters,escapeDismissParameters,menuParameters:{openDirection,onOpen},menuSurfaceParameters,toolbarParameters,...restParams}=_ref76;debugLog("useMenu");const{context,propsLabel:propsButtonAsMenuLabel,propsMenubar,randomIdInputReturn,rovingTabIndexReturn,...restRet}=useMenubar({toolbarParameters:{role:"menu",...toolbarParameters},labelParameters:{ariaLabel:null},...restParams});const onKeyDown=useStableCallback(e=>{const isOpen=dismissParameters.open;if(!isOpen){switch(e.key){case"ArrowUp":{if(openDirection=='up'){onOpen();e.preventDefault();e.stopPropagation();}break;}case"ArrowDown":{if(openDirection=='down'){onOpen();e.preventDefault();e.stopPropagation();}break;}case"ArrowLeft":{if(openDirection=='left'){onOpen();e.preventDefault();e.stopPropagation();}break;}case"ArrowRight":{if(openDirection=='right'){onOpen();e.preventDefault();e.stopPropagation();}break;}}}});const{propsTarget,propsTrigger,refElementSourceReturn,...restRet2}=useMenuSurface({menuSurfaceParameters:{...menuSurfaceParameters,surfaceId:randomIdInputReturn.id,role:"menu"},dismissParameters,escapeDismissParameters,focusTrapParameters:{focusPopup:()=>{rovingTabIndexReturn.focusSelf();}}});return{...restRet,...restRet2,context:useStableObject({...context,menu:useStableObject({closeFromMenuItemClicked:useStableCallback(()=>{dismissParameters.onClose("item-clicked");})})}),refElementSourceReturn,rovingTabIndexReturn,randomIdInputReturn,propsTarget:useMergedProps(propsTarget,propsMenubar),propsTrigger:useMergedProps({onKeyDown},propsTrigger,propsButtonAsMenuLabel)};}function useMenuItem(p){const ret=useMenubarChild(p);return{...ret,menuItemReturn:{closeMenu:p.context.menu.closeFromMenuItemClicked}};}const NotificationProviderContext=E(null);function useNotificationProvider(_ref77){let{targetAssertive,targetPolite}=_ref77;const{children:childrenPolite,pushChild:notifyPolite,portalElement:politeElement}=usePortalChildren({target:targetPolite});const{children:childrenAssertive,pushChild:notifyAssertive,portalElement:assertiveElement}=usePortalChildren({target:targetAssertive});console.assert((politeElement===null||politeElement===void 0?void 0:politeElement.getAttribute("aria-live"))=="polite");console.assert((assertiveElement===null||assertiveElement===void 0?void 0:assertiveElement.getAttribute("aria-live"))=="assertive");const notify=T$1((mode,child)=>{return mode=="assertive"?notifyAssertive(child):notifyPolite(child);},[notifyAssertive,notifyPolite]);return{notify,context:F$1(()=>({notify}),[notify]),children:o$1(d$1,{children:[childrenPolite,childrenAssertive]})};}function useNotify(){return q(NotificationProviderContext).notify;}function useProgress(_ref78){var _value;let{labelParameters,progressIndicatorParameters:{max,value,valueText,tagIndicator}}=_ref78;const{propsInput,propsLabel,randomIdInputReturn,randomIdLabelReturn}=useLabelSynthetic({labelParameters:{...labelParameters,onLabelClick:null},randomIdInputParameters:{prefix:Prefices.progressIndicator},randomIdLabelParameters:{prefix:Prefices.progressLabel}});propsInput.tabIndex=-1;const busy=value&&value!="disabled";const disabled=value=="disabled";if(typeof value!="number"){var _max;value=null;(_max=max)!==null&&_max!==void 0?_max:max=100;}const indicatorProps=tagIndicator==="progress"?{max,value:(_value=value)!==null&&_value!==void 0?_value:undefined,"aria-valuemin":"0","aria-valuenow":value==null?undefined:"".concat(value)}:{"aria-valuemin":"0","aria-valuemax":max==null?undefined:"".concat(max),"aria-valuetext":valueText==null?undefined:"".concat(valueText),"aria-valuenow":value==null?undefined:"".concat(value),role:"progressbar"};if(disabled){indicatorProps["aria-hidden"]="true";}const labelProps={"aria-hidden":!busy?"true":undefined};const regionProps={"aria-busy":busy.toString(),"aria-describedby":randomIdInputReturn.id};return{propsIndicator:useMergedProps(indicatorProps,propsInput),propsLabel:useMergedProps(labelProps,propsLabel),propsRegion:regionProps,randomIdInputReturn,randomIdLabelReturn};}function useProgressWithHandler(_ref79){let{labelParameters,progressIndicatorParameters,asyncHandlerParameters,progressWithHandlerParameters:{forciblyPending}}=_ref79;const asyncInfo=useAsyncHandler(asyncHandlerParameters);const{propsIndicator,propsLabel,propsRegion}=useProgress({labelParameters,progressIndicatorParameters:{max:1,value:forciblyPending||asyncInfo.pending?"indeterminate":"disabled",valueText:null,...progressIndicatorParameters}});return{propsIndicator,propsLabel,propsRegion,asyncHandlerReturn:asyncInfo};}function useRadioGroup(_ref80){let{labelParameters,radioGroupParameters:{name,onSelectedValueChange,selectedValue},...restParams}=_ref80;const[selectedIndex,setSelectedIndex]=useState(null);const byName=_(new Map());const{propsInput:propsGroup1,propsLabel}=useLabelSynthetic({labelParameters:{onLabelClick:useStableCallback(()=>{rovingTabIndexReturn.focusSelf();}),...labelParameters},randomIdLabelParameters:{prefix:Prefices.radioGroupLabel},randomIdInputParameters:{prefix:Prefices.radioGroup}});h(()=>{var _byName$current$get;if(selectedValue!=null)singleSelectionReturn.changeSelectedIndex((_byName$current$get=byName.current.get(selectedValue))!==null&&_byName$current$get!==void 0?_byName$current$get:null);else singleSelectionReturn.changeSelectedIndex(null);},[selectedValue]);const{context,props:propsGroup2,singleSelectionReturn,managedChildrenReturn,rovingTabIndexReturn,...restRet}=useCompleteListNavigation({singleSelectionParameters:{initiallySelectedIndex:selectedIndex,onSelectedIndexChange:setSelectedIndex},paginatedChildrenParameters:{paginationMin:null,paginationMax:null},...restParams});useSingleSelectionDeclarative({singleSelectionReturn:{changeSelectedIndex:useStableCallback((s,r)=>{let next=typeof s=="function"?s(selectedIndex):s;if(next!=null){var _managedChildrenRetur;const nextValue=(_managedChildrenRetur=managedChildrenReturn.getChildren().getAt(next))===null||_managedChildrenRetur===void 0?void 0:_managedChildrenRetur.getValue2();onSelectedValueChange(nextValue,r);}else{onSelectedValueChange(null,r);}})},singleSelectionDeclarativeParameters:{selectedIndex}});const propsRadioGroup=useMergedProps(propsGroup1,propsGroup2,{role:"radiogroup"});return{propsRadioGroup,propsRadioGroupLabel:propsLabel,rovingTabIndexReturn,context:F$1(()=>({...context,radioContext:{name,byName:byName.current}}),[name]),managedChildrenReturn,radioGroupReturn:{selectedIndex},singleSelectionReturn,...restRet};}function useRadio(_ref81){let{radioParameters:{value},checkboxLikeParameters:{disabled},completeListNavigationChildParameters,labelParameters,managedChildParameters,singleSelectionChildParameters,context,textContentParameters,rovingTabIndexChildParameters,sortableChildParameters}=_ref81;const index=managedChildParameters.index;debugLog("useRadio",index);const onInput=useStableCallback(e=>{singleSelectionChildReturn.setThisOneSelected(e);});const{name,byName}=context.radioContext;const{tagInput,labelPosition}=labelParameters;const getValue=useStableGetter(value);const{props:listNavigationSingleSelectionChildProps,hasCurrentFocusReturn,managedChildReturn,pressParameters,rovingTabIndexChildReturn,staggeredChildReturn,singleSelectionChildReturn,refElementReturn,paginatedChildReturn}=useCompleteListNavigationChild({completeListNavigationChildParameters:{getValue2:getValue,...completeListNavigationChildParameters},managedChildParameters,context,rovingTabIndexChildParameters,sortableChildParameters,textContentParameters,singleSelectionChildParameters:{selectionMode:"focus",ariaPropName:tagInput=="input"&&labelPosition!="wrapping"?null:"aria-selected",...singleSelectionChildParameters}});const{selected:checked}=singleSelectionChildReturn;const{refElementReturn:refElementInputReturn}=useRefElement({refElementParameters:{}});const{refElementReturn:refElementLabelReturn}=useRefElement({refElementParameters:{}});const{checkboxLikeInputReturn,checkboxLikeLabelReturn,pressInputReturn,pressLabelReturn,propsInput,propsLabel,randomIdInputReturn,randomIdLabelReturn,checkboxLikeReturn}=useCheckboxLike({checkboxLikeParameters:{checked:checked!==null&&checked!==void 0?checked:false,disabled,onInput:onInput,role:"radio"},pressParameters,labelParameters,randomIdInputParameters:{prefix:Prefices.radio},randomIdLabelParameters:{prefix:Prefices.radioLabel},refElementInputReturn,refElementLabelReturn});s(()=>{byName.set(value,index);return()=>{byName.delete(value);};},[value,index]);if(tagInput=="input"){propsInput.name=name;propsInput.checked=checked!==null&&checked!==void 0?checked:false;propsInput.type="radio";}else{propsInput["aria-checked"]=(checked!==null&&checked!==void 0?checked:false).toString();}const propsIfInputHandlesFocus=useMergedProps(listNavigationSingleSelectionChildProps,propsInput);const propsInput2=labelPosition!="wrapping"?propsIfInputHandlesFocus:propsInput;const propsIfLabelHandlesFocus=useMergedProps(listNavigationSingleSelectionChildProps,propsLabel);const propsLabel2=labelPosition=="wrapping"?propsIfLabelHandlesFocus:propsLabel;return{checkboxLikeInputReturn,checkboxLikeLabelReturn,managedChildReturn,pressInputReturn,pressLabelReturn,propsInput:propsInput2,propsLabel:propsLabel2,randomIdInputReturn,randomIdLabelReturn,hasCurrentFocusReturn,staggeredChildReturn,rovingTabIndexChildReturn,refElementReturn,singleSelectionChildReturn,checkboxLikeReturn,paginatedChildReturn};}function useSlider(_ref82){let{sliderParameters:{max,min},managedChildrenParameters}=_ref82;debugLog("useSlider");const{context,managedChildrenReturn}=useManagedChildren({managedChildrenParameters});const baseIdRef=_(null);if(baseIdRef.current===null)baseIdRef.current=generateRandomId(Prefices.sliderThumb);return{context:F$1(()=>({...context,sliderContext:{min,max,baseId:baseIdRef.current}}),[min,max]),managedChildrenReturn};}function useSliderThumb(_ref83){let{managedChildParameters,context:{sliderContext:{max:maxParent,min:minParent},...context},sliderThumbParameters}=_ref83;const{index}=managedChildParameters;debugLog("useSliderThumb",managedChildParameters.index);const{managedChildReturn}=useManagedChild({managedChildParameters,context},{index});const{tag,value,max:maxOverride,min:minOverride,onValueChange,valueText,label}=sliderThumbParameters;const min=minOverride!==null&&minOverride!==void 0?minOverride:minParent;const max=maxOverride!==null&&maxOverride!==void 0?maxOverride:maxParent;let newProps=tag=="input"?{min,max,value,type:"range"}:{"aria-valuemax":"".concat(max),"aria-valuemin":"".concat(min),"aria-valuenow":"".concat(value)};newProps={...newProps,"aria-label":label,"aria-valuetext":valueText,style:{"--range-value":"".concat(value),"--range-value-text":"".concat(valueText)}};if(tag=="input"){newProps.onInput=e=>{onValueChange===null||onValueChange===void 0?void 0:onValueChange({currentTarget:e.currentTarget,target:e.target,[EventDetail]:{value:e.currentTarget.valueAsNumber}});};}else{throw new Error("Unimplemented");}return{sliderThumbReturn:{min,max},managedChildReturn,propsSliderThumb:newProps};}function useTable(_ref84){let{labelParameters,tableParameters:{selectionLimit,tagTable}}=_ref84;const[getSortBody,setSortBody]=usePassiveState(null,returnNull);const sortQueue=_([]);const[getSortColumn,setSortColumn]=usePassiveState(T$1(a=>{sortQueue.current.push(a.column);},[]),T$1(()=>{return{column:0,direction:"ascending"};},[]));const updateSortDirection=T$1(column=>{const{column:currentColumn,direction:currentDirection}=getSortColumn();const next={column,direction:column!=currentColumn?"ascending":currentDirection=="ascending"?"descending":"ascending"};setSortColumn(next);return next;},[]);const sortByColumn=T$1(column=>{var _getSortBody;const next=updateSortDirection(column);(_getSortBody=getSortBody())===null||_getSortBody===void 0?void 0:_getSortBody();return next;},[]);const{propsInput:propsLabelList,propsLabel:propsLabelLabel}=useLabelSynthetic({labelParameters:{...labelParameters,onLabelClick:null},randomIdInputParameters:{prefix:Prefices.table},randomIdLabelParameters:{prefix:Prefices.tableLabel}});return{propsTable:useMergedProps({role:tagTable=="table"?undefined:"grid","aria-multiselectable":selectionLimit=="multi"?"true":undefined},propsLabelList),propsLabel:propsLabelLabel,context:{tableContext:{sortByColumn,setSortBodyFunction:setSortBody,getCurrentSortColumn:getSortColumn}}};}function fuzzyCompare(lhs,rhs){if(lhs===rhs)return 0;if(lhs==null||rhs==null){if(lhs==null&&rhs!=null)return-1;if(lhs!=null&&rhs==null)return 1;if(lhs===null&&rhs===undefined)return 1;if(lhs===undefined&&rhs===null)return-1;}else{if(lhs==rhs)return 0;if(lhs<rhs)return-1;return 1;}return 0;}const naturalSectionTypes=new Set(["thead","tbody","tfoot"]);function useTableSection(_ref85){let{linearNavigationParameters,rovingTabIndexParameters,singleSelectionParameters,gridNavigationParameters,rearrangeableChildrenParameters,paginatedChildrenParameters,staggeredChildrenParameters,tableSectionParameters:{tagTableSection,location},context:{tableContext}}=_ref85;const{childrenHaveFocusReturn,context,linearNavigationReturn,managedChildrenReturn,props,rovingTabIndexReturn,singleSelectionReturn,typeaheadNavigationReturn,staggeredChildrenReturn,rearrangeableChildrenReturn,paginatedChildrenReturn,sortableChildrenReturn}=useCompleteGridNavigation({linearNavigationParameters,rovingTabIndexParameters,singleSelectionParameters,paginatedChildrenParameters,staggeredChildrenParameters,sortableChildrenParameters:{compare:T$1((lhs,rhs)=>{var _lhs$getSortValue,_rhs$getSortValue;return fuzzyCompare(lhs===null||lhs===void 0?void 0:(_lhs$getSortValue=lhs.getSortValue)===null||_lhs$getSortValue===void 0?void 0:_lhs$getSortValue.call(lhs),rhs===null||rhs===void 0?void 0:(_rhs$getSortValue=rhs.getSortValue)===null||_rhs$getSortValue===void 0?void 0:_rhs$getSortValue.call(rhs));},[])},typeaheadNavigationParameters:{noTypeahead:true,collator:null,typeaheadTimeout:Infinity},gridNavigationParameters,rearrangeableChildrenParameters});if(!naturalSectionTypes.has(tagTableSection)){props.role="rowgroup";}h(()=>{if(location=="body"){tableContext.setSortBodyFunction(()=>{const managedRows=managedChildrenReturn.getChildren();return()=>sortableChildrenReturn.sort(managedRows,tableContext.getCurrentSortColumn().direction);});}});return{childrenHaveFocusReturn,context:{...context,tableContext},staggeredChildrenReturn,linearNavigationReturn,managedChildrenReturn,rovingTabIndexReturn,singleSelectionReturn,rearrangeableChildrenReturn,sortableChildrenReturn,typeaheadNavigationReturn,paginatedChildrenReturn,propsTableSection:props};}function useTableRow(_ref86){let{rowAsChildOfGridParameters:{managedChildParameters,singleSelectionChildParameters,completeGridNavigationRowParameters,rovingTabIndexChildParameters,textContentParameters,context:cx1},rowAsParentOfCellsParameters:{linearNavigationParameters,rovingTabIndexParameters},tableRowParameters:{selected}}=_ref86;const{context:cx2,hasCurrentFocusReturn,rowAsChildOfGridReturn,rowAsParentOfCellsReturn,props}=useCompleteGridNavigationRow({rowAsChildOfGridParameters:{textContentParameters,context:{...cx1},managedChildParameters,singleSelectionChildParameters,completeGridNavigationRowParameters,rovingTabIndexChildParameters,sortableChildParameters:{getSortValue:useStableCallback(()=>{const currentColumn=cx1.tableContext.getCurrentSortColumn().column;const currentChild=rowAsParentOfCellsReturn.managedChildrenReturn.getChildren().getAt(currentColumn!==null&&currentColumn!==void 0?currentColumn:0);const sortValue=currentChild===null||currentChild===void 0?void 0:currentChild.getSortValue();return sortValue;})}},rowAsParentOfCellsParameters:{linearNavigationParameters,rovingTabIndexParameters,typeaheadNavigationParameters:{noTypeahead:true,collator:null,typeaheadTimeout:Infinity}}});props.role="row";return{rowAsChildOfGridReturn,rowAsParentOfCellsReturn,context:{...cx2,tableContext:cx1.tableContext},hasCurrentFocusReturn,props};}function useTableCell(_ref87){let{tableCellParameters:{tagTableCell},...p}=_ref87;const{props,...ret}=useCompleteGridNavigationCell(p);return{propsFocus:props,propsCell:{role:tagTableCell!="th"&&tagTableCell!="td"?"gridcell":undefined},...ret,tableCellReturn:{sortByThisColumn:useStableCallback(()=>{return p.context.tableContext.sortByColumn(p.managedChildParameters.index);},[])}};}function useTabs(_ref88){let{labelParameters,linearNavigationParameters,singleSelectionParameters:{onSelectedIndexChange:ssi,...singleSelectionParameters},tabsParameters:{orientation,role,localStorageKey},...restParams}=_ref88;debugLog("useTabs");const[localStorageIndex,setLocalStorageIndex]=usePersistentState(localStorageKey!==null&&localStorageKey!==void 0?localStorageKey:null,0);if(localStorageIndex!=null)singleSelectionParameters.initiallySelectedIndex=localStorageIndex;const baseId=generateRandomId("aria-tabs-");const getTabId=T$1(index=>{return baseId+"-tab-"+index;},[]);const getPanelId=T$1(index=>{return baseId+"-panel-"+index;},[]);const{context:managedChildContext,managedChildrenReturn:panelChildrenReturn}=useManagedChildren({managedChildrenParameters:{onChildrenMountChange:useStableCallback((_m,_u)=>{reevaluateClosestFit();})}});const{changeIndex:changeVisiblePanel,getCurrentIndex:getVisibleIndex,reevaluateClosestFit}=useChildrenFlag({getChildren:panelChildrenReturn.getChildren,closestFit:false,initialIndex:null,getAt:useStableCallback(i=>{var _i$getVisible;return(_i$getVisible=i.getVisible())!==null&&_i$getVisible!==void 0?_i$getVisible:false;},[]),setAt:useStableCallback((i,b,n,p)=>{return i.setVisibleIndex(n,p);},[]),isValid:returnTrue,onIndexChange:null});s(()=>{changeVisiblePanel(singleSelectionParameters.initiallySelectedIndex);},[]);const{propsInput,propsLabel,randomIdInputReturn:{id:_inputId},randomIdLabelReturn:{id:_labelId}}=useLabelSynthetic({labelParameters:{...labelParameters,onLabelClick:useStableCallback(()=>listNavRet1.rovingTabIndexReturn.focusSelf())},randomIdInputParameters:{prefix:Prefices.tablist},randomIdLabelParameters:{prefix:Prefices.tablistLabel}});const{props:listNavigationSingleSelectionProps,context,...listNavRet1}=useCompleteListNavigation({linearNavigationParameters:{navigationDirection:orientation,...linearNavigationParameters},singleSelectionParameters:{onSelectedIndexChange:useStableCallback((i,p)=>{ssi===null||ssi===void 0?void 0:ssi(i,p);changeVisiblePanel(i);setLocalStorageIndex(i);changeSelectedIndex(i,p);}),...singleSelectionParameters},paginatedChildrenParameters:{paginationMax:null,paginationMin:null},...restParams});const{singleSelectionReturn:{changeSelectedIndex}}=listNavRet1;return{contextPanels:useStableObject({...managedChildContext,tabPanelContext:useStableObject({getPanelId,getTabId,getVisibleIndex,setSelectedIndex:changeSelectedIndex})}),contextTabs:useStableObject({...context,tabsContext:useStableObject({getTabId,getPanelId,getVisibleIndex,setSelectedIndex:changeSelectedIndex})}),propsContainer:useMergedProps(listNavigationSingleSelectionProps,propsInput,{role:role!==null&&role!==void 0?role:"tablist","aria-orientation":orientation!==null&&orientation!==void 0?orientation:"horizontal"}),propsLabel,...listNavRet1};}function useTab(_ref89){let{completeListNavigationChildParameters:{focusSelf,...completeListNavigationChildParameters},managedChildParameters,textContentParameters,singleSelectionChildParameters:{selectionMode,...singleSelectionChildParameters},rovingTabIndexChildParameters,sortableChildParameters,context}=_ref89;const{props:listNavigationSingleSelectionChildProps,...listNavRet2}=useCompleteListNavigationChild({completeListNavigationChildParameters:{focusSelf,...completeListNavigationChildParameters},context,managedChildParameters,rovingTabIndexChildParameters,sortableChildParameters,textContentParameters,singleSelectionChildParameters:{ariaPropName:"aria-selected",selectionMode:selectionMode!==null&&selectionMode!==void 0?selectionMode:"foucs",...singleSelectionChildParameters}});const{pressParameters,refElementReturn}=listNavRet2;const{pressReturn}=usePress({pressParameters:{...pressParameters,focusSelf},refElementReturn});const{singleSelectionChildReturn:{selected},rovingTabIndexChildReturn:{tabbable}}=listNavRet2;const{getPanelId,getTabId}=context.tabsContext;const panelId=getPanelId(managedChildParameters.index);const tabId=getTabId(managedChildParameters.index);debugLog("useTab",managedChildParameters.index,selected.toString());return{props:useMergedProps(pressReturn.propsUnstable,listNavigationSingleSelectionChildProps,{"data-tabbable":tabbable.toString(),"data-selected":selected.toString(),role:"tab","aria-controls":panelId,id:tabId}),pressReturn,...listNavRet2};}function useTabPanel(_ref90){let{managedChildParameters,context}=_ref90;const{index}=managedChildParameters;debugLog("useTabPanel",index);const{tabPanelContext:{getVisibleIndex:g,getPanelId,getTabId}}=context;const[lastKnownVisibleIndex,setLastKnownVisibleIndex,getLastKnownVisibleIndex]=useState(g());const[isVisible,setIsVisible,getIsVisible]=useState(null);useManagedChild({context,managedChildParameters:{index}},{getVisible:useStableCallback(()=>{return getLastKnownVisibleIndex()==index;}),setVisibleIndex:useStableCallback((newIndex,prevIndex)=>{let changeIndex=newIndex==index?prevIndex:newIndex;if(changeIndex!=null)setLastKnownVisibleIndex(changeIndex);if(newIndex==index){setIsVisible(true);}else{setIsVisible(false);}}),...managedChildParameters});const panelId=getPanelId(managedChildParameters.index);const tabId=getTabId(managedChildParameters.index);return{props:useMergedProps({role:"tabpanel","aria-labelledby":tabId,id:panelId,inert:!isVisible}),tabPanelReturn:{visibleOffset:lastKnownVisibleIndex==null?null:index-lastKnownVisibleIndex,visible:isVisible,getVisible:useStableCallback(()=>{return getLastKnownVisibleIndex()===index;})}};}function useToasts(_ref91){let{managedChildrenParameters:{onChildrenMountChange:ocmu,onAfterChildLayoutEffect},toastsParameters:{visibleCount}}=_ref91;debugLog("useToasts");const currentIndexQueue=_([]);const getMaxVisibleCount=useStableGetter(visibleCount);const nextIndexToStartAt=_(0);const{refElementReturn:{getElement,propsStable}}=useRefElement({refElementParameters:{}});const{context,managedChildrenReturn,..._childInfo}=useManagedChildren({managedChildrenParameters:{onAfterChildLayoutEffect,onChildrenMountChange:ocmu}});const{getChildren:getToastQueue}=managedChildrenReturn;const toastQueue=getToastQueue();const showHighestPriorityToast=T$1(()=>{const max=Math.min(getMaxVisibleCount(),currentIndexQueue.current.length);let start=nextIndexToStartAt.current;for(let i=start;i<max;++i){const highestPriorityToast=toastQueue.getAt(currentIndexQueue.current[i]);console.assert(!!highestPriorityToast);highestPriorityToast===null||highestPriorityToast===void 0?void 0:highestPriorityToast.show();}nextIndexToStartAt.current=max;},[]);const onAnyToastMounted=T$1(toastIndex=>{var _toastQueue$getAt;currentIndexQueue.current.push(toastIndex);(_toastQueue$getAt=toastQueue.getAt(toastIndex))===null||_toastQueue$getAt===void 0?void 0:_toastQueue$getAt.setNumberAheadOfMe(currentIndexQueue.current.length-1);showHighestPriorityToast();},[]);const onAnyToastDismissed=T$1(_index=>{var _toastQueue$getAt2;const removalIndex=currentIndexQueue.current.findIndex(i=>i==_index);toastQueue.forEach(c=>{c.setNumberAheadOfMe(prev=>{if(prev<0)return prev-1;else return prev;});});(_toastQueue$getAt2=toastQueue.getAt(_index))===null||_toastQueue$getAt2===void 0?void 0:_toastQueue$getAt2.setNumberAheadOfMe(-1);toastQueue.forEach(c=>{c.setNumberAheadOfMe(prev=>{if(prev>removalIndex)return prev-1;else return prev;});});currentIndexQueue.current.splice(removalIndex,1);showHighestPriorityToast();},[]);const[_mouseOver2,setMouseOver,_getMouseOver]=useState(false);useGlobalHandler(document,"pointermove",e=>{var _getElement;const mouseOver=e.target!=null&&e.target instanceof Node&&(((_getElement=getElement())===null||_getElement===void 0?void 0:_getElement.contains(e.target))||getElement()==e.target);setMouseOver(mouseOver);});const toastContext={onAnyToastDismissed,getMaxVisibleCount,onAnyToastMounted};const props=useMergedProps(useMergedProps(propsStable,{class:"toasts-container"}));return{context:{...context,toastContext},managedChildrenReturn,props};}function useToast(_ref92){let{toastParameters:{politeness,timeout,children},managedChildParameters:{index,..._managedChildParameters},context}=_ref92;const{getMaxVisibleCount,onAnyToastDismissed,onAnyToastMounted}=context.toastContext;debugLog("useToast",index);const[numberOfToastsAheadOfUs,setNumberOfToastsAheadOfUs]=useState(Infinity);const getIndex=useStableGetter(index);const[dismissed2,setDismissed2,getDismissed2]=useState(false);const[showing2,setShowing2,getShowing2]=useState(false);const[triggerIndex,setTriggerIndex]=useState(1);const notify=useNotify();const dismiss=T$1(()=>{if(!getDismissed2())onAnyToastDismissed(getIndex());setDismissed2(true);setShowing2(false);},[]);const show=useStableCallback(()=>{notify("polite",o$1("p",{children:children}));setShowing2(true);});h(()=>{if(!getDismissed2()&&!getShowing2()){if(numberOfToastsAheadOfUs>=0&&numberOfToastsAheadOfUs<getMaxVisibleCount()){show();}}},[numberOfToastsAheadOfUs]);const focus=T$1(()=>{const element=getElement();if(element){var _firstFocusable$focus;const firstFocusable=findFirstFocusable(element);firstFocusable===null||firstFocusable===void 0?void 0:(_firstFocusable$focus=firstFocusable.focus)===null||_firstFocusable$focus===void 0?void 0:_firstFocusable$focus.call(firstFocusable);}},[]);useManagedChild({managedChildParameters:{index},context},{index,focus,setNumberAheadOfMe:setNumberOfToastsAheadOfUs,show});const resetDismissTimer=T$1(()=>{setTriggerIndex(i=>++i);},[]);h(()=>{onAnyToastMounted(index);},[]);const dismissTimeoutKey=timeout==null||numberOfToastsAheadOfUs!=0?null:isFinite(timeout)?timeout:timeout>0?null:0;useTimeout({timeout:dismissTimeoutKey,callback:()=>{if(showing2)dismiss();},triggerIndex:showing2?triggerIndex:false});const{refElementReturn:{getElement,propsStable}}=useRefElement({refElementParameters:{}});return{toastReturn:{dismissed:dismissed2,showing:showing2,numberOfToastsAheadOfUs,dismiss,resetDismissTimer},props:propsStable};}function useTooltip(_ref93){let{tooltipParameters:{onStatus,tooltipSemanticType},escapeDismissParameters}=_ref93;const[openLocal,setOpenLocal]=useState(false);const[getState,setState]=usePassiveState(useStableCallback((nextState,prevState)=>{switch(nextState){case"focused-popup":case"focused-trigger":onStatus("focus");break;case"hovering-popup":case"hovering-trigger":onStatus("hover");break;default:onStatus(null);break;}setOpenLocal(!!nextState);}),returnNull);let{propsReferencer:propsTrigger,propsSource:propsPopup}=useRandomId({randomIdParameters:{prefix:Prefices.tooltip,otherReferencerProp:tooltipSemanticType=="description"?"aria-describedby":"aria-labelledby"}});const{refElementReturn:{getElement:getTriggerElement,propsStable:triggerRefProps}}=useRefElement({refElementParameters:{}});const{refElementReturn:{getElement:getPopupElement,propsStable:popupRefProps}}=useRefElement({refElementParameters:{}});const stateIsMouse=T$1(()=>{var _getState;return((_getState=getState())===null||_getState===void 0?void 0:_getState.startsWith("h"))||false;},[]);const stateIsFocus=T$1(()=>{var _getState2;return((_getState2=getState())===null||_getState2===void 0?void 0:_getState2.startsWith("f"))||false;},[]);const onHoverChanged=T$1((hovering,which)=>{if(hovering){setState("hovering-".concat(which));}else{setState(null);}},[]);const onCurrentFocusedInnerChanged=T$1((focused,which)=>{if(!stateIsMouse()){if(focused){setState("focused-".concat(which));}else{setState(null);}}else{setState(null);}},[stateIsMouse]);const onTriggerCurrentFocusedInnerChanged=T$1(focused=>onCurrentFocusedInnerChanged(focused,"trigger"),[onCurrentFocusedInnerChanged]);const onPopupCurrentFocusedInnerChanged=T$1(focused=>onCurrentFocusedInnerChanged(focused,"popup"),[onCurrentFocusedInnerChanged]);const{hasCurrentFocusReturn:triggerFocusReturn}=useHasCurrentFocus({hasCurrentFocusParameters:{onCurrentFocusedChanged:null,onCurrentFocusedInnerChanged:onTriggerCurrentFocusedInnerChanged},refElementReturn:{getElement:getTriggerElement}});const{hasCurrentFocusReturn:popupFocusReturn}=useHasCurrentFocus({hasCurrentFocusParameters:{onCurrentFocusedChanged:null,onCurrentFocusedInnerChanged:onPopupCurrentFocusedInnerChanged},refElementReturn:{getElement:getPopupElement}});const{refElementPopupReturn,refElementSourceReturn}=useDismiss({dismissParameters:{closeOnBackdrop:true,closeOnLostFocus:false,closeOnEscape:true,open:openLocal,onClose:useStableCallback(reason=>{setState(null);})},escapeDismissParameters});const otherPopupProps={onPointerEnter:T$1(()=>{onHoverChanged(true,"popup");},[])};const otherTriggerProps={onPointerEnter:T$1(()=>{onHoverChanged(true,"trigger");},[]),onClick:T$1(e=>{if(e.currentTarget&&"focus"in e.currentTarget)e.currentTarget.focus();},[])};useGlobalHandler(document,"pointermove",!openLocal?null:e=>{const popupElement=getPopupElement();const triggerElement=getTriggerElement();const mouseElement=e.target;let overPopup=popupElement===null||popupElement===void 0?void 0:popupElement.contains(mouseElement);let overTrigger=triggerElement===null||triggerElement===void 0?void 0:triggerElement.contains(mouseElement);if(!overPopup&&!overTrigger&&stateIsMouse()){onHoverChanged(false,"popup");}},{capture:true,passive:true});return{propsPopup:useMergedProps(popupRefProps,propsPopup,popupFocusReturn.propsStable,{role:"tooltip"},otherPopupProps,refElementPopupReturn.propsStable),propsTrigger:useMergedProps(triggerRefProps,propsTrigger,triggerFocusReturn.propsStable,{onClick:useStableCallback(e=>{var _e$currentTarget,_e$currentTarget$focu;return(_e$currentTarget=e.currentTarget)===null||_e$currentTarget===void 0?void 0:(_e$currentTarget$focu=_e$currentTarget.focus)===null||_e$currentTarget$focu===void 0?void 0:_e$currentTarget$focu.call(_e$currentTarget);})},otherTriggerProps,refElementSourceReturn.propsStable),tooltipReturn:{getState,stateIsFocus,stateIsMouse}};}function memoForwardRef(fn){return x(k(fn));}const ContextDefaults={collator:E(null),pageNavigationSize:E(0.1),typeaheadTimeout:E(1000),noTypeahead:E(false),getIndex:E(v=>v.props.index),disableArrowKeys:E(false),disableHomeEndKeys:E(false),getWindow:E(()=>globalThis.window),focusOpener:E(e=>{var _e$focus4;return e===null||e===void 0?void 0:(_e$focus4=e.focus)===null||_e$focus4===void 0?void 0:_e$focus4.call(e);}),getText:E(e=>{var _e$textContent;return(_e$textContent=e===null||e===void 0?void 0:e.textContent)!==null&&_e$textContent!==void 0?_e$textContent:"";}),selectionMode:E("activation")};function useDefault(context,userValue){const defaultValue=q(ContextDefaults[context]);return userValue!==null&&userValue!==void 0?userValue:defaultValue;}const ParentDepthContext=E(0);const AccordionSectionContext=E(null);const Accordion=memoForwardRef(function Accordion(_ref94,ref){let{disableArrowKeys,disableHomeEndKeys,initialIndex,navigationDirection,onAfterChildLayoutEffect,onChildrenMountChange,navigatePastEnd,navigatePastStart,pageNavigationSize,localStorageKey,collator,noTypeahead,typeaheadTimeout,isValid,render,..._rest}=_ref94;const info=useAccordion({accordionParameters:{initialIndex,localStorageKey:localStorageKey!==null&&localStorageKey!==void 0?localStorageKey:null},typeaheadNavigationParameters:{isValid:isValid||returnTrue,collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)},linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigationDirection,navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},managedChildrenParameters:{onAfterChildLayoutEffect,onChildrenMountChange}});A(ref,()=>info);return o$1(AccordionSectionContext.Provider,{value:info.context,children:render(info)});});const AccordionSection=memoForwardRef(function AccordionSection(_ref95,ref){let{open,index,tagButton,disabled,bodyRole,onPress,hidden,getText,render}=_ref95;const context=q(AccordionSectionContext);const info=useAccordionSection({buttonParameters:{disabled:disabled!==null&&disabled!==void 0?disabled:false,tagButton,onPress:onPress!==null&&onPress!==void 0?onPress:null},accordionSectionParameters:{open,bodyRole:bodyRole!==null&&bodyRole!==void 0?bodyRole:"region"},managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},pressParameters:{allowRepeatPresses:false},refElementParameters:{},context,textContentParameters:{hidden:hidden||false,getText:useDefault("getText",getText)}});A(ref,()=>info);return render(info);});const Button=memoForwardRef(function Button(_ref96,ref){let{tagButton,onPress,pressed,render,disabled,onElementChange,onMount,onUnmount,allowRepeatPresses,longPressThreshold}=_ref96;const info=useButton({buttonParameters:{role:"button",tagButton:tagButton,onPress:onPress!==null&&onPress!==void 0?onPress:null,pressed,disabled:disabled!==null&&disabled!==void 0?disabled:false},pressParameters:{longPressThreshold,allowRepeatPresses},refElementParameters:{onElementChange,onMount,onUnmount}});A(ref,()=>info);return render(info);});function defaultRenderCheckboxLike(_ref97){let{labelPosition,tagInput,tagLabel,makePropsInput,makePropsLabel}=_ref97;return function(info){const inputProps=makePropsInput(info);const{children,...labelProps}=makePropsLabel(info);if(labelPosition=="wrapping"){const input=v$1(tagInput,inputProps);const label=v$1(tagLabel,{...labelProps,children:o$1(d$1,{children:[input,children]})});return o$1(d$1,{children:label});}else if(labelPosition=="separate"){const input=v$1(tagInput,inputProps);const label=v$1(tagLabel,{children,...labelProps});return o$1(d$1,{children:[input,label]});}else{console.assert(!!inputProps["aria-label"]);return v$1(tagInput,inputProps);}};}const Checkbox=memoForwardRef(function Checkbox(_ref98,ref){let{checked,disabled,tagLabel,labelPosition,tagInput,ariaLabel,onCheckedChange,render}=_ref98;const checkbox=useCheckbox({checkboxLikeParameters:{checked:checked!==null&&checked!==void 0?checked:false,disabled:disabled!==null&&disabled!==void 0?disabled:false},checkboxParameters:{onCheckedChange},labelParameters:{ariaLabel:ariaLabel,labelPosition,tagInput,tagLabel},pressParameters:{excludeSpace:returnFalse}});A(ref,()=>checkbox);return render(checkbox);});const UseCheckboxGroupChildContext=E(null);const CheckboxGroup=memoForwardRef(function CheckboxGroup(_ref99,ref){let{render,collator,disableArrowKeys,disableHomeEndKeys,navigationDirection,noTypeahead,typeaheadTimeout,onTabbableIndexChange,compare,staggered,getIndex,untabbable,navigatePastEnd,navigatePastStart,pageNavigationSize,..._rest}=_ref99;const info=useCheckboxGroup({linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",navigationDirection,pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},staggeredChildrenParameters:{staggered:staggered||false},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)}});A(ref,()=>info);return o$1(UseCheckboxGroupChildContext.Provider,{value:info.context,children:render(info)});});const CheckboxGroupParent=memoForwardRef(function CheckboxGroupParent(_ref100,ref){let{render,index,focusSelf,hidden,getText,getSortValue,..._rest}=_ref100;const context=q(UseCheckboxGroupChildContext);console.assert(context!=null,"This CheckboxGroupParent is not contained within a CheckboxGroup");const info=useCheckboxGroupParent({completeListNavigationChildParameters:{focusSelf,checkboxInfo:{checkboxChildType:"parent"}},context,managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue},textContentParameters:{getText:useDefault("getText",getText)}});A(ref,()=>info);return render(info);});const CheckboxGroupChild=memoForwardRef(function CheckboxGroupChild(_ref101,ref){let{index,render,checked,onChangeFromParent,getSortValue,hidden,getText,focusSelf,..._rest}=_ref101;const context=q(UseCheckboxGroupChildContext);console.assert(context!=null,"This CheckboxGroupChild is not contained within a CheckboxGroup");const info=useCheckboxGroupChild({checkboxGroupChild:{checked,onChangeFromParent},completeListNavigationChildParameters:{focusSelf},textContentParameters:{getText:useDefault("getText",getText)},context,managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue}});A(ref,()=>info);return render(info);});function defaultRenderPortal(_ref102){var _portalRef$current;let{portalId,children}=_ref102;const portalRef=_(null);(_portalRef$current=portalRef.current)!==null&&_portalRef$current!==void 0?_portalRef$current:portalRef.current=document.getElementById(portalId);if(portalRef.current)return j(children,portalRef.current);else return children;}const Dialog=memoForwardRef(function Dialog(_ref103,ref){let{onClose,open,closeOnBackdrop,closeOnEscape,focusOpener,getWindow,parentDepth,focusPopup,ariaLabel,render}=_ref103;const defaultParentDepth=q(ParentDepthContext);let myDepth=(parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth)+1;const info=useDialog({dismissParameters:{closeOnBackdrop:closeOnBackdrop!==null&&closeOnBackdrop!==void 0?closeOnBackdrop:true,closeOnEscape:closeOnEscape!==null&&closeOnEscape!==void 0?closeOnEscape:true,onClose,open},escapeDismissParameters:{getWindow:useDefault("getWindow",getWindow),parentDepth:parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth},focusTrapParameters:{focusOpener:useDefault("focusOpener",focusOpener),focusPopup},labelParameters:{ariaLabel}});A(ref,()=>info);return o$1(ParentDepthContext.Provider,{value:myDepth,children:render(info)});});memoForwardRef(function Drawer(_ref104,ref){let{closeOnBackdrop,closeOnEscape,closeOnLostFocus,focusOpener,focusPopup,getWindow,onClose,open,parentDepth,render,trapActive,ariaLabel}=_ref104;const defaultParentDepth=q(ParentDepthContext);let myDepth=(parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth)+1;const info=useDrawer({dismissParameters:{closeOnBackdrop:closeOnBackdrop!==null&&closeOnBackdrop!==void 0?closeOnBackdrop:true,closeOnEscape:closeOnEscape!==null&&closeOnEscape!==void 0?closeOnEscape:true,closeOnLostFocus:closeOnLostFocus!==null&&closeOnLostFocus!==void 0?closeOnLostFocus:true,onClose,open},escapeDismissParameters:{getWindow:useDefault("getWindow",getWindow),parentDepth:parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth},focusTrapParameters:{focusOpener:useDefault("focusOpener",focusOpener),focusPopup,trapActive:trapActive!==null&&trapActive!==void 0?trapActive:false},labelParameters:{ariaLabel}});A(ref,()=>info);return o$1(ParentDepthContext.Provider,{value:myDepth,children:render(info)});});const GridlistContext=E(null);const GridlistRowContext=E(null);const Gridlist=memoForwardRef(function GridlistU(_ref105,ref){let{collator,disableArrowKeys,disableHomeEndKeys,noTypeahead,onTabbableIndexChange,groupingType,typeaheadTimeout,selectedIndex,navigatePastEnd,navigatePastStart,onSelectedIndexChange,pageNavigationSize,selectionLimit,untabbable,paginationMax,paginationMin,staggered,compare,getIndex,onTabbableColumnChange,ariaLabel,render}=_ref105;const info=useGridlist({linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},staggeredChildrenParameters:{staggered:staggered||false},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)},gridlistParameters:{selectionLimit,groupingType,selectedIndex,onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null},gridNavigationParameters:{onTabbableColumnChange:onTabbableColumnChange!==null&&onTabbableColumnChange!==void 0?onTabbableColumnChange:null},labelParameters:{ariaLabel},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},paginatedChildrenParameters:{paginationMax:paginationMax!==null&&paginationMax!==void 0?paginationMax:null,paginationMin:paginationMin!==null&&paginationMin!==void 0?paginationMin:null}});A(ref,()=>info);return o$1(GridlistContext.Provider,{value:info.context,children:render(info)});});const GridlistRow=memoForwardRef(function GridlistRowU(_ref106,ref){let{index,collator,disableArrowKeys,ariaPropName,disabled,hidden,navigatePastEnd,navigatePastStart,noTypeahead,onTabbableIndexChange,selected,selectionMode,typeaheadTimeout,getSortValue,getText,render,subInfo}=_ref106;const context=q(GridlistContext);console.assert(context!=null,"This GridlistRow is not contained within a Gridlist");const info=useGridlistRow({rowAsChildOfGridParameters:{completeGridNavigationRowParameters:{...subInfo},context,managedChildParameters:{index},gridlistRowParameters:{selected:selected!==null&&selected!==void 0?selected:null},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue},singleSelectionChildParameters:{disabled:disabled!==null&&disabled!==void 0?disabled:false,ariaPropName,selectionMode:useDefault("selectionMode",selectionMode)},textContentParameters:{getText:useDefault("getText",getText)}},rowAsParentOfCellsParameters:{linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap"},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)}}});A(ref,()=>info);return o$1(GridlistRowContext.Provider,{value:info.context,children:render(info)});});const GridlistChild=memoForwardRef(function GridlistChild(_ref107,ref){let{index,colSpan,focusSelf,hidden,getText,onPressSync,render,subInfo}=_ref107;const context=q(GridlistRowContext);console.assert(context!=null,"This GridlistChild is not contained within a GridlistRow that is contained within a Gridlist");const defaultFocusSelf=useStableCallback(e=>{var _e$focus5;(_e$focus5=e.focus)===null||_e$focus5===void 0?void 0:_e$focus5.call(e);},[]);const info=useGridlistCell({completeGridNavigationCellParameters:{focusSelf:focusSelf!==null&&focusSelf!==void 0?focusSelf:defaultFocusSelf,...subInfo},context,gridNavigationCellParameters:{colSpan:colSpan!==null&&colSpan!==void 0?colSpan:1},textContentParameters:{getText:useDefault("getText",getText)},managedChildParameters:{index},pressParameters:{onPressSync},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false}});A(ref,()=>info);return render(info);});const HeadingLevelContext=E(0);const Heading=x(function Heading(_ref108){let{children,heading,tag,...props}=_ref108;const headingLevelBeforeUs=q(HeadingLevelContext);const newHeadingLevel=headingLevelBeforeUs+1;if(tag==null){if(newHeadingLevel<=6){tag="h".concat(newHeadingLevel);}else{tag='div';}}return o$1(d$1,{children:o$1(HeadingReset,{newLevel:headingLevelBeforeUs+1,children:[v$1(tag,props,heading),children]})});});const HeadingReset=x(function HeadingReset(_ref109){let{newLevel,children}=_ref109;return o$1(HeadingLevelContext.Provider,{value:newLevel-1,children:children});});function useListbox(_ref110){let{labelParameters,listboxParameters:{selectionLimit,groupingType,selectedIndex,onSelectedIndexChange},...restParams}=_ref110;useEnsureStability("useListbox",selectionLimit);const{propsInput:propsLabelList,propsLabel:propsLabelLabel,randomIdInputReturn:{id:_inputId},randomIdLabelReturn:{id:_labelId}}=useLabelSynthetic({labelParameters:{...labelParameters,onLabelClick:useStableCallback(()=>{rovingTabIndexReturn.focusSelf();})},randomIdInputParameters:{prefix:Prefices.listbox},randomIdLabelParameters:{prefix:Prefices.listboxLabel}});let{context,props,rovingTabIndexReturn,singleSelectionReturn,...restRet}=useCompleteListNavigation({singleSelectionParameters:{initiallySelectedIndex:selectedIndex,onSelectedIndexChange},...restParams});useSingleSelectionDeclarative({singleSelectionDeclarativeParameters:{selectedIndex},singleSelectionReturn:{changeSelectedIndex:singleSelectionReturn.changeSelectedIndex}});if(groupingType=="group")props.role="group";else if(groupingType=="with-groups"){props={role:"listbox"};context=null;}else{props.role="listbox";}if(selectionLimit=="multi")console.assert(singleSelectionReturn.getSelectedIndex()==null);return{...restRet,context:useStableObject({...context,listboxContext:useStableObject({selectionLimit})}),rovingTabIndexReturn,singleSelectionReturn,propsListbox:useMergedProps(props,propsLabelList,{"aria-multiselectable":selectionLimit=="multi"?"true":undefined}),propsListboxLabel:propsLabelLabel};}function useListboxItem(_ref111){let{context:{listboxContext:{selectionLimit},...context},listboxParameters:{selected},pressParameters:{onPressSync:opsu},...restParams}=_ref111;const{pressParameters:{excludeSpace,onPressSync:opsss},props,refElementReturn,...restRet}=useCompleteListNavigationChild({context,...restParams});const{pressReturn}=usePress({refElementReturn,pressParameters:{onPressSync:useStableCallback(e=>{if(selectionLimit=="single")opsss===null||opsss===void 0?void 0:opsss(e);opsu===null||opsu===void 0?void 0:opsu(e);}),excludeSpace,focusSelf:e=>{var _e$focus6;return e===null||e===void 0?void 0:(_e$focus6=e.focus)===null||_e$focus6===void 0?void 0:_e$focus6.call(e);}}});if(selectionLimit=="single")console.assert(selected==null);props.role="option";return{pressReturn,refElementReturn,props:useMergedProps(props,pressReturn.propsUnstable),...restRet};}const ListboxContext=E(null);const ListboxGroupContext=E(null);const GroupedListbox=x(function GroupedListbox(_ref112){let{ariaLabel,selectionLimit,navigationDirection,render}=_ref112;const info=useListbox({labelParameters:{ariaLabel},linearNavigationParameters:{navigatePastEnd:"passthrough",navigatePastStart:"passthrough",navigationDirection,disableArrowKeys:false,disableHomeEndKeys:true,pageNavigationSize:1},staggeredChildrenParameters:{staggered:false},paginatedChildrenParameters:{paginationMax:null,paginationMin:null},listboxParameters:{selectionLimit,groupingType:"with-groups",selectedIndex:null,onSelectedIndexChange:null},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",undefined)},rovingTabIndexParameters:{onTabbableIndexChange:null,untabbable:false},sortableChildrenParameters:{compare:null},typeaheadNavigationParameters:{collator:null,noTypeahead:true,typeaheadTimeout:Infinity}});info.context;return o$1(ListboxGroupContext.Provider,{value:info,children:render(info)});});const Listbox=memoForwardRef(function Listbox(_ref113){let{ariaLabel,collator,compare,disableArrowKeys,disableHomeEndKeys,getIndex,selectedIndex,navigatePastEnd,navigatePastStart,navigationDirection,noTypeahead,onSelectedIndexChange,onTabbableIndexChange,staggered,pageNavigationSize,paginationMax,paginationMin,selectionLimit,untabbable,typeaheadTimeout,render}=_ref113;const listboxGroupInfo=q(ListboxGroupContext);const info=useListbox({labelParameters:{ariaLabel},staggeredChildrenParameters:{staggered:staggered||false},linearNavigationParameters:{navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",navigationDirection,disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},paginatedChildrenParameters:{paginationMax:paginationMax!==null&&paginationMax!==void 0?paginationMax:null,paginationMin:paginationMin!==null&&paginationMin!==void 0?paginationMin:null},listboxParameters:{selectionLimit,groupingType:listboxGroupInfo==null?"without-groups":"group",selectedIndex,onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)}});return o$1(ListboxContext.Provider,{value:info.context,children:render(info)});});const ListboxItem=memoForwardRef(function ListboxItem(_ref114){let{ariaPropName,disabled,focusSelf,onPressSync,getText,hidden,index,render,selected,selectionMode,getSortValue,...subInfo}=_ref114;const context=q(ListboxContext);console.assert(context!=null,"This ListboxItem is not contained within a Listbox");const focusSelfDefault=T$1(e=>{e===null||e===void 0?void 0:e.focus();},[]);const info=useListboxItem({completeListNavigationChildParameters:{focusSelf:focusSelf!==null&&focusSelf!==void 0?focusSelf:focusSelfDefault,...subInfo},context,listboxParameters:{selected:selected!==null&&selected!==void 0?selected:null},pressParameters:{onPressSync},managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue:getSortValue},textContentParameters:{getText:useDefault("getText",getText)},singleSelectionChildParameters:{disabled:disabled!==null&&disabled!==void 0?disabled:false,ariaPropName,selectionMode:useDefault("selectionMode",selectionMode)}});return render(info);});const MenuItemContext=E(null);const Menu=memoForwardRef(function Menu(_ref115,ref){let{collator,disableArrowKeys,disableHomeEndKeys,noTypeahead,typeaheadTimeout,orientation,onClose,open,openDirection,onTabbableIndexChange,closeOnBackdrop,closeOnEscape,closeOnLostFocus,compare,getIndex,selectedIndex,navigatePastEnd,navigatePastStart,onSelectedIndexChange,pageNavigationSize,parentDepth,untabbable,staggered,onOpen,getWindow,render}=_ref115;const defaultParentDepth=q(ParentDepthContext);let myDepth=(parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth)+1;const info=useMenu({linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap"},staggeredChildrenParameters:{staggered:staggered||false},dismissParameters:{closeOnBackdrop:closeOnBackdrop!==null&&closeOnBackdrop!==void 0?closeOnBackdrop:true,closeOnEscape:closeOnEscape!==null&&closeOnEscape!==void 0?closeOnEscape:true,closeOnLostFocus:closeOnLostFocus!==null&&closeOnLostFocus!==void 0?closeOnLostFocus:true,onClose,open},escapeDismissParameters:{getWindow:useDefault("getWindow",getWindow),parentDepth:parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},menuParameters:{openDirection,onOpen},menuSurfaceParameters:{},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)},singleSelectionDeclarativeParameters:{selectedIndex:selectedIndex!==null&&selectedIndex!==void 0?selectedIndex:null},toolbarParameters:{orientation,onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null}});A(ref,()=>info);return o$1(ParentDepthContext.Provider,{value:myDepth,children:o$1(MenuItemContext.Provider,{value:info.context,children:render(info)})});});const MenuItem=memoForwardRef(function MenuItem(_ref116,ref){let{index,hidden,getSortValue,onPress,getText,role,focusSelf,ariaPropName,selectionMode,disabled,render,subInfo}=_ref116;const context=q(MenuItemContext);console.assert(context!=null,"This MenuItem is not contained within a Menubar/Menu");const defaultFocusSelf=T$1(e=>{var _e$focus7;return e===null||e===void 0?void 0:(_e$focus7=e.focus)===null||_e$focus7===void 0?void 0:_e$focus7.call(e);},[]);const info=useMenuItem({completeListNavigationChildParameters:{focusSelf:focusSelf!==null&&focusSelf!==void 0?focusSelf:defaultFocusSelf,...subInfo},context,managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue},textContentParameters:{getText:useDefault("getText",getText)},menuItemParameters:{onPress:onPress!==null&&onPress!==void 0?onPress:null,role:role!==null&&role!==void 0?role:"menuitem"},singleSelectionChildParameters:{ariaPropName,selectionMode,disabled:disabled!==null&&disabled!==void 0?disabled:false}});A(ref,()=>info);return o$1(d$1,{children:render(info)});});const MenubarItemContext=E(null);memoForwardRef(function MenubarU(_ref117,ref){let{render,collator,disableArrowKeys,disableHomeEndKeys,navigatePastEnd,navigatePastStart,pageNavigationSize,orientation,staggered,noTypeahead,onTabbableIndexChange,compare,getIndex,untabbable,selectedIndex,onSelectedIndexChange,typeaheadTimeout,role,ariaLabel}=_ref117;const info=useMenubar({linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},toolbarParameters:{orientation,onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null,role:role!==null&&role!==void 0?role:"menubar"},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},staggeredChildrenParameters:{staggered:staggered||false},singleSelectionDeclarativeParameters:{selectedIndex:selectedIndex!==null&&selectedIndex!==void 0?selectedIndex:null},sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},labelParameters:{ariaLabel}});A(ref,()=>info);return o$1(MenubarItemContext.Provider,{value:info.context,children:render(info)});});memoForwardRef(function MenuItemU(_ref118,ref){let{index,render,ariaPropName,focusSelf,selectionMode,hidden,getText,disabled,onPress,getSortValue,role,subInfo}=_ref118;const context=q(MenubarItemContext);console.assert(context!=null,"This MenuItem is not contained within a Menubar/Menu");const defaultFocusSelf=T$1(e=>{var _e$focus8;return e===null||e===void 0?void 0:(_e$focus8=e.focus)===null||_e$focus8===void 0?void 0:_e$focus8.call(e);},[]);const info=useMenubarChild({completeListNavigationChildParameters:{focusSelf:focusSelf!==null&&focusSelf!==void 0?focusSelf:defaultFocusSelf,...subInfo},context,managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue},textContentParameters:{getText:useDefault("getText",getText)},menuItemParameters:{onPress:onPress!==null&&onPress!==void 0?onPress:null,role:role!==null&&role!==void 0?role:"menuitem"},singleSelectionChildParameters:{ariaPropName,selectionMode,disabled:disabled!==null&&disabled!==void 0?disabled:false}});A(ref,()=>info);return o$1(d$1,{children:render(info)});});memoForwardRef(function Progress(_ref119,ref){let{tagIndicator,ariaLabel,max,render,value,valueText}=_ref119;const info=useProgress({labelParameters:{ariaLabel},progressIndicatorParameters:{max:max!==null&&max!==void 0?max:100,value:value!==null&&value!==void 0?value:"indeterminate",valueText:valueText!==null&&valueText!==void 0?valueText:null,tagIndicator}});A(ref,()=>info);return render(info);});memoForwardRef(function ProgressWithHandler(_ref120,ref){let{ariaLabel,forciblyPending,render,tagIndicator,asyncHandler,capture,debounce,throttle}=_ref120;const info=useProgressWithHandler({asyncHandlerParameters:{asyncHandler,capture,debounce,throttle},labelParameters:{ariaLabel},progressIndicatorParameters:{tagIndicator},progressWithHandlerParameters:{forciblyPending:forciblyPending!==null&&forciblyPending!==void 0?forciblyPending:false}});A(ref,()=>info);return render(info);});const RadioContext=E(null);const RadioGroup=memoForwardRef(function RadioGroup(_ref121,ref){let{render,name,onSelectedValueChange,collator,disableArrowKeys,disableHomeEndKeys,navigationDirection,noTypeahead,typeaheadTimeout,ariaLabel,compare,staggered,getIndex,navigatePastEnd,navigatePastStart,selectedValue,untabbable,onTabbableIndexChange,pageNavigationSize}=_ref121;const info=useRadioGroup({linearNavigationParameters:{navigationDirection,navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},staggeredChildrenParameters:{staggered:staggered||false},labelParameters:{ariaLabel},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},radioGroupParameters:{name,onSelectedValueChange,selectedValue},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)}});A(ref,()=>info);return o$1(RadioContext.Provider,{value:info.context,children:render(info)});});const Radio=memoForwardRef(function Radio(_ref122,ref){let{disabled,index,render,value,ariaLabel,focusSelf,labelPosition,hidden,tagInput,tagLabel,getText}=_ref122;const context=q(RadioContext);console.assert(context!=null,"This Radio is not contained within a RadioGroup");const getValue=useStableGetter(value);const defaultFocusSelf=()=>info.checkboxLikeReturn.focusSelf();const info=useRadio({managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue:getValue},radioParameters:{value},checkboxLikeParameters:{disabled:disabled!==null&&disabled!==void 0?disabled:false},completeListNavigationChildParameters:{focusSelf:focusSelf!==null&&focusSelf!==void 0?focusSelf:defaultFocusSelf},context,labelParameters:{ariaLabel,labelPosition,tagInput,tagLabel},singleSelectionChildParameters:{disabled:!!disabled},textContentParameters:{getText:useDefault("getText",getText)}});A(ref,()=>info);return render(info);});const SliderThumbContext=E(null);const Slider=memoForwardRef(function Slider(_ref123,ref){let{max,min,onAfterChildLayoutEffect,onChildrenMountChange,children}=_ref123;const info=useSlider({managedChildrenParameters:{onAfterChildLayoutEffect,onChildrenMountChange},sliderParameters:{max,min}});A(ref,()=>info);return o$1(SliderThumbContext.Provider,{value:info.context,children:children});});const SliderThumb=memoForwardRef(function SliderThumbU(_ref124,ref){let{label,tag,value,max,min,onValueChange,index,render,valueText}=_ref124;const context=q(SliderThumbContext);console.assert(context!=null,"This SliderThumb is not contained within a Slider");const info=useSliderThumb({context,managedChildParameters:{index},sliderThumbParameters:{label,tag,value,max,min,onValueChange,valueText}});A(ref,()=>info);return render(info);});const TableContext=E(null);const TableSectionContext=E(null);const TableRowContext=E(null);const Table=memoForwardRef(function TableU(_ref125,ref){let{ariaLabel,selectionLimit,tagTable,render}=_ref125;const info=useTable({labelParameters:{ariaLabel},tableParameters:{selectionLimit,tagTable}});A(ref,()=>info);return o$1(TableContext.Provider,{value:info.context,children:render(info)});});const TableSection=memoForwardRef(function TableSection(_ref126){let{disableArrowKeys,disableHomeEndKeys,getIndex,initiallySelectedIndex,untabbable,navigatePastEnd,navigatePastStart,onSelectedIndexChange,onTabbableColumnChange,onTabbableIndexChange,pageNavigationSize,paginationMax,paginationMin,staggered,render,location,tagTableSection}=_ref126;const info=useTableSection({gridNavigationParameters:{onTabbableColumnChange:onTabbableColumnChange!==null&&onTabbableColumnChange!==void 0?onTabbableColumnChange:null},staggeredChildrenParameters:{staggered:staggered||false},linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},paginatedChildrenParameters:{paginationMax:paginationMax!==null&&paginationMax!==void 0?paginationMax:null,paginationMin:paginationMin!==null&&paginationMin!==void 0?paginationMin:null},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},singleSelectionParameters:{initiallySelectedIndex:initiallySelectedIndex!==null&&initiallySelectedIndex!==void 0?initiallySelectedIndex:null,onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null},context:q(TableContext),tableSectionParameters:{tagTableSection,location}});return o$1(TableSectionContext.Provider,{value:info.context,children:render(info)});});const TableRow=memoForwardRef(function TableRowU(_ref127,ref){let{index,getText,tagTableRow,disableArrowKeys,disableHomeEndKeys,onTabbableIndexChange,ariaPropName,disabled,navigatePastEnd,navigatePastStart,selected,selectionMode,hidden,render}=_ref127;const cx1=q(TableSectionContext);console.assert(cx1!=null,"This TableRow is not contained within a TableSection");const info=useTableRow({rowAsChildOfGridParameters:{completeGridNavigationRowParameters:{},context:cx1,managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},singleSelectionChildParameters:{ariaPropName,selectionMode:useDefault("selectionMode",selectionMode),disabled:disabled!==null&&disabled!==void 0?disabled:false},textContentParameters:{getText:useDefault("getText",getText)}},rowAsParentOfCellsParameters:{linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap"},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null}},tableRowParameters:{selected:selected!==null&&selected!==void 0?selected:null,tagTableRow}});A(ref,()=>info);return o$1(TableRowContext.Provider,{value:info.context,children:render(info)});});const TableCell=memoForwardRef(function TableCell(_ref128,ref){let{index,getText,focusSelf,hidden,tagTableCell,render,colSpan,getSortValue}=_ref128;const context=q(TableRowContext);console.assert(context!=null,"This TableCell is not contained within a TableRow");const defaultFocusSelf=useStableCallback(e=>{var _e$focus9;(_e$focus9=e.focus)===null||_e$focus9===void 0?void 0:_e$focus9.call(e);},[]);const info=useTableCell({completeGridNavigationCellParameters:{getSortValue,focusSelf:focusSelf!==null&&focusSelf!==void 0?focusSelf:defaultFocusSelf},context,gridNavigationCellParameters:{colSpan:colSpan!==null&&colSpan!==void 0?colSpan:1},managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},tableCellParameters:{tagTableCell},textContentParameters:{getText:useDefault("getText",getText)}});A(ref,()=>info);return render(info);});const TabsContext=E(null);const TabPanelsContext=E(null);const Tabs=memoForwardRef(function Tabs(_ref129,ref){let{ariaLabel,collator,compare,disableArrowKeys,disableHomeEndKeys,getIndex,initiallySelectedIndex,navigatePastEnd,navigatePastStart,noTypeahead,onSelectedIndexChange,onTabbableIndexChange,orientation,staggered,pageNavigationSize,localStorageKey,untabbable,typeaheadTimeout,role,render}=_ref129;const info=useTabs({labelParameters:{ariaLabel},staggeredChildrenParameters:{staggered:staggered||false},linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},singleSelectionParameters:{initiallySelectedIndex:initiallySelectedIndex!==null&&initiallySelectedIndex!==void 0?initiallySelectedIndex:0,onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null},sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},tabsParameters:{orientation,role,localStorageKey:localStorageKey!==null&&localStorageKey!==void 0?localStorageKey:null},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)}});const{contextPanels,contextTabs}=info;A(ref,()=>info);return o$1(TabsContext.Provider,{value:contextTabs,children:o$1(TabPanelsContext.Provider,{value:contextPanels,children:render(info)})});});const Tab=memoForwardRef(function Tab(_ref130,ref){let{disabled,focusSelf,hidden,index,getText,getSortValue,render,selectionMode,subInfo}=_ref130;const context=q(TabsContext);console.assert(context!=null,"This Tab is not contained within a Tabs component");const focusSelfDefault=T$1(e=>{e===null||e===void 0?void 0:e.focus();},[]);const info=useTab({completeListNavigationChildParameters:{focusSelf:focusSelf!==null&&focusSelf!==void 0?focusSelf:focusSelfDefault,...subInfo},context,rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue},managedChildParameters:{index},singleSelectionChildParameters:{disabled:disabled!==null&&disabled!==void 0?disabled:false,selectionMode:selectionMode!==null&&selectionMode!==void 0?selectionMode:"focus"},textContentParameters:{getText:useDefault("getText",getText)}});A(ref,()=>info);return render(info);});function TabPanel(_ref131){let{index,render}=_ref131;const context=q(TabPanelsContext);const info=useTabPanel({context,managedChildParameters:{index}});return render(info);}const ToastContext=E(null);const Toasts=memoForwardRef(function Toasts(_ref132,ref){let{onAfterChildLayoutEffect,onChildrenMountChange,render,visibleCount}=_ref132;const info=useToasts({managedChildrenParameters:{onAfterChildLayoutEffect,onChildrenMountChange},toastsParameters:{visibleCount}});A(ref,()=>info);return o$1(ToastContext.Provider,{value:info.context,children:render(info)});});const Toast=memoForwardRef(function Toast(_ref133,ref){let{render,index,timeout,politeness,children}=_ref133;const context=q(ToastContext);console.assert(context!=null,"This Toast was not rendered within a Toasts provider");const info=useToast({managedChildParameters:{index},toastParameters:{timeout,politeness,children},context});A(ref,()=>info);return render(info);});const ToolbarContext=E(null);const Toolbar=memoForwardRef(function ToolbarU(_ref134,ref){let{render,role,collator,disableArrowKeys,disableHomeEndKeys,untabbable,compare,getIndex,navigatePastEnd,navigatePastStart,pageNavigationSize,selectedIndex,onSelectedIndexChange,orientation,noTypeahead,onTabbableIndexChange,typeaheadTimeout,staggered,ariaLabel}=_ref134;const listboxReturnType=useToolbar({rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},singleSelectionDeclarativeParameters:{selectedIndex:selectedIndex!==null&&selectedIndex!==void 0?selectedIndex:null},sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},toolbarParameters:{orientation,role:role!==null&&role!==void 0?role:"toolbar",onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null},staggeredChildrenParameters:{staggered:staggered||false},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable||false},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)},labelParameters:{ariaLabel}});A(ref,()=>listboxReturnType);return o$1(ToolbarContext.Provider,{value:listboxReturnType.context,children:render(listboxReturnType)});});const ToolbarChild=memoForwardRef(function ToolbarChildU(_ref135,ref){let{index,render,ariaPropName,disabled,selectionMode,focusSelf,getSortValue,hidden,getText,subInfo}=_ref135;const context=q(ToolbarContext);console.assert(context!=null,"This ToolbarChild is not contained within a Toolbar");const focusSelfDefault=T$1(e=>{e===null||e===void 0?void 0:e.focus();},[]);const info=useToolbarChild({context,completeListNavigationChildParameters:{focusSelf:focusSelf!==null&&focusSelf!==void 0?focusSelf:focusSelfDefault,...subInfo},managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue},singleSelectionChildParameters:{ariaPropName,selectionMode,disabled:disabled!==null&&disabled!==void 0?disabled:false},textContentParameters:{getText:useDefault("getText",getText)}});A(ref,()=>info);return o$1(d$1,{children:render(info)});});const Tooltip=memoForwardRef(function TooltipU(_ref136,ref){let{onStatus,getWindow,parentDepth,render,tooltipSemanticType}=_ref136;const defaultParentDepth=q(ParentDepthContext);let myDepth=(parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth)+1;const info=useTooltip({escapeDismissParameters:{getWindow:useDefault("getWindow",getWindow),parentDepth:parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth},tooltipParameters:{onStatus,tooltipSemanticType}});A(ref,()=>info);return o$1(ParentDepthContext.Provider,{value:myDepth,children:render(info)});});function DemoAccordion(_ref137){let{children}=_ref137;return o$1(Accordion,{navigationDirection:"vertical",render:_info=>{return o$1("div",{id:"accordion-demo",children:children});}});}const DemoAccordionSection=x(function DemoAccordionSection(_ref138){let{index,body,heading,disabled,open}=_ref138;return o$1(AccordionSection,{index:index,tagButton:"button",open:open,disabled:disabled,render:info=>o$1(Heading,{...info.propsHeader,tag:"div",heading:o$1(d$1,{children:[o$1("span",{children:heading}),o$1("button",{...info.propsHeaderButton,children:"Toggle open"})]}),children:o$1("p",{...info.propsBody,hidden:!info.accordionSectionReturn.expanded,children:body})})});});function Blurb$f(){return o$1(d$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/accordion/",children:"In accordance with the ARIA guidelines for Accordion patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["Each section's header and body are linked via ID; the body is ",o$1("code",{children:"labelled-by"})," the header and the header ",o$1("code",{children:"control"}),"s the body."]}),o$1("li",{children:"The header is a button and responds to keyboard, mouse, touch, etc. events, regardless of the element used."}),o$1("li",{children:["If the header element is not a ",o$1("code",{children:"<button>"})," element, it is given that ",o$1("code",{children:"role"}),"."]}),o$1("li",{children:"Up/down & Home/End keys navigate through the list, as does Tab and Shift+Tab"}),o$1("li",{})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:["The ",o$1("code",{children:"render"})," prop each ",o$1("code",{children:"AccordionSection"})," takes must wrap the header button with a ",o$1("a",{href:"https://w3c.github.io/aria/#heading",children:"heading"})," (e.g. ",o$1("code",{children:"h3"}),", or ",o$1("code",{children:"<Heading>"}),"). See the default implementation for an example."]})})]});}function Code$f(){return o$1("code",{children:"<Accordion render={...}>\n    <AccordionSection index={0} render={...} />\n    <AccordionSection index={1} render={...} />\n    <AccordionSection index={2} render={...} />\n</Accordion>"});}function Demo$f(){const[count,setCount]=p(5);return o$1(d$1,{children:[o$1(Blurb$f,{}),o$1(Code$f,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of accordion sections"]}),o$1(DemoAccordion,{children:o$1(d$1,{children:Array.from(function*(){yield o$1(DemoAccordionSection,{index:0,heading:"Accordion section #0",body:"Body content #0",disabled:false});yield o$1(DemoAccordionSection,{index:1,heading:"Accordion section #1",body:"Body content #1",disabled:false});yield o$1(DemoAccordionSection,{index:2,heading:"Accordion section #2 (disabled)",body:"Body content #2",disabled:true});yield o$1(DemoAccordionSection,{index:3,heading:"Accordion section #3 (forced open)",body:"Body content #3",disabled:false,open:true});yield o$1(DemoAccordionSection,{index:4,heading:"Accordion section #4 (forced closed)",body:"Body content #4",disabled:false,open:false});for(let i=5;i<count;++i){yield o$1(DemoAccordionSection,{index:i,heading:"Accordion section #".concat(i),body:"BodyContent #".concat(i),disabled:false});}}()).slice(0,count)})})]});}function Blurb$e(){return o$1(d$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/button/",children:"In accordance with the ARIA guidelines for Button patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["Whether using an actual ",o$1("code",{children:"<button>"}),", or something else like a ",o$1("code",{children:"<div>"}),", the proper roles and event handlers will be applied."]}),o$1("li",{children:"Buttons can be toggled (pressed or unpressed)."}),o$1("li",{children:["The button responds to keyboard, mouse, touch, etc. events, regardless of the element used.",o$1("ul",{children:[o$1("li",{children:"Double-clicks do not select text, but text is still selectable without it counting as a press/click"}),o$1("li",{children:"When Enter is pressed, the button is immediately activated"}),o$1("li",{children:"When Space is pressed, the button is activated once released"}),o$1("li",{children:"iOS Safari properly focuses the button"})]})]})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:["If your button contains only an icon (or other non-descriptive content, etc.), you must provide an ",o$1("code",{children:"aria-label"})," manually stating what happens when the button is pressed."]})})]});}function Code$e(){return o$1("code",{children:"<Button tag=\"button\">Button</Button>\n    <Button tag=\"div\">Div</Button>"});}function Demo$e(){const[pressed,setPressed]=useState(false);return o$1(d$1,{children:[o$1(Blurb$e,{}),o$1(Code$e,{}),o$1(DemoButton,{disabled:false,tag:"button"}),o$1(DemoButton,{disabled:"soft",tag:"button"}),o$1(DemoButton,{disabled:"hard",tag:"button"}),o$1(DemoButton,{disabled:false,tag:"div"}),o$1(DemoButton,{disabled:"soft",tag:"div"}),o$1(DemoButton,{disabled:"hard",tag:"div"}),o$1(Button,{tagButton:"button",pressed:pressed,onPress:e=>{var _e$EventDetail$presse;return setPressed((_e$EventDetail$presse=e[EventDetail].pressed)!==null&&_e$EventDetail$presse!==void 0?_e$EventDetail$presse:false);},render:info=>o$1("button",{...info.props,children:"Toggle button (".concat(pressed?"pressed":"unpressed",")")})})]});}function DemoButton(_ref139){let{tag:Tag,disabled}=_ref139;const onPress=()=>{alert("Button clicked");};return o$1(Button,{disabled:disabled,tagButton:Tag,onPress:onPress,render:info=>o$1(Tag,{...info.props,children:"".concat(Tag," ").concat(disabled?" disabled (".concat(disabled=="soft"?"soft":"hard",")"):"")})});}function DemoCheckbox$1(_ref140){let{index}=_ref140;const[checked,setChecked]=useState(false);const ref=_(null);return o$1(CheckboxGroupChild,{checked:checked,index:index,focusSelf:()=>{var _ref$current;return(_ref$current=ref.current)===null||_ref$current===void 0?void 0:_ref$current.checkboxLikeReturn.focusSelf();},onChangeFromParent:async checked=>{await new Promise(resolve=>setTimeout(resolve,Math.random()*2000));setChecked(checked);},getSortValue:returnNull,render:info=>{return o$1("div",{children:o$1(Checkbox,{ref:ref,checked:checked,disabled:false,ariaLabel:null,onCheckedChange:e=>{setChecked(e[EventDetail].checked);info.checkboxGroupChild.onChildCheckedChange(e[EventDetail].checked);},labelPosition:"separate",tagInput:"input",tagLabel:"label",render:defaultRenderCheckboxLike({labelPosition:"separate",tagInput:"input",tagLabel:"label",makePropsInput:info2=>useMergedProps(info.props,info2.propsInput),makePropsLabel:info2=>({children:"Checkbox #".concat(index),...info2.propsLabel})})})});}});}function Blurb$d(){return o$1(d$1,{children:[o$1("p",{children:["Checkbox groups are an alternative to multi-select lists. There is no role of ",o$1("code",{children:"checkboxgroup"}),", but this aims to be an ARIA-compliant implementation of a checkbox group."]}),o$1("ul",{children:[o$1("li",{children:["All normal ",o$1("code",{children:"Checkbox"})," functionality is supported on each individual checkbox."]}),o$1("li",{children:"The parent checkbox switches between 3 states, remembering the last state that caused it to be \"mixed\"."}),o$1("li",{children:["The parent's \"mixed\" state changes all children back to whatever state the user had most recently created; the distinction is drawn when a child calls ",o$1("code",{children:"onChildCheckedChange"})," during its event handler. This call is what notifies the parent checkbox what to use when switching to that \"mixed\" state."]}),o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:[o$1("code",{children:"aria-controls"})," is set on the parent Checkbox to contain the IDs of all child checkboxes. This has no effect on any technology that I am aware of, but it's there just in case."]})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:[o$1("code",{children:"CheckboxGroupParent"})," has supports child checkboxes being asyncronous (e.g. if each child's ",o$1("code",{children:"onChangeFromParent"})," is async, then the parent's ",o$1("code",{children:"onParentCheckedChange"})," will asyncronously wait for all of them), but you must apply any relevant labelling of this circumstance yourself."]}),o$1("li",{children:["As mentioned, ",o$1("code",{children:"aria-controls"})," basically does nothing. Please ensure you're using good labelling here; it is assumed that the parent checkbox provides sufficient labelling for all the children, which how the demo example identifies these elements. If you have a separate label, you will need to wrap the children in a ",o$1("code",{children:"role=group"})," that references that label by overriding ",o$1("code",{children:"render"}),"."]})]})]});}function Code$d(){return o$1("code",{children:""});}function Demo$d(){const[count,setCount]=useState(5);const[pending,setPending]=useState(false);return o$1(d$1,{children:[o$1(Blurb$d,{}),o$1(Code$d,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of checkboxes"]}),o$1("div",{children:[o$1("p",{children:[o$1("strong",{children:"Note:"})," Each checkbox (in this demo only!) takes a random amount of time to update when modified via the parent checkbox to test async handling."]}),o$1(CheckboxGroup,{navigationDirection:"vertical",render:info2=>{const ref=_(null);return o$1("div",{...info2.props,...{children:o$1(d$1,{children:[o$1(CheckboxGroupParent,{index:0,focusSelf:()=>{var _ref$current2;return(_ref$current2=ref.current)===null||_ref$current2===void 0?void 0:_ref$current2.checkboxLikeReturn.focusSelf();},getSortValue:returnNull,render:info3=>o$1(Checkbox,{ref:ref,disabled:pending,checked:info3.checkboxGroupParentReturn.checked,onCheckedChange:useStableCallback(e=>{setPending(true);info3.checkboxGroupParentReturn.onParentCheckedChange(e).finally(()=>setPending(false));}),ariaLabel:"Parent checkbox",labelPosition:"separate",tagInput:"input",tagLabel:"label",render:defaultRenderCheckboxLike({labelPosition:"separate",makePropsInput:info4=>useMergedProps(info4.propsInput,info3.props),makePropsLabel:info4=>({children:"Parent checkbox",...info4.propsLabel}),tagInput:"input",tagLabel:"label"})})}),o$1("div",{style:{display:"flex",flexDirection:"column"},children:o$1(d$1,{children:Array.from(function*(){for(let i=0;i<count;++i){yield o$1(DemoCheckbox$1,{index:i+1},i);}}())})})]})}});}})]})]});}function Blurb$c(){return o$1(d$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/",children:"In accordance with the ARIA guidelines for Checkbox patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:"Toggles between checked and unchecked when pressed (clicked, Enter pressed, Space released, etc.)"}),o$1("li",{children:["Can be ",o$1("code",{children:"mixed"})," instead, though ",o$1("code",{children:"onInput"})," will only ever be called with ",o$1("code",{children:"true"})," or ",o$1("code",{children:"false"})]}),o$1("li",{children:["Supports using ",o$1("code",{children:"<input>"}),"s and ",o$1("code",{children:"<label>"}),"s, as well as just plain ol' ",o$1("code",{children:"<div>"}),"s on either/both"]}),o$1("li",{children:"The checkbox and label can be sibling elements, like normal, or the label can wrap the input for a larger hit area. In all cases, the appropriate roles/event handlers will be applied to each element."}),o$1("li",{children:"When selecting the text of a checkbox's label, this does not change the checkbox's state"}),o$1("li",{children:"Double-clicking the label checks & un-checks the checkbox instead of selecting the label's text"}),o$1("li",{children:"Checkbox groups (with a tri-state parent) are a separate component/hook"})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:["If your checkbox does not have a visible label (achievable by by overriding the ",o$1("code",{children:"render"})," prop and setting ",o$1("code",{children:"labelPosition"})," to be \"separate\"), you must pass ",o$1("code",{children:"aria-label"})," as a prop to the checkbox manually. Not providing one will print an error to the console, but it it not required by the type system."]})})]});}function Code$c(){return o$1("code",{children:"<Checkbox checked={true} labelPosition=\"separate\" tagInput=\"input\" tagLabel=\"label\">Label text</Checkbox>"});}function Demo$c(){const[checked,setChecked]=useState(false);const[disabled,setDisabled]=useState(false);return o$1(d$1,{children:[o$1(Blurb$c,{}),o$1(Code$c,{}),o$1(Checkbox,{checked:disabled,onCheckedChange:e=>setDisabled(e[EventDetail].checked),ariaLabel:null,labelPosition:"separate",tagInput:"input",tagLabel:"label",render:info=>o$1(d$1,{children:[o$1("input",{...info.propsInput}),o$1("label",{...info.propsLabel,children:"Disabled"})]})}),o$1(Button,{tagButton:"button",onPress:()=>{setChecked("mixed");},render:info=>o$1("button",{...info.props,children:"Change to mixed"})}),o$1(DemoCheckbox,{checked:checked,setChecked:setChecked,labelPosition:"separate",disabled:disabled,tagInput:"input",tagLabel:"label"}),o$1(DemoCheckbox,{checked:checked,setChecked:setChecked,labelPosition:"wrapping",disabled:disabled,tagInput:"input",tagLabel:"label"}),o$1(DemoCheckbox,{checked:checked,setChecked:setChecked,labelPosition:"wrapping2",disabled:disabled,tagInput:"input",tagLabel:"label"}),o$1(DemoCheckbox,{checked:checked,setChecked:setChecked,labelPosition:"separate",disabled:disabled,tagInput:"div",tagLabel:"label"}),o$1(DemoCheckbox,{checked:checked,setChecked:setChecked,labelPosition:"wrapping",disabled:disabled,tagInput:"div",tagLabel:"label"}),o$1(DemoCheckbox,{checked:checked,setChecked:setChecked,labelPosition:"separate",disabled:disabled,tagInput:"input",tagLabel:"div"}),o$1(DemoCheckbox,{checked:checked,setChecked:setChecked,labelPosition:"wrapping",disabled:disabled,tagInput:"input",tagLabel:"div"}),o$1(DemoCheckbox,{checked:checked,setChecked:setChecked,labelPosition:"separate",disabled:disabled,tagInput:"div",tagLabel:"div"}),o$1(DemoCheckbox,{checked:checked,setChecked:setChecked,labelPosition:"wrapping",disabled:disabled,tagInput:"div",tagLabel:"div"}),o$1(DemoCheckbox,{checked:checked,setChecked:setChecked,labelPosition:"hidden",disabled:disabled,tagInput:"input",tagLabel:"label"})]});}function DemoCheckbox(_ref141){let{labelPosition,tagInput,tagLabel,disabled,checked,setChecked}=_ref141;return o$1("div",{style:{border:"1px solid black"},children:[o$1(Checkbox,{ariaLabel:null,disabled:disabled,checked:checked,onCheckedChange:e=>setChecked(e[EventDetail].checked),labelPosition:labelPosition=="hidden"?"separate":labelPosition=="wrapping2"?"separate":labelPosition,tagInput:tagInput,tagLabel:tagLabel,render:defaultRenderCheckboxLike({labelPosition:labelPosition=="wrapping2"?"separate":labelPosition,tagInput:tagInput,tagLabel:tagLabel,makePropsInput:info=>useMergedProps(info.propsInput,{"aria-label":labelPosition=="hidden"?"Hidden label (technically separate), ".concat(tagInput," and ").concat(tagLabel," ").concat(checked?"checked":"not checked"):undefined}),makePropsLabel:info=>useMergedProps(info.propsLabel,{children:"".concat(labelPosition,", ").concat(tagInput," and ").concat(tagLabel,", ").concat(checked?"checked":"not checked")})})}),labelPosition=="hidden"&&o$1("div",{children:["(This is not a label -- the actual label is via the ",o$1("code",{children:"aria-label"})," prop)"]})]});}function Blurb$b(){return o$1(d$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/dialogmodal/",children:"In accordance with the ARIA guidelines for Modal Dialog patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:"Dialogs block all other elements on the page from receiving focus/interaction and being perceivable to screen readers."}),o$1("li",{children:"Dialogs can be dismissed by pressing Escape or clicking the element designated as the backdrop, both of which can be cancelled/ignored if you need"}),o$1("li",{children:"When opened, the dialog will focus its title or body content as appropriate, however read below under Things Not Handled for caveats."}),o$1("li",{children:"When closed for any reason, the element that was responsible for opening the dialog will be focused."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["By default, when opened, a dialog will focus its body content or title content depending on ",o$1("code",{children:"bodyIsOnlySemantic"}),", which indicates that the dialog's body contains no interactive elements. This may not be suitable for all situations."]}),o$1("li",{children:["It is ",o$1("em",{children:"hightly"})," recommended to override ",o$1("code",{children:"focusSelf"})," for all dialogs you create, and have it focus whatever element makes the most sense for your particular dialog.",o$1("ul",{children:[o$1("li",{children:"Dialogs that act like a form should focus the first interactive element"}),o$1("li",{children:"Dialogs that perform destructive actions should focus the \"Cancel\" button"}),o$1("li",{children:"In some cases, it's best to focus the first paragraph of the body."})]}),"In all cases, consider that the first focused element will both be how keyboard users interact with the dialog, but also the first thing a screen reader will read aloud."]})]})]});}function Code$b(){return o$1("code",{children:""});}function Demo$b(){const[open,setOpen]=useState(false);return o$1(d$1,{children:[o$1(Blurb$b,{}),o$1(Code$b,{}),o$1("div",{children:o$1(Dialog,{open:open,onClose:()=>setOpen(false),closeOnBackdrop:true,closeOnEscape:true,focusOpener:e=>{e.focus();},parentDepth:0,focusPopup:(e,f)=>{var _f;(_f=f())===null||_f===void 0?void 0:_f.focus();},ariaLabel:null,render:info=>{return o$1(d$1,{children:[o$1("button",{...info.propsSource,onClick:()=>setOpen(o=>!o),children:"Open dialog"}),defaultRenderPortal({portalId:"portal",children:o$1("div",{...info.propsFocusContainer,hidden:!open,children:o$1("div",{...info.propsDialog,children:[o$1("div",{...info.propsTitle,children:"Dialog title"}),o$1("div",{children:"Dialog body"}),o$1("button",{onClick:()=>setOpen(false),children:"Close dialog"})]})})})]});}})})]});}function Blurb$a(){return o$1(d$1,{children:[o$1("p",{children:["Because Listboxes are not allowed to contain interactive content, a Gridlist is semantically a list that ",o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/grid/",children:"complies with the ARIA pattern for grids"}),"."]}),o$1("ul",{children:[o$1("li",{children:"In terms of keyboard navigation and tabbing through elements, a Gridlist is like a Listbox, but in two dimensions, like a Table."}),o$1("li",{children:"The rows of a Gridlist are sortable. It is possible to have multiple, independently sortable sections within the same Gridlist."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["It's up to you to make sure that any interactive elements within a Gridlist respond to focus management properly with ",o$1("code",{children:"focusSelf"})," prop and a properly placed ",o$1("code",{children:["tabIndex=","{","info.rovingTabIndex.tabbable? 0 : -1","}"]})," in the ",o$1("code",{children:"render"})," prop."]}),o$1("li",{children:"Any given row in a Gridlist can be marked as selected, but this is up to you to handle manually at the moment"})]})]});}function Code$a(){return o$1("code",{children:""});}function DemoGridlistChild1(_ref142){let{row}=_ref142;const text="Gridlist child "+row;return o$1(GridlistChild,{focusSelf:e=>e.focus(),index:0,render:info=>{return o$1("div",{...info.props,children:text});}});}function DemoGridlistChild2(_ref143){let{tabbable}=_ref143;const cb=_(null);const[b,setB]=useState(false);return o$1(GridlistChild,{focusSelf:e=>{var _cb$current;debugger;(_cb$current=cb.current)===null||_cb$current===void 0?void 0:_cb$current.checkboxLikeReturn.focusSelf();},index:1,render:info=>{return o$1("div",{...info.props,children:o$1(Checkbox,{ariaLabel:"Whether this item is selected",ref:cb,labelPosition:"separate",tagInput:"input",tagLabel:"label",checked:b,disabled:false,onCheckedChange:e=>setB(e[EventDetail].checked),render:infoCheckbox=>{return o$1(d$1,{children:o$1("input",{tabIndex:tabbable?0:-1,...infoCheckbox.propsInput})});}})});}});}function Demo$a(){const[count,setCount]=useState(5);const[selectedIndex,setSelectedIndex]=useState(null);return o$1(d$1,{children:[o$1(Blurb$a,{}),o$1(Code$a,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of table rows"]}),o$1("div",{children:o$1(Gridlist,{ariaLabel:null,groupingType:"without-groups",selectionLimit:"single",selectedIndex:selectedIndex,onSelectedIndexChange:setSelectedIndex,render:infoGridlist=>{return o$1(d$1,{children:[o$1("label",{...infoGridlist.propsGridlistLabel,children:"Gridlist demo"}),o$1("ul",{...infoGridlist.propsGridlist,children:infoGridlist.rearrangeableChildrenReturn.useRearrangedChildren(Array.from(function*(){for(let i=0;i<count;++i){yield o$1(GridlistRow,{ariaPropName:"aria-selected",selected:null,index:i,getSortValue:returnZero,render:info=>{return o$1("li",{...info.props,children:[o$1(DemoGridlistChild1,{row:i}),o$1(DemoGridlistChild2,{tabbable:info.rowAsChildOfGridReturn.rovingTabIndexChildReturn.tabbable})]});}});}}()))})]});}})})]});}const DemoListItem$3=x(function DemoListItem(_ref144){let{index}=_ref144;const[selected,setSelected]=useState(false);const labelText="List item #".concat(index).concat(selected?" (selected)":"");return o$1(ListboxItem,{selected:selected,index:index,disabled:false,ariaPropName:"aria-selected",getSortValue:returnZero,onPressSync:()=>{setSelected(p=>!p);},render:info=>{return o$1("li",{...info.props,children:labelText});}});});function Blurb$9(){return o$1(d$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/listbox/",children:"In accordance with the ARIA guidelines for Listbox patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:"The parent checkbox switches between 3 states, remembering the last state that caused it to be \"mixed\"."}),o$1("li",{children:["The parent checkbox reacts to each child's ",o$1("code",{children:"checked"})," prop and updates its own internal ",o$1("code",{children:"checked"})," attribute (be aware of this if they're asyncronous, as you'll want to ensure they all resolve on the same tick with ",o$1("code",{children:"Promise.all"})," to not clobber the user's inputs)."]}),o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:"Grouping is supported"}),o$1("li",{children:"Sorting/reordering is supported, though not provided by default, as it's mutually exclusive with grouping."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["It is assumed that the parent checkbox provides sufficient labelling for all the children, which how the demo example identifies these elements. If you have a separate label, you will need to wrap the children in a ",o$1("code",{children:"role=group"})," that references that label by overriding ",o$1("code",{children:"render"}),"."]}),o$1("li",{children:["See the caveat above for when each child's ",o$1("code",{children:"onInput"})," takes a variable amount of time to actually update the ",o$1("code",{children:"checked"})," prop, as it can clobber the user's last input when clicking on the parent"]})]})]});}function Code$9(){return o$1("code",{children:""});}function Demo$9(){const[count,setCount]=useState(5);return o$1(d$1,{children:[o$1(Blurb$9,{}),o$1(Code$9,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of list items"]}),o$1("div",{children:o$1(Listbox,{selectedIndex:null,ariaLabel:null,navigationDirection:"vertical",selectionLimit:"multi",render:info=>{return o$1(d$1,{children:[o$1("label",{...info.propsListboxLabel}),o$1("ul",{...info.propsListbox,children:Array.from(function*(){for(let i=0;i<count;++i){yield o$1(DemoListItem$3,{index:i},i);}}())})]});}})})]});}const DemoListItem$2=x(function DemoListItem(_ref145){let{index}=_ref145;return o$1(ListboxItem,{index:index,focusSelf:e=>e.focus(),ariaPropName:"aria-selected",getSortValue:returnZero,disabled:false,selected:null,render:info=>{const selected=info.singleSelectionChildReturn.selected;return o$1("li",{...info.props,children:"List item #".concat(index).concat(selected?" (selected)":"")});}});});function Blurb$8(){return o$1(d$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/listbox/",children:"In accordance with the ARIA guidelines for Listbox patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["In terms of keyboard navigation and tabbing through elements, a Listbox is considered a ",o$1("strong",{children:"single"})," tab stop; in other words, no matter how many list items there are in a Listbox, it only takes one press of the Tab button to go through it.",o$1("ul",{children:[o$1("li",{children:"When a Listbox is tabbed into, the most recently selected item is given focus"}),o$1("li",{children:"Pressing Tab again navigates out of the listbox; no other list items are tabbable other than the one currently designated."}),o$1("li",{children:"Pressing the arrow keys navigates through the Listbox one item at a time"}),o$1("li",{children:"Pressing the Home/End keys move focus to the first/last items respectively"}),o$1("li",{children:"Typing any sequence of text starts typeahead that navigates to the next item that matches what's being typed"}),o$1("li",{children:"Focus & selection management is as optimized as possible; only two children re-render at a time when focus or selection changes"}),o$1("li",{children:"These apply generally to all composite components with a variable number of children (Tab Lists, Radio Groups, Multi-Select Listboxes etc.)"})]})]}),o$1("li",{children:["Rather than each individual list item knowing whether it is selected or not (as with multi-select lists), here the parent knows the ",o$1("code",{children:"selectedIndex"})," and simply notifies the (max two) relevant children any time it changes."]}),o$1("li",{children:"Grouping is supported"}),o$1("li",{children:"Sorting/reordering is supported. Each group is sorted independently."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:"Listboxes do not support interactive content within them (e.g. a dropdown menu), as ARIA specifies that this is a different pattern."})})]});}function Code$8(){return o$1("code",{children:""});}function ListboxDemo(_ref146){let{count,label}=_ref146;const[selectedIndex,setSelectedIndex]=useState(null);return o$1(Listbox,{selectedIndex:selectedIndex,onSelectedIndexChange:setSelectedIndex,render:info=>{return o$1(d$1,{children:[o$1("label",{...info.propsListboxLabel,children:label}),o$1("ol",{...info.propsListbox,children:Array.from(function*(){for(let i=0;i<count;++i){yield o$1(DemoListItem$2,{index:i},i);}}())})]});},ariaLabel:null,navigationDirection:"vertical",selectionLimit:"single"});}function Demo$8(){const[count,setCount]=useState(5);return o$1(d$1,{children:[o$1(Blurb$8,{}),o$1(Code$8,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of list items"]}),o$1("div",{children:o$1(ListboxDemo,{count:count,label:"Single-select listbox demo without groups"})}),o$1("div",{children:o$1(GroupedListbox,{navigationDirection:"vertical",selectionLimit:"single",ariaLabel:null,render:info=>{return o$1(d$1,{children:[o$1("label",{...info.propsListboxLabel,children:"Single-select listbox demo with groups"}),o$1("div",{...info.propsListbox,children:[o$1(ListboxDemo,{count:count,label:"Group #0"}),o$1(ListboxDemo,{count:count,label:"Group #1"}),o$1(ListboxDemo,{count:count,label:"Group #2"})]})]});}})})]});}function DemoListItem$1(_ref147){let{index}=_ref147;return o$1(MenuItem,{index:index,ariaPropName:null,getSortValue:returnZero,selectionMode:"disabled",role:"menuitem",onPress:e=>alert("Menu item #".concat(index," pressed")),disabled:false,render:info=>o$1("li",{...info.props,children:"Menu item #".concat(index)})});}function Blurb$7(){return o$1(d$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/listbox/",children:"In accordance with the ARIA guidelines for Listbox patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:"When opened, the menu will focus the first element within it. When closed (by pressing escape, pressing the button again, or tabbing out of the menu), the button that opened it will have focus restored to it."}),o$1("li",{children:"When the menu is closed because another element on the page was focused instead, focus will not be modified."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:["Unlike most components, the label of a menu is implicitly the button that opens it and is not a separate, standalone element. If this button doesn't label the menu well, you must use the ",o$1("code",{children:"ariaLabel"})," prop to compensate."]})})]});}function Code$7(){return o$1("code",{children:""});}function Demo$7(){const[count,setCount]=useState(5);const[open,setOpen]=useState(false);return o$1(d$1,{children:[o$1(Blurb$7,{}),o$1(Code$7,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of menu items"]}),o$1("div",{children:o$1(Menu,{orientation:"vertical",onOpen:()=>setOpen(true),onClose:()=>setOpen(false),open:open,openDirection:"down",render:info=>{return o$1(d$1,{children:[o$1("button",{...info.propsTrigger,onClick:()=>setOpen(o=>!o),children:"Menu trigger"}),defaultRenderPortal({portalId:"portal",children:o$1("div",{...info.propsSurface,hidden:!open,children:[o$1("div",{...info.propsSentinel}),o$1("ul",{...info.propsTarget,children:Array.from(function*(){for(let i=0;i<count;++i){yield o$1("div",{children:o$1(DemoListItem$1,{index:i},i)});}}())}),o$1("div",{...info.propsSentinel})]})})]});}})})]});}const DemoRadioButton=x(function DemoRadioButton(_ref148){let{index}=_ref148;return o$1("div",{children:o$1(Radio,{index:index,focusSelf:e=>e.focus(),disabled:false,labelPosition:"separate",value:index,tagInput:"input",tagLabel:"label",ariaLabel:null,render:info=>{return o$1(d$1,{children:[o$1("input",{...info.propsInput,name:"radio-demo"}),o$1("label",{...info.propsLabel,children:["Radio #",index]})]});}})});});function Blurb$6(){return o$1(d$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/radiobutton/",children:"In accordance with the ARIA guidelines for Radio Button patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:"The input & label support the same text-selection affordances as Checkboxes (labels can be selected, but double-clicking doesn't select the text and selecting text doesn't count as an input)"}),o$1("li",{children:"Selection state is handled by the parent; instead of specifying whether any given radio button is checked or not, the parent notifies each child of the necessary changes."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["If your checkbox does not have a visible label (achievable by by overriding the ",o$1("code",{children:"render"})," prop and setting ",o$1("code",{children:"labelPosition"})," to be \"separate\"), you must pass ",o$1("code",{children:"aria-label"})," as a prop to the checkbox manually. Not providing one will print an error to the console, but it it not required by the type system."]}),o$1("li",{children:["The above also applies to the radio group as a whole; ARIA requires that all Radio Buttons be contained within an element with a specific role which is labelled either by an element (handled for you) or ",o$1("code",{children:"aria-label"})," (specified by you manually on the input)."]})]})]});}function Code$6(){return o$1("code",{children:""});}function Demo$6(){const[selectedIndex,setSelectedIndex]=useState(null);const[count,setCount]=useState(5);return o$1(d$1,{children:[o$1(Blurb$6,{}),o$1(Code$6,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of radio buttons"]}),o$1("div",{children:o$1(RadioGroup,{name:"radio-demo",ariaLabel:null,selectedValue:selectedIndex,navigationDirection:"vertical",onSelectedValueChange:setSelectedIndex,render:info=>{return o$1(d$1,{children:[o$1("label",{...info.propsRadioGroupLabel,children:"Radio group demo"}),o$1("div",{...info.propsRadioGroup,children:Array.from(function*(){for(let i=0;i<count;++i){yield o$1(DemoRadioButton,{index:i},i);}}())})]});}})})]});}function DemoSliderThumb(_ref149){let{index}=_ref149;const[value,setValue]=useState(0);return o$1(SliderThumb,{index:index,tag:"input",label:"Slider thumb #".concat(index),value:value,onValueChange:e=>setValue(e[EventDetail].value),min:0,max:10,render:info=>{return o$1("input",{...info.propsSliderThumb});}});}function Blurb$5(){return o$1(d$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/listbox/",children:"In accordance with the ARIA guidelines for Listbox patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:"When opened, the menu will focus the first element within it. When closed (by pressing escape, pressing the button again, or tabbing out of the menu), the button that opened it will have focus restored to it."}),o$1("li",{children:"When the menu is closed because another element on the page was focused instead, focus will not be modified."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:"TODO"})})]});}function Code$5(){return o$1("code",{children:""});}function Demo$5(){const[count,setCount]=useState(5);return o$1(d$1,{children:[o$1(Blurb$5,{}),o$1(Code$5,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of slider thumbs"]}),o$1("div",{children:o$1(Slider,{min:0,max:10,children:o$1(d$1,{children:Array.from(function*(){for(let i=0;i<count;++i){yield o$1("div",{children:o$1(DemoSliderThumb,{index:i},i)});}}())})})})]});}function Blurb$4(){return o$1(d$1,{children:[o$1("p",{children:["This is an implementation of an interactive data table that complies with ",o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/table/",children:"the ARIA guidelines for Table patterns"}),"."]}),o$1("ul",{children:[o$1("li",{children:["In terms of keyboard navigation and tabbing through elements, a Table is considered a ",o$1("strong",{children:"single"})," tab stop; in other words, no matter how many cells there are in a table (including if the cells contain interactive elements), it only takes one press of the Tab button to go through it.",o$1("ul",{children:[o$1("li",{children:["Pressing the arrow keys navigates through the cells of the Table. You can override each cell's ",o$1("code",{children:"focusSelf"})," prop to handle child elements."]}),o$1("li",{children:"Most other rules of list navigation apply (as in Listboxes), but in two dimensions."})]})]}),o$1("li",{children:["The body rows are sortable via each cell's ",o$1("code",{children:"value"})," prop. As a result of this, each row must be a ",o$1("em",{children:"direct"})," child of the body, like as a normal array of children with no intervening JSX."]})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["If you don't need all the sorting and focus management and such, there's no reason not to just use the good old ",o$1("code",{children:"<table>"})," element."]}),o$1("li",{children:["It's up to you to make sure that any interactive elements within a table cell respond to focus management properly with the aforementioned ",o$1("code",{children:"focusSelf"})," prop and a properly placed ",o$1("code",{children:["tabIndex=","{","info.rovingTabIndex.tabbable? 0 : -1","}"]})," in the ",o$1("code",{children:"render"})," prop."]})]})]});}function Code$4(){return o$1("code",{children:""});}function DemoInput(_ref150){let{index}=_ref150;const[v,setV]=useState("");return o$1(TableCell,{getSortValue:()=>v,focusSelf:e=>{debugger;e.focus();},tagTableCell:"td",index:index,render:info=>{return o$1("td",{...info.propsCell,children:o$1("input",{...info.propsFocus,type:"text",onInput:T$1(e=>{setV(e.currentTarget.value);e.preventDefault();},[]),value:v})});}});}function DemoTableCell(_ref151){let{index,header}=_ref151;const r=_(Math.random());if(header){const text="Header #".concat(index);return o$1(TableCell,{getSortValue:returnZero,focusSelf:e=>e.focus(),tagTableCell:"th",index:index,render:info=>o$1("th",{...info.propsFocus,...info.propsCell,children:[text,o$1("button",{tabIndex:info.rovingTabIndexChildReturn.tabbable?0:-1,onClick:()=>info.tableCellReturn.sortByThisColumn(),children:"Sort"})]})});}else{switch(index){case 0:return o$1(DemoInput,{index:index});default:return o$1(TableCell,{getSortValue:()=>r.current,focusSelf:e=>e.focus(),tagTableCell:"td",index:index,render:info=>{return o$1("td",{...info.propsFocus,...info.propsCell,children:r.current.toString()});}});}}}function Demo$4(){const[count,setCount]=useState(5);return o$1(d$1,{children:[o$1(Blurb$4,{}),o$1(Code$4,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of table rows"]}),o$1("div",{children:o$1(Table,{ariaLabel:null,selectionLimit:"multi",tagTable:"table",render:infoTable=>{return o$1(d$1,{children:[o$1("label",{...infoTable.propsLabel,children:"Table demo"}),o$1("table",{...infoTable.propsTable,children:[o$1(TableSection,{tagTableSection:"thead",location:"head",render:infoSection=>{return o$1("thead",{...infoSection.propsTableSection,children:o$1(TableRow,{index:0,ariaPropName:"aria-selected",tagTableRow:"tr",render:info=>{return o$1("tr",{...info.props,children:[o$1(DemoTableCell,{header:true,index:0},0),o$1(DemoTableCell,{header:true,index:1},1),o$1(DemoTableCell,{header:true,index:2},2)]});}})});}}),o$1(TableSection,{tagTableSection:"tbody",location:"body",render:infoSection=>{return o$1("tbody",{...infoSection.propsTableSection,children:infoSection.rearrangeableChildrenReturn.useRearrangedChildren(Array.from(function*(){for(let i=0;i<count;++i){yield o$1(TableRow,{ariaPropName:"aria-selected",tagTableRow:"tr",index:i,render:infoRow=>{return o$1("tr",{...infoRow.props,children:[o$1(DemoTableCell,{index:0},0),o$1(DemoTableCell,{index:1},1),o$1(DemoTableCell,{index:2},2)]});}},i);}}()))});}})]})]});}})})]});}function Blurb$3(){return o$1(d$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/",children:"In accordance with the ARIA guidelines for Tab and Tab Panel patterns,"})," this widget supports the following:"]}),o$1("ul",{children:o$1("li",{children:["The tabs are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]})}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:"TODO"})})]});}function Code$3(){return o$1("code",{children:""});}function Demo$3(){const[count,setCount]=useState(5);return o$1(d$1,{children:[o$1(Blurb$3,{}),o$1(Code$3,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of tabs"]}),o$1("div",{children:o$1(Tabs,{ariaLabel:null,orientation:"horizontal",render:info=>{return o$1(d$1,{children:[o$1("label",{...info.propsLabel,children:"Tabs example"}),o$1("ul",{...info.propsContainer,style:{display:"flex"},children:Array.from(function*(){for(let i=0;i<count;++i){yield o$1(DemoTab,{i:i});}}())}),o$1("div",{children:Array.from(function*(){for(let i=0;i<count;++i){yield o$1(DemoTabPanel,{i:i});}}())})]});}})})]});}const DemoTab=x(function DemoTab(_ref152){let{i}=_ref152;return o$1(Tab,{focusSelf:e=>e.focus(),index:i,render:info=>{var _info$singleSelection;return o$1("li",{...info.props,style:{marginLeft:"2em"},children:["Tab #",i," (offset: ",(_info$singleSelection=info.singleSelectionChildReturn.selectedOffset)!==null&&_info$singleSelection!==void 0?_info$singleSelection:"null",") ",info.singleSelectionChildReturn.selected&&"(visible)"]});},getSortValue:returnZero},i);});const DemoTabPanel=x(function DemoTabPanel(_ref153){let{i}=_ref153;return o$1(TabPanel,{index:i,render:info=>{var _info$tabPanelReturn$;return o$1("div",{...info.props,hidden:!info.tabPanelReturn.visible,children:["Tab panel #",i," (offset: ",(_info$tabPanelReturn$=info.tabPanelReturn.visibleOffset)!==null&&_info$tabPanelReturn$!==void 0?_info$tabPanelReturn$:"null",")"]});}},i);});function Blurb$2(){return o$1(d$1,{children:[o$1("p",{children:o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/alert/",children:"Toasts (aka snackbars) are implemented using the Alert pattern."})}),o$1("ul",{children:[o$1("li",{children:"Pushing a toasts causes its contents to be shown visibly (and audibly with a screen reader)"}),o$1("li",{children:"Only new toasts are announced"}),o$1("li",{children:"Toasts are shown as soon as they are pushed, but you can control the maximum number shown at once with"}),o$1("li",{children:"Toasts can be dismissed in any order"}),o$1("li",{children:"Toasts can be set to auto-dismiss."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:"Auto-dismiss behavior is very situational. An auto-dismissed toast should only refer to information that can be viewed elsewhere; \"X files deleted\" can be double-checked in the Recycle Bin, \"X has logged in\" which you can along with everyone else in a tab somewhere, etc. This obviously cannot be checked programmatically."}),o$1("li",{children:"TODO: Focus management related to toasts that have interactive content"}),o$1("li",{children:"TODO: Toasts are still announced even when the current browser tab is hidden instead of saving them for when the user returns"}),o$1("li",{children:"TODO: Toasts still auto-dismiss when they have focus/are being interacted with"})]})]});}function Code$2(){return o$1("code",{children:""});}function Demo$2(){const currentIndex=_(0);const[toasts,setToasts]=useState([]);const pushToast=T$1(()=>{const index=currentIndex.current;currentIndex.current+=1;const c=o$1(d$1,{children:["This the toast with an index of ",index,"."]});const nt=o$1(Toast,{children:c,index:index,render:_ref154=>{let{toastReturn:{dismiss,showing,dismissed,numberOfToastsAheadOfUs}}=_ref154;const c=o$1(d$1,{children:["This the toast with an index of ",index,". (#",numberOfToastsAheadOfUs," in the queue to be shown)."]});return o$1("div",{style:showing?{}:{opacity:0.5},children:[c," ",o$1("button",{disabled:dismissed,onClick:dismiss,children:"Click to dismiss"})]});},timeout:null},index);setToasts(t=>[...t,nt]);},[]);return o$1(d$1,{children:[o$1(Blurb$2,{}),o$1(Code$2,{}),o$1("button",{onClick:pushToast,children:"Push a toast"}),o$1("div",{children:o$1(Toasts,{visibleCount:3,render:info=>{return o$1("div",{...info.props,children:toasts});}})})]});}const DemoListItem=x(function DemoListItem(_ref155){let{index}=_ref155;return o$1(ToolbarChild,{index:index,focusSelf:e=>e.focus(),ariaPropName:"aria-pressed",selectionMode:"activation",getSortValue:returnZero,render:info2=>{return o$1(Button,{tagButton:"button",pressed:false,render:info3=>o$1("button",{...useMergedProps(info2.props,info3.props),children:["Toolbar child #",index]})});}});});function Blurb$1(){return o$1(d$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/toolbar/",children:"In accordance with the ARIA guidelines for Toolbar patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:"A Toolbar is a single widget for the purposes of keyboard navigation, like a Listbox."}),o$1("li",{children:"Toolbars are well-suited for \"button group\" patterns as well. Multiple groups can be contained within a single Toolbar, even multiple different types of components."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:["You must label the Toolbar with ",o$1("code",{children:"aria-label"}),"."]})})]});}function Code$1(){return o$1("code",{children:""});}function Demo$1(){const[count,setCount]=useState(5);return o$1(d$1,{children:[o$1(Blurb$1,{}),o$1(Code$1,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of list items"]}),o$1("div",{children:o$1(Toolbar,{orientation:"horizontal",role:"toolbar",ariaLabel:null,render:info=>o$1(d$1,{children:[o$1("label",{...info.propsLabel,children:"Toolbar demo"}),o$1("div",{...info.propsToolbar,children:Array.from(function*(){for(let i=0;i<count;++i){yield o$1(DemoListItem,{index:i},i);}}())})]})})})]});}function Blurb(){return o$1(d$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/tooltip/",children:"Tooltips have yet to be well defined in many areas"}),", but this implementation aims to support common use cases:"]}),o$1("ul",{children:[o$1("li",{children:"Hovering or focusing the trigger element shows the tooltip"}),o$1("li",{children:"The tooltip stays shown when it itself is hovered/focused as well, so that the text inside can be selected"}),o$1("li",{children:"Moving the mouse between the trigger and the tooltip has some tolerance associated with immediately hiding the tooltip."}),o$1("li",{children:"Hovering, focusing, and re-hovering can each have a custom delay associated with it"})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["You must ensure that either the tooltip contains a focusable element (a button, link, ",o$1("code",{children:"<div tabIndex=\"-1\" />"}),", etc.)"]}),o$1("li",{children:"Long presses on mobile devices are not yet handled (e.g. a long press on a button triggers a tooltip but does not activate the button)"})]})]});}function Code(){return o$1("code",{children:""});}function Demo(){const[tooltipStatus,setTooltipStatus]=p(null);return o$1(d$1,{children:[o$1(Blurb,{}),o$1(Code,{}),o$1("div",{children:["The following text triggers a tooltip: ",o$1(Tooltip,{tooltipSemanticType:"description",onStatus:setTooltipStatus,render:info=>{return o$1(d$1,{children:[o$1("span",{tabIndex:0,...info.propsTrigger,children:"Tooltip-triggering text that is hoverable and focusable: "}),defaultRenderPortal({portalId:"portal",children:o$1("div",{...info.propsPopup,hidden:!tooltipStatus,children:"This text describes the triggering text in more detail."})})]});}})]})]});}setDebugLogging(true);const Component=()=>{const{children,context}=useNotificationProvider({targetAssertive:"aria-notifications-assertive",targetPolite:"aria-notifications-polite"});return o$1(NotificationProviderContext.Provider,{value:context,children:[children,o$1(Heading,{heading:"Demos",children:[o$1(Heading,{heading:"Accordion",children:o$1(Demo$f,{})}),o$1(Heading,{heading:"Button",children:o$1(Demo$e,{})}),o$1(Heading,{heading:"Checkbox",children:o$1(Demo$c,{})}),o$1(Heading,{heading:"Checkbox Group",children:o$1(Demo$d,{})}),o$1(Heading,{heading:"Dialog",children:o$1(Demo$b,{})}),o$1(Heading,{heading:"Gridlist",children:o$1(Demo$a,{})}),o$1(Heading,{heading:"Single-select Listbox",children:o$1(Demo$8,{})}),o$1(Heading,{heading:"Multi-select Listbox",children:o$1(Demo$9,{})}),o$1(Heading,{heading:"Menu",children:o$1(Demo$7,{})}),o$1(Heading,{heading:"Radio",children:o$1(Demo$6,{})}),o$1(Heading,{heading:"Slider",children:o$1(Demo$5,{})}),o$1(Heading,{heading:"Toolbar",children:o$1(Demo$1,{})}),o$1(Heading,{heading:"Toast",children:o$1(Demo$2,{})}),o$1(Heading,{heading:"Tooltip",children:o$1(Demo,{})}),o$1(Heading,{heading:"Tabs",children:o$1(Demo$3,{})}),o$1(Heading,{heading:"Table",children:o$1(Demo$4,{})})]})]});};requestAnimationFrame(()=>{q$1(o$1(Component,{}),document.getElementById("root"));});})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
