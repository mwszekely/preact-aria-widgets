(function () {
	'use strict';

	var n,l$1,u$1,t$1,o$1,r$2,f$1,e$1={},c$1=[],s$1=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function a$1(n,l){for(var u in l)n[u]=l[u];return n}function h$1(n){var l=n.parentNode;l&&l.removeChild(n);}function v$1(l,u,i){var t,o,r,f={};for(r in u)"key"==r?t=u[r]:"ref"==r?o=u[r]:f[r]=u[r];if(arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):i),"function"==typeof l&&null!=l.defaultProps)for(r in l.defaultProps)void 0===f[r]&&(f[r]=l.defaultProps[r]);return y$1(l,f,t,o,null)}function y$1(n,i,t,o,r){var f={type:n,props:i,key:t,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==r?++u$1:r};return null!=l$1.vnode&&l$1.vnode(f),f}function d$1(n){return n.children}function _$1(n,l){this.props=n,this.context=l;}function k$1(n,l){if(null==l)return n.__?k$1(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return "function"==typeof n.type?k$1(n):null}function b$1(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return b$1(n)}}function m$1(n){(!n.__d&&(n.__d=!0)&&t$1.push(n)&&!g$2.__r++||r$2!==l$1.debounceRendering)&&((r$2=l$1.debounceRendering)||o$1)(g$2);}function g$2(){for(var n;g$2.__r=t$1.length;)n=t$1.sort(function(n,l){return n.__v.__b-l.__v.__b}),t$1=[],n.some(function(n){var l,u,i,t,o,r;n.__d&&(o=(t=(l=n).__v).__e,(r=l.__P)&&(u=[],(i=a$1({},t)).__v=t.__v+1,j$2(r,t,i,l.__n,void 0!==r.ownerSVGElement,null!=t.__h?[o]:null,u,null==o?k$1(t):o,t.__h),z(u,t),t.__e!=o&&b$1(t)));});}function w$2(n,l,u,i,t,o,r,f,s,a){var h,v,p,_,b,m,g,w=i&&i.__k||c$1,A=w.length;for(u.__k=[],h=0;h<l.length;h++)if(null!=(_=u.__k[h]=null==(_=l[h])||"boolean"==typeof _?null:"string"==typeof _||"number"==typeof _||"bigint"==typeof _?y$1(null,_,null,null,_):Array.isArray(_)?y$1(d$1,{children:_},null,null,null):_.__b>0?y$1(_.type,_.props,_.key,null,_.__v):_)){if(_.__=u,_.__b=u.__b+1,null===(p=w[h])||p&&_.key==p.key&&_.type===p.type)w[h]=void 0;else for(v=0;v<A;v++){if((p=w[v])&&_.key==p.key&&_.type===p.type){w[v]=void 0;break}p=null;}j$2(n,_,p=p||e$1,t,o,r,f,s,a),b=_.__e,(v=_.ref)&&p.ref!=v&&(g||(g=[]),p.ref&&g.push(p.ref,null,_),g.push(v,_.__c||b,_)),null!=b?(null==m&&(m=b),"function"==typeof _.type&&null!=_.__k&&_.__k===p.__k?_.__d=s=x$1(_,s,n):s=P$1(n,_,p,w,b,s),a||"option"!==u.type?"function"==typeof u.type&&(u.__d=s):n.value=""):s&&p.__e==s&&s.parentNode!=n&&(s=k$1(p));}for(u.__e=m,h=A;h--;)null!=w[h]&&("function"==typeof u.type&&null!=w[h].__e&&w[h].__e==u.__d&&(u.__d=k$1(i,h+1)),N(w[h],w[h]));if(g)for(h=0;h<g.length;h++)M$1(g[h],g[++h],g[++h]);}function x$1(n,l,u){var i,t;for(i=0;i<n.__k.length;i++)(t=n.__k[i])&&(t.__=n,l="function"==typeof t.type?x$1(t,l,u):P$1(u,t,t,n.__k,t.__e,l));return l}function A$2(n,l){return l=l||[],null==n||"boolean"==typeof n||(Array.isArray(n)?n.some(function(n){A$2(n,l);}):l.push(n)),l}function P$1(n,l,u,i,t,o){var r,f,e;if(void 0!==l.__d)r=l.__d,l.__d=void 0;else if(null==u||t!=o||null==t.parentNode)n:if(null==o||o.parentNode!==n)n.appendChild(t),r=null;else {for(f=o,e=0;(f=f.nextSibling)&&e<i.length;e+=2)if(f==t)break n;n.insertBefore(t,o),r=o;}return void 0!==r?r:t.nextSibling}function C$1(n,l,u,i,t){var o;for(o in u)"children"===o||"key"===o||o in l||H$1(n,o,null,u[o],i);for(o in l)t&&"function"!=typeof l[o]||"children"===o||"key"===o||"value"===o||"checked"===o||u[o]===l[o]||H$1(n,o,l[o],u[o],i);}function $$1(n,l,u){"-"===l[0]?n.setProperty(l,u):n[l]=null==u?"":"number"!=typeof u||s$1.test(l)?u:u+"px";}function H$1(n,l,u,i,t){var o;n:if("style"===l)if("string"==typeof u)n.style.cssText=u;else {if("string"==typeof i&&(n.style.cssText=i=""),i)for(l in i)u&&l in u||$$1(n.style,l,"");if(u)for(l in u)i&&u[l]===i[l]||$$1(n.style,l,u[l]);}else if("o"===l[0]&&"n"===l[1])o=l!==(l=l.replace(/Capture$/,"")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+o]=u,u?i||n.addEventListener(l,o?T$1:I,o):n.removeEventListener(l,o?T$1:I,o);else if("dangerouslySetInnerHTML"!==l){if(t)l=l.replace(/xlink[H:h]/,"h").replace(/sName$/,"s");else if("href"!==l&&"list"!==l&&"form"!==l&&"tabIndex"!==l&&"download"!==l&&l in n)try{n[l]=null==u?"":u;break n}catch(n){}"function"==typeof u||(null!=u&&(!1!==u||"a"===l[0]&&"r"===l[1])?n.setAttribute(l,u):n.removeAttribute(l));}}function I(n){this.l[n.type+!1](l$1.event?l$1.event(n):n);}function T$1(n){this.l[n.type+!0](l$1.event?l$1.event(n):n);}function j$2(n,u,i,t,o,r,f,e,c){var s,h,v,y,p,k,b,m,g,x,A,P=u.type;if(void 0!==u.constructor)return null;null!=i.__h&&(c=i.__h,e=u.__e=i.__e,u.__h=null,r=[e]),(s=l$1.__b)&&s(u);try{n:if("function"==typeof P){if(m=u.props,g=(s=P.contextType)&&t[s.__c],x=s?g?g.props.value:s.__:t,i.__c?b=(h=u.__c=i.__c).__=h.__E:("prototype"in P&&P.prototype.render?u.__c=h=new P(m,x):(u.__c=h=new _$1(m,x),h.constructor=P,h.render=O$1),g&&g.sub(h),h.props=m,h.state||(h.state={}),h.context=x,h.__n=t,v=h.__d=!0,h.__h=[]),null==h.__s&&(h.__s=h.state),null!=P.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=a$1({},h.__s)),a$1(h.__s,P.getDerivedStateFromProps(m,h.__s))),y=h.props,p=h.state,v)null==P.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else {if(null==P.getDerivedStateFromProps&&m!==y&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(m,x),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(m,h.__s,x)||u.__v===i.__v){h.props=m,h.state=h.__s,u.__v!==i.__v&&(h.__d=!1),h.__v=u,u.__e=i.__e,u.__k=i.__k,u.__k.forEach(function(n){n&&(n.__=u);}),h.__h.length&&f.push(h);break n}null!=h.componentWillUpdate&&h.componentWillUpdate(m,h.__s,x),null!=h.componentDidUpdate&&h.__h.push(function(){h.componentDidUpdate(y,p,k);});}h.context=x,h.props=m,h.state=h.__s,(s=l$1.__r)&&s(u),h.__d=!1,h.__v=u,h.__P=n,s=h.render(h.props,h.state,h.context),h.state=h.__s,null!=h.getChildContext&&(t=a$1(a$1({},t),h.getChildContext())),v||null==h.getSnapshotBeforeUpdate||(k=h.getSnapshotBeforeUpdate(y,p)),A=null!=s&&s.type===d$1&&null==s.key?s.props.children:s,w$2(n,Array.isArray(A)?A:[A],u,i,t,o,r,f,e,c),h.base=u.__e,u.__h=null,h.__h.length&&f.push(h),b&&(h.__E=h.__=null),h.__e=!1;}else null==r&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=L$1(i.__e,u,i,t,o,r,f,c);(s=l$1.diffed)&&s(u);}catch(n){u.__v=null,(c||null!=r)&&(u.__e=e,u.__h=!!c,r[r.indexOf(e)]=null),l$1.__e(n,u,i);}}function z(n,u){l$1.__c&&l$1.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u);});}catch(n){l$1.__e(n,u.__v);}});}function L$1(l,u,i,t,o,r,f,c){var s,a,v,y=i.props,p=u.props,d=u.type,_=0;if("svg"===d&&(o=!0),null!=r)for(;_<r.length;_++)if((s=r[_])&&(s===l||(d?s.localName==d:3==s.nodeType))){l=s,r[_]=null;break}if(null==l){if(null===d)return document.createTextNode(p);l=o?document.createElementNS("http://www.w3.org/2000/svg",d):document.createElement(d,p.is&&p),r=null,c=!1;}if(null===d)y===p||c&&l.data===p||(l.data=p);else {if(r=r&&n.call(l.childNodes),a=(y=i.props||e$1).dangerouslySetInnerHTML,v=p.dangerouslySetInnerHTML,!c){if(null!=r)for(y={},_=0;_<l.attributes.length;_++)y[l.attributes[_].name]=l.attributes[_].value;(v||a)&&(v&&(a&&v.__html==a.__html||v.__html===l.innerHTML)||(l.innerHTML=v&&v.__html||""));}if(C$1(l,p,y,o,c),v)u.__k=[];else if(_=u.props.children,w$2(l,Array.isArray(_)?_:[_],u,i,t,o&&"foreignObject"!==d,r,f,r?r[0]:i.__k&&k$1(i,0),c),null!=r)for(_=r.length;_--;)null!=r[_]&&h$1(r[_]);c||("value"in p&&void 0!==(_=p.value)&&(_!==l.value||"progress"===d&&!_)&&H$1(l,"value",_,y.value,!1),"checked"in p&&void 0!==(_=p.checked)&&_!==l.checked&&H$1(l,"checked",_,y.checked,!1));}return l}function M$1(n,u,i){try{"function"==typeof n?n(u):n.current=u;}catch(n){l$1.__e(n,i);}}function N(n,u,i){var t,o;if(l$1.unmount&&l$1.unmount(n),(t=n.ref)&&(t.current&&t.current!==n.__e||M$1(t,null,u)),null!=(t=n.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount();}catch(n){l$1.__e(n,u);}t.base=t.__P=null;}if(t=n.__k)for(o=0;o<t.length;o++)t[o]&&N(t[o],u,"function"!=typeof n.type);i||null==n.__e||h$1(n.__e),n.__e=n.__d=void 0;}function O$1(n,l,u){return this.constructor(n,u)}function S$1(u,i,t){var o,r,f;l$1.__&&l$1.__(u,i),r=(o="function"==typeof t)?null:t&&t.__k||i.__k,f=[],j$2(i,u=(!o&&t||i).__k=v$1(d$1,null,[u]),r||e$1,e$1,void 0!==i.ownerSVGElement,!o&&t?[t]:r?null:i.firstChild?n.call(i.childNodes):null,f,!o&&t?t:r?r.__e:i.firstChild,o),z(f,u);}function D(n,l){var u={__c:l="__cC"+f$1++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,i;return this.getChildContext||(u=[],(i={})[l]=this,this.getChildContext=function(){return i},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(m$1);},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n);};}),n.children}};return u.Provider.__=u.Consumer.contextType=u}n=c$1.slice,l$1={__e:function(n,l){for(var u,i,t;l=l.__;)if((u=l.__c)&&!u.__)try{if((i=u.constructor)&&null!=i.getDerivedStateFromError&&(u.setState(i.getDerivedStateFromError(n)),t=u.__d),null!=u.componentDidCatch&&(u.componentDidCatch(n),t=u.__d),t)return u.__E=u}catch(l){n=l;}throw n}},u$1=0,_$1.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=a$1({},this.state),"function"==typeof n&&(n=n(a$1({},u),this.props)),n&&a$1(u,n),null!=n&&this.__v&&(l&&this.__h.push(l),m$1(this));},_$1.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),m$1(this));},_$1.prototype.render=d$1,t$1=[],o$1="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,g$2.__r=0,f$1=0;

	var t,u,r$1,o=0,i=[],c=l$1.__b,f=l$1.__r,e=l$1.diffed,a=l$1.__c,v=l$1.unmount;function m(t,r){l$1.__h&&l$1.__h(u,t,o||r),o=0;var i=u.__H||(u.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({}),i.__[t]}function l(n){return o=1,p(w$1,n)}function p(n,r,o){var i=m(t++,2);return i.t=n,i.__c||(i.__=[o?o(r):w$1(void 0,r),function(n){var t=i.t(i.__[0],n);i.__[0]!==t&&(i.__=[t,i.__[1]],i.__c.setState({}));}],i.__c=u),i.__}function y(r,o){var i=m(t++,3);!l$1.__s&&k(i.__H,o)&&(i.__=r,i.__H=o,u.__H.__h.push(i));}function h(r,o){var i=m(t++,4);!l$1.__s&&k(i.__H,o)&&(i.__=r,i.__H=o,u.__h.push(i));}function s(n){return o=5,d(function(){return {current:n}},[])}function _(n,t,u){o=6,h(function(){"function"==typeof n?n(t()):n&&(n.current=t());},null==u?u:u.concat(n));}function d(n,u){var r=m(t++,7);return k(r.__H,u)&&(r.__=n(),r.__H=u,r.__h=n),r.__}function A$1(n,t){return o=8,d(function(){return n},t)}function F(n){var r=u.context[n.__c],o=m(t++,9);return o.c=n,r?(null==o.__&&(o.__=!0,r.sub(u)),r.props.value):n.__}function x(){i.forEach(function(t){if(t.__P)try{t.__H.__h.forEach(g$1),t.__H.__h.forEach(j$1),t.__H.__h=[];}catch(u){t.__H.__h=[],l$1.__e(u,t.__v);}}),i=[];}l$1.__b=function(n){u=null,c&&c(n);},l$1.__r=function(n){f&&f(n),t=0;var r=(u=n.__c).__H;r&&(r.__h.forEach(g$1),r.__h.forEach(j$1),r.__h=[]);},l$1.diffed=function(t){e&&e(t);var o=t.__c;o&&o.__H&&o.__H.__h.length&&(1!==i.push(o)&&r$1===l$1.requestAnimationFrame||((r$1=l$1.requestAnimationFrame)||function(n){var t,u=function(){clearTimeout(r),b&&cancelAnimationFrame(t),setTimeout(n);},r=setTimeout(u,100);b&&(t=requestAnimationFrame(u));})(x)),u=void 0;},l$1.__c=function(t,u){u.some(function(t){try{t.__h.forEach(g$1),t.__h=t.__h.filter(function(n){return !n.__||j$1(n)});}catch(r){u.some(function(n){n.__h&&(n.__h=[]);}),u=[],l$1.__e(r,t.__v);}}),a&&a(t,u);},l$1.unmount=function(t){v&&v(t);var u=t.__c;if(u&&u.__H)try{u.__H.__.forEach(g$1);}catch(t){l$1.__e(t,u.__v);}};var b="function"==typeof requestAnimationFrame;function g$1(n){var t=u;"function"==typeof n.__c&&n.__c(),u=t;}function j$1(n){var t=u;n.__c=n.__(),u=t;}function k(n,t){return !n||n.length!==t.length||t.some(function(t,u){return t!==n[u]})}function w$1(n,t){return "function"==typeof t?t(n):t}

	function S(n,t){for(var e in t)n[e]=t[e];return n}function C(n,t){for(var e in n)if("__source"!==e&&!(e in t))return !0;for(var r in t)if("__source"!==r&&n[r]!==t[r])return !0;return !1}function E(n){this.props=n;}function g(n,t){function e(n){var e=this.props.ref,r=e==n.ref;return !r&&e&&(e.call?e(null):e.current=null),t?!t(this.props,n)||!r:C(this.props,n)}function r(t){return this.shouldComponentUpdate=e,v$1(n,t)}return r.displayName="Memo("+(n.displayName||n.name)+")",r.prototype.isReactComponent=!0,r.__f=!0,r}(E.prototype=new _$1).isPureReactComponent=!0,E.prototype.shouldComponentUpdate=function(n,t){return C(this.props,n)||C(this.state,t)};var w=l$1.__b;l$1.__b=function(n){n.type&&n.type.__f&&n.ref&&(n.props.ref=n.ref,n.ref=null),w&&w(n);};var A=l$1.__e;l$1.__e=function(n,t,e){if(n.then)for(var r,u=t;u=u.__;)if((r=u.__c)&&r.__c)return null==t.__e&&(t.__e=e.__e,t.__k=e.__k),r.__c(n,t);A(n,t,e);};var O=l$1.unmount;function L(){this.__u=0,this.t=null,this.__b=null;}function U(n){var t=n.__.__c;return t&&t.__e&&t.__e(n)}function M(){this.u=null,this.o=null;}l$1.unmount=function(n){var t=n.__c;t&&t.__R&&t.__R(),t&&!0===n.__h&&(n.type=null),O&&O(n);},(L.prototype=new _$1).__c=function(n,t){var e=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(e);var u=U(r.__v),o=!1,i=function(){o||(o=!0,e.__R=null,u?u(l):l());};e.__R=i;var l=function(){if(!--r.__u){if(r.state.__e){var n=r.state.__e;r.__v.__k[0]=function n(t,e,r){return t&&(t.__v=null,t.__k=t.__k&&t.__k.map(function(t){return n(t,e,r)}),t.__c&&t.__c.__P===e&&(t.__e&&r.insertBefore(t.__e,t.__d),t.__c.__e=!0,t.__c.__P=r)),t}(n,n.__c.__P,n.__c.__O);}var t;for(r.setState({__e:r.__b=null});t=r.t.pop();)t.forceUpdate();}},f=!0===t.__h;r.__u++||f||r.setState({__e:r.__b=r.__v.__k[0]}),n.then(i,i);},L.prototype.componentWillUnmount=function(){this.t=[];},L.prototype.render=function(n,t){if(this.__b){if(this.__v.__k){var e=document.createElement("div"),r=this.__v.__k[0].__c;this.__v.__k[0]=function n(t,e,r){return t&&(t.__c&&t.__c.__H&&(t.__c.__H.__.forEach(function(n){"function"==typeof n.__c&&n.__c();}),t.__c.__H=null),null!=(t=S({},t)).__c&&(t.__c.__P===r&&(t.__c.__P=e),t.__c=null),t.__k=t.__k&&t.__k.map(function(t){return n(t,e,r)})),t}(this.__b,e,r.__O=r.__P);}this.__b=null;}var u=t.__e&&v$1(d$1,null,n.fallback);return u&&(u.__h=null),[v$1(d$1,null,t.__e?null:n.children),u]};var T=function(n,t,e){if(++e[1]===e[0]&&n.o.delete(t),n.props.revealOrder&&("t"!==n.props.revealOrder[0]||!n.o.size))for(e=n.u;e;){for(;e.length>3;)e.pop()();if(e[1]<e[0])break;n.u=e=e[2];}};(M.prototype=new _$1).__e=function(n){var t=this,e=U(t.__v),r=t.o.get(n);return r[0]++,function(u){var o=function(){t.props.revealOrder?(r.push(u),T(t,n,r)):u();};e?e(o):o();}},M.prototype.render=function(n){this.u=null,this.o=new Map;var t=A$2(n.children);n.revealOrder&&"b"===n.revealOrder[0]&&t.reverse();for(var e=t.length;e--;)this.o.set(t[e],this.u=[1,0,this.u]);return n.children},M.prototype.componentDidUpdate=M.prototype.componentDidMount=function(){var n=this;this.o.forEach(function(t,e){T(n,e,t);});};var j="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,P=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,V=function(n){return ("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(n)};_$1.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach(function(n){Object.defineProperty(_$1.prototype,n,{configurable:!0,get:function(){return this["UNSAFE_"+n]},set:function(t){Object.defineProperty(this,n,{configurable:!0,writable:!0,value:t});}});});var H=l$1.event;function Z(){}function Y(){return this.cancelBubble}function $(){return this.defaultPrevented}l$1.event=function(n){return H&&(n=H(n)),n.persist=Z,n.isPropagationStopped=Y,n.isDefaultPrevented=$,n.nativeEvent=n};var G={configurable:!0,get:function(){return this.class}},J=l$1.vnode;l$1.vnode=function(n){var t=n.type,e=n.props,r=e;if("string"==typeof t){for(var u in r={},e){var o=e[u];"value"===u&&"defaultValue"in e&&null==o||("defaultValue"===u&&"value"in e&&null==e.value?u="value":"download"===u&&!0===o?o="":/ondoubleclick/i.test(u)?u="ondblclick":/^onchange(textarea|input)/i.test(u+t)&&!V(e.type)?u="oninput":/^on(Ani|Tra|Tou|BeforeInp)/.test(u)?u=u.toLowerCase():P.test(u)?u=u.replace(/[A-Z0-9]/,"-$&").toLowerCase():null===o&&(o=void 0),r[u]=o);}"select"==t&&r.multiple&&Array.isArray(r.value)&&(r.value=A$2(e.children).forEach(function(n){n.props.selected=-1!=r.value.indexOf(n.props.value);})),"select"==t&&null!=r.defaultValue&&(r.value=A$2(e.children).forEach(function(n){n.props.selected=r.multiple?-1!=r.defaultValue.indexOf(n.props.value):r.defaultValue==n.props.value;})),n.props=r;}t&&e.class!=e.className&&(G.enumerable="className"in e,null!=e.className&&(r.class=e.className),Object.defineProperty(r,"className",G)),n.$$typeof=j,J&&J(n);};var K=l$1.__r;l$1.__r=function(n){K&&K(n);};

	function toVal$1(mix) {
		var k, y, str='';

		if (typeof mix === 'string' || typeof mix === 'number') {
			str += mix;
		} else if (typeof mix === 'object') {
			if (Array.isArray(mix)) {
				for (k=0; k < mix.length; k++) {
					if (mix[k]) {
						if (y = toVal$1(mix[k])) {
							str && (str += ' ');
							str += y;
						}
					}
				}
			} else {
				for (k in mix) {
					if (mix[k]) {
						str && (str += ' ');
						str += k;
					}
				}
			}
		}

		return str;
	}

	function clsx$1 () {
		var i=0, tmp, x, str='';
		while (i < arguments.length) {
			if (tmp = arguments[i++]) {
				if (x = toVal$1(tmp)) {
					str && (str += ' ');
					str += x;
				}
			}
		}
		return str;
	}

	/**
	 * Given two sets of props, merges their `class` and `className` properties.
	 * Duplicate classes are removed (order doesn't matter anyway).
	 *
	 * @param lhs Classes of the first component
	 * @param rhs Classes of the second component
	 * @returns A string representing all combined classes from both arguments.
	 */
	function useMergedClasses$1(lhs, rhs) {
	    // Note: For the sake of forward compatibility, this function is labelled as
	    // a hook, but as it uses no other hooks it technically isn't one.
	    return mergeClasses$1(lhs, rhs);
	}
	function mergeClasses$1(lhs, rhs) {
	    const lhsClass = lhs?.class;
	    const lhsClassName = lhs?.className;
	    const rhsClass = rhs?.class;
	    const rhsClassName = rhs?.className;
	    if (lhsClass || rhsClass || lhsClassName || rhsClassName) {
	        let lhsClasses = clsx$1(lhsClass, lhsClassName).split(" ");
	        let rhsClasses = clsx$1(rhsClass, rhsClassName).split(" ");
	        let allClasses = new Set([...Array.from(lhsClasses), ...Array.from(rhsClasses)]);
	        return Array.from(allClasses).join(" ");
	    }
	    else {
	        return undefined;
	    }
	}

	function processRef$1(instance, ref) {
	    if (typeof ref === "function") {
	        ref(instance);
	    }
	    else if (ref != null) {
	        ref.current = instance;
	    }
	}
	/**
	 * Combines two refs into one. This allows a component to both use its own ref *and* forward a ref that was given to it.
	 * @param lhs
	 * @param rhs
	 * @returns
	 */
	function useMergedRefs$1() {
	    return function (lhsProps, rhsProps) {
	        const lhs = lhsProps?.ref;
	        const rhs = rhsProps?.ref;
	        if (lhs == null && rhs == null) {
	            return undefined;
	        }
	        else if (lhs == null) {
	            return rhs;
	        }
	        else if (rhs == null) {
	            return lhs;
	        }
	        else {
	            let ret = A$1((current) => {
	                processRef$1(current, lhs);
	                processRef$1(current, rhs);
	            }, [lhs, rhs]);
	            return ret;
	        }
	    };
	}
	/*
	function typetest<P extends h.JSX.HTMLAttributes<HTMLInputElement>>(props: P) {

	    const ref: RefObject<HTMLInputElement> = useRef<HTMLInputElement>(null);

	    function acceptsRef(ref: Ref<any>) { }
	    function acceptsOptionalRef(ref: Ref<any> | undefined) { }

	    const c = [
	        useMergedRefs<HTMLInputElement>()(undefined, undefined),
	        useMergedRefs<HTMLInputElement>()({}, undefined),
	        useMergedRefs<HTMLInputElement>()(props, undefined),
	        useMergedRefs<HTMLInputElement>()(undefined, props),
	        useMergedRefs<HTMLInputElement>()(props, props),
	        useMergedRefs<HTMLInputElement>()({ ref }, props),
	        useMergedRefs<HTMLInputElement>()({ ref }, { ref: undefined }),
	        useMergedRefs<HTMLInputElement>()({ ref: undefined }, { ref }),
	        useMergedRefs<HTMLInputElement>()({ ref }, { ref }),
	    ] as const;

	    /// @ts-expect-error
	    acceptsRef(c[0]);
	    /// @ts-expect-error
	    acceptsRef(c[1]);

	    acceptsOptionalRef(c[2]);
	    acceptsOptionalRef(c[3]);
	    acceptsOptionalRef(c[4]);

	    /// @ts-expect-error TODO
	    acceptsRef(c[5]);
	    acceptsRef(c[6]);
	    acceptsRef(c[7]);
	    acceptsRef(c[8]);
	}
	*/

	/**
	 * Merges two style objects, returning the result.
	 *
	 * @param style The user-given style prop for this component
	 * @param obj The CSS properties you want added to the user-given style
	 * @returns A CSS object containing the properties of both objects.
	 */
	function useMergedStyles$1(lhs, rhs) {
	    // Easy case, when there are no styles to merge return nothing.
	    if (!lhs && !rhs)
	        return undefined;
	    if (typeof lhs != typeof rhs) {
	        // Easy cases, when one is null and the other isn't.
	        if (lhs && !rhs)
	            return lhs;
	        if (!lhs && rhs)
	            return rhs;
	        // They're both non-null but different types.
	        // Convert the string type to an object bag type and run it again.
	        if (lhs && rhs) {
	            if (typeof lhs == "string")
	                return useMergedStyles$1({ style: Object.fromEntries(lhs.split(";").map(statement => statement.split(":"))) }, rhs);
	            if (typeof rhs == "string")
	                return useMergedStyles$1(lhs, { style: Object.fromEntries(lhs.split(";").map(statement => statement.split(":"))) });
	        }
	        // Logic???
	        return undefined;
	    }
	    // They're both strings, just concatenate them.
	    if (typeof lhs == "string") {
	        return `${lhs};${rhs}`; // TODO: Improve the typing to make this possible
	    }
	    // They're both objects, just merge them.
	    return {
	        ...(lhs?.style ?? {}),
	        ...(rhs?.style ?? {})
	    };
	}

	let log$1 = (str) => { debugger; /* Intentional */ };
	// Generally too complex
	//Pick<h.JSX.HTMLAttributes<E>, keyof h.JSX.HTMLAttributes<E> & (keyof T | keyof U)>; 
	/**
	 * Given two sets of props, merges them and returns the result.
	 *
	 * The hook is aware of and can intelligently merge `className`, `class`, `style`, `ref`, and all event handlers.
	 * @param lhs2
	 * @param rhs2
	 * @returns
	 */
	function useMergedProps$1() {
	    return function (lhs2, rhs2) {
	        // First, put in all the properties that are easy to reason about
	        // and all lhs props. We're going to merge in rhs just after.
	        const { class: lhsClass, className: lhsClassName, style: lhsStyle, ref: lhsRef, ...lhs } = lhs2;
	        const { class: rhsClass, className: rhsClassName, style: rhsStyle, ref: rhsRef, ...rhs } = rhs2;
	        let ret = {
	            ...lhs,
	            ref: useMergedRefs$1()(lhs2, rhs2),
	            style: useMergedStyles$1(lhs2, rhs2),
	            className: useMergedClasses$1(lhs2, rhs2)
	        };
	        // Now, do *everything* else
	        // Merge every remaining existing entry in lhs with what we've already put in ret.
	        //const lhsEntries = Object.entries(lhs) as [keyof T, T[keyof T]][];
	        const rhsEntries = Object.entries(rhs);
	        for (const [rhsKey, rhsValue] of rhsEntries) {
	            const lhsValue = lhs[rhsKey];
	            if (typeof lhsValue === "function" || typeof rhsValue === "function") {
	                // They're both functions that can be merged (or one's a function and the other's null).
	                // Not an *easy* case, but a well-defined one.
	                const merged = mergeFunctions$1(lhsValue, rhsValue);
	                ret[rhsKey] = merged;
	            }
	            else {
	                // Uh...we're here because one of them's null, right?
	                if (lhsValue == null && rhsValue == null) {
	                    if (rhsValue === null && lhsValue === undefined)
	                        ret[rhsKey] = rhsValue;
	                    else
	                        ret[rhsKey] = lhsValue;
	                }
	                if (lhsValue == null)
	                    ret[rhsKey] = rhsValue;
	                else if (rhsValue == null)
	                    ret[rhsKey] = lhsValue;
	                else if (rhsValue == lhsValue) ;
	                else {
	                    // Ugh.
	                    // No good strategies here, just log it if requested
	                    log$1?.();
	                    ret[rhsKey] = rhsValue;
	                }
	            }
	        }
	        return ret;
	    };
	}
	function mergeFunctions$1(lhs, rhs) {
	    if (!lhs)
	        return rhs;
	    if (!rhs)
	        return lhs;
	    return (...args) => {
	        lhs?.(...args);
	        rhs?.(...args);
	    };
	}
	/*
	function test<P extends h.JSX.HTMLAttributes<HTMLInputElement>>(props: P) {

	    const id0: GenericGet<{}, "id", string> = "";
	    const id3: GenericGet<{ id: undefined }, "id", string> = undefined;
	    const id4: GenericGet<{ id: undefined }, "id", string> = undefined;
	    const id5: GenericGet<{ id: undefined }, "id", string> = undefined;
	    const id6: GenericGet<{ id: undefined }, "id", string> = undefined;
	    //const id2: ZipSingle<string | undefined, string | undefined> = undefined;
	    const id1: ZipObject<{ id: undefined }, { id: string }> = { id: undefined };

	    type M1 = GenericGet<P, "style", string>;
	    type M2 = GenericGet<{}, "style", string>;
	    const m1: M1 = "";
	    const m2: M1 = undefined;
	    /// @ts-expect-error    Because number isn't assignable to string
	    const m3: M1 = 0;

	    const m4: M2 = "";
	    const m5: M2 = undefined;
	    /// @ts-expect-error    Because number isn't assignable to string
	    const m6: M2 = 0;

	    const p1: MergedProps<HTMLInputElement, {}, { id: string }> = useMergedProps<HTMLInputElement>()({}, { id: "string" });
	    const p2: MergedProps<HTMLInputElement, { id: undefined }, { id: string }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: "string" });
	    const p3: MergedProps<HTMLInputElement, { id: undefined }, { id: undefined }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: undefined });
	    const p4: MergedProps<HTMLInputElement, {}, {}> = useMergedProps<HTMLInputElement>()({}, {});
	    const p5 = useMergedProps<HTMLInputElement>()(props, {});
	    const p6 = useMergedProps<HTMLInputElement>()(props, { id: undefined });
	    const p7 = useMergedProps<HTMLInputElement>()(props, { id: "string" });


	    p1.id?.concat("");
	    p2.id?.concat("");
	    /// @ts-expect-error    id can't be anything but undefined
	    p3.id?.concat("");
	    /// @ts-expect-error    id can't be anything but undefined
	    p4.id?.concat("");


	    p5.id?.concat("");
	    p6.id?.concat("");
	    p7.id?.concat("");

	    /// @ts-expect-error    id must contain undefined
	    p5.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    p6.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    p7.id.concat("");


	    if (p5.allowFullScreen === undefined) {}
	    else if (p5.allowFullScreen === false) {}
	    else if (p5.allowFullScreen === true) {}
	    else {
	        acceptsNever(p5.allowFullScreen);
	    }


	    if (p6.allowFullScreen === undefined) {}
	    else if (p6.allowFullScreen === false) {}
	    else if (p6.allowFullScreen === true) {}
	    else {
	        acceptsNever(p6.allowFullScreen);
	    }


	    if (p7.allowFullScreen === undefined) {}
	    else if (p7.allowFullScreen === false) {}
	    else if (p7.allowFullScreen === true) {}
	    else {
	        acceptsNever(p7.allowFullScreen);
	    }


	    // Make sure it works recursively
	    const r1a = useMergedProps<HTMLInputElement>()({}, p1);
	    const r1b = useMergedProps<HTMLInputElement>()(props, p1);
	    const r2a = useMergedProps<HTMLInputElement>()({}, p2);
	    const r2b = useMergedProps<HTMLInputElement>()(props, p2);
	    const r3a = useMergedProps<HTMLInputElement>()({}, p3);
	    const r3b = useMergedProps<HTMLInputElement>()(props, p3);
	    const r4a = useMergedProps<HTMLInputElement>()({}, p4);
	    const r4b = useMergedProps<HTMLInputElement>()(props, p4);
	    const r5a = useMergedProps<HTMLInputElement>()({}, p5);
	    const r5b = useMergedProps<HTMLInputElement>()(props, p5);
	    const r6a = useMergedProps<HTMLInputElement>()({}, p6);
	    const r6b = useMergedProps<HTMLInputElement>()(props, p6);
	    const r7a = useMergedProps<HTMLInputElement>()({}, p7);
	    const r7b = useMergedProps<HTMLInputElement>()(props, p7);


	    r1a.id?.concat("");
	    r1b.id?.concat("");
	    r2a.id?.concat("");
	    r2b.id?.concat("");
	    // @ts-expect-error    id can't be anything but undefined
	    r3a.id?.concat("");
	    r3b.id?.concat("");
	    /// @ts-expect-error    id can't be anything but undefined
	    r4a.id?.concat("");
	    r4b.id?.concat("");


	    r5a.id?.concat("");
	    r5b.id?.concat("");
	    r6a.id?.concat("");
	    r6b.id?.concat("");
	    r7a.id?.concat("");
	    r7b.id?.concat("");

	    /// @ts-expect-error    id must contain undefined
	    r5a.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r5b.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r6a.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r6b.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r7a.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r7b.id.concat("");


	    if (r5a.allowFullScreen === undefined) {}
	    else if (r5a.allowFullScreen === false) {}
	    else if (r5a.allowFullScreen === true) {}
	    else {
	        acceptsNever(r5a.allowFullScreen);
	    }


	    if (r5b.allowFullScreen === undefined) {}
	    else if (r5b.allowFullScreen === false) {}
	    else if (r5b.allowFullScreen === true) {}
	    else {
	        acceptsNever(r5b.allowFullScreen);
	    }


	    if (r6a.allowFullScreen === undefined) {}
	    else if (r6a.allowFullScreen === false) {}
	    else if (r6a.allowFullScreen === true) {}
	    else {
	        acceptsNever(r6a.allowFullScreen);
	    }


	    if (r6b.allowFullScreen === undefined) {}
	    else if (r6b.allowFullScreen === false) {}
	    else if (r6b.allowFullScreen === true) {}
	    else {
	        acceptsNever(r6b.allowFullScreen);
	    }


	    if (r7a.allowFullScreen === undefined) {}
	    else if (r7a.allowFullScreen === false) {}
	    else if (r7a.allowFullScreen === true) {}
	    else {
	        acceptsNever(r7a.allowFullScreen);
	    }


	    if (r7b.allowFullScreen === undefined) {}
	    else if (r7b.allowFullScreen === false) {}
	    else if (r7b.allowFullScreen === true) {}
	    else {
	        acceptsNever(r7b.allowFullScreen);
	    }

	}
	function acceptsNever(n: never) {}
	*/

	/**
	 * Slightly enhanced version of `useState` that includes a getter that remains constant
	 * (i.e. you can use it in `useEffect` and friends without it being a dependency).
	 *
	 * @param initialState
	 * @returns
	 */
	function useState$1(initialState) {
	    // We keep both
	    const [state, setState] = l(initialState);
	    const ref = s(state);
	    // Hijack the normal setter function 
	    // to also set our ref to the new value
	    const set = A$1((value) => {
	        if (typeof value === "function") {
	            let callback = value;
	            setState(prevValue => {
	                let nextValue = callback(prevValue);
	                ref.current = nextValue;
	                return nextValue;
	            });
	        }
	        else {
	            ref.current = value;
	            setState(value);
	        }
	    }, []);
	    const get = () => { return ref.current; };
	    console.assert(ref.current === state);
	    return [state, set, get];
	}

	/**
	 * Allows accessing the element a ref references as soon as it does so.
	 * *This hook itself returns a hook*--useRefElementProps modifies the props that you were going to pass to an HTMLElement,
	 * adding a RefCallback and merging it with any existing ref that existed on the props.
	 *
	 * Don't forget to provide the Element as the type argument!
	 *
	 * @returns The element, and the sub-hook that makes it retrievable.
	 */
	function useRefElement$1() {
	    // Let us store the actual (reference to) the element we capture
	    const [element, setElement, getElement] = useState$1(null);
	    // Create a RefCallback that's fired when mounted 
	    // and that notifies us of our element when we have it
	    const myRef = A$1((e) => {
	        if (e)
	            setElement(() => e);
	    }, []);
	    const useRefElementProps = A$1((props) => useMergedProps$1()({ ref: myRef }, props), []);
	    // Return both the element and the hook that modifies 
	    // the props and allows us to actually find the element
	    return {
	        useRefElementProps,
	        element,
	        getElement
	    };
	}

	function useElementSize({ observeBox } = {}) {
	    const { element, useRefElementProps } = useRefElement$1();
	    const [size, setSize, getSize] = useState$1(null);
	    y(() => {
	        if (element) {
	            const handleUpdate = () => {
	                const { clientWidth, scrollWidth, offsetWidth, clientHeight, scrollHeight, offsetHeight, clientLeft, scrollLeft, offsetLeft, clientTop, scrollTop, offsetTop } = element;
	                setSize({ clientWidth, scrollWidth, offsetWidth, clientHeight, scrollHeight, offsetHeight, clientLeft, scrollLeft, offsetLeft, clientTop, scrollTop, offsetTop });
	            };
	            if (!("ResizeObserver" in window)) {
	                document.addEventListener("resize", handleUpdate, { passive: true });
	                return () => document.removeEventListener("resize", handleUpdate);
	            }
	            else {
	                const observer = new ResizeObserver((entries) => { handleUpdate(); });
	                observer.observe(element, { box: observeBox });
	                return () => observer.disconnect();
	            }
	        }
	    }, [element, observeBox]);
	    return {
	        element,
	        elementSize: size,
	        getElementSize: getSize,
	        useElementSizeProps: useRefElementProps
	    };
	}

	function capitalize$1(str) {
	    return (str[0].toUpperCase() + str.substr(1));
	}
	/**
	 * Inspects the element's style and determines the logical direction that text flows.
	 *
	 * Certain CSS properties, like `block-size`, respect the current writing mode and text direction.
	 * But `transform`, `clip`, etc. don't.
	 *
	 * This is provided so that CSS properties can consistently use those logical properties.
	 *
	 * See https://drafts.csswg.org/css-writing-modes/#logical-to-physical
	 *
	 * @returns An object containing the following functions:
	 * * `getLogicalDirection`: retrieves a `LogicalDirectionInfo` representing the current state of the element. (Function is constant between renders)
	 * * `convertElementSize`: When used in conjunction with `useElementSize`, allows you to retrieve the logical size of an element instead of the physical size.
	 * * `convertToLogicalOrientation`: Based on the current direction, converts "horizontal" or "vertical" to "inline" or "block".
	 * * `convertToPhysicalOrientation`:  Based on the current direction, converts "inline" or "block" to "horizontal" or "vertical".
	 */
	function useLogicalDirection$1(element) {
	    const [writingMode, setWritingMode] = l(null);
	    const [direction, setDirection] = l(null);
	    const [textOrientation, setTextOrientation] = l(null);
	    const writingModeRef = s(writingMode);
	    const directionRef = s(direction);
	    const textOrientationRef = s(textOrientation);
	    h(() => { writingModeRef.current = writingMode; }, [writingMode]);
	    h(() => { directionRef.current = direction; }, [direction]);
	    h(() => { textOrientationRef.current = textOrientation; }, [textOrientation]);
	    h(() => {
	        if (element) {
	            const computedStyles = window.getComputedStyle(element);
	            const w = computedStyles.writingMode;
	            const t = computedStyles.textOrientation;
	            const d = computedStyles.direction;
	            setWritingMode(w || "horizontal-tb");
	            setDirection(d || "rtl");
	            setTextOrientation(t || "mixed");
	        }
	    });
	    const getLogicalDirection = A$1(() => {
	        let writingMode = writingModeRef.current;
	        let direction = directionRef.current;
	        let textOrientation = textOrientationRef.current;
	        if (!writingMode || !direction || !textOrientation)
	            return null;
	        if (textOrientation == "upright")
	            direction = "ltr";
	        return {
	            ...WritingModes$1[writingMode ?? "horizontal-tb"][direction ?? "ltr"]
	        };
	    }, [writingModeRef, directionRef, textOrientationRef]);
	    const convertToLogicalOrientation = A$1((elementOrientation, direction) => {
	        direction ??= getLogicalDirection();
	        if (direction?.inlineOrientation === elementOrientation)
	            return "inline";
	        return "block";
	    }, [getLogicalDirection]);
	    const convertToPhysicalOrientation = A$1((elementOrientation, direction) => {
	        direction ??= getLogicalDirection();
	        if (elementOrientation == "inline") {
	            if (direction?.inlineOrientation == "horizontal")
	                return "horizontal";
	            return "vertical";
	        }
	        else {
	            if (direction?.blockOrientation == "vertical")
	                return "vertical";
	            return "horizontal";
	        }
	    }, [getLogicalDirection]);
	    const convertElementSize = A$1((elementSize, direction) => {
	        direction ??= getLogicalDirection();
	        if (direction) {
	            const { inlineSize, blockSize, inlineDirection, blockDirection } = direction;
	            // Size is relatively simple
	            let clientInlineSize = elementSize[`client${capitalize$1(inlineSize)}`];
	            let clientBlockSize = elementSize[`client${capitalize$1(blockSize)}`];
	            let offsetInlineSize = elementSize[`offset${capitalize$1(inlineSize)}`];
	            let offsetBlockSize = elementSize[`offset${capitalize$1(blockSize)}`];
	            let scrollInlineSize = elementSize[`scroll${capitalize$1(inlineSize)}`];
	            let scrollBlockSize = elementSize[`scroll${capitalize$1(blockSize)}`];
	            // Position requires us to sometimes use one property (like `left`)
	            // or sometimes two (like `left` + `width`)
	            function getPhysicalLeftTop(dir) { if (dir === "ltr" || dir == "rtl")
	                return "left"; return "top"; }
	            function getPhysicalRightBottom(dir) { if (dir === "rtl")
	                return "width"; if (dir === "btt")
	                return "height"; return null; }
	            const f1 = getPhysicalLeftTop(inlineDirection);
	            const f2 = getPhysicalRightBottom(inlineDirection);
	            const f3 = getPhysicalLeftTop(blockDirection);
	            const f4 = getPhysicalRightBottom(blockDirection);
	            let clientInlineInset = elementSize[`client${capitalize$1(f1)}`] + (!f2 ? 0 : elementSize[`client${capitalize$1(f2)}`]);
	            let scrollInlineInset = elementSize[`scroll${capitalize$1(f1)}`] + (!f2 ? 0 : elementSize[`scroll${capitalize$1(f2)}`]);
	            let offsetInlineInset = elementSize[`offset${capitalize$1(f1)}`] + (!f2 ? 0 : elementSize[`offset${capitalize$1(f2)}`]);
	            let clientBlockInset = elementSize[`client${capitalize$1(f3)}`] + (!f4 ? 0 : elementSize[`client${capitalize$1(f4)}`]);
	            let scrollBlockInset = elementSize[`scroll${capitalize$1(f3)}`] + (!f4 ? 0 : elementSize[`scroll${capitalize$1(f4)}`]);
	            let offsetBlockInset = elementSize[`offset${capitalize$1(f3)}`] + (!f4 ? 0 : elementSize[`offset${capitalize$1(f4)}`]);
	            return {
	                clientInlineSize,
	                scrollInlineSize,
	                offsetInlineSize,
	                clientBlockSize,
	                scrollBlockSize,
	                offsetBlockSize,
	                clientInlineInset,
	                scrollInlineInset,
	                offsetInlineInset,
	                clientBlockInset,
	                scrollBlockInset,
	                offsetBlockInset,
	            };
	        }
	        return null;
	    }, [getLogicalDirection]);
	    return {
	        getLogicalDirection,
	        convertElementSize,
	        convertToLogicalOrientation,
	        convertToPhysicalOrientation
	    };
	}
	const HorizontalTbLtr$1 = {
	    inlineDirection: "ltr",
	    blockDirection: "ttb",
	    inlineOrientation: "horizontal",
	    blockOrientation: "vertical",
	    inlineSize: "width",
	    blockSize: "height",
	    leftRightDirection: "ltr",
	    overUnderDirection: "ttb"
	};
	const HorizontalTbRtl$1 = {
	    ...HorizontalTbLtr$1,
	    inlineDirection: "rtl",
	};
	const VerticalRlLtr$1 = {
	    inlineDirection: "ttb",
	    blockDirection: "rtl",
	    inlineOrientation: "vertical",
	    blockOrientation: "horizontal",
	    inlineSize: "height",
	    blockSize: "width",
	    leftRightDirection: "ttb",
	    overUnderDirection: "rtl"
	};
	const VerticalRlRtl$1 = {
	    ...VerticalRlLtr$1,
	    inlineDirection: "btt"
	};
	const SidewaysRlLtr$1 = { ...VerticalRlLtr$1 };
	const SidewaysRlRtl$1 = { ...VerticalRlRtl$1 };
	const VerticalLrLtr$1 = {
	    ...VerticalRlLtr$1,
	    blockDirection: "ltr",
	};
	const VerticalLrRtl$1 = {
	    ...VerticalRlRtl$1,
	    blockDirection: "ltr",
	};
	const SidewaysLtLtr$1 = {
	    ...VerticalLrLtr$1,
	    inlineDirection: "btt",
	    leftRightDirection: "btt",
	    overUnderDirection: "ltr"
	};
	const SidewaysLtRtl$1 = {
	    ...SidewaysLtLtr$1,
	    inlineDirection: "ttb"
	};
	const HorizontalTb$1 = {
	    ltr: HorizontalTbLtr$1,
	    rtl: HorizontalTbRtl$1
	};
	const VerticalRl$1 = {
	    ltr: VerticalRlLtr$1,
	    rtl: VerticalRlRtl$1
	};
	const VerticalLr$1 = {
	    ltr: VerticalLrLtr$1,
	    rtl: VerticalLrRtl$1
	};
	const SidewaysRl$1 = {
	    ltr: SidewaysRlLtr$1,
	    rtl: SidewaysRlRtl$1
	};
	const SidewaysLr$1 = {
	    ltr: SidewaysLtLtr$1,
	    rtl: SidewaysLtRtl$1
	};
	const WritingModes$1 = {
	    "horizontal-tb": HorizontalTb$1,
	    "vertical-lr": VerticalLr$1,
	    "vertical-rl": VerticalRl$1,
	    "sideways-lr": SidewaysLr$1,
	    "sideways-rl": SidewaysRl$1
	};

	/**
	 * Given an input value, returns a constant getter function that can be used
	 * inside of `useEffect` and friends without including it in the dependency array.
	 *
	 * Use with caution, and **do not use the getter in useLayoutEffect!!**
	 * `setState`'s getter does not have this problem, but then you're using your own state
	 * instead of an existing value, which might not always be feasible.
	 *
	 * Weigh your options, and hopefully one of them gets the job done.
	 *
	 * @param value
	 * @returns
	 */
	function useStableGetter$1(value) {
	    const ref = s(value);
	    _(ref, () => value);
	    return A$1(() => { return ref.current; }, []);
	}

	/**
	 * Alternate useCallback() which always returns the same (wrapped) function reference
	 * so that it can be excluded from the dependency arrays of `useEffect` and friends.
	 *
	 * DO NOT USE THE RESULT IN useLayoutEffect!!
	 *
	 * TODO: Investigate options.diffed if the useLayoutEffect limitation becomes limitlessly limiting.
	 *
	 * Source: https://github.com/facebook/react/issues/14099#issuecomment-659298422
	 */
	function useStableCallback$1(fn) {
	    const currentCallbackGetter = useStableGetter$1(fn);
	    return A$1((...args) => {
	        const currentFunc = currentCallbackGetter();
	        if (!currentFunc) {
	            throw new Error('Callback retrieved from useStableCallback() cannot be called from useLayoutEffect().');
	        }
	        return currentFunc(...args);
	    }, []);
	}

	/**
	 * Wrap the native `useLayoutEffect` to add arguments
	 * that allow accessing the previous value as the first argument,
	 * as well as the changes that caused the hook to be called as the second argument.
	 *
	 * @param effect
	 * @param inputs
	 */
	function useLayoutEffect$1(effect, inputs) {
	    const prevInputs = s(inputs);
	    const effect2 = () => {
	        let changes = [];
	        for (let i = 0; i < Math.max(prevInputs.current.length, inputs.length); ++i) {
	            if (prevInputs.current[i] != inputs[i])
	                changes[i] = { from: prevInputs.current[i], to: inputs[i] };
	        }
	        effect(prevInputs.current, changes);
	        prevInputs.current = inputs;
	    };
	    h(effect2, inputs);
	}

	function useTimeout$1({ timeout, callback, triggerIndex }) {
	    const stableCallback = useStableCallback$1(callback);
	    const getTimeout = useStableGetter$1(timeout);
	    const timeoutIsNull = (timeout == null);
	    y(() => {
	        const timeout = getTimeout();
	        console.assert(timeoutIsNull == (timeout == null));
	        if (timeout) {
	            const handle = setTimeout(stableCallback, timeout);
	            return () => clearTimeout(handle);
	        }
	    }, [triggerIndex, timeoutIsNull]);
	}

	function useAnimationFrame({ callback }) {
	    // Get a wrapper around the given callback that's stable
	    const stableCallback = useStableCallback$1(callback ?? (() => { }));
	    const hasCallback = (callback != null);
	    y(() => {
	        if (hasCallback) {
	            // Get a wrapper around the wrapper around the callback
	            // that also calls `requestAnimationFrame` again.
	            const rafCallback = (ms) => {
	                handle = requestAnimationFrame(rafCallback);
	                stableCallback(ms);
	            };
	            let handle = requestAnimationFrame(rafCallback);
	            return () => cancelAnimationFrame(handle);
	        }
	    }, [hasCallback]);
	}

	// Used instead of undefined in case undefined is a 
	// type that's frequently used in the used use case.
	const NeverSet$1 = Symbol("never-set");
	/**
	 * Returns a value that does not change between renders. The provided getter will only be called once, just in case it's expensive.
	 *
	 * Optionally, the value can depend on a set of arguments that will be passed to the getter.
	 *
	 * Effectively, this is `useMemo`, except it passes its dependencies to the factory function.
	 *
	 * @param getter A function that returns the value you want to use
	 * @param args Optional arguments to pass to the function. The function will only be called again if these change.
	 * @returns
	 */
	function useConstant$1(getter, ...args) {
	    const [value, setValue] = useState$1(NeverSet$1);
	    h(() => { setValue(prev => getter(...args)); }, args);
	    if (value === NeverSet$1)
	        return getter(...args);
	    return value;
	}

	function useDraggable({ effectAllowed, data, dragImage, dragImageXOffset, dragImageYOffset }) {
	    const [dragging, setDragging, getDragging] = useState$1(false);
	    const [lastDropEffect, setLastDropEffect, getLastDropEffect] = useState$1(null);
	    const useDraggableProps = A$1((p) => {
	        const ref = s(null);
	        const { element, useRefElementProps } = useRefElement$1();
	        const onDragStart = (e) => {
	            //e.preventDefault();
	            setDragging(true);
	            if (e.dataTransfer) {
	                e.dataTransfer.effectAllowed = (effectAllowed ?? "all");
	                if (dragImage)
	                    e.dataTransfer.setDragImage(dragImage, dragImageXOffset ?? 0, dragImageYOffset ?? 0);
	                let entries = Object.entries(data);
	                for (const [mimeType, data] of entries) {
	                    e.dataTransfer.setData(mimeType, data);
	                }
	            }
	        };
	        const onDragEnd = (e) => {
	            e.preventDefault();
	            setDragging(false);
	            if (e.dataTransfer) {
	                if (e.dataTransfer.dropEffect != "none") {
	                    setLastDropEffect(e.dataTransfer.dropEffect);
	                }
	                else {
	                    setLastDropEffect(null);
	                }
	            }
	        };
	        return useMergedProps$1()(useRefElementProps({
	            draggable: true,
	            onDragStart,
	            onDragEnd,
	            ref
	        }), p);
	    }, [effectAllowed, dragImage, dragImageXOffset, dragImageYOffset, ...Object.entries(data).flat()]);
	    // Return both the element and the hook that modifies 
	    // the props and allows us to actually find the element
	    let ret = {
	        useDraggableProps,
	        dragging,
	        getDragging,
	        // Set once a drag has completed with the resulting action
	        // Useful for removing the element afterwards if it was "move"
	        lastDropEffect,
	        /**
	         * Test
	         */
	        getLastDropEffect
	    };
	    return ret;
	}

	class DroppableFileError extends Error {
	    fileName;
	    errorType;
	    constructor(fileName, base) {
	        super(base?.message ?? "An unspecified error occurred reading the file.");
	        this.fileName = fileName;
	        this.errorType = base?.name;
	    }
	}
	//MergedProps<UseRefElementPropsReturnType<E, Pick<h.JSX.HTMLAttributes<E>, "onDragEnter" | "onDragLeave" | "onDragOver" | "onDrop">>, P>;
	function useDroppable({ effect }) {
	    const [filesForConsideration, setFilesForConsideration] = useState$1(null);
	    const [stringsForConsideration, setStringsForConsideration] = useState$1(null);
	    const [droppedFiles, setDroppedFiles] = useState$1(null);
	    const [droppedStrings, setDroppedStrings] = useState$1(null);
	    const [dropError, setDropError] = useState$1(undefined);
	    // All the promises generated from the drop events.
	    // Used to process multiple drop events in succession
	    const dropPromisesRef = s([]);
	    const [currentPromiseIndex, setCurrentPromiseIndex, getCurrentPromiseIndex] = useState$1(-1);
	    const [promiseCount, setPromiseCount, getPromiseCount] = useState$1(0);
	    const { element, useRefElementProps, getElement } = useRefElement$1();
	    // Any time we add a new promise, if there's no current promise running, we need to start one.
	    // If there is one, then we don't need to do anything, since it runs the same check.
	    y(() => {
	        const currentPromiseIndex = getCurrentPromiseIndex();
	        const promiseCount = getPromiseCount();
	        if (promiseCount > 0) {
	            if ((currentPromiseIndex + 1) < promiseCount) {
	                setCurrentPromiseIndex(i => ++i);
	            }
	        }
	    }, [promiseCount]);
	    // Anytime our current promise changes,
	    // wait for it to finish, then set our state to its result.
	    // Finally, check to see if there are anymore promises.
	    // If there are, then increase currentPromiseCount,
	    // which will trigger this again.
	    //
	    // This shouldn't happen *often*, but maybe in the case of
	    // individually dropping a bunch of large files or something.
	    y(() => {
	        if (currentPromiseIndex >= 0) {
	            const currentPromise = dropPromisesRef.current[currentPromiseIndex];
	            currentPromise.then((info) => {
	                if (info !== null) {
	                    const { files, strings } = info;
	                    setDroppedFiles(files);
	                    setDroppedStrings(strings);
	                }
	                // Now that we're done, are there more promises in the queue?
	                const currentPromiseIndex = getCurrentPromiseIndex();
	                const promiseCount = getPromiseCount();
	                if ((currentPromiseIndex + 1) < promiseCount) {
	                    // Since this promise has started, more have been added.
	                    // Run this effect again.
	                    setCurrentPromiseIndex(i => ++i);
	                }
	            });
	        }
	    }, [currentPromiseIndex]);
	    const useDroppableProps = (p) => {
	        //const ref = useRef<E>(null);
	        // Handle collecting the current file metadata or MIME types.
	        const onDragEnter = (e) => {
	            e.preventDefault();
	            if (e.dataTransfer) {
	                // Is there a default? I can't find one anywhere.
	                e.dataTransfer.dropEffect = (effect ?? "move");
	                const newMimeTypes = new Set();
	                const newFiles = new Array();
	                for (let item of e.dataTransfer?.items ?? []) {
	                    const { kind, type } = item;
	                    if (kind === "string") {
	                        newMimeTypes.add(type);
	                    }
	                    else if (kind === "file") {
	                        newFiles.push({ type: item.type });
	                    }
	                }
	                setFilesForConsideration(newFiles);
	                setStringsForConsideration(newMimeTypes);
	            }
	        };
	        // Handle resetting the current file metadata or MIME types
	        const onDragLeave = (e) => {
	            e.preventDefault();
	            setFilesForConsideration(null);
	            setStringsForConsideration(null);
	        };
	        // Boilerplate, I guess
	        const onDragOver = (e) => {
	            e.preventDefault();
	        };
	        // Handle getting the drop data asynchronously
	        const onDrop = (e) => {
	            e.preventDefault();
	            setFilesForConsideration(null);
	            setStringsForConsideration(null);
	            let allPromises = new Array();
	            const dropData = {};
	            const dropFile = [];
	            for (let item of e.dataTransfer?.items ?? []) {
	                const { kind, type } = item;
	                if (kind === "string") {
	                    allPromises.push((new Promise((resolve, reject) => item.getAsString(resolve))).then(str => dropData[type] = str));
	                }
	                else if (kind === "file") {
	                    const file = item.getAsFile();
	                    if (file) {
	                        allPromises.push(new Promise((resolve, reject) => {
	                            let reader = new FileReader();
	                            reader.onload = (e) => {
	                                resolve();
	                                const data = reader.result;
	                                dropFile.push({ data, name: file.name, type: file.type, size: data.byteLength, lastModified: file.lastModified });
	                            };
	                            reader.onerror = (e) => { reject(new DroppableFileError(file.name, reader.error)); };
	                            reader.onabort = (e) => { reject(new DroppableFileError(file.name, reader.error)); };
	                            reader.readAsArrayBuffer(file);
	                        }));
	                        dropFile.push();
	                    }
	                }
	            }
	            dropPromisesRef.current.push(Promise.all(allPromises).then(() => {
	                setPromiseCount(i => ++i);
	                setDropError(null);
	                return {
	                    strings: dropData,
	                    files: dropFile
	                };
	            }).catch(ex => {
	                debugger; // Intentional
	                setPromiseCount(i => ++i);
	                setDropError(ex);
	                return null;
	            }));
	        };
	        return useMergedProps$1()(useRefElementProps({ onDragEnter, onDragLeave, onDragOver, onDrop }), p);
	    };
	    return {
	        useDroppableProps,
	        filesForConsideration,
	        stringsForConsideration,
	        droppedFiles,
	        droppedStrings,
	        dropError,
	        element,
	        getElement
	    };
	}

	/**
	 *
	 * There are several different ways that a focus event can happen.  Assume
	 * the following steps happen in order:
	 *
	 * 1. The page loads.
	 *    * Nothing is focused, but `document.activeElement` is `body`.
	 *    * No focus events are fired.
	 * 2. The window is focused, an unfocusable element is clicked, text is selected, etc.
	 *    * The `activeElement` remains as `body`.
	 *    * A `focus`/`focusin` event *MIGHT* be fired for `body`. Depending on
	 *      the browser, this depends on whether the handler was attached to `window` or `document`.
	 *      Probably just best to not rely on it, or listen to `window` focus events directly.
	 * 3. A focusable element is clicked, etc.
	 *    * The `activeElement` is set to the new element before any event even fires.
	 *    * `focusout` and `blur` are *not* fired on `body`.
	 *    * `focus` and `focusin` are fired on the new element. `relatedTarget` is null.
	 * 4. A focusable element is clicked, etc.
	 *    * **The `activeElement` is set to the `body`** before any event even fires.
	 *    * `blur` and `focusout` are fired on the old element. `relatedTarget` is the new element.
	 *    * The `activeElement` is now set to the new element.
	 *    * `focusin` is fired on the new element. `relatedTarget` is the old element.
	 * 5. An unfocusable element is clicked, text is selected, etc.
	 *    * The `activeElement` is set to `body`.
	 *    * `blur` and `focusout` are fired on the old element. `relatedTarget` is null.
	 *    * `focusin` is *not* fired on `body`.
	 *
	 *
	 * In summary:
	 * 1. Focus events *do* notify us of all changes in focus, but there is no one single comprehensive event that provides us with all available information.
	 * 2. `document.activeElement` *is not* always the same as what's being referenced by a focus event. In particular, it may become `body` at any arbitrary time.
	 * 3. A `blur` without a `focus` can and will occur. This means it is not possible to solely use `focus` to detect all changes.
	 * 4. A `blur` event whose `relatedTarget` is null indicates that there will be no following `focus` event.
	 *
	 *
	 * @param callback
	 * @returns
	 */
	let currentlyFocusedElement$1 = null;
	let lastFocusedElement$1 = null;
	function getLastFocusedElement$1() {
	    return lastFocusedElement$1;
	}
	function getCurrentlyFocusedElement$1() {
	    return currentlyFocusedElement$1;
	}
	const updaters$1 = new Set();
	function focusout$1(e) {
	    if (e.relatedTarget == null) {
	        currentlyFocusedElement$1 = null;
	        for (let f of updaters$1) {
	            f();
	        }
	    }
	}
	function focusin$1(e) {
	    currentlyFocusedElement$1 = lastFocusedElement$1 = e.target;
	    for (let f of updaters$1) {
	        f();
	    }
	}
	let windowFocused$1 = true;
	function windowFocus$1() {
	    windowFocused$1 = true;
	    for (let f of updaters$1) {
	        f();
	    }
	}
	function windowBlur$1() {
	    windowFocused$1 = false;
	    for (let f of updaters$1) {
	        f();
	    }
	}
	function useActiveElement$1() {
	    // TODO: Is this actually better than using proper state management?
	    const [i, setI] = useState$1(0);
	    h(() => {
	        const F = () => setI(i => ++i);
	        if (updaters$1.size === 0) {
	            document.addEventListener("focusin", focusin$1, { passive: true });
	            document.addEventListener("focusout", focusout$1, { passive: true });
	            window.addEventListener("focus", windowFocus$1, { passive: true });
	            window.addEventListener("blur", windowBlur$1, { passive: true });
	        }
	        updaters$1.add(F);
	        return () => {
	            updaters$1.delete(F);
	            if (updaters$1.size === 0) {
	                document.removeEventListener("focusin", focusin$1);
	                document.removeEventListener("focusout", focusout$1);
	                window.removeEventListener("focus", windowFocus$1);
	                window.removeEventListener("blur", windowBlur$1);
	            }
	        };
	    }, []);
	    return {
	        activeElement: currentlyFocusedElement$1,
	        lastActiveElement: lastFocusedElement$1,
	        getActiveElement: getCurrentlyFocusedElement$1,
	        getLastActiveElement: getLastFocusedElement$1,
	        windowFocused: windowFocused$1
	    };
	}

	function useHasFocus$1({} = {}) {
	    //const [focusedElement, setFocusedElement, getFocusedElement] = useState<EventTarget | null>(null);
	    //const [focused, setFocused] = useState(false);
	    //const [focusedInner, setFocusedInner] = useState(false);
	    const { element, getElement, useRefElementProps } = useRefElement$1();
	    const { activeElement, lastActiveElement } = useActiveElement$1();
	    const useHasFocusProps = A$1((props) => {
	        return useRefElementProps(props);
	    }, []);
	    const focused = d(() => { return element == activeElement; }, [element, activeElement]);
	    const focusedInner = d(() => { return element?.contains(activeElement) ?? false; }, [element, activeElement]);
	    const lastFocused = d(() => { return element == lastActiveElement; }, [element, lastActiveElement]);
	    const lastFocusedInner = d(() => { return element?.contains(lastActiveElement) ?? false; }, [element, lastActiveElement]);
	    return {
	        useHasFocusProps,
	        focusedElement: activeElement,
	        lastFocusedElement: lastActiveElement,
	        focused,
	        focusedInner,
	        lastFocused,
	        lastFocusedInner
	    };
	}

	function useInterval({ interval, callback }) {
	    // Get a wrapper around the given callback that's stable
	    const stableCallback = useStableCallback$1(callback);
	    const getInterval = useStableGetter$1(interval);
	    y(() => {
	        let interval = getInterval();
	        let lastDelayUsed = interval;
	        if (interval == null)
	            return;
	        // Get a wrapper around the wrapper around the callback
	        // that clears and resets the interval if it changes.
	        const adjustableCallback = () => {
	            stableCallback();
	            const currentInterval = getInterval();
	            if (currentInterval != lastDelayUsed) {
	                clearInterval(handle);
	                if (currentInterval != null)
	                    handle = setInterval(adjustableCallback, lastDelayUsed = currentInterval);
	            }
	        };
	        let handle = setInterval(adjustableCallback, interval);
	        return () => clearInterval(handle);
	    }, []);
	}

	/**
	 * Allows a parent component to access information about certain
	 * child components once they have rendered.
	 *
	 * This hook is slightly more complicated in that it returns both a
	 * prop-modifying hook, but also a hook that each child will need
	 * to use: `useManagedChild`.  It's stable across renders, so just
	 * toss it into a `Context` so the children can have access to it.
	 * This function registers the child with the parent and provides
	 * it with any requested information, but doesn't do anything else
	 * until it unmounts and retracts that information.
	 */
	function useChildManager$1() {
	    // This is blindly updated any time a child mounts or unmounts itself.
	    // Used to make sure that any time the array of managed children updates,
	    // we also re-render.
	    const [childUpdateIndex, setChildUpdateIndex] = useState$1(0);
	    const managedChildren = s([]);
	    const indicesByElement = s(new Map());
	    const useManagedChild = A$1((info) => {
	        const { element, getElement, useRefElementProps } = useRefElement$1();
	        // As soon as the component mounts, notify the parent and request a rerender.
	        useLayoutEffect$1(([prevElement, prevIndex], changes) => {
	            if (element) {
	                indicesByElement.current.set(element, info.index);
	                if (managedChildren.current[info.index] != undefined) {
	                    console.assert(info.index == undefined, "Two children with the same index were added, which may result in unexpected behavior.");
	                    debugger; // Intentional
	                }
	                setChildUpdateIndex(c => ++c);
	                managedChildren.current[info.index] = { ...info };
	                return () => {
	                    setChildUpdateIndex(c => ++c);
	                    delete managedChildren.current[info.index];
	                    indicesByElement.current.delete(element);
	                };
	            }
	        }, [element, info.index]);
	        // Any time our child props change, make that information available generally.
	        // *Don't re-render*, otherwise we'd be stuck in an
	        // infinite loop every time an anonymous function is passed.
	        // It comes in from the props so the child was already updated by it --
	        // we don't need the parent to re-render every single child any time
	        // "onClick" updates or whatever.  The relevant child already knows,
	        // and that's what matters.
	        useLayoutEffect$1(() => {
	            if (managedChildren.current[info.index] != undefined)
	                managedChildren.current[info.index] = { ...info };
	        }, [...Object.entries(info).flat()]);
	        return { element, getElement, useManagedChildProps: useRefElementProps };
	    }, []);
	    return {
	        useManagedChild,
	        managedChildren: managedChildren.current,
	        indicesByElement: indicesByElement.current
	    };
	}

	/**
	 * Implements a roving tabindex system where only one "focusable"
	 * component in a set is able to receive a tab focus. *Which*
	 * of those elements receives focus is determined by you, but it's
	 * recommended to offload that logic then to another hook, like
	 * `useLinearNavigation`, which lets you change the tabbable
	 * element with the arrow keys, `useTypeaheadNavigation`, which
	 * lets you change the tabbable index with typeahead, or
	 * `useListNavigation` if you just want everything bundled together.
	 *
	 * Note that the child hook returned by this function must be used
	 * by every child that uses this roving tabindex logic.  The
	 * prop-modifying hook *that* hook returns should then be used
	 * on the child's element, as well as any other elements you'd like
	 * to be explicitly made untabbable too.
	 */
	function useRovingTabIndex$1({ tabbableIndex }) {
	    const { focused, focusedInner, useHasFocusProps } = useHasFocus$1();
	    const getTabbableIndex = useStableGetter$1(tabbableIndex);
	    // Keep track of three things related to the currently tabbable element's index:
	    // What it is,
	    // What it was the last time,
	    // Whether, when we render this component and it's changed, to also focus the element that was made tabbable.
	    // For this reason, boolean | null is semantically intentional, if technically unnecessary -- 
	    // true or false imply a change just happened and that tabbableIndex != prevTabbable.current, and null implies no change.
	    //const [tabbableIndex, setTabbableIndex, getTabbableIndex] = useState(0);
	    const prevTabbable = s(-Infinity);
	    // Call the hook that allows us to collect information from children who provide it
	    const { managedChildren, useManagedChild, indicesByElement } = useChildManager$1();
	    const childCount = managedChildren.length;
	    // Doesn't do anything, but here because there's a pretty decent chance it might in the future.
	    const useRovingTabIndexProps = A$1((props) => useMergedProps$1()(useHasFocusProps({}), props), []);
	    const focusOnChange = (focusedInner != false);
	    // Any time the tabbable index changes,
	    // notify the previous child that it's no longer tabbable,
	    // and notify the next child that is allowed to be tabbed to.
	    useLayoutEffect$1(() => {
	        if (tabbableIndex != prevTabbable.current) {
	            if (managedChildren[tabbableIndex]) {
	                managedChildren[prevTabbable.current]?.setTabbable(false, undefined);
	                managedChildren[tabbableIndex].setTabbable(true, focusOnChange ? "focus" : undefined);
	                prevTabbable.current = tabbableIndex;
	            }
	        }
	    }, [tabbableIndex, focusOnChange]);
	    const focusSelf = A$1(() => {
	        managedChildren[tabbableIndex].setTabbable(true, "focus");
	    }, [tabbableIndex]);
	    const useRovingTabIndexChild = A$1((info) => {
	        const setTabbable = A$1((tabbable, shouldFocus) => {
	            setTabbable2(tabbable);
	            if (tabbable && shouldFocus)
	                setShouldFocus(!!shouldFocus);
	        }, []);
	        let newInfo = {
	            ...info,
	            setTabbable
	        };
	        const { element, getElement, useManagedChildProps } = useManagedChild(newInfo);
	        const [tabbable, setTabbable2] = useState$1(getTabbableIndex() == info.index);
	        const [shouldFocus, setShouldFocus] = useState$1(false);
	        function useRovingTabIndexSiblingProps({ tabIndex, ...props }) {
	            if (tabIndex == null) {
	                if (tabbable)
	                    tabIndex = 0;
	                else
	                    tabIndex = -1;
	            }
	            return useMergedProps$1()({ tabIndex }, props);
	        }
	        function useRovingTabIndexChildProps({ tabIndex, ...props }) {
	            //const { element, useRefElementProps } = useRefElement<ChildElement>();
	            useLayoutEffect$1(() => {
	                if (element && shouldFocus && "focus" in element) {
	                    requestAnimationFrame(() => {
	                        queueMicrotask(() => {
	                            element.focus();
	                        });
	                    });
	                    setShouldFocus(false);
	                }
	            }, [element, shouldFocus]);
	            if (tabIndex == null) {
	                if (tabbable)
	                    tabIndex = 0;
	                else
	                    tabIndex = -1;
	            }
	            return useMergedProps$1()(useManagedChildProps({ tabIndex }), props);
	        }
	        return {
	            useRovingTabIndexChildProps,
	            useRovingTabIndexSiblingProps,
	            tabbable
	        };
	    }, [useManagedChild]);
	    return {
	        useRovingTabIndexProps,
	        useRovingTabIndexChild,
	        childCount,
	        managedChildren,
	        indicesByElement,
	        focusSelf
	    };
	}

	/**
	 * When used in tandem with `useRovingTabIndex`, allows control of
	 * the tabbable index with the arrow keys.
	 *
	 * @see useListNavigation, which packages everything up together.
	 */
	function useLinearNavigation$1({ getIndex, setIndex, managedChildren, navigationDirection }) {
	    navigationDirection ??= "either";
	    const index = getIndex();
	    const childCount = managedChildren.length;
	    // Make sure the tabbable index never escapes the bounds of all available children
	    // TODO: Keep track of the original index and keep it, at least until keyboard navigation.
	    useLayoutEffect$1(() => {
	        if (index < 0) {
	            setIndex(0);
	        }
	        else if (childCount > 0 && index >= childCount) {
	            setIndex(childCount - 1);
	        }
	    }, [index, childCount]);
	    // These allow us to manipulate what our current tabbable child is.
	    const navigateToIndex = A$1((index) => { setIndex(index < 0 ? (managedChildren.length + index) : index); }, []);
	    const navigateToNext = A$1(() => { setIndex(i => ++i); }, []);
	    const navigateToPrev = A$1(() => { setIndex(i => --i); }, []);
	    const navigateToStart = A$1(() => { navigateToIndex(0); }, [navigateToIndex]);
	    const navigateToEnd = A$1(() => { navigateToIndex(-1); }, [navigateToIndex]);
	    const { useRefElementProps, getElement: getParentElement } = useRefElement$1();
	    const { convertElementSize, getLogicalDirection } = useLogicalDirection$1(getParentElement());
	    const useLinearNavigationProps = function ({ ...props }) {
	        return useRefElementProps(props);
	    };
	    const useLinearNavigationChild = A$1(() => {
	        const useLinearNavigationChildProps = (props) => {
	            const onKeyDown = (e) => {
	                // Not handled by typeahead (i.e. assume this is a keyboard shortcut)
	                if (e.ctrlKey || e.metaKey)
	                    return;
	                const info = getLogicalDirection();
	                let allowsBlockNavigation = (navigationDirection == "block" || navigationDirection == "either");
	                let allowsInlineNavigation = (navigationDirection == "inline" || navigationDirection == "either");
	                switch (e.key) {
	                    case "ArrowUp": {
	                        const propName = (info?.blockOrientation === "vertical" ? "blockDirection" : "inlineDirection");
	                        const directionAllowed = (info?.blockOrientation === "vertical" ? allowsBlockNavigation : allowsInlineNavigation);
	                        if (directionAllowed) {
	                            if (info?.[propName] === "btt") {
	                                navigateToNext();
	                            }
	                            else {
	                                navigateToPrev();
	                            }
	                            e.preventDefault();
	                            e.stopPropagation();
	                        }
	                        break;
	                    }
	                    case "ArrowDown": {
	                        const propName = (info?.blockOrientation === "vertical" ? "blockDirection" : "inlineDirection");
	                        const directionAllowed = (info?.blockOrientation === "vertical" ? allowsBlockNavigation : allowsInlineNavigation);
	                        if (directionAllowed) {
	                            if (info?.[propName] === "btt") {
	                                navigateToPrev();
	                            }
	                            else {
	                                navigateToNext();
	                            }
	                            e.preventDefault();
	                            e.stopPropagation();
	                        }
	                        break;
	                    }
	                    case "ArrowLeft": {
	                        const propName = (info?.inlineOrientation === "horizontal" ? "inlineDirection" : "blockDirection");
	                        const directionAllowed = (info?.inlineOrientation === "horizontal" ? allowsInlineNavigation : allowsBlockNavigation);
	                        if (directionAllowed) {
	                            if (info?.[propName] === "rtl") {
	                                navigateToNext();
	                            }
	                            else {
	                                navigateToPrev();
	                            }
	                            e.preventDefault();
	                            e.stopPropagation();
	                        }
	                        break;
	                    }
	                    case "ArrowRight": {
	                        const propName = (info?.inlineOrientation === "horizontal" ? "inlineDirection" : "blockDirection");
	                        const directionAllowed = (info?.inlineOrientation === "horizontal" ? allowsInlineNavigation : allowsBlockNavigation);
	                        if (directionAllowed) {
	                            if (info?.[propName] === "rtl") {
	                                navigateToPrev();
	                            }
	                            else {
	                                navigateToNext();
	                            }
	                            e.preventDefault();
	                            e.stopPropagation();
	                        }
	                        e.preventDefault();
	                        e.stopPropagation();
	                        break;
	                    }
	                    case "Home":
	                        navigateToStart();
	                        e.preventDefault();
	                        e.stopPropagation();
	                        break;
	                    case "End":
	                        navigateToEnd();
	                        e.preventDefault();
	                        e.stopPropagation();
	                        break;
	                }
	            };
	            return useMergedProps$1()({ onKeyDown }, props);
	        };
	        return {
	            useLinearNavigationChildProps
	        };
	    }, []);
	    return {
	        useLinearNavigationProps,
	        useLinearNavigationChild,
	        navigateToIndex,
	        navigateToNext,
	        navigateToPrev,
	        navigateToStart,
	        navigateToEnd,
	    };
	}
	/**
	 * Allows for the selection of a managed child by typing the given text associated with it.
	 *
	 * @see useListNavigation, which packages everything up together.
	 */
	function useTypeaheadNavigation$1({ collator, getIndex, typeaheadTimeout, setIndex }) {
	    // For typeahead, keep track of what our current "search" string is (if we have one)
	    // and also clear it every 1000 ms since the last time it changed.
	    // Next, keep a mapping of typeahead values to indices for faster searching.
	    // And, for the user's sake, let them know when their typeahead can't match anything anymore
	    const [currentTypeahead, setCurrentTypeahead, getCurrentTypeahead] = useState$1(null);
	    useTimeout$1({ timeout: typeaheadTimeout ?? 1000, callback: () => { setCurrentTypeahead(null); setInvalidTypeahead(null); }, triggerIndex: currentTypeahead });
	    const sortedTypeaheadInfo = s([]);
	    const [invalidTypeahead, setInvalidTypeahead] = useState$1(false);
	    // Handle typeahead for input method editors as well
	    // Essentially, when active, ignore further keys 
	    // because we're waiting for a CompositionEnd event
	    const [imeActive, setImeActive, getImeActive] = useState$1(false);
	    // Because composition events fire *after* keydown events 
	    // (but within the same task, which, TODO, could be browser-dependent),
	    // we can use this to keep track of which event we're listening for on the first keydown.
	    const [nextTypeaheadChar, setNextTypeaheadChar] = useState$1(null);
	    useLayoutEffect$1(() => {
	        if (nextTypeaheadChar !== null) {
	            setCurrentTypeahead(typeahead => ((typeahead ?? "") + nextTypeaheadChar));
	            setNextTypeaheadChar(null);
	        }
	    }, [nextTypeaheadChar]);
	    const comparator = A$1((lhs, rhs) => {
	        let compare;
	        // For the purposes of typeahead, only compare a string of the same size as our currently typed string.
	        // By normalizing them first, we ensure this byte-by-byte handling of raw character data works out okay.
	        let safeLhs = lhs.normalize("NFD");
	        let safeRhs = rhs.text.normalize("NFD").substr(0, safeLhs.length);
	        if (collator)
	            compare = collator.compare(safeLhs, safeRhs);
	        else
	            compare = safeLhs.toLowerCase().localeCompare(safeRhs.toLowerCase() ?? "");
	        return compare;
	    }, [collator]);
	    // Handle changes in typeahead that cause changes to the tabbable index
	    useLayoutEffect$1(() => {
	        if (currentTypeahead && sortedTypeaheadInfo.current.length) {
	            let sortedTypeaheadIndex = binarySearch$1(sortedTypeaheadInfo.current, currentTypeahead, comparator);
	            if (sortedTypeaheadIndex < 0) {
	                // The user has typed an entry that doesn't exist in the list
	                // (or more specifically "for which there is no entry that starts with that input")
	                setInvalidTypeahead(true);
	            }
	            else {
	                setInvalidTypeahead(false);
	                /*
	                  We know roughly where, in the sorted array of strings, our next typeahead location is.
	                  But roughly isn't good enough if there are multiple matches.
	                  To convert our sorted index to the unsorted index we need, we have to find the first
	                  element that matches us *and* (if any such exist) is *after* our current selection.

	                  In other words, the only way typeahead moves backwards relative to our current
	                  position is if the only other option is behind us.

	                  It's not specified in WAI-ARIA what to do in that case.  I suppose wrap back to the start?
	                  Though there's also a case for just going upwards to the nearest to prevent jumpiness.
	                  But if you're already doing typeahead on an unsorted list, like, jumpiness can't be avoided.
	                  I dunno. Going back to the start is the simplist though.

	                  Basically what this does: Starting from where we found ourselves after our binary search,
	                  scan backwards and forwards through all adjacent entries that also compare equally so that
	                  we can find the one whose `unsortedIndex` is the lowest amongst all other equal strings
	                  (and also the lowest `unsortedIndex` yadda yadda except that it comes after us).

	                  TODO: The binary search starts this off with a solid O(log n), but one-character
	                  searches are, thanks to pigeonhole principal, eventually guaranteed to become
	                  O(n*log n). This is annoying but probably not easily solvable? There could be an
	                  exception for one-character strings, but that's just kicking the can down
	                  the road. Maybe one or two characters would be good enough though.
	                */
	                // These are used to keep track of the candidates' positions in both our sorted array and the unsorted DOM.
	                let lowestUnsortedIndexAll = null;
	                let lowestSortedIndexAll = sortedTypeaheadIndex;
	                // These two are only set for elements that are ahead of us, but the principle's the same otherwise
	                let lowestUnsortedIndexNext = null;
	                let lowestSortedIndexNext = sortedTypeaheadIndex;
	                const updateBestFit = (u) => {
	                    if (lowestUnsortedIndexAll == null || u < lowestUnsortedIndexAll) {
	                        lowestUnsortedIndexAll = u;
	                        lowestSortedIndexAll = i;
	                    }
	                    if ((lowestUnsortedIndexNext == null || u < lowestUnsortedIndexNext) && u > getIndex()) {
	                        lowestUnsortedIndexNext = u;
	                        lowestSortedIndexNext = i;
	                    }
	                };
	                let i = sortedTypeaheadIndex;
	                while (i >= 0 && comparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
	                    updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
	                    --i;
	                }
	                i = sortedTypeaheadIndex;
	                while (i < sortedTypeaheadInfo.current.length && comparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
	                    updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
	                    ++i;
	                }
	                if (lowestUnsortedIndexNext !== null)
	                    setIndex(sortedTypeaheadInfo.current[lowestSortedIndexNext].unsortedIndex);
	                else if (lowestUnsortedIndexAll !== null)
	                    setIndex(sortedTypeaheadInfo.current[lowestSortedIndexAll].unsortedIndex);
	            }
	        }
	    }, [currentTypeahead, comparator]);
	    const useTypeaheadNavigationProps = (p) => p;
	    const useTypeaheadNavigationChild = A$1(({ text, ...i }) => {
	        useLayoutEffect$1(() => {
	            if (text) {
	                // Find where to insert this item.
	                // Because all index values should be unique, the returned sortedIndex
	                // should always refer to a new location (i.e. be negative)                
	                let sortedIndex = binarySearch$1(sortedTypeaheadInfo.current, text, comparator);
	                console.assert(sortedIndex < 0);
	                if (sortedIndex < 0) {
	                    sortedTypeaheadInfo.current.splice(-sortedIndex - 1, 0, { text, unsortedIndex: i.index });
	                }
	                return () => {
	                    // When unmounting, find where we were and remove ourselves.
	                    // Again, we should always find ourselves because there should be no duplicate values if each index is unique.
	                    let sortedIndex = binarySearch$1(sortedTypeaheadInfo.current, text, comparator);
	                    console.assert(sortedIndex >= 0);
	                    if (sortedIndex > 0) {
	                        sortedTypeaheadInfo.current.splice(sortedIndex, 1);
	                    }
	                };
	            }
	        }, [text, comparator]);
	        const useTypeaheadNavigationChildProps = function ({ ...props }) {
	            const { useRefElementProps, element } = useRefElement$1();
	            const onCompositionStart = (e) => { setImeActive(true); };
	            const onCompositionEnd = (e) => {
	                setNextTypeaheadChar(e.data);
	                setImeActive(false);
	            };
	            const onKeyDown = (e) => {
	                const imeActive = getImeActive();
	                let key = e.key;
	                // Not handled by typeahead (i.e. assume this is a keyboard shortcut)
	                if (e.ctrlKey || e.metaKey)
	                    return;
	                if (!imeActive && e.key === "Backspace") {
	                    // Remove the last character in a way that doesn't split UTF-16 surrogates.
	                    setCurrentTypeahead(t => t === null ? null : [...t].reverse().slice(1).reverse().join(""));
	                    e.preventDefault();
	                    e.stopPropagation();
	                    return;
	                }
	                // The key property represents the typed character OR the "named key attribute" of the key pressed.
	                // There's no definite way to tell the difference, but for all intents and purposes
	                // there are no one-character names, and there are no non-ASCII-alpha names.
	                // Thus, any one-character or non-ASCII value for `key` is *almost certainly* a typed character.
	                const isCharacterKey = (key.length === 1 || !/^[A-Za-z]/.test(key));
	                if (isCharacterKey) {
	                    if (key == " " && (getCurrentTypeahead() ?? "").trim().length == 0) ;
	                    else {
	                        e.preventDefault();
	                        e.stopPropagation();
	                        // Note: Won't be true for the first keydown
	                        // but will be overwritten before useLayoutEffect is called
	                        // to actually apply the change
	                        if (!imeActive)
	                            setNextTypeaheadChar(key);
	                    }
	                }
	            };
	            return useMergedProps$1()(useRefElementProps({ onKeyDown, onCompositionStart, onCompositionEnd, }), props);
	        };
	        return {
	            useTypeaheadNavigationChildProps
	        };
	    }, []);
	    return {
	        useTypeaheadNavigationChild,
	        useTypeaheadNavigationProps,
	        currentTypeahead,
	        invalidTypeahead,
	    };
	}
	/**
	 * Your usual binary search implementation.
	 *
	 * It's used here to quickly find a good spot to start searching for our next typeahead candidate.
	 * @param array The array to search through
	 * @param wanted The value you'd like to find
	 * @param comparator Compares `wanted` with the current value in `array`
	 * @returns A non-negative value if `wanted` was found, and a negative number if not.
	 * The absolute value of this number, minus one, is where `wanted` *would* be found if it *was* in `array`
	 */
	function binarySearch$1(array, wanted, comparator) {
	    var firstIndex = 0;
	    var lastIndex = array.length - 1;
	    while (firstIndex <= lastIndex) {
	        var testIndex = (lastIndex + firstIndex) >> 1;
	        var comparisonResult = comparator(wanted, array[testIndex]);
	        if (comparisonResult > 0) {
	            firstIndex = testIndex + 1;
	        }
	        else if (comparisonResult < 0) {
	            lastIndex = testIndex - 1;
	        }
	        else {
	            return testIndex;
	        }
	    }
	    return -firstIndex - 1;
	}

	/**
	 * Implements proper keyboard navigation for components like listboxes, button groups, menus, etc.
	 *
	 * In the document order, there will be only one "focused" or "tabbable" element, making it act more like one complete unit in comparison to everything around it.
	 * Navigating forwards/backwards can be done with the arrow keys, Home/End keys, or any any text for typeahead to focus the next item that matches.
	 */
	function useListNavigation$1({ collator, keyNavigation }) {
	    keyNavigation ??= "either";
	    // Keep track of three things related to the currently tabbable element's index:
	    // What it is, and whether, when we render this component and it's changed, to also focus the element that was made tabbable.
	    const [tabbableIndex, setTabbableIndex, getTabbableIndex] = useState$1(0);
	    const setIndex = A$1((index) => {
	        setTabbableIndex(index);
	    }, []);
	    const { childCount, managedChildren, indicesByElement, useRovingTabIndexProps, useRovingTabIndexChild, focusSelf } = useRovingTabIndex$1({ tabbableIndex: tabbableIndex });
	    const { currentTypeahead, invalidTypeahead, useTypeaheadNavigationChild, useTypeaheadNavigationProps } = useTypeaheadNavigation$1({ collator, getIndex: getTabbableIndex, setIndex, typeaheadTimeout: 1000 });
	    const { navigateToEnd, navigateToIndex, navigateToNext, navigateToPrev, navigateToStart, useLinearNavigationChild, useLinearNavigationProps } = useLinearNavigation$1({ getIndex: getTabbableIndex, setIndex, managedChildren });
	    // Any time the tabbable index changes, notify the previous
	    // and next child as such, and optionally focus that next one.
	    /*useLayoutEffect(([prevTabbableIndex]) => {
	        console.log(`Notifying children of index change from ${prevTabbableIndex} to ${tabbableIndex}`);
	        managedChildren[prevTabbableIndex]?.setTabbable(false);
	        managedChildren[tabbableIndex]?.setTabbable(true)
	    }, [tabbableIndex])*/
	    const useListNavigationProps = function (props) {
	        const p1 = useLinearNavigationProps(props);
	        const p2 = useTypeaheadNavigationProps(p1);
	        let ret = useRovingTabIndexProps(p2);
	        return ret;
	    };
	    const useListNavigationChild = A$1((info) => {
	        const { useTypeaheadNavigationChildProps } = useTypeaheadNavigationChild(info);
	        const { useLinearNavigationChildProps } = useLinearNavigationChild();
	        const { useRovingTabIndexChildProps, useRovingTabIndexSiblingProps, tabbable } = useRovingTabIndexChild(info);
	        const useListNavigationChildProps = function ({ ...props }) {
	            return useMergedProps$1()(useRovingTabIndexChildProps(useTypeaheadNavigationChildProps(useLinearNavigationChildProps({ onClick: roveToSelf }))), props);
	        };
	        const roveToSelf = A$1(() => { navigateToIndex(info.index); }, []);
	        return {
	            useListNavigationChildProps,
	            useListNavigationSiblingProps: useRovingTabIndexSiblingProps,
	            tabbable,
	            //roveToSelf,
	            //element
	        };
	    }, [useTypeaheadNavigationChild, useLinearNavigationChild, useRovingTabIndexChild, navigateToIndex]);
	    return {
	        useListNavigationProps,
	        useListNavigationChild,
	        currentTypeahead,
	        invalidTypeahead,
	        tabbableIndex,
	        setTabbableIndex,
	        managedChildren,
	        indicesByElement,
	        navigateToIndex,
	        navigateToNext,
	        navigateToPrev,
	        navigateToStart,
	        navigateToEnd,
	        focusSelf
	    };
	}

	/*!
	* tabbable 5.2.1
	* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
	*/
	var candidateSelectors$1 = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])', 'details>summary:first-of-type', 'details'];
	var matches$1 = typeof Element === 'undefined' ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;

	var isInput$1 = function isInput(node) {
	  return node.tagName === 'INPUT';
	};

	var isHiddenInput$1 = function isHiddenInput(node) {
	  return isInput$1(node) && node.type === 'hidden';
	};

	var isDetailsWithSummary$1 = function isDetailsWithSummary(node) {
	  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {
	    return child.tagName === 'SUMMARY';
	  });
	  return r;
	};

	var isHidden$1 = function isHidden(node, displayCheck) {
	  if (getComputedStyle(node).visibility === 'hidden') {
	    return true;
	  }

	  var isDirectSummary = matches$1.call(node, 'details>summary:first-of-type');
	  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;

	  if (matches$1.call(nodeUnderDetails, 'details:not([open]) *')) {
	    return true;
	  }

	  if (!displayCheck || displayCheck === 'full') {
	    while (node) {
	      if (getComputedStyle(node).display === 'none') {
	        return true;
	      }

	      node = node.parentElement;
	    }
	  } else if (displayCheck === 'non-zero-area') {
	    var _node$getBoundingClie = node.getBoundingClientRect(),
	        width = _node$getBoundingClie.width,
	        height = _node$getBoundingClie.height;

	    return width === 0 && height === 0;
	  }

	  return false;
	}; // form fields (nested) inside a disabled fieldset are not focusable/tabbable
	//  unless they are in the _first_ <legend> element of the top-most disabled
	//  fieldset


	var isDisabledFromFieldset = function isDisabledFromFieldset(node) {
	  if (isInput$1(node) || node.tagName === 'SELECT' || node.tagName === 'TEXTAREA' || node.tagName === 'BUTTON') {
	    var parentNode = node.parentElement;

	    while (parentNode) {
	      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {
	        // look for the first <legend> as an immediate child of the disabled
	        //  <fieldset>: if the node is in that legend, it'll be enabled even
	        //  though the fieldset is disabled; otherwise, the node is in a
	        //  secondary/subsequent legend, or somewhere else within the fieldset
	        //  (however deep nested) and it'll be disabled
	        for (var i = 0; i < parentNode.children.length; i++) {
	          var child = parentNode.children.item(i);

	          if (child.tagName === 'LEGEND') {
	            if (child.contains(node)) {
	              return false;
	            } // the node isn't in the first legend (in doc order), so no matter
	            //  where it is now, it'll be disabled


	            return true;
	          }
	        } // the node isn't in a legend, so no matter where it is now, it'll be disabled


	        return true;
	      }

	      parentNode = parentNode.parentElement;
	    }
	  } // else, node's tabbable/focusable state should not be affected by a fieldset's
	  //  enabled/disabled state


	  return false;
	};

	var isNodeMatchingSelectorFocusable$1 = function isNodeMatchingSelectorFocusable(options, node) {
	  if (node.disabled || isHiddenInput$1(node) || isHidden$1(node, options.displayCheck) || // For a details element with a summary, the summary element gets the focus
	  isDetailsWithSummary$1(node) || isDisabledFromFieldset(node)) {
	    return false;
	  }

	  return true;
	};

	var focusableCandidateSelector$1 = /* #__PURE__ */candidateSelectors$1.concat('iframe').join(',');

	var isFocusable$1 = function isFocusable(node, options) {
	  options = options || {};

	  if (!node) {
	    throw new Error('No node provided');
	  }

	  if (matches$1.call(node, focusableCandidateSelector$1) === false) {
	    return false;
	  }

	  return isNodeMatchingSelectorFocusable$1(options, node);
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc. All rights reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	(() => {
	    var _a, _b, _c;
	    /* Symbols for private properties */
	    const _blockingElements = Symbol();
	    const _alreadyInertElements = Symbol();
	    const _topElParents = Symbol();
	    const _siblingsToRestore = Symbol();
	    const _parentMO = Symbol();
	    /* Symbols for private static methods */
	    const _topChanged = Symbol();
	    const _swapInertedSibling = Symbol();
	    const _inertSiblings = Symbol();
	    const _restoreInertedSiblings = Symbol();
	    const _getParents = Symbol();
	    const _getDistributedChildren = Symbol();
	    const _isInertable = Symbol();
	    const _handleMutations = Symbol();
	    class BlockingElementsImpl {
	        constructor() {
	            /**
	             * The blocking elements.
	             */
	            this[_a] = [];
	            /**
	             * Used to keep track of the parents of the top element, from the element
	             * itself up to body. When top changes, the old top might have been removed
	             * from the document, so we need to memoize the inerted parents' siblings
	             * in order to restore their inerteness when top changes.
	             */
	            this[_b] = [];
	            /**
	             * Elements that are already inert before the first blocking element is
	             * pushed.
	             */
	            this[_c] = new Set();
	        }
	        destructor() {
	            // Restore original inertness.
	            this[_restoreInertedSiblings](this[_topElParents]);
	            // Note we don't want to make these properties nullable on the class,
	            // since then we'd need non-null casts in many places. Calling a method on
	            // a BlockingElements instance after calling destructor will result in an
	            // exception.
	            const nullable = this;
	            nullable[_blockingElements] = null;
	            nullable[_topElParents] = null;
	            nullable[_alreadyInertElements] = null;
	        }
	        get top() {
	            const elems = this[_blockingElements];
	            return elems[elems.length - 1] || null;
	        }
	        push(element) {
	            if (!element || element === this.top) {
	                return;
	            }
	            // Remove it from the stack, we'll bring it to the top.
	            this.remove(element);
	            this[_topChanged](element);
	            this[_blockingElements].push(element);
	        }
	        remove(element) {
	            const i = this[_blockingElements].indexOf(element);
	            if (i === -1) {
	                return false;
	            }
	            this[_blockingElements].splice(i, 1);
	            // Top changed only if the removed element was the top element.
	            if (i === this[_blockingElements].length) {
	                this[_topChanged](this.top);
	            }
	            return true;
	        }
	        pop() {
	            const top = this.top;
	            top && this.remove(top);
	            return top;
	        }
	        has(element) {
	            return this[_blockingElements].indexOf(element) !== -1;
	        }
	        /**
	         * Sets `inert` to all document elements except the new top element, its
	         * parents, and its distributed content.
	         */
	        [(_a = _blockingElements, _b = _topElParents, _c = _alreadyInertElements, _topChanged)](newTop) {
	            const toKeepInert = this[_alreadyInertElements];
	            const oldParents = this[_topElParents];
	            // No new top, reset old top if any.
	            if (!newTop) {
	                this[_restoreInertedSiblings](oldParents);
	                toKeepInert.clear();
	                this[_topElParents] = [];
	                return;
	            }
	            const newParents = this[_getParents](newTop);
	            // New top is not contained in the main document!
	            if (newParents[newParents.length - 1].parentNode !== document.body) {
	                throw Error('Non-connected element cannot be a blocking element');
	            }
	            // Cast here because we know we'll call _inertSiblings on newParents
	            // below.
	            this[_topElParents] = newParents;
	            const toSkip = this[_getDistributedChildren](newTop);
	            // No previous top element.
	            if (!oldParents.length) {
	                this[_inertSiblings](newParents, toSkip, toKeepInert);
	                return;
	            }
	            let i = oldParents.length - 1;
	            let j = newParents.length - 1;
	            // Find common parent. Index 0 is the element itself (so stop before it).
	            while (i > 0 && j > 0 && oldParents[i] === newParents[j]) {
	                i--;
	                j--;
	            }
	            // If up the parents tree there are 2 elements that are siblings, swap
	            // the inerted sibling.
	            if (oldParents[i] !== newParents[j]) {
	                this[_swapInertedSibling](oldParents[i], newParents[j]);
	            }
	            // Restore old parents siblings inertness.
	            i > 0 && this[_restoreInertedSiblings](oldParents.slice(0, i));
	            // Make new parents siblings inert.
	            j > 0 && this[_inertSiblings](newParents.slice(0, j), toSkip, null);
	        }
	        /**
	         * Swaps inertness between two sibling elements.
	         * Sets the property `inert` over the attribute since the inert spec
	         * doesn't specify if it should be reflected.
	         * https://html.spec.whatwg.org/multipage/interaction.html#inert
	         */
	        [_swapInertedSibling](oldInert, newInert) {
	            const siblingsToRestore = oldInert[_siblingsToRestore];
	            // oldInert is not contained in siblings to restore, so we have to check
	            // if it's inertable and if already inert.
	            if (this[_isInertable](oldInert) && !oldInert.inert) {
	                oldInert.inert = true;
	                siblingsToRestore.add(oldInert);
	            }
	            // If newInert was already between the siblings to restore, it means it is
	            // inertable and must be restored.
	            if (siblingsToRestore.has(newInert)) {
	                newInert.inert = false;
	                siblingsToRestore.delete(newInert);
	            }
	            newInert[_parentMO] = oldInert[_parentMO];
	            newInert[_siblingsToRestore] = siblingsToRestore;
	            oldInert[_parentMO] = undefined;
	            oldInert[_siblingsToRestore] = undefined;
	        }
	        /**
	         * Restores original inertness to the siblings of the elements.
	         * Sets the property `inert` over the attribute since the inert spec
	         * doesn't specify if it should be reflected.
	         * https://html.spec.whatwg.org/multipage/interaction.html#inert
	         */
	        [_restoreInertedSiblings](elements) {
	            for (const element of elements) {
	                const mo = element[_parentMO];
	                mo.disconnect();
	                element[_parentMO] = undefined;
	                const siblings = element[_siblingsToRestore];
	                for (const sibling of siblings) {
	                    sibling.inert = false;
	                }
	                element[_siblingsToRestore] = undefined;
	            }
	        }
	        /**
	         * Inerts the siblings of the elements except the elements to skip. Stores
	         * the inerted siblings into the element's symbol `_siblingsToRestore`.
	         * Pass `toKeepInert` to collect the already inert elements.
	         * Sets the property `inert` over the attribute since the inert spec
	         * doesn't specify if it should be reflected.
	         * https://html.spec.whatwg.org/multipage/interaction.html#inert
	         */
	        [_inertSiblings](elements, toSkip, toKeepInert) {
	            for (const element of elements) {
	                // Assume element is not a Document, so it must have a parentNode.
	                const parent = element.parentNode;
	                const children = parent.children;
	                const inertedSiblings = new Set();
	                for (let j = 0; j < children.length; j++) {
	                    const sibling = children[j];
	                    // Skip the input element, if not inertable or to be skipped.
	                    if (sibling === element || !this[_isInertable](sibling) ||
	                        (toSkip && toSkip.has(sibling))) {
	                        continue;
	                    }
	                    // Should be collected since already inerted.
	                    if (toKeepInert && sibling.inert) {
	                        toKeepInert.add(sibling);
	                    }
	                    else {
	                        sibling.inert = true;
	                        inertedSiblings.add(sibling);
	                    }
	                }
	                // Store the siblings that were inerted.
	                element[_siblingsToRestore] = inertedSiblings;
	                // Observe only immediate children mutations on the parent.
	                const mo = new MutationObserver(this[_handleMutations].bind(this));
	                element[_parentMO] = mo;
	                let parentToObserve = parent;
	                // If we're using the ShadyDOM polyfill, then our parent could be a
	                // shady root, which is an object that acts like a ShadowRoot, but isn't
	                // actually a node in the real DOM. Observe the real DOM parent instead.
	                const maybeShadyRoot = parentToObserve;
	                if (maybeShadyRoot.__shady && maybeShadyRoot.host) {
	                    parentToObserve = maybeShadyRoot.host;
	                }
	                mo.observe(parentToObserve, {
	                    childList: true,
	                });
	            }
	        }
	        /**
	         * Handles newly added/removed nodes by toggling their inertness.
	         * It also checks if the current top Blocking Element has been removed,
	         * notifying and removing it.
	         */
	        [_handleMutations](mutations) {
	            const parents = this[_topElParents];
	            const toKeepInert = this[_alreadyInertElements];
	            for (const mutation of mutations) {
	                // If the target is a shadowRoot, get its host as we skip shadowRoots when
	                // computing _topElParents.
	                const target = mutation.target.host || mutation.target;
	                const idx = target === document.body ?
	                    parents.length :
	                    parents.indexOf(target);
	                const inertedChild = parents[idx - 1];
	                const inertedSiblings = inertedChild[_siblingsToRestore];
	                // To restore.
	                for (let i = 0; i < mutation.removedNodes.length; i++) {
	                    const sibling = mutation.removedNodes[i];
	                    if (sibling === inertedChild) {
	                        console.info('Detected removal of the top Blocking Element.');
	                        this.pop();
	                        return;
	                    }
	                    if (inertedSiblings.has(sibling)) {
	                        sibling.inert = false;
	                        inertedSiblings.delete(sibling);
	                    }
	                }
	                // To inert.
	                for (let i = 0; i < mutation.addedNodes.length; i++) {
	                    const sibling = mutation.addedNodes[i];
	                    if (!this[_isInertable](sibling)) {
	                        continue;
	                    }
	                    if (toKeepInert && sibling.inert) {
	                        toKeepInert.add(sibling);
	                    }
	                    else {
	                        sibling.inert = true;
	                        inertedSiblings.add(sibling);
	                    }
	                }
	            }
	        }
	        /**
	         * Returns if the element is inertable.
	         */
	        [_isInertable](element) {
	            return false === /^(style|template|script)$/.test(element.localName);
	        }
	        /**
	         * Returns the list of newParents of an element, starting from element
	         * (included) up to `document.body` (excluded).
	         */
	        [_getParents](element) {
	            const parents = [];
	            let current = element;
	            // Stop to body.
	            while (current && current !== document.body) {
	                // Skip shadow roots.
	                if (current.nodeType === Node.ELEMENT_NODE) {
	                    parents.push(current);
	                }
	                // ShadowDom v1
	                if (current.assignedSlot) {
	                    // Collect slots from deepest slot to top.
	                    while (current = current.assignedSlot) {
	                        parents.push(current);
	                    }
	                    // Continue the search on the top slot.
	                    current = parents.pop();
	                    continue;
	                }
	                current = current.parentNode ||
	                    current.host;
	            }
	            return parents;
	        }
	        /**
	         * Returns the distributed children of the element's shadow root.
	         * Returns null if the element doesn't have a shadow root.
	         */
	        [_getDistributedChildren](element) {
	            const shadowRoot = element.shadowRoot;
	            if (!shadowRoot) {
	                return null;
	            }
	            const result = new Set();
	            let i;
	            let j;
	            let nodes;
	            const slots = shadowRoot.querySelectorAll('slot');
	            if (slots.length && slots[0].assignedNodes) {
	                for (i = 0; i < slots.length; i++) {
	                    nodes = slots[i].assignedNodes({
	                        flatten: true,
	                    });
	                    for (j = 0; j < nodes.length; j++) {
	                        if (nodes[j].nodeType === Node.ELEMENT_NODE) {
	                            result.add(nodes[j]);
	                        }
	                    }
	                }
	                // No need to search for <content>.
	            }
	            return result;
	        }
	    }
	    document.$blockingElements =
	        new BlockingElementsImpl();
	})();

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn) {
	  var module = { exports: {} };
		return fn(module, module.exports), module.exports;
	}

	createCommonjsModule(function (module, exports) {
	(function (global, factory) {
	  factory() ;
	}(commonjsGlobal, (function () {
	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  /**
	   * This work is licensed under the W3C Software and Document License
	   * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).
	   */

	  (function () {
	    // Return early if we're not running inside of the browser.
	    if (typeof window === 'undefined') {
	      return;
	    }

	    // Convenience function for converting NodeLists.
	    /** @type {typeof Array.prototype.slice} */
	    var slice = Array.prototype.slice;

	    /**
	     * IE has a non-standard name for "matches".
	     * @type {typeof Element.prototype.matches}
	     */
	    var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;

	    /** @type {string} */
	    var _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'details', 'summary', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');

	    /**
	     * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`
	     * attribute.
	     *
	     * Its main functions are:
	     *
	     * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the
	     *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering
	     *   each focusable node in the subtree with the singleton `InertManager` which manages all known
	     *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`
	     *   instance exists for each focusable node which has at least one inert root as an ancestor.
	     *
	     * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`
	     *   attribute is removed from the root node). This is handled in the destructor, which calls the
	     *   `deregister` method on `InertManager` for each managed inert node.
	     */

	    var InertRoot = function () {
	      /**
	       * @param {!Element} rootElement The Element at the root of the inert subtree.
	       * @param {!InertManager} inertManager The global singleton InertManager object.
	       */
	      function InertRoot(rootElement, inertManager) {
	        _classCallCheck(this, InertRoot);

	        /** @type {!InertManager} */
	        this._inertManager = inertManager;

	        /** @type {!Element} */
	        this._rootElement = rootElement;

	        /**
	         * @type {!Set<!InertNode>}
	         * All managed focusable nodes in this InertRoot's subtree.
	         */
	        this._managedNodes = new Set();

	        // Make the subtree hidden from assistive technology
	        if (this._rootElement.hasAttribute('aria-hidden')) {
	          /** @type {?string} */
	          this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');
	        } else {
	          this._savedAriaHidden = null;
	        }
	        this._rootElement.setAttribute('aria-hidden', 'true');

	        // Make all focusable elements in the subtree unfocusable and add them to _managedNodes
	        this._makeSubtreeUnfocusable(this._rootElement);

	        // Watch for:
	        // - any additions in the subtree: make them unfocusable too
	        // - any removals from the subtree: remove them from this inert root's managed nodes
	        // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable
	        //   element, make that node a managed node.
	        this._observer = new MutationObserver(this._onMutation.bind(this));
	        this._observer.observe(this._rootElement, { attributes: true, childList: true, subtree: true });
	      }

	      /**
	       * Call this whenever this object is about to become obsolete.  This unwinds all of the state
	       * stored in this object and updates the state of all of the managed nodes.
	       */


	      _createClass(InertRoot, [{
	        key: 'destructor',
	        value: function destructor() {
	          this._observer.disconnect();

	          if (this._rootElement) {
	            if (this._savedAriaHidden !== null) {
	              this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);
	            } else {
	              this._rootElement.removeAttribute('aria-hidden');
	            }
	          }

	          this._managedNodes.forEach(function (inertNode) {
	            this._unmanageNode(inertNode.node);
	          }, this);

	          // Note we cast the nulls to the ANY type here because:
	          // 1) We want the class properties to be declared as non-null, or else we
	          //    need even more casts throughout this code. All bets are off if an
	          //    instance has been destroyed and a method is called.
	          // 2) We don't want to cast "this", because we want type-aware optimizations
	          //    to know which properties we're setting.
	          this._observer = /** @type {?} */null;
	          this._rootElement = /** @type {?} */null;
	          this._managedNodes = /** @type {?} */null;
	          this._inertManager = /** @type {?} */null;
	        }

	        /**
	         * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.
	         */

	      }, {
	        key: '_makeSubtreeUnfocusable',


	        /**
	         * @param {!Node} startNode
	         */
	        value: function _makeSubtreeUnfocusable(startNode) {
	          var _this2 = this;

	          composedTreeWalk(startNode, function (node) {
	            return _this2._visitNode(node);
	          });

	          var activeElement = document.activeElement;

	          if (!document.body.contains(startNode)) {
	            // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.
	            var node = startNode;
	            /** @type {!ShadowRoot|undefined} */
	            var root = undefined;
	            while (node) {
	              if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
	                root = /** @type {!ShadowRoot} */node;
	                break;
	              }
	              node = node.parentNode;
	            }
	            if (root) {
	              activeElement = root.activeElement;
	            }
	          }
	          if (startNode.contains(activeElement)) {
	            activeElement.blur();
	            // In IE11, if an element is already focused, and then set to tabindex=-1
	            // calling blur() will not actually move the focus.
	            // To work around this we call focus() on the body instead.
	            if (activeElement === document.activeElement) {
	              document.body.focus();
	            }
	          }
	        }

	        /**
	         * @param {!Node} node
	         */

	      }, {
	        key: '_visitNode',
	        value: function _visitNode(node) {
	          if (node.nodeType !== Node.ELEMENT_NODE) {
	            return;
	          }
	          var element = /** @type {!Element} */node;

	          // If a descendant inert root becomes un-inert, its descendants will still be inert because of
	          // this inert root, so all of its managed nodes need to be adopted by this InertRoot.
	          if (element !== this._rootElement && element.hasAttribute('inert')) {
	            this._adoptInertRoot(element);
	          }

	          if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {
	            this._manageNode(element);
	          }
	        }

	        /**
	         * Register the given node with this InertRoot and with InertManager.
	         * @param {!Node} node
	         */

	      }, {
	        key: '_manageNode',
	        value: function _manageNode(node) {
	          var inertNode = this._inertManager.register(node, this);
	          this._managedNodes.add(inertNode);
	        }

	        /**
	         * Unregister the given node with this InertRoot and with InertManager.
	         * @param {!Node} node
	         */

	      }, {
	        key: '_unmanageNode',
	        value: function _unmanageNode(node) {
	          var inertNode = this._inertManager.deregister(node, this);
	          if (inertNode) {
	            this._managedNodes['delete'](inertNode);
	          }
	        }

	        /**
	         * Unregister the entire subtree starting at `startNode`.
	         * @param {!Node} startNode
	         */

	      }, {
	        key: '_unmanageSubtree',
	        value: function _unmanageSubtree(startNode) {
	          var _this3 = this;

	          composedTreeWalk(startNode, function (node) {
	            return _this3._unmanageNode(node);
	          });
	        }

	        /**
	         * If a descendant node is found with an `inert` attribute, adopt its managed nodes.
	         * @param {!Element} node
	         */

	      }, {
	        key: '_adoptInertRoot',
	        value: function _adoptInertRoot(node) {
	          var inertSubroot = this._inertManager.getInertRoot(node);

	          // During initialisation this inert root may not have been registered yet,
	          // so register it now if need be.
	          if (!inertSubroot) {
	            this._inertManager.setInert(node, true);
	            inertSubroot = this._inertManager.getInertRoot(node);
	          }

	          inertSubroot.managedNodes.forEach(function (savedInertNode) {
	            this._manageNode(savedInertNode.node);
	          }, this);
	        }

	        /**
	         * Callback used when mutation observer detects subtree additions, removals, or attribute changes.
	         * @param {!Array<!MutationRecord>} records
	         * @param {!MutationObserver} self
	         */

	      }, {
	        key: '_onMutation',
	        value: function _onMutation(records, self) {
	          records.forEach(function (record) {
	            var target = /** @type {!Element} */record.target;
	            if (record.type === 'childList') {
	              // Manage added nodes
	              slice.call(record.addedNodes).forEach(function (node) {
	                this._makeSubtreeUnfocusable(node);
	              }, this);

	              // Un-manage removed nodes
	              slice.call(record.removedNodes).forEach(function (node) {
	                this._unmanageSubtree(node);
	              }, this);
	            } else if (record.type === 'attributes') {
	              if (record.attributeName === 'tabindex') {
	                // Re-initialise inert node if tabindex changes
	                this._manageNode(target);
	              } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {
	                // If a new inert root is added, adopt its managed nodes and make sure it knows about the
	                // already managed nodes from this inert subroot.
	                this._adoptInertRoot(target);
	                var inertSubroot = this._inertManager.getInertRoot(target);
	                this._managedNodes.forEach(function (managedNode) {
	                  if (target.contains(managedNode.node)) {
	                    inertSubroot._manageNode(managedNode.node);
	                  }
	                });
	              }
	            }
	          }, this);
	        }
	      }, {
	        key: 'managedNodes',
	        get: function get() {
	          return new Set(this._managedNodes);
	        }

	        /** @return {boolean} */

	      }, {
	        key: 'hasSavedAriaHidden',
	        get: function get() {
	          return this._savedAriaHidden !== null;
	        }

	        /** @param {?string} ariaHidden */

	      }, {
	        key: 'savedAriaHidden',
	        set: function set(ariaHidden) {
	          this._savedAriaHidden = ariaHidden;
	        }

	        /** @return {?string} */
	        ,
	        get: function get() {
	          return this._savedAriaHidden;
	        }
	      }]);

	      return InertRoot;
	    }();

	    /**
	     * `InertNode` initialises and manages a single inert node.
	     * A node is inert if it is a descendant of one or more inert root elements.
	     *
	     * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and
	     * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element
	     * is intrinsically focusable or not.
	     *
	     * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an
	     * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the
	     * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s
	     * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,
	     * or removes the `tabindex` attribute if the element is intrinsically focusable.
	     */


	    var InertNode = function () {
	      /**
	       * @param {!Node} node A focusable element to be made inert.
	       * @param {!InertRoot} inertRoot The inert root element associated with this inert node.
	       */
	      function InertNode(node, inertRoot) {
	        _classCallCheck(this, InertNode);

	        /** @type {!Node} */
	        this._node = node;

	        /** @type {boolean} */
	        this._overrodeFocusMethod = false;

	        /**
	         * @type {!Set<!InertRoot>} The set of descendant inert roots.
	         *    If and only if this set becomes empty, this node is no longer inert.
	         */
	        this._inertRoots = new Set([inertRoot]);

	        /** @type {?number} */
	        this._savedTabIndex = null;

	        /** @type {boolean} */
	        this._destroyed = false;

	        // Save any prior tabindex info and make this node untabbable
	        this.ensureUntabbable();
	      }

	      /**
	       * Call this whenever this object is about to become obsolete.
	       * This makes the managed node focusable again and deletes all of the previously stored state.
	       */


	      _createClass(InertNode, [{
	        key: 'destructor',
	        value: function destructor() {
	          this._throwIfDestroyed();

	          if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {
	            var element = /** @type {!Element} */this._node;
	            if (this._savedTabIndex !== null) {
	              element.setAttribute('tabindex', this._savedTabIndex);
	            } else {
	              element.removeAttribute('tabindex');
	            }

	            // Use `delete` to restore native focus method.
	            if (this._overrodeFocusMethod) {
	              delete element.focus;
	            }
	          }

	          // See note in InertRoot.destructor for why we cast these nulls to ANY.
	          this._node = /** @type {?} */null;
	          this._inertRoots = /** @type {?} */null;
	          this._destroyed = true;
	        }

	        /**
	         * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.
	         * If the object has been destroyed, any attempt to access it will cause an exception.
	         */

	      }, {
	        key: '_throwIfDestroyed',


	        /**
	         * Throw if user tries to access destroyed InertNode.
	         */
	        value: function _throwIfDestroyed() {
	          if (this.destroyed) {
	            throw new Error('Trying to access destroyed InertNode');
	          }
	        }

	        /** @return {boolean} */

	      }, {
	        key: 'ensureUntabbable',


	        /** Save the existing tabindex value and make the node untabbable and unfocusable */
	        value: function ensureUntabbable() {
	          if (this.node.nodeType !== Node.ELEMENT_NODE) {
	            return;
	          }
	          var element = /** @type {!Element} */this.node;
	          if (matches.call(element, _focusableElementsString)) {
	            if ( /** @type {!HTMLElement} */element.tabIndex === -1 && this.hasSavedTabIndex) {
	              return;
	            }

	            if (element.hasAttribute('tabindex')) {
	              this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;
	            }
	            element.setAttribute('tabindex', '-1');
	            if (element.nodeType === Node.ELEMENT_NODE) {
	              element.focus = function () {};
	              this._overrodeFocusMethod = true;
	            }
	          } else if (element.hasAttribute('tabindex')) {
	            this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;
	            element.removeAttribute('tabindex');
	          }
	        }

	        /**
	         * Add another inert root to this inert node's set of managing inert roots.
	         * @param {!InertRoot} inertRoot
	         */

	      }, {
	        key: 'addInertRoot',
	        value: function addInertRoot(inertRoot) {
	          this._throwIfDestroyed();
	          this._inertRoots.add(inertRoot);
	        }

	        /**
	         * Remove the given inert root from this inert node's set of managing inert roots.
	         * If the set of managing inert roots becomes empty, this node is no longer inert,
	         * so the object should be destroyed.
	         * @param {!InertRoot} inertRoot
	         */

	      }, {
	        key: 'removeInertRoot',
	        value: function removeInertRoot(inertRoot) {
	          this._throwIfDestroyed();
	          this._inertRoots['delete'](inertRoot);
	          if (this._inertRoots.size === 0) {
	            this.destructor();
	          }
	        }
	      }, {
	        key: 'destroyed',
	        get: function get() {
	          return (/** @type {!InertNode} */this._destroyed
	          );
	        }
	      }, {
	        key: 'hasSavedTabIndex',
	        get: function get() {
	          return this._savedTabIndex !== null;
	        }

	        /** @return {!Node} */

	      }, {
	        key: 'node',
	        get: function get() {
	          this._throwIfDestroyed();
	          return this._node;
	        }

	        /** @param {?number} tabIndex */

	      }, {
	        key: 'savedTabIndex',
	        set: function set(tabIndex) {
	          this._throwIfDestroyed();
	          this._savedTabIndex = tabIndex;
	        }

	        /** @return {?number} */
	        ,
	        get: function get() {
	          this._throwIfDestroyed();
	          return this._savedTabIndex;
	        }
	      }]);

	      return InertNode;
	    }();

	    /**
	     * InertManager is a per-document singleton object which manages all inert roots and nodes.
	     *
	     * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`
	     * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.
	     * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant
	     * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance
	     * is created for each such node, via the `_managedNodes` map.
	     */


	    var InertManager = function () {
	      /**
	       * @param {!Document} document
	       */
	      function InertManager(document) {
	        _classCallCheck(this, InertManager);

	        if (!document) {
	          throw new Error('Missing required argument; InertManager needs to wrap a document.');
	        }

	        /** @type {!Document} */
	        this._document = document;

	        /**
	         * All managed nodes known to this InertManager. In a map to allow looking up by Node.
	         * @type {!Map<!Node, !InertNode>}
	         */
	        this._managedNodes = new Map();

	        /**
	         * All inert roots known to this InertManager. In a map to allow looking up by Node.
	         * @type {!Map<!Node, !InertRoot>}
	         */
	        this._inertRoots = new Map();

	        /**
	         * Observer for mutations on `document.body`.
	         * @type {!MutationObserver}
	         */
	        this._observer = new MutationObserver(this._watchForInert.bind(this));

	        // Add inert style.
	        addInertStyle(document.head || document.body || document.documentElement);

	        // Wait for document to be loaded.
	        if (document.readyState === 'loading') {
	          document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));
	        } else {
	          this._onDocumentLoaded();
	        }
	      }

	      /**
	       * Set whether the given element should be an inert root or not.
	       * @param {!Element} root
	       * @param {boolean} inert
	       */


	      _createClass(InertManager, [{
	        key: 'setInert',
	        value: function setInert(root, inert) {
	          if (inert) {
	            if (this._inertRoots.has(root)) {
	              // element is already inert
	              return;
	            }

	            var inertRoot = new InertRoot(root, this);
	            root.setAttribute('inert', '');
	            this._inertRoots.set(root, inertRoot);
	            // If not contained in the document, it must be in a shadowRoot.
	            // Ensure inert styles are added there.
	            if (!this._document.body.contains(root)) {
	              var parent = root.parentNode;
	              while (parent) {
	                if (parent.nodeType === 11) {
	                  addInertStyle(parent);
	                }
	                parent = parent.parentNode;
	              }
	            }
	          } else {
	            if (!this._inertRoots.has(root)) {
	              // element is already non-inert
	              return;
	            }

	            var _inertRoot = this._inertRoots.get(root);
	            _inertRoot.destructor();
	            this._inertRoots['delete'](root);
	            root.removeAttribute('inert');
	          }
	        }

	        /**
	         * Get the InertRoot object corresponding to the given inert root element, if any.
	         * @param {!Node} element
	         * @return {!InertRoot|undefined}
	         */

	      }, {
	        key: 'getInertRoot',
	        value: function getInertRoot(element) {
	          return this._inertRoots.get(element);
	        }

	        /**
	         * Register the given InertRoot as managing the given node.
	         * In the case where the node has a previously existing inert root, this inert root will
	         * be added to its set of inert roots.
	         * @param {!Node} node
	         * @param {!InertRoot} inertRoot
	         * @return {!InertNode} inertNode
	         */

	      }, {
	        key: 'register',
	        value: function register(node, inertRoot) {
	          var inertNode = this._managedNodes.get(node);
	          if (inertNode !== undefined) {
	            // node was already in an inert subtree
	            inertNode.addInertRoot(inertRoot);
	          } else {
	            inertNode = new InertNode(node, inertRoot);
	          }

	          this._managedNodes.set(node, inertNode);

	          return inertNode;
	        }

	        /**
	         * De-register the given InertRoot as managing the given inert node.
	         * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert
	         * node from the InertManager's set of managed nodes if it is destroyed.
	         * If the node is not currently managed, this is essentially a no-op.
	         * @param {!Node} node
	         * @param {!InertRoot} inertRoot
	         * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.
	         */

	      }, {
	        key: 'deregister',
	        value: function deregister(node, inertRoot) {
	          var inertNode = this._managedNodes.get(node);
	          if (!inertNode) {
	            return null;
	          }

	          inertNode.removeInertRoot(inertRoot);
	          if (inertNode.destroyed) {
	            this._managedNodes['delete'](node);
	          }

	          return inertNode;
	        }

	        /**
	         * Callback used when document has finished loading.
	         */

	      }, {
	        key: '_onDocumentLoaded',
	        value: function _onDocumentLoaded() {
	          // Find all inert roots in document and make them actually inert.
	          var inertElements = slice.call(this._document.querySelectorAll('[inert]'));
	          inertElements.forEach(function (inertElement) {
	            this.setInert(inertElement, true);
	          }, this);

	          // Comment this out to use programmatic API only.
	          this._observer.observe(this._document.body || this._document.documentElement, { attributes: true, subtree: true, childList: true });
	        }

	        /**
	         * Callback used when mutation observer detects attribute changes.
	         * @param {!Array<!MutationRecord>} records
	         * @param {!MutationObserver} self
	         */

	      }, {
	        key: '_watchForInert',
	        value: function _watchForInert(records, self) {
	          var _this = this;
	          records.forEach(function (record) {
	            switch (record.type) {
	              case 'childList':
	                slice.call(record.addedNodes).forEach(function (node) {
	                  if (node.nodeType !== Node.ELEMENT_NODE) {
	                    return;
	                  }
	                  var inertElements = slice.call(node.querySelectorAll('[inert]'));
	                  if (matches.call(node, '[inert]')) {
	                    inertElements.unshift(node);
	                  }
	                  inertElements.forEach(function (inertElement) {
	                    this.setInert(inertElement, true);
	                  }, _this);
	                }, _this);
	                break;
	              case 'attributes':
	                if (record.attributeName !== 'inert') {
	                  return;
	                }
	                var target = /** @type {!Element} */record.target;
	                var inert = target.hasAttribute('inert');
	                _this.setInert(target, inert);
	                break;
	            }
	          }, this);
	        }
	      }]);

	      return InertManager;
	    }();

	    /**
	     * Recursively walk the composed tree from |node|.
	     * @param {!Node} node
	     * @param {(function (!Element))=} callback Callback to be called for each element traversed,
	     *     before descending into child nodes.
	     * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.
	     */


	    function composedTreeWalk(node, callback, shadowRootAncestor) {
	      if (node.nodeType == Node.ELEMENT_NODE) {
	        var element = /** @type {!Element} */node;
	        if (callback) {
	          callback(element);
	        }

	        // Descend into node:
	        // If it has a ShadowRoot, ignore all child elements - these will be picked
	        // up by the <content> or <shadow> elements. Descend straight into the
	        // ShadowRoot.
	        var shadowRoot = /** @type {!HTMLElement} */element.shadowRoot;
	        if (shadowRoot) {
	          composedTreeWalk(shadowRoot, callback);
	          return;
	        }

	        // If it is a <content> element, descend into distributed elements - these
	        // are elements from outside the shadow root which are rendered inside the
	        // shadow DOM.
	        if (element.localName == 'content') {
	          var content = /** @type {!HTMLContentElement} */element;
	          // Verifies if ShadowDom v0 is supported.
	          var distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];
	          for (var i = 0; i < distributedNodes.length; i++) {
	            composedTreeWalk(distributedNodes[i], callback);
	          }
	          return;
	        }

	        // If it is a <slot> element, descend into assigned nodes - these
	        // are elements from outside the shadow root which are rendered inside the
	        // shadow DOM.
	        if (element.localName == 'slot') {
	          var slot = /** @type {!HTMLSlotElement} */element;
	          // Verify if ShadowDom v1 is supported.
	          var _distributedNodes = slot.assignedNodes ? slot.assignedNodes({ flatten: true }) : [];
	          for (var _i = 0; _i < _distributedNodes.length; _i++) {
	            composedTreeWalk(_distributedNodes[_i], callback);
	          }
	          return;
	        }
	      }

	      // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>
	      // element, nor a <shadow> element recurse normally.
	      var child = node.firstChild;
	      while (child != null) {
	        composedTreeWalk(child, callback);
	        child = child.nextSibling;
	      }
	    }

	    /**
	     * Adds a style element to the node containing the inert specific styles
	     * @param {!Node} node
	     */
	    function addInertStyle(node) {
	      if (node.querySelector('style#inert-style, link#inert-style')) {
	        return;
	      }
	      var style = document.createElement('style');
	      style.setAttribute('id', 'inert-style');
	      style.textContent = '\n' + '[inert] {\n' + '  pointer-events: none;\n' + '  cursor: default;\n' + '}\n' + '\n' + '[inert], [inert] * {\n' + '  -webkit-user-select: none;\n' + '  -moz-user-select: none;\n' + '  -ms-user-select: none;\n' + '  user-select: none;\n' + '}\n';
	      node.appendChild(style);
	    }

	    if (!Element.prototype.hasOwnProperty('inert')) {
	      /** @type {!InertManager} */
	      var inertManager = new InertManager(document);

	      Object.defineProperty(Element.prototype, 'inert', {
	        enumerable: true,
	        /** @this {!Element} */
	        get: function get() {
	          return this.hasAttribute('inert');
	        },
	        /** @this {!Element} */
	        set: function set(inert) {
	          inertManager.setInert(this, inert);
	        }
	      });
	    }
	  })();

	})));
	});

	const blockingElements$1 = document.$blockingElements;
	/**
	 * Allows an element to trap focus by applying the "inert" attribute to all sibling, aunt, and uncle nodes.
	 *
	 * Automatically handles consecutive calls with a loosely applied stack operation
	 * (specifically via `blockingElements`, with a small polyfill because I'm not sure how long
	 * it'll take to find its way into the spec, if ever)
	 * @param target
	 */
	function useBlockingElement$1(target) {
	    /**
	     * Push/pop the element from the blockingElements stack.
	     */
	    h(() => {
	        if (target) {
	            blockingElements$1.push(target);
	            return () => {
	                blockingElements$1.remove(target);
	            };
	        }
	    }, [target]);
	}
	function getTopElement$1() {
	    return blockingElements$1.top;
	}

	const elementsToRestoreFocusTo$1 = new Map();
	function useFocusTrap$1({ trapActive }) {
	    const { element, useRefElementProps, getElement } = useRefElement$1();
	    const { getLastActiveElement } = useActiveElement$1();
	    // When the trap becomes active, before we let the blockingElements hook run,
	    // keep track of whatever's currently focused and save it.
	    h(() => {
	        if (trapActive && element) {
	            // Save the currently focused element
	            // to whatever's currently at the top of the stack
	            elementsToRestoreFocusTo$1.set(getTopElement$1(), getLastActiveElement() ?? document.body);
	        }
	    }, [trapActive, element]);
	    useBlockingElement$1(trapActive ? element : null);
	    /**
	     * Any time we activate or deactivate the trap,
	     * change focus to something else (something in
	     * the trap if it's active, or whatever we've
	     * tracked in elementsToRestoreFocusTo if not)
	     */
	    h(() => {
	        if (trapActive && element) {
	            let rafHandle = requestAnimationFrame(() => {
	                // TODO: This extra queueMicrotask is needed for
	                // ...reasons?
	                queueMicrotask(() => {
	                    findFirstFocusable$1(element)?.focus();
	                    rafHandle = 0;
	                });
	            });
	            return () => {
	                if (rafHandle)
	                    cancelAnimationFrame(rafHandle);
	            };
	        }
	        else if (element) {
	            // Restore the focus to the element
	            // that has returned to the top of the stack
	            let rafHandle = requestAnimationFrame(() => {
	                queueMicrotask(() => {
	                    elementsToRestoreFocusTo$1.get(getTopElement$1())?.focus();
	                    rafHandle = 0;
	                });
	            });
	            return () => {
	                if (rafHandle)
	                    cancelAnimationFrame(rafHandle);
	            };
	        }
	    }, [trapActive, element]);
	    const useFocusTrapProps = ((props) => {
	        return useMergedProps$1()({ "aria-modal": trapActive ? "true" : undefined }, useRefElementProps(props));
	    });
	    return {
	        useFocusTrapProps,
	        element,
	        getElement
	    };
	}
	/**
	 * Returns the first focusable element contained within the given node, or null if none are found.
	 * @param element
	 * @returns
	 */
	function findFirstFocusable$1(element) {
	    const treeWalker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, { acceptNode: (node) => (node instanceof Element && isFocusable$1(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP) });
	    const firstFocusable = treeWalker.firstChild();
	    return firstFocusable;
	}

	const RandomWords$1 = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.".split(" ");
	const RovingChildContext = D(null);
	const DemoUseRovingTabIndex = g(() => {
	    const { useListNavigationChild, useListNavigationProps, currentTypeahead, setTabbableIndex, tabbableIndex } = useListNavigation$1({});
	    //const { useRovingTabIndexChild, useRovingTabIndexProps } = useRovingTabIndex<HTMLUListElement, RovingTabIndexChildInfo>({ tabbableIndex, focusOnChange: false });
	    return (v$1("div", { className: "demo" },
	        v$1("h2", null, "Keyboard & List Navigation"),
	        v$1("h3", null,
	            v$1("code", null, "useRovingTabIndex")),
	        v$1("p", null,
	            "Native HTML elements offer fantastic keyboard accessability, but cover a relatively limited number of use cases. There is no native HTML tree element, for example, that allows keyboard navigation of its items, nor is it possible to combine the keyboard navigation behavior of a ",
	            v$1("code", null, "<select>"),
	            " menu with the menu in a drawer component."),
	        v$1("p", null,
	            "When coming across a List or a Menu or a RadioGroup or a ToggleButtonGroup or any other \"one component made up of child components\", the usual expected behavior, at least natively, is that tabbing into the component is one action, and tabbing out is another.  Navigating ",
	            v$1("em", null, "within"),
	            " the component is done with the arrow keys or other methods."),
	        v$1("p", null,
	            "This is important both for accessability, but also just for general usability.  When tabbing back and forth, the ability to skip a long list without needing to trudge through ",
	            v$1("code", null, "every one"),
	            " of its child elements is extremely important. This is important both for accessability, but also just for general usability.  When tabbing back and forth, the ability to skip a long list without needing to trudge through ",
	            v$1("code", null, "every one"),
	            " of its child elements is extremely important."),
	        v$1("p", null,
	            v$1("code", null, "useListNavigation"),
	            " wraps up the functionality of a few hooks (",
	            v$1("code", null, "useRovingTabIndex"),
	            ", ",
	            v$1("code", null, "useLinearNavigation"),
	            ", ",
	            v$1("code", null, "useTypeaheadNavigation"),
	            "to allow for ARIA-compliant navigation of lists and other similar components.  For more advanced use cases, you can use the other hooks individually."),
	        v$1("p", null,
	            v$1("code", null, "useListNavigation"),
	            " (and ",
	            v$1("code", null, "useRovingTabIndex"),
	            ") internally use ",
	            v$1("code", null, "useChildManager"),
	            ", which is how the child elements and the parent communicate with each other. This means there are virtually no restrictions on how the DOM is set up as long as you can provide the children with the ",
	            v$1("code", null, "useListNavigationChild"),
	            " hook that's returned, usually with a simple ",
	            v$1("code", null, "Context"),
	            ". If the child element itself has a focusable element, like a button, it can also be wired up to disable itself Feel free to nest them too, as long as you are aware of your ",
	            v$1("code", null, "Context"),
	            " management (i.e. remember that you need to create a new ",
	            v$1("code", null, "Context"),
	            " for each use case)."),
	        v$1("label", null,
	            "Tabbable index: ",
	            v$1("input", { type: "number", value: tabbableIndex, onInput: e => { e.preventDefault(); setTabbableIndex(e.currentTarget.valueAsNumber); } })),
	        v$1("ul", { ...useListNavigationProps({}) },
	            v$1(RovingChildContext.Provider, { value: useListNavigationChild }, Array.from((function* () {
	                for (let i = 0; i < 10; ++i) {
	                    yield v$1(DemoUseRovingTabIndexChild, { index: i, key: i });
	                }
	            })()))),
	        currentTypeahead && v$1("div", null,
	            "Typeahead: ",
	            currentTypeahead)));
	});
	const DemoUseRovingTabIndexChild = (({ index }) => {
	    const randomWord = useConstant$1(() => RandomWords$1[index /*Math.floor(Math.random() * (RandomWords.length - 1))*/]);
	    const useRovingTabIndexChild = F(RovingChildContext);
	    const text = `${randomWord} This is item #${index + 1}`;
	    const { useListNavigationChildProps, useListNavigationSiblingProps } = useRovingTabIndexChild({ index, text });
	    const props = useListNavigationChildProps({});
	    return (v$1("li", { ...props },
	        text,
	        " (",
	        props.tabIndex,
	        ")",
	        v$1("input", { ...useListNavigationSiblingProps({ type: "checkbox" }) })));
	});

	/**
	 * Wrap the native `useLayoutEffect` to add arguments
	 * that allow accessing the previous value as the first argument,
	 * as well as the changes that caused the hook to be called as the second argument.
	 *
	 * @param effect
	 * @param inputs
	 */
	function useLayoutEffect(effect, inputs) {
	    const prevInputs = s(inputs);
	    const effect2 = () => {
	        let changes = [];
	        for (let i = 0; i < Math.max(prevInputs.current.length, inputs.length); ++i) {
	            if (prevInputs.current[i] != inputs[i])
	                changes[i] = { from: prevInputs.current[i], to: inputs[i] };
	        }
	        effect(prevInputs.current, changes);
	        prevInputs.current = inputs;
	    };
	    h(effect2, inputs);
	}

	function toVal(mix) {
		var k, y, str='';

		if (typeof mix === 'string' || typeof mix === 'number') {
			str += mix;
		} else if (typeof mix === 'object') {
			if (Array.isArray(mix)) {
				for (k=0; k < mix.length; k++) {
					if (mix[k]) {
						if (y = toVal(mix[k])) {
							str && (str += ' ');
							str += y;
						}
					}
				}
			} else {
				for (k in mix) {
					if (mix[k]) {
						str && (str += ' ');
						str += k;
					}
				}
			}
		}

		return str;
	}

	function clsx () {
		var i=0, tmp, x, str='';
		while (i < arguments.length) {
			if (tmp = arguments[i++]) {
				if (x = toVal(tmp)) {
					str && (str += ' ');
					str += x;
				}
			}
		}
		return str;
	}

	/**
	 * Given two sets of props, merges their `class` and `className` properties.
	 * Duplicate classes are removed (order doesn't matter anyway).
	 *
	 * @param lhs Classes of the first component
	 * @param rhs Classes of the second component
	 * @returns A string representing all combined classes from both arguments.
	 */
	function useMergedClasses(lhs, rhs) {
	    // Note: For the sake of forward compatibility, this function is labelled as
	    // a hook, but as it uses no other hooks it technically isn't one.
	    return mergeClasses(lhs, rhs);
	}
	function mergeClasses(lhs, rhs) {
	    const lhsClass = lhs?.class;
	    const lhsClassName = lhs?.className;
	    const rhsClass = rhs?.class;
	    const rhsClassName = rhs?.className;
	    if (lhsClass || rhsClass || lhsClassName || rhsClassName) {
	        let lhsClasses = clsx(lhsClass, lhsClassName).split(" ");
	        let rhsClasses = clsx(rhsClass, rhsClassName).split(" ");
	        let allClasses = new Set([...Array.from(lhsClasses), ...Array.from(rhsClasses)]);
	        return Array.from(allClasses).join(" ");
	    }
	    else {
	        return undefined;
	    }
	}

	function processRef(instance, ref) {
	    if (typeof ref === "function") {
	        ref(instance);
	    }
	    else if (ref != null) {
	        ref.current = instance;
	    }
	}
	/**
	 * Combines two refs into one. This allows a component to both use its own ref *and* forward a ref that was given to it.
	 * @param lhs
	 * @param rhs
	 * @returns
	 */
	function useMergedRefs() {
	    return function (lhsProps, rhsProps) {
	        const lhs = lhsProps?.ref;
	        const rhs = rhsProps?.ref;
	        if (lhs == null && rhs == null) {
	            return undefined;
	        }
	        else if (lhs == null) {
	            return rhs;
	        }
	        else if (rhs == null) {
	            return lhs;
	        }
	        else {
	            let ret = A$1((current) => {
	                processRef(current, lhs);
	                processRef(current, rhs);
	            }, [lhs, rhs]);
	            return ret;
	        }
	    };
	}
	/*
	function typetest<P extends h.JSX.HTMLAttributes<HTMLInputElement>>(props: P) {

	    const ref: RefObject<HTMLInputElement> = useRef<HTMLInputElement>(null);

	    function acceptsRef(ref: Ref<any>) { }
	    function acceptsOptionalRef(ref: Ref<any> | undefined) { }

	    const c = [
	        useMergedRefs<HTMLInputElement>()(undefined, undefined),
	        useMergedRefs<HTMLInputElement>()({}, undefined),
	        useMergedRefs<HTMLInputElement>()(props, undefined),
	        useMergedRefs<HTMLInputElement>()(undefined, props),
	        useMergedRefs<HTMLInputElement>()(props, props),
	        useMergedRefs<HTMLInputElement>()({ ref }, props),
	        useMergedRefs<HTMLInputElement>()({ ref }, { ref: undefined }),
	        useMergedRefs<HTMLInputElement>()({ ref: undefined }, { ref }),
	        useMergedRefs<HTMLInputElement>()({ ref }, { ref }),
	    ] as const;

	    /// @ts-expect-error
	    acceptsRef(c[0]);
	    /// @ts-expect-error
	    acceptsRef(c[1]);

	    acceptsOptionalRef(c[2]);
	    acceptsOptionalRef(c[3]);
	    acceptsOptionalRef(c[4]);

	    /// @ts-expect-error TODO
	    acceptsRef(c[5]);
	    acceptsRef(c[6]);
	    acceptsRef(c[7]);
	    acceptsRef(c[8]);
	}
	*/

	/**
	 * Merges two style objects, returning the result.
	 *
	 * @param style The user-given style prop for this component
	 * @param obj The CSS properties you want added to the user-given style
	 * @returns A CSS object containing the properties of both objects.
	 */
	function useMergedStyles(lhs, rhs) {
	    // Easy case, when there are no styles to merge return nothing.
	    if (!lhs && !rhs)
	        return undefined;
	    if (typeof lhs != typeof rhs) {
	        // Easy cases, when one is null and the other isn't.
	        if (lhs && !rhs)
	            return lhs;
	        if (!lhs && rhs)
	            return rhs;
	        // They're both non-null but different types.
	        // Convert the string type to an object bag type and run it again.
	        if (lhs && rhs) {
	            if (typeof lhs == "string")
	                return useMergedStyles({ style: Object.fromEntries(lhs.split(";").map(statement => statement.split(":"))) }, rhs);
	            if (typeof rhs == "string")
	                return useMergedStyles(lhs, { style: Object.fromEntries(lhs.split(";").map(statement => statement.split(":"))) });
	        }
	        // Logic???
	        return undefined;
	    }
	    // They're both strings, just concatenate them.
	    if (typeof lhs == "string") {
	        return `${lhs};${rhs}`; // TODO: Improve the typing to make this possible
	    }
	    // They're both objects, just merge them.
	    return {
	        ...(lhs?.style ?? {}),
	        ...(rhs?.style ?? {})
	    };
	}

	let log = (str) => { debugger; /* Intentional */ };
	// Generally too complex
	//Pick<h.JSX.HTMLAttributes<E>, keyof h.JSX.HTMLAttributes<E> & (keyof T | keyof U)>; 
	/**
	 * Given two sets of props, merges them and returns the result.
	 *
	 * The hook is aware of and can intelligently merge `className`, `class`, `style`, `ref`, and all event handlers.
	 * @param lhs2
	 * @param rhs2
	 * @returns
	 */
	function useMergedProps() {
	    return function (lhs2, rhs2) {
	        // First, put in all the properties that are easy to reason about
	        // and all lhs props. We're going to merge in rhs just after.
	        const { class: lhsClass, className: lhsClassName, style: lhsStyle, ref: lhsRef, ...lhs } = lhs2;
	        const { class: rhsClass, className: rhsClassName, style: rhsStyle, ref: rhsRef, ...rhs } = rhs2;
	        let ret = {
	            ...lhs,
	            ref: useMergedRefs()(lhs2, rhs2),
	            style: useMergedStyles(lhs2, rhs2),
	            className: useMergedClasses(lhs2, rhs2)
	        };
	        // Now, do *everything* else
	        // Merge every remaining existing entry in lhs with what we've already put in ret.
	        //const lhsEntries = Object.entries(lhs) as [keyof T, T[keyof T]][];
	        const rhsEntries = Object.entries(rhs);
	        for (const [rhsKey, rhsValue] of rhsEntries) {
	            const lhsValue = lhs[rhsKey];
	            if (typeof lhsValue === "function" || typeof rhsValue === "function") {
	                // They're both functions that can be merged (or one's a function and the other's null).
	                // Not an *easy* case, but a well-defined one.
	                const merged = mergeFunctions(lhsValue, rhsValue);
	                ret[rhsKey] = merged;
	            }
	            else {
	                // Uh...we're here because one of them's null, right?
	                if (lhsValue == null && rhsValue == null) {
	                    if (rhsValue === null && lhsValue === undefined)
	                        ret[rhsKey] = rhsValue;
	                    else
	                        ret[rhsKey] = lhsValue;
	                }
	                if (lhsValue == null)
	                    ret[rhsKey] = rhsValue;
	                else if (rhsValue == null)
	                    ret[rhsKey] = lhsValue;
	                else if (rhsValue == lhsValue) ;
	                else {
	                    // Ugh.
	                    // No good strategies here, just log it if requested
	                    log?.();
	                    ret[rhsKey] = rhsValue;
	                }
	            }
	        }
	        return ret;
	    };
	}
	function mergeFunctions(lhs, rhs) {
	    if (!lhs)
	        return rhs;
	    if (!rhs)
	        return lhs;
	    return (...args) => {
	        lhs?.(...args);
	        rhs?.(...args);
	    };
	}
	/*
	function test<P extends h.JSX.HTMLAttributes<HTMLInputElement>>(props: P) {

	    const id0: GenericGet<{}, "id", string> = "";
	    const id3: GenericGet<{ id: undefined }, "id", string> = undefined;
	    const id4: GenericGet<{ id: undefined }, "id", string> = undefined;
	    const id5: GenericGet<{ id: undefined }, "id", string> = undefined;
	    const id6: GenericGet<{ id: undefined }, "id", string> = undefined;
	    //const id2: ZipSingle<string | undefined, string | undefined> = undefined;
	    const id1: ZipObject<{ id: undefined }, { id: string }> = { id: undefined };

	    type M1 = GenericGet<P, "style", string>;
	    type M2 = GenericGet<{}, "style", string>;
	    const m1: M1 = "";
	    const m2: M1 = undefined;
	    /// @ts-expect-error    Because number isn't assignable to string
	    const m3: M1 = 0;

	    const m4: M2 = "";
	    const m5: M2 = undefined;
	    /// @ts-expect-error    Because number isn't assignable to string
	    const m6: M2 = 0;

	    const p1: MergedProps<HTMLInputElement, {}, { id: string }> = useMergedProps<HTMLInputElement>()({}, { id: "string" });
	    const p2: MergedProps<HTMLInputElement, { id: undefined }, { id: string }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: "string" });
	    const p3: MergedProps<HTMLInputElement, { id: undefined }, { id: undefined }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: undefined });
	    const p4: MergedProps<HTMLInputElement, {}, {}> = useMergedProps<HTMLInputElement>()({}, {});
	    const p5 = useMergedProps<HTMLInputElement>()(props, {});
	    const p6 = useMergedProps<HTMLInputElement>()(props, { id: undefined });
	    const p7 = useMergedProps<HTMLInputElement>()(props, { id: "string" });


	    p1.id?.concat("");
	    p2.id?.concat("");
	    /// @ts-expect-error    id can't be anything but undefined
	    p3.id?.concat("");
	    /// @ts-expect-error    id can't be anything but undefined
	    p4.id?.concat("");


	    p5.id?.concat("");
	    p6.id?.concat("");
	    p7.id?.concat("");

	    /// @ts-expect-error    id must contain undefined
	    p5.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    p6.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    p7.id.concat("");


	    if (p5.allowFullScreen === undefined) {}
	    else if (p5.allowFullScreen === false) {}
	    else if (p5.allowFullScreen === true) {}
	    else {
	        acceptsNever(p5.allowFullScreen);
	    }


	    if (p6.allowFullScreen === undefined) {}
	    else if (p6.allowFullScreen === false) {}
	    else if (p6.allowFullScreen === true) {}
	    else {
	        acceptsNever(p6.allowFullScreen);
	    }


	    if (p7.allowFullScreen === undefined) {}
	    else if (p7.allowFullScreen === false) {}
	    else if (p7.allowFullScreen === true) {}
	    else {
	        acceptsNever(p7.allowFullScreen);
	    }


	    // Make sure it works recursively
	    const r1a = useMergedProps<HTMLInputElement>()({}, p1);
	    const r1b = useMergedProps<HTMLInputElement>()(props, p1);
	    const r2a = useMergedProps<HTMLInputElement>()({}, p2);
	    const r2b = useMergedProps<HTMLInputElement>()(props, p2);
	    const r3a = useMergedProps<HTMLInputElement>()({}, p3);
	    const r3b = useMergedProps<HTMLInputElement>()(props, p3);
	    const r4a = useMergedProps<HTMLInputElement>()({}, p4);
	    const r4b = useMergedProps<HTMLInputElement>()(props, p4);
	    const r5a = useMergedProps<HTMLInputElement>()({}, p5);
	    const r5b = useMergedProps<HTMLInputElement>()(props, p5);
	    const r6a = useMergedProps<HTMLInputElement>()({}, p6);
	    const r6b = useMergedProps<HTMLInputElement>()(props, p6);
	    const r7a = useMergedProps<HTMLInputElement>()({}, p7);
	    const r7b = useMergedProps<HTMLInputElement>()(props, p7);


	    r1a.id?.concat("");
	    r1b.id?.concat("");
	    r2a.id?.concat("");
	    r2b.id?.concat("");
	    // @ts-expect-error    id can't be anything but undefined
	    r3a.id?.concat("");
	    r3b.id?.concat("");
	    /// @ts-expect-error    id can't be anything but undefined
	    r4a.id?.concat("");
	    r4b.id?.concat("");


	    r5a.id?.concat("");
	    r5b.id?.concat("");
	    r6a.id?.concat("");
	    r6b.id?.concat("");
	    r7a.id?.concat("");
	    r7b.id?.concat("");

	    /// @ts-expect-error    id must contain undefined
	    r5a.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r5b.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r6a.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r6b.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r7a.id.concat("");
	    /// @ts-expect-error    id must contain undefined
	    r7b.id.concat("");


	    if (r5a.allowFullScreen === undefined) {}
	    else if (r5a.allowFullScreen === false) {}
	    else if (r5a.allowFullScreen === true) {}
	    else {
	        acceptsNever(r5a.allowFullScreen);
	    }


	    if (r5b.allowFullScreen === undefined) {}
	    else if (r5b.allowFullScreen === false) {}
	    else if (r5b.allowFullScreen === true) {}
	    else {
	        acceptsNever(r5b.allowFullScreen);
	    }


	    if (r6a.allowFullScreen === undefined) {}
	    else if (r6a.allowFullScreen === false) {}
	    else if (r6a.allowFullScreen === true) {}
	    else {
	        acceptsNever(r6a.allowFullScreen);
	    }


	    if (r6b.allowFullScreen === undefined) {}
	    else if (r6b.allowFullScreen === false) {}
	    else if (r6b.allowFullScreen === true) {}
	    else {
	        acceptsNever(r6b.allowFullScreen);
	    }


	    if (r7a.allowFullScreen === undefined) {}
	    else if (r7a.allowFullScreen === false) {}
	    else if (r7a.allowFullScreen === true) {}
	    else {
	        acceptsNever(r7a.allowFullScreen);
	    }


	    if (r7b.allowFullScreen === undefined) {}
	    else if (r7b.allowFullScreen === false) {}
	    else if (r7b.allowFullScreen === true) {}
	    else {
	        acceptsNever(r7b.allowFullScreen);
	    }

	}
	function acceptsNever(n: never) {}
	*/

	/**
	 * Slightly enhanced version of `useState` that includes a getter that remains constant
	 * (i.e. you can use it in `useEffect` and friends without it being a dependency).
	 *
	 * @param initialState
	 * @returns
	 */
	function useState(initialState) {
	    // We keep both
	    const [state, setState] = l(initialState);
	    const ref = s(state);
	    // Hijack the normal setter function 
	    // to also set our ref to the new value
	    const set = A$1((value) => {
	        if (typeof value === "function") {
	            let callback = value;
	            setState(prevValue => {
	                let nextValue = callback(prevValue);
	                ref.current = nextValue;
	                return nextValue;
	            });
	        }
	        else {
	            ref.current = value;
	            setState(value);
	        }
	    }, []);
	    const get = () => { return ref.current; };
	    console.assert(ref.current === state);
	    return [state, set, get];
	}

	/**
	 * Allows accessing the element a ref references as soon as it does so.
	 * *This hook itself returns a hook*--useRefElementProps modifies the props that you were going to pass to an HTMLElement,
	 * adding a RefCallback and merging it with any existing ref that existed on the props.
	 *
	 * Don't forget to provide the Element as the type argument!
	 *
	 * @returns The element, and the sub-hook that makes it retrievable.
	 */
	function useRefElement() {
	    // Let us store the actual (reference to) the element we capture
	    const [element, setElement, getElement] = useState(null);
	    // Create a RefCallback that's fired when mounted 
	    // and that notifies us of our element when we have it
	    const myRef = A$1((e) => {
	        if (e)
	            setElement(() => e);
	    }, []);
	    const useRefElementProps = A$1((props) => useMergedProps()({ ref: myRef }, props), []);
	    // Return both the element and the hook that modifies 
	    // the props and allows us to actually find the element
	    return {
	        useRefElementProps,
	        element,
	        getElement
	    };
	}

	/**
	 * Allows a parent component to access information about certain
	 * child components once they have rendered.
	 *
	 * This hook is slightly more complicated in that it returns both a
	 * prop-modifying hook, but also a hook that each child will need
	 * to use: `useManagedChild`.  It's stable across renders, so just
	 * toss it into a `Context` so the children can have access to it.
	 * This function registers the child with the parent and provides
	 * it with any requested information, but doesn't do anything else
	 * until it unmounts and retracts that information.
	 */
	function useChildManager() {
	    // This is blindly updated any time a child mounts or unmounts itself.
	    // Used to make sure that any time the array of managed children updates,
	    // we also re-render.
	    const [childUpdateIndex, setChildUpdateIndex] = useState(0);
	    const managedChildren = s([]);
	    const indicesByElement = s(new Map());
	    const useManagedChild = A$1((info) => {
	        const { element, getElement, useRefElementProps } = useRefElement();
	        // As soon as the component mounts, notify the parent and request a rerender.
	        useLayoutEffect(([prevElement, prevIndex], changes) => {
	            if (element) {
	                indicesByElement.current.set(element, info.index);
	                if (managedChildren.current[info.index] != undefined) {
	                    console.assert(info.index == undefined, "Two children with the same index were added, which may result in unexpected behavior.");
	                    debugger; // Intentional
	                }
	                setChildUpdateIndex(c => ++c);
	                managedChildren.current[info.index] = { ...info };
	                return () => {
	                    setChildUpdateIndex(c => ++c);
	                    delete managedChildren.current[info.index];
	                    indicesByElement.current.delete(element);
	                };
	            }
	        }, [element, info.index]);
	        // Any time our child props change, make that information available generally.
	        // *Don't re-render*, otherwise we'd be stuck in an
	        // infinite loop every time an anonymous function is passed.
	        // It comes in from the props so the child was already updated by it --
	        // we don't need the parent to re-render every single child any time
	        // "onClick" updates or whatever.  The relevant child already knows,
	        // and that's what matters.
	        useLayoutEffect(() => {
	            if (managedChildren.current[info.index] != undefined)
	                managedChildren.current[info.index] = { ...info };
	        }, [...Object.entries(info).flat()]);
	        return { element, getElement, useManagedChildProps: useRefElementProps };
	    }, []);
	    return {
	        useManagedChild,
	        managedChildren: managedChildren.current,
	        indicesByElement: indicesByElement.current
	    };
	}

	/**
	 * Given an input value, returns a constant getter function that can be used
	 * inside of `useEffect` and friends without including it in the dependency array.
	 *
	 * Use with caution, and **do not use the getter in useLayoutEffect!!**
	 * `setState`'s getter does not have this problem, but then you're using your own state
	 * instead of an existing value, which might not always be feasible.
	 *
	 * Weigh your options, and hopefully one of them gets the job done.
	 *
	 * @param value
	 * @returns
	 */
	function useStableGetter(value) {
	    const ref = s(value);
	    _(ref, () => value);
	    return A$1(() => { return ref.current; }, []);
	}

	/**
	 * Alternate useCallback() which always returns the same (wrapped) function reference
	 * so that it can be excluded from the dependency arrays of `useEffect` and friends.
	 *
	 * DO NOT USE THE RESULT IN useLayoutEffect!!
	 *
	 * TODO: Investigate options.diffed if the useLayoutEffect limitation becomes limitlessly limiting.
	 *
	 * Source: https://github.com/facebook/react/issues/14099#issuecomment-659298422
	 */
	function useStableCallback(fn) {
	    const currentCallbackGetter = useStableGetter(fn);
	    return A$1((...args) => {
	        const currentFunc = currentCallbackGetter();
	        if (!currentFunc) {
	            throw new Error('Callback retrieved from useStableCallback() cannot be called from useLayoutEffect().');
	        }
	        return currentFunc(...args);
	    }, []);
	}

	function useTimeout({ timeout, callback, triggerIndex }) {
	    const stableCallback = useStableCallback(callback);
	    const getTimeout = useStableGetter(timeout);
	    const timeoutIsNull = (timeout == null);
	    y(() => {
	        const timeout = getTimeout();
	        console.assert(timeoutIsNull == (timeout == null));
	        if (timeout) {
	            const handle = setTimeout(stableCallback, timeout);
	            return () => clearTimeout(handle);
	        }
	    }, [triggerIndex, timeoutIsNull]);
	}

	function capitalize(str) {
	    return (str[0].toUpperCase() + str.substr(1));
	}
	/**
	 * Inspects the element's style and determines the logical direction that text flows.
	 *
	 * Certain CSS properties, like `block-size`, respect the current writing mode and text direction.
	 * But `transform`, `clip`, etc. don't.
	 *
	 * This is provided so that CSS properties can consistently use those logical properties.
	 *
	 * See https://drafts.csswg.org/css-writing-modes/#logical-to-physical
	 *
	 * @returns An object containing the following functions:
	 * * `getLogicalDirection`: retrieves a `LogicalDirectionInfo` representing the current state of the element. (Function is constant between renders)
	 * * `convertElementSize`: When used in conjunction with `useElementSize`, allows you to retrieve the logical size of an element instead of the physical size.
	 * * `convertToLogicalOrientation`: Based on the current direction, converts "horizontal" or "vertical" to "inline" or "block".
	 * * `convertToPhysicalOrientation`:  Based on the current direction, converts "inline" or "block" to "horizontal" or "vertical".
	 */
	function useLogicalDirection(element) {
	    const [writingMode, setWritingMode] = l(null);
	    const [direction, setDirection] = l(null);
	    const [textOrientation, setTextOrientation] = l(null);
	    const writingModeRef = s(writingMode);
	    const directionRef = s(direction);
	    const textOrientationRef = s(textOrientation);
	    h(() => { writingModeRef.current = writingMode; }, [writingMode]);
	    h(() => { directionRef.current = direction; }, [direction]);
	    h(() => { textOrientationRef.current = textOrientation; }, [textOrientation]);
	    h(() => {
	        if (element) {
	            const computedStyles = window.getComputedStyle(element);
	            const w = computedStyles.writingMode;
	            const t = computedStyles.textOrientation;
	            const d = computedStyles.direction;
	            setWritingMode(w || "horizontal-tb");
	            setDirection(d || "rtl");
	            setTextOrientation(t || "mixed");
	        }
	    });
	    const getLogicalDirection = A$1(() => {
	        let writingMode = writingModeRef.current;
	        let direction = directionRef.current;
	        let textOrientation = textOrientationRef.current;
	        if (!writingMode || !direction || !textOrientation)
	            return null;
	        if (textOrientation == "upright")
	            direction = "ltr";
	        return {
	            ...WritingModes[writingMode ?? "horizontal-tb"][direction ?? "ltr"]
	        };
	    }, [writingModeRef, directionRef, textOrientationRef]);
	    const convertToLogicalOrientation = A$1((elementOrientation, direction) => {
	        direction ??= getLogicalDirection();
	        if (direction?.inlineOrientation === elementOrientation)
	            return "inline";
	        return "block";
	    }, [getLogicalDirection]);
	    const convertToPhysicalOrientation = A$1((elementOrientation, direction) => {
	        direction ??= getLogicalDirection();
	        if (elementOrientation == "inline") {
	            if (direction?.inlineOrientation == "horizontal")
	                return "horizontal";
	            return "vertical";
	        }
	        else {
	            if (direction?.blockOrientation == "vertical")
	                return "vertical";
	            return "horizontal";
	        }
	    }, [getLogicalDirection]);
	    const convertElementSize = A$1((elementSize, direction) => {
	        direction ??= getLogicalDirection();
	        if (direction) {
	            const { inlineSize, blockSize, inlineDirection, blockDirection } = direction;
	            // Size is relatively simple
	            let clientInlineSize = elementSize[`client${capitalize(inlineSize)}`];
	            let clientBlockSize = elementSize[`client${capitalize(blockSize)}`];
	            let offsetInlineSize = elementSize[`offset${capitalize(inlineSize)}`];
	            let offsetBlockSize = elementSize[`offset${capitalize(blockSize)}`];
	            let scrollInlineSize = elementSize[`scroll${capitalize(inlineSize)}`];
	            let scrollBlockSize = elementSize[`scroll${capitalize(blockSize)}`];
	            // Position requires us to sometimes use one property (like `left`)
	            // or sometimes two (like `left` + `width`)
	            function getPhysicalLeftTop(dir) { if (dir === "ltr" || dir == "rtl")
	                return "left"; return "top"; }
	            function getPhysicalRightBottom(dir) { if (dir === "rtl")
	                return "width"; if (dir === "btt")
	                return "height"; return null; }
	            const f1 = getPhysicalLeftTop(inlineDirection);
	            const f2 = getPhysicalRightBottom(inlineDirection);
	            const f3 = getPhysicalLeftTop(blockDirection);
	            const f4 = getPhysicalRightBottom(blockDirection);
	            let clientInlineInset = elementSize[`client${capitalize(f1)}`] + (!f2 ? 0 : elementSize[`client${capitalize(f2)}`]);
	            let scrollInlineInset = elementSize[`scroll${capitalize(f1)}`] + (!f2 ? 0 : elementSize[`scroll${capitalize(f2)}`]);
	            let offsetInlineInset = elementSize[`offset${capitalize(f1)}`] + (!f2 ? 0 : elementSize[`offset${capitalize(f2)}`]);
	            let clientBlockInset = elementSize[`client${capitalize(f3)}`] + (!f4 ? 0 : elementSize[`client${capitalize(f4)}`]);
	            let scrollBlockInset = elementSize[`scroll${capitalize(f3)}`] + (!f4 ? 0 : elementSize[`scroll${capitalize(f4)}`]);
	            let offsetBlockInset = elementSize[`offset${capitalize(f3)}`] + (!f4 ? 0 : elementSize[`offset${capitalize(f4)}`]);
	            return {
	                clientInlineSize,
	                scrollInlineSize,
	                offsetInlineSize,
	                clientBlockSize,
	                scrollBlockSize,
	                offsetBlockSize,
	                clientInlineInset,
	                scrollInlineInset,
	                offsetInlineInset,
	                clientBlockInset,
	                scrollBlockInset,
	                offsetBlockInset,
	            };
	        }
	        return null;
	    }, [getLogicalDirection]);
	    return {
	        getLogicalDirection,
	        convertElementSize,
	        convertToLogicalOrientation,
	        convertToPhysicalOrientation
	    };
	}
	const HorizontalTbLtr = {
	    inlineDirection: "ltr",
	    blockDirection: "ttb",
	    inlineOrientation: "horizontal",
	    blockOrientation: "vertical",
	    inlineSize: "width",
	    blockSize: "height",
	    leftRightDirection: "ltr",
	    overUnderDirection: "ttb"
	};
	const HorizontalTbRtl = {
	    ...HorizontalTbLtr,
	    inlineDirection: "rtl",
	};
	const VerticalRlLtr = {
	    inlineDirection: "ttb",
	    blockDirection: "rtl",
	    inlineOrientation: "vertical",
	    blockOrientation: "horizontal",
	    inlineSize: "height",
	    blockSize: "width",
	    leftRightDirection: "ttb",
	    overUnderDirection: "rtl"
	};
	const VerticalRlRtl = {
	    ...VerticalRlLtr,
	    inlineDirection: "btt"
	};
	const SidewaysRlLtr = { ...VerticalRlLtr };
	const SidewaysRlRtl = { ...VerticalRlRtl };
	const VerticalLrLtr = {
	    ...VerticalRlLtr,
	    blockDirection: "ltr",
	};
	const VerticalLrRtl = {
	    ...VerticalRlRtl,
	    blockDirection: "ltr",
	};
	const SidewaysLtLtr = {
	    ...VerticalLrLtr,
	    inlineDirection: "btt",
	    leftRightDirection: "btt",
	    overUnderDirection: "ltr"
	};
	const SidewaysLtRtl = {
	    ...SidewaysLtLtr,
	    inlineDirection: "ttb"
	};
	const HorizontalTb = {
	    ltr: HorizontalTbLtr,
	    rtl: HorizontalTbRtl
	};
	const VerticalRl = {
	    ltr: VerticalRlLtr,
	    rtl: VerticalRlRtl
	};
	const VerticalLr = {
	    ltr: VerticalLrLtr,
	    rtl: VerticalLrRtl
	};
	const SidewaysRl = {
	    ltr: SidewaysRlLtr,
	    rtl: SidewaysRlRtl
	};
	const SidewaysLr = {
	    ltr: SidewaysLtLtr,
	    rtl: SidewaysLtRtl
	};
	const WritingModes = {
	    "horizontal-tb": HorizontalTb,
	    "vertical-lr": VerticalLr,
	    "vertical-rl": VerticalRl,
	    "sideways-lr": SidewaysLr,
	    "sideways-rl": SidewaysRl
	};

	/**
	 * When used in tandem with `useRovingTabIndex`, allows control of
	 * the tabbable index with the arrow keys.
	 *
	 * @see useListNavigation, which packages everything up together.
	 */
	function useLinearNavigation({ getIndex, setIndex, managedChildren, navigationDirection }) {
	    navigationDirection ??= "either";
	    const index = getIndex();
	    const childCount = managedChildren.length;
	    // Make sure the tabbable index never escapes the bounds of all available children
	    // TODO: Keep track of the original index and keep it, at least until keyboard navigation.
	    useLayoutEffect(() => {
	        if (index < 0) {
	            setIndex(0);
	        }
	        else if (childCount > 0 && index >= childCount) {
	            setIndex(childCount - 1);
	        }
	    }, [index, childCount]);
	    // These allow us to manipulate what our current tabbable child is.
	    const navigateToIndex = A$1((index) => { setIndex(index < 0 ? (managedChildren.length + index) : index); }, []);
	    const navigateToNext = A$1(() => { setIndex(i => ++i); }, []);
	    const navigateToPrev = A$1(() => { setIndex(i => --i); }, []);
	    const navigateToStart = A$1(() => { navigateToIndex(0); }, [navigateToIndex]);
	    const navigateToEnd = A$1(() => { navigateToIndex(-1); }, [navigateToIndex]);
	    const { useRefElementProps, getElement: getParentElement } = useRefElement();
	    const { convertElementSize, getLogicalDirection } = useLogicalDirection(getParentElement());
	    const useLinearNavigationProps = function ({ ...props }) {
	        return useRefElementProps(props);
	    };
	    const useLinearNavigationChild = A$1(() => {
	        const useLinearNavigationChildProps = (props) => {
	            const onKeyDown = (e) => {
	                // Not handled by typeahead (i.e. assume this is a keyboard shortcut)
	                if (e.ctrlKey || e.metaKey)
	                    return;
	                const info = getLogicalDirection();
	                let allowsBlockNavigation = (navigationDirection == "block" || navigationDirection == "either");
	                let allowsInlineNavigation = (navigationDirection == "inline" || navigationDirection == "either");
	                switch (e.key) {
	                    case "ArrowUp": {
	                        const propName = (info?.blockOrientation === "vertical" ? "blockDirection" : "inlineDirection");
	                        const directionAllowed = (info?.blockOrientation === "vertical" ? allowsBlockNavigation : allowsInlineNavigation);
	                        if (directionAllowed) {
	                            if (info?.[propName] === "btt") {
	                                navigateToNext();
	                            }
	                            else {
	                                navigateToPrev();
	                            }
	                            e.preventDefault();
	                            e.stopPropagation();
	                        }
	                        break;
	                    }
	                    case "ArrowDown": {
	                        const propName = (info?.blockOrientation === "vertical" ? "blockDirection" : "inlineDirection");
	                        const directionAllowed = (info?.blockOrientation === "vertical" ? allowsBlockNavigation : allowsInlineNavigation);
	                        if (directionAllowed) {
	                            if (info?.[propName] === "btt") {
	                                navigateToPrev();
	                            }
	                            else {
	                                navigateToNext();
	                            }
	                            e.preventDefault();
	                            e.stopPropagation();
	                        }
	                        break;
	                    }
	                    case "ArrowLeft": {
	                        const propName = (info?.inlineOrientation === "horizontal" ? "inlineDirection" : "blockDirection");
	                        const directionAllowed = (info?.inlineOrientation === "horizontal" ? allowsInlineNavigation : allowsBlockNavigation);
	                        if (directionAllowed) {
	                            if (info?.[propName] === "rtl") {
	                                navigateToNext();
	                            }
	                            else {
	                                navigateToPrev();
	                            }
	                            e.preventDefault();
	                            e.stopPropagation();
	                        }
	                        break;
	                    }
	                    case "ArrowRight": {
	                        const propName = (info?.inlineOrientation === "horizontal" ? "inlineDirection" : "blockDirection");
	                        const directionAllowed = (info?.inlineOrientation === "horizontal" ? allowsInlineNavigation : allowsBlockNavigation);
	                        if (directionAllowed) {
	                            if (info?.[propName] === "rtl") {
	                                navigateToPrev();
	                            }
	                            else {
	                                navigateToNext();
	                            }
	                            e.preventDefault();
	                            e.stopPropagation();
	                        }
	                        e.preventDefault();
	                        e.stopPropagation();
	                        break;
	                    }
	                    case "Home":
	                        navigateToStart();
	                        e.preventDefault();
	                        e.stopPropagation();
	                        break;
	                    case "End":
	                        navigateToEnd();
	                        e.preventDefault();
	                        e.stopPropagation();
	                        break;
	                }
	            };
	            return useMergedProps()({ onKeyDown }, props);
	        };
	        return {
	            useLinearNavigationChildProps
	        };
	    }, []);
	    return {
	        useLinearNavigationProps,
	        useLinearNavigationChild,
	        navigateToIndex,
	        navigateToNext,
	        navigateToPrev,
	        navigateToStart,
	        navigateToEnd,
	    };
	}
	/**
	 * Allows for the selection of a managed child by typing the given text associated with it.
	 *
	 * @see useListNavigation, which packages everything up together.
	 */
	function useTypeaheadNavigation({ collator, getIndex, typeaheadTimeout, setIndex }) {
	    // For typeahead, keep track of what our current "search" string is (if we have one)
	    // and also clear it every 1000 ms since the last time it changed.
	    // Next, keep a mapping of typeahead values to indices for faster searching.
	    // And, for the user's sake, let them know when their typeahead can't match anything anymore
	    const [currentTypeahead, setCurrentTypeahead, getCurrentTypeahead] = useState(null);
	    useTimeout({ timeout: typeaheadTimeout ?? 1000, callback: () => { setCurrentTypeahead(null); setInvalidTypeahead(null); }, triggerIndex: currentTypeahead });
	    const sortedTypeaheadInfo = s([]);
	    const [invalidTypeahead, setInvalidTypeahead] = useState(false);
	    // Handle typeahead for input method editors as well
	    // Essentially, when active, ignore further keys 
	    // because we're waiting for a CompositionEnd event
	    const [imeActive, setImeActive, getImeActive] = useState(false);
	    // Because composition events fire *after* keydown events 
	    // (but within the same task, which, TODO, could be browser-dependent),
	    // we can use this to keep track of which event we're listening for on the first keydown.
	    const [nextTypeaheadChar, setNextTypeaheadChar] = useState(null);
	    useLayoutEffect(() => {
	        if (nextTypeaheadChar !== null) {
	            setCurrentTypeahead(typeahead => ((typeahead ?? "") + nextTypeaheadChar));
	            setNextTypeaheadChar(null);
	        }
	    }, [nextTypeaheadChar]);
	    const comparator = A$1((lhs, rhs) => {
	        let compare;
	        // For the purposes of typeahead, only compare a string of the same size as our currently typed string.
	        // By normalizing them first, we ensure this byte-by-byte handling of raw character data works out okay.
	        let safeLhs = lhs.normalize("NFD");
	        let safeRhs = rhs.text.normalize("NFD").substr(0, safeLhs.length);
	        if (collator)
	            compare = collator.compare(safeLhs, safeRhs);
	        else
	            compare = safeLhs.toLowerCase().localeCompare(safeRhs.toLowerCase() ?? "");
	        return compare;
	    }, [collator]);
	    // Handle changes in typeahead that cause changes to the tabbable index
	    useLayoutEffect(() => {
	        if (currentTypeahead && sortedTypeaheadInfo.current.length) {
	            let sortedTypeaheadIndex = binarySearch(sortedTypeaheadInfo.current, currentTypeahead, comparator);
	            if (sortedTypeaheadIndex < 0) {
	                // The user has typed an entry that doesn't exist in the list
	                // (or more specifically "for which there is no entry that starts with that input")
	                setInvalidTypeahead(true);
	            }
	            else {
	                setInvalidTypeahead(false);
	                /*
	                  We know roughly where, in the sorted array of strings, our next typeahead location is.
	                  But roughly isn't good enough if there are multiple matches.
	                  To convert our sorted index to the unsorted index we need, we have to find the first
	                  element that matches us *and* (if any such exist) is *after* our current selection.

	                  In other words, the only way typeahead moves backwards relative to our current
	                  position is if the only other option is behind us.

	                  It's not specified in WAI-ARIA what to do in that case.  I suppose wrap back to the start?
	                  Though there's also a case for just going upwards to the nearest to prevent jumpiness.
	                  But if you're already doing typeahead on an unsorted list, like, jumpiness can't be avoided.
	                  I dunno. Going back to the start is the simplist though.

	                  Basically what this does: Starting from where we found ourselves after our binary search,
	                  scan backwards and forwards through all adjacent entries that also compare equally so that
	                  we can find the one whose `unsortedIndex` is the lowest amongst all other equal strings
	                  (and also the lowest `unsortedIndex` yadda yadda except that it comes after us).

	                  TODO: The binary search starts this off with a solid O(log n), but one-character
	                  searches are, thanks to pigeonhole principal, eventually guaranteed to become
	                  O(n*log n). This is annoying but probably not easily solvable? There could be an
	                  exception for one-character strings, but that's just kicking the can down
	                  the road. Maybe one or two characters would be good enough though.
	                */
	                // These are used to keep track of the candidates' positions in both our sorted array and the unsorted DOM.
	                let lowestUnsortedIndexAll = null;
	                let lowestSortedIndexAll = sortedTypeaheadIndex;
	                // These two are only set for elements that are ahead of us, but the principle's the same otherwise
	                let lowestUnsortedIndexNext = null;
	                let lowestSortedIndexNext = sortedTypeaheadIndex;
	                const updateBestFit = (u) => {
	                    if (lowestUnsortedIndexAll == null || u < lowestUnsortedIndexAll) {
	                        lowestUnsortedIndexAll = u;
	                        lowestSortedIndexAll = i;
	                    }
	                    if ((lowestUnsortedIndexNext == null || u < lowestUnsortedIndexNext) && u > getIndex()) {
	                        lowestUnsortedIndexNext = u;
	                        lowestSortedIndexNext = i;
	                    }
	                };
	                let i = sortedTypeaheadIndex;
	                while (i >= 0 && comparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
	                    updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
	                    --i;
	                }
	                i = sortedTypeaheadIndex;
	                while (i < sortedTypeaheadInfo.current.length && comparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
	                    updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
	                    ++i;
	                }
	                if (lowestUnsortedIndexNext !== null)
	                    setIndex(sortedTypeaheadInfo.current[lowestSortedIndexNext].unsortedIndex);
	                else if (lowestUnsortedIndexAll !== null)
	                    setIndex(sortedTypeaheadInfo.current[lowestSortedIndexAll].unsortedIndex);
	            }
	        }
	    }, [currentTypeahead, comparator]);
	    const useTypeaheadNavigationProps = (p) => p;
	    const useTypeaheadNavigationChild = A$1(({ text, ...i }) => {
	        useLayoutEffect(() => {
	            if (text) {
	                // Find where to insert this item.
	                // Because all index values should be unique, the returned sortedIndex
	                // should always refer to a new location (i.e. be negative)                
	                let sortedIndex = binarySearch(sortedTypeaheadInfo.current, text, comparator);
	                console.assert(sortedIndex < 0);
	                if (sortedIndex < 0) {
	                    sortedTypeaheadInfo.current.splice(-sortedIndex - 1, 0, { text, unsortedIndex: i.index });
	                }
	                return () => {
	                    // When unmounting, find where we were and remove ourselves.
	                    // Again, we should always find ourselves because there should be no duplicate values if each index is unique.
	                    let sortedIndex = binarySearch(sortedTypeaheadInfo.current, text, comparator);
	                    console.assert(sortedIndex >= 0);
	                    if (sortedIndex > 0) {
	                        sortedTypeaheadInfo.current.splice(sortedIndex, 1);
	                    }
	                };
	            }
	        }, [text, comparator]);
	        const useTypeaheadNavigationChildProps = function ({ ...props }) {
	            const { useRefElementProps, element } = useRefElement();
	            const onCompositionStart = (e) => { setImeActive(true); };
	            const onCompositionEnd = (e) => {
	                setNextTypeaheadChar(e.data);
	                setImeActive(false);
	            };
	            const onKeyDown = (e) => {
	                const imeActive = getImeActive();
	                let key = e.key;
	                // Not handled by typeahead (i.e. assume this is a keyboard shortcut)
	                if (e.ctrlKey || e.metaKey)
	                    return;
	                if (!imeActive && e.key === "Backspace") {
	                    // Remove the last character in a way that doesn't split UTF-16 surrogates.
	                    setCurrentTypeahead(t => t === null ? null : [...t].reverse().slice(1).reverse().join(""));
	                    e.preventDefault();
	                    e.stopPropagation();
	                    return;
	                }
	                // The key property represents the typed character OR the "named key attribute" of the key pressed.
	                // There's no definite way to tell the difference, but for all intents and purposes
	                // there are no one-character names, and there are no non-ASCII-alpha names.
	                // Thus, any one-character or non-ASCII value for `key` is *almost certainly* a typed character.
	                const isCharacterKey = (key.length === 1 || !/^[A-Za-z]/.test(key));
	                if (isCharacterKey) {
	                    if (key == " " && (getCurrentTypeahead() ?? "").trim().length == 0) ;
	                    else {
	                        e.preventDefault();
	                        e.stopPropagation();
	                        // Note: Won't be true for the first keydown
	                        // but will be overwritten before useLayoutEffect is called
	                        // to actually apply the change
	                        if (!imeActive)
	                            setNextTypeaheadChar(key);
	                    }
	                }
	            };
	            return useMergedProps()(useRefElementProps({ onKeyDown, onCompositionStart, onCompositionEnd, }), props);
	        };
	        return {
	            useTypeaheadNavigationChildProps
	        };
	    }, []);
	    return {
	        useTypeaheadNavigationChild,
	        useTypeaheadNavigationProps,
	        currentTypeahead,
	        invalidTypeahead,
	    };
	}
	/**
	 * Your usual binary search implementation.
	 *
	 * It's used here to quickly find a good spot to start searching for our next typeahead candidate.
	 * @param array The array to search through
	 * @param wanted The value you'd like to find
	 * @param comparator Compares `wanted` with the current value in `array`
	 * @returns A non-negative value if `wanted` was found, and a negative number if not.
	 * The absolute value of this number, minus one, is where `wanted` *would* be found if it *was* in `array`
	 */
	function binarySearch(array, wanted, comparator) {
	    var firstIndex = 0;
	    var lastIndex = array.length - 1;
	    while (firstIndex <= lastIndex) {
	        var testIndex = (lastIndex + firstIndex) >> 1;
	        var comparisonResult = comparator(wanted, array[testIndex]);
	        if (comparisonResult > 0) {
	            firstIndex = testIndex + 1;
	        }
	        else if (comparisonResult < 0) {
	            lastIndex = testIndex - 1;
	        }
	        else {
	            return testIndex;
	        }
	    }
	    return -firstIndex - 1;
	}

	// Used instead of undefined in case undefined is a 
	// type that's frequently used in the used use case.
	const NeverSet = Symbol("never-set");
	/**
	 * Returns a value that does not change between renders. The provided getter will only be called once, just in case it's expensive.
	 *
	 * Optionally, the value can depend on a set of arguments that will be passed to the getter.
	 *
	 * Effectively, this is `useMemo`, except it passes its dependencies to the factory function.
	 *
	 * @param getter A function that returns the value you want to use
	 * @param args Optional arguments to pass to the function. The function will only be called again if these change.
	 * @returns
	 */
	function useConstant(getter, ...args) {
	    const [value, setValue] = useState(NeverSet);
	    h(() => { setValue(prev => getter(...args)); }, args);
	    if (value === NeverSet)
	        return getter(...args);
	    return value;
	}

	const Table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";
	function base64(value) {
	    return Table[value];
	}
	function random6Bits() {
	    return Math.floor(Math.random() * 0b1000000);
	}
	function random64Bits() {
	    return [random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits()];
	}
	/**
	 * Returns a randomly-generated ID with an optional prefix.
	 * Note that if the prefix is *explicitly* set to "", then
	 * IDs that are not valid under HTML4 may be generated. Oh no.
	 */
	function generateRandomId(prefix) {
	    return `${prefix ?? "id-"}${random64Bits().map(n => base64(n)).join("")}`;
	}
	/**
	 * Returns a hook that modifies a set of props to provide a randomly-generated ID if one was not provided.
	 *
	 * If you'd like to use the ID in a property that's *not* named `id` (like `for` or `aria-labelledby` or whatnot), `useReferencedIdProps` is also provided.
	 *
	 * And the randomly-generated id itself is also provided in case you want to handle the logic yourself without `useMergedProps`.
	 *
	 * Unlike most other `use*Props` hooks, these are mostly stable.
	 */
	function useRandomId({ prefix } = {}) {
	    const randomId = useConstant(generateRandomId, prefix);
	    // Whatever ID was most recently used by the actual "id" prop.
	    // Used so that any ID-referencing props don't need to provide the same value.
	    //
	    // TODO: This does mean that on the first render, if just the ID is provided,
	    // there will be a temporary mismatch, but it's corrected before rendering finishes.
	    // Is this okay?
	    const [usedId, setUsedId, getUsedId] = useState(undefined);
	    const useReferencedIdProps = A$1(function useReferencedIdProps(idPropName) {
	        const ret = function ({ [idPropName]: givenId, ...props }) {
	            const usedId2 = (givenId ?? usedId ?? randomId ?? undefined);
	            if (idPropName === "id")
	                setUsedId(usedId2);
	            return useMergedProps()({ [idPropName]: usedId2 }, props);
	        };
	        return ret;
	    }, [usedId, randomId]);
	    const useRandomIdProps = A$1(function useRandomIdProps(p) {
	        return useReferencedIdProps("id")(p);
	    }, [useReferencedIdProps]);
	    return {
	        randomId,
	        id: usedId,
	        getId: getUsedId,
	        useRandomIdProps,
	        useReferencedIdProps
	    };
	}

	const EventDetail = Symbol("event-detail");
	function enhanceEvent(e, detail) {
	    let event = e;
	    event[EventDetail] = detail;
	    return event;
	}

	function excludes(target, exclude) {
	    if (exclude == "exclude")
	        return true;
	    return !!exclude?.[target];
	}
	/**
	 * Easy way to "polyfill" button-like interactions onto, e.g., a div.
	 *
	 * Adds click, space on keyDown, and enter on keyUp.
	 *
	 * In addition, when the CSS `:active` pseudo-class would apply to a normal button
	 * (i.e. when holding the spacebar or during mousedown), { "data-pseudo-active": "true" }
	 * is added to the props.  You can either let it pass through and style it through new CSS,
	 * or inspect the returned props for it and add e.g. an `.active` class for existing CSS
	 *
	 * @param onClick
	 * @param exclude Whether the polyfill should apply (can specify for specific interactions)
	 */
	function useButtonLikeEventHandlers(onClickSync, exclude) {
	    //type E = Ev extends h.JSX.TargetedEvent<infer E, any>? E : EventTarget;
	    const [active, setActive] = useState(false);
	    const onKeyUp = excludes("space", exclude) ? undefined : (e) => {
	        if (e.key == " " && onClickSync) {
	            e.preventDefault();
	            onClickSync(e);
	            setActive(false);
	        }
	    };
	    const onMouseDown = excludes("click", exclude) ? undefined : (e) => {
	        if (e.button === 0)
	            setActive(true);
	    };
	    const onBlur = (e) => {
	        setActive(false);
	    };
	    const onMouseUp = excludes("click", exclude) ? undefined : onBlur;
	    const onMouseOut = excludes("click", exclude) ? undefined : onBlur;
	    const onKeyDown = excludes("space", exclude) && excludes("enter", exclude) ? undefined : (e) => {
	        if (e.key == " " && onClickSync && !excludes("space", exclude)) {
	            // We don't actually activate it on a space keydown
	            // but we do preventDefault to stop the page from scrolling.
	            setActive(true);
	            e.preventDefault();
	        }
	        if (e.key == "Enter" && onClickSync && !excludes("enter", exclude)) {
	            e.preventDefault();
	            onClickSync(e);
	        }
	    };
	    const onClick2 = excludes("click", exclude) ? undefined : ((e) => {
	        if (onClickSync && !excludes("click", exclude)) {
	            onClickSync(e);
	        }
	    });
	    return (props) => useMergedProps()({ onKeyDown, onKeyUp, onClick: onClick2, onBlur, onMouseDown, onMouseUp, onMouseOut, ...{ "data-pseudo-active": active ? "true" : undefined } }, props);
	}

	function useAriaAccordion({ expandedIndex, setExpandedIndex }) {
	    const [lastFocusedIndex, setLastFocusedIndex, getLastFocusedIndex] = useState(0);
	    const stableSetExpandedIndex = useStableCallback(setExpandedIndex ?? (() => { }));
	    const { managedChildren: managedAccordionSections, useManagedChild: useManagedChildSection } = useChildManager();
	    const { useLinearNavigationProps } = useLinearNavigation({ managedChildren: managedAccordionSections, navigationDirection: "block", getIndex: getLastFocusedIndex, setIndex: setLastFocusedIndex });
	    // Any time list management changes the focused index, manually focus the child
	    // TODO: Can this be cut?
	    useLayoutEffect(() => {
	        if (lastFocusedIndex != null && lastFocusedIndex >= 0)
	            managedAccordionSections[lastFocusedIndex]?.focus();
	    }, [lastFocusedIndex]);
	    // Any time a new expanded index is given, 
	    // collapse the old section and expand the new one.
	    const [prevExpandedIndex, setPrevExpandedIndex, getPrevExpandedIndex] = useState(null);
	    const [prevChildCount, setPrevChildCount, getPrevChildCount] = useState(managedAccordionSections.length);
	    useLayoutEffect(() => {
	        // Close any new panels that might have mounted (their open prop is null right now if so)
	        for (let i = (getPrevChildCount() ?? 0); i < managedAccordionSections.length; ++i) {
	            managedAccordionSections[i]?.setOpenFromParent(i === expandedIndex);
	        }
	        setPrevChildCount(managedAccordionSections.length);
	        // Collapse the currently expanded panel
	        const prevExpandedIndex = getPrevExpandedIndex();
	        if (prevExpandedIndex != null && prevExpandedIndex <= managedAccordionSections.length)
	            managedAccordionSections[prevExpandedIndex]?.setOpenFromParent(false);
	        // Expand the next panel
	        if (expandedIndex != null && expandedIndex <= managedAccordionSections.length) {
	            managedAccordionSections[expandedIndex]?.setOpenFromParent(true);
	            setPrevExpandedIndex(expandedIndex);
	        }
	    }, [expandedIndex, managedAccordionSections.length]);
	    const useAriaAccordionSection = A$1((args) => {
	        const [openFromParent, setOpenFromParent, getOpenFromParent] = useState(null);
	        const { randomId: bodyRandomId, useRandomIdProps: useBodyRandomIdProps, useReferencedIdProps: useReferencedBodyIdProps } = useRandomId({ prefix: "aria-accordion-section-body-" });
	        const { randomId: headRandomId, useRandomIdProps: useHeadRandomIdProps, useReferencedIdProps: useReferencedHeadIdProps } = useRandomId({ prefix: "aria-accordion-section-header-" });
	        let open = ((args.open ?? openFromParent) ?? null);
	        // TODO: Convert to use useManagedChild so that this hook 
	        // is stable without (directly) depending on the open state.
	        const useAriaAccordionSectionHeader = A$1(function useAriaAccordionSectionHeader({ tag }) {
	            const { useRefElementProps, element } = useRefElement();
	            const focus = A$1(() => { element?.focus(); }, [element]);
	            const { useManagedChildProps } = useManagedChildSection({ index: args.index, open: open, setOpenFromParent, focus });
	            function useAriaAccordionSectionHeaderProps({ ["aria-expanded"]: ariaExpanded, ["aria-disabled"]: ariaDisabled, ...props }) {
	                const onFocus = () => { setLastFocusedIndex(args.index); };
	                let onClick = () => {
	                    if (getOpenFromParent())
	                        stableSetExpandedIndex(null);
	                    else
	                        stableSetExpandedIndex(args.index);
	                };
	                let retA = useMergedProps()({ onClick }, props);
	                let retB = useMergedProps()({ tabIndex: 0 }, useButtonLikeEventHandlers(onClick)(props));
	                let ret3 = useMergedProps()(useHeadRandomIdProps(useReferencedBodyIdProps("aria-controls")({
	                    "aria-expanded": (ariaExpanded ?? (!!open).toString()),
	                    "aria-disabled": (ariaDisabled ?? (open ? "true" : undefined)),
	                    ...useRefElementProps(useManagedChildProps(tag === "button" ? retA : retB))
	                })), { onFocus });
	                return ret3;
	            }
	            return { useAriaAccordionSectionHeaderProps };
	        }, [open]);
	        const useAriaAccordionSectionBody = A$1(function useAriaAccordionSectionBody() {
	            function useAriaAccordionSectionBodyProps({ role, ...props }) {
	                let ret1 = useReferencedHeadIdProps("aria-labelledby")({ role: role ?? "region", ...props });
	                let ret2 = useBodyRandomIdProps(ret1);
	                return ret2;
	            }
	            return {
	                useAriaAccordionSectionBodyProps
	            };
	        }, []);
	        return {
	            expanded: open,
	            useAriaAccordionSectionHeader,
	            useAriaAccordionSectionBody,
	        };
	    }, []);
	    function useAriaAccordionProps(props) {
	        return useLinearNavigationProps(props);
	    }
	    return {
	        useAriaAccordionSection,
	        useAriaAccordionProps
	    };
	}

	/*!
	* tabbable 5.2.0
	* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
	*/
	var candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])', 'details>summary:first-of-type', 'details'];
	var matches = typeof Element === 'undefined' ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;

	var isInput = function isInput(node) {
	  return node.tagName === 'INPUT';
	};

	var isHiddenInput = function isHiddenInput(node) {
	  return isInput(node) && node.type === 'hidden';
	};

	var isDetailsWithSummary = function isDetailsWithSummary(node) {
	  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {
	    return child.tagName === 'SUMMARY';
	  });
	  return r;
	};

	var isHidden = function isHidden(node, displayCheck) {
	  if (getComputedStyle(node).visibility === 'hidden') {
	    return true;
	  }

	  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');
	  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;

	  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {
	    return true;
	  }

	  if (!displayCheck || displayCheck === 'full') {
	    while (node) {
	      if (getComputedStyle(node).display === 'none') {
	        return true;
	      }

	      node = node.parentElement;
	    }
	  } else if (displayCheck === 'non-zero-area') {
	    var _node$getBoundingClie = node.getBoundingClientRect(),
	        width = _node$getBoundingClie.width,
	        height = _node$getBoundingClie.height;

	    return width === 0 && height === 0;
	  }

	  return false;
	};

	var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {
	  if (node.disabled || isHiddenInput(node) || isHidden(node, options.displayCheck) ||
	  /* For a details element with a summary, the summary element gets the focused  */
	  isDetailsWithSummary(node)) {
	    return false;
	  }

	  return true;
	};

	var focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');

	var isFocusable = function isFocusable(node, options) {
	  options = options || {};

	  if (!node) {
	    throw new Error('No node provided');
	  }

	  if (matches.call(node, focusableCandidateSelector) === false) {
	    return false;
	  }

	  return isNodeMatchingSelectorFocusable(options, node);
	};

	/**
	 *
	 * There are several different ways that a focus event can happen.  Assume
	 * the following steps happen in order:
	 *
	 * 1. The page loads.
	 *    * Nothing is focused, but `document.activeElement` is `body`.
	 *    * No focus events are fired.
	 * 2. The window is focused, an unfocusable element is clicked, text is selected, etc.
	 *    * The `activeElement` remains as `body`.
	 *    * A `focus`/`focusin` event *MIGHT* be fired for `body`. Depending on
	 *      the browser, this depends on whether the handler was attached to `window` or `document`.
	 *      Probably just best to not rely on it, or listen to `window` focus events directly.
	 * 3. A focusable element is clicked, etc.
	 *    * The `activeElement` is set to the new element before any event even fires.
	 *    * `focusout` and `blur` are *not* fired on `body`.
	 *    * `focus` and `focusin` are fired on the new element. `relatedTarget` is null.
	 * 4. A focusable element is clicked, etc.
	 *    * **The `activeElement` is set to the `body`** before any event even fires.
	 *    * `blur` and `focusout` are fired on the old element. `relatedTarget` is the new element.
	 *    * The `activeElement` is now set to the new element.
	 *    * `focusin` is fired on the new element. `relatedTarget` is the old element.
	 * 5. An unfocusable element is clicked, text is selected, etc.
	 *    * The `activeElement` is set to `body`.
	 *    * `blur` and `focusout` are fired on the old element. `relatedTarget` is null.
	 *    * `focusin` is *not* fired on `body`.
	 *
	 *
	 * In summary:
	 * 1. Focus events *do* notify us of all changes in focus, but there is no one single comprehensive event that provides us with all available information.
	 * 2. `document.activeElement` *is not* always the same as what's being referenced by a focus event. In particular, it may become `body` at any arbitrary time.
	 * 3. A `blur` without a `focus` can and will occur. This means it is not possible to solely use `focus` to detect all changes.
	 * 4. A `blur` event whose `relatedTarget` is null indicates that there will be no following `focus` event.
	 *
	 *
	 * @param callback
	 * @returns
	 */
	let currentlyFocusedElement = null;
	let lastFocusedElement = null;
	function getLastFocusedElement() {
	    return lastFocusedElement;
	}
	function getCurrentlyFocusedElement() {
	    return currentlyFocusedElement;
	}
	const updaters = new Set();
	function focusout(e) {
	    if (e.relatedTarget == null) {
	        currentlyFocusedElement = null;
	        for (let f of updaters) {
	            f();
	        }
	    }
	}
	function focusin(e) {
	    currentlyFocusedElement = lastFocusedElement = e.target;
	    for (let f of updaters) {
	        f();
	    }
	}
	let windowFocused = true;
	function windowFocus() {
	    windowFocused = true;
	    for (let f of updaters) {
	        f();
	    }
	}
	function windowBlur() {
	    windowFocused = false;
	    for (let f of updaters) {
	        f();
	    }
	}
	function useActiveElement() {
	    // TODO: Is this actually better than using proper state management?
	    const [i, setI] = useState(0);
	    h(() => {
	        const F = () => setI(i => ++i);
	        if (updaters.size === 0) {
	            document.addEventListener("focusin", focusin, { passive: true });
	            document.addEventListener("focusout", focusout, { passive: true });
	            window.addEventListener("focus", windowFocus, { passive: true });
	            window.addEventListener("blur", windowBlur, { passive: true });
	        }
	        updaters.add(F);
	        return () => {
	            updaters.delete(F);
	            if (updaters.size === 0) {
	                document.removeEventListener("focusin", focusin);
	                document.removeEventListener("focusout", focusout);
	                window.removeEventListener("focus", windowFocus);
	                window.removeEventListener("blur", windowBlur);
	            }
	        };
	    }, []);
	    return {
	        activeElement: currentlyFocusedElement,
	        lastActiveElement: lastFocusedElement,
	        getActiveElement: getCurrentlyFocusedElement,
	        getLastActiveElement: getLastFocusedElement,
	        windowFocused
	    };
	}

	/**
	 * @license
	 * Copyright 2016 Google Inc. All rights reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	(() => {
	    var _a, _b, _c;
	    /* Symbols for private properties */
	    const _blockingElements = Symbol();
	    const _alreadyInertElements = Symbol();
	    const _topElParents = Symbol();
	    const _siblingsToRestore = Symbol();
	    const _parentMO = Symbol();
	    /* Symbols for private static methods */
	    const _topChanged = Symbol();
	    const _swapInertedSibling = Symbol();
	    const _inertSiblings = Symbol();
	    const _restoreInertedSiblings = Symbol();
	    const _getParents = Symbol();
	    const _getDistributedChildren = Symbol();
	    const _isInertable = Symbol();
	    const _handleMutations = Symbol();
	    class BlockingElementsImpl {
	        constructor() {
	            /**
	             * The blocking elements.
	             */
	            this[_a] = [];
	            /**
	             * Used to keep track of the parents of the top element, from the element
	             * itself up to body. When top changes, the old top might have been removed
	             * from the document, so we need to memoize the inerted parents' siblings
	             * in order to restore their inerteness when top changes.
	             */
	            this[_b] = [];
	            /**
	             * Elements that are already inert before the first blocking element is
	             * pushed.
	             */
	            this[_c] = new Set();
	        }
	        destructor() {
	            // Restore original inertness.
	            this[_restoreInertedSiblings](this[_topElParents]);
	            // Note we don't want to make these properties nullable on the class,
	            // since then we'd need non-null casts in many places. Calling a method on
	            // a BlockingElements instance after calling destructor will result in an
	            // exception.
	            const nullable = this;
	            nullable[_blockingElements] = null;
	            nullable[_topElParents] = null;
	            nullable[_alreadyInertElements] = null;
	        }
	        get top() {
	            const elems = this[_blockingElements];
	            return elems[elems.length - 1] || null;
	        }
	        push(element) {
	            if (!element || element === this.top) {
	                return;
	            }
	            // Remove it from the stack, we'll bring it to the top.
	            this.remove(element);
	            this[_topChanged](element);
	            this[_blockingElements].push(element);
	        }
	        remove(element) {
	            const i = this[_blockingElements].indexOf(element);
	            if (i === -1) {
	                return false;
	            }
	            this[_blockingElements].splice(i, 1);
	            // Top changed only if the removed element was the top element.
	            if (i === this[_blockingElements].length) {
	                this[_topChanged](this.top);
	            }
	            return true;
	        }
	        pop() {
	            const top = this.top;
	            top && this.remove(top);
	            return top;
	        }
	        has(element) {
	            return this[_blockingElements].indexOf(element) !== -1;
	        }
	        /**
	         * Sets `inert` to all document elements except the new top element, its
	         * parents, and its distributed content.
	         */
	        [(_a = _blockingElements, _b = _topElParents, _c = _alreadyInertElements, _topChanged)](newTop) {
	            const toKeepInert = this[_alreadyInertElements];
	            const oldParents = this[_topElParents];
	            // No new top, reset old top if any.
	            if (!newTop) {
	                this[_restoreInertedSiblings](oldParents);
	                toKeepInert.clear();
	                this[_topElParents] = [];
	                return;
	            }
	            const newParents = this[_getParents](newTop);
	            // New top is not contained in the main document!
	            if (newParents[newParents.length - 1].parentNode !== document.body) {
	                throw Error('Non-connected element cannot be a blocking element');
	            }
	            // Cast here because we know we'll call _inertSiblings on newParents
	            // below.
	            this[_topElParents] = newParents;
	            const toSkip = this[_getDistributedChildren](newTop);
	            // No previous top element.
	            if (!oldParents.length) {
	                this[_inertSiblings](newParents, toSkip, toKeepInert);
	                return;
	            }
	            let i = oldParents.length - 1;
	            let j = newParents.length - 1;
	            // Find common parent. Index 0 is the element itself (so stop before it).
	            while (i > 0 && j > 0 && oldParents[i] === newParents[j]) {
	                i--;
	                j--;
	            }
	            // If up the parents tree there are 2 elements that are siblings, swap
	            // the inerted sibling.
	            if (oldParents[i] !== newParents[j]) {
	                this[_swapInertedSibling](oldParents[i], newParents[j]);
	            }
	            // Restore old parents siblings inertness.
	            i > 0 && this[_restoreInertedSiblings](oldParents.slice(0, i));
	            // Make new parents siblings inert.
	            j > 0 && this[_inertSiblings](newParents.slice(0, j), toSkip, null);
	        }
	        /**
	         * Swaps inertness between two sibling elements.
	         * Sets the property `inert` over the attribute since the inert spec
	         * doesn't specify if it should be reflected.
	         * https://html.spec.whatwg.org/multipage/interaction.html#inert
	         */
	        [_swapInertedSibling](oldInert, newInert) {
	            const siblingsToRestore = oldInert[_siblingsToRestore];
	            // oldInert is not contained in siblings to restore, so we have to check
	            // if it's inertable and if already inert.
	            if (this[_isInertable](oldInert) && !oldInert.inert) {
	                oldInert.inert = true;
	                siblingsToRestore.add(oldInert);
	            }
	            // If newInert was already between the siblings to restore, it means it is
	            // inertable and must be restored.
	            if (siblingsToRestore.has(newInert)) {
	                newInert.inert = false;
	                siblingsToRestore.delete(newInert);
	            }
	            newInert[_parentMO] = oldInert[_parentMO];
	            newInert[_siblingsToRestore] = siblingsToRestore;
	            oldInert[_parentMO] = undefined;
	            oldInert[_siblingsToRestore] = undefined;
	        }
	        /**
	         * Restores original inertness to the siblings of the elements.
	         * Sets the property `inert` over the attribute since the inert spec
	         * doesn't specify if it should be reflected.
	         * https://html.spec.whatwg.org/multipage/interaction.html#inert
	         */
	        [_restoreInertedSiblings](elements) {
	            for (const element of elements) {
	                const mo = element[_parentMO];
	                mo.disconnect();
	                element[_parentMO] = undefined;
	                const siblings = element[_siblingsToRestore];
	                for (const sibling of siblings) {
	                    sibling.inert = false;
	                }
	                element[_siblingsToRestore] = undefined;
	            }
	        }
	        /**
	         * Inerts the siblings of the elements except the elements to skip. Stores
	         * the inerted siblings into the element's symbol `_siblingsToRestore`.
	         * Pass `toKeepInert` to collect the already inert elements.
	         * Sets the property `inert` over the attribute since the inert spec
	         * doesn't specify if it should be reflected.
	         * https://html.spec.whatwg.org/multipage/interaction.html#inert
	         */
	        [_inertSiblings](elements, toSkip, toKeepInert) {
	            for (const element of elements) {
	                // Assume element is not a Document, so it must have a parentNode.
	                const parent = element.parentNode;
	                const children = parent.children;
	                const inertedSiblings = new Set();
	                for (let j = 0; j < children.length; j++) {
	                    const sibling = children[j];
	                    // Skip the input element, if not inertable or to be skipped.
	                    if (sibling === element || !this[_isInertable](sibling) ||
	                        (toSkip && toSkip.has(sibling))) {
	                        continue;
	                    }
	                    // Should be collected since already inerted.
	                    if (toKeepInert && sibling.inert) {
	                        toKeepInert.add(sibling);
	                    }
	                    else {
	                        sibling.inert = true;
	                        inertedSiblings.add(sibling);
	                    }
	                }
	                // Store the siblings that were inerted.
	                element[_siblingsToRestore] = inertedSiblings;
	                // Observe only immediate children mutations on the parent.
	                const mo = new MutationObserver(this[_handleMutations].bind(this));
	                element[_parentMO] = mo;
	                let parentToObserve = parent;
	                // If we're using the ShadyDOM polyfill, then our parent could be a
	                // shady root, which is an object that acts like a ShadowRoot, but isn't
	                // actually a node in the real DOM. Observe the real DOM parent instead.
	                const maybeShadyRoot = parentToObserve;
	                if (maybeShadyRoot.__shady && maybeShadyRoot.host) {
	                    parentToObserve = maybeShadyRoot.host;
	                }
	                mo.observe(parentToObserve, {
	                    childList: true,
	                });
	            }
	        }
	        /**
	         * Handles newly added/removed nodes by toggling their inertness.
	         * It also checks if the current top Blocking Element has been removed,
	         * notifying and removing it.
	         */
	        [_handleMutations](mutations) {
	            const parents = this[_topElParents];
	            const toKeepInert = this[_alreadyInertElements];
	            for (const mutation of mutations) {
	                // If the target is a shadowRoot, get its host as we skip shadowRoots when
	                // computing _topElParents.
	                const target = mutation.target.host || mutation.target;
	                const idx = target === document.body ?
	                    parents.length :
	                    parents.indexOf(target);
	                const inertedChild = parents[idx - 1];
	                const inertedSiblings = inertedChild[_siblingsToRestore];
	                // To restore.
	                for (let i = 0; i < mutation.removedNodes.length; i++) {
	                    const sibling = mutation.removedNodes[i];
	                    if (sibling === inertedChild) {
	                        console.info('Detected removal of the top Blocking Element.');
	                        this.pop();
	                        return;
	                    }
	                    if (inertedSiblings.has(sibling)) {
	                        sibling.inert = false;
	                        inertedSiblings.delete(sibling);
	                    }
	                }
	                // To inert.
	                for (let i = 0; i < mutation.addedNodes.length; i++) {
	                    const sibling = mutation.addedNodes[i];
	                    if (!this[_isInertable](sibling)) {
	                        continue;
	                    }
	                    if (toKeepInert && sibling.inert) {
	                        toKeepInert.add(sibling);
	                    }
	                    else {
	                        sibling.inert = true;
	                        inertedSiblings.add(sibling);
	                    }
	                }
	            }
	        }
	        /**
	         * Returns if the element is inertable.
	         */
	        [_isInertable](element) {
	            return false === /^(style|template|script)$/.test(element.localName);
	        }
	        /**
	         * Returns the list of newParents of an element, starting from element
	         * (included) up to `document.body` (excluded).
	         */
	        [_getParents](element) {
	            const parents = [];
	            let current = element;
	            // Stop to body.
	            while (current && current !== document.body) {
	                // Skip shadow roots.
	                if (current.nodeType === Node.ELEMENT_NODE) {
	                    parents.push(current);
	                }
	                // ShadowDom v1
	                if (current.assignedSlot) {
	                    // Collect slots from deepest slot to top.
	                    while (current = current.assignedSlot) {
	                        parents.push(current);
	                    }
	                    // Continue the search on the top slot.
	                    current = parents.pop();
	                    continue;
	                }
	                current = current.parentNode ||
	                    current.host;
	            }
	            return parents;
	        }
	        /**
	         * Returns the distributed children of the element's shadow root.
	         * Returns null if the element doesn't have a shadow root.
	         */
	        [_getDistributedChildren](element) {
	            const shadowRoot = element.shadowRoot;
	            if (!shadowRoot) {
	                return null;
	            }
	            const result = new Set();
	            let i;
	            let j;
	            let nodes;
	            const slots = shadowRoot.querySelectorAll('slot');
	            if (slots.length && slots[0].assignedNodes) {
	                for (i = 0; i < slots.length; i++) {
	                    nodes = slots[i].assignedNodes({
	                        flatten: true,
	                    });
	                    for (j = 0; j < nodes.length; j++) {
	                        if (nodes[j].nodeType === Node.ELEMENT_NODE) {
	                            result.add(nodes[j]);
	                        }
	                    }
	                }
	                // No need to search for <content>.
	            }
	            return result;
	        }
	    }
	    document.$blockingElements =
	        new BlockingElementsImpl();
	})();

	createCommonjsModule(function (module, exports) {
	(function (global, factory) {
	  factory() ;
	}(commonjsGlobal, (function () {
	  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	  /**
	   * This work is licensed under the W3C Software and Document License
	   * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).
	   */

	  (function () {
	    // Return early if we're not running inside of the browser.
	    if (typeof window === 'undefined') {
	      return;
	    }

	    // Convenience function for converting NodeLists.
	    /** @type {typeof Array.prototype.slice} */
	    var slice = Array.prototype.slice;

	    /**
	     * IE has a non-standard name for "matches".
	     * @type {typeof Element.prototype.matches}
	     */
	    var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;

	    /** @type {string} */
	    var _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'details', 'summary', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');

	    /**
	     * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`
	     * attribute.
	     *
	     * Its main functions are:
	     *
	     * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the
	     *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering
	     *   each focusable node in the subtree with the singleton `InertManager` which manages all known
	     *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`
	     *   instance exists for each focusable node which has at least one inert root as an ancestor.
	     *
	     * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`
	     *   attribute is removed from the root node). This is handled in the destructor, which calls the
	     *   `deregister` method on `InertManager` for each managed inert node.
	     */

	    var InertRoot = function () {
	      /**
	       * @param {!Element} rootElement The Element at the root of the inert subtree.
	       * @param {!InertManager} inertManager The global singleton InertManager object.
	       */
	      function InertRoot(rootElement, inertManager) {
	        _classCallCheck(this, InertRoot);

	        /** @type {!InertManager} */
	        this._inertManager = inertManager;

	        /** @type {!Element} */
	        this._rootElement = rootElement;

	        /**
	         * @type {!Set<!InertNode>}
	         * All managed focusable nodes in this InertRoot's subtree.
	         */
	        this._managedNodes = new Set();

	        // Make the subtree hidden from assistive technology
	        if (this._rootElement.hasAttribute('aria-hidden')) {
	          /** @type {?string} */
	          this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');
	        } else {
	          this._savedAriaHidden = null;
	        }
	        this._rootElement.setAttribute('aria-hidden', 'true');

	        // Make all focusable elements in the subtree unfocusable and add them to _managedNodes
	        this._makeSubtreeUnfocusable(this._rootElement);

	        // Watch for:
	        // - any additions in the subtree: make them unfocusable too
	        // - any removals from the subtree: remove them from this inert root's managed nodes
	        // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable
	        //   element, make that node a managed node.
	        this._observer = new MutationObserver(this._onMutation.bind(this));
	        this._observer.observe(this._rootElement, { attributes: true, childList: true, subtree: true });
	      }

	      /**
	       * Call this whenever this object is about to become obsolete.  This unwinds all of the state
	       * stored in this object and updates the state of all of the managed nodes.
	       */


	      _createClass(InertRoot, [{
	        key: 'destructor',
	        value: function destructor() {
	          this._observer.disconnect();

	          if (this._rootElement) {
	            if (this._savedAriaHidden !== null) {
	              this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);
	            } else {
	              this._rootElement.removeAttribute('aria-hidden');
	            }
	          }

	          this._managedNodes.forEach(function (inertNode) {
	            this._unmanageNode(inertNode.node);
	          }, this);

	          // Note we cast the nulls to the ANY type here because:
	          // 1) We want the class properties to be declared as non-null, or else we
	          //    need even more casts throughout this code. All bets are off if an
	          //    instance has been destroyed and a method is called.
	          // 2) We don't want to cast "this", because we want type-aware optimizations
	          //    to know which properties we're setting.
	          this._observer = /** @type {?} */null;
	          this._rootElement = /** @type {?} */null;
	          this._managedNodes = /** @type {?} */null;
	          this._inertManager = /** @type {?} */null;
	        }

	        /**
	         * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.
	         */

	      }, {
	        key: '_makeSubtreeUnfocusable',


	        /**
	         * @param {!Node} startNode
	         */
	        value: function _makeSubtreeUnfocusable(startNode) {
	          var _this2 = this;

	          composedTreeWalk(startNode, function (node) {
	            return _this2._visitNode(node);
	          });

	          var activeElement = document.activeElement;

	          if (!document.body.contains(startNode)) {
	            // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.
	            var node = startNode;
	            /** @type {!ShadowRoot|undefined} */
	            var root = undefined;
	            while (node) {
	              if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
	                root = /** @type {!ShadowRoot} */node;
	                break;
	              }
	              node = node.parentNode;
	            }
	            if (root) {
	              activeElement = root.activeElement;
	            }
	          }
	          if (startNode.contains(activeElement)) {
	            activeElement.blur();
	            // In IE11, if an element is already focused, and then set to tabindex=-1
	            // calling blur() will not actually move the focus.
	            // To work around this we call focus() on the body instead.
	            if (activeElement === document.activeElement) {
	              document.body.focus();
	            }
	          }
	        }

	        /**
	         * @param {!Node} node
	         */

	      }, {
	        key: '_visitNode',
	        value: function _visitNode(node) {
	          if (node.nodeType !== Node.ELEMENT_NODE) {
	            return;
	          }
	          var element = /** @type {!Element} */node;

	          // If a descendant inert root becomes un-inert, its descendants will still be inert because of
	          // this inert root, so all of its managed nodes need to be adopted by this InertRoot.
	          if (element !== this._rootElement && element.hasAttribute('inert')) {
	            this._adoptInertRoot(element);
	          }

	          if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {
	            this._manageNode(element);
	          }
	        }

	        /**
	         * Register the given node with this InertRoot and with InertManager.
	         * @param {!Node} node
	         */

	      }, {
	        key: '_manageNode',
	        value: function _manageNode(node) {
	          var inertNode = this._inertManager.register(node, this);
	          this._managedNodes.add(inertNode);
	        }

	        /**
	         * Unregister the given node with this InertRoot and with InertManager.
	         * @param {!Node} node
	         */

	      }, {
	        key: '_unmanageNode',
	        value: function _unmanageNode(node) {
	          var inertNode = this._inertManager.deregister(node, this);
	          if (inertNode) {
	            this._managedNodes['delete'](inertNode);
	          }
	        }

	        /**
	         * Unregister the entire subtree starting at `startNode`.
	         * @param {!Node} startNode
	         */

	      }, {
	        key: '_unmanageSubtree',
	        value: function _unmanageSubtree(startNode) {
	          var _this3 = this;

	          composedTreeWalk(startNode, function (node) {
	            return _this3._unmanageNode(node);
	          });
	        }

	        /**
	         * If a descendant node is found with an `inert` attribute, adopt its managed nodes.
	         * @param {!Element} node
	         */

	      }, {
	        key: '_adoptInertRoot',
	        value: function _adoptInertRoot(node) {
	          var inertSubroot = this._inertManager.getInertRoot(node);

	          // During initialisation this inert root may not have been registered yet,
	          // so register it now if need be.
	          if (!inertSubroot) {
	            this._inertManager.setInert(node, true);
	            inertSubroot = this._inertManager.getInertRoot(node);
	          }

	          inertSubroot.managedNodes.forEach(function (savedInertNode) {
	            this._manageNode(savedInertNode.node);
	          }, this);
	        }

	        /**
	         * Callback used when mutation observer detects subtree additions, removals, or attribute changes.
	         * @param {!Array<!MutationRecord>} records
	         * @param {!MutationObserver} self
	         */

	      }, {
	        key: '_onMutation',
	        value: function _onMutation(records, self) {
	          records.forEach(function (record) {
	            var target = /** @type {!Element} */record.target;
	            if (record.type === 'childList') {
	              // Manage added nodes
	              slice.call(record.addedNodes).forEach(function (node) {
	                this._makeSubtreeUnfocusable(node);
	              }, this);

	              // Un-manage removed nodes
	              slice.call(record.removedNodes).forEach(function (node) {
	                this._unmanageSubtree(node);
	              }, this);
	            } else if (record.type === 'attributes') {
	              if (record.attributeName === 'tabindex') {
	                // Re-initialise inert node if tabindex changes
	                this._manageNode(target);
	              } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {
	                // If a new inert root is added, adopt its managed nodes and make sure it knows about the
	                // already managed nodes from this inert subroot.
	                this._adoptInertRoot(target);
	                var inertSubroot = this._inertManager.getInertRoot(target);
	                this._managedNodes.forEach(function (managedNode) {
	                  if (target.contains(managedNode.node)) {
	                    inertSubroot._manageNode(managedNode.node);
	                  }
	                });
	              }
	            }
	          }, this);
	        }
	      }, {
	        key: 'managedNodes',
	        get: function get() {
	          return new Set(this._managedNodes);
	        }

	        /** @return {boolean} */

	      }, {
	        key: 'hasSavedAriaHidden',
	        get: function get() {
	          return this._savedAriaHidden !== null;
	        }

	        /** @param {?string} ariaHidden */

	      }, {
	        key: 'savedAriaHidden',
	        set: function set(ariaHidden) {
	          this._savedAriaHidden = ariaHidden;
	        }

	        /** @return {?string} */
	        ,
	        get: function get() {
	          return this._savedAriaHidden;
	        }
	      }]);

	      return InertRoot;
	    }();

	    /**
	     * `InertNode` initialises and manages a single inert node.
	     * A node is inert if it is a descendant of one or more inert root elements.
	     *
	     * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and
	     * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element
	     * is intrinsically focusable or not.
	     *
	     * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an
	     * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the
	     * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s
	     * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,
	     * or removes the `tabindex` attribute if the element is intrinsically focusable.
	     */


	    var InertNode = function () {
	      /**
	       * @param {!Node} node A focusable element to be made inert.
	       * @param {!InertRoot} inertRoot The inert root element associated with this inert node.
	       */
	      function InertNode(node, inertRoot) {
	        _classCallCheck(this, InertNode);

	        /** @type {!Node} */
	        this._node = node;

	        /** @type {boolean} */
	        this._overrodeFocusMethod = false;

	        /**
	         * @type {!Set<!InertRoot>} The set of descendant inert roots.
	         *    If and only if this set becomes empty, this node is no longer inert.
	         */
	        this._inertRoots = new Set([inertRoot]);

	        /** @type {?number} */
	        this._savedTabIndex = null;

	        /** @type {boolean} */
	        this._destroyed = false;

	        // Save any prior tabindex info and make this node untabbable
	        this.ensureUntabbable();
	      }

	      /**
	       * Call this whenever this object is about to become obsolete.
	       * This makes the managed node focusable again and deletes all of the previously stored state.
	       */


	      _createClass(InertNode, [{
	        key: 'destructor',
	        value: function destructor() {
	          this._throwIfDestroyed();

	          if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {
	            var element = /** @type {!Element} */this._node;
	            if (this._savedTabIndex !== null) {
	              element.setAttribute('tabindex', this._savedTabIndex);
	            } else {
	              element.removeAttribute('tabindex');
	            }

	            // Use `delete` to restore native focus method.
	            if (this._overrodeFocusMethod) {
	              delete element.focus;
	            }
	          }

	          // See note in InertRoot.destructor for why we cast these nulls to ANY.
	          this._node = /** @type {?} */null;
	          this._inertRoots = /** @type {?} */null;
	          this._destroyed = true;
	        }

	        /**
	         * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.
	         * If the object has been destroyed, any attempt to access it will cause an exception.
	         */

	      }, {
	        key: '_throwIfDestroyed',


	        /**
	         * Throw if user tries to access destroyed InertNode.
	         */
	        value: function _throwIfDestroyed() {
	          if (this.destroyed) {
	            throw new Error('Trying to access destroyed InertNode');
	          }
	        }

	        /** @return {boolean} */

	      }, {
	        key: 'ensureUntabbable',


	        /** Save the existing tabindex value and make the node untabbable and unfocusable */
	        value: function ensureUntabbable() {
	          if (this.node.nodeType !== Node.ELEMENT_NODE) {
	            return;
	          }
	          var element = /** @type {!Element} */this.node;
	          if (matches.call(element, _focusableElementsString)) {
	            if ( /** @type {!HTMLElement} */element.tabIndex === -1 && this.hasSavedTabIndex) {
	              return;
	            }

	            if (element.hasAttribute('tabindex')) {
	              this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;
	            }
	            element.setAttribute('tabindex', '-1');
	            if (element.nodeType === Node.ELEMENT_NODE) {
	              element.focus = function () {};
	              this._overrodeFocusMethod = true;
	            }
	          } else if (element.hasAttribute('tabindex')) {
	            this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;
	            element.removeAttribute('tabindex');
	          }
	        }

	        /**
	         * Add another inert root to this inert node's set of managing inert roots.
	         * @param {!InertRoot} inertRoot
	         */

	      }, {
	        key: 'addInertRoot',
	        value: function addInertRoot(inertRoot) {
	          this._throwIfDestroyed();
	          this._inertRoots.add(inertRoot);
	        }

	        /**
	         * Remove the given inert root from this inert node's set of managing inert roots.
	         * If the set of managing inert roots becomes empty, this node is no longer inert,
	         * so the object should be destroyed.
	         * @param {!InertRoot} inertRoot
	         */

	      }, {
	        key: 'removeInertRoot',
	        value: function removeInertRoot(inertRoot) {
	          this._throwIfDestroyed();
	          this._inertRoots['delete'](inertRoot);
	          if (this._inertRoots.size === 0) {
	            this.destructor();
	          }
	        }
	      }, {
	        key: 'destroyed',
	        get: function get() {
	          return (/** @type {!InertNode} */this._destroyed
	          );
	        }
	      }, {
	        key: 'hasSavedTabIndex',
	        get: function get() {
	          return this._savedTabIndex !== null;
	        }

	        /** @return {!Node} */

	      }, {
	        key: 'node',
	        get: function get() {
	          this._throwIfDestroyed();
	          return this._node;
	        }

	        /** @param {?number} tabIndex */

	      }, {
	        key: 'savedTabIndex',
	        set: function set(tabIndex) {
	          this._throwIfDestroyed();
	          this._savedTabIndex = tabIndex;
	        }

	        /** @return {?number} */
	        ,
	        get: function get() {
	          this._throwIfDestroyed();
	          return this._savedTabIndex;
	        }
	      }]);

	      return InertNode;
	    }();

	    /**
	     * InertManager is a per-document singleton object which manages all inert roots and nodes.
	     *
	     * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`
	     * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.
	     * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant
	     * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance
	     * is created for each such node, via the `_managedNodes` map.
	     */


	    var InertManager = function () {
	      /**
	       * @param {!Document} document
	       */
	      function InertManager(document) {
	        _classCallCheck(this, InertManager);

	        if (!document) {
	          throw new Error('Missing required argument; InertManager needs to wrap a document.');
	        }

	        /** @type {!Document} */
	        this._document = document;

	        /**
	         * All managed nodes known to this InertManager. In a map to allow looking up by Node.
	         * @type {!Map<!Node, !InertNode>}
	         */
	        this._managedNodes = new Map();

	        /**
	         * All inert roots known to this InertManager. In a map to allow looking up by Node.
	         * @type {!Map<!Node, !InertRoot>}
	         */
	        this._inertRoots = new Map();

	        /**
	         * Observer for mutations on `document.body`.
	         * @type {!MutationObserver}
	         */
	        this._observer = new MutationObserver(this._watchForInert.bind(this));

	        // Add inert style.
	        addInertStyle(document.head || document.body || document.documentElement);

	        // Wait for document to be loaded.
	        if (document.readyState === 'loading') {
	          document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));
	        } else {
	          this._onDocumentLoaded();
	        }
	      }

	      /**
	       * Set whether the given element should be an inert root or not.
	       * @param {!Element} root
	       * @param {boolean} inert
	       */


	      _createClass(InertManager, [{
	        key: 'setInert',
	        value: function setInert(root, inert) {
	          if (inert) {
	            if (this._inertRoots.has(root)) {
	              // element is already inert
	              return;
	            }

	            var inertRoot = new InertRoot(root, this);
	            root.setAttribute('inert', '');
	            this._inertRoots.set(root, inertRoot);
	            // If not contained in the document, it must be in a shadowRoot.
	            // Ensure inert styles are added there.
	            if (!this._document.body.contains(root)) {
	              var parent = root.parentNode;
	              while (parent) {
	                if (parent.nodeType === 11) {
	                  addInertStyle(parent);
	                }
	                parent = parent.parentNode;
	              }
	            }
	          } else {
	            if (!this._inertRoots.has(root)) {
	              // element is already non-inert
	              return;
	            }

	            var _inertRoot = this._inertRoots.get(root);
	            _inertRoot.destructor();
	            this._inertRoots['delete'](root);
	            root.removeAttribute('inert');
	          }
	        }

	        /**
	         * Get the InertRoot object corresponding to the given inert root element, if any.
	         * @param {!Node} element
	         * @return {!InertRoot|undefined}
	         */

	      }, {
	        key: 'getInertRoot',
	        value: function getInertRoot(element) {
	          return this._inertRoots.get(element);
	        }

	        /**
	         * Register the given InertRoot as managing the given node.
	         * In the case where the node has a previously existing inert root, this inert root will
	         * be added to its set of inert roots.
	         * @param {!Node} node
	         * @param {!InertRoot} inertRoot
	         * @return {!InertNode} inertNode
	         */

	      }, {
	        key: 'register',
	        value: function register(node, inertRoot) {
	          var inertNode = this._managedNodes.get(node);
	          if (inertNode !== undefined) {
	            // node was already in an inert subtree
	            inertNode.addInertRoot(inertRoot);
	          } else {
	            inertNode = new InertNode(node, inertRoot);
	          }

	          this._managedNodes.set(node, inertNode);

	          return inertNode;
	        }

	        /**
	         * De-register the given InertRoot as managing the given inert node.
	         * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert
	         * node from the InertManager's set of managed nodes if it is destroyed.
	         * If the node is not currently managed, this is essentially a no-op.
	         * @param {!Node} node
	         * @param {!InertRoot} inertRoot
	         * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.
	         */

	      }, {
	        key: 'deregister',
	        value: function deregister(node, inertRoot) {
	          var inertNode = this._managedNodes.get(node);
	          if (!inertNode) {
	            return null;
	          }

	          inertNode.removeInertRoot(inertRoot);
	          if (inertNode.destroyed) {
	            this._managedNodes['delete'](node);
	          }

	          return inertNode;
	        }

	        /**
	         * Callback used when document has finished loading.
	         */

	      }, {
	        key: '_onDocumentLoaded',
	        value: function _onDocumentLoaded() {
	          // Find all inert roots in document and make them actually inert.
	          var inertElements = slice.call(this._document.querySelectorAll('[inert]'));
	          inertElements.forEach(function (inertElement) {
	            this.setInert(inertElement, true);
	          }, this);

	          // Comment this out to use programmatic API only.
	          this._observer.observe(this._document.body || this._document.documentElement, { attributes: true, subtree: true, childList: true });
	        }

	        /**
	         * Callback used when mutation observer detects attribute changes.
	         * @param {!Array<!MutationRecord>} records
	         * @param {!MutationObserver} self
	         */

	      }, {
	        key: '_watchForInert',
	        value: function _watchForInert(records, self) {
	          var _this = this;
	          records.forEach(function (record) {
	            switch (record.type) {
	              case 'childList':
	                slice.call(record.addedNodes).forEach(function (node) {
	                  if (node.nodeType !== Node.ELEMENT_NODE) {
	                    return;
	                  }
	                  var inertElements = slice.call(node.querySelectorAll('[inert]'));
	                  if (matches.call(node, '[inert]')) {
	                    inertElements.unshift(node);
	                  }
	                  inertElements.forEach(function (inertElement) {
	                    this.setInert(inertElement, true);
	                  }, _this);
	                }, _this);
	                break;
	              case 'attributes':
	                if (record.attributeName !== 'inert') {
	                  return;
	                }
	                var target = /** @type {!Element} */record.target;
	                var inert = target.hasAttribute('inert');
	                _this.setInert(target, inert);
	                break;
	            }
	          }, this);
	        }
	      }]);

	      return InertManager;
	    }();

	    /**
	     * Recursively walk the composed tree from |node|.
	     * @param {!Node} node
	     * @param {(function (!Element))=} callback Callback to be called for each element traversed,
	     *     before descending into child nodes.
	     * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.
	     */


	    function composedTreeWalk(node, callback, shadowRootAncestor) {
	      if (node.nodeType == Node.ELEMENT_NODE) {
	        var element = /** @type {!Element} */node;
	        if (callback) {
	          callback(element);
	        }

	        // Descend into node:
	        // If it has a ShadowRoot, ignore all child elements - these will be picked
	        // up by the <content> or <shadow> elements. Descend straight into the
	        // ShadowRoot.
	        var shadowRoot = /** @type {!HTMLElement} */element.shadowRoot;
	        if (shadowRoot) {
	          composedTreeWalk(shadowRoot, callback);
	          return;
	        }

	        // If it is a <content> element, descend into distributed elements - these
	        // are elements from outside the shadow root which are rendered inside the
	        // shadow DOM.
	        if (element.localName == 'content') {
	          var content = /** @type {!HTMLContentElement} */element;
	          // Verifies if ShadowDom v0 is supported.
	          var distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];
	          for (var i = 0; i < distributedNodes.length; i++) {
	            composedTreeWalk(distributedNodes[i], callback);
	          }
	          return;
	        }

	        // If it is a <slot> element, descend into assigned nodes - these
	        // are elements from outside the shadow root which are rendered inside the
	        // shadow DOM.
	        if (element.localName == 'slot') {
	          var slot = /** @type {!HTMLSlotElement} */element;
	          // Verify if ShadowDom v1 is supported.
	          var _distributedNodes = slot.assignedNodes ? slot.assignedNodes({ flatten: true }) : [];
	          for (var _i = 0; _i < _distributedNodes.length; _i++) {
	            composedTreeWalk(_distributedNodes[_i], callback);
	          }
	          return;
	        }
	      }

	      // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>
	      // element, nor a <shadow> element recurse normally.
	      var child = node.firstChild;
	      while (child != null) {
	        composedTreeWalk(child, callback);
	        child = child.nextSibling;
	      }
	    }

	    /**
	     * Adds a style element to the node containing the inert specific styles
	     * @param {!Node} node
	     */
	    function addInertStyle(node) {
	      if (node.querySelector('style#inert-style, link#inert-style')) {
	        return;
	      }
	      var style = document.createElement('style');
	      style.setAttribute('id', 'inert-style');
	      style.textContent = '\n' + '[inert] {\n' + '  pointer-events: none;\n' + '  cursor: default;\n' + '}\n' + '\n' + '[inert], [inert] * {\n' + '  -webkit-user-select: none;\n' + '  -moz-user-select: none;\n' + '  -ms-user-select: none;\n' + '  user-select: none;\n' + '}\n';
	      node.appendChild(style);
	    }

	    if (!Element.prototype.hasOwnProperty('inert')) {
	      /** @type {!InertManager} */
	      var inertManager = new InertManager(document);

	      Object.defineProperty(Element.prototype, 'inert', {
	        enumerable: true,
	        /** @this {!Element} */
	        get: function get() {
	          return this.hasAttribute('inert');
	        },
	        /** @this {!Element} */
	        set: function set(inert) {
	          inertManager.setInert(this, inert);
	        }
	      });
	    }
	  })();

	})));
	});

	const blockingElements = document.$blockingElements;
	/**
	 * Allows an element to trap focus by applying the "inert" attribute to all sibling, aunt, and uncle nodes.
	 *
	 * Automatically handles consecutive calls with a loosely applied stack operation
	 * (specifically via `blockingElements`, with a small polyfill because I'm not sure how long
	 * it'll take to find its way into the spec, if ever)
	 * @param target
	 */
	function useBlockingElement(target) {
	    /**
	     * Push/pop the element from the blockingElements stack.
	     */
	    h(() => {
	        if (target) {
	            blockingElements.push(target);
	            return () => {
	                blockingElements.remove(target);
	            };
	        }
	    }, [target]);
	}
	function getTopElement() {
	    return blockingElements.top;
	}

	const elementsToRestoreFocusTo = new Map();
	function useFocusTrap({ trapActive }) {
	    const { element, useRefElementProps, getElement } = useRefElement();
	    const { getLastActiveElement } = useActiveElement();
	    // When the trap becomes active, before we let the blockingElements hook run,
	    // keep track of whatever's currently focused and save it.
	    h(() => {
	        if (trapActive && element) {
	            // Save the currently focused element
	            // to whatever's currently at the top of the stack
	            elementsToRestoreFocusTo.set(getTopElement(), getLastActiveElement() ?? document.body);
	        }
	    }, [trapActive, element]);
	    useBlockingElement(trapActive ? element : null);
	    /**
	     * Any time we activate or deactivate the trap,
	     * change focus to something else (something in
	     * the trap if it's active, or whatever we've
	     * tracked in elementsToRestoreFocusTo if not)
	     */
	    h(() => {
	        if (trapActive && element) {
	            let rafHandle = requestAnimationFrame(() => {
	                // TODO: This extra queueMicrotask is needed for
	                // ...reasons?
	                queueMicrotask(() => {
	                    findFirstFocusable(element)?.focus();
	                    rafHandle = 0;
	                });
	            });
	            return () => {
	                if (rafHandle)
	                    cancelAnimationFrame(rafHandle);
	            };
	        }
	        else if (element) {
	            // Restore the focus to the element
	            // that has returned to the top of the stack
	            let rafHandle = requestAnimationFrame(() => {
	                queueMicrotask(() => {
	                    elementsToRestoreFocusTo.get(getTopElement())?.focus();
	                    rafHandle = 0;
	                });
	            });
	            return () => {
	                if (rafHandle)
	                    cancelAnimationFrame(rafHandle);
	            };
	        }
	    }, [trapActive, element]);
	    const useFocusTrapProps = ((props) => {
	        return useMergedProps()({ "aria-modal": trapActive ? "true" : undefined }, useRefElementProps(props));
	    });
	    return {
	        useFocusTrapProps,
	        element,
	        getElement
	    };
	}
	/**
	 * Returns the first focusable element contained within the given node, or null if none are found.
	 * @param element
	 * @returns
	 */
	function findFirstFocusable(element) {
	    const treeWalker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, { acceptNode: (node) => (node instanceof Element && isFocusable(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP) });
	    const firstFocusable = treeWalker.firstChild();
	    return firstFocusable;
	}

	/**
	 * Allows attaching an event handler to any *non-Preact* element, and removing it when the component using the hook unmounts. The callback does not need to be stable across renders.
	 *
	 * Due to typing limitations, this function must be called like this:
	 *
	 * `useEventHandler(element, "input")<InputEvent>(e => {})`
	 *
	 * The type argument is optional, but narrows down the type from "a union of all events" to whatever you specify, and errors if it doesn't exist.
	 *
	 * There is a separate version that attaches event handlers to a set of props.
	 * It takes different event string types (onEvent vs onevent).
	 *
	 * @param target A *non-Preact* node to attach the event to.
	 * @returns
	 * *
	 */
	function useGlobalHandler(target, type, handler, options) {
	    // Note to self: The typing doesn't improve even if this is split up into a sub-function.
	    // No matter what, it seems impossible to get the handler's event object typed perfectly.
	    // It seems like it's guaranteed to always be a union of all available tupes.
	    // Again, no matter what combination of sub- or sub-sub-functions used.
	    const stableHandler = useStableCallback(handler ?? (() => { }));
	    y(() => {
	        target.addEventListener(type, stableHandler, options);
	        return () => target.removeEventListener(type, stableHandler, options);
	    }, [target, type, stableHandler]);
	}

	/**
	 * A generic modal hook, used by modal dialogs, but can also
	 * be used by anything that's modal with a backdrop.
	 * @param param0
	 * @returns
	 */
	function useAriaModal({ open, onClose }) {
	    const [modalDescribedByBody, setModalDescribedByBody] = useState(false);
	    useHideScroll(open);
	    const { id: modalId, useRandomIdProps: useModalIdProps, useReferencedIdProps: useModalReferencingIdProps } = useRandomId({ prefix: "aria-modal-" });
	    const { id: bodyId, useRandomIdProps: useBodyIdProps, useReferencedIdProps: useBodyReferencingIdProps } = useRandomId({ prefix: "aria-modal-body-" });
	    const { id: titleId, useRandomIdProps: useTitleIdProps, useReferencedIdProps: useTitleReferencingIdProps } = useRandomId({ prefix: "aria-modal-title-" });
	    // Since everything else is inert, we listen for captured clicks on the window
	    // (we also use pointerdown instead of onClick since that doesn't fire on non-elements)
	    useGlobalHandler(window, "pointerdown", (e) => {
	        if (e.target == document.documentElement || !(modalId && e.target instanceof Element && document.getElementById(modalId)?.contains(e.target))) {
	            onClose("backdrop");
	        }
	    }, { capture: true });
	    const onKeyDown = (e) => {
	        if (e.key === "Escape") {
	            onClose("escape");
	        }
	    };
	    const useModalBackdrop = A$1(function useModalBackdrop() {
	        function useModalBackdropProps(props) {
	            return useMergedProps()({}, props);
	        }
	        return { useModalBackdropProps };
	    }, []);
	    const useModalProps = function ({ "aria-modal": ariaModal, role, ...p0 }) {
	        const { useFocusTrapProps } = useFocusTrap({ trapActive: open });
	        const p1 = useTitleReferencingIdProps("aria-labelledby")(p0);
	        const p2 = useModalIdProps(p1);
	        const pFinal = useBodyReferencingIdProps("aria-describedby")(p2);
	        return useFocusTrapProps(useMergedProps()({ role: "dialog", onKeyDown }, modalDescribedByBody ? pFinal : p2));
	    };
	    const useModalTitle = A$1(function useModalTitle() {
	        const useModalTitleProps = function (props) {
	            return useTitleIdProps(props);
	        };
	        return { useModalTitleProps };
	    }, []);
	    const useModalBody = A$1(function useModalBody({ descriptive }) {
	        setModalDescribedByBody(descriptive);
	        const useModalBodyProps = function (props) {
	            return useBodyIdProps(props);
	        };
	        return { useModalBodyProps };
	    }, []);
	    return {
	        useModalProps,
	        useModalTitle,
	        useModalBody,
	        useModalBackdrop
	    };
	}
	/**
	 * Allows for hiding the scroll bar of the root HTML element
	 * without shifting the layout of the page more than adding a fow pixels
	 * of padding to the root element if necessary.
	 * @param hideScroll
	 */
	function useHideScroll(hideScroll) {
	    const [scrollbarWidth, setScrollbarWidth, getScrollbarWidth] = useState(null);
	    y(() => {
	        if (hideScroll) {
	            let widthWithScrollBar = document.documentElement.scrollWidth;
	            document.documentElement.classList.add("document-scroll-hidden");
	            document.documentElement.dataset["scrollHiders"] = (+(document.documentElement.dataset["scrollHiders"] || "0") + 1).toString();
	            let widthWithoutScrollBar = document.documentElement.scrollWidth;
	            let scrollbarWidth = (widthWithoutScrollBar - widthWithScrollBar);
	            // Failsafe -- if this measuring trick does something unexpected, just ignore it
	            if (scrollbarWidth > 80)
	                scrollbarWidth = 0;
	            document.documentElement.style.setProperty("--scrollbar-width", `${scrollbarWidth}px`);
	            setScrollbarWidth(scrollbarWidth);
	            return () => {
	                document.documentElement.dataset["scrollHiders"] = (+(document.documentElement.dataset["scrollHiders"] || "0") - 1).toString();
	                if (document.documentElement.dataset["scrollHiders"] == "0") {
	                    document.documentElement.removeAttribute("data-scroll-hiders");
	                    document.documentElement.classList.remove("document-scroll-hidden");
	                }
	            };
	        }
	    }, [hideScroll]);
	    return { scrollbarWidth, getScrollbarWidth };
	}

	function useAriaDialog({ open, onClose }) {
	    // TODO: Differences between dialog and modal go here, presumably
	    const { useModalBackdrop, useModalBody, useModalProps, useModalTitle } = useAriaModal({ open, onClose });
	    return {
	        useDialogProps: useModalProps,
	        useDialogTitle: useModalTitle,
	        useDialogBody: useModalBody,
	        useDialogBackdrop: useModalBackdrop
	    };
	}

	function useHasFocus({} = {}) {
	    //const [focusedElement, setFocusedElement, getFocusedElement] = useState<EventTarget | null>(null);
	    //const [focused, setFocused] = useState(false);
	    //const [focusedInner, setFocusedInner] = useState(false);
	    const { element, getElement, useRefElementProps } = useRefElement();
	    const { activeElement, lastActiveElement } = useActiveElement();
	    const useHasFocusProps = A$1((props) => {
	        return useRefElementProps(props);
	    }, []);
	    const focused = d(() => { return element == activeElement; }, [element, activeElement]);
	    const focusedInner = d(() => { return element?.contains(activeElement) ?? false; }, [element, activeElement]);
	    const lastFocused = d(() => { return element == lastActiveElement; }, [element, lastActiveElement]);
	    const lastFocusedInner = d(() => { return element?.contains(lastActiveElement) ?? false; }, [element, lastActiveElement]);
	    return {
	        useHasFocusProps,
	        focusedElement: activeElement,
	        lastFocusedElement: lastActiveElement,
	        focused,
	        focusedInner,
	        lastFocused,
	        lastFocusedInner
	    };
	}

	/**
	 * Implements a roving tabindex system where only one "focusable"
	 * component in a set is able to receive a tab focus. *Which*
	 * of those elements receives focus is determined by you, but it's
	 * recommended to offload that logic then to another hook, like
	 * `useLinearNavigation`, which lets you change the tabbable
	 * element with the arrow keys, `useTypeaheadNavigation`, which
	 * lets you change the tabbable index with typeahead, or
	 * `useListNavigation` if you just want everything bundled together.
	 *
	 * Note that the child hook returned by this function must be used
	 * by every child that uses this roving tabindex logic.  The
	 * prop-modifying hook *that* hook returns should then be used
	 * on the child's element, as well as any other elements you'd like
	 * to be explicitly made untabbable too.
	 */
	function useRovingTabIndex({ tabbableIndex }) {
	    const { focused, focusedInner, useHasFocusProps } = useHasFocus();
	    const getTabbableIndex = useStableGetter(tabbableIndex);
	    // Keep track of three things related to the currently tabbable element's index:
	    // What it is,
	    // What it was the last time,
	    // Whether, when we render this component and it's changed, to also focus the element that was made tabbable.
	    // For this reason, boolean | null is semantically intentional, if technically unnecessary -- 
	    // true or false imply a change just happened and that tabbableIndex != prevTabbable.current, and null implies no change.
	    //const [tabbableIndex, setTabbableIndex, getTabbableIndex] = useState(0);
	    const prevTabbable = s(-Infinity);
	    // Call the hook that allows us to collect information from children who provide it
	    const { managedChildren, useManagedChild, indicesByElement } = useChildManager();
	    const childCount = managedChildren.length;
	    // Doesn't do anything, but here because there's a pretty decent chance it might in the future.
	    const useRovingTabIndexProps = A$1((props) => useMergedProps()(useHasFocusProps({}), props), []);
	    const focusOnChange = (focusedInner != false);
	    // Any time the tabbable index changes,
	    // notify the previous child that it's no longer tabbable,
	    // and notify the next child that is allowed to be tabbed to.
	    useLayoutEffect(() => {
	        if (tabbableIndex != prevTabbable.current) {
	            if (managedChildren[tabbableIndex]) {
	                managedChildren[prevTabbable.current]?.setTabbable(false, undefined);
	                managedChildren[tabbableIndex].setTabbable(true, focusOnChange ? "focus" : undefined);
	                prevTabbable.current = tabbableIndex;
	            }
	        }
	    }, [tabbableIndex, focusOnChange]);
	    const focusSelf = A$1(() => {
	        managedChildren[tabbableIndex].setTabbable(true, "focus");
	    }, [tabbableIndex]);
	    const useRovingTabIndexChild = A$1((info) => {
	        const setTabbable = A$1((tabbable, shouldFocus) => {
	            setTabbable2(tabbable);
	            if (tabbable && shouldFocus)
	                setShouldFocus(!!shouldFocus);
	        }, []);
	        let newInfo = {
	            ...info,
	            setTabbable
	        };
	        const { element, getElement, useManagedChildProps } = useManagedChild(newInfo);
	        const [tabbable, setTabbable2] = useState(getTabbableIndex() == info.index);
	        const [shouldFocus, setShouldFocus] = useState(false);
	        function useRovingTabIndexSiblingProps({ tabIndex, ...props }) {
	            if (tabIndex == null) {
	                if (tabbable)
	                    tabIndex = 0;
	                else
	                    tabIndex = -1;
	            }
	            return useMergedProps()({ tabIndex }, props);
	        }
	        function useRovingTabIndexChildProps({ tabIndex, ...props }) {
	            //const { element, useRefElementProps } = useRefElement<ChildElement>();
	            useLayoutEffect(() => {
	                if (element && shouldFocus && "focus" in element) {
	                    requestAnimationFrame(() => {
	                        queueMicrotask(() => {
	                            element.focus();
	                        });
	                    });
	                    setShouldFocus(false);
	                }
	            }, [element, shouldFocus]);
	            if (tabIndex == null) {
	                if (tabbable)
	                    tabIndex = 0;
	                else
	                    tabIndex = -1;
	            }
	            return useMergedProps()(useManagedChildProps({ tabIndex }), props);
	        }
	        return {
	            useRovingTabIndexChildProps,
	            useRovingTabIndexSiblingProps,
	            tabbable
	        };
	    }, [useManagedChild]);
	    return {
	        useRovingTabIndexProps,
	        useRovingTabIndexChild,
	        childCount,
	        managedChildren,
	        indicesByElement,
	        focusSelf
	    };
	}

	/**
	 * Implements proper keyboard navigation for components like listboxes, button groups, menus, etc.
	 *
	 * In the document order, there will be only one "focused" or "tabbable" element, making it act more like one complete unit in comparison to everything around it.
	 * Navigating forwards/backwards can be done with the arrow keys, Home/End keys, or any any text for typeahead to focus the next item that matches.
	 */
	function useListNavigation({ collator, keyNavigation }) {
	    keyNavigation ??= "either";
	    // Keep track of three things related to the currently tabbable element's index:
	    // What it is, and whether, when we render this component and it's changed, to also focus the element that was made tabbable.
	    const [tabbableIndex, setTabbableIndex, getTabbableIndex] = useState(0);
	    const setIndex = A$1((index) => {
	        setTabbableIndex(index);
	    }, []);
	    const { childCount, managedChildren, indicesByElement, useRovingTabIndexProps, useRovingTabIndexChild, focusSelf } = useRovingTabIndex({ tabbableIndex: tabbableIndex });
	    const { currentTypeahead, invalidTypeahead, useTypeaheadNavigationChild, useTypeaheadNavigationProps } = useTypeaheadNavigation({ collator, getIndex: getTabbableIndex, setIndex, typeaheadTimeout: 1000 });
	    const { navigateToEnd, navigateToIndex, navigateToNext, navigateToPrev, navigateToStart, useLinearNavigationChild, useLinearNavigationProps } = useLinearNavigation({ getIndex: getTabbableIndex, setIndex, managedChildren });
	    // Any time the tabbable index changes, notify the previous
	    // and next child as such, and optionally focus that next one.
	    /*useLayoutEffect(([prevTabbableIndex]) => {
	        console.log(`Notifying children of index change from ${prevTabbableIndex} to ${tabbableIndex}`);
	        managedChildren[prevTabbableIndex]?.setTabbable(false);
	        managedChildren[tabbableIndex]?.setTabbable(true)
	    }, [tabbableIndex])*/
	    const useListNavigationProps = function (props) {
	        const p1 = useLinearNavigationProps(props);
	        const p2 = useTypeaheadNavigationProps(p1);
	        let ret = useRovingTabIndexProps(p2);
	        return ret;
	    };
	    const useListNavigationChild = A$1((info) => {
	        const { useTypeaheadNavigationChildProps } = useTypeaheadNavigationChild(info);
	        const { useLinearNavigationChildProps } = useLinearNavigationChild();
	        const { useRovingTabIndexChildProps, useRovingTabIndexSiblingProps, tabbable } = useRovingTabIndexChild(info);
	        const useListNavigationChildProps = function ({ ...props }) {
	            return useMergedProps()(useRovingTabIndexChildProps(useTypeaheadNavigationChildProps(useLinearNavigationChildProps({ onClick: roveToSelf }))), props);
	        };
	        const roveToSelf = A$1(() => { navigateToIndex(info.index); }, []);
	        return {
	            useListNavigationChildProps,
	            useListNavigationSiblingProps: useRovingTabIndexSiblingProps,
	            tabbable,
	            //roveToSelf,
	            //element
	        };
	    }, [useTypeaheadNavigationChild, useLinearNavigationChild, useRovingTabIndexChild, navigateToIndex]);
	    return {
	        useListNavigationProps,
	        useListNavigationChild,
	        currentTypeahead,
	        invalidTypeahead,
	        tabbableIndex,
	        setTabbableIndex,
	        managedChildren,
	        indicesByElement,
	        navigateToIndex,
	        navigateToNext,
	        navigateToPrev,
	        navigateToStart,
	        navigateToEnd,
	        focusSelf
	    };
	}

	/**
	 * Adds an ID and "aria-labelledby" for two elements, an "input" element and a "label" element.
	 *
	 * Returns the `useReferencedIdProps` hooks if you need to also add other ID-referencing attributes, like `for`
	 *
	 * @see useInputLabel
	 */
	function useGenericLabel({ labelPrefix, inputPrefix, backupText } = { labelPrefix: "label-", inputPrefix: "input-" }) {
	    const { element: labelElement, getElement: getLabelElement, useRefElementProps: useLabelRefElementProps } = useRefElement();
	    const { element: inputElement, getElement: getInputElement, useRefElementProps: useInputRefElementProps } = useRefElement();
	    const { useRandomIdProps: useLabelRandomIdProps, id: labelId, randomId: labelRandomId, useReferencedIdProps: useReferencedLabelIdProps } = useRandomId({ prefix: labelPrefix });
	    const { useRandomIdProps: useInputRandomIdProps, id: inputId, randomId: inputRandomId, useReferencedIdProps: useReferencedInputIdProps } = useRandomId({ prefix: inputPrefix });
	    const labelHasMounted = !!(labelElement);
	    const useGenericLabelLabel = A$1(function useGenericLabelLabel() {
	        return {
	            useGenericLabelLabelProps: (props) => { return useLabelRandomIdProps(useLabelRefElementProps(props)); }
	        };
	    }, []);
	    const useGenericLabelInput = A$1(function useGenericLabelInput() {
	        return {
	            useGenericLabelInputProps: ({ "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel, ...props }) => {
	                return (useInputRandomIdProps(useReferencedLabelIdProps("aria-labelledby")(useInputRefElementProps(useMergedProps()({ "aria-label": (!labelHasMounted ? backupText : ariaLabel) ?? ariaLabel }, props)))));
	            }
	        };
	    }, [labelHasMounted]);
	    return {
	        useGenericLabelInput,
	        useGenericLabelLabel,
	        useReferencedLabelIdProps,
	        useReferencedInputIdProps,
	        labelId,
	        inputId,
	        labelElement,
	        inputElement,
	        getLabelElement,
	        getInputElement,
	    };
	}
	/**
	 * Handles the attributes `id`, `for`, and `aria-labelledby` for to related elements.
	 *
	 * It's assumed that the label is an `HTMLLabelElement`, and the input is something for which
	 * the `for` attribute can reference.
	 *
	 */
	function useInputLabel({ labelPrefix, inputPrefix } = { labelPrefix: "label-", inputPrefix: "input-" }) {
	    const { useGenericLabelInput, useGenericLabelLabel, useReferencedInputIdProps, useReferencedLabelIdProps, inputId, labelId, inputElement, getInputElement, labelElement, getLabelElement } = useGenericLabel({ labelPrefix, inputPrefix });
	    const useInputLabelLabel = A$1(function useInputLabelLabel({ tag }) {
	        const { useGenericLabelLabelProps } = useGenericLabelLabel();
	        return {
	            useInputLabelLabelProps(props) {
	                const withFor = useReferencedInputIdProps("for")(props);
	                const withoutFor = props;
	                return useGenericLabelLabelProps(tag == "label" ? withFor : withoutFor);
	            }
	        };
	    }, [useGenericLabelInput]);
	    const useInputLabelInput = A$1(function useInputLabelInput() {
	        const { useGenericLabelInputProps } = useGenericLabelInput();
	        return {
	            useInputLabelInputProps(props) {
	                return useGenericLabelInputProps(props);
	            }
	        };
	    }, [useGenericLabelLabel]);
	    return {
	        useInputLabelLabel,
	        useInputLabelInput,
	        labelId,
	        inputId,
	        inputElement,
	        labelElement,
	        getInputElement,
	        getLabelElement
	    };
	}
	/**
	 * Handles label type (wrapping or separate) for checkboxes, radios, switches, etc.
	 * @param param0
	 * @returns
	 */
	function useCheckboxLike({ disabled, labelPosition, onInput, role }) {
	    const stableOnInput = useStableCallback(onInput);
	    const { inputId, labelId, useInputLabelInput: useILInput, useInputLabelLabel: useILLabel, getLabelElement, getInputElement } = useInputLabel({ labelPrefix: "aria-checkbox-label-", inputPrefix: "aria-checkbox-input-" });
	    const useCheckboxLikeInputElement = A$1(function useCheckboxInputElement({ tag }) {
	        const { useInputLabelInputProps: useILInputProps } = useILInput();
	        const { element, useRefElementProps } = useRefElement();
	        return { inputElement: element, useCheckboxLikeInputElementProps };
	        function useCheckboxLikeInputElementProps({ ...p0 }) {
	            let props = useButtonLikeEventHandlers(stableOnInput, disabled ? "exclude" : tag != "input" || labelPosition == "wrapping" ? undefined : "exclude")({});
	            if (tag == "input" && labelPosition == "separate") {
	                if (!disabled) {
	                    if (role != "radio")
	                        props.onInput = stableOnInput;
	                    else {
	                        // For some reason, Chrome won't fire onInput events for radio buttons that are tabIndex=-1??
	                        // Needs investigating, but onInput works fine in Firefox
	                        // TODO
	                        props.onClick = stableOnInput;
	                    }
	                }
	            }
	            props = useRefElementProps(useILInputProps(props));
	            if (labelPosition == "wrapping") {
	                // Because the wrapped label handles all interactions,
	                // we need to make sure this element can't be interacted with
	                // even if it's an input element.
	                props.inert = true;
	                props.tabIndex = -1;
	                props.onFocus = e => getLabelElement().focus();
	            }
	            else {
	                if (tag != "input") {
	                    props.role = role;
	                    props.tabIndex = 0;
	                }
	                props["aria-disabled"] = disabled.toString();
	            }
	            return useMergedProps()(p0, props);
	        }
	    }, [useILInput, role, labelPosition, disabled]);
	    const useCheckboxLikeLabelElement = A$1(function useCheckboxLabelElement({ tag }) {
	        const { useInputLabelLabelProps: useILLabelProps } = useILLabel({ tag });
	        function useCheckboxLikeLabelElementProps({ ...p0 }) {
	            let newProps = useButtonLikeEventHandlers(stableOnInput, disabled || (labelPosition == "separate" && tag == "label") ? "exclude" : undefined)({});
	            if (labelPosition == "wrapping") {
	                newProps.tabIndex = 0;
	                newProps.role = role;
	                newProps["aria-disabled"] = disabled.toString();
	            }
	            return useMergedProps()(newProps, useILLabelProps(p0));
	        }
	        return { useCheckboxLikeLabelElementProps };
	    }, [useILLabel, role, labelPosition]);
	    return {
	        useCheckboxLikeInputElement,
	        useCheckboxLikeLabelElement,
	        getLabelElement,
	        getInputElement
	    };
	}

	function useAriaCheckbox({ labelPosition, checked, onInput, disabled }) {
	    const onInputEnhanced = (e) => onInput(enhanceEvent(e, { checked: !checked }));
	    const { getInputElement, getLabelElement, useCheckboxLikeInputElement, useCheckboxLikeLabelElement } = useCheckboxLike({ labelPosition, role: "checkbox", disabled, onInput: onInputEnhanced });
	    const useCheckboxInputElement = A$1(function useCheckboxInputElement({ tag }) {
	        const { inputElement, useCheckboxLikeInputElementProps } = useCheckboxLikeInputElement({ tag });
	        const isMixed = (checked == "mixed");
	        h(() => {
	            if (inputElement) {
	                if (tag === "input") {
	                    inputElement.indeterminate = isMixed;
	                }
	            }
	        }, [inputElement, isMixed, tag]);
	        return { useCheckboxInputElementProps };
	        function useCheckboxInputElementProps({ ...p0 }) {
	            let props = useCheckboxLikeInputElementProps(p0);
	            props.checked ??= !!checked;
	            if (labelPosition == "separate") {
	                props["aria-checked"] = checked.toString();
	                if (tag != "input")
	                    props.tabIndex = 0;
	            }
	            return props;
	        }
	    }, [checked, labelPosition, disabled]);
	    const useCheckboxLabelElement = A$1(function useCheckboxLabelElement({ tag }) {
	        const { useCheckboxLikeLabelElementProps } = useCheckboxLikeLabelElement({ tag });
	        function useCheckboxLabelElementProps({ ...props }) {
	            if (labelPosition == "wrapping") {
	                props["aria-checked"] = checked.toString();
	                if (tag != "input")
	                    props.tabIndex = 0;
	            }
	            return useCheckboxLikeLabelElementProps(props);
	        }
	        return { useCheckboxLabelElementProps };
	    }, [useCheckboxLikeLabelElement, disabled, labelPosition]);
	    return {
	        useCheckboxInputElement,
	        useCheckboxLabelElement
	    };
	}
	/*
	export interface TriStateChildInfo<T extends number | string> extends ManagedChildInfo<T> {
	    notifyParent(checked: boolean | "mixed"): void;
	    setChecked(checked: boolean | "mixed"): void;
	}

	export function useTriStateCheckbox<E extends Element, I extends TriStateChildInfo<any>>(args: Omit<UseAriaCheckboxParameters, "checked" | "onInput">) {
	    const [lastState, setLastState] = useState<"none" | "all" | "mixed">("none"); // Reflects what we've last clicked, not what we're displaying due to child changes.
	    const [checkedCount, setCheckedCount] = useState<number>(0);
	    const { managedChildren, useManagedChild } = useChildManager<E, I>();
	    const mixedState = useRef<Map<number, { checked: boolean | "mixed", setChecked(checked: boolean | "mixed"): void }>>(new Map());
	    const checked = checkedCount == 0 ? false : (checkedCount == managedChildren.length ? true : "mixed");
	    const { useAriaCheckboxInput, useAriaCheckboxLabel } = useAriaCheckbox({ ...args, checked, onInput });


	    function onInput(checked: boolean, e: h.JSX.TargetedEvent<E>) {

	    }



	    const useTriStateCheckboxChild = useCallback(function useTriStateCheckboxChild(args: Omit<I, "notifyParent">) {

	        function notifyParent(checked: boolean | "mixed") {
	            mixedState.current.set(args.index, { checked, setChecked: args.setChecked });
	            setCheckedCount(c => c += (!!checked ? 1 : -1));

	            if (lastState == "none" && !!checked) {
	                setLastState("mixed");
	                mixedState.current.clear();
	            }
	            else if (lastState == "all" && !checked) {
	                setLastState("mixed");
	                for (let managedChild of managedChildren) {
	                    managedChild.setChecked(true);
	                }
	            }
	        }

	        const nothing = useManagedChild({ ...args, notifyParent } as I)


	    }, []);

	    return { useTriStateCheckboxProps, useTriStateCheckboxChild };

	    function useTriStateCheckboxProps<P extends h.JSX.HTMLAttributes<E>>(props: P) { return useAriaCheckbox }

	}
	*/

	function useAriaListboxSingle({ selectedIndex, onSelect, selectionMode, ...args }) {
	    const { useGenericLabelInput, useGenericLabelLabel, useReferencedInputIdProps, useReferencedLabelIdProps, inputElement } = useGenericLabel({ labelPrefix: "aria-listbox-label-", inputPrefix: "aria-listbox-" });
	    const { useListNavigationChild, useListNavigationProps, navigateToIndex, managedChildren, setTabbableIndex, ...listRest } = useListNavigation(args);
	    useStableCallback(onSelect);
	    const { useGenericLabelInputProps } = useGenericLabelInput();
	    useLayoutEffect(([prevSelectedIndex]) => {
	        navigateToIndex(selectedIndex);
	        managedChildren[prevSelectedIndex]?.setSelected(false);
	        managedChildren[selectedIndex]?.setSelected(true);
	    }, [selectedIndex, managedChildren.length]);
	    const childCount = managedChildren.length;
	    const { lastActiveElement } = useActiveElement();
	    let anyRadiosFocused = (!!inputElement?.contains(lastActiveElement));
	    y(() => {
	        if (!anyRadiosFocused)
	            setTabbableIndex(selectedIndex);
	    }, [anyRadiosFocused, selectedIndex, setTabbableIndex]);
	    //const { getSyncHandler, ...asyncInfo } = useAsyncHandler<E>()({ capture: (e: Event) => indicesByElement.get(e.target!) ?? -1 });
	    //const onSelect = getSyncHandler(asyncInfo.pending ? null : asyncOnSelect);
	    const useListboxSingleItem = A$1((info) => {
	        const [selected, setSelected, getSelected] = useState(false);
	        const { tabbable, useListNavigationSiblingProps, useListNavigationChildProps } = useListNavigationChild({ setSelected, ...info });
	        const { element, useRefElementProps } = useRefElement();
	        const index = info.index;
	        y(() => {
	            if (element && tabbable && selectionMode == "focus") {
	                onSelect?.({ target: element, currentTarget: element, [EventDetail]: { selectedIndex: index } });
	            }
	        }, [element, tabbable, selectionMode, index]);
	        return { useListboxSingleItemProps, tabbable, selected, getSelected };
	        function useListboxSingleItemProps(props) {
	            const newProps = useButtonLikeEventHandlers((e) => {
	                navigateToIndex(info.index);
	                if (element)
	                    onSelect?.({ target: element, currentTarget: element, [EventDetail]: { selectedIndex: index } });
	                e.preventDefault();
	            })({});
	            props.role = "option";
	            props["aria-setsize"] = (childCount).toString();
	            props["aria-posinset"] = (info.index + 1).toString();
	            props["aria-selected"] = selected.toString();
	            return useListNavigationChildProps(useMergedProps()(newProps, useRefElementProps(props)));
	        }
	    }, [useListNavigationChild, selectionMode, childCount]);
	    const useListboxSingleLabel = A$1(function useListboxSingleLabel() {
	        function useListboxSingleLabelProps(props) {
	            const { useGenericLabelLabelProps } = useGenericLabelLabel();
	            useGenericLabelLabelProps(props);
	        }
	        return { useListboxSingleLabelProps };
	    }, [useGenericLabelLabel]);
	    return { useListboxSingleItem, useListboxSingleProps, useListboxSingleLabel, ...listRest };
	    function useListboxSingleProps(props) {
	        props.role = "listbox";
	        return useListNavigationProps(useGenericLabelInputProps(props));
	    }
	}
	function useAriaListboxMulti({ ...args }) {
	    const { useGenericLabelInput, useGenericLabelLabel, useReferencedInputIdProps, useReferencedLabelIdProps } = useGenericLabel({ labelPrefix: "aria-listbox-label-", inputPrefix: "aria-listbox-" });
	    const { useListNavigationChild, useListNavigationProps, navigateToIndex, managedChildren, currentTypeahead, ...listRest } = useListNavigation(args);
	    const { useGenericLabelInputProps } = useGenericLabelInput();
	    const childCount = managedChildren.length;
	    const [shiftHeld, setShiftHeld, getShiftHeld] = useState(false);
	    const typeaheadInProgress = (!!currentTypeahead);
	    y(() => {
	        for (let i = 0; i < childCount; ++i) {
	            managedChildren[i].setTypeaheadInProgress(typeaheadInProgress);
	        }
	    }, [typeaheadInProgress, childCount]);
	    const useListboxMultiItem = A$1((info) => {
	        const selected = info.selected;
	        //const onSelectAsync = info.onSelect;
	        const [typeaheadInProgress, setTypeaheadInProgress] = useState(false);
	        const getSelected = useStableGetter(selected);
	        const stableOnSelect = useStableCallback(info.onSelect);
	        const { element, useRefElementProps } = useRefElement();
	        //const { getSyncHandler, ...asyncInfo } = useAsyncHandler<E>()({ capture: e => !selected });
	        //const onSelect = getSyncHandler(asyncInfo.pending ? null : (onSelectAsync ?? null));
	        const { tabbable, useListNavigationSiblingProps, useListNavigationChildProps } = useListNavigationChild({ ...info, setTypeaheadInProgress });
	        useLayoutEffect(() => {
	            if (element && getShiftHeld()) {
	                stableOnSelect({ target: element, currentTarget: element, [EventDetail]: { selected: true } });
	            }
	        }, [element, tabbable]);
	        return { useListboxMultiItemProps, tabbable };
	        function useListboxMultiItemProps(props) {
	            const newProps = useButtonLikeEventHandlers((e) => {
	                //const event = e as any as ({ selected: boolean } & Pick<h.JSX.TargetedEvent<Element>, "target" | "currentTarget">);
	                navigateToIndex(info.index);
	                //event.selected = !getSelected();
	                stableOnSelect?.({ ...e, [EventDetail]: { selected: !getSelected() } });
	                //stableOnSelect?.(event);
	                e.preventDefault();
	            }, {
	                space: typeaheadInProgress ? "exclude" : undefined
	            })({});
	            props.role = "option";
	            props["aria-setsize"] = (childCount).toString();
	            props["aria-posinset"] = (info.index + 1).toString();
	            props["aria-selected"] = tabbable.toString();
	            return useRefElementProps(useListNavigationChildProps(useMergedProps()(newProps, props)));
	        }
	    }, [useListNavigationChild, childCount, typeaheadInProgress]);
	    const useListboxMultiLabel = A$1(function useListboxMultiLabel() {
	        function useListboxMultiLabelProps(props) {
	            const { useGenericLabelLabelProps } = useGenericLabelLabel();
	            return useGenericLabelLabelProps(props);
	        }
	        return { useListboxMultiLabelProps };
	    }, [useGenericLabelLabel]);
	    return { useListboxMultiItem, useListboxMultiProps, useListboxMultiLabel, currentTypeahead, ...listRest };
	    function useListboxMultiProps(props) {
	        props.role = "listbox";
	        props["aria-multiselectable"] = "true";
	        return useListNavigationProps(useGenericLabelInputProps(useMergedProps()({ onKeyDown, onKeyUp, onBlur }, props)));
	    }
	    function onKeyDown(e) { if (e.key == "Shift")
	        setShiftHeld(true); }
	    function onKeyUp(e) { if (e.key == "Shift")
	        setShiftHeld(false); }
	    function onBlur(e) { setShiftHeld(false); }
	}

	function r() {
	    requestAnimationFrame(r);
	}
	requestAnimationFrame(r);
	function useAriaMenu({ collator, keyNavigation, noTypeahead, noWrap, typeaheadTimeout, ...args }) {
	    const [focusTrapActive, setFocusTrapActive] = l(false);
	    let onClose = args.onClose;
	    let onOpen = args.onOpen;
	    let menubar = args.menubar;
	    let open = (menubar ? true : args.open);
	    const stableOnClose = useStableCallback(onClose ?? (() => { }));
	    const { managedChildren, useListNavigationChild, useListNavigationProps, tabbableIndex, focusSelf: focusMenu } = useListNavigation({ collator, keyNavigation, noTypeahead, noWrap, typeaheadTimeout });
	    const { useRandomIdProps: useMenuIdProps, useReferencedIdProps: useMenuIdReferencingProps } = useRandomId({ prefix: "aria-menu-" });
	    const [openerElement, setOpenerElement] = l(null);
	    // TODO: It's awkward that the button focus props are out here where we don't have its type,
	    // but focus management is super sensitive, and even waiting for a useLayoutEffect to sync state here
	    // would be too late, so it would look like there's a moment between menu focus lost and button focus gained
	    // where nothing is focused. 
	    const { focusedInner: menuHasFocus, useHasFocusProps: useMenuHasFocusProps, } = useHasFocus();
	    const { focusedInner: buttonHasFocus, useHasFocusProps: useButtonHasFocusProps } = useHasFocus();
	    const { activeElement, lastActiveElement, windowFocused } = useActiveElement();
	    const { useFocusTrapProps } = useFocusTrap({ trapActive: open });
	    y(() => {
	        setFocusTrapActive(open);
	    }, [open]);
	    y(() => {
	        if (focusTrapActive)
	            focusMenu();
	        else
	            openerElement?.focus();
	    }, [focusTrapActive]);
	    // Focus management is really finicky, and there's always going to be 
	    // an edge case where nothing's focused for two consecutive frames 
	    // on iOS or whatever, which would immediately close the menu 
	    // any time it's been opened. So any time it *looks* like we should close,
	    // try waiting 100ms. If it's still true then, then yeah, we should close.
	    let shouldClose = (focusTrapActive && windowFocused && !menuHasFocus && !buttonHasFocus);
	    useTimeout({
	        timeout: 100,
	        callback: () => {
	            if (shouldClose) {
	                onClose?.();
	            }
	        },
	        triggerIndex: `${shouldClose}`
	    });
	    // A menu sentinal is a hidden but focusable element that comes at the start or end of the element
	    // that, when activated or focused over, closes the menu.
	    // (if focused within 100ms of the open prop changing, instead of
	    // closing the menu, focusing the sentinel immediately asks the menu to focus itself).
	    // This exists because while mouse users can click out of a menu
	    // and keyboard users can escape to close the menu,
	    // screen readers and other input methods that don't use those two become stuck.
	    const useMenuSentinel = A$1(() => {
	        const [firstSentinelIsActive, setFirstSentinelIsActive] = l(false);
	        useTimeout({ callback: () => { setFirstSentinelIsActive(open); }, timeout: 100, triggerIndex: `${firstSentinelIsActive}` });
	        const onFocus = firstSentinelIsActive ? (() => stableOnClose()) : (() => focusMenu());
	        const onClick = () => stableOnClose();
	        return {
	            useMenuSentinelProps: function (p) {
	                return useMergedProps()({ onFocus, onClick }, p);
	            }
	        };
	    }, [open]);
	    const useMenuButton = A$1(({ tag }) => {
	        const { element, getElement, useRefElementProps } = useRefElement();
	        useLayoutEffect(() => { setOpenerElement(element); }, [element]);
	        return {
	            useMenuButtonProps: function (p) {
	                let props = useRefElementProps(useMergedProps()({ onClick: () => { return open ? onClose?.() : onOpen?.(); } }, useMenuIdReferencingProps("aria-controls")(useButtonHasFocusProps(p))));
	                props["aria-haspopup"] = "menu";
	                props["aria-expanded"] = open ? "true" : undefined;
	                return props;
	            }
	        };
	    }, [open, onClose, onOpen, useMenuIdReferencingProps]);
	    const useMenuSubmenuItem = A$1((args) => {
	        const { useMenuProps, useMenuButton } = useAriaMenu(args);
	        const { useMenuButtonProps } = useMenuButton({ tag: "li" });
	        const { element, getElement, useRefElementProps } = useRefElement();
	        useLayoutEffect(() => { setOpenerElement(element); }, [element]);
	        return {
	            element,
	            getElement,
	            useMenuProps,
	            useMenuSubmenuItemProps: function ({ ...props }) {
	                props.role = "menuitem";
	                return useRefElementProps(useMenuButtonProps(useMenuIdReferencingProps("aria-controls")(props)));
	            }
	        };
	    }, []);
	    const useMenuItem = A$1((args) => {
	        const { useListNavigationChildProps } = useListNavigationChild(args);
	        // const { getSyncHandler, ...asyncInfo } = useAsyncHandler<E>()({ capture: _ => void (0) });
	        // const onClick = getSyncHandler(asyncInfo.pending ? null : (args.onClick ?? null));
	        const onClick = args.onClick;
	        function useMenuItemProps({ ...props }) {
	            props.role = "menuitem";
	            return useMergedProps()({ onClick }, useListNavigationChildProps(props));
	        }
	        return { useMenuItemProps };
	    }, []);
	    const useMenuItemCheckbox = A$1((args) => {
	        //const { getSyncHandler, ...asyncInfo } = useAsyncHandler<E>()({ capture: _ => !args.checked });
	        //const onClick = getSyncHandler(asyncInfo.pending ? null : args.onChange);
	        const onClick = (e) => args.onChange(enhanceEvent(e, { checked: !args.checked }));
	        function useMenuItemProps({ ...props }) {
	            props.role = "menuitemcheckbox";
	            return useMergedProps()({ onClick }, props);
	        }
	        return { useMenuItemProps };
	    }, []);
	    function useMenuProps({ ...props }) {
	        props.role = "menu";
	        function onKeyDown(e) {
	            if (e.key == "Escape" && onClose) {
	                onClose();
	            }
	        }
	        return useMenuIdProps(useListNavigationProps(useMenuHasFocusProps(useMergedProps()({ onKeyDown }, useFocusTrapProps(props)))));
	    }
	    return {
	        useMenuProps,
	        useMenuButton,
	        useMenuItem,
	        useMenuSentinel,
	        useMenuItemCheckbox,
	        useMenuSubmenuItem,
	        focusMenu
	    };
	}

	const DemoUseInterval = () => {
	    const [interval, setInterval] = l(1000);
	    const [fireCount, setFireCount] = l(0);
	    useInterval({ interval, callback: () => setFireCount(i => ++i) });
	    return (v$1("div", { class: "demo" },
	        v$1("label", null,
	            "Interval duration: ",
	            v$1("input", { type: "number", value: interval, onInput: e => setInterval(e.currentTarget.valueAsNumber) })),
	        v$1("div", null,
	            "The callback has been called ",
	            fireCount,
	            " time",
	            fireCount === 1 ? "" : "s",
	            ".")));
	};

	const DemoUseTimeout = () => {
	    const [timeout, setTimeout] = l(1000);
	    const [triggerIndex, setTriggerIndex] = l("");
	    const [fireCount, setFireCount] = l(0);
	    useTimeout$1({ timeout, triggerIndex, callback: () => setFireCount(i => ++i) });
	    return (v$1("div", { class: "demo" },
	        v$1("label", null,
	            "Timeout duration: ",
	            v$1("input", { type: "number", value: timeout, onInput: e => setTimeout(e.currentTarget.valueAsNumber) })),
	        v$1("label", null,
	            "Refresh key: ",
	            v$1("input", { type: "text", value: triggerIndex, onInput: e => setTriggerIndex(e.currentTarget.value) })),
	        v$1("div", null,
	            "The callback has been called ",
	            fireCount,
	            " time",
	            fireCount === 1 ? "" : "s",
	            ".")));
	};

	function useAriaTabs({ selectionMode, selectedIndex, onSelect, orientation: logicalOrientation, ...args }) {
	    const { element: listElement, useRefElementProps } = useRefElement();
	    const { getLogicalDirection, convertToPhysicalOrientation } = useLogicalDirection(listElement);
	    const physicalOrientation = convertToPhysicalOrientation(logicalOrientation);
	    useRandomId({ prefix: "aria-tab-list-" });
	    const { useRandomIdProps: useTabLabelIdProps, useReferencedIdProps: useReferencedTabLabelId } = useRandomId({ prefix: "aria-tab-label-" });
	    const { managedChildren: managedTabs, navigateToIndex, useListNavigationChild, useListNavigationProps } = useListNavigation({ ...args, keyNavigation: logicalOrientation });
	    const { managedChildren: managedPanels, useManagedChild: useManagedTabPanel } = useChildManager();
	    useStableCallback(onSelect);
	    const childCount = managedTabs.length;
	    const { useHasFocusProps: useTabListHasFocusProps, focusedInner: tabListFocused } = useHasFocus();
	    useLayoutEffect(() => {
	        for (let child of managedTabs)
	            child.setSelectionMode(selectionMode);
	    }, [selectionMode]);
	    useLayoutEffect(([prevChildCount, prevSelectedIndex]) => {
	        if (prevSelectedIndex != null) {
	            managedTabs[prevSelectedIndex]?.setSelected(false);
	            managedPanels[prevSelectedIndex]?.setVisible(false);
	        }
	        if (selectedIndex != null) {
	            managedTabs[selectedIndex]?.setSelected(true);
	            managedPanels[selectedIndex]?.setVisible(true);
	        }
	    }, [childCount, selectedIndex]);
	    useLayoutEffect(([prevChildCount, prevSelectedIndex]) => {
	        if (selectedIndex != null && selectionMode == "activate") {
	            managedPanels[selectedIndex]?.focus();
	        }
	    }, [childCount, selectedIndex, selectionMode]);
	    const getTabListIsFocused = useStableGetter(tabListFocused);
	    const useTab = A$1(function useTab(info) {
	        //const [selectedTabId, setSelectedTabId, getSelectedTabId] = useState<string | undefined>(undefined);
	        const [selectionModeL, setSelectionModeL] = useState(selectionMode);
	        const { element, useRefElementProps } = useRefElement();
	        const [tabPanelId, setTabPanelId] = useState(undefined);
	        const { useRandomIdProps: useTabIdProps, id: tabId, getId: getTabId } = useRandomId({ prefix: "aria-tab-" });
	        const [selected, setSelected, getSelected] = useState(false);
	        const { tabbable, useListNavigationChildProps, useListNavigationSiblingProps } = useListNavigationChild({ ...info, setSelected, tabId, setTabPanelId, setSelectionMode: setSelectionModeL });
	        const getIndex = useStableGetter(info.index);
	        // const { getSyncHandler, ...asyncInfo } = useAsyncHandler<Element>()({ capture: (e: unknown) => info.index });
	        // const onSelect = getSyncHandler(asyncInfo.pending? null : (stableAsyncOnSelect ?? null));
	        y(() => {
	            if (tabbable && selectionModeL == "focus") {
	                onSelect({ target: element, currentTarget: element, [EventDetail]: { selectedIndex: getIndex() } });
	            }
	        }, [tabbable, selectionModeL, element]);
	        y(() => { managedPanels[info.index]?.setTabId(tabId); }, [tabId, info.index]);
	        /*useEffect(() => {
	            if (selected)
	                setSelectedTabId(tabId);
	        }, [selected, tabId])*/
	        function useTabProps({ ...props }) {
	            const newProps = useButtonLikeEventHandlers((e) => {
	                navigateToIndex(info.index);
	                onSelect?.(enhanceEvent(e, { selectedIndex: getIndex() }));
	                e.preventDefault();
	            })(props);
	            newProps.role = "tab";
	            newProps["aria-selected"] = selected.toString();
	            newProps["aria-controls"] = tabPanelId;
	            return useMergedProps()({}, useTabIdProps(useListNavigationChildProps(useRefElementProps(newProps))));
	        }
	        return { useTabProps, selected };
	    }, []);
	    const useTabPanel = A$1(function usePanel(info) {
	        //const [selectedTabPanelId, setSelectedTabPanelId, getSelectedTabPanelId] = useState<string | undefined>(undefined);
	        const [shouldFocus, setShouldFocus] = useState(false);
	        const [tabId, setTabId] = useState(undefined);
	        const [selected, setSelected, getSelected] = useState(false);
	        const { useRandomIdProps: usePanelIdProps, useReferencedIdProps: useReferencedPanelId, id: tabPanelId } = useRandomId({ prefix: "aria-tab-panel-" });
	        const { element, useManagedChildProps } = useManagedTabPanel({ ...info, tabPanelId, setTabId, focus, setVisible: setSelected });
	        function focus() {
	            if (getTabListIsFocused()) {
	                setShouldFocus(true);
	            }
	        }
	        y(() => {
	            if (shouldFocus) {
	                element?.focus();
	                setShouldFocus(false);
	            }
	        }, [element, shouldFocus]);
	        y(() => { managedTabs[info.index]?.setTabPanelId(tabPanelId); }, [tabPanelId, info.index]);
	        function useTabPanelProps({ ...props }) {
	            props["aria-labelledby"] = managedTabs[info.index]?.tabId;
	            props.role = "tabpanel";
	            props.tabIndex ??= -1; // Make sure the tab panel is tabbable.
	            return useMergedProps()({}, usePanelIdProps(useManagedChildProps(props)));
	        }
	        return { useTabPanelProps, selected };
	    }, []);
	    const useTabsList = A$1(function useTabList() {
	        function useTabListProps({ ...props }) {
	            props.role = "tablist";
	            props["aria-orientation"] = physicalOrientation;
	            return useListNavigationProps(useReferencedTabLabelId("aria-labelledby")(useTabListHasFocusProps(useRefElementProps(props))));
	        }
	        return { useTabListProps };
	    }, [physicalOrientation]);
	    const useTabsLabel = A$1(function useTabsLabel() {
	        function useTabsLabelProps({ ...props }) {
	            return useTabLabelIdProps(props);
	        }
	        return { useTabsLabelProps };
	    }, []);
	    return { useTab, useTabPanel, useTabsList, useTabsLabel };
	    /*const { managedChildren: managedTabs, useListNavigationChild, useListNavigationProps } = useListNavigation<E>(args)
	    const { managedChildren: managedTabPanels, useManagedChild: useManagedTabPanel } = useChildManager();


	    const useAriaTab = useCallback(<E extends Element>(args: UseAriaTabParameters) => {
	        const { tabbable, useListNavigationChildProps, useListNavigationSiblingProps } = useListNavigationChild<E>(args);
	        function useAriaTabProps<P extends h.JSX.HTMLAttributes<E>>(props: P) {
	            return useListNavigationChildProps(props);
	         }

	         return { useAriaTabProps };
	    }, []);

	    const useAriaTabPanel = useCallback(<E extends Element>(args: UseAriaTabPanelParameters) => {
	        const never = useManagedTabPanel(args);

	        function useAriaTabPanelProps<P extends h.JSX.HTMLAttributes<E>>(props: P) {
	            return useMergedProps<E>()({}, props);
	        }

	        return { useAriaTabPanelProps };
	     }, []);

	    function useAriaTabsProps<P extends h.JSX.HTMLAttributes<E>>({...props}: P) {
	        props.role = "tablist";
	        return useListNavigationProps(props);
	    }


	    return {
	        useAriaTabsProps,
	        useAriaTab,
	        useAriaTabPanel
	    }*/
	}

	function useAriaTooltip({ mouseoverDelay }) {
	    mouseoverDelay ??= 400;
	    const [open, setOpen, getOpen] = useState(false);
	    const [mouseoverIsValid, setMouseoverIsValid] = useState(false);
	    const { useRandomIdProps: useTooltipIdProps, useReferencedIdProps: useTooltipIdReferencingProps } = useRandomId({ prefix: "aria-tooltip-" });
	    const { focusedInner: triggerFocused, useHasFocusProps } = useHasFocus();
	    const [triggerHasMouseover, setTriggerHasMouseover] = useState(false);
	    const [tooltipHasMouseover, setTooltipHasMouseover] = useState(false);
	    y(() => { setOpen(mouseoverIsValid || triggerFocused); }, [mouseoverIsValid, triggerFocused]);
	    // Use a timeout to open with a delay if requested
	    useTimeout({
	        callback: () => {
	            setMouseoverIsValid(tooltipHasMouseover || triggerHasMouseover);
	        },
	        // Force the delay to zero any time the tooltip is already focused
	        timeout: triggerFocused ? 0 : (mouseoverDelay ?? 0),
	        triggerIndex: `${tooltipHasMouseover || triggerHasMouseover}`
	    });
	    // ...but always close immediately upon request.
	    y(() => {
	        if (!triggerHasMouseover && !tooltipHasMouseover)
	            setMouseoverIsValid(false);
	    }, [triggerHasMouseover, tooltipHasMouseover]);
	    const useTooltipTrigger = A$1(function useTooltipTrigger() {
	        function onMouseOver(e) {
	            setTriggerHasMouseover(true);
	        }
	        function onMouseOut(e) {
	            setTriggerHasMouseover(false);
	        }
	        function useTooltipSourceProps({ ...props }) {
	            props.tabIndex ??= 0;
	            return useTooltipIdReferencingProps("aria-describedby")(useMergedProps()({ onMouseOver, onMouseOut }, useHasFocusProps(props)));
	        }
	        return { useTooltipSourceProps };
	    }, [useTooltipIdReferencingProps]);
	    const useTooltip = A$1(function useTooltip() {
	        function onMouseOver(e) {
	            setTooltipHasMouseover(true);
	        }
	        function onMouseOut(e) {
	            setTooltipHasMouseover(false);
	        }
	        function useTooltipProps({ ...props }) {
	            props.role = "tooltip";
	            return useTooltipIdProps(useMergedProps()({ onMouseOver, onMouseOut }, props));
	        }
	        return { useTooltipProps };
	    }, [useTooltipIdProps]);
	    return {
	        useTooltip,
	        useTooltipTrigger,
	        isOpen: open,
	        getIsOpen: getOpen
	    };
	}

	const RandomWords = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.".split(" ");
	const DemoUseDroppable = () => {
	    const { droppedFiles, droppedStrings, filesForConsideration, stringsForConsideration, useDroppableProps, dropError } = useDroppable({ effect: "copy" });
	    useMergedProps$1()({}, { ref: s(null) });
	    const p = useDroppableProps({ className: "demo droppable" });
	    p.ref;
	    return (v$1("div", { ...p },
	        droppedStrings != null && v$1("div", null,
	            "Data dropped: ",
	            v$1("ul", null, Object.entries(droppedStrings).map(([type, value]) => v$1("li", null,
	                type,
	                ": ",
	                value)))),
	        droppedFiles != null && v$1("div", null,
	            "Files dropped: ",
	            v$1("table", null,
	                v$1("thead", null,
	                    v$1("tr", null,
	                        v$1("th", null, "Name"),
	                        v$1("th", null, "Size"),
	                        v$1("th", null, "Type"),
	                        v$1("th", null, "Last modified"))),
	                v$1("tbody", null, droppedFiles.map(f => v$1("tr", null,
	                    v$1("td", null, f.name),
	                    f.data.byteLength,
	                    v$1("td", null, f.type),
	                    v$1("td", null, new Date(f.lastModified ?? 0))))))),
	        v$1("hr", null),
	        stringsForConsideration != null && v$1("div", null,
	            "Data being considered: ",
	            v$1("ul", null, Array.from(stringsForConsideration).map(type => v$1("li", null, type)))),
	        filesForConsideration != null && v$1("div", null,
	            "Files being considered: ",
	            v$1("ul", null, filesForConsideration.map(f => v$1("li", null, JSON.stringify(f))))),
	        v$1("hr", null),
	        dropError && v$1("div", null, dropError instanceof Error ? dropError.message : JSON.stringify(dropError))));
	};
	const DemoUseDraggable = () => {
	    const { dragging, useDraggableProps, lastDropEffect, getLastDropEffect, getDragging } = useDraggable({ data: { "text/plain": "This is custom draggable content of type text/plain." } });
	    return (v$1("div", { ...useDraggableProps({ className: "demo" }) }, "Draggable content"));
	};
	const DemoUseElementSizeAnimation = () => {
	    const [height, setHeight] = useState$1(0);
	    const [angle, setAngle] = useState$1(0);
	    useAnimationFrame({
	        callback: (ms) => {
	            setAngle(a => a + 0.01);
	            setHeight((Math.sin(angle) + 1) / 0.5);
	        }
	    });
	    const { element, elementSize, useElementSizeProps } = useElementSize();
	    return (v$1("div", { ...useElementSizeProps({ ref: undefined, className: "demo", style: { height: `${(height * 100) + 100}px` } }) },
	        v$1("pre", null, JSON.stringify(elementSize, null, 2))));
	};
	const DemoUseFocusTrap = g(({ depth }) => {
	    const [active, setActive] = useState$1(false);
	    const { useFocusTrapProps } = useFocusTrap$1({ trapActive: active });
	    //const { useRovingTabIndexChild, useRovingTabIndexProps } = useRovingTabIndex<HTMLUListElement, RovingTabIndexChildInfo>({ tabbableIndex, focusOnChange: false });
	    const divProps = useFocusTrapProps({ ref: undefined, className: "focus-trap-demo" });
	    if (depth == 2)
	        return v$1("div", null);
	    return (v$1("div", { className: "demo" },
	        v$1("label", null,
	            "Active: ",
	            v$1("input", { type: "checkbox", checked: active, onInput: e => { e.preventDefault(); setActive(e.currentTarget.checked); } })),
	        v$1("div", { ...divProps },
	            v$1(DemoUseFocusTrapChild, { active: active, setActive: setActive, depth: depth ?? 0 }))));
	});
	const DemoUseFocusTrapChild = g(({ setActive, active, depth }) => {
	    return (v$1(d$1, null,
	        v$1("button", null, "Button 1"),
	        v$1("button", null, "Button 2"),
	        v$1("button", null, "Button 3"),
	        v$1("label", null,
	            "Active: ",
	            v$1("input", { type: "checkbox", checked: active, onInput: e => { e.preventDefault(); setActive(e.currentTarget.checked); } }))));
	});
	const UseAccordionSectionContext = D(null);
	const DemoUseAccordion = g(() => {
	    const [expandedIndex, setExpandedIndex] = useState$1(0);
	    const { useAriaAccordionSection, useAriaAccordionProps } = useAriaAccordion({ expandedIndex, setExpandedIndex });
	    return (v$1(UseAccordionSectionContext.Provider, { value: useAriaAccordionSection },
	        v$1("div", { className: "demo" },
	            v$1("div", { ...useAriaAccordionProps({}) },
	                v$1(DemoAccordionSection, { index: 0 }),
	                v$1(DemoAccordionSection, { index: 1 }),
	                v$1(DemoAccordionSection, { index: 2 })))));
	});
	const DemoAccordionSection = g(({ index }) => {
	    const useAccordionSection = F(UseAccordionSectionContext);
	    const { expanded, useAriaAccordionSectionBody, useAriaAccordionSectionHeader } = useAccordionSection({ index });
	    const { useAriaAccordionSectionBodyProps } = useAriaAccordionSectionBody();
	    const { useAriaAccordionSectionHeaderProps } = useAriaAccordionSectionHeader({ tag: "button" });
	    const p = useAriaAccordionSectionBodyProps({ className: "accordion-section-body", hidden: !expanded });
	    p.id;
	    return (v$1("div", { className: "accordion-section" },
	        v$1("button", { ...useAriaAccordionSectionHeaderProps({ className: "accordion-section-header" }) },
	            "Header #",
	            index + 1),
	        v$1("div", { ...p },
	            v$1("p", null,
	                "Body content #",
	                index + 1),
	            v$1("p", null, RandomWords.join(" ")))));
	});
	const DemoUseCheckbox = g(() => {
	    return (v$1("div", { className: "demo" },
	        v$1(Checkbox1, null),
	        v$1(Checkbox2, null)));
	});
	const Checkbox1 = g(() => {
	    const [checked, setChecked] = useState$1(false);
	    const { useCheckboxInputElement, useCheckboxLabelElement } = useAriaCheckbox({ disabled: false, checked, labelPosition: "separate", onInput: e => setChecked(e[EventDetail].checked) });
	    const { useCheckboxInputElementProps } = useCheckboxInputElement({ tag: "input" });
	    const { useCheckboxLabelElementProps } = useCheckboxLabelElement({ tag: "label" });
	    return (v$1(d$1, null,
	        v$1("input", { ...useCheckboxInputElementProps({ type: "checkbox", }) }),
	        v$1("label", { ...useCheckboxLabelElementProps({}) }, "Label")));
	});
	const Checkbox2 = g(() => {
	    const [checked, setChecked] = useState$1(false);
	    const { useCheckboxLabelElement, useCheckboxInputElement } = useAriaCheckbox({ disabled: false, labelPosition: "wrapping", onInput: e => setChecked(e[EventDetail].checked), checked });
	    const { useCheckboxInputElementProps } = useCheckboxInputElement({ tag: "input" });
	    const { useCheckboxLabelElementProps } = useCheckboxLabelElement({ tag: "label" });
	    return (v$1(d$1, null,
	        v$1("label", { ...useCheckboxLabelElementProps({}) },
	            v$1("input", { ...useCheckboxInputElementProps({ type: "checkbox" }) }),
	            " Label")));
	});
	const DemoUseDialog = g(() => {
	    const onClose = (() => setOpen(false));
	    const [open, setOpen] = useState$1(false);
	    const { useDialogBackdrop, useDialogBody, useDialogProps, useDialogTitle } = useAriaDialog({ open, onClose });
	    const { useModalBackdropProps } = useDialogBackdrop();
	    const { useModalBodyProps } = useDialogBody({ descriptive: true });
	    const { useModalTitleProps } = useDialogTitle();
	    return (v$1("div", { class: "demo" },
	        v$1("label", null,
	            v$1("input", { type: "checkbox", checked: open, onInput: e => { e.preventDefault(); setOpen(e.currentTarget.checked); } })),
	        v$1("div", { ...useModalBackdropProps({ hidden: !open }) },
	            v$1("div", { ...useDialogProps({}) },
	                v$1("div", { ...useModalTitleProps({}) }, "Dialog Title"),
	                v$1("div", { ...useModalBodyProps({}) },
	                    v$1("p", { tabIndex: -1 }, "Dialog body content"),
	                    v$1("p", null, RandomWords.join(" ")),
	                    v$1("p", null, RandomWords.join(" ")),
	                    v$1("p", null, RandomWords.join(" ")),
	                    v$1("p", null,
	                        v$1("button", { onClick: onClose }, "Close")))))));
	});
	const ListBoxSingleItemContext = D(null);
	const DemoUseListboxSingle = g(() => {
	    const [selectedIndex, setSelectedIndex] = useState$1(0);
	    const { useListboxSingleItem, useListboxSingleLabel, useListboxSingleProps } = useAriaListboxSingle({ selectedIndex, onSelect: e => setSelectedIndex(e[EventDetail].selectedIndex), selectionMode: "activate" });
	    return v$1("div", { class: "demo" },
	        v$1(ListBoxSingleItemContext.Provider, { value: useListboxSingleItem },
	            v$1("ul", { ...useListboxSingleProps({}) }, Array.from((function* () {
	                for (let i = 0; i < 10; ++i) {
	                    yield v$1(DemoListboxSingleOption, { key: i, index: i });
	                }
	            })()))));
	});
	const DemoListboxSingleOption = g(({ index }) => {
	    const { getSelected, selected, tabbable, useListboxSingleItemProps } = F(ListBoxSingleItemContext)({ index, text: null });
	    return v$1("li", { ...useListboxSingleItemProps({}) },
	        "Number ",
	        index + 1,
	        " option",
	        selected ? "(selected)" : "");
	});
	const ListBoxMultiItemContext = D(null);
	const DemoUseListboxMulti = g(() => {
	    const { useListboxMultiItem, useListboxMultiLabel, useListboxMultiProps, currentTypeahead } = useAriaListboxMulti({});
	    const [selectedValues, setSelectedValues] = useState$1(new Set());
	    return v$1("div", { class: "demo" },
	        v$1(ListBoxMultiItemContext.Provider, { value: useListboxMultiItem },
	            v$1("ul", { ...useListboxMultiProps({}) }, Array.from((function* () {
	                for (let i = 0; i < 10; ++i) {
	                    function setSelected2(selected) {
	                        setSelectedValues(selectedValues => {
	                            let next = new Set(selectedValues);
	                            if (selected && !next.has(i)) {
	                                next.add(i);
	                                return next;
	                            }
	                            else if (!selected && next.has(i)) {
	                                next.delete(i);
	                                return next;
	                            }
	                            return selectedValues;
	                        });
	                    }
	                    yield v$1(DemoListboxMultiOption, { key: i, index: i, selected: !!selectedValues.has(i), setSelected: setSelected2 });
	                }
	            })())),
	            currentTypeahead != null && v$1("p", null, currentTypeahead)));
	});
	const MenuItemContext = D(null);
	const DemoListboxMultiOption = g(({ index, selected, setSelected }) => {
	    const text = `Number ${index + 1} option${selected ? "(selected)" : ""}`;
	    const { tabbable, useListboxMultiItemProps } = F(ListBoxMultiItemContext)({ index, text, onSelect: e => setSelected(e[EventDetail].selected), selected });
	    return v$1("li", { ...useListboxMultiItemProps({}) }, text);
	});
	const DemoMenu = g(() => {
	    const [open, setOpen] = useState$1(false);
	    const onClose = () => setOpen(false);
	    const onOpen = () => setOpen(true);
	    const { useMenuButton, useMenuItem, useMenuItemCheckbox, useMenuProps, useMenuSubmenuItem } = useAriaMenu({ open, onClose, onOpen });
	    const { useMenuButtonProps } = useMenuButton({ tag: "button" });
	    return (v$1("div", { class: "demo" },
	        v$1(MenuItemContext.Provider, { value: useMenuItem },
	            v$1("button", { ...useMenuButtonProps({}) }, "Open menu"),
	            v$1("ul", { ...useMenuProps({}), hidden: !open },
	                v$1(DemoMenuItem, { index: 0 }),
	                v$1(DemoMenuItem, { index: 1 }),
	                v$1(DemoMenuItem, { index: 2 })))));
	});
	const DemoMenuItem = g(({ index }) => {
	    const useAriaMenuItem = F(MenuItemContext);
	    const { useMenuItemProps } = useAriaMenuItem({ index, text: null });
	    return v$1("li", { ...useMenuItemProps({}) },
	        "Item ",
	        index + 1);
	});
	const DemoFocus = g(() => {
	    const { focused, focusedInner, useHasFocusProps } = useHasFocus$1();
	    return (v$1("div", { class: "demo" },
	        v$1("h2", null, "useHasFocus"),
	        v$1("div", { ...useHasFocusProps({ style: { border: "1px solid black" }, tabIndex: 0 }) },
	            "Outer ",
	            v$1("div", { tabIndex: 0, style: { border: "1px solid black" } }, "Inner element")),
	        v$1("div", null,
	            v$1("ul", null,
	                v$1("li", null,
	                    "Strictly focused: ",
	                    focused.toString()),
	                v$1("li", null,
	                    "Inner focused: ",
	                    focusedInner.toString())))));
	});
	const TabContext = D(null);
	const TabPanelContext = D(null);
	const DemoTabs = g(() => {
	    const [selectedIndex, setSelectedIndex] = useState$1(0);
	    const [selectionMode, setSelectionMode] = useState$1("focus");
	    const { useTabPanel, useTabsLabel, useTab, useTabsList } = useAriaTabs({ onSelect: e => setSelectedIndex(e[EventDetail].selectedIndex), selectedIndex, selectionMode, orientation: "block" });
	    const { useTabListProps } = useTabsList();
	    return (v$1(TabContext.Provider, { value: useTab },
	        v$1(TabPanelContext.Provider, { value: useTabPanel },
	            v$1("div", { class: "demo" },
	                v$1("label", null,
	                    v$1("input", { type: "checkbox", checked: selectionMode == "focus", onInput: (e) => { e.preventDefault(); setSelectionMode(e.currentTarget.checked ? "focus" : "activate"); } }),
	                    " Activate on focus?"),
	                v$1("ul", { ...useTabListProps({}) },
	                    v$1(DemoTab, { index: 0 }),
	                    v$1(DemoTab, { index: 1 }),
	                    v$1(DemoTab, { index: 2 }),
	                    v$1(DemoTab, { index: 3 }),
	                    v$1(DemoTab, { index: 4 })),
	                v$1("div", null,
	                    v$1(DemoTabPanel, { index: 0 }),
	                    v$1(DemoTabPanel, { index: 1 }),
	                    v$1(DemoTabPanel, { index: 2 }),
	                    v$1(DemoTabPanel, { index: 3 }),
	                    v$1(DemoTabPanel, { index: 4 }))))));
	});
	const DemoTab = g(({ index }) => {
	    const useTab = F(TabContext);
	    const { useTabProps } = useTab({ index, text: null });
	    return (v$1(d$1, null,
	        v$1("li", { ...useTabProps({}) },
	            "Tab #",
	            index + 1)));
	});
	const DemoTabPanel = g(({ index }) => {
	    const useTabPanel = F(TabPanelContext);
	    const { useTabPanelProps, selected } = useTabPanel({ index });
	    return (v$1("div", { ...useTabPanelProps({ hidden: !selected }) },
	        v$1("p", null,
	            "Tab panel content #",
	            index + 1,
	            "."),
	        v$1("p", null, RandomWords.slice(0, Math.floor(RandomWords.length / (index + 1))).join(" "))));
	});
	const DemoTooltip = g(() => {
	    const { useTooltip, useTooltipTrigger, isOpen } = useAriaTooltip({});
	    const { useTooltipProps } = useTooltip();
	    const { useTooltipSourceProps } = useTooltipTrigger();
	    return (v$1("div", { class: "demo" },
	        v$1("p", null,
	            "This is a paragraph with a ",
	            v$1("span", { ...useTooltipSourceProps({}) }, "tooltip right here."),
	            v$1("span", { ...useTooltipProps({ hidden: !isOpen }) }, "This is the tooltip content."))));
	});
	const Component = () => {
	    return v$1("div", { class: "flex", style: { flexWrap: "wrap" } },
	        v$1(DemoTooltip, null),
	        v$1(DemoTabs, null),
	        v$1(DemoFocus, null),
	        v$1(DemoUseTimeout, null),
	        v$1(DemoUseInterval, null),
	        v$1(DemoMenu, null),
	        v$1(DemoUseListboxSingle, null),
	        v$1(DemoUseListboxMulti, null),
	        v$1(DemoUseCheckbox, null),
	        v$1(DemoUseAccordion, null),
	        v$1(DemoUseDialog, null),
	        v$1(DemoUseRovingTabIndex, null),
	        v$1(DemoUseFocusTrap, null),
	        v$1(DemoUseDroppable, null),
	        v$1(DemoUseDraggable, null),
	        v$1(DemoUseElementSizeAnimation, null),
	        v$1("input", null));
	};
	requestAnimationFrame(() => {
	    S$1(v$1(Component, null), document.getElementById("root"));
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
