(function () {
    'use strict';

    var n,
        l$1,
        u$1,
        t,
        o$2,
        r$2,
        f$1 = {},
        e$1 = [],
        c$1 = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;

    function s$1(n, l) {
      for (var u in l) n[u] = l[u];

      return n;
    }

    function a$1(n) {
      var l = n.parentNode;
      l && l.removeChild(n);
    }

    function h$1(l, u, i) {
      var t,
          o,
          r,
          f = {};

      for (r in u) "key" == r ? t = u[r] : "ref" == r ? o = u[r] : f[r] = u[r];

      if (arguments.length > 2 && (f.children = arguments.length > 3 ? n.call(arguments, 2) : i), "function" == typeof l && null != l.defaultProps) for (r in l.defaultProps) void 0 === f[r] && (f[r] = l.defaultProps[r]);
      return v$1(l, f, t, o, null);
    }

    function v$1(n, i, t, o, r) {
      var f = {
        type: n,
        props: i,
        key: t,
        ref: o,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: null == r ? ++u$1 : r
      };
      return null == r && null != l$1.vnode && l$1.vnode(f), f;
    }

    function p$1(n) {
      return n.children;
    }

    function d$1(n, l) {
      this.props = n, this.context = l;
    }

    function _$2(n, l) {
      if (null == l) return n.__ ? _$2(n.__, n.__.__k.indexOf(n) + 1) : null;

      for (var u; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) return u.__e;

      return "function" == typeof n.type ? _$2(n) : null;
    }

    function k$1(n) {
      var l, u;

      if (null != (n = n.__) && null != n.__c) {
        for (n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) {
          n.__e = n.__c.base = u.__e;
          break;
        }

        return k$1(n);
      }
    }

    function b(n) {
      (!n.__d && (n.__d = !0) && t.push(n) && !g$2.__r++ || o$2 !== l$1.debounceRendering) && ((o$2 = l$1.debounceRendering) || setTimeout)(g$2);
    }

    function g$2() {
      for (var n; g$2.__r = t.length;) n = t.sort(function (n, l) {
        return n.__v.__b - l.__v.__b;
      }), t = [], n.some(function (n) {
        var l, u, i, t, o, r;
        n.__d && (o = (t = (l = n).__v).__e, (r = l.__P) && (u = [], (i = s$1({}, t)).__v = t.__v + 1, j$2(r, t, i, l.__n, void 0 !== r.ownerSVGElement, null != t.__h ? [o] : null, u, null == o ? _$2(t) : o, t.__h), z$2(u, t), t.__e != o && k$1(t)));
      });
    }

    function w$2(n, l, u, i, t, o, r, c, s, a) {
      var h,
          y,
          d,
          k,
          b,
          g,
          w,
          x = i && i.__k || e$1,
          C = x.length;

      for (u.__k = [], h = 0; h < l.length; h++) if (null != (k = u.__k[h] = null == (k = l[h]) || "boolean" == typeof k ? null : "string" == typeof k || "number" == typeof k || "bigint" == typeof k ? v$1(null, k, null, null, k) : Array.isArray(k) ? v$1(p$1, {
        children: k
      }, null, null, null) : k.__b > 0 ? v$1(k.type, k.props, k.key, k.ref ? k.ref : null, k.__v) : k)) {
        if (k.__ = u, k.__b = u.__b + 1, null === (d = x[h]) || d && k.key == d.key && k.type === d.type) x[h] = void 0;else for (y = 0; y < C; y++) {
          if ((d = x[y]) && k.key == d.key && k.type === d.type) {
            x[y] = void 0;
            break;
          }

          d = null;
        }
        j$2(n, k, d = d || f$1, t, o, r, c, s, a), b = k.__e, (y = k.ref) && d.ref != y && (w || (w = []), d.ref && w.push(d.ref, null, k), w.push(y, k.__c || b, k)), null != b ? (null == g && (g = b), "function" == typeof k.type && k.__k === d.__k ? k.__d = s = m$1(k, s, n) : s = A$1(n, k, d, x, b, s), "function" == typeof u.type && (u.__d = s)) : s && d.__e == s && s.parentNode != n && (s = _$2(d));
      }

      for (u.__e = g, h = C; h--;) null != x[h] && ("function" == typeof u.type && null != x[h].__e && x[h].__e == u.__d && (u.__d = _$2(i, h + 1)), N(x[h], x[h]));

      if (w) for (h = 0; h < w.length; h++) M$2(w[h], w[++h], w[++h]);
    }

    function m$1(n, l, u) {
      for (var i, t = n.__k, o = 0; t && o < t.length; o++) (i = t[o]) && (i.__ = n, l = "function" == typeof i.type ? m$1(i, l, u) : A$1(u, i, i, t, i.__e, l));

      return l;
    }

    function x$1(n, l) {
      return l = l || [], null == n || "boolean" == typeof n || (Array.isArray(n) ? n.some(function (n) {
        x$1(n, l);
      }) : l.push(n)), l;
    }

    function A$1(n, l, u, i, t, o) {
      var r, f, e;
      if (void 0 !== l.__d) r = l.__d, l.__d = void 0;else if (null == u || t != o || null == t.parentNode) n: if (null == o || o.parentNode !== n) n.appendChild(t), r = null;else {
        for (f = o, e = 0; (f = f.nextSibling) && e < i.length; e += 2) if (f == t) break n;

        n.insertBefore(t, o), r = o;
      }
      return void 0 !== r ? r : t.nextSibling;
    }

    function C$2(n, l, u, i, t) {
      var o;

      for (o in u) "children" === o || "key" === o || o in l || H$1(n, o, null, u[o], i);

      for (o in l) t && "function" != typeof l[o] || "children" === o || "key" === o || "value" === o || "checked" === o || u[o] === l[o] || H$1(n, o, l[o], u[o], i);
    }

    function $$1(n, l, u) {
      "-" === l[0] ? n.setProperty(l, u) : n[l] = null == u ? "" : "number" != typeof u || c$1.test(l) ? u : u + "px";
    }

    function H$1(n, l, u, i, t) {
      var o;

      n: if ("style" === l) {
        if ("string" == typeof u) n.style.cssText = u;else {
          if ("string" == typeof i && (n.style.cssText = i = ""), i) for (l in i) u && l in u || $$1(n.style, l, "");
          if (u) for (l in u) i && u[l] === i[l] || $$1(n.style, l, u[l]);
        }
      } else if ("o" === l[0] && "n" === l[1]) o = l !== (l = l.replace(/Capture$/, "")), l = l.toLowerCase() in n ? l.toLowerCase().slice(2) : l.slice(2), n.l || (n.l = {}), n.l[l + o] = u, u ? i || n.addEventListener(l, o ? T$2 : I$1, o) : n.removeEventListener(l, o ? T$2 : I$1, o);else if ("dangerouslySetInnerHTML" !== l) {
        if (t) l = l.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");else if ("href" !== l && "list" !== l && "form" !== l && "tabIndex" !== l && "download" !== l && l in n) try {
          n[l] = null == u ? "" : u;
          break n;
        } catch (n) {}
        "function" == typeof u || (null != u && (!1 !== u || "a" === l[0] && "r" === l[1]) ? n.setAttribute(l, u) : n.removeAttribute(l));
      }
    }

    function I$1(n) {
      this.l[n.type + !1](l$1.event ? l$1.event(n) : n);
    }

    function T$2(n) {
      this.l[n.type + !0](l$1.event ? l$1.event(n) : n);
    }

    function j$2(n, u, i, t, o, r, f, e, c) {
      var a,
          h,
          v,
          y,
          _,
          k,
          b,
          g,
          m,
          x,
          A,
          C,
          $,
          H = u.type;

      if (void 0 !== u.constructor) return null;
      null != i.__h && (c = i.__h, e = u.__e = i.__e, u.__h = null, r = [e]), (a = l$1.__b) && a(u);

      try {
        n: if ("function" == typeof H) {
          if (g = u.props, m = (a = H.contextType) && t[a.__c], x = a ? m ? m.props.value : a.__ : t, i.__c ? b = (h = u.__c = i.__c).__ = h.__E : ("prototype" in H && H.prototype.render ? u.__c = h = new H(g, x) : (u.__c = h = new d$1(g, x), h.constructor = H, h.render = O$1), m && m.sub(h), h.props = g, h.state || (h.state = {}), h.context = x, h.__n = t, v = h.__d = !0, h.__h = []), null == h.__s && (h.__s = h.state), null != H.getDerivedStateFromProps && (h.__s == h.state && (h.__s = s$1({}, h.__s)), s$1(h.__s, H.getDerivedStateFromProps(g, h.__s))), y = h.props, _ = h.state, v) null == H.getDerivedStateFromProps && null != h.componentWillMount && h.componentWillMount(), null != h.componentDidMount && h.__h.push(h.componentDidMount);else {
            if (null == H.getDerivedStateFromProps && g !== y && null != h.componentWillReceiveProps && h.componentWillReceiveProps(g, x), !h.__e && null != h.shouldComponentUpdate && !1 === h.shouldComponentUpdate(g, h.__s, x) || u.__v === i.__v) {
              h.props = g, h.state = h.__s, u.__v !== i.__v && (h.__d = !1), h.__v = u, u.__e = i.__e, u.__k = i.__k, u.__k.forEach(function (n) {
                n && (n.__ = u);
              }), h.__h.length && f.push(h);
              break n;
            }

            null != h.componentWillUpdate && h.componentWillUpdate(g, h.__s, x), null != h.componentDidUpdate && h.__h.push(function () {
              h.componentDidUpdate(y, _, k);
            });
          }
          if (h.context = x, h.props = g, h.__v = u, h.__P = n, A = l$1.__r, C = 0, "prototype" in H && H.prototype.render) h.state = h.__s, h.__d = !1, A && A(u), a = h.render(h.props, h.state, h.context);else do {
            h.__d = !1, A && A(u), a = h.render(h.props, h.state, h.context), h.state = h.__s;
          } while (h.__d && ++C < 25);
          h.state = h.__s, null != h.getChildContext && (t = s$1(s$1({}, t), h.getChildContext())), v || null == h.getSnapshotBeforeUpdate || (k = h.getSnapshotBeforeUpdate(y, _)), $ = null != a && a.type === p$1 && null == a.key ? a.props.children : a, w$2(n, Array.isArray($) ? $ : [$], u, i, t, o, r, f, e, c), h.base = u.__e, u.__h = null, h.__h.length && f.push(h), b && (h.__E = h.__ = null), h.__e = !1;
        } else null == r && u.__v === i.__v ? (u.__k = i.__k, u.__e = i.__e) : u.__e = L$1(i.__e, u, i, t, o, r, f, c);

        (a = l$1.diffed) && a(u);
      } catch (n) {
        u.__v = null, (c || null != r) && (u.__e = e, u.__h = !!c, r[r.indexOf(e)] = null), l$1.__e(n, u, i);
      }
    }

    function z$2(n, u) {
      l$1.__c && l$1.__c(u, n), n.some(function (u) {
        try {
          n = u.__h, u.__h = [], n.some(function (n) {
            n.call(u);
          });
        } catch (n) {
          l$1.__e(n, u.__v);
        }
      });
    }

    function L$1(l, u, i, t, o, r, e, c) {
      var s,
          h,
          v,
          y = i.props,
          p = u.props,
          d = u.type,
          k = 0;
      if ("svg" === d && (o = !0), null != r) for (; k < r.length; k++) if ((s = r[k]) && "setAttribute" in s == !!d && (d ? s.localName === d : 3 === s.nodeType)) {
        l = s, r[k] = null;
        break;
      }

      if (null == l) {
        if (null === d) return document.createTextNode(p);
        l = o ? document.createElementNS("http://www.w3.org/2000/svg", d) : document.createElement(d, p.is && p), r = null, c = !1;
      }

      if (null === d) y === p || c && l.data === p || (l.data = p);else {
        if (r = r && n.call(l.childNodes), h = (y = i.props || f$1).dangerouslySetInnerHTML, v = p.dangerouslySetInnerHTML, !c) {
          if (null != r) for (y = {}, k = 0; k < l.attributes.length; k++) y[l.attributes[k].name] = l.attributes[k].value;
          (v || h) && (v && (h && v.__html == h.__html || v.__html === l.innerHTML) || (l.innerHTML = v && v.__html || ""));
        }

        if (C$2(l, p, y, o, c), v) u.__k = [];else if (k = u.props.children, w$2(l, Array.isArray(k) ? k : [k], u, i, t, o && "foreignObject" !== d, r, e, r ? r[0] : i.__k && _$2(i, 0), c), null != r) for (k = r.length; k--;) null != r[k] && a$1(r[k]);
        c || ("value" in p && void 0 !== (k = p.value) && (k !== l.value || "progress" === d && !k || "option" === d && k !== y.value) && H$1(l, "value", k, y.value, !1), "checked" in p && void 0 !== (k = p.checked) && k !== l.checked && H$1(l, "checked", k, y.checked, !1));
      }
      return l;
    }

    function M$2(n, u, i) {
      try {
        "function" == typeof n ? n(u) : n.current = u;
      } catch (n) {
        l$1.__e(n, i);
      }
    }

    function N(n, u, i) {
      var t, o;

      if (l$1.unmount && l$1.unmount(n), (t = n.ref) && (t.current && t.current !== n.__e || M$2(t, null, u)), null != (t = n.__c)) {
        if (t.componentWillUnmount) try {
          t.componentWillUnmount();
        } catch (n) {
          l$1.__e(n, u);
        }
        t.base = t.__P = null, n.__c = void 0;
      }

      if (t = n.__k) for (o = 0; o < t.length; o++) t[o] && N(t[o], u, "function" != typeof n.type);
      i || null == n.__e || a$1(n.__e), n.__ = n.__e = n.__d = void 0;
    }

    function O$1(n, l, u) {
      return this.constructor(n, u);
    }

    function P$1(u, i, t) {
      var o, r, e;
      l$1.__ && l$1.__(u, i), r = (o = "function" == typeof t) ? null : t && t.__k || i.__k, e = [], j$2(i, u = (!o && t || i).__k = h$1(p$1, null, [u]), r || f$1, f$1, void 0 !== i.ownerSVGElement, !o && t ? [t] : r ? null : i.firstChild ? n.call(i.childNodes) : null, e, !o && t ? t : r ? r.__e : i.firstChild, o), z$2(e, u);
    }

    function B$2(n, l) {
      var u = {
        __c: l = "__cC" + r$2++,
        __: n,
        Consumer: function (n, l) {
          return n.children(l);
        },
        Provider: function (n) {
          var u, i;
          return this.getChildContext || (u = [], (i = {})[l] = this, this.getChildContext = function () {
            return i;
          }, this.shouldComponentUpdate = function (n) {
            this.props.value !== n.value && u.some(b);
          }, this.sub = function (n) {
            u.push(n);
            var l = n.componentWillUnmount;

            n.componentWillUnmount = function () {
              u.splice(u.indexOf(n), 1), l && l.call(n);
            };
          }), n.children;
        }
      };
      return u.Provider.__ = u.Consumer.contextType = u;
    }

    n = e$1.slice, l$1 = {
      __e: function (n, l, u, i) {
        for (var t, o, r; l = l.__;) if ((t = l.__c) && !t.__) try {
          if ((o = t.constructor) && null != o.getDerivedStateFromError && (t.setState(o.getDerivedStateFromError(n)), r = t.__d), null != t.componentDidCatch && (t.componentDidCatch(n, i || {}), r = t.__d), r) return t.__E = t;
        } catch (l) {
          n = l;
        }

        throw n;
      }
    }, u$1 = 0, d$1.prototype.setState = function (n, l) {
      var u;
      u = null != this.__s && this.__s !== this.state ? this.__s : this.__s = s$1({}, this.state), "function" == typeof n && (n = n(s$1({}, u), this.props)), n && s$1(u, n), null != n && this.__v && (l && this.__h.push(l), b(this));
    }, d$1.prototype.forceUpdate = function (n) {
      this.__v && (this.__e = !0, n && this.__h.push(n), b(this));
    }, d$1.prototype.render = p$1, t = [], g$2.__r = 0, r$2 = 0;

    var _$1 = 0;

    function o$1(o, e, n, t, f) {
      var l,
          s,
          u = {};

      for (s in e) "ref" == s ? l = e[s] : u[s] = e[s];

      var a = {
        type: o,
        props: u,
        key: n,
        ref: l,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: --_$1,
        __source: f,
        __self: t
      };
      if ("function" == typeof o && (l = o.defaultProps)) for (s in l) void 0 === u[s] && (u[s] = l[s]);
      return l$1.vnode && l$1.vnode(a), a;
    }

    var r$1,
        u,
        i,
        o,
        f = 0,
        c = [],
        e = [],
        a = l$1.__b,
        v = l$1.__r,
        l = l$1.diffed,
        m = l$1.__c,
        d = l$1.unmount;

    function p(t, r) {
      l$1.__h && l$1.__h(u, t, f || r), f = 0;
      var i = u.__H || (u.__H = {
        __: [],
        __h: []
      });
      return t >= i.__.length && i.__.push({
        __V: e
      }), i.__[t];
    }

    function y(n) {
      return f = 1, h(C$1, n);
    }

    function h(n, t, i) {
      var o = p(r$1++, 2);

      if (o.t = n, !o.__c && (o.__ = [i ? i(t) : C$1(void 0, t), function (n) {
        var t = o.__N ? o.__N[0] : o.__[0],
            r = o.t(t, n);
        t !== r && (o.__N = [r, o.__[1]], o.__c.setState({}));
      }], o.__c = u, !u.u)) {
        u.u = !0;
        var f = u.shouldComponentUpdate;

        u.shouldComponentUpdate = function (n, t, r) {
          if (!o.__c.__H) return !0;

          var u = o.__c.__H.__.filter(function (n) {
            return n.__c;
          });

          if (u.every(function (n) {
            return !n.__N;
          })) return !f || f.call(this, n, t, r);
          var i = !1;
          return u.forEach(function (n) {
            if (n.__N) {
              var t = n.__[0];
              n.__ = n.__N, n.__N = void 0, t !== n.__[0] && (i = !0);
            }
          }), !!i && (!f || f.call(this, n, t, r));
        };
      }

      return o.__N || o.__;
    }

    function s(t, i) {
      var o = p(r$1++, 3);
      !l$1.__s && B$1(o.__H, i) && (o.__ = t, o.i = i, u.__H.__h.push(o));
    }

    function _(t, i) {
      var o = p(r$1++, 4);
      !l$1.__s && B$1(o.__H, i) && (o.__ = t, o.i = i, u.__h.push(o));
    }

    function A(n) {
      return f = 5, T$1(function () {
        return {
          current: n
        };
      }, []);
    }

    function T$1(n, t) {
      var u = p(r$1++, 7);
      return B$1(u.__H, t) ? (u.__V = n(), u.i = t, u.__h = n, u.__V) : u.__;
    }

    function q$1(n, t) {
      return f = 8, T$1(function () {
        return n;
      }, t);
    }

    function x(n) {
      var t = u.context[n.__c],
          i = p(r$1++, 9);
      return i.c = n, t ? (null == i.__ && (i.__ = !0, t.sub(u)), t.props.value) : n.__;
    }

    function g$1() {
      for (var t; t = c.shift();) if (t.__P && t.__H) try {
        t.__H.__h.forEach(w$1), t.__H.__h.forEach(z$1), t.__H.__h = [];
      } catch (r) {
        t.__H.__h = [], l$1.__e(r, t.__v);
      }
    }

    l$1.__b = function (n) {
      "function" != typeof n.type || n.o || n.type === p$1 ? n.o || (n.o = n.__ && n.__.o ? n.__.o : "") : n.o = (n.__ && n.__.o ? n.__.o : "") + (n.__ && n.__.__k ? n.__.__k.indexOf(n) : 0), u = null, a && a(n);
    }, l$1.__r = function (n) {
      v && v(n), r$1 = 0;
      var t = (u = n.__c).__H;
      t && (i === u ? (t.__h = [], u.__h = [], t.__.forEach(function (n) {
        n.__N && (n.__ = n.__N), n.__V = e, n.__N = n.i = void 0;
      })) : (t.__h.forEach(w$1), t.__h.forEach(z$1), t.__h = [])), i = u;
    }, l$1.diffed = function (t) {
      l && l(t);
      var r = t.__c;
      r && r.__H && (r.__H.__h.length && (1 !== c.push(r) && o === l$1.requestAnimationFrame || ((o = l$1.requestAnimationFrame) || k)(g$1)), r.__H.__.forEach(function (n) {
        n.i && (n.__H = n.i), n.__V !== e && (n.__ = n.__V), n.i = void 0, n.__V = e;
      })), i = u = null;
    }, l$1.__c = function (t, r) {
      r.some(function (t) {
        try {
          t.__h.forEach(w$1), t.__h = t.__h.filter(function (n) {
            return !n.__ || z$1(n);
          });
        } catch (u) {
          r.some(function (n) {
            n.__h && (n.__h = []);
          }), r = [], l$1.__e(u, t.__v);
        }
      }), m && m(t, r);
    }, l$1.unmount = function (t) {
      d && d(t);
      var r,
          u = t.__c;
      u && u.__H && (u.__H.__.forEach(function (n) {
        try {
          w$1(n);
        } catch (n) {
          r = n;
        }
      }), u.__H = void 0, r && l$1.__e(r, u.__v));
    };
    var j$1 = "function" == typeof requestAnimationFrame;

    function k(n) {
      var t,
          r = function () {
        clearTimeout(u), j$1 && cancelAnimationFrame(t), setTimeout(n);
      },
          u = setTimeout(r, 100);

      j$1 && (t = requestAnimationFrame(r));
    }

    function w$1(n) {
      var t = u,
          r = n.__c;
      "function" == typeof r && (n.__c = void 0, r()), u = t;
    }

    function z$1(n) {
      var t = u;
      n.__c = n.__(), u = t;
    }

    function B$1(n, t) {
      return !n || n.length !== t.length || t.some(function (t, r) {
        return t !== n[r];
      });
    }

    function C$1(n, t) {
      return "function" == typeof t ? t(n) : t;
    }

    function g(n, t) {
      for (var e in t) n[e] = t[e];

      return n;
    }

    function C(n, t) {
      for (var e in n) if ("__source" !== e && !(e in t)) return !0;

      for (var r in t) if ("__source" !== r && n[r] !== t[r]) return !0;

      return !1;
    }

    function E(n) {
      this.props = n;
    }

    function w(n, e) {
      function r(n) {
        var t = this.props.ref,
            r = t == n.ref;
        return !r && t && (t.call ? t(null) : t.current = null), e ? !e(this.props, n) || !r : C(this.props, n);
      }

      function u(e) {
        return this.shouldComponentUpdate = r, h$1(n, e);
      }

      return u.displayName = "Memo(" + (n.displayName || n.name) + ")", u.prototype.isReactComponent = !0, u.__f = !0, u;
    }

    (E.prototype = new d$1()).isPureReactComponent = !0, E.prototype.shouldComponentUpdate = function (n, t) {
      return C(this.props, n) || C(this.state, t);
    };
    var R = l$1.__b;

    l$1.__b = function (n) {
      n.type && n.type.__f && n.ref && (n.props.ref = n.ref, n.ref = null), R && R(n);
    };

    var O = l$1.__e;

    l$1.__e = function (n, t, e, r) {
      if (n.then) for (var u, o = t; o = o.__;) if ((u = o.__c) && u.__c) return null == t.__e && (t.__e = e.__e, t.__k = e.__k), u.__c(n, t);
      O(n, t, e, r);
    };

    var T = l$1.unmount;

    function I(n, t, e) {
      return n && (n.__c && n.__c.__H && (n.__c.__H.__.forEach(function (n) {
        "function" == typeof n.__c && n.__c();
      }), n.__c.__H = null), null != (n = g({}, n)).__c && (n.__c.__P === e && (n.__c.__P = t), n.__c = null), n.__k = n.__k && n.__k.map(function (n) {
        return I(n, t, e);
      })), n;
    }

    function L(n, t, e) {
      return n && (n.__v = null, n.__k = n.__k && n.__k.map(function (n) {
        return L(n, t, e);
      }), n.__c && n.__c.__P === t && (n.__e && e.insertBefore(n.__e, n.__d), n.__c.__e = !0, n.__c.__P = e)), n;
    }

    function U() {
      this.__u = 0, this.t = null, this.__b = null;
    }

    function D(n) {
      var t = n.__.__c;
      return t && t.__a && t.__a(n);
    }

    function M$1() {
      this.u = null, this.o = null;
    }

    l$1.unmount = function (n) {
      var t = n.__c;
      t && t.__R && t.__R(), t && !0 === n.__h && (n.type = null), T && T(n);
    }, (U.prototype = new d$1()).__c = function (n, t) {
      var e = t.__c,
          r = this;
      null == r.t && (r.t = []), r.t.push(e);

      var u = D(r.__v),
          o = !1,
          i = function () {
        o || (o = !0, e.__R = null, u ? u(l) : l());
      };

      e.__R = i;

      var l = function () {
        if (! --r.__u) {
          if (r.state.__a) {
            var n = r.state.__a;
            r.__v.__k[0] = L(n, n.__c.__P, n.__c.__O);
          }

          var t;

          for (r.setState({
            __a: r.__b = null
          }); t = r.t.pop();) t.forceUpdate();
        }
      },
          c = !0 === t.__h;

      r.__u++ || c || r.setState({
        __a: r.__b = r.__v.__k[0]
      }), n.then(i, i);
    }, U.prototype.componentWillUnmount = function () {
      this.t = [];
    }, U.prototype.render = function (n, e) {
      if (this.__b) {
        if (this.__v.__k) {
          var r = document.createElement("div"),
              o = this.__v.__k[0].__c;
          this.__v.__k[0] = I(this.__b, r, o.__O = o.__P);
        }

        this.__b = null;
      }

      var i = e.__a && h$1(p$1, null, n.fallback);
      return i && (i.__h = null), [h$1(p$1, null, e.__a ? null : n.children), i];
    };

    var V = function (n, t, e) {
      if (++e[1] === e[0] && n.o.delete(t), n.props.revealOrder && ("t" !== n.props.revealOrder[0] || !n.o.size)) for (e = n.u; e;) {
        for (; e.length > 3;) e.pop()();

        if (e[1] < e[0]) break;
        n.u = e = e[2];
      }
    };

    function W(n) {
      return this.getChildContext = function () {
        return n.context;
      }, n.children;
    }

    function P(n) {
      var e = this,
          r = n.i;
      e.componentWillUnmount = function () {
        P$1(null, e.l), e.l = null, e.i = null;
      }, e.i && e.i !== r && e.componentWillUnmount(), n.__v ? (e.l || (e.i = r, e.l = {
        nodeType: 1,
        parentNode: r,
        childNodes: [],
        appendChild: function (n) {
          this.childNodes.push(n), e.i.appendChild(n);
        },
        insertBefore: function (n, t) {
          this.childNodes.push(n), e.i.appendChild(n);
        },
        removeChild: function (n) {
          this.childNodes.splice(this.childNodes.indexOf(n) >>> 1, 1), e.i.removeChild(n);
        }
      }), P$1(h$1(W, {
        context: e.context
      }, n.__v), e.l)) : e.l && e.componentWillUnmount();
    }

    function $(n, e) {
      var r = h$1(P, {
        __v: n,
        i: e
      });
      return r.containerInfo = e, r;
    }

    (M$1.prototype = new d$1()).__a = function (n) {
      var t = this,
          e = D(t.__v),
          r = t.o.get(n);
      return r[0]++, function (u) {
        var o = function () {
          t.props.revealOrder ? (r.push(u), V(t, n, r)) : u();
        };

        e ? e(o) : o();
      };
    }, M$1.prototype.render = function (n) {
      this.u = null, this.o = new Map();
      var t = x$1(n.children);
      n.revealOrder && "b" === n.revealOrder[0] && t.reverse();

      for (var e = t.length; e--;) this.o.set(t[e], this.u = [1, 0, this.u]);

      return n.children;
    }, M$1.prototype.componentDidUpdate = M$1.prototype.componentDidMount = function () {
      var n = this;
      this.o.forEach(function (t, e) {
        V(n, e, t);
      });
    };

    var j = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103,
        z = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,
        B = "undefined" != typeof document,
        H = function (n) {
      return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/i : /fil|che|ra/i).test(n);
    };

    d$1.prototype.isReactComponent = {}, ["componentWillMount", "componentWillReceiveProps", "componentWillUpdate"].forEach(function (t) {
      Object.defineProperty(d$1.prototype, t, {
        configurable: !0,
        get: function () {
          return this["UNSAFE_" + t];
        },
        set: function (n) {
          Object.defineProperty(this, t, {
            configurable: !0,
            writable: !0,
            value: n
          });
        }
      });
    });
    var q = l$1.event;

    function G() {}

    function J() {
      return this.cancelBubble;
    }

    function K() {
      return this.defaultPrevented;
    }

    l$1.event = function (n) {
      return q && (n = q(n)), n.persist = G, n.isPropagationStopped = J, n.isDefaultPrevented = K, n.nativeEvent = n;
    };

    var X = {
      configurable: !0,
      get: function () {
        return this.class;
      }
    },
        nn = l$1.vnode;

    l$1.vnode = function (n) {
      var t = n.type,
          e = n.props,
          u = e;

      if ("string" == typeof t) {
        var o = -1 === t.indexOf("-");

        for (var i in u = {}, e) {
          var l = e[i];
          B && "children" === i && "noscript" === t || "value" === i && "defaultValue" in e && null == l || ("defaultValue" === i && "value" in e && null == e.value ? i = "value" : "download" === i && !0 === l ? l = "" : /ondoubleclick/i.test(i) ? i = "ondblclick" : /^onchange(textarea|input)/i.test(i + t) && !H(e.type) ? i = "oninput" : /^onfocus$/i.test(i) ? i = "onfocusin" : /^onblur$/i.test(i) ? i = "onfocusout" : /^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(i) ? i = i.toLowerCase() : o && z.test(i) ? i = i.replace(/[A-Z0-9]/g, "-$&").toLowerCase() : null === l && (l = void 0), /^oninput$/i.test(i) && (i = i.toLowerCase(), u[i] && (i = "oninputCapture")), u[i] = l);
        }

        "select" == t && u.multiple && Array.isArray(u.value) && (u.value = x$1(e.children).forEach(function (n) {
          n.props.selected = -1 != u.value.indexOf(n.props.value);
        })), "select" == t && null != u.defaultValue && (u.value = x$1(e.children).forEach(function (n) {
          n.props.selected = u.multiple ? -1 != u.defaultValue.indexOf(n.props.value) : u.defaultValue == n.props.value;
        })), n.props = u, e.class != e.className && (X.enumerable = "className" in e, null != e.className && (u.class = e.className), Object.defineProperty(u, "className", X));
      }

      n.$$typeof = j, nn && nn(n);
    };

    var tn = l$1.__r;

    l$1.__r = function (n) {
      tn && tn(n), n.__c;
    };

    const EventDetail = Symbol("event-detail");
    function enhanceEvent(e, detail) {
      const event = e;
      event[EventDetail] = detail;
      return event;
    }
    const alreadyWarned = new Set();
    function warnOnOverwrite(componentName, propName, propValue, newValue) {
      const key = `${componentName};${propName}`;

      if (propValue != null) {
        if (!alreadyWarned.has(key)) {
          alreadyWarned.add(key);
          console.warn(`The ${propName} attribute on ${componentName} was given a value of ${propValue} but is being overwritten to ${newValue} for conformance. Consider removing it before passing those props to ${componentName}.`);
        }
      }

      return newValue;
    }
    function debugLog(who) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      console.debug(who + ":", ...args);
    }

    const HeadingLevelContext = B$2(0);
    const Heading = w(function Heading(_ref) {
      let {
        children,
        heading,
        ...props
      } = _ref;
      const headingLevelBeforeUs = x(HeadingLevelContext);
      const newHeadingLevel = headingLevelBeforeUs + 1;
      let tag;

      if (newHeadingLevel <= 6) {
        tag = `h${newHeadingLevel}`;
      } else {
        tag = 'div';
        props["aria-level"] = warnOnOverwrite("Heading", "aria-level", props["aria-level"], `${newHeadingLevel}`);
      }

      return o$1(p$1, {
        children: o$1(HeadingReset, {
          newLevel: headingLevelBeforeUs + 1,
          children: [h$1(tag, props, heading), children]
        })
      });
    });
    const HeadingReset = w(function HeadingReset(_ref2) {
      let {
        newLevel,
        children
      } = _ref2;
      return o$1(HeadingLevelContext.Provider, {
        value: newLevel,
        children: children
      });
    });

    /**
     * Debug hook.
     *
     * Given a value or set of values, emits a console error if any of them change from one render to the next.
     *
     * Eventually, when useEvent lands, we hopefully won't need this.
     */

    function useEnsureStability(parentHookName) {
      for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        values[_key - 1] = arguments[_key];
      }

      useHelper(values.length, 0);
      values.forEach(useHelper);
      return;

      function useHelper(value, index) {
        // Make sure that the provided functions are perfectly stable across renders
        const helperToEnsureStability = A(value);
        const shownError = A(false);

        if (helperToEnsureStability.current != value) {
          if (!shownError.current) {
            /* eslint-disable no-debugger */
            debugger;
            console.error(`The hook ${parentHookName} requires some or all of its arguments remain stable across each render; please check the ${index}-indexed argument.`);
            shownError.current = true;
          }
        }
      }
    }
    function debounceRendering(f) {
      var _options$debounceRend;

      ((_options$debounceRend = l$1.debounceRendering) !== null && _options$debounceRend !== void 0 ? _options$debounceRend : setTimeout)(f);
    }
    /**
     * Similar to `useState`, but for values that aren't "render-important" &ndash; updates don't cause a re-render and so the value shouldn't be used during render (though it certainly can, at least by re-rendering again).
     *
     * To compensate for this, you should pass a `useEffect`-esque callback that is run whenever the value changes.  Just like `useEffect`, this callback can return a cleanup function that's run before the value changes.  If you would like to re-render when the value changes (or, say, when the value meets some criteria), this is where you'll want to put in a call to a `setState` function.
     *
     * To summarize, it's like a `useState`-`useEffect` mashup:
     *
     * 1. It's like `useState`, except this version of `setState` doesn't re-render the whole component
     * 2. It's like `useState`, except you can run a function when the value changes that optionally returns a cleanup function
     * 3. It's like `useEffect`, except you trigger the effect function "remotely" instead of it running after rendering
     * 4. It's like `useEffect`, except the single "dependency" is based on your calls to `setState`
     *
     * Note that while calling `setState` doesn't cause any re-renders, you can do that within your `onChange` function, called whenever the value changes via that `setState`.
     *
     * @param onChange The "effect" function to run when the value changes. Effectively the same as `useEffect`'s "effect" function.  MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.
     * @param getInitialValue If provided, the effect will be invoked once with this value on mount. MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.
     * @param customDebounceRendering By default, changes to passive state are delayed by one tick so that we only check for changes in a similar way to Preact. You can override this to, for example, always run immediately instead.
     * @returns
     */

    function usePassiveState(onChange, getInitialValue, customDebounceRendering) {
      const valueRef = A(Unset$1);
      const warningRef = A(false);
      const cleanupCallbackRef = A(undefined); // Make sure that the provided functions are perfectly stable across renders

      useEnsureStability("usePassiveState", onChange, getInitialValue, customDebounceRendering); // Shared between "dependency changed" and "component unmounted".

      const onShouldCleanUp = q$1(() => {
        const cleanupCallback = cleanupCallbackRef.current;
        if (cleanupCallback) cleanupCallback();
      }, []); // There are a couple places where we'd like to use our initial
      // value in place of having no value at all yet.
      // This is the shared code for that, used on mount and whenever
      // getValue is called.

      const tryEnsureValue = q$1(() => {
        if (valueRef.current === Unset$1 && getInitialValue != undefined) {
          try {
            var _onChange;

            const initialValue = getInitialValue();
            valueRef.current = initialValue;
            cleanupCallbackRef.current = (_onChange = onChange === null || onChange === void 0 ? void 0 : onChange(initialValue, undefined)) !== null && _onChange !== void 0 ? _onChange : undefined;
          } catch (ex) {// Exceptions are intentional to allow bailout (without exposing the Unset symbol)
          }
        }
      }, [
        /* getInitialValue and onChange intentionally omitted */
      ]);
      const getValue = q$1(() => {
        if (warningRef.current) console.warn("During onChange, prefer using the (value, prevValue) arguments instead of getValue -- it's ambiguous as to if you're asking for the old or new value at this point in time for this component."); // The first time we call getValue, if we haven't been given a value yet,
        // (and we were given an initial value to use)
        // return the initial value instead of nothing.

        if (valueRef.current === Unset$1) tryEnsureValue();
        return valueRef.current === Unset$1 ? undefined : valueRef.current;
      }, []);
      _(() => {
        // Make sure we've run our effect at least once on mount.
        // (If we have an initial value, of course)
        tryEnsureValue();
      }, []); // The actual code the user calls to (possibly) run a new effect.

      const r = A({
        prevDep: Unset$1
      });
      const setValue = q$1(arg => {
        // Regardless of anything else, figure out what our next value is about to be.
        const nextValue = arg instanceof Function ? arg(valueRef.current === Unset$1 ? undefined : valueRef.current) : arg;

        if (r.current.prevDep === Unset$1 && nextValue !== valueRef.current) {
          // This is the first request to change this value.
          // Evaluate the request immediately, then queue up the onChange function
          // Save our current value so that we can compare against it later
          // (if we flip back to this state, then we won't send the onChange function)
          r.current.prevDep = valueRef.current; // Schedule the actual check and invocation of onChange later to let effects settle

          (customDebounceRendering !== null && customDebounceRendering !== void 0 ? customDebounceRendering : debounceRendering)(() => {
            const nextDep = valueRef.current;
            const prevDep = r.current.prevDep;

            if (r.current.prevDep != valueRef.current) {
              warningRef.current = true;

              try {
                var _onChange2;

                // Call any registered cleanup function
                onShouldCleanUp();
                cleanupCallbackRef.current = (_onChange2 = onChange === null || onChange === void 0 ? void 0 : onChange(nextDep, prevDep === Unset$1 ? undefined : prevDep)) !== null && _onChange2 !== void 0 ? _onChange2 : undefined;
                valueRef.current = nextDep;
              } finally {
                // Allow the user to normally call getValue again
                warningRef.current = false;
              }
            } // We've finished with everything, so mark us as being on a clean slate again.


            r.current.prevDep = Unset$1;
          });
        } // Update the value immediately.
        // This will be checked against prevDep to see if we should actually call onChange


        valueRef.current = nextValue;
      }, []);
      return [getValue, setValue];
    }
    const Unset$1 = Symbol(); // Easy constants for getInitialValue

    function returnTrue() {
      return true;
    }
    function returnFalse$1() {
      return false;
    }
    function returnNull() {
      return null;
    }

    /*
    const activeElementUpdaters = new Map<Window | null | undefined, Set<undefined | ((e: Node | null) => void)>>();
    const lastActiveElementUpdaters = new Map<Window | null | undefined, Set<undefined | ((e: Node) => void)>>();
    const windowFocusedUpdaters = new Map<Window | null | undefined, Set<undefined | ((focused: boolean) => void)>>();
    const windowsFocusedUpdaters = new Map<Window | null | undefined, boolean>();*/

    const activeElementUpdaters = new Map();
    const lastActiveElementUpdaters = new Map();
    const windowFocusedUpdaters = new Map();
    const windowsFocusedUpdaters = new Map(); //const microtasks = new Map<Set<any>, any>();
    // The focusin and focusout events often fire syncronously in the middle of running code.
    // E.G. calling element.focus() can cause a focusin event handler to immediately interrupt that code.
    // For the purpose of improving stability, we debounce all focus events to the next microtask.

    function forEachUpdater(window, map, value) {
      const updaters = map.get(window);

      if (updaters) {
        //if (!microtasks.has(updatersKey)) {
        //debounceRendering(() => {
        //const updatersKey = map.get(window)!;
        //const value = microtasks.get(updatersKey);
        //microtasks.delete(updatersKey);
        if (updaters) {
          for (const updater of updaters) {
            const {
              lastSent,
              send
            } = updater;

            if (value !== lastSent) {
              send(value);
              updater.lastSent = value;
            }
          }
        } //});
        //}
        //microtasks.set(updatersKey, value);

      }
    }

    function focusout(e) {
      const window = e.target.ownerDocument.defaultView;

      if (e.relatedTarget == null) {
        forEachUpdater(window, activeElementUpdaters, null);
      }
    }

    function focusin(e) {
      const window = e.target.ownerDocument.defaultView;
      const currentlyFocusedElement = e.target;
      forEachUpdater(window, activeElementUpdaters, currentlyFocusedElement);
      forEachUpdater(window, lastActiveElementUpdaters, currentlyFocusedElement);
    }

    function windowFocus(e) {
      const window = e.target instanceof Window ? e.target : e.currentTarget instanceof Window ? e.currentTarget : e.target.ownerDocument.defaultView;
      windowsFocusedUpdaters.set(window, true);
      forEachUpdater(window, windowFocusedUpdaters, true);
    }

    function windowBlur(e) {
      const window = e.target instanceof Window ? e.target : e.currentTarget instanceof Window ? e.currentTarget : e.target.ownerDocument.defaultView;
      windowsFocusedUpdaters.set(window, false);
      forEachUpdater(window, windowFocusedUpdaters, false);
    }
    /**
     * Allows you to inspect which element in the `document` currently has focus, which was most recently focused if none are currently, and whether or not the window has focus by returning the following functions:
     * * `getActiveElement()`
     * * `getLastActiveElement()`
     * * `getWindowFocused()`
     *
     * (The document's body receiving focus, like it does when you click on an empty area, is counted as no element having focus for all intents and purposes)
     *
     * This is a passive hook, so by default it returns getter functions that report this information but the component will not re-render by default when the active element changes.
     *
     * If you need the component to re-render when the active element changes, use the `on*Change` arguments to set some state on your end.
     */


    function useActiveElement(_ref) {
      let {
        onActiveElementChange,
        onLastActiveElementChange,
        onWindowFocusedChange,
        getDocument,
        getWindow
      } = _ref;
      useEnsureStability("useActiveElement", onActiveElementChange, onLastActiveElementChange, onWindowFocusedChange, getDocument, getWindow);
      s(() => {
        var _getWindow, _activeElementUpdater, _activeElementUpdater2, _activeElementUpdater3, _lastActiveElementUpd, _windowFocusedUpdater;

        const document = getDocument();
        const window = (_getWindow = getWindow === null || getWindow === void 0 ? void 0 : getWindow(document)) !== null && _getWindow !== void 0 ? _getWindow : document === null || document === void 0 ? void 0 : document.defaultView;

        if (((_activeElementUpdater = (_activeElementUpdater2 = activeElementUpdaters.get(window)) === null || _activeElementUpdater2 === void 0 ? void 0 : _activeElementUpdater2.size) !== null && _activeElementUpdater !== void 0 ? _activeElementUpdater : 0) === 0) {
          document === null || document === void 0 ? void 0 : document.addEventListener("focusin", focusin, {
            passive: true
          });
          document === null || document === void 0 ? void 0 : document.addEventListener("focusout", focusout, {
            passive: true
          });
          window === null || window === void 0 ? void 0 : window.addEventListener("focus", windowFocus, {
            passive: true
          });
          window === null || window === void 0 ? void 0 : window.addEventListener("blur", windowBlur, {
            passive: true
          });
        } // Add them even if they're undefined to more easily
        // manage the ">0 means don't add handlers" logic.


        const localActiveElementUpdaters = (_activeElementUpdater3 = activeElementUpdaters.get(window)) !== null && _activeElementUpdater3 !== void 0 ? _activeElementUpdater3 : new Set();
        const localLastActiveElementUpdaters = (_lastActiveElementUpd = lastActiveElementUpdaters.get(window)) !== null && _lastActiveElementUpd !== void 0 ? _lastActiveElementUpd : new Set();
        const localWindowFocusedUpdaters = (_windowFocusedUpdater = windowFocusedUpdaters.get(window)) !== null && _windowFocusedUpdater !== void 0 ? _windowFocusedUpdater : new Set();
        const laeu = {
          send: setActiveElement,
          lastSent: undefined
        };
        const llaeu = {
          send: setLastActiveElement,
          lastSent: undefined
        };
        const lwfu = {
          send: setWindowFocused,
          lastSent: undefined
        };
        localActiveElementUpdaters.add(laeu);
        localLastActiveElementUpdaters.add(llaeu);
        localWindowFocusedUpdaters.add(lwfu);
        activeElementUpdaters.set(window, localActiveElementUpdaters);
        lastActiveElementUpdaters.set(window, localLastActiveElementUpdaters);
        windowFocusedUpdaters.set(window, localWindowFocusedUpdaters);
        return () => {
          activeElementUpdaters.get(window).delete(laeu);
          lastActiveElementUpdaters.get(window).delete(laeu);
          windowFocusedUpdaters.get(window).delete(lwfu);

          if (activeElementUpdaters.size === 0) {
            document === null || document === void 0 ? void 0 : document.removeEventListener("focusin", focusin);
            document === null || document === void 0 ? void 0 : document.removeEventListener("focusout", focusout);
            window === null || window === void 0 ? void 0 : window.removeEventListener("focus", windowFocus);
            window === null || window === void 0 ? void 0 : window.removeEventListener("blur", windowBlur);
          }
        };
      }, []);
      const [getActiveElement, setActiveElement] = usePassiveState(onActiveElementChange, returnNull);
      const [getLastActiveElement, setLastActiveElement] = usePassiveState(onLastActiveElementChange, returnNull);
      const [getWindowFocused, setWindowFocused] = usePassiveState(onWindowFocusedChange, returnTrue);
      return {
        getActiveElement,
        getLastActiveElement,
        getWindowFocused
      };
    }

    const Table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";

    function base64(value) {
      return Table[value];
    }

    function random6Bits() {
      return Math.floor(Math.random() * 0b1000000);
    }

    function random64Bits() {
      return [random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits()];
    }
    /**
     * Returns a randomly-generated ID with an optional prefix.
     * Note that if the prefix is *explicitly* set to "", then
     * IDs that are not valid under HTML4 may be generated. Oh no.
     *
     *
     * (This is here, in this particular file, to avoid circular dependencies
     * without also making a utilities file.
     * Once we can remove this hook, we can put this function back with useRandomId)
     */


    function generateRandomId(prefix) {
      return `${prefix !== null && prefix !== void 0 ? prefix : "id-"}${random64Bits().map(n => base64(n)).join("")}`;
    }
    const previousInputs = new Map();
    const toRun = new Map(); // TODO: Whether this goes in options.diffed or options._commit
    // is a post-suspense question.
    // Right now, using options._commit has the problem of running
    // *after* refs are applied, but we need to come before even that
    // so `ref={someStableFunction}` works.
    // 
    // Also it's private.
    //
    // ...
    // Well, useEvent or whatever is finally, finally 4 years later finally here
    // which is cool and means we won't need this at all soon.
    // So for now we'll stick with diff to prevent any weirdness with
    // commit being private and all.

    const commitName = "diffed";
    const originalCommit = l$1[commitName];

    const newCommit = function () {
      for (const [id, effectInfo] of toRun) {
        const oldInputs = previousInputs.get(id);

        if (argsChanged(oldInputs, effectInfo.inputs)) {
          var _effectInfo$cleanup;

          (_effectInfo$cleanup = effectInfo.cleanup) === null || _effectInfo$cleanup === void 0 ? void 0 : _effectInfo$cleanup.call(effectInfo);
          effectInfo.cleanup = effectInfo.effect();
          previousInputs.set(id, effectInfo.inputs);
        }
      }

      toRun.clear();

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      originalCommit === null || originalCommit === void 0 ? void 0 : originalCommit(...args);
    };

    l$1[commitName] = newCommit;
    /**
     * Semi-private function to allow stable callbacks even within `useLayoutEffect` and ref assignment.
     *
     * Every render, we send the arguments to be evaluated after diffing has completed,
     * which happens before.
     *
     * @param effect
     * @param inputs
     */

    function useBeforeLayoutEffect(effect, inputs) {
      /*(() => {
          const cleanup = useRef<void | (() => void) | null>(null);
          const prevArgsRef = useRef<Inputs>(null!);
          if (argsChanged(inputs, prevArgsRef.current)) {
              prevArgsRef.current = inputs!;
              if (cleanup.current)
                  cleanup.current();
              cleanup.current = effect();
          }
      })();*/
      const [id] = y(() => generateRandomId());
      toRun.set(id, {
        effect,
        inputs,
        cleanup: null
      });
      s(() => {
        return () => {
          toRun.delete(id);
          previousInputs.delete(id);
        };
      }, [id]);
    }

    function argsChanged(oldArgs, newArgs) {
      return !!(!oldArgs || oldArgs.length !== (newArgs === null || newArgs === void 0 ? void 0 : newArgs.length) || newArgs !== null && newArgs !== void 0 && newArgs.some((arg, index) => arg !== oldArgs[index]));
    }

    const Unset = Symbol("unset");
    /**
     * Given an input value, returns a constant getter function that can be used
     * inside of `useEffect` and friends without including it in the dependency array.
     *
     * This uses `options.diffed` in order to run before everything, even
     * ref assignment. This means this getter is safe to use anywhere ***except the render phase***.
     *
     * @param value
     * @returns
     */

    function useStableGetter(value) {
      const ref = A(Unset);
      useBeforeLayoutEffect(() => {
        ref.current = value;
      }, [value]);
      return q$1(() => {
        if (ref.current === Unset) {
          throw new Error('Value retrieved from useStableGetter() cannot be called during render.');
        }

        return ref.current;
      }, []);
    }

    /**
     * Alternate useCallback() which always returns the same (wrapped) function reference
     * so that it can be excluded from the dependency arrays of `useEffect` and friends.
     *
     * Do not use during the render phase!  `useLayoutEffect` is fine though.
     */

    function useStableCallback(fn) {
      const currentCallbackGetter = useStableGetter(fn);
      return q$1(function () {
        return currentCallbackGetter()(...arguments);
      }, []);
    }

    B$2(null);

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

    /** Detect free variable `self`. */

    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    /** Used as a reference to the global object. */

    var root = freeGlobal || freeSelf || Function('return this')();

    /** Built-in value references. */

    var Symbol$1 = root.Symbol;

    /** Used for built-in method references. */

    var objectProto$5 = Object.prototype;
    /** Used to check objects for own properties. */

    var hasOwnProperty$3 = objectProto$5.hasOwnProperty;
    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */

    var nativeObjectToString$1 = objectProto$5.toString;
    /** Built-in value references. */

    var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;
    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */

    function getRawTag(value) {
      var isOwn = hasOwnProperty$3.call(value, symToStringTag$1),
          tag = value[symToStringTag$1];

      try {
        value[symToStringTag$1] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString$1.call(value);

      if (unmasked) {
        if (isOwn) {
          value[symToStringTag$1] = tag;
        } else {
          delete value[symToStringTag$1];
        }
      }

      return result;
    }

    /** Used for built-in method references. */
    var objectProto$4 = Object.prototype;
    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */

    var nativeObjectToString = objectProto$4.toString;
    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */

    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /** `Object#toString` result references. */

    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';
    /** Built-in value references. */

    var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;
    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */

    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }

      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Slightly enhanced version of `useState` that includes a getter that remains constant
     * (i.e. you can use it in `useEffect` and friends without it being a dependency).
     *
     * @param initialState
     * @returns
     */

    function useState(initialState) {
      // We keep both, but overrride the `setState` functionality
      const [state, setStateP] = y(initialState);
      const ref = A(state); // Hijack the normal setter function 
      // to also set our ref to the new value

      const setState = q$1(value => {
        if (typeof value === "function") {
          const callback = value;
          setStateP(prevValue => {
            const nextValue = callback(prevValue);
            ref.current = nextValue;
            return nextValue;
          });
        } else {
          ref.current = value;
          setStateP(value);
        }
      }, []);

      const getState = () => {
        return ref.current;
      };

      console.assert(ref.current === state || typeof state === "number" && isNaN(state));
      return [state, setState, getState];
    }

    /**
     * Allows a parent component to access information about certain
     * child components once they have rendered.
     *
     * This hook is designed to be lightweight, in that the parent keeps no state
     * and runs no effects.  Each child *does* run an effect, but with no state
     * changes unless you explicitly request them.
     *
     *
     */


    function useManagedChildren(parentParameters) {
      const {
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        }
      } = parentParameters;
      useEnsureStability("useManagedChildren", onAfterChildLayoutEffect, onChildrenMountChange);
      const getHighestIndex = q$1(() => {
        return managedChildrenArray.current.highestIndex;
      }, []); // All the information we have about our children is stored in this **stable** array.
      // Any mutations to this array **DO NOT** trigger any sort of a re-render.

      const managedChildrenArray = A({
        arr: [],
        rec: {},
        highestIndex: 0,
        lowestIndex: 0
      }); // For indirect access to each child
      // Compare getManagedChildInfo
      // TODO: The primary use for this is flaggable closest fits
      // which needs to search all children for that closest fit.
      // It would be nice if there was something better for that.

      const forEachChild = q$1(f => {
        for (const child of managedChildrenArray.current.arr) {
          if (child) f(child);
        }

        for (const field in managedChildrenArray.current.rec) {
          const child = managedChildrenArray.current.rec[field];
          if (child) f(child);
        }
      }, []); // Retrieves the information associated with the child with the given index.
      // `undefined` if not child there, or it's unmounted.

      const getManagedChildInfo = q$1(index => {
        if (typeof index == "number") return managedChildrenArray.current.arr[index];else return managedChildrenArray.current.rec[index];
      }, []); // tl;dr this is a way to have run useLayoutEffect once after all N children
      // have mounted and run *their* useLayoutEffect, but also *without* re-rendering
      // ourselves because of having a `childCount` state or anything similar.
      //
      // When the child count ref updates, we want the parent to also run an effect
      // to maybe do something with all these children that just mounted.
      // The easiest way would be useEffect(..., [childCount]) but
      // that would require us having a childCount state, then calling
      // setChildCount and re-rendering every time children mount
      // (only one re-render at a time unless children are staggered, but still)
      // 
      // As an alternate solution, any time a child uses ULE on mount, it queues a microtask
      // to emulate running ULE on the parent. Only the first child will actually queue
      // the microtask (by checking hasRemoteULE first) so that the "effect" only
      // runs once. When it's done, hasRemoteULE is reset so it can run again if
      // more children mount/unmount.

      const hasRemoteULEChildMounted = A(null);
      const remoteULEChildChangedCausers = A(new Set());
      const remoteULEChildChanged = q$1(index => {
        if (remoteULEChildChangedCausers.current.size == 0) {
          debounceRendering(() => {
            onAfterChildLayoutEffect === null || onAfterChildLayoutEffect === void 0 ? void 0 : onAfterChildLayoutEffect(remoteULEChildChangedCausers.current);
            remoteULEChildChangedCausers.current.clear();
          });
        }

        remoteULEChildChangedCausers.current.add(index);
        return () => {};
      }, [
        /* Must remain stable */
      ]);
      const remoteULEChildMounted = q$1((index, mounted) => {
        if (!hasRemoteULEChildMounted.current) {
          hasRemoteULEChildMounted.current = {
            mounts: new Set(),
            unmounts: new Set()
          };
          debounceRendering(() => {
            onChildrenMountChange === null || onChildrenMountChange === void 0 ? void 0 : onChildrenMountChange(hasRemoteULEChildMounted.current.mounts, hasRemoteULEChildMounted.current.unmounts);
            hasRemoteULEChildMounted.current = null;
          });
        }

        if (mounted) {
          managedChildrenArray.current.highestIndex = Math.max(managedChildrenArray.current.highestIndex, index);
        } else {
          if (typeof index == "number") {
            delete managedChildrenArray.current.arr[index];
            let shave = 0;

            while (shave <= managedChildrenArray.current.arr.length && managedChildrenArray.current.arr[managedChildrenArray.current.arr.length - 1 - shave] === undefined) {
              ++shave;
            }

            managedChildrenArray.current.arr.splice(managedChildrenArray.current.arr.length - shave, shave);
          } else delete managedChildrenArray.current.rec[index];
        }

        hasRemoteULEChildMounted.current[mounted ? "mounts" : "unmounts"].add(index);
      }, [
        /* Must remain stable */
      ]);
      const useManagedChild = q$1(_ref => {
        let {
          managedChild: info
        } = _ref;
        // Any time our child props change, make that information available
        // the parent if they need it.
        // The parent can listen for all updates and only act on the ones it cares about,
        // and multiple children updating in the same tick will all be sent at once.
        _(() => {
          // Insert this information in-place
          if (typeof info.index == "number") {
            var _info$flags;

            managedChildrenArray.current.arr[info.index] = {
              index: info.index,
              flags: (_info$flags = info.flags) !== null && _info$flags !== void 0 ? _info$flags : {},
              subInfo: info.subInfo
            };
          } else {
            var _info$flags2;

            managedChildrenArray.current.rec[info.index] = {
              index: info.index,
              flags: (_info$flags2 = info.flags) !== null && _info$flags2 !== void 0 ? _info$flags2 : {},
              subInfo: info.subInfo
            };
          }

          return remoteULEChildChanged(info.index);
        }, [...Object.entries(info).flat(9)]); // 9 is infinity, right? Sure. Unrelated: TODO.
        // When we mount, notify the parent via queueMicrotask
        // (every child does this, so everything's coordinated to only queue a single microtask per tick)
        // Do the same on unmount.
        // Note: It's important that this comes AFTER remoteULEChildChanged
        // so that remoteULEChildMounted has access to all the info on mount.

        _(() => {
          remoteULEChildMounted === null || remoteULEChildMounted === void 0 ? void 0 : remoteULEChildMounted(info.index, true);
          return () => remoteULEChildMounted === null || remoteULEChildMounted === void 0 ? void 0 : remoteULEChildMounted(info.index, false);
        }, [info.index]);
      }, [
        /* Must remain stable */
      ]);
      const managedChildren = A({ ...{
          _: managedChildrenArray.current
        },
        forEach: forEachChild,
        getAt: getManagedChildInfo,
        getHighestIndex: getHighestIndex,
        arraySlice: () => {
          return managedChildrenArray.current.arr.slice();
        }
      });
      return {
        useManagedChild,
        managedChildren: {
          children: managedChildren.current
        }
      };
    }
    /**
     * An extension to useManagedChildren that handles the following common case:
     * 1. You have a bunch of children
     * 2. At any given time, only 1 of them is "selected", "activated", "focusable", whatever (or 0 of them, that's cool too, just 0 or 1 though).
     * 3. The parent has control over who is "selected" via a numerical index.
     *
     * This hook allows for much easier control over selection management.
     *
     * Note that because you may want to use multiple flags with the same children, this hook *does not* use `useManagedChildren`!
     * You need to pass it the existing children, and you must pass your invocation of `useManagedChildren` the returned `onChildrenMountChange` handler!
     *
     * Also because of that, the types of this function are rather odd.  It's better to start off using a hook that already uses a flag, such as `useRovingTabIndex`, as an example.
     *
     *
     * @param param0
     * @returns
     */

    function useChildrenFlag(_ref2) {
      let {
        children,
        initialIndex,
        closestFit,
        onIndexChange,
        key
      } = _ref2;
      useEnsureStability("useChildrenFlag", onIndexChange, key);
      const [getCurrentIndex, setCurrentIndex] = usePassiveState(onIndexChange, q$1(() => initialIndex !== null && initialIndex !== void 0 ? initialIndex : null, []));
      const [getRequestedIndex, setRequestedIndex] = usePassiveState(null, q$1(() => initialIndex !== null && initialIndex !== void 0 ? initialIndex : null, [])); //    const getFitNullToZero = useStableGetter(fitNullToZero);
      // Shared between onChildrenMountChange and changeIndex, not public (but could be I guess)

      const getClosestFit = q$1(requestedIndex => {
        let closestDistance = Infinity;
        let closestIndex = null;
        children.forEach(child => {
          var _child$flags, _child$flags$key;

          if ((_child$flags = child.flags) !== null && _child$flags !== void 0 && (_child$flags$key = _child$flags[key]) !== null && _child$flags$key !== void 0 && _child$flags$key.isValid()) {
            const newDistance = Math.abs(child.index - requestedIndex);

            if (newDistance < closestDistance || newDistance == closestDistance && child.index < requestedIndex) {
              closestDistance = newDistance;
              closestIndex = child.index;
            }
          }
        });
        return closestIndex;
      }, [
        /* Must remain stable! */
      ]); // Any time a child mounts/unmounts, we need to double-check to see if that affects 
      // the "currently selected" (or whatever) index.  The two cases we're looking for:
      // 1. The currently selected child unmounted
      // 2. A child mounted, and it mounts with the index we're looking for

      const reevaluateClosestFit = useStableCallback(() => {
        var _currentChild$flags, _currentChild$flags$k;

        const requestedIndex = getRequestedIndex();
        const currentIndex = getCurrentIndex();
        const currentChild = currentIndex == null ? null : children.getAt(currentIndex);

        if (requestedIndex != null && closestFit && (requestedIndex != currentIndex || currentChild == null || !((_currentChild$flags = currentChild.flags) !== null && _currentChild$flags !== void 0 && (_currentChild$flags$k = _currentChild$flags[key]) !== null && _currentChild$flags$k !== void 0 && _currentChild$flags$k.isValid()))) {
          var _currentChild$flags2;

          currentChild === null || currentChild === void 0 ? void 0 : (_currentChild$flags2 = currentChild.flags) === null || _currentChild$flags2 === void 0 ? void 0 : _currentChild$flags2[key].set(false);
          const closestFitIndex = getClosestFit(requestedIndex);
          setCurrentIndex(closestFitIndex);

          if (closestFitIndex != null) {
            var _closestFitChild$flag;

            const closestFitChild = children.getAt(closestFitIndex);
            console.assert(closestFitChild != null, "Internal logic???");
            (_closestFitChild$flag = closestFitChild.flags) === null || _closestFitChild$flag === void 0 ? void 0 : _closestFitChild$flag[key].set(true);
          }
        }
      });
      const changeIndex = q$1(arg => {
        const requestedIndex = arg instanceof Function ? arg(getRequestedIndex()) : arg; //if (requestedIndex == null && getFitNullToZero())
        //    requestedIndex = 0;

        setRequestedIndex(requestedIndex);
        const currentIndex = getCurrentIndex();
        if (currentIndex == requestedIndex) return requestedIndex;
        let newMatchingChild = requestedIndex == null ? null : children.getAt(requestedIndex);
        const oldMatchingChild = currentIndex == null ? null : children.getAt(currentIndex);

        if (requestedIndex == null) {
          var _oldMatchingChild$fla;

          // Easy case
          setCurrentIndex(null);
          oldMatchingChild === null || oldMatchingChild === void 0 ? void 0 : (_oldMatchingChild$fla = oldMatchingChild.flags) === null || _oldMatchingChild$fla === void 0 ? void 0 : _oldMatchingChild$fla[key].set(false);
          return null;
        } else {
          var _newMatchingChild$fla;

          if (newMatchingChild && (_newMatchingChild$fla = newMatchingChild.flags) !== null && _newMatchingChild$fla !== void 0 && _newMatchingChild$fla[key].isValid()) {
            var _oldMatchingChild$fla2, _newMatchingChild$fla2;

            setCurrentIndex(requestedIndex);
            oldMatchingChild === null || oldMatchingChild === void 0 ? void 0 : (_oldMatchingChild$fla2 = oldMatchingChild.flags) === null || _oldMatchingChild$fla2 === void 0 ? void 0 : _oldMatchingChild$fla2[key].set(false);
            (_newMatchingChild$fla2 = newMatchingChild.flags) === null || _newMatchingChild$fla2 === void 0 ? void 0 : _newMatchingChild$fla2[key].set(true);
            return requestedIndex;
          } else {
            const closestFitIndex = getClosestFit(requestedIndex);
            setCurrentIndex(closestFitIndex);

            if (closestFitIndex != null) {
              var _oldMatchingChild$fla3, _newMatchingChild$fla3;

              newMatchingChild = children.getAt(closestFitIndex);
              console.assert(newMatchingChild != null, "Internal logic???");
              oldMatchingChild === null || oldMatchingChild === void 0 ? void 0 : (_oldMatchingChild$fla3 = oldMatchingChild.flags) === null || _oldMatchingChild$fla3 === void 0 ? void 0 : _oldMatchingChild$fla3[key].set(false);
              (_newMatchingChild$fla3 = newMatchingChild.flags) === null || _newMatchingChild$fla3 === void 0 ? void 0 : _newMatchingChild$fla3[key].set(true);
              return closestFitIndex;
            } else {
              var _oldMatchingChild$fla4;

              oldMatchingChild === null || oldMatchingChild === void 0 ? void 0 : (_oldMatchingChild$fla4 = oldMatchingChild.flags) === null || _oldMatchingChild$fla4 === void 0 ? void 0 : _oldMatchingChild$fla4[key].set(false);
              return null;
            }
          }
        }
      }, []);
      _(() => {
        var _children$getAt, _children$getAt$flags, _children$getAt$flags2;

        if (initialIndex != null) (_children$getAt = children.getAt(initialIndex)) === null || _children$getAt === void 0 ? void 0 : (_children$getAt$flags = _children$getAt.flags) === null || _children$getAt$flags === void 0 ? void 0 : (_children$getAt$flags2 = _children$getAt$flags[key]) === null || _children$getAt$flags2 === void 0 ? void 0 : _children$getAt$flags2.set(true);
      }, []);
      return {
        changeIndex,
        reevaluateClosestFit,
        getCurrentIndex
      };
    }

    function r(e) {
      var t,
          f,
          n = "";
      if ("string" == typeof e || "number" == typeof e) n += e;else if ("object" == typeof e) if (Array.isArray(e)) for (t = 0; t < e.length; t++) e[t] && (f = r(e[t])) && (n && (n += " "), n += f);else for (t in e) e[t] && (n && (n += " "), n += t);
      return n;
    }

    function clsx() {
      for (var e, t, f = 0, n = ""; f < arguments.length;) (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);

      return n;
    }

    function getDocument$a(element) {
      var _ref, _ref2, _element$ownerDocumen;

      return (_ref = (_ref2 = (_element$ownerDocumen = element === null || element === void 0 ? void 0 : element.ownerDocument) !== null && _element$ownerDocumen !== void 0 ? _element$ownerDocumen : document) !== null && _ref2 !== void 0 ? _ref2 : window.document) !== null && _ref !== void 0 ? _ref : globalThis.document;
    }

    function useMergedChildren(_ref, _ref2) {
      let {
        children: lhs
      } = _ref;
      let {
        children: rhs
      } = _ref2;

      if (lhs == null && rhs == null) {
        return undefined;
      } else if (lhs == null) {
        return rhs;
      } else if (rhs == null) {
        return lhs;
      } else {
        return h$1(p$1, {}, lhs, rhs);
      }
    }

    /**
     * Given two sets of props, merges their `class` and `className` properties.
     * Duplicate classes are removed (order doesn't matter anyway).
     *
     * @param lhs Classes of the first component
     * @param rhs Classes of the second component
     * @returns A string representing all combined classes from both arguments.
     */

    function useMergedClasses(_ref, _ref2) {
      let {
        class: lhsClass,
        className: lhsClassName
      } = _ref;
      let {
        class: rhsClass,
        className: rhsClassName
      } = _ref2;

      // Note: For the sake of forward compatibility, this function is labelled as
      // a hook, but as it uses no other hooks it technically isn't one.
      if (lhsClass || rhsClass || lhsClassName || rhsClassName) {
        const lhsClasses = clsx(lhsClass, lhsClassName).split(" ");
        const rhsClasses = clsx(rhsClass, rhsClassName).split(" ");
        const allClasses = new Set([...Array.from(lhsClasses), ...Array.from(rhsClasses)]);
        return Array.from(allClasses).join(" ");
      } else {
        return undefined;
      }
    }

    function processRef(instance, ref) {
      if (typeof ref === "function") {
        ref(instance);
      } else if (ref != null) {
        ref.current = instance;
      } else {
        /* eslint-disable no-debugger */
        debugger;
        console.assert(false, "Unknown ref type found that was neither a RefCallback nor a RefObject");
      }
    }
    /**
     * Combines two refs into one. This allows a component to both use its own ref *and* forward a ref that was given to it.
     * @param lhs
     * @param rhs
     * @returns
     */


    function useMergedRefs(_ref, _ref2) {
      let {
        ref: rhs
      } = _ref;
      let {
        ref: lhs
      } = _ref2;
      const combined = q$1(current => {
        processRef(current, lhs);
        processRef(current, rhs);
      }, [lhs, rhs]);

      if (lhs == null && rhs == null) {
        return undefined;
      } else if (lhs == null) {
        return rhs;
      } else if (rhs == null) {
        return lhs;
      } else {
        return combined;
      }
    }

    function styleStringToObject(style) {
      // TODO: This sucks D:
      return Object.fromEntries(style.split(";").map(statement => statement.split(":")));
    }
    /**
     * Merges two style objects, returning the result.
     *
     * @param style The user-given style prop for this component
     * @param obj The CSS properties you want added to the user-given style
     * @returns A CSS object containing the properties of both objects.
     */


    function useMergedStyles(lhs, rhs) {
      var _lhs$style, _rhs$style2;

      // Easy case, when there are no styles to merge return nothing.
      if (!(lhs !== null && lhs !== void 0 && lhs.style) && !(rhs !== null && rhs !== void 0 && rhs.style)) return undefined;

      if (typeof lhs != typeof rhs) {
        // Easy cases, when one is null and the other isn't.
        if (lhs !== null && lhs !== void 0 && lhs.style && !(rhs !== null && rhs !== void 0 && rhs.style)) return lhs.style;
        if (!(lhs !== null && lhs !== void 0 && lhs.style) && rhs !== null && rhs !== void 0 && rhs.style) return rhs.style; // They're both non-null but different types.
        // Convert the string type to an object bag type and run it again.

        if (lhs !== null && lhs !== void 0 && lhs.style && rhs !== null && rhs !== void 0 && rhs.style) {
          // (useMergedStyles isn't a true hook -- this isn't a violation)
          if (typeof (lhs === null || lhs === void 0 ? void 0 : lhs.style) == "string") return useMergedStyles({
            style: styleStringToObject(lhs === null || lhs === void 0 ? void 0 : lhs.style)
          }, rhs);
          if (typeof (rhs === null || rhs === void 0 ? void 0 : rhs.style) == "string") return useMergedStyles(lhs, {
            style: styleStringToObject(rhs === null || rhs === void 0 ? void 0 : rhs.style)
          });
        } // Logic???


        return undefined;
      } // They're both strings, just concatenate them.


      if (typeof (lhs === null || lhs === void 0 ? void 0 : lhs.style) == "string") {
        var _rhs$style;

        return `${lhs.style};${(_rhs$style = rhs === null || rhs === void 0 ? void 0 : rhs.style) !== null && _rhs$style !== void 0 ? _rhs$style : ""}`;
      } // They're both objects, just merge them.


      return { ...((_lhs$style = lhs === null || lhs === void 0 ? void 0 : lhs.style) !== null && _lhs$style !== void 0 ? _lhs$style : {}),
        ...((_rhs$style2 = rhs === null || rhs === void 0 ? void 0 : rhs.style) !== null && _rhs$style2 !== void 0 ? _rhs$style2 : {})
      };
    }

    let log = console.warn;
    /**
     * Given two sets of props, merges them and returns the result.
     *
     * The hook is aware of and can intelligently merge `className`, `class`, `style`, `ref`, and all event handlers.
     * @param lhs2
     * @param rhs2
     * @returns
     */

    function useMergedProps(lhsAll, rhsAll) {
      // First, separate the props we were given into two groups:
      // lhsAll and rhsAll contain all the props we were given, and
      // lhsMisc and rhsMisc contain all props *except* for the easy ones
      // like className and style that we already know how to merge.
      const {
        children: _lhsChildren,
        class: _lhsClass,
        className: _lhsClassName,
        style: _lhsStyle,
        ref: _lhsRef,
        ...lhsMisc
      } = lhsAll;
      const {
        children: _rhsChildren,
        class: _rhsClass,
        className: _rhsClassName,
        style: _rhsStyle,
        ref: _rhsRef,
        ...rhsMisc
      } = rhsAll;
      const ret = { ...lhsMisc,
        ref: useMergedRefs(lhsAll, rhsAll),
        style: useMergedStyles(lhsAll, rhsAll),
        className: useMergedClasses(lhsAll, rhsAll),
        children: useMergedChildren(lhsAll, rhsAll)
      };
      if (ret.ref === undefined) delete ret.ref;
      if (ret.style === undefined) delete ret.style;
      if (ret.className === undefined) delete ret.className;
      if (ret.children === undefined) delete ret.children; // Now, do *everything* else
      // Merge every remaining existing entry in lhs with what we've already put in ret.
      //const lhsEntries = Object.entries(lhs) as [keyof T, T[keyof T]][];

      const rhsEntries = Object.entries(rhsMisc);

      for (const [rhsKeyU, rhsValue] of rhsEntries) {
        const rhsKey = rhsKeyU;
        const lhsValue = lhsMisc[rhsKey];

        if (typeof lhsValue === "function" || typeof rhsValue === "function") {
          // They're both functions that can be merged (or one's a function and the other's null).
          // Not an *easy* case, but a well-defined one.
          const merged = mergeFunctions(lhsValue, rhsValue);
          ret[rhsKey] = merged;
        } else {
          // Uh...we're here because one of them's null, right?
          if (lhsValue == null && rhsValue == null) {
            if (rhsValue === null && lhsValue === undefined) ret[rhsKey] = rhsValue;else ret[rhsKey] = lhsValue;
          }

          if (lhsValue == null) ret[rhsKey] = rhsValue;else if (rhsValue == null) ret[rhsKey] = lhsValue;else if (rhsValue == lhsValue) ; else {
            var _log;

            // Ugh.
            // No good strategies here, just log it if requested
            (_log = log) === null || _log === void 0 ? void 0 : _log(`The prop "${rhsKey}" cannot simultaneously be the values ${lhsValue} and ${rhsValue}. One must be chosen outside of useMergedProps.`);
            ret[rhsKey] = rhsValue;
          }
        }
      }

      return ret;
    }

    function mergeFunctions(lhs, rhs) {
      if (!lhs) return rhs;
      if (!rhs) return lhs;
      return function () {
        const lv = lhs(...arguments);
        const rv = rhs(...arguments);
        if (lv instanceof Promise || rv instanceof Promise) return Promise.all([lv, rv]);
      };
    }
    /*
    function test<P extends h.JSX.HTMLAttributes<HTMLInputElement>>(props: P) {

        const id0: GenericGet<{}, "id", string> = "";
        const id3: GenericGet<{ id: undefined }, "id", string> = undefined;
        const id4: GenericGet<{ id: undefined }, "id", string> = undefined;
        const id5: GenericGet<{ id: undefined }, "id", string> = undefined;
        const id6: GenericGet<{ id: undefined }, "id", string> = undefined;
        //const id2: ZipSingle<string | undefined, string | undefined> = undefined;
        const id1: ZipObject<{ id: undefined }, { id: string }> = { id: undefined };

        type M1 = GenericGet<P, "style", string>;
        type M2 = GenericGet<{}, "style", string>;
        const m1: M1 = "";
        const m2: M1 = undefined;
        /// @ts-expect-error    Because number isn't assignable to string
        const m3: M1 = 0;

        const m4: M2 = "";
        const m5: M2 = undefined;
        /// @ts-expect-error    Because number isn't assignable to string
        const m6: M2 = 0;

        const p1: MergedProps<HTMLInputElement, {}, { id: string }> = useMergedProps<HTMLInputElement>()({}, { id: "string" });
        const p2: MergedProps<HTMLInputElement, { id: undefined }, { id: string }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: "string" });
        const p3: MergedProps<HTMLInputElement, { id: undefined }, { id: undefined }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: undefined });
        const p4: MergedProps<HTMLInputElement, {}, {}> = useMergedProps<HTMLInputElement>()({}, {});
        const p5 = useMergedProps<HTMLInputElement>()(props, {});
        const p6 = useMergedProps<HTMLInputElement>()(props, { id: undefined });
        const p7 = useMergedProps<HTMLInputElement>()(props, { id: "string" });


        p1.id?.concat("");
        p2.id?.concat("");
        /// @ts-expect-error    id can't be anything but undefined
        p3.id?.concat("");
        /// @ts-expect-error    id can't be anything but undefined
        p4.id?.concat("");


        p5.id?.concat("");
        p6.id?.concat("");
        p7.id?.concat("");

        /// @ts-expect-error    id must contain undefined
        p5.id.concat("");
        /// @ts-expect-error    id must contain undefined
        p6.id.concat("");
        /// @ts-expect-error    id must contain undefined
        p7.id.concat("");


        if (p5.allowFullScreen === undefined) {}
        else if (p5.allowFullScreen === false) {}
        else if (p5.allowFullScreen === true) {}
        else {
            acceptsNever(p5.allowFullScreen);
        }


        if (p6.allowFullScreen === undefined) {}
        else if (p6.allowFullScreen === false) {}
        else if (p6.allowFullScreen === true) {}
        else {
            acceptsNever(p6.allowFullScreen);
        }


        if (p7.allowFullScreen === undefined) {}
        else if (p7.allowFullScreen === false) {}
        else if (p7.allowFullScreen === true) {}
        else {
            acceptsNever(p7.allowFullScreen);
        }


        // Make sure it works recursively
        const r1a = useMergedProps<HTMLInputElement>()({}, p1);
        const r1b = useMergedProps<HTMLInputElement>()(props, p1);
        const r2a = useMergedProps<HTMLInputElement>()({}, p2);
        const r2b = useMergedProps<HTMLInputElement>()(props, p2);
        const r3a = useMergedProps<HTMLInputElement>()({}, p3);
        const r3b = useMergedProps<HTMLInputElement>()(props, p3);
        const r4a = useMergedProps<HTMLInputElement>()({}, p4);
        const r4b = useMergedProps<HTMLInputElement>()(props, p4);
        const r5a = useMergedProps<HTMLInputElement>()({}, p5);
        const r5b = useMergedProps<HTMLInputElement>()(props, p5);
        const r6a = useMergedProps<HTMLInputElement>()({}, p6);
        const r6b = useMergedProps<HTMLInputElement>()(props, p6);
        const r7a = useMergedProps<HTMLInputElement>()({}, p7);
        const r7b = useMergedProps<HTMLInputElement>()(props, p7);


        r1a.id?.concat("");
        r1b.id?.concat("");
        r2a.id?.concat("");
        r2b.id?.concat("");
        // @ts-expect-error    id can't be anything but undefined
        r3a.id?.concat("");
        r3b.id?.concat("");
        /// @ts-expect-error    id can't be anything but undefined
        r4a.id?.concat("");
        r4b.id?.concat("");


        r5a.id?.concat("");
        r5b.id?.concat("");
        r6a.id?.concat("");
        r6b.id?.concat("");
        r7a.id?.concat("");
        r7b.id?.concat("");

        /// @ts-expect-error    id must contain undefined
        r5a.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r5b.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r6a.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r6b.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r7a.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r7b.id.concat("");


        if (r5a.allowFullScreen === undefined) {}
        else if (r5a.allowFullScreen === false) {}
        else if (r5a.allowFullScreen === true) {}
        else {
            acceptsNever(r5a.allowFullScreen);
        }


        if (r5b.allowFullScreen === undefined) {}
        else if (r5b.allowFullScreen === false) {}
        else if (r5b.allowFullScreen === true) {}
        else {
            acceptsNever(r5b.allowFullScreen);
        }


        if (r6a.allowFullScreen === undefined) {}
        else if (r6a.allowFullScreen === false) {}
        else if (r6a.allowFullScreen === true) {}
        else {
            acceptsNever(r6a.allowFullScreen);
        }


        if (r6b.allowFullScreen === undefined) {}
        else if (r6b.allowFullScreen === false) {}
        else if (r6b.allowFullScreen === true) {}
        else {
            acceptsNever(r6b.allowFullScreen);
        }


        if (r7a.allowFullScreen === undefined) {}
        else if (r7a.allowFullScreen === false) {}
        else if (r7a.allowFullScreen === true) {}
        else {
            acceptsNever(r7a.allowFullScreen);
        }


        if (r7b.allowFullScreen === undefined) {}
        else if (r7b.allowFullScreen === false) {}
        else if (r7b.allowFullScreen === true) {}
        else {
            acceptsNever(r7b.allowFullScreen);
        }

    }
    function acceptsNever(n: never) {}
    */

    /**
     * Allows accessing the element a ref references as soon as it does so.
     * *This hook itself returns a hook*--useRefElementProps modifies the props that you were going to pass to an HTMLElement,
     * adding a RefCallback and merging it with any existing ref that existed on the props.
     *
     * Don't forget to provide the Element as the type argument!
     *
     * @returns The element, and the sub-hook that makes it retrievable.
     */

    function useRefElement(args) {
      const {
        onElementChange,
        onMount,
        onUnmount
      } = args !== null && args !== void 0 ? args : {};
      useEnsureStability("useRefElement", onElementChange, onMount, onUnmount); // Called (indirectly) by the ref that the element receives.

      const handler = q$1((e, prevValue) => {
        const cleanup = onElementChange === null || onElementChange === void 0 ? void 0 : onElementChange(e, prevValue);
        if (prevValue) onUnmount === null || onUnmount === void 0 ? void 0 : onUnmount(prevValue);
        if (e) onMount === null || onMount === void 0 ? void 0 : onMount(e);
        return cleanup;
      }, []); // Let us store the actual (reference to) the element we capture

      const [getElement, setElement] = usePassiveState(handler, returnNull, runImmediately);
      const useRefElementProps = q$1(props => useMergedProps({
        ref: setElement
      }, props), []); // Return both the element and the hook that modifies 
      // the props and allows us to actually find the element

      return {
        useRefElementProps,
        getElement
      };
    }

    function runImmediately(f) {
      f();
    }

    function useElementSize(_ref) {
      let {
        getObserveBox,
        onSizeChange
      } = _ref;
      useEnsureStability("useElementSize", getObserveBox, onSizeChange);
      const [getSize, setSize] = usePassiveState(onSizeChange, returnNull);
      const currentObserveBox = A(undefined);
      const needANewObserver = q$1((element, observeBox) => {
        if (element) {
          const document = getDocument$a(element);
          const window = document.defaultView;

          const handleUpdate = () => {
            if (element.isConnected) {
              const {
                clientWidth,
                scrollWidth,
                offsetWidth,
                clientHeight,
                scrollHeight,
                offsetHeight,
                clientLeft,
                scrollLeft,
                offsetLeft,
                clientTop,
                scrollTop,
                offsetTop
              } = element;
              setSize({
                clientWidth,
                scrollWidth,
                offsetWidth,
                clientHeight,
                scrollHeight,
                offsetHeight,
                clientLeft,
                scrollLeft,
                offsetLeft,
                clientTop,
                scrollTop,
                offsetTop
              });
            }
          };

          if (window && "ResizeObserver" in window) {
            const observer = new ResizeObserver(_entries => {
              handleUpdate();
            });
            observer.observe(element, {
              box: observeBox
            });
            return () => observer.disconnect();
          } else {
            document.addEventListener("resize", handleUpdate, {
              passive: true
            });
            return () => document.removeEventListener("resize", handleUpdate);
          }
        }
      }, []);
      const {
        getElement,
        useRefElementProps
      } = useRefElement({
        onElementChange: q$1(e => needANewObserver(e, getObserveBox === null || getObserveBox === void 0 ? void 0 : getObserveBox()), [])
      });
      s(() => {
        if (getObserveBox) {
          if (currentObserveBox.current !== getObserveBox()) needANewObserver(getElement(), getObserveBox());
        }
      });
      return {
        getElement,
        getSize,
        useElementSizeProps: useRefElementProps
      };
    }

    /**
     * Allows attaching an event handler to any *non-Preact* element, and removing it when the component using the hook unmounts. The callback does not need to be stable across renders.
     *
     * Due to typing limitations, this function must be called like this:
     *
     * `useEventHandler(element, "input")<InputEvent>(e => {})`
     *
     * The type argument is optional, but narrows down the type from "a union of all events" to whatever you specify, and errors if it doesn't exist.
     *
     * There is a separate version that attaches event handlers to a set of props.
     * It takes different event string types (onEvent vs onevent).
     *
     * @param target A *non-Preact* node to attach the event to.
     * @returns
     * *
     */

    function useGlobalHandler(target, type, handler, options) {
      // Note to self: The typing doesn't improve even if this is split up into a sub-function.
      // No matter what, it seems impossible to get the handler's event object typed perfectly.
      // It seems like it's guaranteed to always be a union of all available tupes.
      // Again, no matter what combination of sub- or sub-sub-functions used.
      let stableHandler = useStableCallback(handler !== null && handler !== void 0 ? handler : () => {});
      if (handler == null) stableHandler = null;
      s(() => {
        if (stableHandler) {
          target.addEventListener(type, stableHandler, options);
          return () => target.removeEventListener(type, stableHandler, options);
        }
      }, [target, type, stableHandler]);
    }

    /*!
    * tabbable 6.0.0
    * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
    */
    var candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]:not(slot)', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])', 'details>summary:first-of-type', 'details'];
    var NoElement = typeof Element === 'undefined';
    var matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    var getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {
      return element.getRootNode();
    } : function (element) {
      return element.ownerDocument;
    };

    var isInput = function isInput(node) {
      return node.tagName === 'INPUT';
    };

    var isHiddenInput = function isHiddenInput(node) {
      return isInput(node) && node.type === 'hidden';
    };

    var isDetailsWithSummary = function isDetailsWithSummary(node) {
      var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {
        return child.tagName === 'SUMMARY';
      });
      return r;
    };


    var isNodeAttached = function isNodeAttached(node) {
      var _nodeRootHost; // The root node is the shadow root if the node is in a shadow DOM; some document otherwise
      //  (but NOT _the_ document; see second 'If' comment below for more).
      // If rootNode is shadow root, it'll have a host, which is the element to which the shadow
      //  is attached, and the one we need to check if it's in the document or not (because the
      //  shadow, and all nodes it contains, is never considered in the document since shadows
      //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,
      //  is hidden, or is not in the document itself but is detached, it will affect the shadow's
      //  visibility, including all the nodes it contains). The host could be any normal node,
      //  or a custom element (i.e. web component). Either way, that's the one that is considered
      //  part of the document, not the shadow root, nor any of its children (i.e. the node being
      //  tested).
      // To further complicate things, we have to look all the way up until we find a shadow HOST
      //  that is attached (or find none) because the node might be in nested shadows...
      // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the
      //  document (per the docs) and while it's a Document-type object, that document does not
      //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer
      //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,
      //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when
      //  node is actually detached.


      var nodeRootHost = getRootNode(node).host;
      var attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && _nodeRootHost.ownerDocument.contains(nodeRootHost) || node.ownerDocument.contains(node));

      while (!attached && nodeRootHost) {
        var _nodeRootHost2; // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,
        //  which means we need to get the host's host and check if that parent host is contained
        //  in (i.e. attached to) the document


        nodeRootHost = getRootNode(nodeRootHost).host;
        attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && _nodeRootHost2.ownerDocument.contains(nodeRootHost));
      }

      return attached;
    };

    var isZeroArea = function isZeroArea(node) {
      var _node$getBoundingClie = node.getBoundingClientRect(),
          width = _node$getBoundingClie.width,
          height = _node$getBoundingClie.height;

      return width === 0 && height === 0;
    };

    var isHidden = function isHidden(node, _ref) {
      var displayCheck = _ref.displayCheck,
          getShadowRoot = _ref.getShadowRoot; // NOTE: visibility will be `undefined` if node is detached from the document
      //  (see notes about this further down), which means we will consider it visible
      //  (this is legacy behavior from a very long way back)
      // NOTE: we check this regardless of `displayCheck="none"` because this is a
      //  _visibility_ check, not a _display_ check

      if (getComputedStyle(node).visibility === 'hidden') {
        return true;
      }

      var isDirectSummary = matches.call(node, 'details>summary:first-of-type');
      var nodeUnderDetails = isDirectSummary ? node.parentElement : node;

      if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {
        return true;
      }

      if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {
        if (typeof getShadowRoot === 'function') {
          // figure out if we should consider the node to be in an undisclosed shadow and use the
          //  'non-zero-area' fallback
          var originalNode = node;

          while (node) {
            var parentElement = node.parentElement;
            var rootNode = getRootNode(node);

            if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow
            ) {
              // node has an undisclosed shadow which means we can only treat it as a black box, so we
              //  fall back to a non-zero-area test
              return isZeroArea(node);
            } else if (node.assignedSlot) {
              // iterate up slot
              node = node.assignedSlot;
            } else if (!parentElement && rootNode !== node.ownerDocument) {
              // cross shadow boundary
              node = rootNode.host;
            } else {
              // iterate up normal dom
              node = parentElement;
            }
          }

          node = originalNode;
        } // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support
        //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or
        //  it might be a falsy value, which means shadow DOM support is disabled
        // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)
        //  now we can just test to see if it would normally be visible or not, provided it's
        //  attached to the main document.
        // NOTE: We must consider case where node is inside a shadow DOM and given directly to
        //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.


        if (isNodeAttached(node)) {
          // this works wherever the node is: if there's at least one client rect, it's
          //  somehow displayed; it also covers the CSS 'display: contents' case where the
          //  node itself is hidden in place of its contents; and there's no need to search
          //  up the hierarchy either
          return !node.getClientRects().length;
        } // Else, the node isn't attached to the document, which means the `getClientRects()`
        //  API will __always__ return zero rects (this can happen, for example, if React
        //  is used to render nodes onto a detached tree, as confirmed in this thread:
        //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)
        //
        // It also means that even window.getComputedStyle(node).display will return `undefined`
        //  because styles are only computed for nodes that are in the document.
        //
        // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable
        //  somehow. Though it was never stated officially, anyone who has ever used tabbable
        //  APIs on nodes in detached containers has actually implicitly used tabbable in what
        //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck="none"` mode -- essentially
        //  considering __everything__ to be visible because of the innability to determine styles.
        //
        // v6.0.0: As of this major release, the default 'full' option __no longer treats detached
        //  nodes as visible with the 'none' fallback.__


        if (displayCheck !== 'legacy-full') {
          return true; // hidden
        } // else, fallback to 'none' mode and consider the node visible

      } else if (displayCheck === 'non-zero-area') {
        // NOTE: Even though this tests that the node's client rect is non-zero to determine
        //  whether it's displayed, and that a detached node will __always__ have a zero-area
        //  client rect, we don't special-case for whether the node is attached or not. In
        //  this mode, we do want to consider nodes that have a zero area to be hidden at all
        //  times, and that includes attached or not.
        return isZeroArea(node);
      } // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume
      //  it's visible


      return false;
    }; // form fields (nested) inside a disabled fieldset are not focusable/tabbable
    //  unless they are in the _first_ <legend> element of the top-most disabled
    //  fieldset


    var isDisabledFromFieldset = function isDisabledFromFieldset(node) {
      if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
        var parentNode = node.parentElement; // check if `node` is contained in a disabled <fieldset>

        while (parentNode) {
          if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {
            // look for the first <legend> among the children of the disabled <fieldset>
            for (var i = 0; i < parentNode.children.length; i++) {
              var child = parentNode.children.item(i); // when the first <legend> (in document order) is found

              if (child.tagName === 'LEGEND') {
                // if its parent <fieldset> is not nested in another disabled <fieldset>,
                // return whether `node` is a descendant of its first <legend>
                return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);
              }
            } // the disabled <fieldset> containing `node` has no <legend>


            return true;
          }

          parentNode = parentNode.parentElement;
        }
      } // else, node's tabbable/focusable state should not be affected by a fieldset's
      //  enabled/disabled state


      return false;
    };

    var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {
      if (node.disabled || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
      isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
        return false;
      }

      return true;
    };

    var focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');

    var isFocusable = function isFocusable(node, options) {
      options = options || {};

      if (!node) {
        throw new Error('No node provided');
      }

      if (matches.call(node, focusableCandidateSelector) === false) {
        return false;
      }

      return isNodeMatchingSelectorFocusable(options, node);
    };

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    (function (module, exports) {
      (function (global, factory) {
        factory() ;
      })(commonjsGlobal, function () {

        var _createClass = function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        /**
         * This work is licensed under the W3C Software and Document License
         * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).
         */


        (function () {
          // Return early if we're not running inside of the browser.
          if (typeof window === 'undefined') {
            return;
          } // Convenience function for converting NodeLists.

          /** @type {typeof Array.prototype.slice} */


          var slice = Array.prototype.slice;
          /**
           * IE has a non-standard name for "matches".
           * @type {typeof Element.prototype.matches}
           */

          var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;
          /** @type {string} */

          var _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'details', 'summary', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');
          /**
           * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`
           * attribute.
           *
           * Its main functions are:
           *
           * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the
           *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering
           *   each focusable node in the subtree with the singleton `InertManager` which manages all known
           *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`
           *   instance exists for each focusable node which has at least one inert root as an ancestor.
           *
           * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`
           *   attribute is removed from the root node). This is handled in the destructor, which calls the
           *   `deregister` method on `InertManager` for each managed inert node.
           */


          var InertRoot = function () {
            /**
             * @param {!HTMLElement} rootElement The HTMLElement at the root of the inert subtree.
             * @param {!InertManager} inertManager The global singleton InertManager object.
             */
            function InertRoot(rootElement, inertManager) {
              _classCallCheck(this, InertRoot);
              /** @type {!InertManager} */


              this._inertManager = inertManager;
              /** @type {!HTMLElement} */

              this._rootElement = rootElement;
              /**
               * @type {!Set<!InertNode>}
               * All managed focusable nodes in this InertRoot's subtree.
               */

              this._managedNodes = new Set(); // Make the subtree hidden from assistive technology

              if (this._rootElement.hasAttribute('aria-hidden')) {
                /** @type {?string} */
                this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');
              } else {
                this._savedAriaHidden = null;
              }

              this._rootElement.setAttribute('aria-hidden', 'true'); // Make all focusable elements in the subtree unfocusable and add them to _managedNodes


              this._makeSubtreeUnfocusable(this._rootElement); // Watch for:
              // - any additions in the subtree: make them unfocusable too
              // - any removals from the subtree: remove them from this inert root's managed nodes
              // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable
              //   element, make that node a managed node.


              this._observer = new MutationObserver(this._onMutation.bind(this));

              this._observer.observe(this._rootElement, {
                attributes: true,
                childList: true,
                subtree: true
              });
            }
            /**
             * Call this whenever this object is about to become obsolete.  This unwinds all of the state
             * stored in this object and updates the state of all of the managed nodes.
             */


            _createClass(InertRoot, [{
              key: 'destructor',
              value: function destructor() {
                this._observer.disconnect();

                if (this._rootElement) {
                  if (this._savedAriaHidden !== null) {
                    this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);
                  } else {
                    this._rootElement.removeAttribute('aria-hidden');
                  }
                }

                this._managedNodes.forEach(function (inertNode) {
                  this._unmanageNode(inertNode.node);
                }, this); // Note we cast the nulls to the ANY type here because:
                // 1) We want the class properties to be declared as non-null, or else we
                //    need even more casts throughout this code. All bets are off if an
                //    instance has been destroyed and a method is called.
                // 2) We don't want to cast "this", because we want type-aware optimizations
                //    to know which properties we're setting.


                this._observer =
                /** @type {?} */
                null;
                this._rootElement =
                /** @type {?} */
                null;
                this._managedNodes =
                /** @type {?} */
                null;
                this._inertManager =
                /** @type {?} */
                null;
              }
              /**
               * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.
               */

            }, {
              key: '_makeSubtreeUnfocusable',

              /**
               * @param {!Node} startNode
               */
              value: function _makeSubtreeUnfocusable(startNode) {
                var _this2 = this;

                composedTreeWalk(startNode, function (node) {
                  return _this2._visitNode(node);
                });
                var activeElement = document.activeElement;

                if (!document.body.contains(startNode)) {
                  // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.
                  var node = startNode;
                  /** @type {!ShadowRoot|undefined} */

                  var root = undefined;

                  while (node) {
                    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
                      root =
                      /** @type {!ShadowRoot} */
                      node;
                      break;
                    }

                    node = node.parentNode;
                  }

                  if (root) {
                    activeElement = root.activeElement;
                  }
                }

                if (startNode.contains(activeElement)) {
                  activeElement.blur(); // In IE11, if an element is already focused, and then set to tabindex=-1
                  // calling blur() will not actually move the focus.
                  // To work around this we call focus() on the body instead.

                  if (activeElement === document.activeElement) {
                    document.body.focus();
                  }
                }
              }
              /**
               * @param {!Node} node
               */

            }, {
              key: '_visitNode',
              value: function _visitNode(node) {
                if (node.nodeType !== Node.ELEMENT_NODE) {
                  return;
                }

                var element =
                /** @type {!HTMLElement} */
                node; // If a descendant inert root becomes un-inert, its descendants will still be inert because of
                // this inert root, so all of its managed nodes need to be adopted by this InertRoot.

                if (element !== this._rootElement && element.hasAttribute('inert')) {
                  this._adoptInertRoot(element);
                }

                if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {
                  this._manageNode(element);
                }
              }
              /**
               * Register the given node with this InertRoot and with InertManager.
               * @param {!Node} node
               */

            }, {
              key: '_manageNode',
              value: function _manageNode(node) {
                var inertNode = this._inertManager.register(node, this);

                this._managedNodes.add(inertNode);
              }
              /**
               * Unregister the given node with this InertRoot and with InertManager.
               * @param {!Node} node
               */

            }, {
              key: '_unmanageNode',
              value: function _unmanageNode(node) {
                var inertNode = this._inertManager.deregister(node, this);

                if (inertNode) {
                  this._managedNodes['delete'](inertNode);
                }
              }
              /**
               * Unregister the entire subtree starting at `startNode`.
               * @param {!Node} startNode
               */

            }, {
              key: '_unmanageSubtree',
              value: function _unmanageSubtree(startNode) {
                var _this3 = this;

                composedTreeWalk(startNode, function (node) {
                  return _this3._unmanageNode(node);
                });
              }
              /**
               * If a descendant node is found with an `inert` attribute, adopt its managed nodes.
               * @param {!HTMLElement} node
               */

            }, {
              key: '_adoptInertRoot',
              value: function _adoptInertRoot(node) {
                var inertSubroot = this._inertManager.getInertRoot(node); // During initialisation this inert root may not have been registered yet,
                // so register it now if need be.


                if (!inertSubroot) {
                  this._inertManager.setInert(node, true);

                  inertSubroot = this._inertManager.getInertRoot(node);
                }

                inertSubroot.managedNodes.forEach(function (savedInertNode) {
                  this._manageNode(savedInertNode.node);
                }, this);
              }
              /**
               * Callback used when mutation observer detects subtree additions, removals, or attribute changes.
               * @param {!Array<!MutationRecord>} records
               * @param {!MutationObserver} self
               */

            }, {
              key: '_onMutation',
              value: function _onMutation(records, self) {
                records.forEach(function (record) {
                  var target =
                  /** @type {!HTMLElement} */
                  record.target;

                  if (record.type === 'childList') {
                    // Manage added nodes
                    slice.call(record.addedNodes).forEach(function (node) {
                      this._makeSubtreeUnfocusable(node);
                    }, this); // Un-manage removed nodes

                    slice.call(record.removedNodes).forEach(function (node) {
                      this._unmanageSubtree(node);
                    }, this);
                  } else if (record.type === 'attributes') {
                    if (record.attributeName === 'tabindex') {
                      // Re-initialise inert node if tabindex changes
                      this._manageNode(target);
                    } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {
                      // If a new inert root is added, adopt its managed nodes and make sure it knows about the
                      // already managed nodes from this inert subroot.
                      this._adoptInertRoot(target);

                      var inertSubroot = this._inertManager.getInertRoot(target);

                      this._managedNodes.forEach(function (managedNode) {
                        if (target.contains(managedNode.node)) {
                          inertSubroot._manageNode(managedNode.node);
                        }
                      });
                    }
                  }
                }, this);
              }
            }, {
              key: 'managedNodes',
              get: function get() {
                return new Set(this._managedNodes);
              }
              /** @return {boolean} */

            }, {
              key: 'hasSavedAriaHidden',
              get: function get() {
                return this._savedAriaHidden !== null;
              }
              /** @param {?string} ariaHidden */

            }, {
              key: 'savedAriaHidden',
              set: function set(ariaHidden) {
                this._savedAriaHidden = ariaHidden;
              }
              /** @return {?string} */
              ,
              get: function get() {
                return this._savedAriaHidden;
              }
            }]);

            return InertRoot;
          }();
          /**
           * `InertNode` initialises and manages a single inert node.
           * A node is inert if it is a descendant of one or more inert root elements.
           *
           * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and
           * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element
           * is intrinsically focusable or not.
           *
           * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an
           * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the
           * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s
           * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,
           * or removes the `tabindex` attribute if the element is intrinsically focusable.
           */


          var InertNode = function () {
            /**
             * @param {!Node} node A focusable element to be made inert.
             * @param {!InertRoot} inertRoot The inert root element associated with this inert node.
             */
            function InertNode(node, inertRoot) {
              _classCallCheck(this, InertNode);
              /** @type {!Node} */


              this._node = node;
              /** @type {boolean} */

              this._overrodeFocusMethod = false;
              /**
               * @type {!Set<!InertRoot>} The set of descendant inert roots.
               *    If and only if this set becomes empty, this node is no longer inert.
               */

              this._inertRoots = new Set([inertRoot]);
              /** @type {?number} */

              this._savedTabIndex = null;
              /** @type {boolean} */

              this._destroyed = false; // Save any prior tabindex info and make this node untabbable

              this.ensureUntabbable();
            }
            /**
             * Call this whenever this object is about to become obsolete.
             * This makes the managed node focusable again and deletes all of the previously stored state.
             */


            _createClass(InertNode, [{
              key: 'destructor',
              value: function destructor() {
                this._throwIfDestroyed();

                if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {
                  var element =
                  /** @type {!HTMLElement} */
                  this._node;

                  if (this._savedTabIndex !== null) {
                    element.setAttribute('tabindex', this._savedTabIndex);
                  } else {
                    element.removeAttribute('tabindex');
                  } // Use `delete` to restore native focus method.


                  if (this._overrodeFocusMethod) {
                    delete element.focus;
                  }
                } // See note in InertRoot.destructor for why we cast these nulls to ANY.


                this._node =
                /** @type {?} */
                null;
                this._inertRoots =
                /** @type {?} */
                null;
                this._destroyed = true;
              }
              /**
               * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.
               * If the object has been destroyed, any attempt to access it will cause an exception.
               */

            }, {
              key: '_throwIfDestroyed',

              /**
               * Throw if user tries to access destroyed InertNode.
               */
              value: function _throwIfDestroyed() {
                if (this.destroyed) {
                  throw new Error('Trying to access destroyed InertNode');
                }
              }
              /** @return {boolean} */

            }, {
              key: 'ensureUntabbable',

              /** Save the existing tabindex value and make the node untabbable and unfocusable */
              value: function ensureUntabbable() {
                if (this.node.nodeType !== Node.ELEMENT_NODE) {
                  return;
                }

                var element =
                /** @type {!HTMLElement} */
                this.node;

                if (matches.call(element, _focusableElementsString)) {
                  if (
                  /** @type {!HTMLElement} */
                  element.tabIndex === -1 && this.hasSavedTabIndex) {
                    return;
                  }

                  if (element.hasAttribute('tabindex')) {
                    this._savedTabIndex =
                    /** @type {!HTMLElement} */
                    element.tabIndex;
                  }

                  element.setAttribute('tabindex', '-1');

                  if (element.nodeType === Node.ELEMENT_NODE) {
                    element.focus = function () {};

                    this._overrodeFocusMethod = true;
                  }
                } else if (element.hasAttribute('tabindex')) {
                  this._savedTabIndex =
                  /** @type {!HTMLElement} */
                  element.tabIndex;
                  element.removeAttribute('tabindex');
                }
              }
              /**
               * Add another inert root to this inert node's set of managing inert roots.
               * @param {!InertRoot} inertRoot
               */

            }, {
              key: 'addInertRoot',
              value: function addInertRoot(inertRoot) {
                this._throwIfDestroyed();

                this._inertRoots.add(inertRoot);
              }
              /**
               * Remove the given inert root from this inert node's set of managing inert roots.
               * If the set of managing inert roots becomes empty, this node is no longer inert,
               * so the object should be destroyed.
               * @param {!InertRoot} inertRoot
               */

            }, {
              key: 'removeInertRoot',
              value: function removeInertRoot(inertRoot) {
                this._throwIfDestroyed();

                this._inertRoots['delete'](inertRoot);

                if (this._inertRoots.size === 0) {
                  this.destructor();
                }
              }
            }, {
              key: 'destroyed',
              get: function get() {
                return (
                  /** @type {!InertNode} */
                  this._destroyed
                );
              }
            }, {
              key: 'hasSavedTabIndex',
              get: function get() {
                return this._savedTabIndex !== null;
              }
              /** @return {!Node} */

            }, {
              key: 'node',
              get: function get() {
                this._throwIfDestroyed();

                return this._node;
              }
              /** @param {?number} tabIndex */

            }, {
              key: 'savedTabIndex',
              set: function set(tabIndex) {
                this._throwIfDestroyed();

                this._savedTabIndex = tabIndex;
              }
              /** @return {?number} */
              ,
              get: function get() {
                this._throwIfDestroyed();

                return this._savedTabIndex;
              }
            }]);

            return InertNode;
          }();
          /**
           * InertManager is a per-document singleton object which manages all inert roots and nodes.
           *
           * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`
           * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.
           * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant
           * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance
           * is created for each such node, via the `_managedNodes` map.
           */


          var InertManager = function () {
            /**
             * @param {!Document} document
             */
            function InertManager(document) {
              _classCallCheck(this, InertManager);

              if (!document) {
                throw new Error('Missing required argument; InertManager needs to wrap a document.');
              }
              /** @type {!Document} */


              this._document = document;
              /**
               * All managed nodes known to this InertManager. In a map to allow looking up by Node.
               * @type {!Map<!Node, !InertNode>}
               */

              this._managedNodes = new Map();
              /**
               * All inert roots known to this InertManager. In a map to allow looking up by Node.
               * @type {!Map<!Node, !InertRoot>}
               */

              this._inertRoots = new Map();
              /**
               * Observer for mutations on `document.body`.
               * @type {!MutationObserver}
               */

              this._observer = new MutationObserver(this._watchForInert.bind(this)); // Add inert style.

              addInertStyle(document.head || document.body || document.documentElement); // Wait for document to be loaded.

              if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));
              } else {
                this._onDocumentLoaded();
              }
            }
            /**
             * Set whether the given element should be an inert root or not.
             * @param {!HTMLElement} root
             * @param {boolean} inert
             */


            _createClass(InertManager, [{
              key: 'setInert',
              value: function setInert(root, inert) {
                if (inert) {
                  if (this._inertRoots.has(root)) {
                    // element is already inert
                    return;
                  }

                  var inertRoot = new InertRoot(root, this);
                  root.setAttribute('inert', '');

                  this._inertRoots.set(root, inertRoot); // If not contained in the document, it must be in a shadowRoot.
                  // Ensure inert styles are added there.


                  if (!this._document.body.contains(root)) {
                    var parent = root.parentNode;

                    while (parent) {
                      if (parent.nodeType === 11) {
                        addInertStyle(parent);
                      }

                      parent = parent.parentNode;
                    }
                  }
                } else {
                  if (!this._inertRoots.has(root)) {
                    // element is already non-inert
                    return;
                  }

                  var _inertRoot = this._inertRoots.get(root);

                  _inertRoot.destructor();

                  this._inertRoots['delete'](root);

                  root.removeAttribute('inert');
                }
              }
              /**
               * Get the InertRoot object corresponding to the given inert root element, if any.
               * @param {!Node} element
               * @return {!InertRoot|undefined}
               */

            }, {
              key: 'getInertRoot',
              value: function getInertRoot(element) {
                return this._inertRoots.get(element);
              }
              /**
               * Register the given InertRoot as managing the given node.
               * In the case where the node has a previously existing inert root, this inert root will
               * be added to its set of inert roots.
               * @param {!Node} node
               * @param {!InertRoot} inertRoot
               * @return {!InertNode} inertNode
               */

            }, {
              key: 'register',
              value: function register(node, inertRoot) {
                var inertNode = this._managedNodes.get(node);

                if (inertNode !== undefined) {
                  // node was already in an inert subtree
                  inertNode.addInertRoot(inertRoot);
                } else {
                  inertNode = new InertNode(node, inertRoot);
                }

                this._managedNodes.set(node, inertNode);

                return inertNode;
              }
              /**
               * De-register the given InertRoot as managing the given inert node.
               * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert
               * node from the InertManager's set of managed nodes if it is destroyed.
               * If the node is not currently managed, this is essentially a no-op.
               * @param {!Node} node
               * @param {!InertRoot} inertRoot
               * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.
               */

            }, {
              key: 'deregister',
              value: function deregister(node, inertRoot) {
                var inertNode = this._managedNodes.get(node);

                if (!inertNode) {
                  return null;
                }

                inertNode.removeInertRoot(inertRoot);

                if (inertNode.destroyed) {
                  this._managedNodes['delete'](node);
                }

                return inertNode;
              }
              /**
               * Callback used when document has finished loading.
               */

            }, {
              key: '_onDocumentLoaded',
              value: function _onDocumentLoaded() {
                // Find all inert roots in document and make them actually inert.
                var inertElements = slice.call(this._document.querySelectorAll('[inert]'));
                inertElements.forEach(function (inertElement) {
                  this.setInert(inertElement, true);
                }, this); // Comment this out to use programmatic API only.

                this._observer.observe(this._document.body || this._document.documentElement, {
                  attributes: true,
                  subtree: true,
                  childList: true
                });
              }
              /**
               * Callback used when mutation observer detects attribute changes.
               * @param {!Array<!MutationRecord>} records
               * @param {!MutationObserver} self
               */

            }, {
              key: '_watchForInert',
              value: function _watchForInert(records, self) {
                var _this = this;

                records.forEach(function (record) {
                  switch (record.type) {
                    case 'childList':
                      slice.call(record.addedNodes).forEach(function (node) {
                        if (node.nodeType !== Node.ELEMENT_NODE) {
                          return;
                        }

                        var inertElements = slice.call(node.querySelectorAll('[inert]'));

                        if (matches.call(node, '[inert]')) {
                          inertElements.unshift(node);
                        }

                        inertElements.forEach(function (inertElement) {
                          this.setInert(inertElement, true);
                        }, _this);
                      }, _this);
                      break;

                    case 'attributes':
                      if (record.attributeName !== 'inert') {
                        return;
                      }

                      var target =
                      /** @type {!HTMLElement} */
                      record.target;
                      var inert = target.hasAttribute('inert');

                      _this.setInert(target, inert);

                      break;
                  }
                }, this);
              }
            }]);

            return InertManager;
          }();
          /**
           * Recursively walk the composed tree from |node|.
           * @param {!Node} node
           * @param {(function (!HTMLElement))=} callback Callback to be called for each element traversed,
           *     before descending into child nodes.
           * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.
           */


          function composedTreeWalk(node, callback, shadowRootAncestor) {
            if (node.nodeType == Node.ELEMENT_NODE) {
              var element =
              /** @type {!HTMLElement} */
              node;

              if (callback) {
                callback(element);
              } // Descend into node:
              // If it has a ShadowRoot, ignore all child elements - these will be picked
              // up by the <content> or <shadow> elements. Descend straight into the
              // ShadowRoot.


              var shadowRoot =
              /** @type {!HTMLElement} */
              element.shadowRoot;

              if (shadowRoot) {
                composedTreeWalk(shadowRoot, callback);
                return;
              } // If it is a <content> element, descend into distributed elements - these
              // are elements from outside the shadow root which are rendered inside the
              // shadow DOM.


              if (element.localName == 'content') {
                var content =
                /** @type {!HTMLContentElement} */
                element; // Verifies if ShadowDom v0 is supported.

                var distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];

                for (var i = 0; i < distributedNodes.length; i++) {
                  composedTreeWalk(distributedNodes[i], callback);
                }

                return;
              } // If it is a <slot> element, descend into assigned nodes - these
              // are elements from outside the shadow root which are rendered inside the
              // shadow DOM.


              if (element.localName == 'slot') {
                var slot =
                /** @type {!HTMLSlotElement} */
                element; // Verify if ShadowDom v1 is supported.

                var _distributedNodes = slot.assignedNodes ? slot.assignedNodes({
                  flatten: true
                }) : [];

                for (var _i = 0; _i < _distributedNodes.length; _i++) {
                  composedTreeWalk(_distributedNodes[_i], callback);
                }

                return;
              }
            } // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>
            // element, nor a <shadow> element recurse normally.


            var child = node.firstChild;

            while (child != null) {
              composedTreeWalk(child, callback);
              child = child.nextSibling;
            }
          }
          /**
           * Adds a style element to the node containing the inert specific styles
           * @param {!Node} node
           */


          function addInertStyle(node) {
            if (node.querySelector('style#inert-style, link#inert-style')) {
              return;
            }

            var style = document.createElement('style');
            style.setAttribute('id', 'inert-style');
            style.textContent = '\n' + '[inert] {\n' + '  pointer-events: none;\n' + '  cursor: default;\n' + '}\n' + '\n' + '[inert], [inert] * {\n' + '  -webkit-user-select: none;\n' + '  -moz-user-select: none;\n' + '  -ms-user-select: none;\n' + '  user-select: none;\n' + '}\n';
            node.appendChild(style);
          }

          if (!HTMLElement.prototype.hasOwnProperty('inert')) {
            /** @type {!InertManager} */
            var inertManager = new InertManager(document);
            Object.defineProperty(HTMLElement.prototype, 'inert', {
              enumerable: true,

              /** @this {!HTMLElement} */
              get: function get() {
                return this.hasAttribute('inert');
              },

              /** @this {!HTMLElement} */
              set: function set(inert) {
                inertManager.setInert(this, inert);
              }
            });
          }
        })();
      });
    })();

    /**
     * @license
     * Copyright 2016 Google Inc. All rights reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    (() => {
      var _a, _b, _c;
      /* Symbols for private properties */


      const _blockingElements = Symbol();

      const _alreadyInertElements = Symbol();

      const _topElParents = Symbol();

      const _siblingsToRestore = Symbol();

      const _parentMO = Symbol();
      /* Symbols for private static methods */


      const _topChanged = Symbol();

      const _swapInertedSibling = Symbol();

      const _inertSiblings = Symbol();

      const _restoreInertedSiblings = Symbol();

      const _getParents = Symbol();

      const _getDistributedChildren = Symbol();

      const _isInertable = Symbol();

      const _handleMutations = Symbol();

      class BlockingElementsImpl {
        constructor() {
          /**
           * The blocking elements.
           */
          this[_a] = [];
          /**
           * Used to keep track of the parents of the top element, from the element
           * itself up to body. When top changes, the old top might have been removed
           * from the document, so we need to memoize the inerted parents' siblings
           * in order to restore their inerteness when top changes.
           */

          this[_b] = [];
          /**
           * Elements that are already inert before the first blocking element is
           * pushed.
           */

          this[_c] = new Set();
        }

        destructor() {
          // Restore original inertness.
          this[_restoreInertedSiblings](this[_topElParents]); // Note we don't want to make these properties nullable on the class,
          // since then we'd need non-null casts in many places. Calling a method on
          // a BlockingElements instance after calling destructor will result in an
          // exception.


          const nullable = this;
          nullable[_blockingElements] = null;
          nullable[_topElParents] = null;
          nullable[_alreadyInertElements] = null;
        }

        get top() {
          const elems = this[_blockingElements];
          return elems[elems.length - 1] || null;
        }

        push(element) {
          if (!element || element === this.top) {
            return;
          } // Remove it from the stack, we'll bring it to the top.


          this.remove(element);

          this[_topChanged](element);

          this[_blockingElements].push(element);
        }

        remove(element) {
          const i = this[_blockingElements].indexOf(element);

          if (i === -1) {
            return false;
          }

          this[_blockingElements].splice(i, 1); // Top changed only if the removed element was the top element.


          if (i === this[_blockingElements].length) {
            this[_topChanged](this.top);
          }

          return true;
        }

        pop() {
          const top = this.top;
          top && this.remove(top);
          return top;
        }

        has(element) {
          return this[_blockingElements].indexOf(element) !== -1;
        }
        /**
         * Sets `inert` to all document elements except the new top element, its
         * parents, and its distributed content.
         */


        [(_a = _blockingElements, _b = _topElParents, _c = _alreadyInertElements, _topChanged)](newTop) {
          const toKeepInert = this[_alreadyInertElements];
          const oldParents = this[_topElParents]; // No new top, reset old top if any.

          if (!newTop) {
            this[_restoreInertedSiblings](oldParents);

            toKeepInert.clear();
            this[_topElParents] = [];
            return;
          }

          const newParents = this[_getParents](newTop); // New top is not contained in the main document!


          if (newParents[newParents.length - 1].parentNode !== document.body) {
            throw Error('Non-connected element cannot be a blocking element');
          } // Cast here because we know we'll call _inertSiblings on newParents
          // below.


          this[_topElParents] = newParents;

          const toSkip = this[_getDistributedChildren](newTop); // No previous top element.


          if (!oldParents.length) {
            this[_inertSiblings](newParents, toSkip, toKeepInert);

            return;
          }

          let i = oldParents.length - 1;
          let j = newParents.length - 1; // Find common parent. Index 0 is the element itself (so stop before it).

          while (i > 0 && j > 0 && oldParents[i] === newParents[j]) {
            i--;
            j--;
          } // If up the parents tree there are 2 elements that are siblings, swap
          // the inerted sibling.


          if (oldParents[i] !== newParents[j]) {
            this[_swapInertedSibling](oldParents[i], newParents[j]);
          } // Restore old parents siblings inertness.


          i > 0 && this[_restoreInertedSiblings](oldParents.slice(0, i)); // Make new parents siblings inert.

          j > 0 && this[_inertSiblings](newParents.slice(0, j), toSkip, null);
        }
        /**
         * Swaps inertness between two sibling elements.
         * Sets the property `inert` over the attribute since the inert spec
         * doesn't specify if it should be reflected.
         * https://html.spec.whatwg.org/multipage/interaction.html#inert
         */


        [_swapInertedSibling](oldInert, newInert) {
          const siblingsToRestore = oldInert[_siblingsToRestore]; // oldInert is not contained in siblings to restore, so we have to check
          // if it's inertable and if already inert.

          if (this[_isInertable](oldInert) && !oldInert.inert) {
            oldInert.inert = true;
            siblingsToRestore.add(oldInert);
          } // If newInert was already between the siblings to restore, it means it is
          // inertable and must be restored.


          if (siblingsToRestore.has(newInert)) {
            newInert.inert = false;
            siblingsToRestore.delete(newInert);
          }

          newInert[_parentMO] = oldInert[_parentMO];
          newInert[_siblingsToRestore] = siblingsToRestore;
          oldInert[_parentMO] = undefined;
          oldInert[_siblingsToRestore] = undefined;
        }
        /**
         * Restores original inertness to the siblings of the elements.
         * Sets the property `inert` over the attribute since the inert spec
         * doesn't specify if it should be reflected.
         * https://html.spec.whatwg.org/multipage/interaction.html#inert
         */


        [_restoreInertedSiblings](elements) {
          for (const element of elements) {
            const mo = element[_parentMO];
            mo.disconnect();
            element[_parentMO] = undefined;
            const siblings = element[_siblingsToRestore];

            for (const sibling of siblings) {
              sibling.inert = false;
            }

            element[_siblingsToRestore] = undefined;
          }
        }
        /**
         * Inerts the siblings of the elements except the elements to skip. Stores
         * the inerted siblings into the element's symbol `_siblingsToRestore`.
         * Pass `toKeepInert` to collect the already inert elements.
         * Sets the property `inert` over the attribute since the inert spec
         * doesn't specify if it should be reflected.
         * https://html.spec.whatwg.org/multipage/interaction.html#inert
         */


        [_inertSiblings](elements, toSkip, toKeepInert) {
          for (const element of elements) {
            // Assume element is not a Document, so it must have a parentNode.
            const parent = element.parentNode;
            const children = parent.children;
            const inertedSiblings = new Set();

            for (let j = 0; j < children.length; j++) {
              const sibling = children[j]; // Skip the input element, if not inertable or to be skipped.

              if (sibling === element || !this[_isInertable](sibling) || toSkip && toSkip.has(sibling)) {
                continue;
              } // Should be collected since already inerted.


              if (toKeepInert && sibling.inert) {
                toKeepInert.add(sibling);
              } else {
                sibling.inert = true;
                inertedSiblings.add(sibling);
              }
            } // Store the siblings that were inerted.


            element[_siblingsToRestore] = inertedSiblings; // Observe only immediate children mutations on the parent.

            const mo = new MutationObserver(this[_handleMutations].bind(this));
            element[_parentMO] = mo;
            let parentToObserve = parent; // If we're using the ShadyDOM polyfill, then our parent could be a
            // shady root, which is an object that acts like a ShadowRoot, but isn't
            // actually a node in the real DOM. Observe the real DOM parent instead.

            const maybeShadyRoot = parentToObserve;

            if (maybeShadyRoot.__shady && maybeShadyRoot.host) {
              parentToObserve = maybeShadyRoot.host;
            }

            mo.observe(parentToObserve, {
              childList: true
            });
          }
        }
        /**
         * Handles newly added/removed nodes by toggling their inertness.
         * It also checks if the current top Blocking Element has been removed,
         * notifying and removing it.
         */


        [_handleMutations](mutations) {
          const parents = this[_topElParents];
          const toKeepInert = this[_alreadyInertElements];

          for (const mutation of mutations) {
            // If the target is a shadowRoot, get its host as we skip shadowRoots when
            // computing _topElParents.
            const target = mutation.target.host || mutation.target;
            const idx = target === document.body ? parents.length : parents.indexOf(target);
            const inertedChild = parents[idx - 1];
            const inertedSiblings = inertedChild[_siblingsToRestore]; // To restore.

            for (let i = 0; i < mutation.removedNodes.length; i++) {
              const sibling = mutation.removedNodes[i];

              if (sibling === inertedChild) {
                console.info('Detected removal of the top Blocking Element.');
                this.pop();
                return;
              }

              if (inertedSiblings.has(sibling)) {
                sibling.inert = false;
                inertedSiblings.delete(sibling);
              }
            } // To inert.


            for (let i = 0; i < mutation.addedNodes.length; i++) {
              const sibling = mutation.addedNodes[i];

              if (!this[_isInertable](sibling)) {
                continue;
              }

              if (toKeepInert && sibling.inert) {
                toKeepInert.add(sibling);
              } else {
                sibling.inert = true;
                inertedSiblings.add(sibling);
              }
            }
          }
        }
        /**
         * Returns if the element is inertable.
         */


        [_isInertable](element) {
          return false === /^(style|template|script)$/.test(element.localName);
        }
        /**
         * Returns the list of newParents of an element, starting from element
         * (included) up to `document.body` (excluded).
         */


        [_getParents](element) {
          const parents = [];
          let current = element; // Stop to body.

          while (current && current !== document.body) {
            // Skip shadow roots.
            if (current.nodeType === Node.ELEMENT_NODE) {
              parents.push(current);
            } // ShadowDom v1


            if (current.assignedSlot) {
              // Collect slots from deepest slot to top.
              while (current = current.assignedSlot) {
                parents.push(current);
              } // Continue the search on the top slot.


              current = parents.pop();
              continue;
            }

            current = current.parentNode || current.host;
          }

          return parents;
        }
        /**
         * Returns the distributed children of the element's shadow root.
         * Returns null if the element doesn't have a shadow root.
         */


        [_getDistributedChildren](element) {
          const shadowRoot = element.shadowRoot;

          if (!shadowRoot) {
            return null;
          }

          const result = new Set();
          let i;
          let j;
          let nodes;
          const slots = shadowRoot.querySelectorAll('slot');

          if (slots.length && slots[0].assignedNodes) {
            for (i = 0; i < slots.length; i++) {
              nodes = slots[i].assignedNodes({
                flatten: true
              });

              for (j = 0; j < nodes.length; j++) {
                if (nodes[j].nodeType === Node.ELEMENT_NODE) {
                  result.add(nodes[j]);
                }
              }
            } // No need to search for <content>.

          }

          return result;
        }

      }

      document.$blockingElements = new BlockingElementsImpl();
    })();

    function blockingElements() {
      return getDocument$a().$blockingElements;
    }
    /**
     * Allows an element to trap focus by applying the "inert" attribute to all sibling, aunt, and uncle nodes.
     *
     * Automatically handles consecutive calls with a loosely applied stack operation
     * (specifically via `blockingElements`, with a small polyfill because I'm not sure how long
     * it'll take to find its way into the spec, if ever)
     * @param target
     */


    function useBlockingElement(enabled, getTarget) {
      const stableGetTarget = useStableCallback(getTarget);
      /**
       * Push/pop the element from the blockingElements stack.
       */

      _(() => {
        const target = stableGetTarget();

        if (enabled) {
          // Sometimes blockingElements will fail if, for example,
          // the target element isn't connected to document.body.
          // This is rare, but it's better to fail silently with weird tabbing behavior
          // than to crash the entire application.
          try {
            blockingElements().push(target);
            return () => {
              blockingElements().remove(target);
            };
          } catch (ex) {
            // Well, semi-silently.
            console.error(ex);
          }
        }
      }, [enabled]);
    }
    function getTopElement() {
      return blockingElements().top;
    }

    const elementsToRestoreFocusTo = new Map();
    function useFocusTrap(_ref) {
      let {
        trapActive
      } = _ref;
      const handleActiveChange = q$1((trapActive, element) => {
        if (trapActive && element) {
          let rafHandle = requestAnimationFrame(() => {
            // TODO: This extra queueMicrotask is needed for
            // ...reasons?
            queueMicrotask(() => {
              var _findFirstFocusable;

              (_findFirstFocusable = findFirstFocusable(element)) === null || _findFirstFocusable === void 0 ? void 0 : _findFirstFocusable.focus();
              rafHandle = 0;
            });
          });
          return () => {
            if (rafHandle) cancelAnimationFrame(rafHandle);
          };
        } else if (element) {
          // Restore the focus to the element
          // that has returned to the top of the stack
          let rafHandle = requestAnimationFrame(() => {
            queueMicrotask(() => {
              var _elementsToRestoreFoc;

              (_elementsToRestoreFoc = elementsToRestoreFocusTo.get(getTopElement())) === null || _elementsToRestoreFoc === void 0 ? void 0 : _elementsToRestoreFoc.focus();
              rafHandle = 0;
            });
          });
          return () => {
            if (rafHandle) cancelAnimationFrame(rafHandle);
          };
        }
      }, []);
      const {
        getElement,
        useRefElementProps
      } = useRefElement({
        onElementChange: useStableCallback(element => handleActiveChange(trapActive, element))
      });
      const {
        getLastActiveElement
      } = useActiveElement({
        getDocument: useStableCallback(() => {
          var _getElement$ownerDocu, _getElement;

          return (_getElement$ownerDocu = (_getElement = getElement()) === null || _getElement === void 0 ? void 0 : _getElement.ownerDocument) !== null && _getElement$ownerDocu !== void 0 ? _getElement$ownerDocu : window.document;
        })
      }); // When the trap becomes active, before we let the blockingElements hook run,
      // keep track of whatever's currently focused and save it.

      _(() => {
        const element = getElement();

        if (trapActive && element) {
          var _getLastActiveElement;

          const document = getDocument$a(element); // Save the currently focused element
          // to whatever's currently at the top of the stack

          elementsToRestoreFocusTo.set(getTopElement(), (_getLastActiveElement = getLastActiveElement()) !== null && _getLastActiveElement !== void 0 ? _getLastActiveElement : document.body);
        }
      }, [trapActive]);
      useBlockingElement(trapActive, getElement);
      /**
       * Any time we activate or deactivate the trap,
       * change focus to something else (something in
       * the trap if it's active, or whatever we've
       * tracked in elementsToRestoreFocusTo if not)
       */

      _(() => {
        handleActiveChange(trapActive, getElement());
      }, [trapActive]);

      const useFocusTrapProps = props => {
        const p1 = useRefElementProps(props);
        const p2 = {
          "aria-modal": trapActive ? "true" : undefined
        };
        return useMergedProps(p1, p2);
      };

      return {
        useFocusTrapProps,
        getElement
      };
    }
    /**
     * Returns the first focusable element contained within the given node, or null if none are found.
     * @param element
     * @returns
     */

    function findFirstFocusable(element) {
      const treeWalker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {
        acceptNode: node => node instanceof Element && isFocusable(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP
      });
      const firstFocusable = treeWalker.firstChild();
      return firstFocusable;
    }

    /**
     * Returns a function that will, when called, force the component
     * that uses this hook to re-render itself.
     *
     * It's a bit smelly, so best to use sparingly.
     */

    function useForceUpdate() {
      const [, set] = y(0);
      return A(() => set(i => ++i)).current;
    }

    function useHasFocus(_ref) {
      let {
        onFocusedChanged,
        onFocusedInnerChanged,
        onLastFocusedChanged,
        onLastFocusedInnerChanged,
        onLastActiveElementChange,
        onActiveElementChange,
        onWindowFocusedChange,
        getDocument,
        getWindow,
        onElementChange,
        onMount,
        onUnmount
      } = _ref;
      useEnsureStability("useHasFocus", onFocusedChanged, onFocusedInnerChanged, onLastFocusedChanged, onLastFocusedInnerChanged, onLastActiveElementChange, onActiveElementChange, onWindowFocusedChange);
      const [getFocused, setFocused] = usePassiveState(onFocusedChanged, returnFalse$1);
      const [getFocusedInner, setFocusedInner] = usePassiveState(onFocusedInnerChanged, returnFalse$1);
      const [getLastFocused, setLastFocused] = usePassiveState(onLastFocusedChanged, returnFalse$1);
      const [getLastFocusedInner, setLastFocusedInner] = usePassiveState(onLastFocusedInnerChanged, returnFalse$1);
      const {
        getElement,
        useRefElementProps
      } = useRefElement({
        onElementChange,
        onMount,
        onUnmount
      });
      const {
        getActiveElement,
        getLastActiveElement,
        getWindowFocused
      } = useActiveElement({
        getDocument,
        getWindow,
        onActiveElementChange: q$1((activeElement, prevActiveElement) => {
          const selfElement = getElement();
          const focused = selfElement != null && selfElement == activeElement;
          const focusedInner = !!(selfElement !== null && selfElement !== void 0 && selfElement.contains(activeElement));
          setFocused(focused);
          setFocusedInner(focusedInner);
          onActiveElementChange === null || onActiveElementChange === void 0 ? void 0 : onActiveElementChange(activeElement, prevActiveElement);
        }, []),
        onLastActiveElementChange: q$1((lastActiveElement, prevLastActiveElement) => {
          const selfElement = getElement();
          const focused = selfElement != null && selfElement == lastActiveElement;
          const focusedInner = !!(selfElement !== null && selfElement !== void 0 && selfElement.contains(lastActiveElement));
          setLastFocused(focused);
          setLastFocusedInner(focusedInner);
          onLastActiveElementChange === null || onLastActiveElementChange === void 0 ? void 0 : onLastActiveElementChange(lastActiveElement, prevLastActiveElement);
        }, []),
        onWindowFocusedChange
      });
      const useHasFocusProps = q$1(props => {
        return useRefElementProps(props);
      }, []);
      return {
        useHasFocusProps,
        getElement,
        getFocused,
        getFocusedInner,
        getLastFocused,
        getLastFocusedInner,
        getActiveElement,
        getLastActiveElement,
        getWindowFocused
      };
    }
    function useChildrenHaveFocus(_ref2) {
      let {
        childrenHaveFocus: {
          onAllLostFocus,
          onAnyGainedFocus
        },
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        }
      } = _ref2;
      const {
        managedChildren,
        useManagedChild
      } = useManagedChildren({
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        }
      });
      const allElementsRef = A(new Set());
      const [_getFocusCount, setFocusCount] = usePassiveState(useStableCallback((anyFocused, anyPreviouslyFocused) => {
        console.log(`Changing focus count from ${anyPreviouslyFocused} to ${anyFocused}`);
        console.assert(anyFocused >= 0 && anyFocused <= 1);
        if (anyFocused && !anyPreviouslyFocused) onAnyGainedFocus === null || onAnyGainedFocus === void 0 ? void 0 : onAnyGainedFocus();
        if (!anyFocused && anyPreviouslyFocused) onAllLostFocus === null || onAllLostFocus === void 0 ? void 0 : onAllLostFocus();
      }));
      const useChildrenHaveFocusChild = q$1(_ref3 => {
        let {
          onElementChange,
          onMount,
          onUnmount,
          getDocument,
          getWindow,
          onActiveElementChange,
          onFocusedChanged,
          onFocusedInnerChanged,
          onLastActiveElementChange,
          onLastFocusedChanged,
          onLastFocusedInnerChanged,
          onWindowFocusedChange,
          managedChild: {
            index,
            flags
          }
        } = _ref3;
        useManagedChild({
          managedChild: {
            index,
            subInfo: {},
            flags
          }
        });
        const {
          useHasFocusProps,
          ...hasFocus
        } = useHasFocus({
          getDocument,
          getWindow,
          onActiveElementChange,
          onElementChange: q$1((e, prev) => {
            let r = onElementChange === null || onElementChange === void 0 ? void 0 : onElementChange(e, prev);

            if (e) {
              allElementsRef.current.add(e);
              return () => {
                r === null || r === void 0 ? void 0 : r();
                allElementsRef.current.delete(e);
              };
            }
          }, [onElementChange]),
          onMount,
          onUnmount,
          onFocusedChanged,
          onFocusedInnerChanged,
          onLastActiveElementChange,
          onLastFocusedChanged,
          onLastFocusedInnerChanged: useStableCallback((focused, prev) => {
            if (focused) {
              console.log(`Child ${index} is focused`);
              setFocusCount(p => (p !== null && p !== void 0 ? p : 0) + 1);
            } else if (!focused && prev) {
              console.log(`Child ${index} is unfocused`);
              setFocusCount(p => (p !== null && p !== void 0 ? p : 0) - 1);
            }

            onLastFocusedInnerChanged === null || onLastFocusedInnerChanged === void 0 ? void 0 : onLastFocusedInnerChanged(focused, prev);
          }),
          onWindowFocusedChange
        });
        return {
          useChildrenHaveFocusChildProps: useHasFocusProps,
          ...hasFocus
        };
      }, []);
      return {
        managedChildren,
        useChildrenHaveFocusChild
      };
    }

    /**
     * Adds the necessary event handlers to create a "press"-like event for
     * any element, whether it's a native <BUTTON> or regular <DIV>.
     *
     * Notably, the following cases are covered:
     * * The target element is properly focused, even on iOS Safari (*especially* on iOS Safari)
     * * Double-clicks won't select text.
     * * Conversely, manually selecting text won't invoke a press.
     * * Keyboard events &mdash; `enter` immediately invokes the handler, while `space` invokes it on keyup.
     * * Haptic feedback (on, like, the one browser combination that supports it &mdash; this can be disabled app-wide with `setButtonVibrate`)
     *
     * In addition, when the CSS `:active` pseudo-class would apply to a normal button
     * (i.e. when holding the spacebar or during mousedown), `{ "data-pseudo-active": "true" }`
     * is added to the props.  You can either let it pass through and style it through new CSS,
     * or inspect the returned props for it and add e.g. an `.active` class for existing CSS
     *
     * @param onClickSync
     * @param exclude Whether the polyfill shouldn't apply (can specify for specific interactions)
     */

    function usePress(_ref) {
      let {
        exclude,
        hasFocus: {
          onFocusedInnerChanged,
          ...hasFocus
        },
        onClickSync
      } = _ref;
      // A button can be activated in multiple ways, so on the off chance
      // that multiple are triggered at once, we only *actually* register
      // a press once all of our "on" signals have turned back to "off".
      // We approximate this by just incrementing when active, and
      // decrementing when deactivated.
      //
      // As an emergency failsafe, when the element loses focus,
      // this is reset back to 0.
      const [active, setActive, getActive] = useState(0);
      const forceUpdate = useForceUpdate();
      const {
        useHasFocusProps,
        getElement
      } = useHasFocus({ ...hasFocus,
        onFocusedInnerChanged: useStableCallback((f, p) => {
          onFocusedInnerChanged === null || onFocusedInnerChanged === void 0 ? void 0 : onFocusedInnerChanged(f, p);

          if (!f) {
            setActive(0);
          }
        })
      }); // If we the current text selection changes to include this element
      // DURING e.g. a mousedown, then we don't want the mouseup to "count", as it were,
      // because its only purpose was selecting text, not clicking buttons.
      //
      // To catch this, any time the text selection includes us while in the middle
      // of a click, this flag is set, which cancels the activation of a press.
      // The flag is reset any time the selection is empty or the button is
      // no longer active.

      const [textSelectedDuringActivationStartTime, setTextSelectedDuringActivationStartTime] = useState(null);
      const pseudoActive = active && textSelectedDuringActivationStartTime == null;
      useGlobalHandler(document, "selectionchange", _ => {
        setTextSelectedDuringActivationStartTime(prev => nodeSelectedTextLength(getElement()) == 0 ? null : prev != null ? prev : new Date());
      });
      s(() => {
        if (active == 0) setTextSelectedDuringActivationStartTime(null);
      }, [active == 0]);
      const onActiveStart = useStableCallback(_ => {
        setActive(a => ++a);
      });
      const onActiveStop = useStableCallback(e => {
        setActive(a => Math.max(0, --a));
        const currentTime = new Date();
        const timeDifference = textSelectedDuringActivationStartTime == null ? null : +currentTime - +textSelectedDuringActivationStartTime;
        const charactersSelected = nodeSelectedTextLength(getElement()); // If we're selecting text (heuristically determined by selecting for longer than 1/4 a second, or more than 2 characters)
        // then this isn't a press event.
        // TODO: This should measure glyphs instead of characters.

        if (charactersSelected > 1 || (timeDifference !== null && timeDifference !== void 0 ? timeDifference : 0) > 250 && charactersSelected >= 1) {
          e.preventDefault();
          return;
        }

        if (getActive() <= 0) {
          handlePress(e);
          forceUpdate(); // TODO: Remove when issue resolved https://github.com/preactjs/preact/issues/3731
        }
      });
      const handlePress = useStableCallback(e => {
        if (onClickSync) {
          // Note: The element is focused here because of iOS Safari.
          //
          // It's always iOS Safari.
          //
          // iOS Safari (tested on 12) downright refuses to allow 
          // elements to be manually focused UNLESS it happens within
          // an event handler like this.  It also doesn't focus
          // buttons by default when clicked, tapped, etc.
          //
          // If it becomes problematic that button-likes explicitly become
          // focused when they are pressed, then an alternative solution for
          // the question of "how do menu buttons keep their menus open"
          // and other focus-related nonsense needs to be figured out.
          //
          // For iOS Safari.
          //
          const element = getElement();
          if (element && "focus" in element) element === null || element === void 0 ? void 0 : element.focus(); // Whatever the browser was going to do with this event,
          // forget it. We're turning it into a "press" event.

          e.preventDefault(); // Also stop anyone else from listening to this event,
          // since we're explicitly handling it.
          // (Notably, this allows labels to wrap inputs, with them
          // both having press event handlers, without double-firing)

          e.stopPropagation(); // Haptic feedback for this press event

          try {
            // The default implementation doesn't throw,
            // but we should guard against user implementations that could.
            pulse();
          } finally {
            // Actually call our handler.
            onClickSync(e);
          }
        }
      });
      const onMouseDown = excludes("click", exclude) ? undefined : e => {
        // Stop double clicks from selecting text in an component that's *supposed* to be acting like a button,
        // but also don't prevent the user from selecting that text manually if they really want to
        // (which user-select: none would do, but cancelling a double click on mouseDown doesn't)
        if (e.detail > 1) e.preventDefault();
        if (e.button === 0) onActiveStart(e);
      };
      const onMouseUp = excludes("click", exclude) ? undefined : e => {
        if (e.button === 0 && active > 0) onActiveStop(e);
      };
      const onMouseLeave = useStableCallback(() => {
        if (!excludes("click", exclude)) setActive(0);
      });
      const onKeyDown = excludes("space", exclude) && excludes("enter", exclude) ? undefined : e => {
        if (e.key == " " && onClickSync && !excludes("space", exclude)) {
          // We don't actually activate it on a space keydown
          // but we do preventDefault to stop the page from scrolling.
          onActiveStart(e);
          e.preventDefault();
        }

        if (e.key == "Enter" && !excludes("enter", exclude)) {
          e.preventDefault();
          onActiveStart(e);
          onActiveStop(e);
        }
      };
      const onKeyUp = excludes("space", exclude) ? undefined : e => {
        if (e.key == " " && !excludes("space", exclude)) onActiveStop(e);
      };

      const onClick = e => {
        e.preventDefault();

        if (e.detail > 1) {
          e.stopImmediatePropagation();
          e.stopPropagation();
        }
      };

      return function usePressProps(props) {
        return useMergedProps(props, useHasFocusProps({
          onKeyDown,
          onKeyUp,
          onMouseDown,
          onMouseUp,
          onMouseLeave,
          onClick,
          style: textSelectedDuringActivationStartTime != null ? {
            cursor: "text"
          } : undefined,
          ...{
            "data-pseudo-active": pseudoActive ? "true" : undefined
          }
        }));
      };
    }
    /**
     * selection.containsNode doesn't account for selection.isCollapsed,
     * so here's a workaround for that.
     *
     * We also only look for the selection end to only catch the
     * essense of a non-existant "selectionstop" event.
     *
     * @param element
     * @returns
     */

    function nodeSelectedTextLength(element) {
      if (element && element instanceof Node) {
        const selection = window.getSelection();

        for (let i = 0; i < ((_selection$rangeCount = selection === null || selection === void 0 ? void 0 : selection.rangeCount) !== null && _selection$rangeCount !== void 0 ? _selection$rangeCount : 0); ++i) {
          var _selection$rangeCount;

          const range = selection.getRangeAt(i);

          if (element.contains(range.endContainer) && !(selection !== null && selection !== void 0 && selection.isCollapsed)) {
            return selection.toString().length;
          }
        }
      }

      return 0;
    }

    let pulse = "vibrate" in navigator && navigator.vibrate instanceof Function ? () => navigator.vibrate(10) : () => {};

    function excludes(target, exclude) {
      if (exclude !== null && exclude !== void 0 && exclude[target]) return true;
      return false;
    }

    function capitalize(str) {
      return str[0].toUpperCase() + str.substring(1);
    }
    /**
     * Inspects the element's style and determines the logical direction that text flows.
     *
     * Certain CSS properties, like `block-size`, respect the current writing mode and text direction.
     * But `transform`, `clip`, etc. don't.
     *
     * This is provided so that CSS properties can consistently use those logical properties.
     *
     * See https://drafts.csswg.org/css-writing-modes/#logical-to-physical
     *
     * @returns An object containing the following functions:
     * * `getLogicalDirection`: retrieves a `LogicalDirectionInfo` representing the current state of the element. (Function is constant between renders)
     * * `convertElementSize`: When used in conjunction with `useElementSize`, allows you to retrieve the logical size of an element instead of the physical size.
     * * `convertToLogicalOrientation`: Based on the current direction, converts "horizontal" or "vertical" to "inline" or "block".
     * * `convertToPhysicalOrientation`:  Based on the current direction, converts "inline" or "block" to "horizontal" or "vertical".
     */


    function useLogicalDirection(_ref) {
      let {
        onLogicalDirectionChange
      } = _ref;
      useEnsureStability("useLogicalDirection", onLogicalDirectionChange);
      const [getComputedStyles, setComputedStyles] = usePassiveState(null, returnNull);
      const {
        getElement,
        useRefElementProps
      } = useRefElement({
        onElementChange: q$1(element => {
          if (element) {
            setComputedStyles(window.getComputedStyle(element));
          }
        }, [])
      }); // TODO: There's no way to refresh which writing mode we have once mounted.
      //   A. There's no way to watch for CSS style changes
      //   B. Calling getComputedStyle after every render for every element gets expensive fast and
      //   C. Is not necessary for most use cases that will never switch writing-mode within a single component
      //      (Those that do will need to mount and unmount the component that uses it)
      //
      // As a solution, here's a cheap workaround that checks when the element's size has changed,
      // and if so, tests if the writing mode has changed too.
      //
      // This will work for at least some number of cases, but a better solution is still needed.

      const {
        useElementSizeProps
      } = useElementSize({
        onSizeChange: q$1(_ => onLogicalDirectionChange === null || onLogicalDirectionChange === void 0 ? void 0 : onLogicalDirectionChange(getLogicalDirectionInfo()), [])
      });
      const getLogicalDirectionInfo = q$1(() => {
        const computedStyles = getComputedStyles();

        if (computedStyles) {
          const w = computedStyles.writingMode;
          let d = computedStyles.direction;
          const t = computedStyles.textOrientation;
          if (t == "upright") d = "ltr";
          return { ...WritingModes[w || "horizontal-tb"][d || "ltr"]
          };
        }

        return null;
      }, []); //const [getLogicalDirectionInfo, setLogicalDirectionInfo] = usePassiveState<LogicalDirectionInfo>(onLogicalDirectionChange);

      const convertToLogicalOrientation = q$1((elementOrientation, direction) => {
        var _direction, _direction2;

        (_direction = direction) !== null && _direction !== void 0 ? _direction : direction = getLogicalDirectionInfo();
        if (((_direction2 = direction) === null || _direction2 === void 0 ? void 0 : _direction2.inlineOrientation) === elementOrientation) return "inline";
        return "block";
      }, []);
      const convertToPhysicalSide = q$1((side, direction) => {
        var _direction3, _direction$blockDirec, _direction4, _direction$blockDirec2, _direction5, _direction$inlineDire, _direction6, _direction$inlineDire2, _direction7;

        (_direction3 = direction) !== null && _direction3 !== void 0 ? _direction3 : direction = getLogicalDirectionInfo();

        switch (side) {
          case "block-start":
            return M[((_direction$blockDirec = (_direction4 = direction) === null || _direction4 === void 0 ? void 0 : _direction4.blockDirection) !== null && _direction$blockDirec !== void 0 ? _direction$blockDirec : "ttb")[0]];

          case "block-end":
            return M[((_direction$blockDirec2 = (_direction5 = direction) === null || _direction5 === void 0 ? void 0 : _direction5.blockDirection) !== null && _direction$blockDirec2 !== void 0 ? _direction$blockDirec2 : "ttb")[2]];

          case "inline-start":
            return M[((_direction$inlineDire = (_direction6 = direction) === null || _direction6 === void 0 ? void 0 : _direction6.inlineDirection) !== null && _direction$inlineDire !== void 0 ? _direction$inlineDire : "ltr")[0]];

          case "inline-end":
            return M[((_direction$inlineDire2 = (_direction7 = direction) === null || _direction7 === void 0 ? void 0 : _direction7.inlineDirection) !== null && _direction$inlineDire2 !== void 0 ? _direction$inlineDire2 : "ltr")[2]];
        }
      }, []);
      const convertToLogicalSide = q$1((side, direction) => {
        var _direction8, _direction9, _direction10;

        (_direction8 = direction) !== null && _direction8 !== void 0 ? _direction8 : direction = getLogicalDirectionInfo();

        if (((_direction9 = direction) === null || _direction9 === void 0 ? void 0 : _direction9.inlineOrientation) === "vertical") {
          switch (side) {
            case "top":
              return direction.inlineDirection === "ttb" ? "inline-start" : "inline-end";

            case "bottom":
              return direction.inlineDirection === "btt" ? "inline-start" : "inline-end";

            case "left":
              return direction.blockDirection === "ltr" ? "block-start" : "block-end";

            case "right":
              return direction.blockDirection === "rtl" ? "block-start" : "block-end";
          }
        } else if (((_direction10 = direction) === null || _direction10 === void 0 ? void 0 : _direction10.inlineOrientation) === "horizontal") {
          switch (side) {
            case "top":
              return direction.blockDirection === "ttb" ? "block-start" : "block-end";

            case "bottom":
              return direction.blockDirection === "btt" ? "block-start" : "block-end";

            case "left":
              return direction.inlineDirection === "ltr" ? "inline-start" : "inline-end";

            case "right":
              return direction.inlineDirection === "rtl" ? "inline-start" : "inline-end";
          }
        }
        /* eslint-disable no-debugger */


        debugger;
        console.assert(false);
        return "inline-start";
      }, []);
      const convertToPhysicalOrientation = q$1((elementOrientation, direction) => {
        var _direction11;

        (_direction11 = direction) !== null && _direction11 !== void 0 ? _direction11 : direction = getLogicalDirectionInfo();

        if (elementOrientation == "inline") {
          var _direction12;

          if (((_direction12 = direction) === null || _direction12 === void 0 ? void 0 : _direction12.inlineOrientation) == "horizontal") return "horizontal";
          return "vertical";
        } else {
          var _direction13;

          if (((_direction13 = direction) === null || _direction13 === void 0 ? void 0 : _direction13.blockOrientation) == "vertical") return "vertical";
          return "horizontal";
        }
      }, []);
      const convertElementSize = q$1((elementSize, direction) => {
        var _direction14;

        (_direction14 = direction) !== null && _direction14 !== void 0 ? _direction14 : direction = getLogicalDirectionInfo();

        if (direction) {
          const {
            inlineSize,
            blockSize,
            inlineDirection,
            blockDirection
          } = direction; // Size is relatively simple

          const clientInlineSize = elementSize[`client${capitalize(inlineSize)}`];
          const clientBlockSize = elementSize[`client${capitalize(blockSize)}`];
          const offsetInlineSize = elementSize[`offset${capitalize(inlineSize)}`];
          const offsetBlockSize = elementSize[`offset${capitalize(blockSize)}`];
          const scrollInlineSize = elementSize[`scroll${capitalize(inlineSize)}`];
          const scrollBlockSize = elementSize[`scroll${capitalize(blockSize)}`];
          const f1 = getPhysicalLeftTop(inlineDirection);
          const f2 = getPhysicalRightBottom(inlineDirection);
          const f3 = getPhysicalLeftTop(blockDirection);
          const f4 = getPhysicalRightBottom(blockDirection);
          const clientInlineInset = elementSize[`client${capitalize(f1)}`] + (!f2 ? 0 : elementSize[`client${capitalize(f2)}`]);
          const scrollInlineInset = elementSize[`scroll${capitalize(f1)}`] + (!f2 ? 0 : elementSize[`scroll${capitalize(f2)}`]);
          const offsetInlineInset = elementSize[`offset${capitalize(f1)}`] == undefined ? undefined : elementSize[`offset${capitalize(f1)}`] + (!f2 ? 0 : elementSize[`offset${capitalize(f2)}`]);
          const clientBlockInset = elementSize[`client${capitalize(f3)}`] + (!f4 ? 0 : elementSize[`client${capitalize(f4)}`]);
          const scrollBlockInset = elementSize[`scroll${capitalize(f3)}`] + (!f4 ? 0 : elementSize[`scroll${capitalize(f4)}`]);
          const offsetBlockInset = elementSize[`offset${capitalize(f3)}`] == undefined ? undefined : elementSize[`offset${capitalize(f3)}`] + (!f4 ? 0 : elementSize[`offset${capitalize(f4)}`]);
          return {
            clientInlineSize,
            scrollInlineSize,
            offsetInlineSize,
            clientBlockSize,
            scrollBlockSize,
            offsetBlockSize,
            clientInlineInset,
            scrollInlineInset,
            offsetInlineInset,
            clientBlockInset,
            scrollBlockInset,
            offsetBlockInset
          };
        }

        return null;
      }, []);
      return {
        useLogicalDirectionProps: q$1(props => useRefElementProps(useElementSizeProps(props)), []),
        getElement,
        getLogicalDirectionInfo,
        convertToLogicalSize: convertElementSize,
        convertToLogicalOrientation,
        convertToPhysicalOrientation,
        convertToLogicalSide,
        convertToPhysicalSide
      };
    } // Position requires us to sometimes use one property (like `left`)
    // or sometimes two (like `left` + `width`)

    function getPhysicalLeftTop(dir) {
      if (dir === "ltr" || dir == "rtl") return "left";
      return "top";
    }

    function getPhysicalRightBottom(dir) {
      if (dir === "rtl") return "width";
      if (dir === "btt") return "height";
      return null;
    } // Helper for extracting info from "ltr", "ttb", etc.


    const M = {
      t: "top",
      b: "bottom",
      l: "left",
      r: "right"
    };
    const HorizontalTbLtr = {
      inlineDirection: "ltr",
      blockDirection: "ttb",
      inlineOrientation: "horizontal",
      blockOrientation: "vertical",
      inlineSize: "width",
      blockSize: "height",
      leftRightDirection: "ltr",
      overUnderDirection: "ttb"
    };
    const HorizontalTbRtl = { ...HorizontalTbLtr,
      inlineDirection: "rtl"
    };
    const VerticalRlLtr = {
      inlineDirection: "ttb",
      blockDirection: "rtl",
      inlineOrientation: "vertical",
      blockOrientation: "horizontal",
      inlineSize: "height",
      blockSize: "width",
      leftRightDirection: "ttb",
      overUnderDirection: "rtl"
    };
    const VerticalRlRtl = { ...VerticalRlLtr,
      inlineDirection: "btt"
    };
    const SidewaysRlLtr = { ...VerticalRlLtr
    };
    const SidewaysRlRtl = { ...VerticalRlRtl
    };
    const VerticalLrLtr = { ...VerticalRlLtr,
      blockDirection: "ltr"
    };
    const VerticalLrRtl = { ...VerticalRlRtl,
      blockDirection: "ltr"
    };
    const SidewaysLtLtr = { ...VerticalLrLtr,
      inlineDirection: "btt",
      leftRightDirection: "btt",
      overUnderDirection: "ltr"
    };
    const SidewaysLtRtl = { ...SidewaysLtLtr,
      inlineDirection: "ttb"
    };
    const HorizontalTb = {
      ltr: HorizontalTbLtr,
      rtl: HorizontalTbRtl
    };
    const VerticalRl = {
      ltr: VerticalRlLtr,
      rtl: VerticalRlRtl
    };
    const VerticalLr = {
      ltr: VerticalLrLtr,
      rtl: VerticalLrRtl
    };
    const SidewaysRl = {
      ltr: SidewaysRlLtr,
      rtl: SidewaysRlRtl
    };
    const SidewaysLr = {
      ltr: SidewaysLtLtr,
      rtl: SidewaysLtRtl
    };
    const WritingModes = {
      "horizontal-tb": HorizontalTb,
      "vertical-lr": VerticalLr,
      "vertical-rl": VerticalRl,
      "sideways-lr": SidewaysLr,
      "sideways-rl": SidewaysRl
    };

    function useTimeout(_ref) {
      let {
        timeout,
        callback,
        triggerIndex
      } = _ref;
      const stableCallback = useStableCallback(() => {
        startTimeRef.current = null;
        callback();
      });
      const getTimeout = useStableGetter(timeout); // Set any time we start timeout.
      // Unset any time the timeout completes

      const startTimeRef = A(null);
      const timeoutIsNull = timeout == null; // Any time the triggerIndex changes (including on mount)
      // restart the timeout.  The timeout does NOT reset
      // when the duration or callback changes, only triggerIndex.

      s(() => {
        if (!timeoutIsNull) {
          const timeout = getTimeout();
          console.assert(timeoutIsNull == (timeout == null));

          if (timeout != null) {
            startTimeRef.current = +new Date();
            const handle = setTimeout(stableCallback, timeout);
            return () => clearTimeout(handle);
          }
        }
      }, [triggerIndex, timeoutIsNull]);
      const getElapsedTime = q$1(() => {
        var _startTimeRef$current;

        return +new Date() - +((_startTimeRef$current = startTimeRef.current) !== null && _startTimeRef$current !== void 0 ? _startTimeRef$current : new Date());
      }, []);
      const getRemainingTime = q$1(() => {
        const timeout = getTimeout();
        return timeout == null ? null : Math.max(0, timeout - getElapsedTime());
      }, []);
      return {
        getElapsedTime,
        getRemainingTime
      };
    }

    /** Arguments passed to the child 'useLinearNavigationChild` */
    //export interface UseLinearNavigationChildInfo { }

    /**
     * When used in tandem with `useRovingTabIndex`, allows control of
     * the tabbable index with the arrow keys.
     *
     * @see useListNavigation, which packages everything up together.
     */

    function useLinearNavigation(_ref) {
      var _nd;

      let {
        linearNavigation: {
          navigateToFirst: ntf,
          navigateToLast: ntl,
          navigateToNext: ntn,
          navigateToPrev: ntp,
          navigationDirection: nd,
          disableArrowKeys: dak,
          disableHomeEndKeys: dhek
        }
      } = _ref;
      (_nd = nd) !== null && _nd !== void 0 ? _nd : nd = "either";
      const {
        getLogicalDirectionInfo,
        useLogicalDirectionProps
      } = useLogicalDirection({});
      const navigateToFirst = useStableCallback(ntf);
      const navigateToLast = useStableCallback(ntl);
      const navigateToNext = useStableCallback(ntn);
      const navigateToPrev = useStableCallback(ntp);
      const getDisableArrowKeys = useStableGetter(dak);
      const getDisableHomeEndKeys = useStableGetter(dhek);
      const getNavigationDirection = useStableGetter(nd);
      return {
        linearNavigation: {},
        useLinearNavigationProps: q$1(props => {
          const onKeyDown = e => {
            // Not handled by typeahead (i.e. assume this is a keyboard shortcut)
            if (e.ctrlKey || e.metaKey) return;
            const info = getLogicalDirectionInfo();
            const navigationDirection = getNavigationDirection();
            const disableArrowKeys = getDisableArrowKeys();
            const disableHomeEndKeys = getDisableHomeEndKeys();
            const allowsBlockNavigation = navigationDirection == "block" || navigationDirection == "either";
            const allowsInlineNavigation = navigationDirection == "inline" || navigationDirection == "either";

            switch (e.key) {
              case "ArrowUp":
                {
                  const propName = (info === null || info === void 0 ? void 0 : info.blockOrientation) === "vertical" ? "blockDirection" : "inlineDirection";
                  const directionAllowed = !disableArrowKeys && ((info === null || info === void 0 ? void 0 : info.blockOrientation) === "vertical" ? allowsBlockNavigation : allowsInlineNavigation);

                  if (directionAllowed) {
                    if ((info === null || info === void 0 ? void 0 : info[propName]) === "btt") {
                      navigateToNext();
                    } else {
                      navigateToPrev();
                    }

                    e.preventDefault();
                    e.stopPropagation();
                  }

                  break;
                }

              case "ArrowDown":
                {
                  const propName = (info === null || info === void 0 ? void 0 : info.blockOrientation) === "vertical" ? "blockDirection" : "inlineDirection";
                  const directionAllowed = !disableArrowKeys && ((info === null || info === void 0 ? void 0 : info.blockOrientation) === "vertical" ? allowsBlockNavigation : allowsInlineNavigation);

                  if (directionAllowed) {
                    if ((info === null || info === void 0 ? void 0 : info[propName]) === "btt") {
                      navigateToPrev();
                    } else {
                      navigateToNext();
                    }

                    e.preventDefault();
                    e.stopPropagation();
                  }

                  break;
                }

              case "ArrowLeft":
                {
                  const propName = (info === null || info === void 0 ? void 0 : info.inlineOrientation) === "horizontal" ? "inlineDirection" : "blockDirection";
                  const directionAllowed = !disableArrowKeys && ((info === null || info === void 0 ? void 0 : info.inlineOrientation) === "horizontal" ? allowsInlineNavigation : allowsBlockNavigation);

                  if (directionAllowed) {
                    if ((info === null || info === void 0 ? void 0 : info[propName]) === "rtl") {
                      navigateToNext();
                    } else {
                      navigateToPrev();
                    }

                    e.preventDefault();
                    e.stopPropagation();
                  }

                  break;
                }

              case "ArrowRight":
                {
                  const propName = (info === null || info === void 0 ? void 0 : info.inlineOrientation) === "horizontal" ? "inlineDirection" : "blockDirection";
                  const directionAllowed = !disableArrowKeys && ((info === null || info === void 0 ? void 0 : info.inlineOrientation) === "horizontal" ? allowsInlineNavigation : allowsBlockNavigation);

                  if (directionAllowed) {
                    if ((info === null || info === void 0 ? void 0 : info[propName]) === "rtl") {
                      navigateToPrev();
                    } else {
                      navigateToNext();
                    }

                    e.preventDefault();
                    e.stopPropagation();
                  }

                  e.preventDefault();
                  e.stopPropagation();
                  break;
                }

              case "Home":
                if (!disableHomeEndKeys) {
                  navigateToFirst();
                  e.preventDefault();
                  e.stopPropagation();
                }

                break;

              case "End":
                if (!disableHomeEndKeys) {
                  navigateToLast();
                  e.preventDefault();
                  e.stopPropagation();
                }

                break;
            }
          };

          return useLogicalDirectionProps(useMergedProps({
            onKeyDown
          }, props));
        }, [])
      };
    }
    /**
     * Allows for the selection of a managed child by typing the given text associated with it.
     *
     * @see useListNavigation, which packages everything up together.
     */

    function useTypeaheadNavigation(_ref2) {
      let {
        typeaheadNavigation: {
          collator,
          getIndex,
          typeaheadTimeout,
          setIndex,
          noTypeahead
        }
      } = _ref2;
      // For typeahead, keep track of what our current "search" string is (if we have one)
      // and also clear it every 1000 ms since the last time it changed.
      // Next, keep a mapping of typeahead values to indices for faster searching.
      // And, for the user's sake, let them know when their typeahead can't match anything anymore
      const [currentTypeahead, setCurrentTypeahead, getCurrentTypeahead] = useState(null);
      useTimeout({
        timeout: typeaheadTimeout !== null && typeaheadTimeout !== void 0 ? typeaheadTimeout : 1000,
        callback: () => {
          setCurrentTypeahead(null);
          setInvalidTypeahead(null);
        },
        triggerIndex: currentTypeahead
      });
      const sortedTypeaheadInfo = A([]);
      const [invalidTypeahead, setInvalidTypeahead] = useState(false); // Handle typeahead for input method editors as well
      // Essentially, when active, ignore further keys 
      // because we're waiting for a CompositionEnd event

      const [, setImeActive, getImeActive] = useState(false); // Because composition events fire *after* keydown events 
      // (but within the same task, which, TODO, could be browser-dependent),
      // we can use this to keep track of which event we're listening for on the first keydown.

      const [nextTypeaheadChar, setNextTypeaheadChar] = useState(null);
      _(() => {
        if (nextTypeaheadChar !== null) {
          setCurrentTypeahead(typeahead => (typeahead !== null && typeahead !== void 0 ? typeahead : "") + nextTypeaheadChar);
          setNextTypeaheadChar(null);
        }
      }, [nextTypeaheadChar]);
      const comparatorShared = useStableCallback((safeLhs, safeRhs) => {
        var _safeRhs$toLowerCase;

        let compare; // For the purposes of typeahead, only compare a string of the same size as our currently typed string.
        // By normalizing them first, we ensure this byte-by-byte handling of raw character data works out okay.

        safeLhs = safeLhs.normalize("NFD");
        safeRhs = safeRhs.normalize("NFD");
        if (collator) compare = collator.compare(safeLhs, safeRhs);else compare = safeLhs.toLowerCase().localeCompare((_safeRhs$toLowerCase = safeRhs.toLowerCase()) !== null && _safeRhs$toLowerCase !== void 0 ? _safeRhs$toLowerCase : "");
        return compare;
      });
      const insertingComparator = useStableCallback((lhs, rhs) => {
        if (typeof lhs === "string" && typeof rhs.text === "string") {
          return comparatorShared(lhs, rhs.text);
        }

        return lhs - rhs;
      });
      const typeaheadComparator = useStableCallback((lhs, rhs) => {
        if (typeof lhs === "string" && typeof rhs.text === "string") {
          // During typeahead, all strings longer than ours should be truncated
          // so that they're all considered equally by that point.
          return comparatorShared(lhs, rhs.text.substring(0, lhs.length));
        }

        return lhs - rhs;
      });
      const isDisabled = useStableGetter(noTypeahead);
      const useTypeaheadNavigationProps = q$1(function (_ref3) {
        let { ...props
        } = _ref3;

        const onCompositionStart = _e => {
          setImeActive(true);
        };

        const onCompositionEnd = e => {
          setNextTypeaheadChar(e.data);
          setImeActive(false);
        };

        const onKeyDown = e => {
          if (isDisabled()) return;
          const imeActive = getImeActive();
          const key = e.key; // Not handled by typeahead (i.e. assume this is a keyboard shortcut)

          if (e.ctrlKey || e.metaKey) return;

          if (!imeActive && e.key === "Backspace") {
            // Remove the last character in a way that doesn't split UTF-16 surrogates.
            setCurrentTypeahead(t => t === null ? null : [...t].reverse().slice(1).reverse().join(""));
            e.preventDefault();
            e.stopPropagation();
            return;
          } // The key property represents the typed character OR the "named key attribute" of the key pressed.
          // There's no definite way to tell the difference, but for all intents and purposes
          // there are no one-character names, and there are no non-ASCII-alpha names.
          // Thus, any one-character or non-ASCII value for `key` is *almost certainly* a typed character.


          const isCharacterKey = key.length === 1 || !/^[A-Za-z]/.test(key);

          if (isCharacterKey) {
            var _getCurrentTypeahead;

            if (key == " " && ((_getCurrentTypeahead = getCurrentTypeahead()) !== null && _getCurrentTypeahead !== void 0 ? _getCurrentTypeahead : "").trim().length == 0) ; else {
              e.preventDefault();
              e.stopPropagation(); // Note: Won't be true for the first keydown
              // but will be overwritten before useLayoutEffect is called
              // to actually apply the change

              if (!imeActive) setNextTypeaheadChar(key);
            }
          }
        };

        return useMergedProps({
          onKeyDown,
          onCompositionStart,
          onCompositionEnd
        }, props);
      }, []); // Handle changes in typeahead that cause changes to the tabbable index

      s(() => {
        if (currentTypeahead && sortedTypeaheadInfo.current.length) {
          const sortedTypeaheadIndex = binarySearch(sortedTypeaheadInfo.current, currentTypeahead, typeaheadComparator);

          if (sortedTypeaheadIndex < 0) {
            // The user has typed an entry that doesn't exist in the list
            // (or more specifically "for which there is no entry that starts with that input")
            setInvalidTypeahead(true);
          } else {
            setInvalidTypeahead(false);
            /*
              We know roughly where, in the sorted array of strings, our next typeahead location is.
              But roughly isn't good enough if there are multiple matches.
              To convert our sorted index to the unsorted index we need, we have to find the first
              element that matches us *and* (if any such exist) is *after* our current selection.
                In other words, the only way typeahead moves backwards relative to our current
              position is if the only other option is behind us.
                It's not specified in WAI-ARIA what to do in that case.  I suppose wrap back to the start?
              Though there's also a case for just going upwards to the nearest to prevent jumpiness.
              But if you're already doing typeahead on an unsorted list, like, jumpiness can't be avoided.
              I dunno. Going back to the start is the simplist though.
                Basically what this does: Starting from where we found ourselves after our binary search,
              scan backwards and forwards through all adjacent entries that also compare equally so that
              we can find the one whose `unsortedIndex` is the lowest amongst all other equal strings
              (and also the lowest `unsortedIndex` yadda yadda except that it comes after us).
                TODO: The binary search starts this off with a solid O(log n), but one-character
              searches are, thanks to pigeonhole principal, eventually guaranteed to become
              O(n*log n). This is annoying but probably not easily solvable? There could be an
              exception for one-character strings, but that's just kicking the can down
              the road. Maybe one or two characters would be good enough though.
            */
            // These are used to keep track of the candidates' positions in both our sorted array and the unsorted DOM.

            let lowestUnsortedIndexAll = null;
            let lowestSortedIndexAll = sortedTypeaheadIndex; // These two are only set for elements that are ahead of us, but the principle's the same otherwise

            let lowestUnsortedIndexNext = null;
            let lowestSortedIndexNext = sortedTypeaheadIndex;

            const updateBestFit = u => {
              var _getIndex;

              if (lowestUnsortedIndexAll == null || u < lowestUnsortedIndexAll) {
                lowestUnsortedIndexAll = u;
                lowestSortedIndexAll = i;
              }

              if ((lowestUnsortedIndexNext == null || u < lowestUnsortedIndexNext) && u > ((_getIndex = getIndex()) !== null && _getIndex !== void 0 ? _getIndex : -Infinity)) {
                lowestUnsortedIndexNext = u;
                lowestSortedIndexNext = i;
              }
            };

            let i = sortedTypeaheadIndex;

            while (i >= 0 && typeaheadComparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
              updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
              --i;
            }

            i = sortedTypeaheadIndex;

            while (i < sortedTypeaheadInfo.current.length && typeaheadComparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
              updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
              ++i;
            }

            if (lowestUnsortedIndexNext !== null) setIndex(sortedTypeaheadInfo.current[lowestSortedIndexNext].unsortedIndex);else if (lowestUnsortedIndexAll !== null) setIndex(sortedTypeaheadInfo.current[lowestSortedIndexAll].unsortedIndex);
          }
        }
      }, [currentTypeahead]);
      const useTypeaheadNavigationChild = q$1(_ref4 => {
        let {
          index,
          text
        } = _ref4;
        s(() => {
          if (text) {
            // Find where to insert this item.
            // Because all index values should be unique, the returned sortedIndex
            // should always refer to a new location (i.e. be negative)                
            const sortedIndex = binarySearch(sortedTypeaheadInfo.current, text, insertingComparator);
            console.assert(sortedIndex < 0 || insertingComparator(sortedTypeaheadInfo.current[sortedIndex].text, {
              unsortedIndex: index,
              text
            }) == 0);

            if (sortedIndex < 0) {
              sortedTypeaheadInfo.current.splice(-sortedIndex - 1, 0, {
                text,
                unsortedIndex: index
              });
            } else {
              sortedTypeaheadInfo.current.splice(sortedIndex, 0, {
                text,
                unsortedIndex: index
              });
            }

            return () => {
              // When unmounting, find where we were and remove ourselves.
              // Again, we should always find ourselves because there should be no duplicate values if each index is unique.
              const sortedIndex = binarySearch(sortedTypeaheadInfo.current, text, insertingComparator);
              console.assert(sortedIndex < 0 || insertingComparator(sortedTypeaheadInfo.current[sortedIndex].text, {
                unsortedIndex: index,
                text
              }) == 0);

              if (sortedIndex >= 0) {
                sortedTypeaheadInfo.current.splice(sortedIndex, 1);
              }
            };
          }
        }, [text]);
        return;
      }, []);
      return {
        useTypeaheadNavigationChild,
        useTypeaheadNavigationProps,
        typeaheadNavigation: {
          currentTypeahead,
          invalidTypeahead
        }
      };
    }
    /**
     * Your usual binary search implementation.
     *
     * It's used here to quickly find a good spot to start searching for our next typeahead candidate.
     * @param array The array to search through
     * @param wanted The value you'd like to find
     * @param comparator Compares `wanted` with the current value in `array`
     * @returns A non-negative value if `wanted` was found, and a negative number if not.
     * The absolute value of this number, minus one, is where `wanted` *would* be found if it *was* in `array`
     */

    function binarySearch(array, wanted, comparator) {
      let firstIndex = 0;
      let lastIndex = array.length - 1;

      while (firstIndex <= lastIndex) {
        const testIndex = lastIndex + firstIndex >> 1;
        const comparisonResult = comparator(wanted, array[testIndex]);

        if (comparisonResult > 0) {
          firstIndex = testIndex + 1;
        } else if (comparisonResult < 0) {
          lastIndex = testIndex - 1;
        } else {
          return testIndex;
        }
      }

      return -firstIndex - 1;
    }

    /**
     * Implements a roving tabindex system where only one "focusable"
     * component in a set is able to receive a tab focus. *Which*
     * of those elements receives focus is determined by you, but it's
     * recommended to offload that logic then to another hook, like
     * `useLinearNavigation`, which lets you change the tabbable
     * element with the arrow keys, `useTypeaheadNavigation`, which
     * lets you change the tabbable index with typeahead, or
     * `useListNavigation` if you just want everything bundled together.
     *
     * Note that the child hook returned by this function must be used
     * by every child that uses this roving tabindex logic.  The
     * prop-modifying hook *that* hook returns should then be used
     * on the child's element, as well as any other elements you'd like
     * to be explicitly made untabbable too.
     *
     * `shouldFocusOnChange` should return true if focus is
     * contained within whatever element contains the roving tab index.
     * Generally as simple as the following:
     * ```
     * const [focusedInner, setFocusedInner] = useState(false);
     * const { useHasFocusProps } = useHasFocus<ParentElement>({ setFocusedInner });
     * const focusOnChange = (focusedInner != false);
     * ```
     * It's not included here because `useRovingTabIndex` doesn't know
     * anything about the container element, only children elements.
     * And just as well! Children should be allowed at the root,
     * regardless of if it's the whole app or just a given component.
     */

    function useRovingTabIndex(parentParameters) {
      var _initialIndex;

      let {
        rovingTabIndex: {
          initialIndex,
          onTabbableRender,
          onTabbableIndexChange
        },
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        }
      } = parentParameters;
      (_initialIndex = initialIndex) !== null && _initialIndex !== void 0 ? _initialIndex : initialIndex = 0;
      const stableOnTabbableRender = useStableCallback(onTabbableRender !== null && onTabbableRender !== void 0 ? onTabbableRender : () => {});
      /*const [_getAnyFocused, setAnyFocused] = usePassiveState<number>(useStableCallback((newCount: number, oldCount: number | undefined) => {
          if (oldCount == 0 && newCount > 0) {
              onTabbedInTo?.();
          }
            if (newCount == 0 && (oldCount ?? 0) > 0) {
              onTabbedOutOf?.();
          }
      }), returnZero);*/
      // Keep track of three things related to the currently tabbable element's index:
      // What it is, and whether, when we render this component and it's changed, to also focus the element that was made tabbable.

      const [getTabbableIndex, setTabbableIndex2] = usePassiveState(onTabbableIndexChange, q$1(() => {
        var _initialIndex2;

        return (_initialIndex2 = initialIndex) !== null && _initialIndex2 !== void 0 ? _initialIndex2 : 0;
      }, []));
      const setTabbableIndex = q$1((updater, fromUserInteraction) => {
        setTabbableIndex2(prevIndex => {
          let nextIndex = prevIndex;
          if (typeof updater === "function") nextIndex = updater(prevIndex !== null && prevIndex !== void 0 ? prevIndex : null);else nextIndex = updater;
          nextIndex = changeIndex(nextIndex);

          if (prevIndex != nextIndex) {
            const nextChild = nextIndex == null ? null : parentReturnType.managedChildren.children.getAt(nextIndex); //const prevChild = prevIndex == null ? null : parentReturnType.managedChildren.children.getAt(prevIndex);
            //if (prevChild != null)
            //    prevChild.subInfo.blurSelf();

            if (nextChild != null && fromUserInteraction) nextChild.subInfo.focusSelf();
          }

          return nextIndex;
        });
      }, []); // Any time the tabbable index changes,
      // notify the previous child that it's no longer tabbable,
      // and notify the next child that is allowed to be tabbed to.

      const parentReturnType = useManagedChildren({
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange: useStableCallback((mounted, unmounted) => {
            onChildrenMountChange === null || onChildrenMountChange === void 0 ? void 0 : onChildrenMountChange(mounted, unmounted);
            reevaluateClosestFit();
          })
        }
      });
      const {
        useManagedChild
      } = parentReturnType;
      const {
        changeIndex,
        reevaluateClosestFit
      } = useChildrenFlag({
        initialIndex,
        children: parentReturnType.managedChildren.children,
        closestFit: true,
        key: "tabbable"
      });
      const useRovingTabIndexChild = q$1(childParameters => {
        const {
          subInfo,
          managedChild: {
            index,
            flags
          },
          rovingTabIndex: {
            hidden,
            focusSelf: focusSelfOverride
          }
        } = childParameters;
        s(() => {
          reevaluateClosestFit();
        }, [!!hidden]);
        const fsOverride = useStableGetter(focusSelfOverride);
        const focusSelf = q$1(() => {
          const fs = fsOverride();

          if (fs) {
            fs();
          } else {
            var _element$focus;

            const element = getElement();
            if (element) (_element$focus = element.focus) === null || _element$focus === void 0 ? void 0 : _element$focus.call(element);
          }
        }, []);
        /*const blurSelf = useCallback(() => {
            const bs = bsOverride();
            if (bs) {
                bs();
            }
            else {
                const element = getElement() as (Element & Partial<HTMLElement>);
                if (element)
                    element.blur?.();
            }
        }, []);*/

        const onFocusedInnerChanged = useStableCallback((focused, _prevFocused) => {
          if (focused) {
            setTabbableIndex(index, false);
          }
        });
        const {
          getElement,
          useHasFocusProps
        } = useHasFocus({
          onFocusedInnerChanged,
          getDocument: q$1(() => {
            var _getElement$ownerDocu, _getElement;

            return (_getElement$ownerDocu = (_getElement = getElement()) === null || _getElement === void 0 ? void 0 : _getElement.ownerDocument) !== null && _getElement$ownerDocu !== void 0 ? _getElement$ownerDocu : window.document;
          }, [])
        });
        const [tabbable, setTabbable, getTabbable] = useState(false);
        const tabbableFlags = A({
          get: getTabbable,
          set: setTabbable,
          isValid: useStableCallback(() => !hidden)
        });

        useManagedChild({
          managedChild: {
            index,
            flags: { ...flags,
              tabbable: tabbableFlags.current
            },
            subInfo: {
              //blurSelf,
              focusSelf,
              getElement,
              hidden: !!hidden,
              subInfo
            }
          }
        });

        s(() => {
          if (tabbable) stableOnTabbableRender(index);
        }, [tabbable, index]);

        function useRovingTabIndexChildProps(props) {
          console.assert(props.tabIndex == null);
          return useMergedProps(useHasFocusProps({
            tabIndex: tabbable ? 0 : -1
          }), props);
        }

        return {
          useRovingTabIndexChildProps,
          rovingTabIndex: {
            getElement,
            tabbable,
            getTabbable
          }
        };
      }, [
        /* Must remain stable */
      ]);
      const focusSelf = q$1(() => {
        var _parentReturnType$man, _parentReturnType$man2, _parentReturnType$man3;

        console.log(`useRovingTabIndex.focusSelf`);
        const index = getTabbableIndex();
        if (index != null) (_parentReturnType$man = parentReturnType.managedChildren.children.getAt(index)) === null || _parentReturnType$man === void 0 ? void 0 : (_parentReturnType$man2 = (_parentReturnType$man3 = _parentReturnType$man.subInfo).focusSelf) === null || _parentReturnType$man2 === void 0 ? void 0 : _parentReturnType$man2.call(_parentReturnType$man3);else setTabbableIndex(null, true);
      }, []);
      return {
        useRovingTabIndexChild,
        managedChildren: {
          children: parentReturnType.managedChildren.children
        },
        rovingTabIndex: {
          setTabbableIndex,
          getTabbableIndex,
          focusSelf
        }
      };
    }
    /*function test() {
        const { children, focusSelf, getTabbableIndex, setTabbableIndex, useRovingTabIndexChild, } = useRovingTabIndex<HTMLDivElement, { "foo": "bar" }, "flag2">({ managedChildren: {}, rovingTabIndex: {} });
        const { } = useRovingTabIndexChild({ managedChildren: { index: 0, flags: {} }, rti: { info3: { foo: "bar" } } });
    }*/

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;
      array || (array = Array(length));

      while (++index < length) {
        array[index] = source[index];
      }

      return array;
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeFloor = Math.floor,
        nativeRandom = Math.random;
    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */

    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */

    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;
      size = size === undefined ? length : size;

      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];
        array[rand] = array[index];
        array[index] = value;
      }

      array.length = size;
      return array;
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */

    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }

      return result;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */

    function baseValues(object, props) {
      return arrayMap(props, function (key) {
        return object[key];
      });
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }

      return result;
    }

    /** `Object#toString` result references. */

    var argsTag$1 = '[object Arguments]';
    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */

    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag$1;
    }

    /** Used for built-in method references. */

    var objectProto$3 = Object.prototype;
    /** Used to check objects for own properties. */

    var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
    /** Built-in value references. */

    var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */

    var isArguments = baseIsArguments(function () {
      return arguments;
    }()) ? baseIsArguments : function (value) {
      return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /** Detect free variable `exports`. */

    var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
    /** Built-in value references. */

    var Buffer = moduleExports$1 ? root.Buffer : undefined;
    /* Built-in method references for those with the same name as other `lodash` methods. */

    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */

    var isBuffer = nativeIsBuffer || stubFalse;

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$1 = 9007199254740991;
    /** Used to detect unsigned integer values. */

    var reIsUint = /^(?:0|[1-9]\d*)$/;
    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */

    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER$1 : length;
      return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
    }

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;
    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */

    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /** `Object#toString` result references. */

    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag$1 = '[object Function]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        weakMapTag = '[object WeakMap]';
    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
    /** Used to identify `toStringTag` values of typed arrays. */

    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */

    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function (value) {
        return func(value);
      };
    }

    /** Detect free variable `exports`. */

    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Detect free variable `process` from Node.js. */

    var freeProcess = moduleExports && freeGlobal.process;
    /** Used to access faster Node.js helpers. */

    var nodeUtil = function () {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        } // Legacy `process.binding('util')` for Node.js < 10.


        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();

    /* Node.js helper references. */

    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */

    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /** Used for built-in method references. */

    var objectProto$2 = Object.prototype;
    /** Used to check objects for own properties. */

    var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */

    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty$1.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
        key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }

      return result;
    }

    /** Used for built-in method references. */
    var objectProto$1 = Object.prototype;
    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */

    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$1;
      return value === proto;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function (arg) {
        return func(transform(arg));
      };
    }

    /* Built-in method references for those with the same name as other `lodash` methods. */

    var nativeKeys = overArg(Object.keys, Object);

    /** Used for built-in method references. */

    var objectProto = Object.prototype;
    /** Used to check objects for own properties. */

    var hasOwnProperty = objectProto.hasOwnProperty;
    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */

    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }

      var result = [];

      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }

      return result;
    }

    /** `Object#toString` result references. */

    var asyncTag = '[object AsyncFunction]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';
    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */

    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      } // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.


      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */

    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */

    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */

    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */

    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */

    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Hook that allows for the **direct descendant** children of this component to be re-ordered and sorted.
     *
     * *This is **separate** from "managed" children, which can be any level of child needed! Sortable/rearrangeable children must be **direct descendants** of the parent that uses this hook!*
     *
     * It's recommended to use this in conjunction with `useListNavigation`; it takes the same `indexMangler` and `indexDemangler`
     * functions that this hook returns. `useListNavigation` does not directly use this hook because, as mentioned,
     * this hook imposes serious restrictions on child structure, while `useListNavigation` allows anything.
     *
     * Besides the prop-modifying hook that's returned, the `sort` function that's returned will
     * sort all children according to their value from the `getValue` argument you pass in.
     *
     * If you want to perform some re-ordering operation that's *not* a sort, you can manually
     * re-map each child's position using `mangleMap` and `demangleMap`, which convert between
     * sorted and unsorted index positions.
     *
     * Again, unlike some other hooks, **these children must be direct descendants**. This is because
     * the prop-modifying hook inspects the given children, then re-creates them with new `key`s.
     * Because keys are given special treatment and a child has no way of modifying its own key
     * there's no other time or place this can happen other than exactly within the parent component's render function.
     */

    function useRearrangeableChildren(_ref) {
      let {
        rearrangeableChildren: {
          getIndex
        }
      } = _ref;
      // These are used to keep track of a mapping between unsorted index <---> sorted index.
      // These are needed for navigation with the arrow keys.
      const mangleMap = A(new Map());
      const demangleMap = A(new Map());
      const indexMangler = q$1(n => {
        var _mangleMap$current$ge;

        return (_mangleMap$current$ge = mangleMap.current.get(n)) !== null && _mangleMap$current$ge !== void 0 ? _mangleMap$current$ge : n;
      }, []);
      const indexDemangler = q$1(n => {
        var _demangleMap$current$;

        return (_demangleMap$current$ = demangleMap.current.get(n)) !== null && _demangleMap$current$ !== void 0 ? _demangleMap$current$ : n;
      }, []); // The sort function needs to be able to update whoever has all the sortable children.
      // Because that might not be the consumer of *this* hook directly (e.g. a table uses
      // this hook, but it's tbody that actually needs updating), we need to remotely
      // get and set a forceUpdate function.
      //const [getForceUpdate, setForceUpdate] = usePassiveState<null | (() => void)>(null, returnNull);

      const [getForceUpdate, setForceUpdate] = usePassiveState(null, returnNull);
      const rearrange = q$1(sortedRows => {
        var _getForceUpdate;

        // Update our sorted <--> unsorted indices map 
        // and rerender the whole table, basically
        for (let indexAsSorted = 0; indexAsSorted < sortedRows.length; ++indexAsSorted) {
          const indexAsUnsorted = sortedRows[indexAsSorted].index;
          mangleMap.current.set(indexAsUnsorted, indexAsSorted);
          demangleMap.current.set(indexAsSorted, indexAsUnsorted);
        }

        (_getForceUpdate = getForceUpdate()) === null || _getForceUpdate === void 0 ? void 0 : _getForceUpdate();
      }, []);
      const useRearrangeableProps = q$1(_ref2 => {
        let {
          children,
          ...props
        } = _ref2;
        const forceUpdate = useForceUpdate();
        _(() => {
          setForceUpdate(_prev => forceUpdate);
        }, [forceUpdate]);
        return useMergedProps({
          children: children.slice().map(child => ({
            child,
            mangledIndex: indexMangler(getIndex(child.props)),
            demangledIndex: getIndex(child.props)
          })).sort((lhs, rhs) => {
            return lhs.mangledIndex - rhs.mangledIndex;
          }).map(_ref3 => {
            let {
              child,
              mangledIndex,
              demangledIndex
            } = _ref3;
            return h$1(child.type, { ...child.props,
              key: demangledIndex,
              "data-mangled-index": mangledIndex,
              "data-unmangled-index": demangledIndex
            });
          })
        }, props);
      }, []);
      return {
        useRearrangeableProps,
        rearrangeableChildren: {
          indexMangler,
          indexDemangler,
          mangleMap,
          demangleMap,
          rearrange
        }
      };
    }
    /**
     * Hook that allows for the **direct descendant** children of this component to be re-ordered and sorted.
     *
     * *This is **separate** from "managed" children, which can be any level of child needed! Sortable/rearrangeable children must be **direct descendants** of the parent that uses this hook!*
     *
     * It's recommended to use this in conjunction with `useListNavigation`; it takes the same `indexMangler` and `indexDemangler`
     * functions that this hook returns. `useListNavigation` does not directly use this hook because, as mentioned,
     * this hook imposes serious restrictions on child structure, while `useListNavigation` allows anything.
     *
     * Besides the prop-modifying hook that's returned, the `sort` function that's returned will
     * sort all children according to their value from the `getValue` argument you pass in.
     *
     * If you want to perform some re-ordering operation that's *not* a sort, you can manually
     * re-map each child's position using `mangleMap` and `demangleMap`, which convert between
     * sorted and unsorted index positions.
     *
     * Again, unlike some other hooks, **these children must be direct descendants**. This is because
     * the prop-modifying hook inspects the given children, then re-creates them with new `key`s.
     * Because keys are given special treatment and a child has no way of modifying its own key
     * there's no other time or place this can happen other than exactly within the parent component's render function.
     */

    function useSortableChildren(_ref4) {
      let {
        rearrangeableChildren: {
          getIndex
        },
        sortableChildren: {
          compare: userCompare,
          getValue
        }
      } = _ref4;
      const compare = userCompare !== null && userCompare !== void 0 ? userCompare : defaultCompare;
      const {
        useRearrangeableProps: useSortableProps,
        ...rearrangeableChildrenReturnType
      } = useRearrangeableChildren({
        rearrangeableChildren: {
          getIndex
        }
      });
      const {
        rearrangeableChildren: {
          rearrange
        }
      } = rearrangeableChildrenReturnType; // The actual sort function.

      const sort = q$1(function (managedRows, direction) {
        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        const sortedRows = managedRows.arraySlice().sort((lhsRow, rhsRow) => {
          const lhsValue = getValue(lhsRow, ...args);
          const rhsValue = getValue(rhsRow, ...args);
          const result = compare(lhsValue, rhsValue); // lhsRow.getManagedCells()?.[column]?.value, rhsRow.getManagedCells()?.[column]?.value);

          if (direction[0] == "d") return -result;
          return result;
        });
        return rearrange(sortedRows);
      }, [
        /* Must remain stable */
      ]);
      const shuffle$1 = q$1(managedRows => {
        const shuffledRows = shuffle(managedRows.arraySlice());
        return rearrange(shuffledRows);
      }, [
        /* Must remain stable */
      ]);
      return {
        useSortableProps,
        sortableChildren: {
          sort,
          shuffle: shuffle$1
        },
        rearrangeableChildren: rearrangeableChildrenReturnType.rearrangeableChildren
      };
    }

    function defaultCompare(lhs, rhs) {
      return compare1(lhs, rhs);

      function compare3(lhs, rhs) {
        // Coerce strings to numbers if they seem to stay the same when serialized
        if (`${+lhs}` === lhs) lhs = +lhs;
        if (`${+rhs}` === rhs) rhs = +rhs; // At this point, if either argument is a string, turn the other one into one too

        if (typeof lhs === "string") rhs = `${rhs}`;
        if (typeof rhs === "string") lhs = `${lhs}`;
        console.assert(typeof lhs === typeof rhs);
        if (typeof lhs === "string") return lhs.localeCompare(rhs);
        if (typeof lhs === "number") return +lhs - +rhs;
        return 0;
      }

      function compare2(lhs, rhs) {
        if (typeof lhs === "boolean" || lhs instanceof Date) lhs = +lhs;
        if (typeof rhs === "boolean" || rhs instanceof Date) rhs = +rhs;
        return compare3(lhs, rhs);
      }

      function compare1(lhs, rhs) {
        if (lhs == null && rhs == null) {
          // They're both null
          return 0;
        } else if (lhs == null || rhs == null) {
          // One of the two is null -- easy case
          return lhs != null ? 1 : -1;
        }

        return compare2(lhs, rhs);
      }
    }

    function identity(t) {
      return t;
    }
    /**
     * Implements proper keyboard navigation for components like listboxes, button groups, menus, etc.
     *
     * In the document order, there will be only one "focused" or "tabbable" element, making it act more like one complete unit in comparison to everything around it.
     * Navigating forwards/backwards can be done with the arrow keys, Home/End keys, or any any text for typeahead to focus the next item that matches.
     */


    function useListNavigation(_ref) {
      var _indexMangler, _indexDemangler;

      let {
        managedChildren: {
          onChildrenMountChange,
          ...mc
        },
        rovingTabIndex,
        listNavigation: {
          indexDemangler,
          indexMangler
        },
        linearNavigation,
        typeaheadNavigation
      } = _ref;
      (_indexMangler = indexMangler) !== null && _indexMangler !== void 0 ? _indexMangler : indexMangler = identity;
      (_indexDemangler = indexDemangler) !== null && _indexDemangler !== void 0 ? _indexDemangler : indexDemangler = identity;
      useEnsureStability("useListNavigation", indexMangler, indexDemangler);
      const parentReturnType = useRovingTabIndex({
        managedChildren: { ...mc,
          onChildrenMountChange: q$1((m, u) => {
            onChildrenMountChange === null || onChildrenMountChange === void 0 ? void 0 : onChildrenMountChange(m, u);
          }, [])
        },
        rovingTabIndex
      });
      const {
        useRovingTabIndexChild,
        managedChildren: {
          children
        },
        rovingTabIndex: {
          getTabbableIndex,
          setTabbableIndex
        }
      } = parentReturnType;
      const navigateToIndex = q$1((i, fromUserInteraction) => {
        if (i != null) {
          var _indexMangler2, _indexDemangler2;

          const nextIndex = tryNavigateToIndex({
            children: children,
            default: 0,
            target: i,
            searchDirection: 1,
            indexMangler: (_indexMangler2 = indexMangler) !== null && _indexMangler2 !== void 0 ? _indexMangler2 : identity,
            indexDemangler: (_indexDemangler2 = indexDemangler) !== null && _indexDemangler2 !== void 0 ? _indexDemangler2 : identity
          });
          setTabbableIndex(i == null ? null : nextIndex, fromUserInteraction);
        } else {
          setTabbableIndex(null, fromUserInteraction);
        }
      }, []);
      const {
        useTypeaheadNavigationChild,
        useTypeaheadNavigationProps,
        typeaheadNavigation: {
          currentTypeahead,
          invalidTypeahead
        }
      } = useTypeaheadNavigation({
        typeaheadNavigation: {
          getIndex: getTabbableIndex,
          setIndex: q$1(index => {
            setTabbableIndex(index, true);
          }, []),
          ...typeaheadNavigation
        }
      });
      const {
        useLinearNavigationProps
      } = useLinearNavigation({
        linearNavigation: {
          navigateToPrev: q$1(() => {
            setTabbableIndex(c => {
              var _indexMangler3, _indexDemangler3;

              return tryNavigateToIndex({
                children,
                default: c !== null && c !== void 0 ? c : 0,
                target: indexDemangler(indexMangler(c !== null && c !== void 0 ? c : 0) - 1),
                searchDirection: -1,
                indexMangler: (_indexMangler3 = indexMangler) !== null && _indexMangler3 !== void 0 ? _indexMangler3 : identity,
                indexDemangler: (_indexDemangler3 = indexDemangler) !== null && _indexDemangler3 !== void 0 ? _indexDemangler3 : identity
              });
            }, true);
          }, []),
          navigateToNext: q$1(() => {
            setTabbableIndex(c => {
              var _indexMangler4, _indexDemangler4;

              return tryNavigateToIndex({
                children,
                default: c !== null && c !== void 0 ? c : 0,
                target: indexDemangler(indexMangler(c !== null && c !== void 0 ? c : 0) + 1),
                searchDirection: 1,
                indexMangler: (_indexMangler4 = indexMangler) !== null && _indexMangler4 !== void 0 ? _indexMangler4 : identity,
                indexDemangler: (_indexDemangler4 = indexDemangler) !== null && _indexDemangler4 !== void 0 ? _indexDemangler4 : identity
              });
            }, true);
          }, []),
          navigateToFirst: q$1(() => {
            navigateToIndex(indexDemangler(0), true);
          }, []),
          navigateToLast: q$1(() => {
            navigateToIndex(indexDemangler(children.getHighestIndex()), true);
          }, []),
          ...linearNavigation
        }
      });
      const useListNavigationProps = q$1(props => {
        return useLinearNavigationProps(useTypeaheadNavigationProps(props));
      }, [useLinearNavigationProps, useTypeaheadNavigationProps]);
      const useListNavigationChild = q$1(_ref2 => {
        let {
          managedChild: {
            index,
            flags
          },
          rovingTabIndex: {
            focusSelf,
            hidden
          },
          listNavigation: {
            text
          },
          subInfo
        } = _ref2;

        useTypeaheadNavigationChild({
          text,
          index
        });

        const getIndex = useStableGetter(index);
        s(() => {
          return () => {
            if (getTabbableIndex() == getIndex()) {
              navigateToIndex(index, false);
            }
          };
        }, []);
        const {
          useRovingTabIndexChildProps,
          rovingTabIndex: {
            tabbable,
            getTabbable,
            getElement
          }
        } = useRovingTabIndexChild({
          managedChild: {
            index,
            flags
          },
          rovingTabIndex: {
            focusSelf,
            hidden: !!hidden
          },
          subInfo: {
            text,
            subInfo
          }
        });

        const useListNavigationChildProps = function (_ref3) {
          let { ...props
          } = _ref3;
          return useMergedProps(useRovingTabIndexChildProps({
            inert: hidden
          }), props);
        };

        return {
          useListNavigationChildProps,
          rovingTabIndex: {
            tabbable,
            getTabbable,
            getElement
          }
        };
      }, [useTypeaheadNavigationChild, useRovingTabIndexChild, navigateToIndex]);
      return {
        useListNavigationChild,
        useListNavigationProps,
        listNavigation: {
          navigateToIndex
        },
        managedChildren: parentReturnType.managedChildren,
        rovingTabIndex: parentReturnType.rovingTabIndex,
        linearNavigation: {},
        typeaheadNavigation: {
          currentTypeahead,
          invalidTypeahead
        }
        /*listNavigation: { navigateToIndex },
        rovingTabIndex: { focusSelf, getTabbableIndex, setTabbableIndex },
        linearNavigation: {},
        typeaheadNavigation: { currentTypeahead, invalidTypeahead }*/

      };
    }
    /**
     * It's very common to combine a tabbable list of things and "selection" of one of those things.
     *
     * Lists, radio buttons, tabs, etc. etc.
     *
     * This is a shortcut that combines the two with the correct typing.
     * @param param0
     * @returns
     */

    function useListNavigationSingleSelection(_ref4) {
      let {
        singleSelection: {
          selectedIndex,
          selectionMode,
          onSelectedIndexChange
        },
        listNavigation,
        managedChildren,
        rovingTabIndex: { ...rovingTabIndex
        },
        linearNavigation,
        typeaheadNavigation,
        childrenHaveFocus: {
          onAllLostFocus,
          onAnyGainedFocus
        }
      } = _ref4;
      const parentReturnType = useListNavigation({
        listNavigation,
        managedChildren,
        rovingTabIndex: {
          initialIndex: selectedIndex !== null && selectedIndex !== void 0 ? selectedIndex : undefined,
          ...rovingTabIndex
        },
        linearNavigation,
        typeaheadNavigation
      });
      const {
        useChildrenHaveFocusChild
      } = useChildrenHaveFocus({
        childrenHaveFocus: {
          onAllLostFocus: useStableCallback(() => {
            onAllLostFocus === null || onAllLostFocus === void 0 ? void 0 : onAllLostFocus();
            if (selectedIndex != null) setTabbableIndex(selectedIndex, false);
          }),
          onAnyGainedFocus
        },
        managedChildren: {
          onAfterChildLayoutEffect: null,
          onChildrenMountChange: null
        }
      });
      const stableOnChange = useStableCallback(onSelectedIndexChange);
      const {
        useListNavigationChild,
        useListNavigationProps,
        ...listRest
      } = parentReturnType;
      const {
        managedChildren: {
          children
        },
        rovingTabIndex: {
          setTabbableIndex
        }
      } = listRest;
      const {
        changeIndex: changeSelectedIndex,
        getCurrentIndex: getSelectedIndex //reevaluateClosestFit

      } = useChildrenFlag({
        children: children,
        initialIndex: selectedIndex,
        key: "selected",
        closestFit: false
      });
      _(() => {
        changeSelectedIndex(selectedIndex);
      }, [selectedIndex]);
      return {
        useListNavigationSingleSelectionChild: q$1(_ref5 => {
          let {
            managedChild: {
              index,
              flags
            },
            rovingTabIndex: rti,
            listNavigation: ls,
            hasFocus: {
              onFocusedInnerChanged,
              ...hasFocus
            },
            subInfo
          } = _ref5;
          const [isSelected, setIsSelected, getIsSelected] = useState(getSelectedIndex() == index);
          const selectedRef = A({
            get: getIsSelected,
            set: setIsSelected,
            isValid: useStableCallback(() => !rti.hidden)
          });
          const {
            useChildrenHaveFocusChildProps,
            getElement
          } = useChildrenHaveFocusChild({
            onFocusedInnerChanged: useStableCallback((focused, prev) => {
              onFocusedInnerChanged === null || onFocusedInnerChanged === void 0 ? void 0 : onFocusedInnerChanged(focused, prev);

              if (selectionMode == 'focus' && focused) {
                stableOnChange({
                  target: getElement(),
                  currentTarget: getElement()
                }, getIndex());
              }
            }),
            ...hasFocus,
            managedChild: {
              index
            }
          });
          const {
            rovingTabIndex: rti_ret,
            useListNavigationChildProps
          } = useListNavigationChild({
            managedChild: {
              index,
              flags: {
                selected: selectedRef.current,
                ...flags
              }
            },
            rovingTabIndex: rti,
            listNavigation: ls,
            subInfo
          });
          const getIndex = useStableGetter(index);
          const usePressProps = usePress({
            onClickSync: e => {
              stableOnChange(e, getIndex());
            },
            exclude: {},
            hasFocus
          });
          return {
            useListNavigationSingleSelectionChildProps: props => usePressProps(useChildrenHaveFocusChildProps(useListNavigationChildProps(props))),
            rovingTabIndex: rti_ret,
            singleSelection: {
              selected: isSelected,
              getSelected: getIsSelected
            }
          };
        }, [selectionMode]),
        useListNavigationSingleSelectionProps: q$1(function () {
          return useListNavigationProps(...arguments);
        }, []),
        ...listRest,
        singleSelection: {}
      };
    }
    function tryNavigateToIndex(_ref8) {
      let {
        children,
        searchDirection,
        indexDemangler,
        indexMangler,
        target
      } = _ref8;
      const upper = children.getHighestIndex();
      const lower = 0;

      if (searchDirection === -1) {
        while (target >= lower && children.getAt(target) == null || !!((_children$getAt = children.getAt(target)) !== null && _children$getAt !== void 0 && _children$getAt.subInfo.hidden)) {
          var _children$getAt;

          target = indexDemangler(indexMangler(target) - 1);
        }

        return target < lower ? indexDemangler(lower) : target;
      } else if (searchDirection === 1) {
        while (target <= upper && children.getAt(target) == null || !!((_children$getAt2 = children.getAt(target)) !== null && _children$getAt2 !== void 0 && _children$getAt2.subInfo.hidden)) {
          var _children$getAt2;

          target = indexDemangler(indexMangler(target) + 1);
        }

        return target > upper ? indexDemangler(upper) : target;
      } else {
        return lower;
      }
    }

    function useGridNavigation(_ref) {
      var _rti$initialIndex;

      let {
        managedChildren: mc,
        rovingTabIndex: rti,
        listNavigation: ls,
        linearNavigation: ln,
        typeaheadNavigation: tn
      } = _ref;
      const [currentColumn, setCurrentColumn, getCurrentColumn] = useState((_rti$initialIndex = rti.initialIndex) !== null && _rti$initialIndex !== void 0 ? _rti$initialIndex : 0);
      const {
        useListNavigationChild: useListNavigationChildAsGridRow,
        useListNavigationProps: useListNavigationPropsAsGridParent,
        ...parentLsReturnType
      } = useListNavigation({
        managedChildren: mc,
        rovingTabIndex: rti,
        listNavigation: ls,
        linearNavigation: {
          navigationDirection: "block",
          ...ln
        },
        typeaheadNavigation: tn
      });
      const useGridNavigationRow = q$1(_ref2 => {
        let {
          asChildRowOfSection: asChild,
          asParentRowOfCells: asParent
        } = _ref2;
        // Override the focusSelf that rovingTabIndex does.
        // Instead of focusing the entire row, we ask the cell that corresponds
        // to our current column to focus itself.
        const focusSelf = useStableCallback(() => {
          const c2 = getCurrentColumn();

          if (asChild.rovingTabIndex.focusSelf) {
            asChild.rovingTabIndex.focusSelf();
          } else {
            navigateToIndex(c2 !== null && c2 !== void 0 ? c2 : 0, true);
          }
        });
        const rowLsChildReturnType = useListNavigationChildAsGridRow({
          managedChild: asChild.managedChild,
          listNavigation: { ...asChild.listNavigation
          },
          rovingTabIndex: { ...asChild.rovingTabIndex,
            focusSelf
          },
          subInfo: asChild.subInfo
        });
        const {
          rovingTabIndex: {
            tabbable
          },
          useListNavigationChildProps
        } = rowLsChildReturnType;
        s(() => {
          if (!tabbable) {
            navigateToIndex(null, false);
          }
        }, [tabbable]);
        const rowLsReturnType = useListNavigation({
          managedChildren: { ...asParent.managedChildren
          },
          rovingTabIndex: { ...asParent.rovingTabIndex
          },
          linearNavigation: { ...asParent.linearNavigation,
            navigationDirection: "inline"
          },
          typeaheadNavigation: { ...asParent.typeaheadNavigation,
            noTypeahead: true
          },
          listNavigation: { ...asParent.listNavigation
          }
        });
        const {
          rovingTabIndex: {
            setTabbableIndex
          },
          useListNavigationChild: useGridNavigationColumn2,
          useListNavigationProps: useGridNavigationColumnProps,
          listNavigation: {
            navigateToIndex
          }
        } = rowLsReturnType; //const rowHidden = !!asChild.rovingTabIndex.hidden;

        const useGridNavigationCell = q$1(_ref3 => {
          let {
            subInfo,
            hasFocus: {
              onLastFocusedInnerChanged,
              ...hasFocus
            },
            managedChild,
            listNavigation: ls,
            rovingTabIndex: {
              focusSelf: fs,
              ...rti
            }
          } = _ref3;
          //rti.hidden || rowHidden;
          const focusSelf = useStableCallback(() => {
            var _rti_cell_ret$getElem, _rti_cell_ret$getElem2;

            setCurrentColumn(managedChild.index);
            setTabbableIndex(managedChild.index, false);
            if (fs) fs();else (_rti_cell_ret$getElem = rti_cell_ret.getElement()) === null || _rti_cell_ret$getElem === void 0 ? void 0 : (_rti_cell_ret$getElem2 = _rti_cell_ret$getElem.focus) === null || _rti_cell_ret$getElem2 === void 0 ? void 0 : _rti_cell_ret$getElem2.call(_rti_cell_ret$getElem);
          });
          /*const blurSelf = useStableCallback(() => {
              if (bs)
                  bs();
              else
                  (rti_cell_ret.getElement() as Element & Partial<HTMLElement>)?.blur?.();
          });*/

          const {
            useListNavigationChildProps,
            rovingTabIndex: rti_cell_ret
          } = useGridNavigationColumn2({
            managedChild: managedChild,
            listNavigation: { ...ls
            },
            rovingTabIndex: {
              focusSelf,
              ...rti
            },
            subInfo
          });
          const {
            useHasFocusProps
          } = useHasFocus({
            onLastFocusedInnerChanged: useStableCallback((focused, prev) => {
              onLastFocusedInnerChanged === null || onLastFocusedInnerChanged === void 0 ? void 0 : onLastFocusedInnerChanged(focused, prev);

              if (focused) {
                setCurrentColumn(managedChild.index);
                setTabbableIndex(managedChild.index, false);
              }
            }),
            ...hasFocus
          });
          const ret = {
            gridNavigation: {
              getCurrentColumn
            },
            rovingTabIndex: rti_cell_ret,
            useGridNavigationCellProps: function (props) {
              return useListNavigationChildProps(useGridNavigationColumnProps(useHasFocusProps(props)));
            }
          };
          return ret;
        }, []);
        const ret = {
          asParentOfCells: {
            linearNavigation: rowLsReturnType.linearNavigation,
            listNavigation: rowLsReturnType.listNavigation,
            managedChildren: rowLsReturnType.managedChildren,
            rovingTabIndex: rowLsReturnType.rovingTabIndex,
            typeaheadNavigation: rowLsReturnType.typeaheadNavigation
          },
          asChildRow: rowLsChildReturnType,
          useGridNavigationCell,
          useGridNavigationRowProps: function (props) {
            const ret = useListNavigationChildProps(props);
            ret.tabIndex = -1;
            return ret;
          }
        };
        return ret;
      }, []);
      return {
        gridNavigation: {
          getCurrentColumn,
          currentColumn
        },
        linearNavigation: parentLsReturnType.linearNavigation,
        listNavigation: parentLsReturnType.listNavigation,
        rovingTabIndex: parentLsReturnType.rovingTabIndex,
        typeaheadNavigation: parentLsReturnType.typeaheadNavigation,
        managedChildren: parentLsReturnType.managedChildren,
        useGridNavigationRow,
        useGridNavigationProps: useListNavigationPropsAsGridParent
      };
    }

    /**
     * Returns a hook that modifies a set of props to provide a randomly-generated ID if one was not provided.
     *
     * If you'd like to use the ID in a property that's *not* named `id` (like `for` or `aria-labelledby` or whatnot), `useReferencedIdProps` is also provided.
     *
     * And the randomly-generated id itself is also provided in case you want to handle the logic yourself without `useMergedProps`.
     *
     * Unlike most other `use*Props` hooks, these are mostly stable.
     */

    function useRandomId(_ref) {
      let {
        randomId: {
          prefix
        },
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        }
      } = _ref;
      const [backupRandomId,, getBackupRandomId] = useState(() => generateRandomId(prefix));
      const [usedId, setUsedId, getUsedId] = useState(() => getBackupRandomId());
      const mismatchErrorRef = A(false);
      useEnsureStability("useRandomId", prefix);
      const {
        useManagedChild,
        ...managedChildrenReturnType
      } = useManagedChildren({
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        }
      });
      const {
        managedChildren: {
          children
        }
      } = managedChildrenReturnType;
      const useRandomIdSourceElement = q$1(() => {
        const [usedIdLocal, setUsedIdLocal, getUsedIdLocal] = useState(getUsedId());
        const {
          useRefElementProps,
          getElement
        } = useRefElement(); // Every time the source element renders, inspect the ID it actually used
        // (whether it was ours or not isn't up to us, it's up to the component)
        // so this is how we notify the referencer component of changes

        s(() => {
          const element = getElement();

          if (element) {
            children.getAt("referencer").subInfo.setUsedId(element.id);
            setUsedId(element.id);
          }
        });

        useManagedChild({
          managedChild: {
            index: "source",
            subInfo: {
              setUsedId: setUsedIdLocal
            }
          }
        });

        const useRandomIdSourceElementProps = q$1(function (p) {
          p.id || (p.id = backupRandomId);
          return useRefElementProps(p);
        }, []);
        return {
          usedId: usedIdLocal,
          getUsedId: getUsedIdLocal,
          useRandomIdSourceElementProps
        };
      }, []);
      const useRandomIdReferencerElement = q$1(idPropName => {
        const [usedIdLocal, setUsedIdLocal, getUsedIdLocal] = useState(getUsedId()); // Whatever ID was most recently used by the actual "id" prop of the source element

        useEnsureStability(idPropName);

        useManagedChild({
          managedChild: {
            index: "referencer",
            subInfo: {
              setUsedId: setUsedIdLocal
            }
          }
        });

        const useRandomIdReferencerElementProps = q$1(function (_ref2) {
          let {
            [idPropName]: givenId,
            ...p
          } = _ref2;

          if (givenId && usedId) {
            if (givenId != usedId) {
              if (!mismatchErrorRef.current) {
                mismatchErrorRef.current = true;
                console.error(`Multiple mis-matched IDs were provided for the ${idPropName} prop: the child explicitly specified ${givenId} in its  ${idPropName} prop, but the parent told this child to use ${usedId} (the parent's ID).`);
              }
            }
          }

          return useMergedProps(p, {
            [idPropName]: usedId
          });
        }, [usedId]);
        return {
          usedId: usedIdLocal,
          getUsedId: getUsedIdLocal,
          useRandomIdReferencerElementProps
        };
      }, []);
      return {
        randomId: {
          usedId,
          getUsedId
        },
        ...managedChildrenReturnType,
        useRandomIdSourceElement,
        useRandomIdReferencerElement
      };
    }

    function useButton(_ref) {
      let {
        button: {
          tagButton,
          disabled,
          onPress,
          pressed
        },
        hasFocus
      } = _ref;
      debugLog("useButton");

      function useButtonProps(_ref2) {
        let {
          "aria-pressed": ariaPressed,
          tabIndex,
          role,
          ...p
        } = _ref2;
        const usePressProps = usePress({
          onClickSync: e => {
            var _ref3;

            return (_ref3 = disabled ? null : onPress) === null || _ref3 === void 0 ? void 0 : _ref3(enhanceEvent(e, {
              pressed: pressed == null ? null : !pressed
            }));
          },
          exclude: undefined,
          hasFocus
        });
        const props = usePressProps(p);
        const baseProps = {
          role,
          tabIndex,
          "aria-pressed": ariaPressed !== null && ariaPressed !== void 0 ? ariaPressed : pressed === true ? "true" : pressed === false ? "false" : undefined
        };
        const buttonProps = { ...baseProps,
          disabled: disabled && disabled != "soft" ? true : false,
          "aria-disabled": disabled === 'soft' ? 'true' : undefined
        };
        const divProps = { ...baseProps,
          tabIndex: tabIndex !== null && tabIndex !== void 0 ? tabIndex : disabled === "hard" ? -1 : 0,
          role: role !== null && role !== void 0 ? role : "button",
          "aria-disabled": disabled ? "true" : undefined
        };

        switch (tagButton) {
          case "button":
            return useMergedProps(buttonProps, props);

          default:
            return useMergedProps(divProps, props);
        }
      }

      return {
        useButtonProps
      };
    }

    //export interface UseAccordionSectionHeaderReturnType<E extends Element> { useAccordionSectionHeaderProps: (props: h.JSX.HTMLAttributes<E>) => h.JSX.HTMLAttributes<E>; }
    //export type UseAccordionSectionBody<E extends Element> = () => UseAccordionSectionBodyReturnType<E>;
    //export interface UseAccordionSectionBodyReturnType<E extends Element> { useAccordionSectionBodyProps: (props: h.JSX.HTMLAttributes<E>) => h.JSX.HTMLAttributes<E>; }

    function useAccordion(_ref) {
      let {
        accordion: {
          initialIndex
        },
        linearNavigation: {
          disableArrowKeys,
          disableHomeEndKeys,
          navigationDirection
        },
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        }
      } = _ref;
      debugLog("useAccordian");
      const [_currentFocusedIndex, setCurrentFocusedIndex, getCurrentFocusedIndex] = useState(null);
      const mcReturnType = useManagedChildren({
        managedChildren: {
          onChildrenMountChange: useStableCallback((m, u) => {
            ocmc2();
            onChildrenMountChange === null || onChildrenMountChange === void 0 ? void 0 : onChildrenMountChange(m, u);
          }),
          onAfterChildLayoutEffect
        }
      });
      const {
        useManagedChild,
        managedChildren: {
          children
        }
      } = mcReturnType;
      const navigateToFirst = q$1(() => {
        changeTabbedIndex(0);
      }, []);
      const navigateToLast = q$1(() => {
        changeTabbedIndex(children.getHighestIndex());
      }, []);
      const navigateToPrev = q$1(() => {
        changeTabbedIndex(i => (i !== null && i !== void 0 ? i : 0) - 1);
      }, []);
      const navigateToNext = q$1(() => {
        changeTabbedIndex(i => (i !== null && i !== void 0 ? i : 0) + 1);
      }, []);
      const linearReturnType = useLinearNavigation({
        linearNavigation: {
          navigateToFirst,
          navigateToLast,
          navigateToNext,
          navigateToPrev,
          disableArrowKeys,
          disableHomeEndKeys,
          navigationDirection: navigationDirection !== null && navigationDirection !== void 0 ? navigationDirection : "block"
        }
      });
      const {
        useLinearNavigationProps
      } = linearReturnType;
      const {
        changeIndex: changeExpandedIndex,
        getCurrentIndex: _getCurrentExpandedIndex
      } = useChildrenFlag({
        initialIndex,
        children,
        key: "open",
        closestFit: false
      });
      const {
        changeIndex: changeTabbedIndex,
        getCurrentIndex: _getTabbedIndex,
        reevaluateClosestFit: ocmc2
      } = useChildrenFlag({
        initialIndex,
        children,
        key: "tabbed",
        closestFit: true,
        onIndexChange: q$1(i => {
          if (i != null) {
            var _children$getAt;

            (_children$getAt = children.getAt(i)) === null || _children$getAt === void 0 ? void 0 : _children$getAt.subInfo.focus();
          }
        }, [])
      });
      const useAccordionSection = q$1(_ref2 => {
        var _ref3;

        let {
          button: {
            disabled,
            tagButton
          },
          accordionSection: {
            open: openFromUser
          },
          managedChildren: {
            index
          },
          hasFocus: {
            onFocusedInnerChanged,
            ...hasFocus
          }
        } = _ref2;
        debugLog("useAccordianSection");
        const [openFromParent, setOpenFromParent, getOpenFromParent] = useState(null);
        const {
          useRandomIdSourceElement: useBodyAsSourceId,
          useRandomIdReferencerElement: useHeaderAsReferencerId,
          randomId: {
            usedId: bodyId,
            getUsedId: getBodyId
          }
        } = useRandomId({
          randomId: {
            prefix: "aria-accordion-section-body-"
          },
          managedChildren: {
            onAfterChildLayoutEffect: null,
            onChildrenMountChange: null
          }
        });
        const {
          useRandomIdSourceElement: useHeaderAsSourceId,
          useRandomIdReferencerElement: useBodyAsReferencerId,
          randomId: {
            usedId: headerId,
            getUsedId: getHeaderId
          }
        } = useRandomId({
          randomId: {
            prefix: "aria-accordion-section-header-"
          },
          managedChildren: {
            onAfterChildLayoutEffect: null,
            onChildrenMountChange: null
          }
        });
        const {
          useRandomIdSourceElementProps: useBodyAsSourceIdProps
        } = useBodyAsSourceId();
        const {
          useRandomIdReferencerElementProps: useBodyAsReferencerIdProps
        } = useBodyAsReferencerId("aria-labelledby");
        const {
          useRandomIdSourceElementProps: useHeaderAsSourceIdProps
        } = useHeaderAsSourceId();
        const {
          useRandomIdReferencerElementProps: useHeaderAsReferencerIdProps
        } = useHeaderAsReferencerId("aria-controls");
        const open = (_ref3 = openFromUser !== null && openFromUser !== void 0 ? openFromUser : openFromParent) !== null && _ref3 !== void 0 ? _ref3 : false; //const getOpen = useStableGetter(!!open);

        const getIndex = useStableGetter(index);
        const {
          getElement: getHeaderElement,
          useRefElementProps: useHeaderRefElementProps
        } = useRefElement({});
        const {
          getElement: getBodyElement,
          useRefElementProps: useBodyRefElementProps
        } = useRefElement({});
        const focus = q$1(() => {
          var _getHeaderElement;

          if (getCurrentFocusedIndex() != null) (_getHeaderElement = getHeaderElement()) === null || _getHeaderElement === void 0 ? void 0 : _getHeaderElement.focus();
        }, []);
        const openRef = A({
          get: () => !!getOpenFromParent(),
          set: open => {
            setOpenFromParent(open);

            if (open) {
              const bodyElement = getBodyElement();
              setCurrentFocusedIndex(getIndex());

              if (bodyElement) {
                queueMicrotask(() => bodyElement.focus());
              }
            }
          },
          isValid: returnTrue
        });
        const tabbedRef = A({
          get: () => getCurrentFocusedIndex() == getIndex(),
          set: open => {
            if (open) setCurrentFocusedIndex(getIndex());
          },
          isValid: returnTrue
        });

        useManagedChild({
          managedChild: {
            index: index,
            flags: {
              open: openRef.current,
              tabbed: tabbedRef.current
            },
            subInfo: {
              focus,
              getOpenFromParent,
              setOpenFromParent
            } // info: { index, setOpenFromParent, getOpenFromParent, focus, flags: { open: openRef.current, tabbed: tabbedRef.current } }

          }
        });

        function useAccordionSectionHeaderProps(_ref4) {
          var _ref5;

          let {
            ["aria-expanded"]: ariaExpanded,
            ["aria-disabled"]: ariaDisabled,
            ...props
          } = _ref4;

          //const onFocus = () => { changeTabbedIndex(index); }
          const onPress = () => {
            if (getOpenFromParent()) changeExpandedIndex(null);else changeExpandedIndex(index);
          };

          props.tabIndex = 0;
          const {
            useButtonProps
          } = useButton({
            button: {
              tagButton,
              disabled,
              onPress
            },
            hasFocus: { ...hasFocus,
              onFocusedInnerChanged: useStableCallback((focused, prev) => {
                onFocusedInnerChanged === null || onFocusedInnerChanged === void 0 ? void 0 : onFocusedInnerChanged(focused, prev);
                if (focused) changeTabbedIndex(index);
              })
            }
          });
          const retB = useButtonProps(props); //const ret3: h.JSX.HTMLAttributes<HeaderElement>
          //    = useMergedProps<HeaderElement>(retD, { onFocus });

          return useLinearNavigationProps(useHeaderAsSourceIdProps(useHeaderAsReferencerIdProps({
            "aria-expanded": ((_ref5 = ariaExpanded !== null && ariaExpanded !== void 0 ? ariaExpanded : open) !== null && _ref5 !== void 0 ? _ref5 : false).toString(),
            "aria-disabled": ariaDisabled !== null && ariaDisabled !== void 0 ? ariaDisabled : open ? "true" : undefined,
            ...useHeaderRefElementProps(retB)
          })));
        }

        function useAccordionSectionBodyProps(_ref6) {
          var _ret2$tabIndex;

          let {
            role,
            ...props
          } = _ref6;
          const ret1 = useBodyAsReferencerIdProps({
            role: role !== null && role !== void 0 ? role : "region",
            ...props
          });
          const ret2 = useBodyAsSourceIdProps(ret1);
          (_ret2$tabIndex = ret2.tabIndex) !== null && _ret2$tabIndex !== void 0 ? _ret2$tabIndex : ret2.tabIndex = -1;
          return useBodyRefElementProps(ret2);
        }

        return {
          accordionSection: {
            expanded: open,
            focused: getCurrentFocusedIndex() == index,
            bodyId,
            headerId,
            getBodyId,
            getHeaderId
          },
          useAccordionSectionHeaderProps,
          useAccordionSectionBodyProps
        };
      }, []);
      return {
        managedChildren: mcReturnType.managedChildren,
        accordion: {
          changeExpandedIndex
        },
        useAccordionSection
      };
    }

    /**
     * Adds an ID and "aria-labelledby" for two elements, an "input" element and a "label" element.
     *
     * Returns the `useReferencedIdProps` hooks if you need to also add other ID-referencer attributes, like `for`
     *
     * @see useInputLabel
     */

    function useLabel(_ref) {
      let {
        label: {
          prefixInput,
          prefixLabel,
          tagInput,
          tagLabel
        }
      } = _ref;
      const {
        useRandomIdSourceElement: useLabelAsSourceId,
        useRandomIdReferencerElement: useLabelAsReferencerId,
        randomId: {
          usedId: labelId,
          getUsedId: getLabelId
        }
      } = useRandomId({
        randomId: {
          prefix: prefixLabel
        },
        managedChildren: {
          onAfterChildLayoutEffect: null,
          onChildrenMountChange: null
        }
      });
      const {
        useRandomIdSourceElement: useInputAsSourceId,
        useRandomIdReferencerElement: useInputAsReferencerId,
        randomId: {
          usedId: inputId,
          getUsedId: getInputId
        }
      } = useRandomId({
        randomId: {
          prefix: prefixInput
        },
        managedChildren: {
          onAfterChildLayoutEffect: null,
          onChildrenMountChange: null
        }
      });
      const {
        useRandomIdSourceElementProps: useLabelAsSourceIdProps
      } = useLabelAsSourceId();
      const {
        useRandomIdSourceElementProps: useInputAsSourceIdProps
      } = useInputAsSourceId();
      const {
        useRandomIdReferencerElementProps: useLabelAsReferencerIdProps
      } = useLabelAsReferencerId("aria-labelledby");
      const {
        useRandomIdReferencerElementProps: useInputAsReferencerIdProps
      } = useInputAsReferencerId("for");
      const isSyntheticLabel = tagInput != "input" || tagLabel != "label";
      const useLabelLabel = q$1(function useLabelLabel() {
        return {
          useLabelLabelProps: props => {
            const propsWithoutFor = useLabelAsSourceIdProps(props);
            const propsWithFor = useInputAsReferencerIdProps(propsWithoutFor);
            if (tagLabel == "label" && tagInput == "input") return propsWithFor;else return propsWithoutFor;
          }
        };
      }, [isSyntheticLabel]);
      const useLabelInput = q$1(function useLabelInput() {
        return {
          useLabelInputProps: _ref2 => {
            let {
              "aria-labelledby": ariaLabelledby,
              ...props
            } = _ref2;
            console.assert(!ariaLabelledby);
            const propsWithoutAriaLabelledBy = useInputAsSourceIdProps(props);
            const propsWithAriaLabelledBy = useLabelAsReferencerIdProps(propsWithoutAriaLabelledBy);
            if (isSyntheticLabel && !props["aria-label"]) return propsWithAriaLabelledBy;else return propsWithoutAriaLabelledBy;
          }
        };
      }, [isSyntheticLabel]);
      return {
        useLabelInput,
        useLabelLabel,
        label: {
          labelId,
          inputId,
          getLabelId,
          getInputId
        }
      };
    }

    const handlesInput = (tag, labelPosition, which) => {
      if (labelPosition === "separate") {
        if (which === "input-element") return true;else if (which === "label-element") return tag != "input";
      } else if (labelPosition === "wrapping") {
        if (which === "input-element") return false;
        if (which == "label-element") return true;
      }
    };
    /**
     * Handles label type (wrapping or separate) for checkboxes, radios, switches, etc.
     *
     * If it's a toggleable click-thing with a label (that can also be clicked), then it's a checkbox-like.
     * @param param0
     * @returns
     */


    function useCheckboxLike(_ref3) {
      let {
        checkboxLike: {
          checked,
          disabled,
          labelPosition,
          role,
          onCheckedChange
        },
        label: {
          tagInput,
          tagLabel
        },
        hasFocusInput,
        hasFocusLabel
      } = _ref3;
      const stableOnInput = useStableCallback(e => {
        e.preventDefault();
        onCheckedChange === null || onCheckedChange === void 0 ? void 0 : onCheckedChange(e);
      });
      const {
        useLabelInput: useILInput,
        useLabelLabel: useILLabel,
        label
      } = useLabel({
        label: {
          prefixLabel: "aria-checkbox-label-",
          prefixInput: "aria-checkbox-input-",
          tagInput: tagInput,
          tagLabel: tagLabel
        }
      });
      const {
        getElement: getLabelElement,
        useRefElementProps: useLabelRefElementProps
      } = useRefElement();
      const {
        getElement: getInputElement,
        useRefElementProps: useInputRefElementProps
      } = useRefElement();
      const useCheckboxLikeInputElement = q$1(function useCheckboxInputElement() {
        const tag = tagInput;
        const {
          useLabelInputProps: useILInputProps
        } = useILInput();
        const {
          useRefElementProps,
          getElement
        } = useRefElement({}); // onClick and onChange are a bit messy, so we need to
        // *always* make sure that the visible state is correct
        // after all the event dust settles.
        // See https://github.com/preactjs/preact/issues/2745,
        // and https://github.com/preactjs/preact/issues/1899#issuecomment-525690194

        s(() => {
          const element = getElement();

          if (element && tag == "input") {
            element.indeterminate = checked === "mixed";
            element.checked = checked === true;
          }
        }, [tag, checked]);
        return {
          getInputElement: getElement,
          useCheckboxLikeInputElementProps
        };

        function useCheckboxLikeInputElementProps(_ref4) {
          let { ...p0
          } = _ref4;
          // For some reason, Chrome won't fire onInput events for radio buttons that are tabIndex=-1??
          // Needs investigating, but onInput works fine in Firefox
          // TODO
          const usePressProps = usePress({
            onClickSync: disabled || !handlesInput(tag, labelPosition, "input-element") ? undefined : stableOnInput,
            exclude: undefined,
            hasFocus: hasFocusInput
          });
          let props = usePressProps(p0);
          if (tag == "input") props.onInput = e => e.preventDefault();
          props = useRefElementProps(useILInputProps(props));

          if (labelPosition == "wrapping") {
            // Because the wrapped label handles all interactions,
            // we need to make sure this element can't be interacted with
            // even if it's an input element.
            props.inert = true;
            props.tabIndex = -1;
            props.role = "presentation";
            props["aria-hidden"] = "true";

            props.onFocus = _ => {
              var _getLabelElement;

              return (_getLabelElement = getLabelElement()) === null || _getLabelElement === void 0 ? void 0 : _getLabelElement.focus();
            };
          } else {
            if (tag === "input") {
              props.checked = checked === true;
            } else {
              props.role = role;
              props.tabIndex = 0;
              props["aria-checked"] = checked === "mixed" ? "mixed" : checked === true ? "true" : undefined;
            }

            props["aria-disabled"] = disabled.toString();
          } // Make sure that label clicks can't affect the checkbox while it's disabled


          props.onClick = disabled ? e => {
            e.preventDefault();
          } : props.onClick;
          return useInputRefElementProps(useMergedProps(p0, props));
        }
      }, [useILInput, role, labelPosition, disabled, checked, tagInput]);
      const useCheckboxLikeLabelElement = q$1(function useCheckboxLabelElement() {
        const tag = tagLabel;
        const {
          useLabelLabelProps: useILLabelProps
        } = useILLabel();

        function useCheckboxLikeLabelElementProps(_ref5) {
          let { ...p0
          } = _ref5;
          const usePressProps = usePress({
            onClickSync: disabled || !handlesInput(tag, labelPosition, "label-element") ? undefined : stableOnInput,
            exclude: undefined,
            hasFocus: hasFocusLabel
          });
          const newProps = usePressProps(p0);

          if (labelPosition == "wrapping") {
            if (newProps.tabIndex == null) newProps.tabIndex = 0;
            if (newProps.role == null) newProps.role = role;
            newProps["aria-disabled"] = disabled.toString();
            newProps["aria-checked"] = checked.toString();
          } // Just make sure that label clicks can't affect the checkbox while it's disabled


          newProps.onClick = disabled ? e => {
            e.preventDefault();
          } : newProps.onClick;
          return useILLabelProps(useLabelRefElementProps(newProps));
        }

        return {
          useCheckboxLikeLabelElementProps
        };
      }, [useILLabel, disabled, checked, role, labelPosition, tagLabel]);
      return {
        useCheckboxLikeInputElement,
        useCheckboxLikeLabelElement,
        checkboxLike: {
          getLabelElement,
          getInputElement
        },
        label
      };
    }

    function useCheckbox(_ref) {
      let {
        checkboxLike,
        label,
        checkbox,
        hasFocusInput,
        hasFocusLabel
      } = _ref;
      debugLog("useCheckbox");
      const {
        disabled,
        labelPosition,
        checked
      } = checkboxLike;
      const {
        tagInput,
        tagLabel
      } = label;
      const {
        onCheckedChange: onInput
      } = checkbox;

      const onInputEnhanced = e => onInput === null || onInput === void 0 ? void 0 : onInput(enhanceEvent(e, {
        checked: !checked
      }));

      const {
        useCheckboxLikeInputElement,
        useCheckboxLikeLabelElement,
        ...checkboxLikeRest
      } = useCheckboxLike({
        hasFocusInput,
        hasFocusLabel,
        checkboxLike: {
          role: "checkbox",
          checked,
          onCheckedChange: onInputEnhanced,
          disabled,
          labelPosition
        },
        label
      });
      const useCheckboxInputElement = q$1(function useCheckboxInputElement() {
        const tag = tagInput;
        const {
          useCheckboxLikeInputElementProps
        } = useCheckboxLikeInputElement();
        return {
          useCheckboxInputElementProps
        };

        function useCheckboxInputElementProps(_ref2) {
          var _props$checked;

          let { ...p0
          } = _ref2;
          const props = useCheckboxLikeInputElementProps(p0);
          (_props$checked = props.checked) !== null && _props$checked !== void 0 ? _props$checked : props.checked = !!checked;
          if (tag == "input") props.type = "checkbox";
          return props;
        }
      }, [useCheckboxLikeInputElement, checked, labelPosition, disabled, tagInput]);
      const useCheckboxLabelElement = q$1(function useCheckboxLabelElement() {
        const {
          useCheckboxLikeLabelElementProps
        } = useCheckboxLikeLabelElement();

        function useCheckboxLabelElementProps(_ref3) {
          let { ...props
          } = _ref3;
          return useCheckboxLikeLabelElementProps(props);
        }

        return {
          useCheckboxLabelElementProps
        };
      }, [useCheckboxLikeLabelElement, disabled, labelPosition, tagLabel]);
      return {
        useCheckboxInputElement,
        useCheckboxLabelElement,
        ...checkboxLikeRest
      };
    }

    /**
     *
     *
     * @param param0
     * @returns
     */

    function useCheckboxGroup(_ref) {
      let {
        linearNavigation,
        listNavigation,
        managedChildren,
        rovingTabIndex,
        typeaheadNavigation
      } = _ref;
      debugLog("useCheckboxGroup"); //const onUpdateChildren = useStableCallback(onUpdateChildrenUnstable ?? (() => {}));

      const {
        useListNavigationChild,
        useListNavigationProps,
        ...listReturnType
      } = useListNavigation({
        linearNavigation,
        listNavigation,
        managedChildren,
        rovingTabIndex,
        typeaheadNavigation
      });
      const {
        managedChildren: {
          children
        }
      } = listReturnType; //const [uncheckedCount, setUnheckedCount] = useState(0);
      // Keep track of all child IDs, and any time any of them change, 
      // generate a new string with all of them concatenated together
      // (but only once per render);

      const allIds = A(new Set());
      const [ariaControls, setControls] = useState("");
      const [updateIndex, setIdUpdateIndex] = useState(0);
      const [checkedCount, setCheckedCount] = useState(0);
      const checkedIndices = A(new Set()); //const [selfIsChecked, setSelfIsChecked, getSelfIsChecked] = useState<boolean | "mixed">(false);

      const getSelfIsCheckedUnstable = q$1(() => {
        const percentage = checkedCount / (children.getHighestIndex() + 1);
        return percentage <= 0 ? false : percentage >= 1 ? true : "mixed";
      }, [checkedCount]);
      const getSelfIsCheckedStable = useStableCallback(getSelfIsCheckedUnstable);
      const [setParentCheckboxChecked, setSetParentCheckboxChecked] = useState(null);
      s(() => {
        setParentCheckboxChecked === null || setParentCheckboxChecked === void 0 ? void 0 : setParentCheckboxChecked(checkedCount == 0 ? false : checkedCount == children.getHighestIndex() + 1 ? true : "mixed");
      }, [setParentCheckboxChecked, checkedCount]); // If the user has changed the parent checkbox's value, then this ref holds a memory of what values were held before.
      // Otherwise, it's null when the last input was from a child checkbox. 
      //const savedCheckedValues = useRef<Map<number, boolean | "mixed"> | null>(null);

      const useCheckboxGroupParentInput = q$1(_ref2 => {
        let {
          checkbox,
          checkboxLike,
          label,
          hasFocusLabel,
          hasFocusInput
        } = _ref2;
        debugLog("useCheckboxGroupParent");
        const {
          disabled,
          labelPosition,
          ..._void2
        } = checkboxLike;
        const {
          tagInput,
          tagLabel,
          ..._void3
        } = label;
        const [checked, setChecked] = useState(false);
        s(() => {
          setSetParentCheckboxChecked(() => setChecked);
        }, []);
        const {
          useCheckboxInputElement,
          useCheckboxLabelElement
        } = useCheckbox({
          checkboxLike: {
            labelPosition,
            checked,
            disabled
          },
          label: {
            tagInput,
            tagLabel
          },
          checkbox: {
            onCheckedChange: onCheckboxGroupParentInput2
          },
          hasFocusInput,
          hasFocusLabel
        });
        const {
          useCheckboxInputElementProps
        } = useCheckboxInputElement();
        const {
          useCheckboxLabelElementProps
        } = useCheckboxLabelElement();
        return {
          useCheckboxGroupParentInputProps: function useCheckboxGroupParentInputProps(props) {
            const ret = useMergedProps(useMergedProps({}, {
              "aria-controls": ariaControls,
              onInput: tagInput == "input" ? e => e.preventDefault() : undefined
            }), props);
            return useCheckboxInputElementProps(labelPosition == "separate" ? ret : props);
          },
          useCheckboxGroupParentLabelProps: function useCheckboxGroupParentLabelProps(props) {
            const ret = useMergedProps(useMergedProps({}, {
              "aria-controls": ariaControls
            }), props);
            return useCheckboxLabelElementProps(labelPosition == "wrapping" ? ret : props);
          }
        };
      }, [ariaControls]);
      const onCheckboxGroupParentInput2 = q$1(e => {
        e.preventDefault();
        const selfIsChecked = getSelfIsCheckedStable();
        const nextChecked = selfIsChecked === false ? "mixed" : selfIsChecked === "mixed" ? true : false;
        let willChangeAny = false;
        children.forEach(child => willChangeAny || (willChangeAny = child.subInfo.subInfo.subInfo.checked != child.subInfo.subInfo.subInfo.getLastUserChecked()));
        children.forEach(child => {
          var _child$subInfo$subInf, _child$subInfo$subInf2;

          let checked;

          if (nextChecked == "mixed") {
            if (willChangeAny) checked = child.subInfo.subInfo.subInfo.getLastUserChecked();else checked = true;
          } else {
            checked = nextChecked;
          }

          (_child$subInfo$subInf = (_child$subInfo$subInf2 = child.subInfo.subInfo.subInfo).onCheckedChange) === null || _child$subInfo$subInf === void 0 ? void 0 : _child$subInfo$subInf.call(_child$subInfo$subInf2, enhanceEvent(e, {
            checked
          }));
        });
        /*if (selfIsChecked === true || (selfIsChecked === false && savedCheckedValues.current == null)) {
            return onUpdateChildren(enhanceEvent(e, { childrenChecked: false }));
        }
        else if (selfIsChecked === "mixed") {
              savedCheckedValues.current = new Map();
            children.forEach(child => {
                savedCheckedValues.current!.set(child.index, child.getLastUserChecked());
            })
              return onUpdateChildren(enhanceEvent(e, { childrenChecked: true }));
        }
        else {
            return onUpdateChildren(enhanceEvent(e, { childrenChecked: savedCheckedValues.current ?? true }));
        }*/
      }, []);
      const notifyChecked = q$1((index, checked) => {
        if (checked === true) {
          if (!checkedIndices.current.has(index)) {
            setCheckedCount(c => c + 1);
            checkedIndices.current.add(index);
          }
        } else {
          if (checkedIndices.current.has(index)) {
            setCheckedCount(c => c - 1);
            checkedIndices.current.delete(index);
          }
        }
      }, []);
      /*useEffect(() => {
          let percentage = checkedCount / managedChildren.length;
          setSelfIsChecked(percentage <= 0 ? false : percentage >= 1 ? true : "mixed")
      }, [setSelfIsChecked, managedChildren.length, checkedCount]);*/

      /*const useCheckboxGroupParentProps = useCallback((props: h.JSX.HTMLAttributes<InputElement>) => {
          return
      }, [ariaControls]);*/

      s(() => {
        setControls(Array.from(allIds.current).join(" "));
      }, [updateIndex]);
      const useCheckboxGroupChild = q$1(function (_ref3) {
        let {
          asCheckbox,
          asCheckboxGroupChild
        } = _ref3;
        debugLog("useCheckboxGroupChild", asCheckboxGroupChild.managedChild.index, asCheckbox.checkboxLike.checked);
        const {
          checkbox: {
            onCheckedChange
          },
          checkboxLike: {
            checked,
            disabled,
            labelPosition
          },
          label: {
            tagInput,
            tagLabel
          },
          hasFocusInput,
          hasFocusLabel
        } = asCheckbox;
        const {
          managedChild: {
            index
          }
        } = asCheckboxGroupChild; //labelPosition ??= "separate";

        const [getLastUserChecked, setLastUserChecked] = usePassiveState(null, returnFalse$1);
        const {
          useCheckboxInputElement,
          useCheckboxLabelElement,
          ...checkboxReturnType
        } = useCheckbox({
          checkbox: {
            onCheckedChange: useStableCallback(e => {
              setLastUserChecked(e[EventDetail].checked);
              onCheckedChange === null || onCheckedChange === void 0 ? void 0 : onCheckedChange(e);
            })
          },
          checkboxLike: {
            checked,
            labelPosition,
            disabled
          },
          label: {
            tagInput,
            tagLabel
          },
          hasFocusInput,
          hasFocusLabel
        });
        const {
          label: {
            inputId,
            labelId
          }
        } = checkboxReturnType; //const getChecked = useStableGetter(checked);

        const controlsId = labelPosition == "separate" ? inputId : labelId;
        s(() => {
          allIds.current.add(controlsId);
          setIdUpdateIndex(i => ++i);
          return () => {
            allIds.current.delete(controlsId);
            setIdUpdateIndex(i => ++i);
          };
        }, [controlsId]);
        s(() => {
          notifyChecked(index, checked);
        }, [index, checked]);
        const {
          useListNavigationChildProps,
          ...listNavigationReturnType
        } = useListNavigationChild({
          subInfo: {
            getLastUserChecked,
            onCheckedChange,
            checked
          },
          listNavigation: { ...asCheckboxGroupChild.listNavigation
          },
          managedChild: asCheckboxGroupChild.managedChild,
          rovingTabIndex: asCheckboxGroupChild.rovingTabIndex
        });
        return {
          checkboxLike: checkboxReturnType.checkboxLike,
          label: checkboxReturnType.label,
          rovingTabIndex: listNavigationReturnType.rovingTabIndex,
          useCheckboxGroupChildInputProps: props => {
            const {
              useCheckboxInputElementProps
            } = useCheckboxInputElement();
            const ret = useCheckboxInputElementProps(props);
            const ret2 = useListNavigationChildProps(useListNavigationProps(ret));
            return labelPosition == "separate" ? ret2 : ret;
          },
          useCheckboxGroupChildLabelProps: props => {
            const {
              useCheckboxLabelElementProps
            } = useCheckboxLabelElement();
            const ret = useCheckboxLabelElementProps(props);
            const ret2 = useListNavigationChildProps(useListNavigationProps(ret));
            return labelPosition == "wrapping" ? ret2 : ret;
          }
        };
      }, []);
      return {
        useCheckboxGroupChild,
        useCheckboxGroupParentInput,
        linearNavigation: listReturnType.linearNavigation,
        listNavigation: listReturnType.listNavigation,
        managedChildren: listReturnType.managedChildren,
        rovingTabIndex: listReturnType.rovingTabIndex,
        typeaheadNavigation: listReturnType.typeaheadNavigation,
        checkboxGroup: {
          parentIsChecked: getSelfIsCheckedUnstable(),
          parentPercentChecked: checkedCount / (children.getHighestIndex() + 1)
        }
      };
    }

    /**
     * Adds event handlers for a modal-like soft-dismiss interaction.
     *
     * That is, any clicks or taps outside of the given component,
     * or any time the Escape key is pressed within the component,
     * (with various browser oddities regarding clicks on blank or inert areas handled)
     * the component will request to close itself.
     *
     * Of course, if you don't do anything in the `onClose` function,
     * it won't be a soft dismiss anymore.
     *
     * @param param0
     * @returns
     */

    function useSoftDismiss(_ref) {
      let {
        softDismiss: {
          onClose,
          getElements,
          open
        },
        activeElement: {
          onLastActiveElementChange,
          ...activeElement
        }
      } = _ref;
      const stableOnClose = useStableCallback(onClose);
      const stableGetElements = useStableCallback(getElements);
      const getOpen = useStableGetter(open);
      const {
        getDocument
      } = activeElement;
      const onBackdropClick = q$1(function onBackdropClick(e) {
        if (!getOpen()) return;
        const document = getDocument(); // Basically, "was this event fired on the root-most element, or at least an element not contained by the modal?"
        // Either could be how the browser handles these sorts of "interacting with nothing" events.

        if (e.target == (document === null || document === void 0 ? void 0 : document.documentElement)) {
          stableOnClose("backdrop");
        }

        let elements = stableGetElements();

        if (elements && e.target instanceof Element) {
          if (!Array.isArray(elements)) elements = [elements];
          let foundInsideClick = false;

          for (const element of elements) {
            if (element && element.contains(e.target)) {
              foundInsideClick = true;
              break;
            }
          }

          if (!foundInsideClick) {
            onClose("backdrop");
          }
        }
      }, []);
      useActiveElement({ ...activeElement,
        onLastActiveElementChange: q$1((newElement, prev) => {
          onLastActiveElementChange === null || onLastActiveElementChange === void 0 ? void 0 : onLastActiveElementChange(newElement, prev);
          let validFocusableElements = stableGetElements();

          if (validFocusableElements) {
            if (!Array.isArray(validFocusableElements)) validFocusableElements = [validFocusableElements];

            for (const focusable of validFocusableElements) {
              if (focusable !== null && focusable !== void 0 && focusable.contains(newElement)) return;
            }
          }

          onClose("lost-focus");
        }, [])
      });
      const {
        useRefElementProps
      } = useRefElement({
        onElementChange: q$1(e => {
          const document = e === null || e === void 0 ? void 0 : e.ownerDocument;
          const window = document === null || document === void 0 ? void 0 : document.defaultView; // Since everything else is inert, we listen for captured clicks on the window
          // (we don't use onClick since that doesn't fire when clicked on empty/inert areas)
          // Note: We need a *separate* touch event on mobile Safari, because
          // it doesn't let click events bubble or be captured from traditionally non-interactive elements,
          // but touch events work as expected.

          const mouseDown = e => {
            if (getOpen()) onBackdropClick(e);
          };

          const touchStart = e => {
            if (getOpen()) onBackdropClick(e);
          };

          const keyDown = e => {
            if (e.key === "Escape") {
              stableOnClose("escape");
            }
          };

          window === null || window === void 0 ? void 0 : window.addEventListener("mousedown", mouseDown, {
            capture: true
          });
          window === null || window === void 0 ? void 0 : window.addEventListener("touchstart", touchStart, {
            capture: true
          });
          window === null || window === void 0 ? void 0 : window.addEventListener("keydown", keyDown);
          return () => {
            window === null || window === void 0 ? void 0 : window.removeEventListener("mousedown", mouseDown);
            window === null || window === void 0 ? void 0 : window.removeEventListener("touchstart", touchStart);
            window === null || window === void 0 ? void 0 : window.removeEventListener("keydown", keyDown);
          };
        }, [])
      });
      return {
        useSoftDismissProps: q$1(props => useRefElementProps(props), []),
        softDismiss: {
          onBackdropClick
        }
      };
    }
    /**
     * A generic modal hook, used by modal dialogs, but can also
     * be used by anything that's modal with a backdrop.
     * @param param0
     * @returns
     */

    function useModal(_ref2) {
      var _focusSelf;

      let {
        modal: {
          bodyIsOnlySemantic: descriptive,
          focusSelf
        },
        softDismiss: {
          onClose,
          open
        },
        activeElement
      } = _ref2;
      const {
        useRefElementProps: useTitleRefElementProps,
        getElement: getTitleElement
      } = useRefElement({});
      const {
        useRefElementProps: useBodyRefElementProps,
        getElement: getBodyElement
      } = useRefElement({});
      (_focusSelf = focusSelf) !== null && _focusSelf !== void 0 ? _focusSelf : focusSelf = () => {
        if (descriptive) {
          var _getBodyElement;

          (_getBodyElement = getBodyElement()) === null || _getBodyElement === void 0 ? void 0 : _getBodyElement.focus({
            preventScroll: true
          });
        } else {
          const titleElement = getTitleElement();
          if (titleElement) titleElement.focus({
            preventScroll: true
          });
        } //const elementToFocus = getTitleElement() ?? getBodyElement()

      };
      const stableOnClose = useStableCallback(onClose);
      const stableFocusSelf = useStableCallback(focusSelf); //const [modalDescribedByBody, setModalDescribedByBody] = useState(false);

      useHideScroll(open);
      const {
        useRandomIdSourceElement: useModalIdAsSource,
        useRandomIdReferencerElement: useModalIdAsReferencerElement
      } = useRandomId({
        randomId: {
          prefix: "aria-modal-"
        },
        managedChildren: {
          onAfterChildLayoutEffect: null,
          onChildrenMountChange: null
        }
      });
      const {
        useRandomIdSourceElement: useBodyIdAsSource,
        useRandomIdReferencerElement: useBodyIdReferencerElement
      } = useRandomId({
        randomId: {
          prefix: "aria-modal-body-"
        },
        managedChildren: {
          onAfterChildLayoutEffect: null,
          onChildrenMountChange: null
        }
      });
      const {
        useRandomIdSourceElement: useTitleIdAsSource,
        useRandomIdReferencerElement: useTitleIdReferencerElement
      } = useRandomId({
        randomId: {
          prefix: "aria-modal-title-"
        },
        managedChildren: {
          onAfterChildLayoutEffect: null,
          onChildrenMountChange: null
        }
      });
      const {
        useRefElementProps: useModalRefElement,
        getElement: getModalElement
      } = useRefElement({});
      const {
        softDismiss: {
          onBackdropClick
        },
        useSoftDismissProps
      } = useSoftDismiss({
        softDismiss: {
          onClose: stableOnClose,
          getElements: getModalElement,
          open: !!open
        },
        activeElement
      });
      const useModalBackdrop = q$1(function useModalBackdrop() {
        function useModalBackdropProps(props) {
          return useMergedProps({
            onPointerUp: onBackdropClick
          }, props);
        }

        return {
          useModalBackdropProps
        };
      }, []);

      const useModalFocusContainerProps = function (props) {
        const {
          useFocusTrapProps
        } = useFocusTrap({
          trapActive: open
        });
        return useFocusTrapProps(props);
      };

      const useModalProps = function (_ref3) {
        let {
          "aria-modal": ariaModal,
          role,
          ...p0
        } = _ref3;
        const {
          useRandomIdSourceElementProps: useModalIdAsSourceProps
        } = useModalIdAsSource();
        const {
          useRandomIdReferencerElementProps: useTitleIdReferencerElementProps
        } = useTitleIdReferencerElement("aria-labelledby");
        const {
          useRandomIdReferencerElementProps: useBodyIdReferencerElementProps
        } = useBodyIdReferencerElement("aria-describedby");
        console.assert(!ariaModal);
        const {
          useFocusTrapProps
        } = useFocusTrap({
          trapActive: open
        });
        s(() => {
          if (open) stableFocusSelf();
        }, [open]);
        const p1 = useBodyIdReferencerElementProps(p0);
        const p2 = useModalIdAsSourceProps(p1);
        const pFinal = useTitleIdReferencerElementProps(p2);
        return useFocusTrapProps(useSoftDismissProps(useMergedProps(useModalRefElement({
          role: role || "dialog"
        }), descriptive ? pFinal : p2)));
      };

      const useModalTitle = q$1(function useModalTitle() {
        const {
          useRandomIdSourceElementProps: useTitleIdAsSourceProps
        } = useTitleIdAsSource();

        const useModalTitleProps = function (props) {
          var _props$tabIndex;

          (_props$tabIndex = props.tabIndex) !== null && _props$tabIndex !== void 0 ? _props$tabIndex : props.tabIndex = -1;
          return useTitleRefElementProps(useTitleIdAsSourceProps(props));
        };

        return {
          useModalTitleProps
        };
      }, []);
      const useModalBody = q$1(function useModalBody() {
        const {
          useRandomIdSourceElementProps: useBodyIdAsSourceProps
        } = useBodyIdAsSource();
        const {
          useRandomIdReferencerElementProps: useModalIdAsReferencerElementProps
        } = useModalIdAsReferencerElement("data-modal-id");

        const useModalBodyProps = function (props) {
          var _props$tabIndex2;

          (_props$tabIndex2 = props.tabIndex) !== null && _props$tabIndex2 !== void 0 ? _props$tabIndex2 : props.tabIndex = -1;
          return useBodyRefElementProps(useBodyIdAsSourceProps(useModalIdAsReferencerElementProps(props)));
        };

        return {
          useModalBodyProps
        };
      }, []);
      return {
        useModalProps,
        useModalTitle,
        useModalBody,
        useModalBackdrop,
        useModalFocusContainerProps,
        softDismiss: {
          onBackdropClick
        }
      };
    }
    /**
     * Allows for hiding the scroll bar of the root HTML element
     * without shifting the layout of the page more than adding a fow pixels
     * of padding to the root element if necessary.
     * @param hideScroll
     */

    function useHideScroll(hideScroll) {
      const [getScrollbarWidth, setScrollbarWidth] = usePassiveState(null);
      const [getScrollbarHeight, setScrollbarHeight] = usePassiveState(null);
      s(() => {
        if (hideScroll) {
          // When scrolling is resumed, we'll need to restore the original scroll positions
          // so we need to keep this information around
          const originalScrollTop = document.documentElement.scrollTop;
          const originalScrollLeft = document.documentElement.scrollLeft; // Measure the width of the page (minus the scrollbar)

          const widthWithScrollBar = document.documentElement.scrollWidth;
          const heightWithScrollBar = document.documentElement.scrollHeight; // Apply a class that hides the scrollbar.

          document.documentElement.classList.add("document-scroll-hidden"); // In case multiple things are locking scroll, keep track of how many are doing that
          // (just add 1 on enable, subtract 1 on disable)

          document.documentElement.dataset["scrollHiders"] = (+(document.documentElement.dataset["scrollHiders"] || "0") + 1).toString(); // Measure the new width without a scrollbar 
          // so we can take the difference as the scrollbar width.

          const widthWithoutScrollBar = document.documentElement.scrollWidth;
          const heightWithoutScrollBar = document.documentElement.scrollHeight;
          let scrollbarWidth = widthWithoutScrollBar - widthWithScrollBar;
          let scrollbarHeight = heightWithoutScrollBar - heightWithScrollBar; // Failsafe -- if this measuring trick does something unexpected, just ignore it

          if (scrollbarWidth > 80) scrollbarWidth = 0;
          if (scrollbarHeight > 80) scrollbarHeight = 0; // Make our measurements available as CSS properties for general use

          document.documentElement.style.setProperty("--root-scrollbar-width", `${scrollbarWidth}px`);
          document.documentElement.style.setProperty("--root-scrollbar-height", `${scrollbarHeight}px`);
          document.documentElement.style.setProperty("--root-scrollstop-top", `${originalScrollTop}px`);
          document.documentElement.style.setProperty("--root-scrollstop-left", `${originalScrollLeft}px`);
          setScrollbarWidth(scrollbarWidth);
          setScrollbarHeight(scrollbarHeight);
          return () => {
            // Undo all the things we just did
            document.documentElement.dataset["scrollHiders"] = (+(document.documentElement.dataset["scrollHiders"] || "0") - 1).toString();

            if (document.documentElement.dataset["scrollHiders"] == "0") {
              // If we were the last scroll-locking thing to stop, then remove the class that stops scrolling.
              document.documentElement.removeAttribute("data-scroll-hiders");
              document.documentElement.classList.remove("document-scroll-hidden"); // Also, restore the original scroll position
              // We do this by forcing the scroll behavior to not be smooth
              // (it's instant if nothing is set to smooth, https://www.w3.org/TR/cssom-view/#scrolling),
              // scrolling, then restoring the original scroll behavior 
              // (which was probably already auto anyway, but just to be safe)

              const originalScrollBehavior = document.documentElement.style.scrollBehavior;
              document.documentElement.style.scrollBehavior = "auto";
              document.documentElement.scrollTo({
                top: originalScrollTop,
                left: originalScrollLeft,
                behavior: "auto"
              });
              document.documentElement.style.scrollBehavior = originalScrollBehavior;
            }
          };
        }
      }, [hideScroll]);
      return {
        getScrollbarWidth,
        getScrollbarHeight
      };
    }

    function useDialog(_ref) {
      let {
        softDismiss: {
          open
        },
        modal: {
          bodyIsOnlySemantic,
          focusSelf
        },
        dialog: {
          onClose
        },
        activeElement
      } = _ref;
      debugLog("useDialog"); // TODO: Differences between dialog and modal go here, presumably.
      // Non-modal dialogs need to be able to be repositioned, etc.

      const {
        useModalBackdrop,
        useModalBody,
        useModalProps,
        useModalTitle,
        softDismiss: {
          onBackdropClick
        },
        useModalFocusContainerProps
      } = useModal({
        modal: {
          bodyIsOnlySemantic,
          focusSelf
        },
        softDismiss: {
          onClose,
          open
        },
        activeElement
      });
      const useDialogBackdrop = q$1(() => {
        const {
          useModalBackdropProps
        } = useModalBackdrop();
        return {
          useDialogBackdropProps: useModalBackdropProps
        };
      }, [useModalBackdrop]);
      const useDialogBody = q$1(() => {
        const {
          useModalBodyProps
        } = useModalBody();
        return {
          useDialogBodyProps: useModalBodyProps
        };
      }, [useModalBackdrop]);
      const useDialogProps = useModalProps;
      const useDialogTitle = q$1(() => {
        const {
          useModalTitleProps
        } = useModalTitle();
        return {
          useDialogTitleProps: useModalTitleProps
        };
      }, [useModalTitle]);
      return {
        useDialogProps,
        useDialogTitle,
        useDialogBody,
        useDialogBackdrop,
        useDialogFocusContainerProps: useModalFocusContainerProps,
        softDismiss: {
          onBackdropClick
        }
      };
    }

    function useDrawer(_ref) {
      let {
        softDismiss: {
          open,
          onClose
        },
        activeElement,
        modal: {
          bodyIsOnlySemantic,
          focusSelf
        }
      } = _ref;
      debugLog("useDrawer"); // TODO: Drawers are not always modal.

      const {
        useModalBackdrop,
        useModalBody,
        useModalProps,
        useModalTitle,
        useModalFocusContainerProps,
        softDismiss: {
          onBackdropClick
        }
      } = useModal({
        modal: {
          bodyIsOnlySemantic: bodyIsOnlySemantic !== null && bodyIsOnlySemantic !== void 0 ? bodyIsOnlySemantic : false,
          focusSelf
        },
        softDismiss: {
          onClose,
          open
        },
        activeElement
      });
      const useDrawerBackdrop = q$1(() => {
        const {
          useModalBackdropProps
        } = useModalBackdrop();
        return {
          useDrawerBackdropProps: useModalBackdropProps
        };
      }, [useModalBackdrop]);
      const useDrawerBody = q$1(() => {
        const {
          useModalBodyProps
        } = useModalBody();
        return {
          useDrawerBodyProps: useModalBodyProps
        };
      }, [useModalBackdrop]);
      const useDrawerProps = useModalProps;
      const useDrawerTitle = q$1(() => {
        const {
          useModalTitleProps
        } = useModalTitle();
        return {
          useDrawerTitleProps: useModalTitleProps
        };
      }, [useModalTitle]);
      return {
        useDrawerProps,
        useDrawerTitle,
        useDrawerBody,
        useDrawerBackdrop,
        useDrawerFocusContainerProps: useModalFocusContainerProps,
        softDismiss: {
          onBackdropClick
        }
      };
    }

    function useListboxSingle(_ref) {
      let {
        listboxSingle: {
          tagLabel,
          tagList,
          onSelect,
          ..._lbs
        },
        singleSelection: {
          selectedIndex,
          ...ss
        },
        linearNavigation: { ...ln
        },
        listNavigation: { ...ls
        },
        managedChildren: { ...mc
        },
        rovingTabIndex: { ...rti
        },
        typeaheadNavigation: { ...tn
        },
        childrenHaveFocus: { ...chf
        }
      } = _ref;
      debugLog("useListboxSingle", selectedIndex);
      const {
        useLabelInput,
        useLabelLabel,
        ...labelReturnType
      } = useLabel({
        label: {
          prefixLabel: "aria-listbox-label-",
          prefixInput: "aria-listbox-",
          tagInput: tagList,
          tagLabel: tagLabel
        }
      });
      const onSelectedIndexChange = useStableCallback((event, newIndex) => {
        stableOnSelect(enhanceEvent(event, {
          selectedIndex: newIndex
        }));
      });
      const {
        useListNavigationSingleSelectionChild,
        useListNavigationSingleSelectionProps,
        ...listReturnType
      } = useListNavigationSingleSelection({
        childrenHaveFocus: { ...chf
        },
        linearNavigation: { ...ln
        },
        listNavigation: { ...ls
        },
        managedChildren: { ...mc
        },
        rovingTabIndex: { ...rti
        },
        singleSelection: { ...ss,
          onSelectedIndexChange,
          selectedIndex
        },
        typeaheadNavigation: tn
      });
      const {
        useLabelInputProps
      } = useLabelInput();
      const stableOnSelect = useStableCallback(onSelect !== null && onSelect !== void 0 ? onSelect : () => {});
      const useListboxSingleItem = q$1(_ref2 => {
        let {
          listboxSingleItem: {
            disabled
          },
          listNavigation,
          managedChild,
          rovingTabIndex,
          hasFocus
        } = _ref2;
        debugLog("useListboxSingleItem", managedChild.index);
        const {
          rovingTabIndex: rti_ret,
          singleSelection: ss_ret,
          useListNavigationSingleSelectionChildProps
        } = useListNavigationSingleSelectionChild({
          managedChild,
          listNavigation,
          rovingTabIndex,
          hasFocus,
          subInfo: {}
        }); //const index = managedChild.index;

        /*useEffect(() => {
            const element = rti_ret.getElement();
            if (element && rti_ret.tabbable && selectionMode == "focus") {
                stableOnSelect?.({ target: element, currentTarget: element, [EventDetail]: { selectedIndex: index } });
            }
        }, [rti_ret.tabbable, selectionMode, index]);*/

        return {
          useListboxSingleItemProps,
          rovingTabIndex: rti_ret,
          singleSelection: ss_ret
        };

        function useListboxSingleItemProps(props) {
          var _ss_ret$selected;

          props.role = "option"; //props["aria-setsize"] = (children.getHighestIndex() + 1).toString();
          //props["aria-posinset"] = (info.index + 1).toString();

          props["aria-selected"] = ((_ss_ret$selected = ss_ret.selected) !== null && _ss_ret$selected !== void 0 ? _ss_ret$selected : false).toString();
          if (disabled) props["aria-disabled"] = "true";
          return useListNavigationSingleSelectionChildProps(props);
        }
      }, [useListNavigationSingleSelectionChild]);
      const useListboxSingleLabel = q$1(function useListboxSingleLabel() {
        function useListboxSingleLabelProps(props) {
          const {
            useLabelLabelProps
          } = useLabelLabel();
          return useLabelLabelProps(props);
        }

        return {
          useListboxSingleLabelProps
        };
      }, [useLabelLabel]);
      return {
        useListboxSingleItem,
        useListboxSingleProps,
        useListboxSingleLabel,
        ...listReturnType,
        ...labelReturnType
        /*label: labelReturnType.label,
        linearNavigation: listReturnType.linearNavigation,
        listNavigation: listReturnType.listNavigation,
        managedChildren: listReturnType.managedChildren,
        rovingTabIndex: listReturnType.rovingTabIndex,
        typeaheadNavigation: listReturnType.typeaheadNavigation*/

      };

      function useListboxSingleProps(props) {
        props.role = "listbox";
        return useListNavigationSingleSelectionProps(useLabelInputProps(props));
      }
    }
    function useListboxGroup() {
      const {
        useRandomIdReferencerElement,
        useRandomIdSourceElement
      } = useRandomId({
        randomId: {
          prefix: "listbox-multi-group"
        },
        managedChildren: {}
      });
      const {
        useRandomIdSourceElementProps
      } = useRandomIdSourceElement();
      const {
        useRandomIdReferencerElementProps
      } = useRandomIdReferencerElement("aria-labelledby");

      const useListboxGroupHeadingProps = props => {
        return useRandomIdSourceElementProps(props);
      };

      const useListboxGroupContainerProps = _ref3 => {
        let {
          role,
          ...props
        } = _ref3;
        return useRandomIdReferencerElementProps({
          role: warnOnOverwrite("useListboxMultiGroupProps", "role", role, "group"),
          ...props
        });
      };

      return {
        useListboxGroupContainerProps,
        useListboxGroupHeadingProps
      };
    }

    /*export interface UseListboxMultiReturnType<LabelElement extends Element, ListElement extends Element, ListItemElement extends Element> extends Omit<UseListNavigationReturnType<ListElement, ListItemElement, {}, never>, "useListNavigationChild" | "useListNavigationProps"> {
        useListboxMultiItem: UseListboxMultiItem<ListItemElement>;
        useListboxMultiProps: (props: h.JSX.HTMLAttributes<ListElement>) => h.JSX.HTMLAttributes<ListElement>;
        useListboxMultiLabel: () => { useListboxMultiLabelProps: (props: h.JSX.HTMLAttributes<LabelElement>) => h.JSX.HTMLAttributes<LabelElement>; }
    }*/

    function useListboxMulti(_ref) {
      let {
        listboxMulti: {
          tagLabel,
          tagList
        },
        linearNavigation: { ...ln
        },
        listNavigation: { ...ls
        },
        managedChildren: { ...mc
        },
        rovingTabIndex: {
          onTabbableIndexChange,
          ...rti
        },
        typeaheadNavigation: { ...tn
        }
      } = _ref;
      debugLog("useListboxMulti"); //const { useHasFocusProps, getFocusedInner } = useHasFocus<ListElement>({});

      const {
        useLabelInput,
        useLabelLabel
      } = useLabel({
        label: {
          prefixLabel: "aria-listbox-label-",
          prefixInput: "aria-listbox-",
          tagLabel: tagLabel,
          tagInput: tagList
        }
      });
      const listReturnType = useListNavigation({
        linearNavigation: { ...ln
        },
        listNavigation: { ...ls
        },
        managedChildren: { ...mc
        },
        rovingTabIndex: { ...rti,
          onTabbableIndexChange: useStableCallback(i => {
            onTabbableIndexChange === null || onTabbableIndexChange === void 0 ? void 0 : onTabbableIndexChange(i);
            /*if (selectionMode == "focus") {
                const target = (children.getAt(i!)?.subInfo.getElement());
                if (target)
                    onSelect?.({ target, currentTarget: target, [EventDetail]: { selectedIndex: i! } });
            }*/
          })
        },
        typeaheadNavigation: tn
      });
      const {
        useListNavigationChild,
        useListNavigationProps,
        rovingTabIndex: {
          setTabbableIndex
        }
      } = listReturnType;
      const {
        useLabelInputProps
      } = useLabelInput();
      const [getShiftHeld, setShiftHeld] = usePassiveState(null, returnFalse$1);
      const useListboxMultiItem = q$1(_ref2 => {
        let {
          listboxMultiItem: {
            selected,
            disabled,
            onSelectedChange
          },
          managedChild,
          listNavigation: ls,
          rovingTabIndex: rti,
          hasFocus
        } = _ref2;
        debugLog("useListboxMultiItem", managedChild.index, selected);
        const getSelected = useStableGetter(selected);
        const {
          useRefElementProps,
          getElement
        } = useRefElement({});
        const stableOnSelect = useStableCallback(onSelectedChange !== null && onSelectedChange !== void 0 ? onSelectedChange : () => {});
        const {
          useListNavigationChildProps,
          rovingTabIndex: rti2_ret
        } = useListNavigationChild({
          listNavigation: ls,
          managedChild,
          rovingTabIndex: rti,
          subInfo: {
            selected,
            onSelect: stableOnSelect
          }
        });
        _(() => {
          const element = getElement();

          if (element && getShiftHeld()) {
            stableOnSelect === null || stableOnSelect === void 0 ? void 0 : stableOnSelect({
              target: element,
              currentTarget: element,
              [EventDetail]: {
                selected: true
              }
            });
          }
        }, [rti2_ret.tabbable]);
        return {
          useListboxMultiItemProps,
          listboxMultiItem: {
            getSelected,
            tabbable: rti2_ret.tabbable
          },
          rovingTabIndex: rti2_ret
        };

        function useListboxMultiItemProps(props) {
          var _rti2_ret$tabbable;

          const usePressProps = usePress({
            onClickSync: disabled ? null : e => {
              setTabbableIndex(managedChild.index, false);
              stableOnSelect === null || stableOnSelect === void 0 ? void 0 : stableOnSelect({ ...e,
                [EventDetail]: {
                  selected: !getSelected()
                }
              });
              e.preventDefault();
            },
            exclude: {},
            hasFocus
          });
          props.role = "option"; //props["aria-setsize"] = (childCount).toString();
          //props["aria-posinset"] = (info.index + 1).toString();

          props["aria-selected"] = ((_rti2_ret$tabbable = rti2_ret.tabbable) !== null && _rti2_ret$tabbable !== void 0 ? _rti2_ret$tabbable : false).toString();
          if (disabled) props["aria-disabled"] = "true";
          return useRefElementProps(useListNavigationChildProps(usePressProps(props)));
        }
      }, [useListNavigationChild]);
      const useListboxMultiLabel = q$1(function useListboxMultiLabel() {
        function useListboxMultiLabelProps(props) {
          const {
            useLabelLabelProps
          } = useLabelLabel();
          return useLabelLabelProps(props);
        }

        return {
          useListboxMultiLabelProps
        };
      }, [useLabelLabel]);
      return {
        useListboxMultiItem,
        useListboxMultiProps,
        useListboxMultiLabel,
        linearNavigation: listReturnType.linearNavigation,
        listNavigation: listReturnType.listNavigation,
        rovingTabIndex: listReturnType.rovingTabIndex,
        typeaheadNavigation: listReturnType.typeaheadNavigation,
        managedChildren: listReturnType.managedChildren
      };

      function useListboxMultiProps(props) {
        props.role = "listbox";
        props["aria-multiselectable"] = "true";
        return useListNavigationProps(useLabelInputProps(useMergedProps({
          onKeyDown,
          onKeyUp,
          onfocusout: onFocusOut
        }, props)));
      }

      function onKeyDown(e) {
        if (e.key == "Shift") setShiftHeld(true);
      }

      function onKeyUp(e) {
        if (e.key == "Shift") setShiftHeld(false);
      }

      function onFocusOut(_) {
        setShiftHeld(false);
      }
    }

    //export type UseMenuChildParameters<I extends UseMenuChildInfo> = I;

    /**
     * A menu is a popup control that contains a list of menu items, and that's it.
     * It has very well-defined logic for managing those items as the menu's state changes.
     *
     * A MenuBase is just the "popup" part without the "list of menu items" part. It can
     * (really, must) have interactive controls, but these controls are allowed to be more
     * free-form. This means that, like a dialog, you must tell this hook
     * where within the popup to send focus when opened (for a menu it's just the first
     * menu item, but with custom content you'll need to provide this).
     *
     */

    function useMenuSurface(_ref) {
      var _intersectionObserver;

      let {
        softDismiss,
        menuSurface: {
          sendFocusToMenu,
          role
        },
        activeElement
      } = _ref;
      debugLog("useMenuSurface"); //const sendFocusWithinMenu = useStableCallback(sendFocusToMenu);
      //const [focusTrapActive, setFocusTrapActive] = useState<null | boolean>(null);

      const {
        open,
        onClose: userOnClose
      } = softDismiss;
      const onClose = useStableCallback(reason => {
        if (reason != "lost-focus") {
          const opener = getOpenerElement();
          if (opener && "focus" in opener) opener.focus({
            preventScroll: true
          });
        }

        return userOnClose(reason);
      });
      useEnsureStability("useMenuSurface", onClose, role, sendFocusToMenu);
      const getIsOpen = useStableGetter(open);
      const intersectionObserver = A(null);
      const [getSurfaceFullyVisible, setSurfaceFullyVisible] = usePassiveState(null, returnFalse$1);
      (_intersectionObserver = intersectionObserver.current) !== null && _intersectionObserver !== void 0 ? _intersectionObserver : intersectionObserver.current = new IntersectionObserver((entries, _observer) => {
        for (const entry of entries) {
          setSurfaceFullyVisible(entry.intersectionRatio >= 1);
        }
      }, {
        root: null,
        threshold: [0, 1]
      });
      const [, setOpenerElement, getOpenerElement] = useState(null); //const { useHasFocusProps: useMenuBaseHasFocusProps, ...surfaceHasFocus } = useHasFocus<MenuSurfaceElement>({ ...hasFocusSurface });
      //const { useHasFocusProps: useButtonHasFocusProps, ...buttonHasFocus } = useHasFocus<MenuButtonElement>({ ...hasFocusButton });
      //const { getLastFocusedInner: getMenuBaseLastFocusedInner } = surfaceHasFocus;

      const {
        useRandomIdSourceElement,
        useRandomIdReferencerElement
      } = useRandomId({
        randomId: {
          prefix: "aria-menu-"
        },
        managedChildren: {}
      });
      const {
        useRandomIdSourceElementProps
      } = useRandomIdSourceElement();
      const {
        useRandomIdReferencerElementProps
      } = useRandomIdReferencerElement("aria-controls");
      const {
        getElement: getButtonElement,
        useRefElementProps: useButtonRefElementProps
      } = useRefElement({
        onElementChange: setOpenerElement
      });
      const {
        getElement: getMenuElement,
        useRefElementProps: useMenuBaseRefElementProps
      } = useRefElement({});
      const {
        useSoftDismissProps,
        ...softDismissReturn
      } = useSoftDismiss({
        softDismiss: { ...softDismiss,
          getElements: () => [getButtonElement(), getMenuElement()]
        },
        activeElement
      });

      const useMenuSurfaceProps = props => {
        function onKeyDown(e) {
          const open = getIsOpen();

          if (e.key == "Escape" && open) {
            onClose("escape");
            e.stopPropagation();
            e.stopImmediatePropagation();
            e.preventDefault();
          }
        }

        return useSoftDismissProps(useMenuBaseRefElementProps(useMergedProps({
          onKeyDown
        }, props)));
      };

      const useMenuSurfaceButtonProps = props => {
        props["aria-expanded"] = warnOnOverwrite("useMenuSurfaceButtonProps", "aria-expanded", open, open.toString());
        props["aria-haspopup"] = warnOnOverwrite("useMenuSurfaceButtonProps", "aria-haspopup", role, role);
        return useButtonRefElementProps(useRandomIdReferencerElementProps(props));
      };

      s(() => {
        if (open === true) {
          sendFocusToMenu === null || sendFocusToMenu === void 0 ? void 0 : sendFocusToMenu();
          setTimeout(() => {
            if (!getSurfaceFullyVisible()) {
              var _getMenuElement;

              (_getMenuElement = getMenuElement()) === null || _getMenuElement === void 0 ? void 0 : _getMenuElement.scrollIntoView();
            }
          });
        }
      }, [open]);

      function useMenuSurfaceChildProps(props) {
        props.role = role;
        return useRandomIdSourceElementProps(props);
      }

      return {
        useMenuSurfaceChildProps,
        useMenuSurfaceSentinel: q$1(() => {
          debugLog("useMenuSurfaceSentinel");
          const {
            useSentinelProps: useMenuSentinelProps,
            ...rest
          } = useFocusSentinel({
            focusSentinel: {
              open: open === true,
              onClose: () => onClose("escape"),
              sendFocusToMenu
            }
          });
          return {
            useMenuSentinelProps,
            ...rest
          };
        }, [open, onClose]),
        useMenuSurfaceProps,
        useMenuSurfaceButtonProps,
        menuSurface: {
          /*getActiveElement: buttonHasFocus.getActiveElement,
          getLastActiveElement: buttonHasFocus.getLastActiveElement,
          getButtonElement: buttonHasFocus.getElement,
          getButtonFocused: buttonHasFocus.getFocused,
          getButtonFocusedInner: buttonHasFocus.getFocusedInner,
          getButtonLastFocused: buttonHasFocus.getLastFocused,
          getButtonLastFocusedInner: buttonHasFocus.getLastFocusedInner,
          getSurfaceElement: surfaceHasFocus.getElement,
          getSurfaceFocused: surfaceHasFocus.getFocused,
          getSurfaceFocusedInner: surfaceHasFocus.getFocusedInner,
          getSurfaceLastFocused: surfaceHasFocus.getLastFocused,
          getSurfaceLastFocusedInner: surfaceHasFocus.getLastFocusedInner,
          getWindowFocused: buttonHasFocus.getWindowFocused,*/
        },
        ...softDismissReturn //getMenuBaseLastFocusedInner,
        //getMenuBaseButtonLastFocusedInner,
        //open,
        //onOpen,
        //onClose

      };
    } // A focus sentinal is a hidden but focusable element that comes at the start or end 
    // of the out-of-place-focusable component that, when activated or focused over, closes the component
    // (if focused within 100ms of the open prop changing, instead of
    // closing, focusing the sentinel immediately asks it to focus itself).
    // This exists for things like menus which can have focus but also need a way to return
    // to whatever out-of-place parent they came from when naturally tabbed out of (as opposed
    // to dialogs which loop back around when tabbed out of). While mouse users can click out of a menu
    // and keyboard users can escape to close a menu, screen readers and other input methods 
    // that don't use those two would become stuck.

    function useFocusSentinel(_ref2) {
      let {
        focusSentinel: {
          open,
          onClose,
          sendFocusToMenu
        }
      } = _ref2;
      debugLog("useFocusSentinel");
      const getSendFocusWithinMenu = useStableGetter(sendFocusToMenu);
      const stableOnClose = useStableCallback(onClose);
      const [firstSentinelIsActive, setFirstSentinelIsActive] = useState(false);
      useTimeout({
        callback: () => {
          setFirstSentinelIsActive(open);
        },
        timeout: 100,
        triggerIndex: `${open}-${firstSentinelIsActive}`
      });
      const onFocus = firstSentinelIsActive ? () => stableOnClose() : () => {
        var _getSendFocusWithinMe;

        return (_getSendFocusWithinMe = getSendFocusWithinMenu()) === null || _getSendFocusWithinMe === void 0 ? void 0 : _getSendFocusWithinMe();
      };

      const onClick = () => stableOnClose();

      return {
        useSentinelProps: function (_ref3) {
          let {
            tabIndex,
            ...p
          } = _ref3;
          return useMergedProps({
            onFocus,
            onClick,
            tabIndex: warnOnOverwrite("useFocusSentinel", "tabIndex", tabIndex, 0)
          }, p);
        }
      };
    }
    function useMenu(_ref4) {
      let {
        menuButtonHasFocus,
        linearNavigation,
        listNavigation,
        managedChildren,
        menuSurface,
        rovingTabIndex,
        softDismiss,
        typeaheadNavigation,
        menu,
        activeElement
      } = _ref4;
      debugLog("useMenu");
      const {
        onOpen
      } = menu;
      const {
        open,
        onClose
      } = softDismiss;
      const {
        useListNavigationChild,
        useListNavigationProps,
        ...useListNavReturn
      } = useListNavigation({
        linearNavigation,
        listNavigation,
        managedChildren,
        rovingTabIndex,
        typeaheadNavigation
      });
      const {
        managedChildren: {
          children
        }
      } = useListNavReturn;
      const {
        /*useMenuSentinel,
        useMenuBaseButtonProps,
        useMenuBaseProps,
        open,
        onOpen,
        onClose: _onClose,*/
        useMenuSurfaceButtonProps,
        useMenuSurfaceProps,
        useMenuSurfaceSentinel,
        useMenuSurfaceChildProps,
        ...menuRest
      } = useMenuSurface({
        menuSurface: { ...menuSurface,
          role: "menu",
          sendFocusToMenu: q$1(() => {
            var _children$getAt;

            return (_children$getAt = children.getAt(0)) === null || _children$getAt === void 0 ? void 0 : _children$getAt.subInfo.focusSelf();
          }, [])
        },
        softDismiss,
        //hasFocusButton,
        //hasFocusSurface,
        activeElement //sendFocusWithinMenu: focusMenu ?? (() => { })

      });

      const useMenuButtonProps = p => {
        const usePressProps = usePress({
          onClickSync: () => {
            if (open) onClose === null || onClose === void 0 ? void 0 : onClose("escape");else onOpen === null || onOpen === void 0 ? void 0 : onOpen();
          },
          exclude: {},
          hasFocus: menuButtonHasFocus
        });
        const props = useMenuSurfaceButtonProps(p);
        return usePressProps(props);
      };

      const useMenuItem = q$1(_ref5 => {
        let {
          listNavigation,
          managedChild,
          rovingTabIndex
        } = _ref5;
        debugLog("useMenuItem", managedChild.index);
        const {
          useListNavigationChildProps,
          ...listNavRet
        } = useListNavigationChild({
          listNavigation,
          managedChild,
          rovingTabIndex,
          subInfo: {}
        });

        function useMenuItemProps(_ref6) {
          let { ...props
          } = _ref6;
          props.role = "menuitem";
          return useMergedProps({}, useListNavigationChildProps(props));
        }

        return {
          useMenuItemProps,
          ...listNavRet
        };
      }, []);

      function useMenuProps(props) {
        return useListNavigationProps(useMenuSurfaceChildProps(props));
      }

      return {
        useMenuProps,
        useMenuSurfaceProps,
        useMenuButtonProps,
        useMenuItem,
        useMenuSentinel: useMenuSurfaceSentinel,
        //useMenuSubmenuItem,
        ...useListNavReturn,
        ...menuRest
        /*focusMenu,
          currentTypeahead,
        invalidTypeahead,
          managedChildren,*/

      };
    }

    /*
    export function useTabs<TabListElement extends Element, TabElement extends Element, PanelElement extends Element, LabelElement extends Element>({ tabPanels: { managedChildren: { onChildrenMountChange: ocmc, ...tabPanelsManagedChildren } } }: UseTabsParameters): UseTabsReturnTypeWithHooks<TabListElement, TabElement, PanelElement, LabelElement> {
        const {
            useListNavigationSingleSelectionChild,
            useListNavigationSingleSelectionProps
        } = useListNavigationSingleSelection<TabListElement, TabElement, TabInfo, never>({
            childrenHaveFocus: {},
            linearNavigation: {},
            listNavigation: {},
            managedChildren: {},
            rovingTabIndex: {},
            singleSelection: {},
            typeaheadNavigation: {}
         });

        const useTab = useCallback(() => {}, []);
        const useTabPanel = useCallback(() => {});
        function useTabListProps(props: h.JSX.HTMLAttributes<TabListElement>) { return useListNavigationSingleSelectionProps(props); }
        function useTabLabelProps() {}

        return {

        }
        
    }*/

    function useTabs(_ref) {
      let {
        tabPanels: {
          managedChildren: {
            onChildrenMountChange: ocmc,
            ...tabPanelsManagedChildren
          }
        }
      } = _ref;
      debugLog("useTabs");
      const baseId = generateRandomId("aria-tabs-"); //const getTabListId = useCallback(() => { return baseId + "-tab-list"; }, []);

      const getTabId = q$1(index => {
        return baseId + "-tab-" + index;
      }, []);
      const getPanelId = q$1(index => {
        return baseId + "-panel-" + index;
      }, []); // Used for the panels, not the tabs in the tablist.
      // Those are in useTabList itself.

      const {
        useManagedChild,
        ...managedChildrenRet
      } = useManagedChildren({
        managedChildren: { ...tabPanelsManagedChildren,
          onChildrenMountChange: useStableCallback((m, u) => {
            ocmc === null || ocmc === void 0 ? void 0 : ocmc(m, u);
            reevaluateClosestFit();
          })
        }
      });
      const {
        changeIndex: changeVisiblePanel,
        getCurrentIndex: getVisibleIndex,
        reevaluateClosestFit
      } = useChildrenFlag({
        children: managedChildrenRet.managedChildren.children,
        closestFit: false,
        initialIndex: null,
        key: "visible"
      }); //const { useRandomIdReferencerElement, useRandomIdSourceElement } = useRandomId({ randomId: { prefix: "aria-tabs-" }, managedChildren: { onAfterChildLayoutEffect: null, onChildrenMountChange: null } });

      const {
        useLabelInput,
        useLabelLabel
      } = useLabel({
        label: {
          prefixInput: "",
          prefixLabel: "",
          tagInput: "div",
          tagLabel: "div"
        }
      });
      const useTabListLabel = q$1(() => {
        const {
          useLabelLabelProps
        } = useLabelLabel();

        function useTabListLabelProps(props) {
          return useLabelLabelProps(props);
        }

        return {
          useTabListLabelProps
        };
      }, [useLabelLabel]);
      const useTabList = q$1(_ref2 => {
        let {
          childrenHaveFocus,
          tabs: {
            onSelectedIndexChange
          },
          linearNavigation,
          listNavigation,
          managedChildren: tabListManagedChildren,
          rovingTabIndex,
          singleSelection,
          typeaheadNavigation
        } = _ref2;
        debugLog("useTabList");
        const stableOnSelectedIndexChange = useStableCallback(onSelectedIndexChange);
        const {
          useListNavigationSingleSelectionChild,
          useListNavigationSingleSelectionProps,
          ...listNavRet1
        } = useListNavigationSingleSelection({
          linearNavigation,
          listNavigation,
          managedChildren: tabListManagedChildren,
          rovingTabIndex,
          singleSelection: { ...singleSelection,
            onSelectedIndexChange: q$1((event, index) => {
              onSelectedIndexChange === null || onSelectedIndexChange === void 0 ? void 0 : onSelectedIndexChange(enhanceEvent(event, {
                selectedIndex: index
              }));
            }, [])
          },
          typeaheadNavigation,
          childrenHaveFocus
        });
        s(() => {
          changeVisiblePanel(singleSelection.selectedIndex);
        }, [singleSelection.selectedIndex]);
        const {
          useLabelInputProps
        } = useLabelInput();
        const useTab = q$1(_ref3 => {
          let {
            listNavigation,
            managedChild,
            rovingTabIndex,
            hasFocus
          } = _ref3;
          debugLog("useTab", managedChild.index);
          const {
            useListNavigationSingleSelectionChildProps,
            ...listNavRet2
          } = useListNavigationSingleSelectionChild({
            listNavigation,
            managedChild,
            rovingTabIndex,
            subInfo: {},
            hasFocus
          });
          const {
            singleSelection: {
              selected
            },
            rovingTabIndex: {
              tabbable
            }
          } = listNavRet2;

          const useTabProps = _ref4 => {
            let {
              role,
              "aria-controls": ariaControls,
              "aria-selected": ariaSelected,
              ...props
            } = _ref4;
            const panelId = getPanelId(managedChild.index);
            const tabId = getTabId(managedChild.index);
            const usePressProps = usePress({
              onClickSync: e => {
                stableOnSelectedIndexChange(enhanceEvent(e, {
                  selectedIndex: managedChild.index
                }));
              },
              exclude: {},
              hasFocus
            });
            return useListNavigationSingleSelectionChildProps(useMergedProps({
              role: warnOnOverwrite("useTab", "role", role, "tab"),
              "aria-controls": warnOnOverwrite("useTab", "ariaControls", ariaControls, panelId),
              "aria-selected": warnOnOverwrite("useTab", "ariaSelected", ariaSelected, selected ? "true" : undefined),
              "data-tabbable": tabbable.toString(),
              id: tabId
            }, usePressProps(props)));
          };

          return {
            useTabProps,
            ...listNavRet2
          };
        }, [useLabelInput, useListNavigationSingleSelectionChild]);

        const useTabListProps = _ref5 => {
          let {
            role,
            "aria-orientation": ariaOrientation,
            ...props
          } = _ref5;
          return useListNavigationSingleSelectionProps(useLabelInputProps(useMergedProps({
            role: warnOnOverwrite("useTabList", "role", role, "tablist"),
            "aria-orientation": ariaOrientation !== null && ariaOrientation !== void 0 ? ariaOrientation : "horizontal"
          }, props)));
        };

        return {
          tabList: listNavRet1,
          useTabListProps,
          useTab
        };
      }, [useLabelInput]);
      const useTabPanel = q$1(_ref6 => {
        let {
          managedChild: {
            flags,
            ...managedChild
          }
        } = _ref6;
        debugLog("useTabPanel", managedChild.index); //const [correspondingTabId, setCorrespondingTabId] = useState<string | null>(null);

        const [isVisible, setIsVisible, getIsVisible] = useState(getVisibleIndex() == managedChild.index);
        const visibleRef = A({
          get: getIsVisible,
          set: setIsVisible,
          isValid: returnTrue
        });
        useManagedChild({
          managedChild: { ...managedChild,
            flags: {
              visible: visibleRef.current,
              ...flags
            },
            subInfo: {}
          }
        });
        const panelId = getPanelId(managedChild.index);
        const tabId = getTabId(managedChild.index);

        const useTabPanelProps = _ref7 => {
          let {
            role,
            "aria-labelledby": ariaLabelledBy,
            id,
            ...props
          } = _ref7;
          return useMergedProps({
            role: warnOnOverwrite("useTabPanelProps", "role", role, "tabpanel"),
            "aria-labelledby": warnOnOverwrite("useTabPanelProps", "aria-labelledby", ariaLabelledBy, tabId),
            id: warnOnOverwrite("useTabPanelProps", "id", id, panelId)
          }, props);
        };

        return {
          useTabPanelProps,
          tabPanel: {
            visible: isVisible,
            getVisible: getIsVisible
          }
        };
      }, []);
      return {
        useTabListLabel,
        useTabList,
        useTabPanel,
        tabPanels: managedChildrenRet
      };
    }

    function returnFalse() {
      return false;
    }

    function useTooltip(_ref) {
      var _mouseoverDelay, _mouseoutDelay, _focusDelay;

      let {
        mouseoverDelay,
        mouseoutDelay,
        focusDelay
      } = _ref;
      debugLog("useTooltip");
      (_mouseoverDelay = mouseoverDelay) !== null && _mouseoverDelay !== void 0 ? _mouseoverDelay : mouseoverDelay = 400;
      (_mouseoutDelay = mouseoutDelay) !== null && _mouseoutDelay !== void 0 ? _mouseoutDelay : mouseoutDelay = 40;
      (_focusDelay = focusDelay) !== null && _focusDelay !== void 0 ? _focusDelay : focusDelay = 1; // The escape key should close tooltips, but do nothing else.
      // (i.e. closing a tooltip in a dialog MUST NOT close the dialog too)
      // TODO: Tooltips are, effectively, always the topmost component,
      // so we can just have them listen to and swallow all "Escape"
      // key presses before anyone else. For a more general popup,
      // or a tooltip in a tooltip (!!) a different solution would be needed.

      useGlobalHandler(document, "keydown", e => {
        if (getOpen() && e.key === "Escape" && !e.defaultPrevented) {
          e.preventDefault();
          e.stopImmediatePropagation();
          setOpen(false);
          setTriggerHoverDelayCorrected(false);
          setTooltipHoverDelayCorrected(false);
          setTriggerFocusedDelayCorrected(false);
          setTooltipFocusedDelayCorrected(false);
        }
      }, {
        capture: true
      });
      const [open, setOpen, getOpen] = useState(false);
      const {
        useRandomIdSourceElement,
        //: useTooltipIdProps, 
        useRandomIdReferencerElement //: useTooltipIdReferencingProps 

      } = useRandomId({
        randomId: {
          prefix: "aria-tooltip-"
        },
        managedChildren: {
          onAfterChildLayoutEffect: null,
          onChildrenMountChange: null
        }
      });
      const [, setTriggerFocused] = usePassiveState(useStableCallback(focused => {
        const delay = focused ? focusDelay : 1;

        if (delay != null && isFinite(delay)) {
          const handle = setTimeout(() => setTriggerFocusedDelayCorrected(focused), focused ? focusDelay : 1);
          return () => clearTimeout(handle);
        }
      }), returnFalse);
      const [, setTooltipFocused] = usePassiveState(useStableCallback(focused => {
        const delay = focused ? focusDelay : 1;

        if (delay != null && isFinite(delay)) {
          const handle = setTimeout(() => setTooltipFocusedDelayCorrected(focused), delay);
          return () => clearTimeout(handle);
        }
      }), returnFalse);
      const [, setTriggerHover] = usePassiveState(useStableCallback(hovering => {
        const delay = hovering ? mouseoverDelay : mouseoutDelay;

        if (delay != null && isFinite(delay)) {
          const handle = setTimeout(() => setTriggerHoverDelayCorrected(hovering), delay);
          return () => clearTimeout(handle);
        }
      }), returnFalse);
      const [, setTooltipHover] = usePassiveState(useStableCallback(hovering => {
        const delay = hovering ? mouseoverDelay : mouseoutDelay;

        if (delay != null && isFinite(delay)) {
          const handle = setTimeout(() => setTooltipHoverDelayCorrected(hovering), delay);
          return () => clearTimeout(handle);
        }
      }), returnFalse);
      const [triggerFocusedDelayCorrected, setTriggerFocusedDelayCorrected] = useState(false);
      const [triggerHoverDelayCorrected, setTriggerHoverDelayCorrected] = useState(false);
      const [tooltipFocusedDelayCorrected, setTooltipFocusedDelayCorrected] = useState(false);
      const [tooltipHoverDelayCorrected, setTooltipHoverDelayCorrected] = useState(false);
      s(() => {
        setOpen(triggerFocusedDelayCorrected || triggerHoverDelayCorrected || tooltipFocusedDelayCorrected || tooltipHoverDelayCorrected);
      }, [triggerFocusedDelayCorrected || triggerHoverDelayCorrected || tooltipFocusedDelayCorrected || tooltipHoverDelayCorrected]);
      const useTooltipTrigger = q$1(function useTooltipTrigger(_ref2) {
        let {
          hasFocus: {
            onFocusedInnerChanged,
            ...hasFocus
          }
        } = _ref2;
        debugLog("useTooltipTrigger");
        useGlobalHandler(document, "pointermove", e => {
          var _getElement;

          const target = e.target;
          setTriggerHover(target == getElement() || !!((_getElement = getElement()) !== null && _getElement !== void 0 && _getElement.contains(target)));
        }, {
          capture: true
        });

        function onTouchEnd(e) {
          e.target.focus();
        }

        const {
          useHasFocusProps,
          getElement
        } = useHasFocus({ ...hasFocus,
          onFocusedInnerChanged: useStableCallback((focused, prev) => {
            onFocusedInnerChanged === null || onFocusedInnerChanged === void 0 ? void 0 : onFocusedInnerChanged(focused, prev);
            setTriggerFocused(focused);
          })
        });

        function useTooltipTriggerProps(_ref3) {
          var _props$tabIndex;

          let { ...props
          } = _ref3;
          const {
            useRandomIdReferencerElementProps
          } = useRandomIdReferencerElement("aria-describedby"); // Note: Though it's important to make sure that focusing activates a tooltip,
          // it's perfectly reasonable that a child element will be the one that's focused,
          // not this one, so we don't set tabIndex=0

          (_props$tabIndex = props.tabIndex) !== null && _props$tabIndex !== void 0 ? _props$tabIndex : props.tabIndex = -1;
          return useRandomIdReferencerElementProps(useHasFocusProps(useMergedProps({
            onTouchEnd
          }, props)));
        }

        return {
          useTooltipTriggerProps
        };
      }, []);
      const useTooltipPopup = q$1(function useTooltip(_ref4) {
        let {
          hasFocus: {
            onFocusedInnerChanged,
            ...hasFocus
          }
        } = _ref4;
        debugLog("useTooltipTooltip");
        const {
          useRandomIdSourceElementProps
        } = useRandomIdSourceElement();
        const {
          useHasFocusProps,
          getElement
        } = useHasFocus({
          onFocusedInnerChanged: useStableCallback((focused, prev) => {
            onFocusedInnerChanged === null || onFocusedInnerChanged === void 0 ? void 0 : onFocusedInnerChanged(focused, prev);
            setTooltipFocused(focused);
          }),
          ...hasFocus
        });
        useGlobalHandler(document, "pointermove", e => {
          var _getElement2;

          const target = e.target;
          setTooltipHover(target == getElement() || !!((_getElement2 = getElement()) !== null && _getElement2 !== void 0 && _getElement2.contains(target)));
        }, {
          capture: true
        });

        function useTooltipPopupProps(_ref5) {
          let { ...props
          } = _ref5;
          return useRandomIdSourceElementProps(useHasFocusProps(useMergedProps({}, props)));
        }

        return {
          useTooltipPopupProps
        };
      }, []);
      return {
        useTooltipPopup,
        useTooltipTrigger,
        isOpen: open,
        getIsOpen: getOpen
      };
    }

    function useRadioGroup(_ref) {
      let {
        linearNavigation,
        listNavigation,
        managedChildren,
        radioGroup: {
          name,
          onSelectedValueChange,
          selectedValue,
          tagGroup,
          tagGroupLabel
        },
        rovingTabIndex,
        typeaheadNavigation,
        childrenHaveFocus,
        singleSelection: {
          selectionMode
        }
      } = _ref;
      debugLog("useRadioGroup", selectedValue);
      const {
        getElement: _getRadioGroupParentElement,
        useRefElementProps
      } = useRefElement({}); //const getSelectedIndex = useCallback((selectedValue: V) => { return byName.current.get(selectedValue) ?? 0 }, [])

      const [selectedIndex, setSelectedIndex] = useState(0);
      const byName = A(new Map()); //const stableOnInput = useStableCallback(onSelectedValueChange);
      //const [anyRadiosFocused, setAnyRadiosFocused, getAnyRadiosFocused] = useState(false);

      const {
        useLabelInput: useGroupLabelInput,
        useLabelLabel: useGroupLabelLabel
      } = useLabel({
        label: {
          prefixLabel: "aria-radio-group-label-",
          tagInput: tagGroup,
          tagLabel: tagGroupLabel,
          prefixInput: "aria-radio-group-"
        }
      });
      const {
        useLabelInputProps: useGroupLabelInputProps
      } = useGroupLabelInput();
      const {
        useLabelLabelProps: useGroupLabelLabelProps
      } = useGroupLabelLabel();
      const onSelectedIndexChange = useStableCallback((e, newIndex) => {
        var _listNavRet$managedCh;

        onSelectedValueChange(enhanceEvent(e, {
          selectedValue: (_listNavRet$managedCh = listNavRet.managedChildren.children.getAt(newIndex)) === null || _listNavRet$managedCh === void 0 ? void 0 : _listNavRet$managedCh.subInfo.subInfo.subInfo.getValue()
        }));
      });
      const {
        useListNavigationSingleSelectionChild,
        useListNavigationSingleSelectionProps,
        ...listNavRet
      } = useListNavigationSingleSelection({
        linearNavigation,
        listNavigation,
        managedChildren,
        rovingTabIndex,
        singleSelection: {
          selectedIndex,
          onSelectedIndexChange,
          selectionMode
        },
        typeaheadNavigation,
        childrenHaveFocus
      }); // Track whether the currently focused element is a child of the radio group parent element.
      // When it's not, we reset the tabbable index back to the currently selected element.
      //const { useActiveElementProps } = useActiveElement<G>({ onActiveElementChange: useCallback((activeElement: Node | null) => setAnyRadiosFocused(!!(getRadioGroupParentElement()?.contains(activeElement))), []) });

      /*useEffect(() => {
          if (!anyRadiosFocused)
              navigateToIndex(selectedIndex ?? 0);
      }, [anyRadiosFocused, selectedIndex, navigateToIndex]);*/

      const useRadioGroupProps = q$1(_ref2 => {
        let { ...props
        } = _ref2;
        props.role = "radiogroup";
        return useGroupLabelInputProps(useListNavigationSingleSelectionProps(useRefElementProps(props)));
      }, [useRefElementProps]);
      const useRadioGroupLabelProps = q$1(props => {
        return useGroupLabelLabelProps(props);
      }, [useGroupLabelLabelProps]); //const correctedIndex = (selectedIndex == null || selectedIndex < 0 || selectedIndex >= managedChildren.length) ? null : selectedIndex;

      /*const { onChildrenMountChange } = useChildrenFlag({
          initialIndex: 0,
          children,
          key: "selected"
          //setChildFlag: (i, checked) => managedChildren[i]?.setChecked(checked),
          //getChildFlag: ((i) => managedChildren[i]?.getChecked() ?? false)
      });*/

      s(() => {
        if (selectedValue == null) {
          setSelectedIndex(null);
        } else {
          const selectedIndex = byName.current.get(selectedValue);
          setSelectedIndex(selectedIndex !== null && selectedIndex !== void 0 ? selectedIndex : null);
        }
      }, [byName, selectedValue]);
      const useRadio = q$1(function useRadio(_ref3) {
        let {
          listNavigation,
          managedChild,
          rovingTabIndex,
          hasFocusInput,
          hasFocusLabel,
          radio: {
            disabled,
            labelPosition,
            tagInput,
            tagLabel,
            value
          }
        } = _ref3;
        const index = managedChild.index;
        debugLog("useRadio", index); //const [checked, setChecked, getChecked] = useState<boolean | null>(null);

        const onInput = useStableCallback(e => {
          e.preventDefault();
          onSelectedIndexChange(e, index);
        });
        const getValue = useStableGetter(value);
        const {
          useListNavigationSingleSelectionChildProps,
          ...listNavRet
        } = useListNavigationSingleSelectionChild({
          listNavigation,
          rovingTabIndex,
          managedChild,
          hasFocus: hasFocusInput,
          subInfo: {
            getValue
          }
        });
        const {
          singleSelection: {
            selected: checked
          }
        } = listNavRet;
        const {
          useCheckboxLikeInputElement,
          useCheckboxLikeLabelElement
        } = useCheckboxLike({
          checkboxLike: {
            checked: checked !== null && checked !== void 0 ? checked : false,
            labelPosition,
            disabled,
            onCheckedChange: onInput,
            role: "radio"
          },
          label: {
            tagInput: tagInput,
            tagLabel: tagLabel
          },
          hasFocusInput,
          hasFocusLabel
        });
        _(() => {
          byName.current.set(value, index);
          return () => {
            byName.current.delete(value);
          };
        }, [byName, value, index]);

        const useRadioInput = () => {
          const tag = tagInput;

          const useRadioInputProps = props => {
            if (tag == "input") {
              props.name = name;
              props.checked = checked !== null && checked !== void 0 ? checked : false;
              props.type = "radio";
            } else {
              props["aria-checked"] = (checked !== null && checked !== void 0 ? checked : false).toString();
            }

            const propsIfInputHandlesFocus = useListNavigationSingleSelectionChildProps(props);
            const {
              useCheckboxLikeInputElementProps
            } = useCheckboxLikeInputElement();
            return useMergedProps(useCheckboxLikeInputElementProps({}), labelPosition == "separate" ? propsIfInputHandlesFocus : props);
          };

          return {
            useRadioInputProps
          };
        };

        const useRadioLabel = q$1(() => {
          //const tag = tagLabel;
          const useRadioLabelProps = props => {
            const {
              useCheckboxLikeLabelElementProps
            } = useCheckboxLikeLabelElement();
            const propsIfLabelHandlesFocus = useListNavigationSingleSelectionChildProps(props);
            return useCheckboxLikeLabelElementProps(useMergedProps({}, labelPosition == "wrapping" ? propsIfLabelHandlesFocus : props));
          };

          return {
            useRadioLabelProps
          };
        }, [useCheckboxLikeLabelElement]);
        return {
          useRadioInput,
          useRadioLabel,
          ...listNavRet //checked: checked ?? false,
          //tabbable: tabbable ?? false

        };
      }, [byName, useListNavigationSingleSelectionChild]);
      return {
        useRadio,
        useRadioGroupProps,
        useRadioGroupLabelProps,
        radioGroup: {
          selectedIndex,
          selectedValue
        },
        ...listNavRet
      };
    }

    function useSlider(_ref) {
      let {
        slider: {
          max: maxParent,
          min: minParent
        },
        managedChildren
      } = _ref;
      debugLog("useSlider");
      const {
        useManagedChild,
        ...childrenInfo
      } = useManagedChildren({
        managedChildren
      });
      const useSliderThumb = q$1(function useSliderThumb(_ref2) {
        let {
          managedChild,
          sliderThumb
        } = _ref2;
        debugLog("useSliderThumb", managedChild.index);
        const [minParentCopy, setMinParentCopy] = y(minParent);
        const [maxParentCopy, setMaxParentCopy] = y(maxParent);

        useManagedChild({
          managedChild: { ...managedChild,
            subInfo: {
              setMax: setMaxParentCopy,
              setMin: setMinParentCopy
            }
          }
        });

        const {
          tag,
          value,
          max: maxOverride,
          min: minOverride,
          onValueChange,
          valueText,
          label
        } = sliderThumb;
        const min = minOverride !== null && minOverride !== void 0 ? minOverride : minParentCopy;
        const max = maxOverride !== null && maxOverride !== void 0 ? maxOverride : maxParentCopy;
        return {
          useSliderThumbProps,
          sliderThumb: {
            min,
            max
          }
        };

        function useSliderThumbProps(props) {
          let newProps = tag == "input" ? {
            min,
            max,
            value,
            type: "range"
          } : {
            "aria-valuemax": `${max}`,
            "aria-valuemin": `${min}`,
            "aria-valuenow": `${value}`
          };
          newProps = { ...newProps,
            "aria-label": label,
            "aria-valuetext": valueText,
            style: {
              "--range-value": `${value}`,
              "--range-value-text": `${valueText}`
            }
          };

          if (tag == "input") {
            newProps.onInput = e => {
              onValueChange === null || onValueChange === void 0 ? void 0 : onValueChange({
                currentTarget: e.currentTarget,
                target: e.target,
                [EventDetail]: {
                  value: e.currentTarget.valueAsNumber
                }
              });
            };
          } else {
            throw new Error("Unimplemented");
          }

          return useMergedProps(newProps, props);
        }
      }, []);
      return {
        useSliderThumb,
        ...childrenInfo
      };
    }

    function useToasts(_ref) {
      let {
        managedChildren: {
          onChildrenMountChange: ocmu,
          onAfterChildLayoutEffect
        }
      } = _ref;
      debugLog("useToasts"); // "Pointer" to whatever index toast is currently being shown.
      // E.g. it's 0 when the first toast is shown, then when dismissed, it becomes 1.
      // When the second toast is shown, it stays at 1 until dismissed, when it then becomes 2, etc.
      // Because toasts can potentially be dismissed out of order, this represents the "oldest" toast that still hasn't been dismissed,
      // even if "younger" ones have.

      const [activeToastIndex, setActiveToastIndex, getActiveToastIndex] = useState(-1);
      const [politeness, setPoliteness] = useState("polite");
      const {
        getElement,
        useRefElementProps
      } = useRefElement({});
      const {
        useManagedChild,
        ...childInfo
      } = useManagedChildren({
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange: useStableCallback((m, u) => {
            reevaluateClosestFit();
            ocmu === null || ocmu === void 0 ? void 0 : ocmu(m, u);
          })
        }
      });
      const {
        managedChildren: {
          children: toastQueue
        }
      } = childInfo; // Any time a new toast mounts, update our bottommostToastIndex to point to it if necessary
      // ("necessary" just meaning if it's the first toast ever or all prior toasts have been dismissed)

      const onAnyToastMounted = q$1(_index => {
        let bottom = getActiveToastIndex();

        while (bottom <= toastQueue.getHighestIndex() && (bottom < 0 || (_toastQueue$getAt = toastQueue.getAt(bottom)) !== null && _toastQueue$getAt !== void 0 && (_toastQueue$getAt$fla = _toastQueue$getAt.flags) !== null && _toastQueue$getAt$fla !== void 0 && _toastQueue$getAt$fla.showing)) {
          var _toastQueue$getAt, _toastQueue$getAt$fla;

          ++bottom;
        }

        setActiveToastIndex(bottom);
      }, [setActiveToastIndex]); // Any time a toast is dismissed, update our bottommostToastIndex to point to the next toast in the queue, if one exists.

      const onAnyToastDismissed = q$1(index => {
        var _getElement, _toastQueue$getAt3;

        let bottom = getActiveToastIndex();

        while (bottom <= toastQueue.getHighestIndex() && (bottom < 0 || bottom === index || (_toastQueue$getAt2 = toastQueue.getAt(bottom)) !== null && _toastQueue$getAt2 !== void 0 && _toastQueue$getAt2.flags)) {
          var _toastQueue$getAt2;

          ++bottom;
        }

        setActiveToastIndex(bottom);
        if ((_getElement = getElement()) !== null && _getElement !== void 0 && _getElement.contains(document.activeElement)) (_toastQueue$getAt3 = toastQueue.getAt(bottom)) === null || _toastQueue$getAt3 === void 0 ? void 0 : _toastQueue$getAt3.subInfo.focus();
      }, [setActiveToastIndex]); // Any time the index pointing to the currently-showing toast changes,
      // update the relevant children and let them know that they're now either active or dismissed.

      const {
        changeIndex,
        reevaluateClosestFit
      } = useChildrenFlag({
        initialIndex: activeToastIndex,
        children: toastQueue,
        key: "showing",
        closestFit: false
        /* setChildFlag: ((i, set) => {
             if (set)
                 console.assert(i <= getActiveToastIndex());
                toastQueue[i]?.setStatus(prev => prev === "dismissed" ? "dismissed" : set ? "active" : (i < getActiveToastIndex() ? "dismissed" : "pending"));
         }),*/
        //getChildFlag: i => toastQueue[i]?.getStatus() === "active"

      });
      s(() => {
        changeIndex(activeToastIndex);
      }, [activeToastIndex]);
      const useToast = q$1(_ref2 => {
        let {
          toast: {
            politeness,
            timeout
          },
          managedChild: {
            index
          }
        } = _ref2;
        debugLog("useToast", index); //const [status, setStatus, getStatus] = useState<"pending" | "active" | "dismissed">("pending");
        //const dismissed = (status === "dismissed");

        const dismiss = q$1(() => {
          setShowing(false);
        }, []);
        const [mouseOver, setMouseOver] = useState(false);
        useGlobalHandler(document, "pointermove", e => {
          setMouseOver(e.target.contains(getElement()));
        }); //const toastId = generateRandomId("toast-");

        _(() => {
          setPoliteness(politeness !== null && politeness !== void 0 ? politeness : "polite");
        }, [politeness]);
        const focus = q$1(() => {
          const element = getElement();

          if (element) {
            const firstFocusable = findFirstFocusable(element);
            firstFocusable === null || firstFocusable === void 0 ? void 0 : firstFocusable.focus();
          }
        }, []);
        const [showing, setShowing, getShowing] = useState(false);
        const showingRef = A({
          get: getShowing,
          set: setShowing,
          isValid: returnTrue
        });

        useManagedChild({
          managedChild: {
            index,
            flags: {
              showing: showingRef.current
            },
            subInfo: {
              focus
            }
          }
        }); //const isActive = (status === "active");


        const [triggerIndex, setTriggerIndex] = useState(1);
        const resetDismissTimer = q$1(() => {
          setTriggerIndex(i => ++i);
        }, []);
        s(() => {
          onAnyToastMounted(index);
        }, []);
        s(() => {
          if (showing) onAnyToastDismissed(index);
        }, [showing]);
        useTimeout({
          timeout: timeout == null || mouseOver ? null : isFinite(timeout) ? timeout : timeout > 0 ? null : 0,
          callback: () => {
            if (showing) setShowing(false);
          },
          triggerIndex: showing ? triggerIndex : false
        });
        return {
          toast: {
            showing,
            dismiss,
            resetDismissTimer
          }
        };
      }, []);

      function useToastContainerProps(_ref3) {
        var _ref4;

        let {
          role,
          "aria-live": ariaLive,
          "aria-relevant": ariaRelevant,
          ...props
        } = _ref3;
        return useMergedProps(useRefElementProps({
          class: "toasts-container",
          role: role || "status",
          "aria-live": (_ref4 = politeness !== null && politeness !== void 0 ? politeness : ariaLive) !== null && _ref4 !== void 0 ? _ref4 : "polite",
          "aria-relevant": ariaRelevant !== null && ariaRelevant !== void 0 ? ariaRelevant : "additions"
        }), props);
      }

      return {
        useToast,
        useToastContainerProps,
        ...childInfo
      };
    }

    function useTable(_ref) {
      let {
        linearNavigation,
        listNavigation,
        managedChildren,
        rovingTabIndex,
        typeaheadNavigation
      } = _ref;
      debugLog("useTable");
      const [getCurrentSortColumn, setCurrentSortColumn] = usePassiveState(null, returnNull);
      const bodySort = A(null);
      const {
        useGridNavigationProps,
        useGridNavigationRow,
        ...gridNavRet1
      } = useGridNavigation({
        linearNavigation,
        listNavigation,
        managedChildren,
        rovingTabIndex,
        typeaheadNavigation
      });
      const {
        managedChildren: {
          children: rows
        }
      } = gridNavRet1;
      const useTableRow = q$1(_ref2 => {
        let {
          asChildRowOfSection,
          asParentRowOfCells,
          tableRow: {
            location
          }
        } = _ref2;
        debugLog("useTableRow", asChildRowOfSection.managedChild.index);
        const getCells = q$1(() => {
          return cells;
        }, []);
        const {
          useGridNavigationCell,
          useGridNavigationRowProps,
          ...gridNavRet2
        } = useGridNavigationRow({
          asChildRowOfSection: { ...asChildRowOfSection,
            subInfo: {
              getCells,
              location
            }
          },
          asParentRowOfCells
        });
        const {
          asParentOfCells: {
            managedChildren: {
              children: cells
            }
          }
        } = gridNavRet2;
        const useTableCell = q$1(_ref3 => {
          let {
            listNavigation,
            managedChild,
            rovingTabIndex,
            subInfo,
            hasFocus
          } = _ref3;
          debugLog("useTableCell", managedChild.index);
          const {
            useGridNavigationCellProps,
            ...gridNavRet3
          } = useGridNavigationCell({
            listNavigation,
            managedChild,
            rovingTabIndex,
            subInfo,
            hasFocus
          });
          const sort = useStableCallback(() => {
            var _getCurrentSortColumn;

            const sortInfo = (_getCurrentSortColumn = getCurrentSortColumn()) !== null && _getCurrentSortColumn !== void 0 ? _getCurrentSortColumn : {
              index: -1,
              direction: 'ascending'
            };
            const cellIndex = managedChild.index;

            if (sortInfo.index != cellIndex) {
              if (sortInfo.direction[0] == 'a') sortInfo.direction = 'descending';else sortInfo.direction = 'ascending';
            }

            sortInfo.index = managedChild.index;
            setCurrentSortColumn(sortInfo);
            bodySort.current();
          });

          const useTableCellProps = props => props;

          return {
            tableHeaderCell: {
              sort
            },
            useTableCellProps,
            ...gridNavRet3
          };
        }, []);

        const useTableRowProps = props => props;

        return {
          useTableCell,
          useTableRowProps,
          ...gridNavRet2
        };
      }, []);
      const useTableBody = q$1(() => {
        debugLog("useTableBody");
        const getIndex = q$1(i => i.index, []);
        const getValue = q$1(i => {
          var _getCurrentSortColumn2, _getCurrentSortColumn3, _cell$subInfo$subInfo, _cell$subInfo$subInfo2;

          const cells = i.subInfo.subInfo.subInfo.getCells();
          const cell = cells.getAt((_getCurrentSortColumn2 = (_getCurrentSortColumn3 = getCurrentSortColumn()) === null || _getCurrentSortColumn3 === void 0 ? void 0 : _getCurrentSortColumn3.index) !== null && _getCurrentSortColumn2 !== void 0 ? _getCurrentSortColumn2 : 0);
          return {
            location: (_cell$subInfo$subInfo = cell === null || cell === void 0 ? void 0 : cell.subInfo.subInfo.subInfo.location) !== null && _cell$subInfo$subInfo !== void 0 ? _cell$subInfo$subInfo : "head",
            value: (_cell$subInfo$subInfo2 = cell === null || cell === void 0 ? void 0 : cell.subInfo.subInfo.subInfo.value) !== null && _cell$subInfo$subInfo2 !== void 0 ? _cell$subInfo$subInfo2 : -1
          }; //return cells.getAt(getCurrentSortColumn()?.index ?? 0)?.subInfo.subInfo.subInfo.value ?? null;
        }, []);

        const compare = (lhs, rhs) => {
          var _lhs$value, _rhs$value;

          if (lhs.location === rhs.location) return +((_lhs$value = lhs.value) !== null && _lhs$value !== void 0 ? _lhs$value : -Infinity) - +((_rhs$value = rhs.value) !== null && _rhs$value !== void 0 ? _rhs$value : -Infinity);
          if (lhs.location == 'head') return -1;
          if (lhs.location == 'body') return rhs.location == 'head' ? -1 : 1;
          return 1;
        };

        const {
          useSortableProps,
          ...sortableRet
        } = useSortableChildren({
          rearrangeableChildren: {
            getIndex
          },
          sortableChildren: {
            compare,
            getValue
          }
        });
        const {
          sortableChildren: {
            sort
          }
        } = sortableRet;
        _(() => {
          bodySort.current = () => {
            var _getCurrentSortColumn4, _getCurrentSortColumn5;

            sort(rows, (_getCurrentSortColumn4 = (_getCurrentSortColumn5 = getCurrentSortColumn()) === null || _getCurrentSortColumn5 === void 0 ? void 0 : _getCurrentSortColumn5.direction) !== null && _getCurrentSortColumn4 !== void 0 ? _getCurrentSortColumn4 : 'ascending');
          };
        }, [sort]);

        const useTableBodyProps = props => {
          console.assert(props.children != null);
          return useSortableProps(props);
        };

        return {
          useTableBodyProps,
          ...sortableRet
        };
      }, []);
      const useTableProps = useGridNavigationProps;
      return {
        useTableProps,
        useTableBody,
        useTableRow,
        ...gridNavRet1
      };
    }

    const AccordionSectionContext = B$2(null);
    const Accordion = w(function Accordion(_ref) {
      let {
        disableArrowKeys,
        disableHomeEndKeys,
        expandedIndex,
        initialIndex,
        navigationDirection,
        onAfterChildLayoutEffect,
        onChildrenMountChange,
        render
      } = _ref;
      const {
        useAccordionSection,
        ...provider
      } = useAccordion({
        accordion: {
          initialIndex
        },
        linearNavigation: {
          disableArrowKeys,
          disableHomeEndKeys,
          navigationDirection
        },
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        }
      });
      s(() => {
        provider.accordion.changeExpandedIndex(expandedIndex !== null && expandedIndex !== void 0 ? expandedIndex : null);
      }, [expandedIndex]);
      return o$1(AccordionSectionContext.Provider, {
        value: useAccordionSection,
        children: render(provider)
      });
    });
    function defaultRenderAccordionSection(_ref2) {
      let {
        makePropsHeading,
        makePropsBody,
        tagBody,
        tagHeading
      } = _ref2;
      return function (info, modifyHeadingProps, modifyBodyProps) {
        return o$1(p$1, {
          children: o$1(Heading, {
            heading: h$1(tagHeading, modifyHeadingProps({ ...makePropsHeading(info)
            })),
            children: h$1(tagBody, modifyBodyProps(makePropsBody(info)))
          })
        });
      };
    }
    const AccordionSection = w(function AccordionSection(_ref3) {
      let {
        open,
        index,
        tagButton,
        disabled,
        render,
        getDocument,
        getWindow,
        onActiveElementChange,
        onElementChange,
        onFocusedChanged,
        onFocusedInnerChanged,
        onLastActiveElementChange,
        onLastFocusedChanged,
        onLastFocusedInnerChanged,
        onMount,
        onUnmount,
        onWindowFocusedChange
      } = _ref3;
      const useAccordionSection = x(AccordionSectionContext);
      const {
        useAccordionSectionBodyProps,
        useAccordionSectionHeaderProps,
        ...sectionInfo
      } = useAccordionSection({
        button: {
          disabled,
          tagButton
        },
        accordionSection: {
          open
        },
        managedChildren: {
          index
        },
        hasFocus: {
          getDocument,
          getWindow,
          onActiveElementChange,
          onElementChange,
          onFocusedChanged,
          onFocusedInnerChanged,
          onLastActiveElementChange,
          onLastFocusedChanged,
          onLastFocusedInnerChanged,
          onMount,
          onUnmount,
          onWindowFocusedChange
        }
      });
      return render(sectionInfo, useAccordionSectionHeaderProps, useAccordionSectionBodyProps);
    });

    function defaultRenderButton(tag, makeButtonProps) {
      return function (modifyButtonProps) {
        return h$1(tag, modifyButtonProps(makeButtonProps({})));
      };
    }
    const Button = w(function Button(_ref) {
      let {
        tagButton,
        onPress,
        pressed,
        render,
        disabled,
        getDocument,
        getWindow,
        onActiveElementChange,
        onElementChange,
        onFocusedChanged,
        onFocusedInnerChanged,
        onLastActiveElementChange,
        onLastFocusedChanged,
        onLastFocusedInnerChanged,
        onMount,
        onUnmount,
        onWindowFocusedChange
      } = _ref;
      const {
        useButtonProps
      } = useButton({
        button: {
          tagButton,
          onPress,
          pressed,
          disabled
        },
        hasFocus: {
          getDocument,
          getWindow,
          onActiveElementChange,
          onElementChange,
          onFocusedChanged,
          onFocusedInnerChanged,
          onLastActiveElementChange,
          onLastFocusedChanged,
          onLastFocusedInnerChanged,
          onMount,
          onUnmount,
          onWindowFocusedChange
        }
      });
      return render(useButtonProps);
    });

    function defaultRenderCheckboxLike(_ref) {
      let {
        labelPosition,
        tagInput,
        tagLabel,
        makeInputProps,
        makeLabelProps
      } = _ref;
      return function (info, modifyInputProps, modifyLabelProps) {
        if (labelPosition == "wrapping") {
          const inputPropsBase = makeInputProps(info);
          const labelPropsBase = makeLabelProps(info);
          const inputProps = modifyInputProps(inputPropsBase);
          const {
            children,
            ...labelProps
          } = modifyLabelProps(labelPropsBase);
          const input = h$1(tagInput, inputProps);
          const label = h$1(tagLabel, { ...labelProps,
            children: o$1(p$1, {
              children: [input, children]
            })
          });
          return o$1(p$1, {
            children: label
          });
        } else if (labelPosition == "separate") {
          const inputProps = modifyInputProps(makeInputProps(info));
          const labelProps = modifyLabelProps(makeLabelProps(info));
          const input = h$1(tagInput, inputProps);
          const label = h$1(tagLabel, labelProps);
          return o$1(p$1, {
            children: [input, label]
          });
        } else {
          const userProps = makeInputProps(info);
          console.assert(!!userProps["aria-label"]);
          return h$1(tagInput, modifyInputProps(userProps));
        }
      };
    }
    function defaultRenderCheckbox(_ref2) {
      let {
        labelPosition,
        tagInput,
        tagLabel,
        makeInputProps,
        makeLabelProps
      } = _ref2;
      return defaultRenderCheckboxLike({
        labelPosition,
        tagInput,
        tagLabel,
        makeInputProps,
        makeLabelProps
      });
    }
    const Checkbox = w(function Checkbox(_ref3) {
      let {
        checked,
        disabled,
        tagLabel,
        labelPosition,
        tagInput,
        onCheckedChange,
        render,
        getDocument,
        getWindow,
        onActiveElementChange,
        onElementChange,
        onFocusedChanged,
        onFocusedInnerChanged,
        onLastActiveElementChange,
        onLastFocusedChanged,
        onLastFocusedInnerChanged,
        onMount,
        onUnmount,
        onWindowFocusedChange
      } = _ref3;
      const {
        useCheckboxInputElement,
        useCheckboxLabelElement,
        ...checkboxInfo
      } = useCheckbox({
        checkbox: {
          onCheckedChange
        },
        checkboxLike: {
          checked,
          disabled,
          labelPosition
        },
        label: {
          tagInput,
          tagLabel
        },
        hasFocusInput: {
          getDocument,
          getWindow,
          onActiveElementChange,
          onElementChange,
          onFocusedChanged,
          onFocusedInnerChanged,
          onLastActiveElementChange,
          onLastFocusedChanged,
          onLastFocusedInnerChanged,
          onMount,
          onUnmount,
          onWindowFocusedChange
        },
        hasFocusLabel: {
          getDocument,
          getWindow,
          onActiveElementChange,
          onElementChange: onElementChange,
          onFocusedChanged,
          onFocusedInnerChanged,
          onLastActiveElementChange,
          onLastFocusedChanged,
          onLastFocusedInnerChanged,
          onMount: onMount,
          onUnmount: onUnmount,
          onWindowFocusedChange
        }
      });
      const {
        useCheckboxInputElementProps
      } = useCheckboxInputElement();
      const {
        useCheckboxLabelElementProps
      } = useCheckboxLabelElement();
      return render(checkboxInfo, useCheckboxInputElementProps, useCheckboxLabelElementProps);
    });

    function defaultRenderCheckboxGroupChild(_ref) {
      let {
        tagInput,
        tagLabel,
        labelPosition,
        makeInputProps,
        makeLabelProps
      } = _ref;
      return function (info, modifyInputProps, modifyLabelProps) {
        return defaultRenderCheckboxLike({
          labelPosition,
          tagInput,
          tagLabel,
          makeInputProps,
          makeLabelProps
        })(info, modifyInputProps, modifyLabelProps);
      };
    }
    function defaultRenderCheckboxGroup(_ref2) {
      let {
        children,
        labelPosition,
        makeInputProps,
        makeLabelProps,
        tagInput,
        tagLabel
      } = _ref2;
      return function (info, modifyInputProps, modifyLabelProps) {
        return o$1(p$1, {
          children: [defaultRenderCheckboxLike({
            labelPosition,
            makeInputProps,
            makeLabelProps,
            tagInput,
            tagLabel
          })(info, modifyInputProps, modifyLabelProps), children]
        });
      };
    }
    const UseCheckboxGroupChildContext = B$2(null);
    const CheckboxGroup = w(function CheckboxGroup(_ref3) {
      let {
        disabled: parentDisabled,
        tagInput,
        tagLabel,
        render,
        getDocument,
        getWindow,
        labelPosition,
        initialIndex,
        collator,
        disableArrowKeys,
        disableHomeEndKeys,
        navigationDirection,
        noTypeahead,
        typeaheadTimeout,
        indexDemangler,
        indexMangler,
        onAfterChildLayoutEffect,
        onChildrenMountChange,
        onTabbableIndexChange,
        onTabbableRender
      } = _ref3;
      const {
        useCheckboxGroupChild,
        useCheckboxGroupParentInput,
        ...checkboxGroupParentInfo
      } = useCheckboxGroup({
        linearNavigation: {
          disableArrowKeys,
          disableHomeEndKeys,
          navigationDirection
        },
        listNavigation: {
          indexDemangler,
          indexMangler
        },
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        },
        rovingTabIndex: {
          initialIndex,
          onTabbableIndexChange,
          onTabbableRender
        },
        typeaheadNavigation: {
          collator,
          noTypeahead,
          typeaheadTimeout
        }
      });
      const {
        useCheckboxGroupParentInputProps,
        useCheckboxGroupParentLabelProps
      } = useCheckboxGroupParentInput({
        checkbox: {},
        checkboxLike: {
          disabled: parentDisabled,
          labelPosition
        },
        label: {
          tagInput,
          tagLabel
        },
        hasFocusInput: {
          getWindow,
          getDocument
        },
        hasFocusLabel: {
          getWindow,
          getDocument
        }
      });
      let wrapping;

      if (labelPosition == "separate") {
        wrapping = render(checkboxGroupParentInfo, useCheckboxGroupParentInputProps, useCheckboxGroupParentLabelProps);
      } else {
        wrapping = render(checkboxGroupParentInfo, useCheckboxGroupParentInputProps, useCheckboxGroupParentLabelProps);
      }

      return o$1(UseCheckboxGroupChildContext.Provider, {
        value: useCheckboxGroupChild,
        children: wrapping
      });
    });
    const CheckboxGroupCheckbox = w(function CheckboxGroupCheckbox(_ref4) {
      let {
        checked,
        disabled,
        index,
        labelPosition,
        tagInput,
        tagLabel,
        text,
        getWindow,
        getDocument,
        flags,
        focusSelf,
        hidden,
        onCheckedChange,
        render
      } = _ref4;
      const {
        useCheckboxGroupChildInputProps,
        useCheckboxGroupChildLabelProps,
        ...checkboxGroupChildInfo
      } = x(UseCheckboxGroupChildContext)({
        asCheckbox: {
          checkbox: {
            onCheckedChange
          },
          checkboxLike: {
            checked,
            disabled,
            labelPosition
          },
          label: {
            tagInput,
            tagLabel
          },
          hasFocusInput: {
            getWindow,
            getDocument
          },
          hasFocusLabel: {
            getWindow,
            getDocument
          }
        },
        asCheckboxGroupChild: {
          listNavigation: {
            text
          },
          managedChild: {
            index,
            flags
          },
          rovingTabIndex: {
            focusSelf,
            hidden
          }
        }
      });

      if (labelPosition == "separate") {
        return render(checkboxGroupChildInfo, useCheckboxGroupChildInputProps, useCheckboxGroupChildLabelProps);
      } else {
        return render(checkboxGroupChildInfo, useCheckboxGroupChildInputProps, useCheckboxGroupChildLabelProps);
      }
    });

    function defaultRenderPortal(_ref) {
      var _portalRef$current;

      let {
        portalId,
        children
      } = _ref;
      const portalRef = A(null);
      (_portalRef$current = portalRef.current) !== null && _portalRef$current !== void 0 ? _portalRef$current : portalRef.current = document.getElementById(portalId);
      if (portalRef.current) return $(children, portalRef.current);else return children;
    }
    function defaultRenderModal(_ref2) {
      let {
        portalId,
        tagFocusContainer,
        tagBackdrop,
        tagBody,
        tagDialog,
        tagTitle,
        makePropsFocusContainer,
        makePropsBackdrop,
        makePropsBody,
        makePropsDialog,
        makePropsTitle
      } = _ref2;
      return function (dialogInfo, modifyFocusContainerProps, modifyDialogProps, modifyTitleProps, modifyBodyProps, modifyBackdropProps) {
        const {
          children: titleChildren,
          ...titleProps
        } = modifyTitleProps(makePropsTitle(dialogInfo));
        const {
          children: bodyChildren,
          ...bodyProps
        } = modifyBodyProps(makePropsBody(dialogInfo));
        const {
          children: dialogChildren,
          ...dialogProps
        } = modifyDialogProps(makePropsDialog(dialogInfo));
        const {
          children: backdropChildren,
          ...backdropProps
        } = modifyBackdropProps(makePropsBackdrop(dialogInfo));
        const {
          children: focusContainerChildren,
          ...focusContainerProps
        } = modifyFocusContainerProps(makePropsFocusContainer(dialogInfo));
        const title = h$1(tagTitle, titleProps, titleChildren);
        const body = h$1(tagBody, bodyProps, bodyChildren);
        const dialog = h$1(tagDialog, { ...dialogProps,
          children: o$1(p$1, {
            children: [dialogChildren, title, body]
          })
        });
        const backdrop = h$1(tagBackdrop, backdropProps, backdropChildren);
        const focusContainer = h$1(tagFocusContainer, focusContainerProps, o$1(p$1, {
          children: [focusContainerChildren, dialog, backdrop]
        }));
        return defaultRenderPortal({
          portalId,
          children: focusContainer
        });
      };
    }
    function defaultRenderDialog(_ref3) {
      let {
        portalId,
        tagFocusContainer,
        tagBackdrop,
        tagBody,
        tagDialog,
        tagTitle,
        makePropsFocusContainer,
        makePropsBackdrop,
        makePropsBody,
        makePropsDialog,
        makePropsTitle
      } = _ref3;
      return defaultRenderModal({
        portalId,
        tagFocusContainer,
        tagBackdrop,
        tagBody,
        tagDialog,
        tagTitle,
        makePropsFocusContainer,
        makePropsBackdrop,
        makePropsBody,
        makePropsDialog,
        makePropsTitle
      });
    }
    const Dialog = w(function Dialog(_ref4) {
      let {
        onClose,
        open,
        bodyIsOnlySemantic,
        getDocument,
        getWindow,
        onActiveElementChange,
        onLastActiveElementChange,
        onWindowFocusedChange,
        focusSelf,
        render
      } = _ref4;
      const {
        useDialogBackdrop,
        useDialogBody,
        useDialogProps,
        useDialogTitle,
        useDialogFocusContainerProps,
        ...r
      } = useDialog({
        dialog: {
          onClose
        },
        modal: {
          bodyIsOnlySemantic,
          focusSelf
        },
        softDismiss: {
          open
        },
        activeElement: {
          getDocument,
          getWindow,
          onActiveElementChange,
          onLastActiveElementChange,
          onWindowFocusedChange
        }
      });
      const {
        useDialogTitleProps
      } = useDialogTitle();
      const {
        useDialogBodyProps
      } = useDialogBody();
      const {
        useDialogBackdropProps
      } = useDialogBackdrop();
      return render(r, useDialogFocusContainerProps, useDialogProps, useDialogTitleProps, useDialogBodyProps, useDialogBackdropProps);
    });

    w(function Drawer(_ref2) {
      let {
        render,
        onClose,
        open,
        bodyIsOnlySemantic,
        focusSelf,
        getDocument,
        getWindow,
        onActiveElementChange,
        onLastActiveElementChange,
        onWindowFocusedChange
      } = _ref2;
      const {
        useDrawerBackdrop,
        useDrawerBody,
        useDrawerProps,
        useDrawerTitle,
        useDrawerFocusContainerProps,
        ...drawerInfo
      } = useDrawer({
        modal: {
          bodyIsOnlySemantic,
          focusSelf
        },
        softDismiss: {
          onClose,
          open
        },
        activeElement: {
          getDocument,
          getWindow,
          onActiveElementChange,
          onLastActiveElementChange,
          onWindowFocusedChange
        }
      });
      const {
        useDrawerTitleProps
      } = useDrawerTitle();
      const {
        useDrawerBodyProps
      } = useDrawerBody();
      const {
        useDrawerBackdropProps
      } = useDrawerBackdrop();
      return render(drawerInfo, useDrawerFocusContainerProps, useDrawerProps, useDrawerTitleProps, useDrawerBodyProps, useDrawerBackdropProps);
    });

    const ListboxSingleContext = B$2(null);

    function ListboxSingleU(_ref) {
      let {
        render,
        selectedIndex,
        tagLabel,
        collator,
        disableArrowKeys,
        disableHomeEndKeys,
        indexDemangler,
        indexMangler,
        navigationDirection,
        noTypeahead,
        onAfterChildLayoutEffect,
        onChildrenMountChange,
        onTabbableIndexChange,
        onTabbableRender,
        typeaheadTimeout,
        onAllLostFocus,
        onAnyGainedFocus,
        selectionMode,
        tagList,
        onSelect
      } = _ref;
      const {
        useListboxSingleItem,
        useListboxSingleLabel,
        useListboxSingleProps,
        ...listboxReturnType
      } = useListboxSingle({
        linearNavigation: {
          disableArrowKeys,
          disableHomeEndKeys,
          navigationDirection
        },
        listboxSingle: {
          tagLabel,
          tagList,
          onSelect
        },
        listNavigation: {
          indexDemangler,
          indexMangler
        },
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        },
        rovingTabIndex: {
          onTabbableIndexChange,
          onTabbableRender
        },
        singleSelection: {
          selectedIndex,
          selectionMode
        },
        typeaheadNavigation: {
          collator,
          noTypeahead,
          typeaheadTimeout
        },
        childrenHaveFocus: {
          onAllLostFocus,
          onAnyGainedFocus
        }
      });
      const {
        useListboxSingleLabelProps
      } = useListboxSingleLabel(); //const label = createElement(tagLabel, useListboxSingleLabelProps({}) as any);
      //const list = createElement(tagList, useListboxSingleProps({ children: vnodeChildren, ref }) as any);

      return o$1(ListboxSingleContext.Provider, {
        value: useListboxSingleItem,
        children: render({ ...listboxReturnType
        }, useListboxSingleLabelProps, useListboxSingleProps)
      });
    }

    function defaultRenderListboxSingle(_ref2) {
      let {
        makePropsList,
        makePropsLabel,
        tagLabel,
        tagList
      } = _ref2;
      return defaultRenderList({
        makePropsLabel,
        makePropsList,
        tagLabel,
        tagList
      });
    }
    function defaultRenderListboxSingleItem(_ref3) {
      let {
        makePropsListItem,
        tagListItem
      } = _ref3;
      return defaultRenderListItem({
        makePropsListItem,
        tagListItem
      });
    }

    function ListboxSingleItemU(_ref4) {
      let {
        index,
        disabled,
        flags,
        focusSelf,
        getDocument,
        getWindow,
        onActiveElementChange,
        onElementChange,
        onFocusedChanged,
        onFocusedInnerChanged,
        onLastActiveElementChange,
        onLastFocusedChanged,
        onLastFocusedInnerChanged,
        onMount,
        onUnmount,
        onWindowFocusedChange,
        render,
        text,
        hidden
      } = _ref4;
      const {
        useListboxSingleItemProps,
        rovingTabIndex,
        singleSelection
      } = x(ListboxSingleContext)({
        managedChild: {
          index,
          flags
        },
        rovingTabIndex: {
          focusSelf,
          hidden
        },
        listNavigation: {
          text
        },
        listboxSingleItem: {
          disabled
        },
        hasFocus: {
          getDocument,
          getWindow,
          onActiveElementChange,
          onElementChange,
          onFocusedChanged,
          onFocusedInnerChanged,
          onLastActiveElementChange,
          onLastFocusedChanged,
          onLastFocusedInnerChanged,
          onMount,
          onUnmount,
          onWindowFocusedChange
        }
      });
      return o$1(p$1, {
        children: render({
          rovingTabIndex,
          singleSelection
        }, useListboxSingleItemProps)
      });
    }

    const ListboxSingle = w(ListboxSingleU);
    const ListboxSingleItem = w(ListboxSingleItemU);
    w(ListboxGroupU);

    function ListboxGroupU(_ref5) {
      let {
        render
      } = _ref5;
      const {
        useListboxGroupHeadingProps,
        useListboxGroupContainerProps
      } = useListboxGroup();
      return render(useListboxGroupContainerProps, useListboxGroupHeadingProps);
    }
    function defaultRenderList(_ref7) {
      let {
        makePropsList,
        makePropsLabel,
        tagLabel,
        tagList
      } = _ref7;
      return function (info, modifyPropsLabel, modifyPropsList) {
        const label = h$1(tagLabel, modifyPropsLabel(makePropsLabel(info)));
        const list = h$1(tagList, modifyPropsList(makePropsList(info)));
        return o$1(p$1, {
          children: [label, list]
        });
      };
    }
    function defaultRenderListItem(_ref8) {
      let {
        makePropsListItem,
        tagListItem
      } = _ref8;
      return function (info, modifyPropsListItem) {
        return h$1(tagListItem, modifyPropsListItem(makePropsListItem(info)));
      };
    }

    const ListboxMultiContext = B$2(null);
    const ListboxMulti = w(function ListboxMulti(_ref) {
      let {
        render,
        tagLabel,
        collator,
        disableArrowKeys,
        disableHomeEndKeys,
        indexDemangler,
        indexMangler,
        initialIndex,
        navigationDirection,
        noTypeahead,
        onAfterChildLayoutEffect,
        onChildrenMountChange,
        onTabbableIndexChange,
        onTabbableRender,
        typeaheadTimeout,
        tagList
      } = _ref;
      const {
        useListboxMultiItem,
        useListboxMultiLabel,
        useListboxMultiProps,
        ...listboxReturnType
      } = useListboxMulti({
        linearNavigation: {
          disableArrowKeys,
          disableHomeEndKeys,
          navigationDirection
        },
        listboxMulti: {
          tagLabel,
          tagList
        },
        listNavigation: {
          indexDemangler,
          indexMangler
        },
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        },
        rovingTabIndex: {
          initialIndex,
          onTabbableIndexChange,
          onTabbableRender
        },
        typeaheadNavigation: {
          collator,
          noTypeahead,
          typeaheadTimeout
        }
      });
      const {
        useListboxMultiLabelProps
      } = useListboxMultiLabel();
      return o$1(ListboxMultiContext.Provider, {
        value: useListboxMultiItem,
        children: render(listboxReturnType, useListboxMultiLabelProps, useListboxMultiProps)
      });
    });
    function defaultRenderListboxMulti(_ref2) {
      let {
        makePropsList,
        makePropsLabel,
        tagLabel,
        tagList
      } = _ref2;
      return defaultRenderList({
        makePropsLabel,
        makePropsList,
        tagLabel,
        tagList
      });
    }
    function defaultRenderListboxMultiItem(_ref3) {
      let {
        makePropsListItem,
        tagListItem
      } = _ref3;
      return defaultRenderListItem({
        makePropsListItem,
        tagListItem
      });
    }
    const ListboxMultiItem = w(function ListboxMultiItem(_ref4) {
      let {
        index,
        disabled,
        flags,
        focusSelf,
        render,
        text,
        hidden,
        selected,
        onSelectedChange,
        getDocument,
        getWindow,
        onActiveElementChange,
        onElementChange,
        onFocusedChanged,
        onFocusedInnerChanged,
        onLastActiveElementChange,
        onLastFocusedChanged,
        onLastFocusedInnerChanged,
        onMount,
        onUnmount,
        onWindowFocusedChange
      } = _ref4;
      const {
        useListboxMultiItemProps,
        ...itemReturn
      } = x(ListboxMultiContext)({
        managedChild: {
          index,
          flags
        },
        rovingTabIndex: {
          focusSelf,
          hidden
        },
        listNavigation: {
          text
        },
        listboxMultiItem: {
          disabled,
          selected,
          onSelectedChange
        },
        hasFocus: {
          getDocument,
          getWindow,
          onActiveElementChange,
          onElementChange,
          onFocusedChanged,
          onFocusedInnerChanged,
          onLastActiveElementChange,
          onLastFocusedChanged,
          onLastFocusedInnerChanged,
          onMount,
          onUnmount,
          onWindowFocusedChange
        }
      });
      return o$1(p$1, {
        children: render(itemReturn, useListboxMultiItemProps)
      });
    });

    const MenuItemContext = B$2(null);
    const Menu = w(function Menu(_ref) {
      let {
        initialIndex,
        collator,
        disableArrowKeys,
        disableHomeEndKeys,
        navigationDirection,
        noTypeahead,
        typeaheadTimeout,
        onOpen,
        onClose,
        open,
        openDirection,
        indexDemangler,
        indexMangler,
        onAfterChildLayoutEffect,
        onChildrenMountChange,
        onTabbableIndexChange,
        onTabbableRender,
        getDocument,
        getWindow,
        render
      } = _ref;
      const {
        useMenuButtonProps,
        useMenuItem,
        useMenuProps,
        useMenuSentinel,
        useMenuSurfaceProps,
        ...menuReturn
      } = useMenu({
        linearNavigation: {
          disableArrowKeys,
          disableHomeEndKeys,
          navigationDirection
        },
        listNavigation: {
          indexDemangler,
          indexMangler
        },
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        },
        menu: {
          onOpen: useStableCallback(onOpen),
          openDirection
        },
        menuSurface: {},
        rovingTabIndex: {
          initialIndex,
          onTabbableIndexChange,
          onTabbableRender
        },
        softDismiss: {
          onClose: useStableCallback(onClose),
          open
        },
        typeaheadNavigation: {
          collator,
          noTypeahead,
          typeaheadTimeout
        },
        activeElement: {
          getDocument,
          getWindow
        },
        menuButtonHasFocus: {
          getDocument,
          getWindow
        }
      });
      const {
        useMenuSentinelProps: useFirstSentinelProps
      } = useMenuSentinel();
      const {
        useMenuSentinelProps: useLastSentinelProps
      } = useMenuSentinel();
      return o$1(MenuItemContext.Provider, {
        value: useMenuItem,
        children: render(menuReturn, useMenuButtonProps, useMenuSurfaceProps, useMenuProps, useFirstSentinelProps, useLastSentinelProps)
      });
    });
    const MenuItem = w(function MenuItem(_ref2) {
      let {
        render,
        index,
        text,
        hidden,
        flags,
        focusSelf
      } = _ref2;
      const {
        useMenuItemProps,
        ...rest
      } = x(MenuItemContext)({
        listNavigation: {
          text
        },
        managedChild: {
          index,
          flags
        },
        rovingTabIndex: {
          focusSelf,
          hidden
        }
      });
      return render(rest, useMenuItemProps);
    });
    function defaultRenderMenu(_ref3) {
      let {
        portalId,
        tagButton,
        tagMenu,
        tagSurface,
        tagSentinel,
        makePropsButton,
        makePropsMenu,
        makePropsSurface,
        makePropsSentinel
      } = _ref3;
      return function (menuInfo, modifyMenuButtonProps, modifyMenuSurfaceProps, modifyMenuProps, modifyFirstSentinelProps, modifyLastSentinelProps) {
        const {
          children: surfaceChildren,
          ...surfaceProps
        } = modifyMenuSurfaceProps(makePropsSurface(menuInfo));
        const {
          children: menuChildren,
          ...menuProps
        } = modifyMenuProps(makePropsMenu(menuInfo));
        return o$1(p$1, {
          children: [h$1(tagButton, modifyMenuButtonProps(makePropsButton(menuInfo))), defaultRenderPortal({
            portalId,
            children: h$1(tagSurface, { ...surfaceProps,
              children: o$1(p$1, {
                children: [h$1(tagSentinel, modifyFirstSentinelProps(makePropsSentinel(menuInfo))), surfaceChildren, h$1(tagMenu, { ...menuProps,
                  children: o$1(p$1, {
                    children: menuChildren
                  })
                }), h$1(tagSentinel, modifyLastSentinelProps(makePropsSentinel(menuInfo)))]
              })
            })
          })]
        });
      };
    }
    function defaultRenderMenuItem(_ref4) {
      let {
        makePropsMenuItem: makePropsMenuItem,
        tagMenuItem
      } = _ref4;
      return function (info, modifyMenuItemProps) {
        return h$1(tagMenuItem, modifyMenuItemProps(makePropsMenuItem(info)));
      };
    }

    function defaultRenderRadioGroup(_ref) {
      let {
        tagGroup,
        tagLabel,
        makePropsGroup,
        makePropsLabel
      } = _ref;
      return function (info, modifyLabelProps, modifyGroupProps) {
        return o$1(p$1, {
          children: [h$1(tagLabel, modifyLabelProps(makePropsLabel(info))), h$1(tagGroup, modifyGroupProps(makePropsGroup(info)))]
        });
      };
    }
    const RadioContext = B$2(null);
    const RadioGroup = w(function RadioGroup(_ref2) {
      let {
        render,
        tagGroup,
        tagGroupLabel,
        name,
        onSelectedValueChange,
        selectedValue,
        collator,
        disableArrowKeys,
        disableHomeEndKeys,
        navigationDirection,
        noTypeahead,
        typeaheadTimeout,
        indexDemangler,
        indexMangler,
        onAllLostFocus,
        onAnyGainedFocus,
        onAfterChildLayoutEffect,
        onChildrenMountChange,
        onTabbableIndexChange,
        onTabbableRender
      } = _ref2;
      const {
        useRadio,
        useRadioGroupLabelProps,
        useRadioGroupProps,
        ...radioGroupReturn
      } = useRadioGroup({
        linearNavigation: {
          disableArrowKeys,
          disableHomeEndKeys,
          navigationDirection
        },
        listNavigation: {
          indexDemangler,
          indexMangler
        },
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        },
        radioGroup: {
          name,
          onSelectedValueChange,
          selectedValue,
          tagGroup,
          tagGroupLabel
        },
        rovingTabIndex: {
          onTabbableIndexChange,
          onTabbableRender
        },
        typeaheadNavigation: {
          collator,
          noTypeahead,
          typeaheadTimeout
        },
        childrenHaveFocus: {
          onAllLostFocus,
          onAnyGainedFocus
        },
        singleSelection: {
          selectionMode: "focus"
        }
      });
      return o$1(RadioContext.Provider, {
        value: useRadio,
        children: render(radioGroupReturn, useRadioGroupLabelProps, useRadioGroupProps)
      });
    });
    function defaultRenderRadio(_ref3) {
      let {
        tagInput,
        tagLabel,
        makeInputProps,
        makeLabelProps,
        labelPosition
      } = _ref3;
      return defaultRenderCheckboxLike({
        labelPosition,
        tagInput,
        tagLabel,
        makeInputProps,
        makeLabelProps
      });
    }
    const Radio = w(function Radio(_ref4) {
      let {
        disabled,
        index,
        text,
        hidden,
        tagInput,
        labelPosition,
        tagLabel,
        value,
        render,
        flags,
        focusSelf,
        getDocument,
        getWindow,
        onActiveElementChange,
        onElementChange,
        onFocusedChanged,
        onFocusedInnerChanged,
        onLastActiveElementChange,
        onLastFocusedChanged,
        onLastFocusedInnerChanged,
        onMount,
        onUnmount,
        onWindowFocusedChange
      } = _ref4;
      const {
        useRadioInput,
        useRadioLabel,
        ...radioReturn
      } = x(RadioContext)({
        listNavigation: {
          text
        },
        managedChild: {
          index,
          flags
        },
        radio: {
          disabled,
          labelPosition,
          tagInput,
          tagLabel,
          value
        },
        rovingTabIndex: {
          hidden,
          focusSelf
        },
        hasFocusInput: {
          getDocument,
          getWindow,
          onActiveElementChange,
          onElementChange,
          onFocusedChanged,
          onFocusedInnerChanged,
          onLastActiveElementChange,
          onLastFocusedChanged,
          onLastFocusedInnerChanged,
          onMount,
          onUnmount,
          onWindowFocusedChange
        },
        hasFocusLabel: {
          getDocument,
          getWindow,
          onActiveElementChange,
          onElementChange,
          onFocusedChanged,
          onFocusedInnerChanged,
          onLastActiveElementChange,
          onLastFocusedChanged,
          onLastFocusedInnerChanged,
          onMount,
          onUnmount,
          onWindowFocusedChange
        }
      });
      const {
        useRadioInputProps
      } = useRadioInput({
        tag: tagInput
      });
      const {
        useRadioLabelProps
      } = useRadioLabel({
        tag: tagLabel
      });
      return render(radioReturn, useRadioInputProps, useRadioLabelProps);
    });

    const SliderThumbContext = B$2(null);
    const Slider = w(function Slider(_ref) {
      let {
        max,
        min,
        onAfterChildLayoutEffect,
        onChildrenMountChange,
        children
      } = _ref;
      const {
        useSliderThumb,
        ..._sliderInfo
      } = useSlider({
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        },
        slider: {
          max,
          min
        }
      });
      return o$1(SliderThumbContext.Provider, {
        value: useSliderThumb,
        children: children
      });
    });
    const SliderThumb = w(function SliderThumbU(_ref2) {
      let {
        label,
        tag,
        value,
        max,
        min,
        onValueChange,
        index,
        flags,
        render,
        valueText
      } = _ref2;
      const {
        useSliderThumbProps,
        ...sliderInfo
      } = x(SliderThumbContext)({
        managedChild: {
          index,
          flags
        },
        sliderThumb: {
          label,
          tag,
          value,
          max,
          min,
          onValueChange,
          valueText
        }
      });
      return render(sliderInfo, useSliderThumbProps);
    });
    function defaultRenderSliderThumb(_ref3) {
      let {
        tagThumb,
        makePropsThumb
      } = _ref3;
      return function (info, modifyThumbProps) {
        return h$1(tagThumb, modifyThumbProps(makePropsThumb(info)));
      };
    }

    const LocationContext = B$2(null);
    const TableBodyContext = B$2(null);
    const TableRowContext = B$2(null);
    const TableCellContext = B$2(null);
    function defaultRenderTable(_ref) {
      let {
        tagTable,
        makePropsTable
      } = _ref;
      return function (info, modifyPropsTable) {
        return h$1(tagTable, modifyPropsTable(makePropsTable(info)));
      };
    }
    function defaultRenderTableRow(_ref5) {
      let {
        tagTableRow,
        makePropsTableRow
      } = _ref5;
      return function (info, modifyPropsTableRow) {
        return h$1(tagTableRow, modifyPropsTableRow(makePropsTableRow(info)));
      };
    }
    function defaultRenderTableCell(_ref6) {
      let {
        tagTableCell,
        makePropsTableCell
      } = _ref6;
      return function (info, modifyPropsTableCell) {
        return h$1(tagTableCell, modifyPropsTableCell(makePropsTableCell(info)));
      };
    }
    w(function TableU(_ref7) {
      let {
        collator,
        disableArrowKeys,
        disableHomeEndKeys,
        initialIndex,
        noTypeahead,
        onAfterChildLayoutEffect,
        onChildrenMountChange,
        onTabbableIndexChange,
        onTabbableRender,
        typeaheadTimeout,
        render
      } = _ref7;
      const {
        useTableBody,
        useTableProps,
        useTableRow,
        ...tableInfo
      } = useTable({
        linearNavigation: {
          disableArrowKeys,
          disableHomeEndKeys
        },
        listNavigation: {},
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        },
        rovingTabIndex: {
          initialIndex,
          onTabbableIndexChange,
          onTabbableRender
        },
        typeaheadNavigation: {
          collator,
          noTypeahead,
          typeaheadTimeout
        }
      });
      return o$1(TableBodyContext.Provider, {
        value: useTableBody,
        children: o$1(TableRowContext.Provider, {
          value: useTableRow,
          children: (render !== null && render !== void 0 ? render : defaultRenderTable)(tableInfo, useTableProps)
        })
      });
    });
    w(function TableBodyU(_ref8) {
      let {
        render
      } = _ref8;
      const {
        useTableBodyProps,
        ...sectionInfo
      } = x(TableBodyContext)({});
      return o$1(LocationContext.Provider, {
        value: "body",
        children: render(sectionInfo, useTableBodyProps)
      });
    });
    w(function TableHeadU(_ref9) {
      let {
        render
      } = _ref9;
      return o$1(LocationContext.Provider, {
        value: "head",
        children: render()
      });
    });
    w(function TableFootU(_ref10) {
      let {
        render
      } = _ref10;
      return o$1(LocationContext.Provider, {
        value: "foot",
        children: render()
      });
    });
    w(function TableRowU(_ref11, ref) {
      let {
        index,
        text,
        collator,
        disableArrowKeys,
        disableHomeEndKeys,
        flags,
        focusSelf,
        hidden,
        indexDemangler,
        indexMangler,
        initialIndex,
        noTypeahead,
        onAfterChildLayoutEffect,
        onChildrenMountChange,
        onTabbableIndexChange,
        onTabbableRender,
        typeaheadTimeout,
        render
      } = _ref11;
      const {
        useTableCell,
        useTableRowProps,
        ...rowInfo
      } = x(TableRowContext)({
        asChildRowOfSection: {
          listNavigation: {
            text
          },
          managedChild: {
            index,
            flags
          },
          rovingTabIndex: {
            focusSelf,
            hidden
          },
          subInfo: {}
        },
        asParentRowOfCells: {
          linearNavigation: {
            disableArrowKeys,
            disableHomeEndKeys
          },
          listNavigation: {
            indexDemangler,
            indexMangler
          },
          managedChildren: {
            onAfterChildLayoutEffect,
            onChildrenMountChange
          },
          rovingTabIndex: {
            initialIndex,
            onTabbableIndexChange,
            onTabbableRender
          },
          typeaheadNavigation: {
            collator,
            noTypeahead,
            typeaheadTimeout
          }
        },
        tableRow: {
          location: x(LocationContext)
        }
      });
      return o$1(TableCellContext.Provider, {
        value: useTableCell,
        children: (render !== null && render !== void 0 ? render : defaultRenderTableRow)(rowInfo, useTableRowProps({
          ref
        }))
      });
    });
    w(function TableCell(_ref12, ref) {
      let {
        index,
        text,
        flags,
        focusSelf,
        hidden,
        value,
        getDocument,
        getWindow,
        onActiveElementChange,
        onElementChange,
        onFocusedChanged,
        onFocusedInnerChanged,
        onLastActiveElementChange,
        onLastFocusedChanged,
        onLastFocusedInnerChanged,
        onMount,
        onUnmount,
        onWindowFocusedChange,
        render
      } = _ref12;
      const {
        useTableCellProps,
        ...cellInfo
      } = x(TableCellContext)({
        listNavigation: {
          text
        },
        managedChild: {
          index,
          flags
        },
        rovingTabIndex: {
          focusSelf,
          hidden
        },
        hasFocus: {
          getDocument,
          getWindow,
          onActiveElementChange,
          onElementChange,
          onFocusedChanged,
          onFocusedInnerChanged,
          onLastActiveElementChange,
          onLastFocusedChanged,
          onLastFocusedInnerChanged,
          onMount,
          onUnmount,
          onWindowFocusedChange
        },
        subInfo: {
          location: x(LocationContext),
          value
        }
      });
      return (render !== null && render !== void 0 ? render : defaultRenderTableCell)(cellInfo, useTableCellProps({
        ref
      }));
    });

    const TabContext = B$2(null);
    const TabPanelContext = B$2(null);
    const Tabs = w(function Tabs(_ref) {
      let {
        selectedIndex,
        selectionMode,
        collator,
        disableArrowKeys,
        disableHomeEndKeys,
        indexDemangler,
        indexMangler,
        navigationDirection,
        noTypeahead,
        onAfterChildLayoutEffect,
        onChildrenMountChange,
        onTabbableIndexChange,
        onTabbableRender,
        typeaheadTimeout,
        onAllLostFocus,
        onAnyGainedFocus,
        onSelectedIndexChange,
        render
      } = _ref;
      const {
        useTabList,
        useTabListLabel,
        useTabPanel,
        ...tabsInfo
      } = useTabs({
        tabPanels: {
          managedChildren: {
            onAfterChildLayoutEffect,
            onChildrenMountChange
          }
        }
      });
      const {
        useTab,
        useTabListProps,
        ...tablistInfo
      } = useTabList({
        childrenHaveFocus: {
          onAllLostFocus,
          onAnyGainedFocus
        },
        tabs: {
          onSelectedIndexChange
        },
        linearNavigation: {
          disableArrowKeys,
          disableHomeEndKeys,
          navigationDirection
        },
        listNavigation: {
          indexDemangler,
          indexMangler
        },
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        },
        rovingTabIndex: {
          onTabbableIndexChange,
          onTabbableRender
        },
        singleSelection: {
          selectedIndex,
          selectionMode
        },
        typeaheadNavigation: {
          collator,
          noTypeahead,
          typeaheadTimeout
        }
      });
      const {
        useTabListLabelProps
      } = useTabListLabel({});
      return o$1(TabContext.Provider, {
        value: useTab,
        children: o$1(TabPanelContext.Provider, {
          value: useTabPanel,
          children: render({ ...tabsInfo,
            ...tablistInfo
          }, useTabListLabelProps, useTabListProps)
        })
      });
    });
    const Tab = w(function Tab(_ref2) {
      let {
        index,
        text,
        flags,
        focusSelf,
        hidden,
        getDocument,
        getWindow,
        onActiveElementChange,
        onElementChange,
        onFocusedChanged,
        onFocusedInnerChanged,
        onLastActiveElementChange,
        onLastFocusedChanged,
        onLastFocusedInnerChanged,
        onMount,
        onUnmount,
        onWindowFocusedChange,
        render
      } = _ref2;
      const {
        useTabProps,
        ...tabInfo
      } = x(TabContext)({
        listNavigation: {
          text
        },
        managedChild: {
          index,
          flags
        },
        rovingTabIndex: {
          focusSelf,
          hidden
        },
        hasFocus: {
          getDocument,
          getWindow,
          onActiveElementChange,
          onElementChange,
          onFocusedChanged,
          onFocusedInnerChanged,
          onLastActiveElementChange,
          onLastFocusedChanged,
          onLastFocusedInnerChanged,
          onMount,
          onUnmount,
          onWindowFocusedChange
        }
      });
      return render(tabInfo, useTabProps);
    });
    const TabPanel = w(function TabPanel(_ref3) {
      let {
        index,
        flags,
        render
      } = _ref3;
      const {
        useTabPanelProps,
        ...tabPanelInfo
      } = x(TabPanelContext)({
        managedChild: {
          index,
          flags
        }
      });
      return render(tabPanelInfo, useTabPanelProps);
    });
    function defaultRenderTabs(_ref4) {
      let {
        tagLabel,
        tagList,
        makePropsLabel,
        makePropsList,
        panels
      } = _ref4;
      return function (tabsInfo, modifyLabelProps, modifyListProps) {
        const label = h$1(tagLabel, modifyLabelProps(makePropsLabel(tabsInfo)));
        const list = h$1(tagList, modifyListProps(makePropsList(tabsInfo)));
        return o$1(p$1, {
          children: [label, list, panels]
        });
      };
    }
    function defaultRenderTab(_ref5) {
      let {
        makePropsTab,
        tagTab
      } = _ref5;
      return function (tabInfo, modifyTabProps) {
        return h$1(tagTab, modifyTabProps(makePropsTab(tabInfo)));
      };
    }
    function defaultRenderTabPanel(_ref6) {
      let {
        makePropsTabPanel,
        tagTabPanel
      } = _ref6;
      return function (tabPanelInfo, modifyTabPanelProps) {
        return h$1(tagTabPanel, modifyTabPanelProps(makePropsTabPanel(tabPanelInfo)));
      };
    }

    const ToastContext = B$2(null);
    w(function Toasts(_ref) {
      let {
        onAfterChildLayoutEffect,
        onChildrenMountChange,
        render
      } = _ref;
      const {
        useToast,
        useToastContainerProps,
        ...info
      } = useToasts({
        managedChildren: {
          onAfterChildLayoutEffect,
          onChildrenMountChange
        }
      });
      return o$1(ToastContext.Provider, {
        value: useToast,
        children: render(info, useToastContainerProps({}))
      });
    });
    w(function Toast(_ref2) {
      let {
        render,
        index,
        subInfo,
        timeout,
        flags,
        politeness
      } = _ref2;
      const { ...toastInfo
      } = x(ToastContext)({
        managedChild: {
          index,
          subInfo,
          flags
        },
        toast: {
          timeout,
          politeness
        }
      });
      return render(toastInfo);
    });

    function defaultRender(info, triggerProps, tooltipProps) {
      return o$1(p$1, {
        children: [o$1("div", { ...triggerProps
        }), o$1("div", { ...tooltipProps
        })]
      });
    }

    w(function TooltipU(_ref) {
      let {
        focusDelay,
        mouseoutDelay,
        mouseoverDelay,
        getDocument,
        getWindow,
        render
      } = _ref;
      const {
        useTooltipPopup,
        useTooltipTrigger,
        ...info
      } = useTooltip({
        focusDelay,
        mouseoutDelay,
        mouseoverDelay
      });
      const {
        useTooltipTriggerProps
      } = useTooltipTrigger({
        hasFocus: {
          getDocument,
          getWindow
        }
      });
      const {
        useTooltipPopupProps
      } = useTooltipPopup({
        hasFocus: {
          getDocument,
          getWindow
        }
      });
      return o$1(p$1, {
        children: (render !== null && render !== void 0 ? render : defaultRender)(info, useTooltipTriggerProps({}), useTooltipPopupProps({}))
      });
    });

    function DemoAccordion({ children, ...props }) {
        return o$1(Accordion, { ...props, render: (_info) => { return o$1("div", { id: "accordion-demo", children: children }); } });
    }
    function getDocument$9() {
        return window.document;
    }
    const DemoAccordionSection = w(function DemoAccordionSection({ index, body, heading, disabled, open }) {
        return o$1(AccordionSection, { index: index, tagButton: "button", open: open, disabled: disabled, getDocument: getDocument$9, render: defaultRenderAccordionSection({
                makePropsBody: (info) => { return { hidden: !info.accordionSection.expanded, children: body }; },
                makePropsHeading: () => { return { children: heading }; },
                tagBody: "div",
                tagHeading: "button"
            }) });
    });
    function Blurb$a() {
        return (o$1(p$1, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/accordion/", children: "In accordance with the ARIA guidelines for Accordion patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: ["Each section's header and body are linked via ID; the body is ", o$1("code", { children: "labelled-by" }), " the header and the header ", o$1("code", { children: "control" }), "s the body."] }), o$1("li", { children: "The header is a button and responds to keyboard, mouse, touch, etc. events, regardless of the element used." }), o$1("li", { children: ["If the header element is not a ", o$1("code", { children: "<button>" }), " element, it is given that ", o$1("code", { children: "role" }), "."] }), o$1("li", { children: "Up/down & Home/End keys navigate through the list, as does Tab and Shift+Tab" }), o$1("li", {})] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: o$1("li", { children: ["The ", o$1("code", { children: "render" }), " prop each ", o$1("code", { children: "AccordionSection" }), " takes must wrap the header button with a ", o$1("a", { href: "https://w3c.github.io/aria/#heading", children: "heading" }), " (e.g. ", o$1("code", { children: "h3" }), ", or ", o$1("code", { children: "<Heading>" }), "). See the default implementation for an example."] }) })] }));
    }
    function Code$a() {
        return (o$1("code", { children: `<Accordion render={...}>
    <AccordionSection index={0} render={...} />
    <AccordionSection index={1} render={...} />
    <AccordionSection index={2} render={...} />
</Accordion>` }));
    }
    function Demo$a() {
        const [count, setCount] = y(5);
        return (o$1(p$1, { children: [o$1(Blurb$a, {}), o$1(Code$a, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of accordion sections"] }), o$1(DemoAccordion, { children: o$1(p$1, { children: Array.from((function* () {
                            yield o$1(DemoAccordionSection, { index: 0, heading: "Accordion section #0", body: "Body content #0", disabled: false });
                            yield o$1(DemoAccordionSection, { index: 1, heading: "Accordion section #1", body: "Body content #1", disabled: false });
                            yield o$1(DemoAccordionSection, { index: 2, heading: "Accordion section #2 (disabled)", body: "Body content #2", disabled: true });
                            yield o$1(DemoAccordionSection, { index: 3, heading: "Accordion section #3 (forced open)", body: "Body content #3", disabled: false, open: true });
                            yield o$1(DemoAccordionSection, { index: 4, heading: "Accordion section #4 (forced closed)", body: "Body content #4", disabled: false, open: false });
                            for (let i = 5; i < count; ++i) {
                                yield o$1(DemoAccordionSection, { index: i, heading: `Accordion section #${i}`, body: `BodyContent #${i}`, disabled: false });
                            }
                        })()).slice(0, count) }) })] }));
    }

    function getDocument$8() {
        return window.document;
    }
    function Blurb$9() {
        return (o$1(p$1, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/button/", children: "In accordance with the ARIA guidelines for Button patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: ["Whether using an actual ", o$1("code", { children: "<button>" }), ", or something else like a ", o$1("code", { children: "<div>" }), ", the proper roles and event handlers will be applied."] }), o$1("li", { children: "Buttons can be toggled (pressed or unpressed)." }), o$1("li", { children: ["The button responds to keyboard, mouse, touch, etc. events, regardless of the element used.", o$1("ul", { children: [o$1("li", { children: "Double-clicks do not select text, but text is still selectable without it counting as a press/click" }), o$1("li", { children: "When Enter is pressed, the button is immediately activated" }), o$1("li", { children: "When Space is pressed, the button is activated once released" }), o$1("li", { children: "iOS Safari properly focuses the button" })] })] })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: o$1("li", { children: ["If your button contains only an icon (or other non-descriptive content, etc.), you must provide an ", o$1("code", { children: "aria-label" }), " manually stating what happens when the button is pressed."] }) })] }));
    }
    function Code$9() {
        return (o$1("code", { children: `<Button tag="button">Button</Button>
    <Button tag="div">Div</Button>` }));
    }
    function Demo$9() {
        const [pressed, setPressed] = useState(false);
        return (o$1(p$1, { children: [o$1(Blurb$9, {}), o$1(Code$9, {}), o$1(DemoButton, { disabled: false, tag: "button" }), o$1(DemoButton, { disabled: "soft", tag: "button" }), o$1(DemoButton, { disabled: "hard", tag: "button" }), o$1(DemoButton, { disabled: false, tag: "div" }), o$1(DemoButton, { disabled: "soft", tag: "div" }), o$1(DemoButton, { disabled: "hard", tag: "div" }), o$1(Button, { getDocument: getDocument$8, disabled: false, tagButton: "button", pressed: pressed, onPress: e => setPressed(e[EventDetail].pressed ?? false), render: defaultRenderButton("button", () => ({ children: `Toggle button (${pressed ? "pressed" : "unpressed"})` })) })] }));
    }
    function DemoButton({ tag, disabled }) {
        const onPress = () => { alert("Button clicked"); };
        return (o$1(Button, { getDocument: getDocument$8, tagButton: tag, onPress: onPress, render: defaultRenderButton(tag, () => ({ class: "btn", children: `${tag} ${disabled ? ` disabled (${disabled == "soft" ? "soft" : "hard"})` : ""}` })) }));
    }

    /*function DemoButton({ tag, ...props }: { tag: string } & RenderableProps<{}>) {
        return <Button disabled={disabled} onPress={onPress} pressed={} {...props} tag={tag as any}   />
    }*/
    function Blurb$8() {
        return (o$1(p$1, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/", children: "In accordance with the ARIA guidelines for Checkbox patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: "Toggles between checked and unchecked when pressed (clicked, Enter pressed, Space released, etc.)" }), o$1("li", { children: ["Can be ", o$1("code", { children: "mixed" }), " instead, though ", o$1("code", { children: "onInput" }), " will only ever be called with ", o$1("code", { children: "true" }), " or ", o$1("code", { children: "false" })] }), o$1("li", { children: ["Supports using ", o$1("code", { children: "<input>" }), "s and ", o$1("code", { children: "<label>" }), "s, as well as just plain ol' ", o$1("code", { children: "<div>" }), "s on either/both"] }), o$1("li", { children: "The checkbox and label can be sibling elements, like normal, or the label can wrap the input for a larger hit area. In all cases, the appropriate roles/event handlers will be applied to each element." }), o$1("li", { children: "When selecting the text of a checkbox's label, this does not change the checkbox's state" }), o$1("li", { children: "Double-clicking the label checks & un-checks the checkbox instead of selecting the label's text" }), o$1("li", { children: "Checkbox groups (with a tri-state parent) are a separate component/hook" })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: o$1("li", { children: ["If your checkbox does not have a visible label (achievable by by overriding the ", o$1("code", { children: "render" }), " prop and setting ", o$1("code", { children: "labelPosition" }), " to be \"separate\"), you must pass ", o$1("code", { children: "aria-label" }), " as a prop to the checkbox manually. Not providing one will print an error to the console, but it it not required by the type system."] }) })] }));
    }
    function Code$8() {
        return (o$1("code", { children: `<Checkbox checked={true} labelPosition="separate" tagInput="input" tagLabel="label">Label text</Checkbox>` }));
    }
    function Demo$8() {
        const [checked, setChecked] = useState(false);
        return (o$1(p$1, { children: [o$1(Blurb$8, {}), o$1(Code$8, {}), o$1(Button, { tagButton: "button", getDocument: getDocument$7, onPress: () => { setChecked("mixed"); }, render: defaultRenderButton("button", () => ({ children: "Change to mixed" })) }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "separate", disabled: false, tagInput: "input", tagLabel: "label" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "wrapping", disabled: false, tagInput: "input", tagLabel: "label" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "separate", disabled: false, tagInput: "div", tagLabel: "label" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "wrapping", disabled: false, tagInput: "div", tagLabel: "label" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "separate", disabled: false, tagInput: "input", tagLabel: "div" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "wrapping", disabled: false, tagInput: "input", tagLabel: "div" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "separate", disabled: false, tagInput: "div", tagLabel: "div" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "wrapping", disabled: false, tagInput: "div", tagLabel: "div" }), o$1(DemoCheckbox$1, { checked: checked, setChecked: setChecked, labelPosition: "hidden", disabled: false, tagInput: "input", tagLabel: "label" })] }));
    }
    function DemoCheckbox$1({ labelPosition, tagInput, tagLabel, disabled, checked, setChecked }) {
        //const [checked, setChecked] = useState(false);
        return (o$1("div", { style: { border: "1px solid black" }, children: [o$1(Checkbox, { getDocument: getDocument$7, disabled: disabled, checked: checked, onCheckedChange: e => setChecked(e[EventDetail].checked), labelPosition: labelPosition == "hidden" ? "separate" : labelPosition, tagInput: tagInput, tagLabel: tagLabel, render: defaultRenderCheckbox({
                        labelPosition,
                        tagInput,
                        tagLabel,
                        makeInputProps: () => ({ "aria-label": labelPosition == "hidden" ? `Hidden label (technically separate), ${tagInput} and ${tagLabel} ${checked ? "checked" : "not checked"}` : undefined, }),
                        makeLabelProps: () => ({ children: `${labelPosition}, ${tagInput} and ${tagLabel}, ${checked ? "checked" : "not checked"}` })
                    }) }), labelPosition == "hidden" && o$1("div", { children: ["(This is not a label -- the actual label is via the ", o$1("code", { children: "aria-label" }), " prop)"] })] }));
    }
    function getDocument$7() {
        return window.document;
    }

    function getDocument$6() {
        return window.document;
    }
    function DemoCheckbox({ index }) {
        const [checked, setChecked] = useState(false);
        const labelText = `Checkbox #${index}`;
        return (o$1(CheckboxGroupCheckbox, { render: defaultRenderCheckboxGroupChild({
                labelPosition: "separate",
                tagInput: "input",
                tagLabel: "label",
                makeInputProps: () => ({}),
                makeLabelProps: () => ({ children: labelText })
            }), getDocument: getDocument$6, checked: checked, index: index, disabled: false, labelPosition: "separate", text: labelText, tagInput: "input", tagLabel: "label", onCheckedChange: e => setChecked(e[EventDetail].checked) }));
    }
    function Blurb$7() {
        return (o$1(p$1, { children: [o$1("p", { children: ["Checkbox groups are an alternative to multi-select lists. There is no role of ", o$1("code", { children: "checkboxgroup" }), ", but this aims to be an ARIA-compliant implementation of a checkbox group."] }), o$1("ul", { children: [o$1("li", { children: ["All normal ", o$1("code", { children: "Checkbox" }), " functionality is supported on each individual checkbox."] }), o$1("li", { children: "The parent checkbox switches between 3 states, remembering the last state that caused it to be \"mixed\"." }), o$1("li", { children: ["The parent checkbox reacts to each child's ", o$1("code", { children: "checked" }), " prop and updates its own internal ", o$1("code", { children: "checked" }), " attribute (be aware of this if they're asyncronous, as you'll want to ensure they all resolve on the same tick with ", o$1("code", { children: "Promise.all" }), " to not clobber the user's inputs)."] }), o$1("li", { children: ["The children are treated as a composite component with list navigation; see ", o$1("code", { children: "AiraSingleSelectList" }), " for more information"] })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: [o$1("li", { children: ["It is assumed that the parent checkbox provides sufficient labelling for all the children, which how the demo example identifies these elements. If you have a separate label, you will need to wrap the children in a ", o$1("code", { children: "role=group" }), " that references that label by overriding ", o$1("code", { children: "render" }), "."] }), o$1("li", { children: ["See the caveat above for when each child's ", o$1("code", { children: "onInput" }), " takes a variable amount of time to actually update the ", o$1("code", { children: "checked" }), " prop, as it can clobber the user's last input when clicking on the parent"] })] })] }));
    }
    function Code$7() {
        return (o$1("code", { children: `` }));
    }
    function Demo$7() {
        const [count, setCount] = useState(5);
        return (o$1(p$1, { children: [o$1(Blurb$7, {}), o$1(Code$7, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of checkboxes"] }), o$1("div", { children: o$1(CheckboxGroup, { getDocument: getDocument$6, disabled: false, labelPosition: "separate", tagInput: "input", tagLabel: "label", render: defaultRenderCheckboxGroup({
                            labelPosition: "separate",
                            tagInput: "input",
                            tagLabel: "label",
                            makeInputProps: () => ({}),
                            makeLabelProps: () => ({ children: "Group checkbox parent" }),
                            children: Array.from((function* () {
                                for (let i = 0; i < count; ++i) {
                                    yield o$1("div", { children: o$1(DemoCheckbox, { index: i }, i) });
                                }
                            })())
                        }) }) })] }));
    }

    function getDocument$5() {
        return window.document;
    }
    const DemoListItem$2 = w(function DemoListItem({ index }) {
        const [selected, setSelected] = useState(false);
        const labelText = `List item #${index}${selected ? " (selected)" : ""}`;
        return (o$1(ListboxMultiItem, { getDocument: getDocument$5, selected: selected, index: index, disabled: false, text: labelText, onSelectedChange: e => { setSelected(e[EventDetail].selected); }, render: defaultRenderListboxMultiItem({ tagListItem: "li", makePropsListItem: () => ({ children: labelText }) }) }));
    });
    function Blurb$6() {
        return (o$1(p$1, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/listbox/", children: "In accordance with the ARIA guidelines for Listbox patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: ["The children are treated as a composite component with list navigation; see ", o$1("code", { children: "AiraSingleSelectList" }), " for more information"] }), o$1("li", { children: "The parent checkbox switches between 3 states, remembering the last state that caused it to be \"mixed\"." }), o$1("li", { children: ["The parent checkbox reacts to each child's ", o$1("code", { children: "checked" }), " prop and updates its own internal ", o$1("code", { children: "checked" }), " attribute (be aware of this if they're asyncronous, as you'll want to ensure they all resolve on the same tick with ", o$1("code", { children: "Promise.all" }), " to not clobber the user's inputs)."] }), o$1("li", { children: ["The children are treated as a composite component with list navigation; see ", o$1("code", { children: "AiraSingleSelectList" }), " for more information"] }), o$1("li", { children: "Grouping is supported" }), o$1("li", { children: "Sorting/reordering is supported, though not provided by default, as it's mutually exclusive with grouping." })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: [o$1("li", { children: ["It is assumed that the parent checkbox provides sufficient labelling for all the children, which how the demo example identifies these elements. If you have a separate label, you will need to wrap the children in a ", o$1("code", { children: "role=group" }), " that references that label by overriding ", o$1("code", { children: "render" }), "."] }), o$1("li", { children: ["See the caveat above for when each child's ", o$1("code", { children: "onInput" }), " takes a variable amount of time to actually update the ", o$1("code", { children: "checked" }), " prop, as it can clobber the user's last input when clicking on the parent"] })] })] }));
    }
    function Code$6() {
        return (o$1("code", { children: `` }));
    }
    function Demo$6() {
        const [count, setCount] = useState(5);
        return (o$1(p$1, { children: [o$1(Blurb$6, {}), o$1(Code$6, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of list items"] }), o$1("div", { children: o$1(ListboxMulti, { tagLabel: "label", tagList: "ul", render: defaultRenderListboxMulti({
                            tagLabel: "label", tagList: "ul", makePropsLabel: () => ({}), makePropsList: () => ({
                                children: Array.from((function* () {
                                    for (let i = 0; i < count; ++i) {
                                        yield o$1(DemoListItem$2, { index: i }, i);
                                    }
                                })())
                            })
                        }) }) })] }));
    }

    function getDocument$4() { return window.document; }
    const DemoListItem$1 = w(function DemoListItem({ index }) {
        return (o$1(ListboxSingleItem, { index: index, getDocument: getDocument$4, disabled: false, text: `List item #${index}`, render: defaultRenderListboxSingleItem({ tagListItem: "li", makePropsListItem: ({ singleSelection: { selected } }) => ({ children: `List item #${index}${selected ? " (selected)" : ""}` }) }) }));
    });
    function Blurb$5() {
        return (o$1(p$1, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/listbox/", children: "In accordance with the ARIA guidelines for Listbox patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: ["In terms of keyboard navigation and tabbing through elements, a Listbox is considered a ", o$1("strong", { children: "single" }), " tab stop; in other words, no matter how many list items there are in a Listbox, it only takes one press of the Tab button to go through it.", o$1("ul", { children: [o$1("li", { children: "When a Listbox is tabbed into, the most recently selected item is given focus" }), o$1("li", { children: "Pressing Tab again navigates out of the listbox; no other list items are tabbable other than the one currently designated." }), o$1("li", { children: "Pressing the arrow keys navigates through the Listbox one item at a time" }), o$1("li", { children: "Pressing the Home/End keys move focus to the first/last items respectively" }), o$1("li", { children: "Typing any sequence of text starts typeahead that navigates to the next item that matches what's being typed" }), o$1("li", { children: "Focus & selection management is as optimized as possible; only two children re-render at a time when focus or selection changes" }), o$1("li", { children: "These apply generally to all composite components with a variable number of children (Tab Lists, Radio Groups, Multi-Select Listboxes etc.)" })] })] }), o$1("li", { children: ["Rather than each individual list item knowing whether it is selected or not (as with multi-select lists), here the parent knows the ", o$1("code", { children: "selectedIndex" }), " and simply notifies the (max two) relevant children any time it changes."] }), o$1("li", { children: "Grouping is supported" }), o$1("li", { children: "Sorting/reordering is supported, though not provided by default, as it's mutually exclusive with grouping." })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: o$1("li", { children: "Listboxes do not support interactive content within them (e.g. a dropdown menu), as ARIA specifies that this is a different pattern." }) })] }));
    }
    function Code$5() {
        return (o$1("code", { children: `` }));
    }
    function Demo$5() {
        const [selectedIndex, setSelectedIndex] = useState(null);
        const [count, setCount] = useState(5);
        return (o$1(p$1, { children: [o$1(Blurb$5, {}), o$1(Code$5, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of list items"] }), o$1("div", { children: o$1(ListboxSingle, { render: defaultRenderListboxSingle({
                            tagLabel: "label", tagList: "ol", makePropsLabel: () => ({}), makePropsList: () => ({
                                children: o$1(p$1, { children: Array.from((function* () {
                                        for (let i = 0; i < count; ++i) {
                                            yield o$1(DemoListItem$1, { index: i }, i);
                                        }
                                    })()) })
                            })
                        }), selectionMode: "activation", tagLabel: "label", tagList: "ol", selectedIndex: selectedIndex, onSelect: e => setSelectedIndex(e[EventDetail].selectedIndex) }) })] }));
    }

    function DemoListItem({ index }) {
        return (o$1(MenuItem, { index: index, text: `List item #${index}`, render: defaultRenderMenuItem({ tagMenuItem: "li", makePropsMenuItem: () => ({ children: `Menu item #${index}` }) }) }));
    }
    function getDocument$3() { return window.document; }
    function Blurb$4() {
        return (o$1(p$1, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/listbox/", children: "In accordance with the ARIA guidelines for Listbox patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: ["The children are treated as a composite component with list navigation; see ", o$1("code", { children: "AiraSingleSelectList" }), " for more information"] }), o$1("li", { children: "When opened, the menu will focus the first element within it. When closed (by pressing escape, pressing the button again, or tabbing out of the menu), the button that opened it will have focus restored to it." }), o$1("li", { children: "When the menu is closed because another element on the page was focused instead, focus will not be modified." })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: o$1("li", { children: "TODO" }) })] }));
    }
    function Code$4() {
        return (o$1("code", { children: `` }));
    }
    function Demo$4() {
        const [count, setCount] = useState(5);
        const [open, setOpen] = useState(false);
        return (o$1(p$1, { children: [o$1(Blurb$4, {}), o$1(Code$4, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of menu items"] }), o$1("div", { children: o$1(Menu, { getDocument: getDocument$3, onOpen: () => setOpen(true), onClose: () => setOpen(false), open: open, openDirection: "down", render: defaultRenderMenu({
                            tagButton: "button",
                            tagMenu: "ul",
                            tagSentinel: "div",
                            tagSurface: "div",
                            portalId: "portal",
                            makePropsButton: () => ({ children: "Open menu" + (open ? " (open)" : " (closed)") }),
                            makePropsMenu: () => ({
                                children: o$1(p$1, { children: Array.from((function* () {
                                        for (let i = 0; i < count; ++i) {
                                            yield o$1("div", { children: o$1(DemoListItem, { index: i }, i) });
                                        }
                                    })()) })
                            }),
                            makePropsSurface: () => ({ style: { display: !open ? "none" : undefined } }),
                            makePropsSentinel: () => ({}),
                        }) }) })] }));
    }

    function getDocument$2() {
        return window.document;
    }
    const DemoRadioButton = w(function DemoRadioButton({ index }) {
        const value = `Radio button #${index}`;
        return (o$1(Radio, { index: index, getDocument: getDocument$2, disabled: false, labelPosition: "separate", text: value, value: index, tagInput: "input", tagLabel: "label", render: defaultRenderRadio({
                labelPosition: "separate",
                tagInput: "input",
                tagLabel: "label",
                makeInputProps: () => ({ name: "radio-demo" }),
                makeLabelProps: () => ({ children: value })
            }) }));
    });
    function Blurb$3() {
        return (o$1(p$1, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/radiobutton/", children: "In accordance with the ARIA guidelines for Radio Button patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: ["The children are treated as a composite component with list navigation; see ", o$1("code", { children: "AiraSingleSelectList" }), " for more information"] }), o$1("li", { children: "The input & label support the same text-selection affordances as Checkboxes (labels can be selected, but double-clicking doesn't select the text and selecting text doesn't count as an input)" }), o$1("li", { children: "Selection state is handled by the parent; instead of specifying whether any given radio button is checked or not, the parent notifies each child of the necessary changes." })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: [o$1("li", { children: ["If your checkbox does not have a visible label (achievable by by overriding the ", o$1("code", { children: "render" }), " prop and setting ", o$1("code", { children: "labelPosition" }), " to be \"separate\"), you must pass ", o$1("code", { children: "aria-label" }), " as a prop to the checkbox manually. Not providing one will print an error to the console, but it it not required by the type system."] }), o$1("li", { children: ["The above also applies to the radio group as a whole; ARIA requires that all Radio Buttons be contained within an element with a specific role which is labelled either by an element (handled for you) or ", o$1("code", { children: "aria-label" }), " (specified by you manually on the input)."] })] })] }));
    }
    function Code$3() {
        return (o$1("code", { children: `` }));
    }
    function Demo$3() {
        const [selectedIndex, setSelectedIndex] = useState(null);
        const [count, setCount] = useState(5);
        return (o$1(p$1, { children: [o$1(Blurb$3, {}), o$1(Code$3, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of radio buttons"] }), o$1("div", { children: o$1(RadioGroup, { name: "radio-demo", onSelectedValueChange: e => setSelectedIndex(e[EventDetail].selectedValue ?? 0), selectedValue: selectedIndex, tagGroupLabel: "label", tagGroup: "div", render: defaultRenderRadioGroup({
                            tagGroup: "div",
                            tagLabel: "label",
                            makePropsGroup: () => ({
                                children: o$1(p$1, { children: Array.from((function* () {
                                        for (let i = 0; i < count; ++i) {
                                            yield o$1(DemoRadioButton, { index: i }, i);
                                        }
                                    })()) })
                            }),
                            makePropsLabel: (info) => ({ children: "Radio group example " + "(" + info.radioGroup.selectedIndex?.toString() + ")" })
                        }) }) })] }));
    }

    function DemoSliderThumb({ index }) {
        const [value, setValue] = useState(0);
        return (o$1(SliderThumb, { index: index, tag: "input", label: `Slider thumb #${index}`, value: value, onValueChange: e => setValue(e[EventDetail].value), min: 0, max: 10, render: defaultRenderSliderThumb({ tagThumb: "input", makePropsThumb: () => ({}) }) }));
    }
    function Blurb$2() {
        return (o$1(p$1, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/listbox/", children: "In accordance with the ARIA guidelines for Listbox patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: ["The children are treated as a composite component with list navigation; see ", o$1("code", { children: "AiraSingleSelectList" }), " for more information"] }), o$1("li", { children: "When opened, the menu will focus the first element within it. When closed (by pressing escape, pressing the button again, or tabbing out of the menu), the button that opened it will have focus restored to it." }), o$1("li", { children: "When the menu is closed because another element on the page was focused instead, focus will not be modified." })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: o$1("li", { children: "TODO" }) })] }));
    }
    function Code$2() {
        return (o$1("code", { children: `` }));
    }
    function Demo$2() {
        const [count, setCount] = useState(5);
        useState(false);
        return (o$1(p$1, { children: [o$1(Blurb$2, {}), o$1(Code$2, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of slider thumbs"] }), o$1("div", { children: o$1(Slider, { min: 0, max: 10, children: o$1(p$1, { children: Array.from((function* () {
                                for (let i = 0; i < count; ++i) {
                                    yield o$1("div", { children: o$1(DemoSliderThumb, { index: i }, i) });
                                }
                            })()) }) }) })] }));
    }

    function getDocument$1() { return window.document; }
    function Blurb$1() {
        return (o$1(p$1, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/dialogmodal/", children: "In accordance with the ARIA guidelines for Modal Dialog patterns," }), " this widget supports the following:"] }), o$1("ul", { children: [o$1("li", { children: "Dialogs block all other elements on the page from receiving focus/interaction and being perceivable to screen readers." }), o$1("li", { children: "Dialogs can be dismissed by pressing Escape or clicking the element designated as the backdrop, both of which can be cancelled/ignored if you need" }), o$1("li", { children: "When opened, the dialog will focus its title or body content as appropriate, however read below under Things Not Handled for caveats." }), o$1("li", { children: "When closed for any reason, the element that was responsible for opening the dialog will be focused." })] }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: [o$1("li", { children: ["By default, when opened, a dialog will focus its body content or title content depending on ", o$1("code", { children: "bodyIsOnlySemantic" }), ", which indicates that the dialog's body contains no interactive elements. This may not be suitable for all situations."] }), o$1("li", { children: ["It is ", o$1("em", { children: "hightly" }), " recommended to override ", o$1("code", { children: "focusSelf" }), " for all dialogs you create, and have it focus whatever element makes the most sense for your particular dialog.", o$1("ul", { children: [o$1("li", { children: "Dialogs that act like a form should focus the first interactive element" }), o$1("li", { children: "Dialogs that perform destructive actions should focus the \"Cancel\" button" }), o$1("li", { children: "In some cases, it's best to focus the first paragraph of the body." })] }), "In all cases, consider that the first focused element will both be how keyboard users interact with the dialog, but also the first thing a screen reader will read aloud."] })] })] }));
    }
    function Code$1() {
        return (o$1("code", { children: `` }));
    }
    function Demo$1() {
        const [open, setOpen] = useState(false);
        return (o$1(p$1, { children: [o$1(Blurb$1, {}), o$1(Code$1, {}), o$1("div", { children: [o$1(Button, { tagButton: "button", getDocument: getDocument$1, onPress: () => setOpen(true), render: defaultRenderButton("button", () => ({ children: "Open dialog " + (open ? "(open)" : "(closed)") })) }), o$1(Dialog, { getDocument: getDocument$1, onClose: () => setOpen(false), open: open, bodyIsOnlySemantic: true, render: defaultRenderDialog({
                                portalId: "portal",
                                makePropsBackdrop: () => ({}),
                                makePropsFocusContainer: () => ({}),
                                makePropsBody: () => ({ children: "Dialog body" }),
                                makePropsDialog: () => ({ style: { display: !open ? "none" : undefined } }),
                                makePropsTitle: () => ({ children: "Dialog title" }),
                                tagBackdrop: "div",
                                tagBody: "div",
                                tagDialog: "div",
                                tagTitle: "div",
                                tagFocusContainer: "div"
                            }) })] })] }));
    }

    function getDocument() { return window.document; }
    function Blurb() {
        return (o$1(p$1, { children: [o$1("p", { children: [o$1("a", { href: "https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/", children: "In accordance with the ARIA guidelines for Tab and Tab Panel patterns," }), " this widget supports the following:"] }), o$1("ul", { children: o$1("li", { children: ["The tabs are treated as a composite component with list navigation; see ", o$1("code", { children: "AiraSingleSelectList" }), " for more information"] }) }), o$1("p", { children: o$1("strong", { children: ["Things ", o$1("em", { children: "not" }), " handled:"] }) }), o$1("ul", { children: o$1("li", { children: "TODO" }) })] }));
    }
    function Code() {
        return (o$1("code", { children: `` }));
    }
    function Demo() {
        const [count, setCount] = useState(5);
        const [selectedIndex, setSelectedIndex] = useState(0);
        return (o$1(p$1, { children: [o$1(Blurb, {}), o$1(Code, {}), o$1("label", { children: [o$1("input", { type: "number", min: 0, value: count, onInput: e => setCount(e.currentTarget.valueAsNumber) }), " # of tabs"] }), o$1("div", { children: o$1(Tabs, { selectedIndex: selectedIndex, selectionMode: "focus", onSelectedIndexChange: e => setSelectedIndex(e[EventDetail].selectedIndex), render: defaultRenderTabs({
                            panels: Array.from((function* () {
                                for (let i = 0; i < count; ++i) {
                                    yield o$1(DemoTabPanel, { i: i });
                                }
                            })()),
                            tagLabel: "label",
                            tagList: "ul",
                            makePropsLabel: () => ({ children: "Tabs example" }),
                            makePropsList: () => ({
                                children: o$1(p$1, { children: Array.from((function* () {
                                        for (let i = 0; i < count; ++i) {
                                            yield o$1(DemoTab, { i: i });
                                        }
                                    })()) })
                            })
                        }) }) })] }));
    }
    const DemoTab = w(function DemoTab({ i }) {
        const label = `Tab #${i}`;
        return o$1(Tab, { index: i, getDocument: getDocument, render: defaultRenderTab({ tagTab: "li", makePropsTab: () => ({ children: label }) }), text: label }, i);
    });
    const DemoTabPanel = w(function DemoTabPanel({ i }) {
        const label = `Tab panel #${i}`;
        return o$1(TabPanel, { index: i, render: defaultRenderTabPanel({ tagTabPanel: "div", makePropsTabPanel: ({ tabPanel: { visible } }) => ({ hidden: !visible, children: label }) }) }, i);
    });

    //import { options } from "preact";
    //options.debounceRendering = queueMicrotask;
    //const RandomWords = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.".split(" ");
    const Component = () => {
        return (o$1(Heading, { heading: "Demos", children: [o$1(Heading, { heading: "Tabs", children: o$1(Demo, {}) }), o$1(Heading, { heading: "Dialog", children: o$1(Demo$1, {}) }), o$1(Heading, { heading: "Slider", children: o$1(Demo$2, {}) }), o$1(Heading, { heading: "Single-select Listbox", children: o$1(Demo$5, {}) }), o$1(Heading, { heading: "Accordion", children: o$1(Demo$a, {}) }), o$1(Heading, { heading: "Button", children: o$1(Demo$9, {}) }), o$1(Heading, { heading: "Checkbox", children: o$1(Demo$8, {}) }), o$1(Heading, { heading: "Checkbox Group", children: o$1(Demo$7, {}) }), o$1(Heading, { heading: "Multi-select Listbox", children: o$1(Demo$6, {}) }), o$1(Heading, { heading: "Menu", children: o$1(Demo$4, {}) }), o$1(Heading, { heading: "Radio", children: o$1(Demo$3, {}) })] }));
    };
    requestAnimationFrame(() => {
        P$1(o$1(Component, {}), document.getElementById("root"));
    });

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvcHJvcHMudHMiLCIuLi9zcmMvY29tcG9uZW50L2hlYWRpbmcudHN4IiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvc3JjL3VzZS1wYXNzaXZlLXN0YXRlLnRzeCIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtcHJvcC1oZWxwZXJzL3NyYy91c2UtYWN0aXZlLWVsZW1lbnQudHN4IiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvc3JjL3VzZS1iZWZvcmUtbGF5b3V0LWVmZmVjdC50c3giLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy9zcmMvdXNlLXN0YWJsZS1nZXR0ZXIudHN4IiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvc3JjL3VzZS1zdGFibGUtY2FsbGJhY2sudHN4IiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvc3JjL3VzZS1hbmltYXRpb24tZnJhbWUudHN4IiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2ZyZWVHbG9iYWwuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yb290LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3ltYm9sLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UmF3VGFnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0VGFnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdExpa2UuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy9zcmMvdXNlLXN0YXRlLnRzeCIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtcHJvcC1oZWxwZXJzL3NyYy91c2UtY2hpbGQtbWFuYWdlci50c3giLCIuLi9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubS5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtcHJvcC1oZWxwZXJzL3NyYy91c2UtZG9jdW1lbnQtY2xhc3MudHN4IiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvc3JjL3VzZS1tZXJnZWQtY2hpbGRyZW4udHN4IiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvc3JjL3VzZS1tZXJnZWQtY2xhc3Nlcy50c3giLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy9zcmMvdXNlLW1lcmdlZC1yZWZzLnRzeCIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtcHJvcC1oZWxwZXJzL3NyYy91c2UtbWVyZ2VkLXN0eWxlcy50c3giLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy9zcmMvdXNlLW1lcmdlZC1wcm9wcy50c3giLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy9zcmMvdXNlLXJlZi1lbGVtZW50LnRzeCIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtcHJvcC1oZWxwZXJzL3NyYy91c2UtZXZlbnQtaGFuZGxlci50c3giLCIuLi9ub2RlX21vZHVsZXMvdGFiYmFibGUvc3JjL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3dpY2ctaW5lcnQvZGlzdC9pbmVydC5qcyIsIi4uL25vZGVfbW9kdWxlcy9ibG9ja2luZy1lbGVtZW50cy9zcmMvYmxvY2tpbmctZWxlbWVudHMudHMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy9zcmMvdXNlLWJsb2NraW5nLWVsZW1lbnQudHN4IiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvc3JjL3VzZS1mb2N1cy10cmFwLnRzeCIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtcHJvcC1oZWxwZXJzL3NyYy91c2UtZm9yY2UtdXBkYXRlLnRzeCIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtcHJvcC1oZWxwZXJzL3NyYy91c2UtaGFzLWZvY3VzLnRzeCIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtcHJvcC1oZWxwZXJzL3NyYy91c2UtcHJlc3MudHN4IiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvc3JjL3VzZS1sb2dpY2FsLWRpcmVjdGlvbi50c3giLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy9zcmMvdXNlLXRpbWVvdXQudHN4IiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvc3JjL3VzZS1rZXlib2FyZC1uYXZpZ2F0aW9uLnRzeCIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtcHJvcC1oZWxwZXJzL3NyYy91c2Utcm92aW5nLXRhYmluZGV4LnRzeCIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlBcnJheS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VSYW5kb20uanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zaHVmZmxlU2VsZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5U2h1ZmZsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5TWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVZhbHVlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VUaW1lcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcmd1bWVudHMuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3N0dWJGYWxzZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNCdWZmZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0xlbmd0aC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVW5hcnkuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19ub2RlVXRpbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNUeXBlZEFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlMaWtlS2V5cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzUHJvdG90eXBlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb3ZlckFyZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25hdGl2ZUtleXMuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlS2V5cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNGdW5jdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcnJheUxpa2UuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2tleXMuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3ZhbHVlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VTaHVmZmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9zaHVmZmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvc3JjL3VzZS1zb3J0YWJsZS1jaGlsZHJlbi50c3giLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy9zcmMvdXNlLWxpc3QtbmF2aWdhdGlvbi50c3giLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy9zcmMvdXNlLWdyaWQtbmF2aWdhdGlvbi50c3giLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy9zcmMvdXNlLXJhbmRvbS1pZC50c3giLCIuLi9zcmMvdXNlLWJ1dHRvbi50cyIsIi4uL3NyYy91c2UtYWNjb3JkaW9uLnRzeCIsIi4uL3NyYy91c2UtbGFiZWwudHMiLCIuLi9zcmMvdXNlLWNoZWNrYm94LWdyb3VwLnRzIiwiLi4vc3JjL3VzZS1tb2RhbC50cyIsIi4uL3NyYy91c2UtZHJhd2VyLnRzIiwiLi4vc3JjL3VzZS1saXN0Ym94LXNpbmdsZS50cyIsIi4uL3NyYy91c2UtbGlzdGJveC1tdWx0aS50cyIsIi4uL3NyYy91c2UtbWVudS50cyIsIi4uL3NyYy91c2UtdGFicy50cyIsIi4uL3NyYy91c2UtdG9vbHRpcC50cyIsIi4uL3NyYy91c2UtcmFkaW8tZ3JvdXAudHN4IiwiLi4vc3JjL3VzZS10b2FzdHMudHN4IiwiLi4vc3JjL3VzZS10YWJsZS50c3giLCIuLi9zcmMvY29tcG9uZW50L2FjY29yZGlvbi50c3giLCIuLi9zcmMvY29tcG9uZW50L2NoZWNrYm94LnRzeCIsIi4uL3NyYy9jb21wb25lbnQvY2hlY2tib3gtZ3JvdXAudHN4IiwiLi4vc3JjL2NvbXBvbmVudC9kaWFsb2cudHN4IiwiLi4vc3JjL2NvbXBvbmVudC9saXN0Ym94LXNpbmdsZS50c3giLCIuLi9zcmMvY29tcG9uZW50L21lbnUudHN4IiwiLi4vc3JjL2NvbXBvbmVudC9yYWRpby1ncm91cC50c3giLCIuLi9zcmMvY29tcG9uZW50L3NsaWRlci50c3giLCIuLi9zcmMvY29tcG9uZW50L3RhYmxlLnRzeCIsIi4uL3NyYy9jb21wb25lbnQvdGFicy50c3giLCIuLi9zcmMvY29tcG9uZW50L3Rvb2x0aXAudHN4IiwiZGVtb3MvYWNjb3JkaW9uLnRzeCIsImRlbW9zL2J1dHRvbi50c3giLCJkZW1vcy9jaGVja2JveC50c3giLCJkZW1vcy9jaGVja2JveC1ncm91cC50c3giLCJkZW1vcy9saXN0Ym94LW11bHRpLnRzeCIsImRlbW9zL2xpc3Rib3gtc2luZ2xlLnRzeCIsImRlbW9zL21lbnUudHN4IiwiZGVtb3MvcmFkaW8udHN4IiwiZGVtb3Mvc2xpZGVyLnRzeCIsImRlbW9zL2RpYWxvZy50c3giLCJkZW1vcy90YWJzLnRzeCIsImluZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoLCBSZWYgfSBmcm9tIFwicHJlYWN0XCI7XHJcblxyXG5leHBvcnQgdHlwZSBSZWZGcm9tVGFnPFQgZXh0ZW5kcyBrZXlvZiBoLkpTWC5JbnRyaW5zaWNFbGVtZW50cz4gPSBOb25OdWxsYWJsZTxoLkpTWC5JbnRyaW5zaWNFbGVtZW50c1tUXVtcInJlZlwiXT4gJiBSZWY8YW55PjtcclxuZXhwb3J0IHR5cGUgRWxlbWVudEZyb21SZWY8UiBleHRlbmRzIFJlZjxhbnk+PiA9IFIgZXh0ZW5kcyBSZWY8aW5mZXIgRT4gPyBFIDogRXZlbnRUYXJnZXQ7XHJcbmV4cG9ydCB0eXBlIEVsZW1lbnRGcm9tVGFnPFQgZXh0ZW5kcyBrZXlvZiBoLkpTWC5JbnRyaW5zaWNFbGVtZW50cz4gPSBFbGVtZW50RnJvbVJlZjxSZWZGcm9tVGFnPFQ+PjtcclxuXHJcbmV4cG9ydCB0eXBlIEVsZW1lbnRUb1RhZzxFIGV4dGVuZHMgRXZlbnRUYXJnZXQ+ID0ga2V5b2YgU3ViVHlwZTxIVE1MRWxlbWVudFRhZ05hbWVNYXAsIEU+O1xyXG50eXBlIFN1YlR5cGU8QmFzZSwgQ29uZGl0aW9uPiA9IFBpY2s8QmFzZSwge1xyXG4gICAgW0tleSBpbiBrZXlvZiBCYXNlXTogQmFzZVtLZXldIGV4dGVuZHMgQ29uZGl0aW9uID8gS2V5IDogbmV2ZXJcclxufVtrZXlvZiBCYXNlXT47XHJcblxyXG4vKipcclxuICogRm9yIHRpbWVzIHdoZW4gbW9yZSB0aGFuIGp1c3QgdGhlIGFic3RyYWN0IGVsZW1lbnQgdHlwZSBpcyBuZWVkZWQsXHJcbiAqIGJ1dCB0aGUgYWN0dWFsLCBjb25jcmV0ZSwgaW1wbGVtZW50YXRpb24tYWZmZWN0aW5nIFwiZGl2XCIgc3RyaW5nIHR5cGUuXHJcbiAqIFxyXG4gKiBUT0RPOiBTaG91bGQgdGhpcyBiZSB0aGUgc3RhbmRhcmQgZm9yIGFsbCB0aGUgbm9uLUFSSUEgaG9va3M/XHJcbiAqIFRoZXkgKm5ldmVyKiBjYXJlIGFib3V0IHRoZSBzcGVjaWZpYyB0eXBlIGZvciB0aGUgaW1wbGVtZW50YXRpb24sXHJcbiAqIGp1c3QgZm9yIHR5cGluZywgc28gaXQgd291bGRuJ3QgYmUgbmVjZXNzYXJ5LCBcclxuICogYnV0IGl0IHdvdWxkIGJlIGNvbnNpc3RlbnQgd2l0aCB0aGVzZSBBUklBIGhvb2tzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBUYWdTZW5zaXRpdmVQcm9wczxFIGV4dGVuZHMgRXZlbnRUYXJnZXQ+IHtcclxuICAgIHRhZzogRWxlbWVudFRvVGFnPEU+O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgRXZlbnREZXRhaWwgPSBTeW1ib2woXCJldmVudC1kZXRhaWxcIik7XHJcbmV4cG9ydCB0eXBlIEV2ZW50RGV0YWlsID0gdHlwZW9mIEV2ZW50RGV0YWlsO1xyXG5leHBvcnQgdHlwZSBFbmhhbmNlZEV2ZW50PFRhcmdldCBleHRlbmRzIEV2ZW50VGFyZ2V0LCBUeXBlZEV2ZW50IGV4dGVuZHMgRXZlbnQsIERldGFpbD4gPSBoLkpTWC5UYXJnZXRlZEV2ZW50PFRhcmdldCwgVHlwZWRFdmVudD4gJiB7XHJcbiAgICBbRXZlbnREZXRhaWxdOiBEZXRhaWw7XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVuaGFuY2VFdmVudDxFIGV4dGVuZHMgRXZlbnRUYXJnZXQsIFR5cGVkRXZlbnQgZXh0ZW5kcyBFdmVudCwgRGV0YWlsIGV4dGVuZHMgb2JqZWN0PihlOiBUeXBlZEV2ZW50IHwgaC5KU1guVGFyZ2V0ZWRFdmVudDxFLCBUeXBlZEV2ZW50PiwgZGV0YWlsOiBEZXRhaWwpOiBFbmhhbmNlZEV2ZW50PEUsIFR5cGVkRXZlbnQsIERldGFpbD4ge1xyXG4gICAgY29uc3QgZXZlbnQgPSBlIGFzIHVua25vd24gYXMgRW5oYW5jZWRFdmVudDxFLCBUeXBlZEV2ZW50LCBEZXRhaWw+O1xyXG4gICAgZXZlbnRbRXZlbnREZXRhaWxdID0gZGV0YWlsO1xyXG4gICAgcmV0dXJuIGV2ZW50O1xyXG59XHJcblxyXG5cclxuY29uc3QgYWxyZWFkeVdhcm5lZCA9IG5ldyBTZXQ8c3RyaW5nPigpO1xyXG5cclxudHlwZSBXT08gPSBzdHJpbmcgfCBudW1iZXIgfCBudWxsIHwgYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB3YXJuT25PdmVyd3JpdGU8VCBleHRlbmRzIFdPTz4oY29tcG9uZW50TmFtZTogc3RyaW5nLCBwcm9wTmFtZTogc3RyaW5nLCBwcm9wVmFsdWU6IFdPTywgbmV3VmFsdWU6IFQpOiBUIHtcclxuICAgIGNvbnN0IGtleSA9IGAke2NvbXBvbmVudE5hbWV9OyR7cHJvcE5hbWV9YDtcclxuICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCkge1xyXG4gICAgICAgIGlmICghYWxyZWFkeVdhcm5lZC5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICBhbHJlYWR5V2FybmVkLmFkZChrZXkpO1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFRoZSAke3Byb3BOYW1lfSBhdHRyaWJ1dGUgb24gJHtjb21wb25lbnROYW1lfSB3YXMgZ2l2ZW4gYSB2YWx1ZSBvZiAke3Byb3BWYWx1ZX0gYnV0IGlzIGJlaW5nIG92ZXJ3cml0dGVuIHRvICR7bmV3VmFsdWV9IGZvciBjb25mb3JtYW5jZS4gQ29uc2lkZXIgcmVtb3ZpbmcgaXQgYmVmb3JlIHBhc3NpbmcgdGhvc2UgcHJvcHMgdG8gJHtjb21wb25lbnROYW1lfS5gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xyXG59XHJcblxyXG5sZXQgZGVidWcgPSB0cnVlO1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0RGVidWdMb2dnaW5nKGxvZ2dpbmc6IGJvb2xlYW4pIHtcclxuICAgIGRlYnVnID0gbG9nZ2luZztcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgRGVidWdMb2dUeXBlcyA9XHJcbiAgICBcInVzZUFjY29yZGlhblwiIHwgXCJ1c2VBY2NvcmRpYW5TZWN0aW9uXCIgfFxyXG4gICAgXCJ1c2VCdXR0b25cIiB8XHJcbiAgICBcInVzZUNoZWNrYm94XCIgfFxyXG4gICAgXCJ1c2VDaGVja2JveEdyb3VwXCIgfCBcInVzZUNoZWNrYm94R3JvdXBQYXJlbnRcIiB8IFwidXNlQ2hlY2tib3hHcm91cENoaWxkXCIgfFxyXG4gICAgXCJ1c2VEaWFsb2dcIiB8IFwidXNlRHJhd2VyXCIgfFxyXG4gICAgXCJ1c2VMaXN0Ym94TXVsdGlcIiB8IFwidXNlTGlzdGJveE11bHRpSXRlbVwiIHxcclxuICAgIFwidXNlTGlzdGJveFNpbmdsZVwiIHwgXCJ1c2VMaXN0Ym94U2luZ2xlSXRlbVwiIHxcclxuICAgIFwidXNlTWVudVwiIHwgXCJ1c2VNZW51U3VyZmFjZVwiIHwgXCJ1c2VNZW51SXRlbVwiIHwgXCJ1c2VGb2N1c1NlbnRpbmVsXCIgfCBcInVzZU1lbnVTdXJmYWNlU2VudGluZWxcIiB8XHJcbiAgICBcInVzZVJhZGlvR3JvdXBcIiB8IFwidXNlUmFkaW9cIiB8XHJcbiAgICBcInVzZVNsaWRlclwiIHwgXCJ1c2VTbGlkZXJUaHVtYlwiIHxcclxuICAgIFwidXNlVGFibGVcIiB8IFwidXNlVGFibGVSb3dcIiB8IFwidXNlVGFibGVDZWxsXCIgfCBcInVzZVRhYmxlQm9keVwiIHxcclxuICAgIFwidXNlVGFic1wiIHwgXCJ1c2VUYWJMaXN0XCIgfCBcInVzZVRhYlwiIHwgXCJ1c2VUYWJQYW5lbFwiIHxcclxuICAgIFwidXNlVG9hc3RzXCIgfCBcInVzZVRvYXN0XCIgfFxyXG4gICAgXCJ1c2VUb29sdGlwXCIgfCBcInVzZVRvb2x0aXBUb29sdGlwXCIgfCBcInVzZVRvb2x0aXBUcmlnZ2VyXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVidWdMb2cod2hvOiBEZWJ1Z0xvZ1R5cGVzLCAuLi5hcmdzOiBQYXJhbWV0ZXJzPCh0eXBlb2YgY29uc29sZSlbXCJsb2dcIl0+KSB7XHJcbiAgICBpZiAoZGVidWcpXHJcbiAgICAgICAgY29uc29sZS5kZWJ1Zyh3aG8gKyBcIjpcIiwgLi4uYXJncyk7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFByb3BNb2RpZmllcjxUIGV4dGVuZHMgRXZlbnRUYXJnZXQ+ID0gKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxUPikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8VD47XHJcbiIsImltcG9ydCB7IENvbXBvbmVudENoaWxkcmVuLCBjcmVhdGVDb250ZXh0LCBjcmVhdGVFbGVtZW50LCBoIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyBtZW1vIH0gZnJvbSBcInByZWFjdC9jb21wYXRcIjtcclxuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgd2Fybk9uT3ZlcndyaXRlIH0gZnJvbSBcIi4uL3Byb3BzXCI7XHJcblxyXG5jb25zdCBIZWFkaW5nTGV2ZWxDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgwKTtcclxuXHJcbmV4cG9ydCBjb25zdCBIZWFkaW5nID0gbWVtbyhmdW5jdGlvbiBIZWFkaW5nKHsgY2hpbGRyZW4sIGhlYWRpbmcsIC4uLnByb3BzIH06IHsgaGVhZGluZzogQ29tcG9uZW50Q2hpbGRyZW4gfSAmIGguSlNYLkhUTUxBdHRyaWJ1dGVzPEhUTUxIZWFkaW5nRWxlbWVudD4pIHtcclxuICAgIGNvbnN0IGhlYWRpbmdMZXZlbEJlZm9yZVVzID0gdXNlQ29udGV4dChIZWFkaW5nTGV2ZWxDb250ZXh0KTtcclxuICAgIGNvbnN0IG5ld0hlYWRpbmdMZXZlbCA9IGhlYWRpbmdMZXZlbEJlZm9yZVVzICsgMTtcclxuICAgIGxldCB0YWc6IHN0cmluZztcclxuICAgIGlmIChuZXdIZWFkaW5nTGV2ZWwgPD0gNikge1xyXG4gICAgICAgIHRhZyA9IGBoJHtuZXdIZWFkaW5nTGV2ZWx9YDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRhZyA9ICdkaXYnO1xyXG4gICAgICAgIHByb3BzW1wiYXJpYS1sZXZlbFwiXSA9IHdhcm5Pbk92ZXJ3cml0ZShcIkhlYWRpbmdcIiwgXCJhcmlhLWxldmVsXCIsIHByb3BzW1wiYXJpYS1sZXZlbFwiXSwgYCR7bmV3SGVhZGluZ0xldmVsfWApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPEhlYWRpbmdSZXNldCBuZXdMZXZlbD17aGVhZGluZ0xldmVsQmVmb3JlVXMgKyAxfT5cclxuICAgICAgICAgICAgICAgIHtjcmVhdGVFbGVtZW50KHRhZyBhcyBhbnksIHByb3BzLCBoZWFkaW5nKX1cclxuICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICAgICAgPC9IZWFkaW5nUmVzZXQ+XHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3QgSGVhZGluZ1Jlc2V0ID0gbWVtbyhmdW5jdGlvbiBIZWFkaW5nUmVzZXQoeyBuZXdMZXZlbCwgY2hpbGRyZW4gfTogeyBuZXdMZXZlbDogbnVtYmVyLCBjaGlsZHJlbjogQ29tcG9uZW50Q2hpbGRyZW4gfSkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8SGVhZGluZ0xldmVsQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17bmV3TGV2ZWx9PlxyXG4gICAgICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgICAgPC9IZWFkaW5nTGV2ZWxDb250ZXh0LlByb3ZpZGVyPlxyXG4gICAgKVxyXG59KVxyXG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTGF5b3V0RWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5pbXBvcnQgeyBvcHRpb25zIH0gZnJvbSBcInByZWFjdFwiXG5cbmV4cG9ydCB0eXBlIFBhc3NpdmVTdGF0ZVVwZGF0ZXI8Uz4gPSAodmFsdWU6IFMgfCAoKHByZXZTdGF0ZTogUyB8IHVuZGVmaW5lZCkgPT4gUykpID0+IHZvaWQ7XG5leHBvcnQgdHlwZSBPblBhc3NpdmVTdGF0ZUNoYW5nZTxUPiA9ICgodmFsdWU6IFQsIHByZXZWYWx1ZTogVCB8IHVuZGVmaW5lZCkgPT4gKHZvaWQgfCAoKCkgPT4gdm9pZCkpKTtcblxuLyoqXG4gKiBEZWJ1ZyBob29rLlxuICogXG4gKiBHaXZlbiBhIHZhbHVlIG9yIHNldCBvZiB2YWx1ZXMsIGVtaXRzIGEgY29uc29sZSBlcnJvciBpZiBhbnkgb2YgdGhlbSBjaGFuZ2UgZnJvbSBvbmUgcmVuZGVyIHRvIHRoZSBuZXh0LlxuICogXG4gKiBFdmVudHVhbGx5LCB3aGVuIHVzZUV2ZW50IGxhbmRzLCB3ZSBob3BlZnVsbHkgd29uJ3QgbmVlZCB0aGlzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRW5zdXJlU3RhYmlsaXR5PFQgZXh0ZW5kcyBhbnlbXT4ocGFyZW50SG9va05hbWU6IHN0cmluZywgLi4udmFsdWVzOiBUKSB7XG4gICAgdXNlSGVscGVyKHZhbHVlcy5sZW5ndGgsIDApO1xuICAgIHZhbHVlcy5mb3JFYWNoKHVzZUhlbHBlcik7XG4gICAgcmV0dXJuO1xuXG5cbiAgICBmdW5jdGlvbiB1c2VIZWxwZXI8VT4odmFsdWU6IFUsIGluZGV4OiBudW1iZXIpIHtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgcHJvdmlkZWQgZnVuY3Rpb25zIGFyZSBwZXJmZWN0bHkgc3RhYmxlIGFjcm9zcyByZW5kZXJzXG4gICAgICAgIGNvbnN0IGhlbHBlclRvRW5zdXJlU3RhYmlsaXR5ID0gdXNlUmVmKHZhbHVlKTtcbiAgICAgICAgY29uc3Qgc2hvd25FcnJvciA9IHVzZVJlZihmYWxzZSk7XG4gICAgICAgIGlmIChoZWxwZXJUb0Vuc3VyZVN0YWJpbGl0eS5jdXJyZW50ICE9IHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIXNob3duRXJyb3IuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWRlYnVnZ2VyICovXG4gICAgICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgVGhlIGhvb2sgJHtwYXJlbnRIb29rTmFtZX0gcmVxdWlyZXMgc29tZSBvciBhbGwgb2YgaXRzIGFyZ3VtZW50cyByZW1haW4gc3RhYmxlIGFjcm9zcyBlYWNoIHJlbmRlcjsgcGxlYXNlIGNoZWNrIHRoZSAke2luZGV4fS1pbmRleGVkIGFyZ3VtZW50LmApO1xuICAgICAgICAgICAgICAgIHNob3duRXJyb3IuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZVJlbmRlcmluZyhmOiAoKSA9PiB2b2lkKSB7XG4gICAgKG9wdGlvbnMuZGVib3VuY2VSZW5kZXJpbmcgPz8gc2V0VGltZW91dCkoZik7XG59XG5cbi8qKlxuICogU2ltaWxhciB0byBgdXNlU3RhdGVgLCBidXQgZm9yIHZhbHVlcyB0aGF0IGFyZW4ndCBcInJlbmRlci1pbXBvcnRhbnRcIiAmbmRhc2g7IHVwZGF0ZXMgZG9uJ3QgY2F1c2UgYSByZS1yZW5kZXIgYW5kIHNvIHRoZSB2YWx1ZSBzaG91bGRuJ3QgYmUgdXNlZCBkdXJpbmcgcmVuZGVyICh0aG91Z2ggaXQgY2VydGFpbmx5IGNhbiwgYXQgbGVhc3QgYnkgcmUtcmVuZGVyaW5nIGFnYWluKS5cbiAqIFxuICogVG8gY29tcGVuc2F0ZSBmb3IgdGhpcywgeW91IHNob3VsZCBwYXNzIGEgYHVzZUVmZmVjdGAtZXNxdWUgY2FsbGJhY2sgdGhhdCBpcyBydW4gd2hlbmV2ZXIgdGhlIHZhbHVlIGNoYW5nZXMuICBKdXN0IGxpa2UgYHVzZUVmZmVjdGAsIHRoaXMgY2FsbGJhY2sgY2FuIHJldHVybiBhIGNsZWFudXAgZnVuY3Rpb24gdGhhdCdzIHJ1biBiZWZvcmUgdGhlIHZhbHVlIGNoYW5nZXMuICBJZiB5b3Ugd291bGQgbGlrZSB0byByZS1yZW5kZXIgd2hlbiB0aGUgdmFsdWUgY2hhbmdlcyAob3IsIHNheSwgd2hlbiB0aGUgdmFsdWUgbWVldHMgc29tZSBjcml0ZXJpYSksIHRoaXMgaXMgd2hlcmUgeW91J2xsIHdhbnQgdG8gcHV0IGluIGEgY2FsbCB0byBhIGBzZXRTdGF0ZWAgZnVuY3Rpb24uXG4gKiBcbiAqIFRvIHN1bW1hcml6ZSwgaXQncyBsaWtlIGEgYHVzZVN0YXRlYC1gdXNlRWZmZWN0YCBtYXNodXA6XG4gKiBcbiAqIDEuIEl0J3MgbGlrZSBgdXNlU3RhdGVgLCBleGNlcHQgdGhpcyB2ZXJzaW9uIG9mIGBzZXRTdGF0ZWAgZG9lc24ndCByZS1yZW5kZXIgdGhlIHdob2xlIGNvbXBvbmVudFxuICogMi4gSXQncyBsaWtlIGB1c2VTdGF0ZWAsIGV4Y2VwdCB5b3UgY2FuIHJ1biBhIGZ1bmN0aW9uIHdoZW4gdGhlIHZhbHVlIGNoYW5nZXMgdGhhdCBvcHRpb25hbGx5IHJldHVybnMgYSBjbGVhbnVwIGZ1bmN0aW9uXG4gKiAzLiBJdCdzIGxpa2UgYHVzZUVmZmVjdGAsIGV4Y2VwdCB5b3UgdHJpZ2dlciB0aGUgZWZmZWN0IGZ1bmN0aW9uIFwicmVtb3RlbHlcIiBpbnN0ZWFkIG9mIGl0IHJ1bm5pbmcgYWZ0ZXIgcmVuZGVyaW5nXG4gKiA0LiBJdCdzIGxpa2UgYHVzZUVmZmVjdGAsIGV4Y2VwdCB0aGUgc2luZ2xlIFwiZGVwZW5kZW5jeVwiIGlzIGJhc2VkIG9uIHlvdXIgY2FsbHMgdG8gYHNldFN0YXRlYFxuICogXG4gKiBOb3RlIHRoYXQgd2hpbGUgY2FsbGluZyBgc2V0U3RhdGVgIGRvZXNuJ3QgY2F1c2UgYW55IHJlLXJlbmRlcnMsIHlvdSBjYW4gZG8gdGhhdCB3aXRoaW4geW91ciBgb25DaGFuZ2VgIGZ1bmN0aW9uLCBjYWxsZWQgd2hlbmV2ZXIgdGhlIHZhbHVlIGNoYW5nZXMgdmlhIHRoYXQgYHNldFN0YXRlYC5cbiAqIFxuICogQHBhcmFtIG9uQ2hhbmdlIFRoZSBcImVmZmVjdFwiIGZ1bmN0aW9uIHRvIHJ1biB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2VzLiBFZmZlY3RpdmVseSB0aGUgc2FtZSBhcyBgdXNlRWZmZWN0YCdzIFwiZWZmZWN0XCIgZnVuY3Rpb24uICBNVVNUIEJFIFNUQUJMRSwgZWl0aGVyIGJlY2F1c2UgaXQgaGFzIG5vIGRlcGVuZGVuY2llcywgb3IgYmVjYXVzZSBpdCdzIGZyb20gdXNlU3RhYmxlQ2FsbGJhY2ssIGJ1dCB0aGlzIHdpbGwgbWVhbiB5b3UgY2Fubm90IHVzZSBnZXRTdGF0ZSBvciBzZXRTdGF0ZSBkdXJpbmcgcmVuZGVyLlxuICogQHBhcmFtIGdldEluaXRpYWxWYWx1ZSBJZiBwcm92aWRlZCwgdGhlIGVmZmVjdCB3aWxsIGJlIGludm9rZWQgb25jZSB3aXRoIHRoaXMgdmFsdWUgb24gbW91bnQuIE1VU1QgQkUgU1RBQkxFLCBlaXRoZXIgYmVjYXVzZSBpdCBoYXMgbm8gZGVwZW5kZW5jaWVzLCBvciBiZWNhdXNlIGl0J3MgZnJvbSB1c2VTdGFibGVDYWxsYmFjaywgYnV0IHRoaXMgd2lsbCBtZWFuIHlvdSBjYW5ub3QgdXNlIGdldFN0YXRlIG9yIHNldFN0YXRlIGR1cmluZyByZW5kZXIuXG4gKiBAcGFyYW0gY3VzdG9tRGVib3VuY2VSZW5kZXJpbmcgQnkgZGVmYXVsdCwgY2hhbmdlcyB0byBwYXNzaXZlIHN0YXRlIGFyZSBkZWxheWVkIGJ5IG9uZSB0aWNrIHNvIHRoYXQgd2Ugb25seSBjaGVjayBmb3IgY2hhbmdlcyBpbiBhIHNpbWlsYXIgd2F5IHRvIFByZWFjdC4gWW91IGNhbiBvdmVycmlkZSB0aGlzIHRvLCBmb3IgZXhhbXBsZSwgYWx3YXlzIHJ1biBpbW1lZGlhdGVseSBpbnN0ZWFkLlxuICogQHJldHVybnMgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VQYXNzaXZlU3RhdGU8VD4ob25DaGFuZ2U6IHVuZGVmaW5lZCB8IG51bGwgfCBPblBhc3NpdmVTdGF0ZUNoYW5nZTxUPiwgZ2V0SW5pdGlhbFZhbHVlPzogKCkgPT4gVCwgY3VzdG9tRGVib3VuY2VSZW5kZXJpbmc/OiB0eXBlb2YgZGVib3VuY2VSZW5kZXJpbmcpOiByZWFkb25seSBbZ2V0U3RhdGVTdGFibGU6ICgpID0+IFQsIHNldFN0YXRlU3RhYmxlOiBQYXNzaXZlU3RhdGVVcGRhdGVyPFQ+XSB7XG5cbiAgICBjb25zdCB2YWx1ZVJlZiA9IHVzZVJlZjxUIHwgdHlwZW9mIFVuc2V0PihVbnNldCk7XG4gICAgY29uc3Qgd2FybmluZ1JlZiA9IHVzZVJlZihmYWxzZSk7XG4gICAgY29uc3QgY2xlYW51cENhbGxiYWNrUmVmID0gdXNlUmVmPHVuZGVmaW5lZCB8ICgoKSA9PiB2b2lkKT4odW5kZWZpbmVkKTtcblxuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBwcm92aWRlZCBmdW5jdGlvbnMgYXJlIHBlcmZlY3RseSBzdGFibGUgYWNyb3NzIHJlbmRlcnNcbiAgICB1c2VFbnN1cmVTdGFiaWxpdHkoXCJ1c2VQYXNzaXZlU3RhdGVcIiwgb25DaGFuZ2UsIGdldEluaXRpYWxWYWx1ZSwgY3VzdG9tRGVib3VuY2VSZW5kZXJpbmcpO1xuXG4gICAgLy8gU2hhcmVkIGJldHdlZW4gXCJkZXBlbmRlbmN5IGNoYW5nZWRcIiBhbmQgXCJjb21wb25lbnQgdW5tb3VudGVkXCIuXG4gICAgY29uc3Qgb25TaG91bGRDbGVhblVwID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBjb25zdCBjbGVhbnVwQ2FsbGJhY2sgPSBjbGVhbnVwQ2FsbGJhY2tSZWYuY3VycmVudDtcbiAgICAgICAgaWYgKGNsZWFudXBDYWxsYmFjaylcbiAgICAgICAgICAgIGNsZWFudXBDYWxsYmFjaygpO1xuICAgIH0sIFtdKTtcblxuICAgIC8vIFRoZXJlIGFyZSBhIGNvdXBsZSBwbGFjZXMgd2hlcmUgd2UnZCBsaWtlIHRvIHVzZSBvdXIgaW5pdGlhbFxuICAgIC8vIHZhbHVlIGluIHBsYWNlIG9mIGhhdmluZyBubyB2YWx1ZSBhdCBhbGwgeWV0LlxuICAgIC8vIFRoaXMgaXMgdGhlIHNoYXJlZCBjb2RlIGZvciB0aGF0LCB1c2VkIG9uIG1vdW50IGFuZCB3aGVuZXZlclxuICAgIC8vIGdldFZhbHVlIGlzIGNhbGxlZC5cbiAgICBjb25zdCB0cnlFbnN1cmVWYWx1ZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgaWYgKHZhbHVlUmVmLmN1cnJlbnQgPT09IFVuc2V0ICYmIGdldEluaXRpYWxWYWx1ZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5pdGlhbFZhbHVlID0gZ2V0SW5pdGlhbFZhbHVlKCk7XG4gICAgICAgICAgICAgICAgdmFsdWVSZWYuY3VycmVudCA9IGluaXRpYWxWYWx1ZTtcbiAgICAgICAgICAgICAgICBjbGVhbnVwQ2FsbGJhY2tSZWYuY3VycmVudCA9IChvbkNoYW5nZT8uKGluaXRpYWxWYWx1ZSwgdW5kZWZpbmVkKSA/PyB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gRXhjZXB0aW9ucyBhcmUgaW50ZW50aW9uYWwgdG8gYWxsb3cgYmFpbG91dCAod2l0aG91dCBleHBvc2luZyB0aGUgVW5zZXQgc3ltYm9sKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgWy8qIGdldEluaXRpYWxWYWx1ZSBhbmQgb25DaGFuZ2UgaW50ZW50aW9uYWxseSBvbWl0dGVkICovXSk7XG5cblxuICAgIGNvbnN0IGdldFZhbHVlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBpZiAod2FybmluZ1JlZi5jdXJyZW50KVxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRHVyaW5nIG9uQ2hhbmdlLCBwcmVmZXIgdXNpbmcgdGhlICh2YWx1ZSwgcHJldlZhbHVlKSBhcmd1bWVudHMgaW5zdGVhZCBvZiBnZXRWYWx1ZSAtLSBpdCdzIGFtYmlndW91cyBhcyB0byBpZiB5b3UncmUgYXNraW5nIGZvciB0aGUgb2xkIG9yIG5ldyB2YWx1ZSBhdCB0aGlzIHBvaW50IGluIHRpbWUgZm9yIHRoaXMgY29tcG9uZW50LlwiKTtcblxuICAgICAgICAvLyBUaGUgZmlyc3QgdGltZSB3ZSBjYWxsIGdldFZhbHVlLCBpZiB3ZSBoYXZlbid0IGJlZW4gZ2l2ZW4gYSB2YWx1ZSB5ZXQsXG4gICAgICAgIC8vIChhbmQgd2Ugd2VyZSBnaXZlbiBhbiBpbml0aWFsIHZhbHVlIHRvIHVzZSlcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBpbml0aWFsIHZhbHVlIGluc3RlYWQgb2Ygbm90aGluZy5cbiAgICAgICAgaWYgKHZhbHVlUmVmLmN1cnJlbnQgPT09IFVuc2V0KVxuICAgICAgICAgICAgdHJ5RW5zdXJlVmFsdWUoKTtcblxuICAgICAgICByZXR1cm4gKHZhbHVlUmVmLmN1cnJlbnQgPT09IFVuc2V0ID8gdW5kZWZpbmVkISA6IHZhbHVlUmVmLmN1cnJlbnQhKSBhcyBUO1xuICAgIH0sIFtdKTtcblxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSd2ZSBydW4gb3VyIGVmZmVjdCBhdCBsZWFzdCBvbmNlIG9uIG1vdW50LlxuICAgICAgICAvLyAoSWYgd2UgaGF2ZSBhbiBpbml0aWFsIHZhbHVlLCBvZiBjb3Vyc2UpXG4gICAgICAgIHRyeUVuc3VyZVZhbHVlKCk7XG5cblxuICAgIH0sIFtdKTtcblxuICAgIC8vIFRoZSBhY3R1YWwgY29kZSB0aGUgdXNlciBjYWxscyB0byAocG9zc2libHkpIHJ1biBhIG5ldyBlZmZlY3QuXG4gICAgY29uc3QgciA9IHVzZVJlZih7IHByZXZEZXA6IFVuc2V0IGFzIFQgfCAodHlwZW9mIFVuc2V0KSB9KTtcbiAgICBjb25zdCBzZXRWYWx1ZSA9IHVzZUNhbGxiYWNrPFBhc3NpdmVTdGF0ZVVwZGF0ZXI8VD4+KChhcmcpID0+IHtcblxuICAgICAgICAvLyBSZWdhcmRsZXNzIG9mIGFueXRoaW5nIGVsc2UsIGZpZ3VyZSBvdXQgd2hhdCBvdXIgbmV4dCB2YWx1ZSBpcyBhYm91dCB0byBiZS5cbiAgICAgICAgY29uc3QgbmV4dFZhbHVlID0gKGFyZyBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gYXJnKHZhbHVlUmVmLmN1cnJlbnQgPT09IFVuc2V0ID8gdW5kZWZpbmVkIDogdmFsdWVSZWYuY3VycmVudCkgOiBhcmcpO1xuXG5cbiAgICAgICAgaWYgKHIuY3VycmVudC5wcmV2RGVwID09PSBVbnNldCAmJiBuZXh0VmFsdWUgIT09IHZhbHVlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IHJlcXVlc3QgdG8gY2hhbmdlIHRoaXMgdmFsdWUuXG4gICAgICAgICAgICAvLyBFdmFsdWF0ZSB0aGUgcmVxdWVzdCBpbW1lZGlhdGVseSwgdGhlbiBxdWV1ZSB1cCB0aGUgb25DaGFuZ2UgZnVuY3Rpb25cblxuICAgICAgICAgICAgLy8gU2F2ZSBvdXIgY3VycmVudCB2YWx1ZSBzbyB0aGF0IHdlIGNhbiBjb21wYXJlIGFnYWluc3QgaXQgbGF0ZXJcbiAgICAgICAgICAgIC8vIChpZiB3ZSBmbGlwIGJhY2sgdG8gdGhpcyBzdGF0ZSwgdGhlbiB3ZSB3b24ndCBzZW5kIHRoZSBvbkNoYW5nZSBmdW5jdGlvbilcbiAgICAgICAgICAgIHIuY3VycmVudC5wcmV2RGVwID0gdmFsdWVSZWYuY3VycmVudDtcblxuICAgICAgICAgICAgLy8gU2NoZWR1bGUgdGhlIGFjdHVhbCBjaGVjayBhbmQgaW52b2NhdGlvbiBvZiBvbkNoYW5nZSBsYXRlciB0byBsZXQgZWZmZWN0cyBzZXR0bGVcbiAgICAgICAgICAgIChjdXN0b21EZWJvdW5jZVJlbmRlcmluZyA/PyBkZWJvdW5jZVJlbmRlcmluZykoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHREZXAgPSB2YWx1ZVJlZi5jdXJyZW50ISBhcyBUO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZEZXAgPSByLmN1cnJlbnQucHJldkRlcCA7XG4gICAgICAgICAgICAgICAgaWYgKHIuY3VycmVudC5wcmV2RGVwICE9IHZhbHVlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybmluZ1JlZi5jdXJyZW50ID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FsbCBhbnkgcmVnaXN0ZXJlZCBjbGVhbnVwIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBvblNob3VsZENsZWFuVXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFudXBDYWxsYmFja1JlZi5jdXJyZW50ID0gKG9uQ2hhbmdlPy4obmV4dERlcCwgcHJldkRlcCA9PT0gVW5zZXQ/IHVuZGVmaW5lZCA6IHByZXZEZXApID8/IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVJlZi5jdXJyZW50ID0gbmV4dERlcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsbG93IHRoZSB1c2VyIHRvIG5vcm1hbGx5IGNhbGwgZ2V0VmFsdWUgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmdSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBXZSd2ZSBmaW5pc2hlZCB3aXRoIGV2ZXJ5dGhpbmcsIHNvIG1hcmsgdXMgYXMgYmVpbmcgb24gYSBjbGVhbiBzbGF0ZSBhZ2Fpbi5cbiAgICAgICAgICAgICAgICByLmN1cnJlbnQucHJldkRlcCA9IFVuc2V0O1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgdmFsdWUgaW1tZWRpYXRlbHkuXG4gICAgICAgIC8vIFRoaXMgd2lsbCBiZSBjaGVja2VkIGFnYWluc3QgcHJldkRlcCB0byBzZWUgaWYgd2Ugc2hvdWxkIGFjdHVhbGx5IGNhbGwgb25DaGFuZ2VcbiAgICAgICAgdmFsdWVSZWYuY3VycmVudCA9IG5leHRWYWx1ZTtcblxuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiBbZ2V0VmFsdWUsIHNldFZhbHVlXSBhcyBjb25zdDtcbn1cblxuY29uc3QgVW5zZXQgPSBTeW1ib2woKTtcblxuLy8gRWFzeSBjb25zdGFudHMgZm9yIGdldEluaXRpYWxWYWx1ZVxuZXhwb3J0IGZ1bmN0aW9uIHJldHVyblRydWUoKSB7IHJldHVybiB0cnVlOyB9XG5leHBvcnQgZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7IHJldHVybiBmYWxzZTsgfVxuZXhwb3J0IGZ1bmN0aW9uIHJldHVybk51bGwoKSB7IHJldHVybiBudWxsOyB9XG5leHBvcnQgZnVuY3Rpb24gcmV0dXJuVW5kZWZpbmVkKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG5leHBvcnQgZnVuY3Rpb24gcmV0dXJuWmVybygpIHsgcmV0dXJuIDA7IH0iLCJcbmltcG9ydCB7IFN0YXRlVXBkYXRlciwgdXNlRWZmZWN0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuaW1wb3J0IHsgT25QYXNzaXZlU3RhdGVDaGFuZ2UsIHJldHVybk51bGwsIHJldHVyblRydWUsIHVzZUVuc3VyZVN0YWJpbGl0eSwgdXNlUGFzc2l2ZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXBhc3NpdmUtc3RhdGVcIjtcblxuXG4vKipcbiAqIFxuICogVGhlcmUgYXJlIHNldmVyYWwgZGlmZmVyZW50IHdheXMgdGhhdCBhIGZvY3VzIGV2ZW50IGNhbiBoYXBwZW4uICBBc3N1bWVcbiAqIHRoZSBmb2xsb3dpbmcgc3RlcHMgaGFwcGVuIGluIG9yZGVyOlxuICogXG4gKiAxLiBUaGUgcGFnZSBsb2Fkcy5cbiAqICAgICogTm90aGluZyBpcyBmb2N1c2VkLCBidXQgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGBib2R5YC4gXG4gKiAgICAqIE5vIGZvY3VzIGV2ZW50cyBhcmUgZmlyZWQuXG4gKiAyLiBUaGUgd2luZG93IGlzIGZvY3VzZWQsIGFuIHVuZm9jdXNhYmxlIGVsZW1lbnQgaXMgY2xpY2tlZCwgdGV4dCBpcyBzZWxlY3RlZCwgZXRjLlxuICogICAgKiBUaGUgYGFjdGl2ZUVsZW1lbnRgIHJlbWFpbnMgYXMgYGJvZHlgLlxuICogICAgKiBBIGBmb2N1c2AvYGZvY3VzaW5gIGV2ZW50ICpNSUdIVCogYmUgZmlyZWQgZm9yIGBib2R5YC4gRGVwZW5kaW5nIG9uXG4gKiAgICAgIHRoZSBicm93c2VyLCB0aGlzIGRlcGVuZHMgb24gd2hldGhlciB0aGUgaGFuZGxlciB3YXMgYXR0YWNoZWQgdG8gYHdpbmRvd2Agb3IgYGRvY3VtZW50YC5cbiAqICAgICAgUHJvYmFibHkganVzdCBiZXN0IHRvIG5vdCByZWx5IG9uIGl0LCBvciBsaXN0ZW4gdG8gYHdpbmRvd2AgZm9jdXMgZXZlbnRzIGRpcmVjdGx5LlxuICogMy4gQSBmb2N1c2FibGUgZWxlbWVudCBpcyBjbGlja2VkLCBldGMuXG4gKiAgICAqIFRoZSBgYWN0aXZlRWxlbWVudGAgaXMgc2V0IHRvIHRoZSBuZXcgZWxlbWVudCBiZWZvcmUgYW55IGV2ZW50IGV2ZW4gZmlyZXMuXG4gKiAgICAqIGBmb2N1c291dGAgYW5kIGBibHVyYCBhcmUgKm5vdCogZmlyZWQgb24gYGJvZHlgLlxuICogICAgKiBgZm9jdXNgIGFuZCBgZm9jdXNpbmAgYXJlIGZpcmVkIG9uIHRoZSBuZXcgZWxlbWVudC4gYHJlbGF0ZWRUYXJnZXRgIGlzIG51bGwuXG4gKiA0LiBBIGZvY3VzYWJsZSBlbGVtZW50IGlzIGNsaWNrZWQsIGV0Yy5cbiAqICAgICogKipUaGUgYGFjdGl2ZUVsZW1lbnRgIGlzIHNldCB0byB0aGUgYGJvZHlgKiogYmVmb3JlIGFueSBldmVudCBldmVuIGZpcmVzLlxuICogICAgKiBgYmx1cmAgYW5kIGBmb2N1c291dGAgYXJlIGZpcmVkIG9uIHRoZSBvbGQgZWxlbWVudC4gYHJlbGF0ZWRUYXJnZXRgIGlzIHRoZSBuZXcgZWxlbWVudC5cbiAqICAgICogVGhlIGBhY3RpdmVFbGVtZW50YCBpcyBub3cgc2V0IHRvIHRoZSBuZXcgZWxlbWVudC5cbiAqICAgICogYGZvY3VzaW5gIGlzIGZpcmVkIG9uIHRoZSBuZXcgZWxlbWVudC4gYHJlbGF0ZWRUYXJnZXRgIGlzIHRoZSBvbGQgZWxlbWVudC5cbiAqIDUuIEFuIHVuZm9jdXNhYmxlIGVsZW1lbnQgaXMgY2xpY2tlZCwgdGV4dCBpcyBzZWxlY3RlZCwgZXRjLlxuICogICAgKiBUaGUgYGFjdGl2ZUVsZW1lbnRgIGlzIHNldCB0byBgYm9keWAuXG4gKiAgICAqIGBibHVyYCBhbmQgYGZvY3Vzb3V0YCBhcmUgZmlyZWQgb24gdGhlIG9sZCBlbGVtZW50LiBgcmVsYXRlZFRhcmdldGAgaXMgbnVsbC5cbiAqICAgICogYGZvY3VzaW5gIGlzICpub3QqIGZpcmVkIG9uIGBib2R5YC5cbiAqIFxuICogXG4gKiBJbiBzdW1tYXJ5OlxuICogMS4gRm9jdXMgZXZlbnRzICpkbyogbm90aWZ5IHVzIG9mIGFsbCBjaGFuZ2VzIGluIGZvY3VzLCBidXQgdGhlcmUgaXMgbm8gb25lIHNpbmdsZSBjb21wcmVoZW5zaXZlIGV2ZW50IHRoYXQgcHJvdmlkZXMgdXMgd2l0aCBhbGwgYXZhaWxhYmxlIGluZm9ybWF0aW9uLlxuICogMi4gYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgICppcyBub3QqIGFsd2F5cyB0aGUgc2FtZSBhcyB3aGF0J3MgYmVpbmcgcmVmZXJlbmNlZCBieSBhIGZvY3VzIGV2ZW50LiBJbiBwYXJ0aWN1bGFyLCBpdCBtYXkgYmVjb21lIGBib2R5YCBhdCBhbnkgYXJiaXRyYXJ5IHRpbWUuXG4gKiAzLiBBIGBibHVyYCB3aXRob3V0IGEgYGZvY3VzYCBjYW4gYW5kIHdpbGwgb2NjdXIuIFRoaXMgbWVhbnMgaXQgaXMgbm90IHBvc3NpYmxlIHRvIHNvbGVseSB1c2UgYGZvY3VzYCB0byBkZXRlY3QgYWxsIGNoYW5nZXMuXG4gKiA0LiBBIGBibHVyYCBldmVudCB3aG9zZSBgcmVsYXRlZFRhcmdldGAgaXMgbnVsbCBpbmRpY2F0ZXMgdGhhdCB0aGVyZSB3aWxsIGJlIG5vIGZvbGxvd2luZyBgZm9jdXNgIGV2ZW50LlxuICogXG4gKi9cbmNvbnN0IF9kdW1teSA9IDA7XG5cbmludGVyZmFjZSBGb288VD4ge1xuICAgIGxhc3RTZW50OiBUIHwgdW5kZWZpbmVkO1xuICAgIHNlbmQ6IChlOiBUKSA9PiB2b2lkO1xufVxuLypcbmNvbnN0IGFjdGl2ZUVsZW1lbnRVcGRhdGVycyA9IG5ldyBNYXA8V2luZG93IHwgbnVsbCB8IHVuZGVmaW5lZCwgU2V0PHVuZGVmaW5lZCB8ICgoZTogTm9kZSB8IG51bGwpID0+IHZvaWQpPj4oKTtcbmNvbnN0IGxhc3RBY3RpdmVFbGVtZW50VXBkYXRlcnMgPSBuZXcgTWFwPFdpbmRvdyB8IG51bGwgfCB1bmRlZmluZWQsIFNldDx1bmRlZmluZWQgfCAoKGU6IE5vZGUpID0+IHZvaWQpPj4oKTtcbmNvbnN0IHdpbmRvd0ZvY3VzZWRVcGRhdGVycyA9IG5ldyBNYXA8V2luZG93IHwgbnVsbCB8IHVuZGVmaW5lZCwgU2V0PHVuZGVmaW5lZCB8ICgoZm9jdXNlZDogYm9vbGVhbikgPT4gdm9pZCk+PigpO1xuY29uc3Qgd2luZG93c0ZvY3VzZWRVcGRhdGVycyA9IG5ldyBNYXA8V2luZG93IHwgbnVsbCB8IHVuZGVmaW5lZCwgYm9vbGVhbj4oKTsqL1xuY29uc3QgYWN0aXZlRWxlbWVudFVwZGF0ZXJzID0gbmV3IE1hcDxXaW5kb3cgfCBudWxsIHwgdW5kZWZpbmVkLCBTZXQ8Rm9vPE5vZGUgfCBudWxsPj4+KCk7XG5jb25zdCBsYXN0QWN0aXZlRWxlbWVudFVwZGF0ZXJzID0gbmV3IE1hcDxXaW5kb3cgfCBudWxsIHwgdW5kZWZpbmVkLCBTZXQ8Rm9vPE5vZGU+Pj4oKTtcbmNvbnN0IHdpbmRvd0ZvY3VzZWRVcGRhdGVycyA9IG5ldyBNYXA8V2luZG93IHwgbnVsbCB8IHVuZGVmaW5lZCwgU2V0PEZvbzxib29sZWFuPj4+KCk7XG5jb25zdCB3aW5kb3dzRm9jdXNlZFVwZGF0ZXJzID0gbmV3IE1hcDxXaW5kb3cgfCBudWxsIHwgdW5kZWZpbmVkLCBib29sZWFuPigpO1xuXG4vL2NvbnN0IG1pY3JvdGFza3MgPSBuZXcgTWFwPFNldDxhbnk+LCBhbnk+KCk7XG5cbi8vIFRoZSBmb2N1c2luIGFuZCBmb2N1c291dCBldmVudHMgb2Z0ZW4gZmlyZSBzeW5jcm9ub3VzbHkgaW4gdGhlIG1pZGRsZSBvZiBydW5uaW5nIGNvZGUuXG4vLyBFLkcuIGNhbGxpbmcgZWxlbWVudC5mb2N1cygpIGNhbiBjYXVzZSBhIGZvY3VzaW4gZXZlbnQgaGFuZGxlciB0byBpbW1lZGlhdGVseSBpbnRlcnJ1cHQgdGhhdCBjb2RlLlxuLy8gRm9yIHRoZSBwdXJwb3NlIG9mIGltcHJvdmluZyBzdGFiaWxpdHksIHdlIGRlYm91bmNlIGFsbCBmb2N1cyBldmVudHMgdG8gdGhlIG5leHQgbWljcm90YXNrLlxuZnVuY3Rpb24gZm9yRWFjaFVwZGF0ZXI8VD4od2luZG93OiBXaW5kb3cgfCBudWxsIHwgdW5kZWZpbmVkLCBtYXA6IE1hcDxXaW5kb3cgfCBudWxsIHwgdW5kZWZpbmVkLCBTZXQ8Rm9vPFQ+Pj4sIHZhbHVlOiBUKSB7XG4gICAgY29uc3QgdXBkYXRlcnMgPSBtYXAuZ2V0KHdpbmRvdyk7XG4gICAgaWYgKHVwZGF0ZXJzKSB7XG4gICAgICAgIC8vaWYgKCFtaWNyb3Rhc2tzLmhhcyh1cGRhdGVyc0tleSkpIHtcbiAgICAgICAgLy9kZWJvdW5jZVJlbmRlcmluZygoKSA9PiB7XG4gICAgICAgIC8vY29uc3QgdXBkYXRlcnNLZXkgPSBtYXAuZ2V0KHdpbmRvdykhO1xuICAgICAgICAvL2NvbnN0IHZhbHVlID0gbWljcm90YXNrcy5nZXQodXBkYXRlcnNLZXkpO1xuICAgICAgICAvL21pY3JvdGFza3MuZGVsZXRlKHVwZGF0ZXJzS2V5KTtcblxuICAgICAgICBpZiAodXBkYXRlcnMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdXBkYXRlciBvZiB1cGRhdGVycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbGFzdFNlbnQsIHNlbmQgfSA9IHVwZGF0ZXI7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBsYXN0U2VudCkge1xuICAgICAgICAgICAgICAgICAgICBzZW5kKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlci5sYXN0U2VudCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vfSk7XG4gICAgICAgIC8vfVxuXG4gICAgICAgIC8vbWljcm90YXNrcy5zZXQodXBkYXRlcnNLZXksIHZhbHVlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZvY3Vzb3V0KGU6IEZvY3VzRXZlbnQpIHtcbiAgICBjb25zdCB3aW5kb3cgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuICAgIGlmIChlLnJlbGF0ZWRUYXJnZXQgPT0gbnVsbCkge1xuICAgICAgICBmb3JFYWNoVXBkYXRlcih3aW5kb3csIGFjdGl2ZUVsZW1lbnRVcGRhdGVycywgbnVsbCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBKdXN0IHdhaXQgZm9yIHRoZSBmb2N1c2luIGV2ZW50LlxuICAgIH1cblxufVxuXG5mdW5jdGlvbiBmb2N1c2luKGU6IEZvY3VzRXZlbnQpIHtcbiAgICBjb25zdCB3aW5kb3cgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgICBjb25zdCBjdXJyZW50bHlGb2N1c2VkRWxlbWVudCA9IGUudGFyZ2V0IGFzIChFbGVtZW50ICYgSFRNTE9yU1ZHRWxlbWVudCk7XG4gICAgZm9yRWFjaFVwZGF0ZXIod2luZG93LCBhY3RpdmVFbGVtZW50VXBkYXRlcnMsIGN1cnJlbnRseUZvY3VzZWRFbGVtZW50KTtcbiAgICBmb3JFYWNoVXBkYXRlcih3aW5kb3csIGxhc3RBY3RpdmVFbGVtZW50VXBkYXRlcnMsIGN1cnJlbnRseUZvY3VzZWRFbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gd2luZG93Rm9jdXMoZTogRm9jdXNFdmVudCkge1xuICAgIGNvbnN0IHdpbmRvdyA9IChlLnRhcmdldCBpbnN0YW5jZW9mIFdpbmRvdyA/IGUudGFyZ2V0IDogZS5jdXJyZW50VGFyZ2V0IGluc3RhbmNlb2YgV2luZG93ID8gZS5jdXJyZW50VGFyZ2V0IDogKGUudGFyZ2V0IGFzIEVsZW1lbnQpLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpO1xuICAgIHdpbmRvd3NGb2N1c2VkVXBkYXRlcnMuc2V0KHdpbmRvdywgdHJ1ZSk7XG4gICAgZm9yRWFjaFVwZGF0ZXIod2luZG93LCB3aW5kb3dGb2N1c2VkVXBkYXRlcnMsIHRydWUpO1xufVxuXG5mdW5jdGlvbiB3aW5kb3dCbHVyKGU6IEZvY3VzRXZlbnQpIHtcbiAgICBjb25zdCB3aW5kb3cgPSAoZS50YXJnZXQgaW5zdGFuY2VvZiBXaW5kb3cgPyBlLnRhcmdldCA6IGUuY3VycmVudFRhcmdldCBpbnN0YW5jZW9mIFdpbmRvdyA/IGUuY3VycmVudFRhcmdldCA6IChlLnRhcmdldCBhcyBFbGVtZW50KS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KTtcbiAgICB3aW5kb3dzRm9jdXNlZFVwZGF0ZXJzLnNldCh3aW5kb3csIGZhbHNlKTtcbiAgICBmb3JFYWNoVXBkYXRlcih3aW5kb3csIHdpbmRvd0ZvY3VzZWRVcGRhdGVycywgZmFsc2UpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUFjdGl2ZUVsZW1lbnRQYXJhbWV0ZXJzIHtcblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBhbnkgdGltZSB0aGUgYWN0aXZlIGVsZW1lbnQgY2hhbmdlcy4gTXVzdCBiZSBzdGFibGUuXG4gICAgICovXG4gICAgb25BY3RpdmVFbGVtZW50Q2hhbmdlPzogT25QYXNzaXZlU3RhdGVDaGFuZ2U8RWxlbWVudCB8IG51bGw+O1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGFueSB0aW1lIHRoZSBhY3RpdmUgZWxlbWVudCBjaGFuZ2VzIGFuZCBpcyBub3QgbnVsbC4gXG4gICAgICogTXVzdCBiZSBzdGFibGUuXG4gICAgICovXG4gICAgb25MYXN0QWN0aXZlRWxlbWVudENoYW5nZT86IE9uUGFzc2l2ZVN0YXRlQ2hhbmdlPEVsZW1lbnQ+O1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGFueSB0aW1lIHRoZSB3aW5kb3cgZ2FpbnMvbG9zZXMgZm9jdXMuIE11c3QgYmUgc3RhYmxlLlxuICAgICAqL1xuICAgIG9uV2luZG93Rm9jdXNlZENoYW5nZT86IE9uUGFzc2l2ZVN0YXRlQ2hhbmdlPGJvb2xlYW4+O1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtdXN0IGJlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBkb2N1bWVudCBhc3NvY2lhdGVkIHdpdGggd2hhdGV2ZXIgZWxlbWVudHMgd2UncmUgbGlzdGVuaW5nIHRvLlxuICAgICAqIFxuICAgICAqIEUuRy4gc29tZURpdkVsZW1lbnQub3duZXJEb2N1bWVudFxuICAgICAqIFxuICAgICAqICoqTVVTVCoqIGJlIHN0YWJsZVxuICAgICAqL1xuICAgIGdldERvY3VtZW50KCk6IERvY3VtZW50O1xuXG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgZXZlbnQgaGFuZGxlcnMgYXJlIGF0dGFjaGVkIHRvIHRoZSBkb2N1bWVudCdzIGRlZmF1bHRWaWV3IFdpbmRvdy5cbiAgICAgKiBJZiB5b3UgbmVlZCBzb21ldGhpbmcgZGlmZmVyZW50LCBvdmVycmlkZSBpdCBoZXJlLlxuICAgICAqIFxuICAgICAqICoqTVVTVCoqIGJlIHN0YWJsZVxuICAgICAqL1xuICAgIGdldFdpbmRvdz8oZG9jdW1lbnQ6IERvY3VtZW50KTogV2luZG93O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUFjdGl2ZUVsZW1lbnRSZXR1cm5UeXBlIHtcbiAgICAvKiogXG4gICAgICogUmV0dXJucyB3aGF0ZXZlciBlbGVtZW50IGlzIGN1cnJlbnRseSBmb2N1c2VkLCBvciBgbnVsbGAgaWYgdGhlcmUncyBubyBmb2N1c2VkIGVsZW1lbnRcbiAgICAgKiAqKlNUQUJMRSoqXG4gICAgICovXG4gICAgZ2V0QWN0aXZlRWxlbWVudDogKCkgPT4gRWxlbWVudCB8IG51bGw7XG4gICAgLyoqIFxuICAgICAqIFJldHVybnMgd2hhdGV2ZXIgZWxlbWVudCBpcyBjdXJyZW50bHkgZm9jdXNlZCwgb3Igd2hhdGV2ZXIgZWxlbWVudCB3YXMgbW9zdCByZWNlbnRseSBmb2N1c2VkIGlmIHRoZXJlJ3Mgbm8gZm9jdXNlZCBlbGVtZW50XG4gICAgICogKipTVEFCTEUqKlxuICAgICAqL1xuICAgIGdldExhc3RBY3RpdmVFbGVtZW50OiAoKSA9PiBFbGVtZW50O1xuICAgIC8qKiBcbiAgICAgKiBSZXR1cm5zIGlmIHRoZSB3aW5kb3cgaXRzZWxmIGhhcyBmb2N1cyBvciBub3RcbiAgICAgKiAqKlNUQUJMRSoqXG4gICAgICovXG4gICAgZ2V0V2luZG93Rm9jdXNlZDogKCkgPT4gYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBBbGxvd3MgeW91IHRvIGluc3BlY3Qgd2hpY2ggZWxlbWVudCBpbiB0aGUgYGRvY3VtZW50YCBjdXJyZW50bHkgaGFzIGZvY3VzLCB3aGljaCB3YXMgbW9zdCByZWNlbnRseSBmb2N1c2VkIGlmIG5vbmUgYXJlIGN1cnJlbnRseSwgYW5kIHdoZXRoZXIgb3Igbm90IHRoZSB3aW5kb3cgaGFzIGZvY3VzIGJ5IHJldHVybmluZyB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uczpcbiAqICogYGdldEFjdGl2ZUVsZW1lbnQoKWBcbiAqICogYGdldExhc3RBY3RpdmVFbGVtZW50KClgXG4gKiAqIGBnZXRXaW5kb3dGb2N1c2VkKClgXG4gKiBcbiAqIChUaGUgZG9jdW1lbnQncyBib2R5IHJlY2VpdmluZyBmb2N1cywgbGlrZSBpdCBkb2VzIHdoZW4geW91IGNsaWNrIG9uIGFuIGVtcHR5IGFyZWEsIGlzIGNvdW50ZWQgYXMgbm8gZWxlbWVudCBoYXZpbmcgZm9jdXMgZm9yIGFsbCBpbnRlbnRzIGFuZCBwdXJwb3NlcylcbiAqIFxuICogVGhpcyBpcyBhIHBhc3NpdmUgaG9vaywgc28gYnkgZGVmYXVsdCBpdCByZXR1cm5zIGdldHRlciBmdW5jdGlvbnMgdGhhdCByZXBvcnQgdGhpcyBpbmZvcm1hdGlvbiBidXQgdGhlIGNvbXBvbmVudCB3aWxsIG5vdCByZS1yZW5kZXIgYnkgZGVmYXVsdCB3aGVuIHRoZSBhY3RpdmUgZWxlbWVudCBjaGFuZ2VzLlxuICogXG4gKiBJZiB5b3UgbmVlZCB0aGUgY29tcG9uZW50IHRvIHJlLXJlbmRlciB3aGVuIHRoZSBhY3RpdmUgZWxlbWVudCBjaGFuZ2VzLCB1c2UgdGhlIGBvbipDaGFuZ2VgIGFyZ3VtZW50cyB0byBzZXQgc29tZSBzdGF0ZSBvbiB5b3VyIGVuZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUFjdGl2ZUVsZW1lbnQoeyBvbkFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uV2luZG93Rm9jdXNlZENoYW5nZSwgZ2V0RG9jdW1lbnQsIGdldFdpbmRvdyB9OiBVc2VBY3RpdmVFbGVtZW50UGFyYW1ldGVycyk6IFVzZUFjdGl2ZUVsZW1lbnRSZXR1cm5UeXBlIHtcblxuICAgIHVzZUVuc3VyZVN0YWJpbGl0eShcInVzZUFjdGl2ZUVsZW1lbnRcIiwgb25BY3RpdmVFbGVtZW50Q2hhbmdlLCBvbkxhc3RBY3RpdmVFbGVtZW50Q2hhbmdlLCBvbldpbmRvd0ZvY3VzZWRDaGFuZ2UsIGdldERvY3VtZW50LCBnZXRXaW5kb3cpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgICAgICBjb25zdCB3aW5kb3cgPSAoZ2V0V2luZG93Py4oZG9jdW1lbnQpID8/IGRvY3VtZW50Py5kZWZhdWx0Vmlldyk7XG5cbiAgICAgICAgaWYgKChhY3RpdmVFbGVtZW50VXBkYXRlcnMuZ2V0KHdpbmRvdyk/LnNpemUgPz8gMCkgPT09IDApIHtcbiAgICAgICAgICAgIGRvY3VtZW50Py5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBmb2N1c2luLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgICAgICBkb2N1bWVudD8uYWRkRXZlbnRMaXN0ZW5lcihcImZvY3Vzb3V0XCIsIGZvY3Vzb3V0LCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgICAgICB3aW5kb3c/LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCB3aW5kb3dGb2N1cywgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICAgICAgd2luZG93Py5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCB3aW5kb3dCbHVyLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgdGhlbSBldmVuIGlmIHRoZXkncmUgdW5kZWZpbmVkIHRvIG1vcmUgZWFzaWx5XG4gICAgICAgIC8vIG1hbmFnZSB0aGUgXCI+MCBtZWFucyBkb24ndCBhZGQgaGFuZGxlcnNcIiBsb2dpYy5cbiAgICAgICAgY29uc3QgbG9jYWxBY3RpdmVFbGVtZW50VXBkYXRlcnMgPSBhY3RpdmVFbGVtZW50VXBkYXRlcnMuZ2V0KHdpbmRvdykgPz8gbmV3IFNldCgpO1xuICAgICAgICBjb25zdCBsb2NhbExhc3RBY3RpdmVFbGVtZW50VXBkYXRlcnMgPSBsYXN0QWN0aXZlRWxlbWVudFVwZGF0ZXJzLmdldCh3aW5kb3cpID8/IG5ldyBTZXQoKTtcbiAgICAgICAgY29uc3QgbG9jYWxXaW5kb3dGb2N1c2VkVXBkYXRlcnMgPSB3aW5kb3dGb2N1c2VkVXBkYXRlcnMuZ2V0KHdpbmRvdykgPz8gbmV3IFNldCgpO1xuXG4gICAgICAgIGNvbnN0IGxhZXUgPSB7IHNlbmQ6IHNldEFjdGl2ZUVsZW1lbnQgYXMgU3RhdGVVcGRhdGVyPE5vZGUgfCBudWxsPiwgbGFzdFNlbnQ6IHVuZGVmaW5lZCB9XG4gICAgICAgIGNvbnN0IGxsYWV1ID0geyBzZW5kOiBzZXRMYXN0QWN0aXZlRWxlbWVudCBhcyBTdGF0ZVVwZGF0ZXI8Tm9kZT4sIGxhc3RTZW50OiB1bmRlZmluZWQgfTtcbiAgICAgICAgY29uc3QgbHdmdSA9IHsgc2VuZDogc2V0V2luZG93Rm9jdXNlZCwgbGFzdFNlbnQ6IHVuZGVmaW5lZCB9O1xuXG4gICAgICAgIGxvY2FsQWN0aXZlRWxlbWVudFVwZGF0ZXJzLmFkZChsYWV1KTtcbiAgICAgICAgbG9jYWxMYXN0QWN0aXZlRWxlbWVudFVwZGF0ZXJzLmFkZChsbGFldSk7XG4gICAgICAgIGxvY2FsV2luZG93Rm9jdXNlZFVwZGF0ZXJzLmFkZChsd2Z1KTtcblxuICAgICAgICBhY3RpdmVFbGVtZW50VXBkYXRlcnMuc2V0KHdpbmRvdywgbG9jYWxBY3RpdmVFbGVtZW50VXBkYXRlcnMpO1xuICAgICAgICBsYXN0QWN0aXZlRWxlbWVudFVwZGF0ZXJzLnNldCh3aW5kb3csIGxvY2FsTGFzdEFjdGl2ZUVsZW1lbnRVcGRhdGVycyk7XG4gICAgICAgIHdpbmRvd0ZvY3VzZWRVcGRhdGVycy5zZXQod2luZG93LCBsb2NhbFdpbmRvd0ZvY3VzZWRVcGRhdGVycyk7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGFjdGl2ZUVsZW1lbnRVcGRhdGVycy5nZXQod2luZG93KSEuZGVsZXRlKGxhZXUpO1xuICAgICAgICAgICAgbGFzdEFjdGl2ZUVsZW1lbnRVcGRhdGVycy5nZXQod2luZG93KSEuZGVsZXRlKGxhZXUpO1xuICAgICAgICAgICAgd2luZG93Rm9jdXNlZFVwZGF0ZXJzLmdldCh3aW5kb3cpIS5kZWxldGUobHdmdSk7XG5cbiAgICAgICAgICAgIGlmIChhY3RpdmVFbGVtZW50VXBkYXRlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50Py5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBmb2N1c2luKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3Vzb3V0XCIsIGZvY3Vzb3V0KTtcbiAgICAgICAgICAgICAgICB3aW5kb3c/LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCB3aW5kb3dGb2N1cyk7XG4gICAgICAgICAgICAgICAgd2luZG93Py5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLCB3aW5kb3dCbHVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFtdKVxuXG4gICAgY29uc3QgW2dldEFjdGl2ZUVsZW1lbnQsIHNldEFjdGl2ZUVsZW1lbnRdID0gdXNlUGFzc2l2ZVN0YXRlPEVsZW1lbnQgfCBudWxsPihvbkFjdGl2ZUVsZW1lbnRDaGFuZ2UsIHJldHVybk51bGwpO1xuICAgIGNvbnN0IFtnZXRMYXN0QWN0aXZlRWxlbWVudCwgc2V0TGFzdEFjdGl2ZUVsZW1lbnRdID0gdXNlUGFzc2l2ZVN0YXRlPEVsZW1lbnQ+KG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UsIHJldHVybk51bGwgYXMgKCkgPT4gbmV2ZXIpO1xuICAgIGNvbnN0IFtnZXRXaW5kb3dGb2N1c2VkLCBzZXRXaW5kb3dGb2N1c2VkXSA9IHVzZVBhc3NpdmVTdGF0ZTxib29sZWFuPihvbldpbmRvd0ZvY3VzZWRDaGFuZ2UsIHJldHVyblRydWUpO1xuXG4gICAgcmV0dXJuIHsgZ2V0QWN0aXZlRWxlbWVudCwgZ2V0TGFzdEFjdGl2ZUVsZW1lbnQsIGdldFdpbmRvd0ZvY3VzZWQgfTtcbn1cbiIsIlxuaW1wb3J0IHsgQ29tcG9uZW50LCBvcHRpb25zLCBWTm9kZSB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IEVmZmVjdENhbGxiYWNrLCBJbnB1dHMsIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5cblxuXG5jb25zdCBUYWJsZSA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlfLVwiO1xuXG5mdW5jdGlvbiBiYXNlNjQodmFsdWU6IG51bWJlcikge1xuICAgIHJldHVybiBUYWJsZVt2YWx1ZV07XG59XG5cbmZ1bmN0aW9uIHJhbmRvbTZCaXRzKCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAwYjEwMDAwMDApO1xufVxuXG5mdW5jdGlvbiByYW5kb202NEJpdHMoKSB7XG4gICAgcmV0dXJuIFtyYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpXSBhcyBjb25zdDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmFuZG9tbHktZ2VuZXJhdGVkIElEIHdpdGggYW4gb3B0aW9uYWwgcHJlZml4LlxuICogTm90ZSB0aGF0IGlmIHRoZSBwcmVmaXggaXMgKmV4cGxpY2l0bHkqIHNldCB0byBcIlwiLCB0aGVuXG4gKiBJRHMgdGhhdCBhcmUgbm90IHZhbGlkIHVuZGVyIEhUTUw0IG1heSBiZSBnZW5lcmF0ZWQuIE9oIG5vLlxuICogXG4gKiBcbiAqIChUaGlzIGlzIGhlcmUsIGluIHRoaXMgcGFydGljdWxhciBmaWxlLCB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXNcbiAqIHdpdGhvdXQgYWxzbyBtYWtpbmcgYSB1dGlsaXRpZXMgZmlsZS5cbiAqIE9uY2Ugd2UgY2FuIHJlbW92ZSB0aGlzIGhvb2ssIHdlIGNhbiBwdXQgdGhpcyBmdW5jdGlvbiBiYWNrIHdpdGggdXNlUmFuZG9tSWQpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbUlkKHByZWZpeD86IHN0cmluZykge1xuICAgIHJldHVybiBgJHtwcmVmaXggPz8gXCJpZC1cIn0ke3JhbmRvbTY0Qml0cygpLm1hcChuID0+IGJhc2U2NChuKSkuam9pbihcIlwiKX1gO1xufVxuXG5jb25zdCBwcmV2aW91c0lucHV0cyA9IG5ldyBNYXA8c3RyaW5nLCBJbnB1dHMgfCB1bmRlZmluZWQ+KCk7XG5jb25zdCB0b1J1biA9IG5ldyBNYXA8c3RyaW5nLCB7IGVmZmVjdDogRWZmZWN0Q2FsbGJhY2ssIGlucHV0cz86IElucHV0cywgY2xlYW51cDogbnVsbCB8IHVuZGVmaW5lZCB8IHZvaWQgfCAoKCkgPT4gdm9pZCkgfT4oKTtcblxuXG4vLyBUT0RPOiBXaGV0aGVyIHRoaXMgZ29lcyBpbiBvcHRpb25zLmRpZmZlZCBvciBvcHRpb25zLl9jb21taXRcbi8vIGlzIGEgcG9zdC1zdXNwZW5zZSBxdWVzdGlvbi5cbi8vIFJpZ2h0IG5vdywgdXNpbmcgb3B0aW9ucy5fY29tbWl0IGhhcyB0aGUgcHJvYmxlbSBvZiBydW5uaW5nXG4vLyAqYWZ0ZXIqIHJlZnMgYXJlIGFwcGxpZWQsIGJ1dCB3ZSBuZWVkIHRvIGNvbWUgYmVmb3JlIGV2ZW4gdGhhdFxuLy8gc28gYHJlZj17c29tZVN0YWJsZUZ1bmN0aW9ufWAgd29ya3MuXG4vLyBcbi8vIEFsc28gaXQncyBwcml2YXRlLlxuLy9cbi8vIC4uLlxuLy8gV2VsbCwgdXNlRXZlbnQgb3Igd2hhdGV2ZXIgaXMgZmluYWxseSwgZmluYWxseSA0IHllYXJzIGxhdGVyIGZpbmFsbHkgaGVyZVxuLy8gd2hpY2ggaXMgY29vbCBhbmQgbWVhbnMgd2Ugd29uJ3QgbmVlZCB0aGlzIGF0IGFsbCBzb29uLlxuLy8gU28gZm9yIG5vdyB3ZSdsbCBzdGljayB3aXRoIGRpZmYgdG8gcHJldmVudCBhbnkgd2VpcmRuZXNzIHdpdGhcbi8vIGNvbW1pdCBiZWluZyBwcml2YXRlIGFuZCBhbGwuXG5jb25zdCBjb21taXROYW1lID0gXCJkaWZmZWRcIjtcblxuY29uc3Qgb3JpZ2luYWxDb21taXQgPSBvcHRpb25zW2NvbW1pdE5hbWVdIGFzICh2bm9kZTogVk5vZGUsIGNvbW1pdFF1ZXVlOiBDb21wb25lbnRbXSkgPT4gdm9pZDtcbmNvbnN0IG5ld0NvbW1pdDogdHlwZW9mIG9yaWdpbmFsQ29tbWl0ID0gKC4uLmFyZ3MpID0+IHtcbiAgICBmb3IgKGNvbnN0IFtpZCwgZWZmZWN0SW5mb10gb2YgdG9SdW4pIHtcbiAgICAgICAgY29uc3Qgb2xkSW5wdXRzID0gcHJldmlvdXNJbnB1dHMuZ2V0KGlkKTtcbiAgICAgICAgaWYgKGFyZ3NDaGFuZ2VkKG9sZElucHV0cywgZWZmZWN0SW5mby5pbnB1dHMpKSB7XG4gICAgICAgICAgICBlZmZlY3RJbmZvLmNsZWFudXA/LigpO1xuICAgICAgICAgICAgZWZmZWN0SW5mby5jbGVhbnVwID0gZWZmZWN0SW5mby5lZmZlY3QoKTtcbiAgICAgICAgICAgIHByZXZpb3VzSW5wdXRzLnNldChpZCwgZWZmZWN0SW5mby5pbnB1dHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvUnVuLmNsZWFyKCk7XG4gICAgb3JpZ2luYWxDb21taXQ/LiguLi5hcmdzKTtcbn1cbm9wdGlvbnNbY29tbWl0TmFtZV0gPSBuZXdDb21taXQgYXMgbmV2ZXJcblxuLyoqXG4gKiBTZW1pLXByaXZhdGUgZnVuY3Rpb24gdG8gYWxsb3cgc3RhYmxlIGNhbGxiYWNrcyBldmVuIHdpdGhpbiBgdXNlTGF5b3V0RWZmZWN0YCBhbmQgcmVmIGFzc2lnbm1lbnQuXG4gKiBcbiAqIEV2ZXJ5IHJlbmRlciwgd2Ugc2VuZCB0aGUgYXJndW1lbnRzIHRvIGJlIGV2YWx1YXRlZCBhZnRlciBkaWZmaW5nIGhhcyBjb21wbGV0ZWQsXG4gKiB3aGljaCBoYXBwZW5zIGJlZm9yZS5cbiAqIFxuICogQHBhcmFtIGVmZmVjdCBcbiAqIEBwYXJhbSBpbnB1dHMgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VCZWZvcmVMYXlvdXRFZmZlY3QoZWZmZWN0OiBFZmZlY3RDYWxsYmFjaywgaW5wdXRzPzogSW5wdXRzKSB7XG5cbiAgICAvKigoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNsZWFudXAgPSB1c2VSZWY8dm9pZCB8ICgoKSA9PiB2b2lkKSB8IG51bGw+KG51bGwpO1xuICAgICAgICBjb25zdCBwcmV2QXJnc1JlZiA9IHVzZVJlZjxJbnB1dHM+KG51bGwhKTtcbiAgICAgICAgaWYgKGFyZ3NDaGFuZ2VkKGlucHV0cywgcHJldkFyZ3NSZWYuY3VycmVudCkpIHtcbiAgICAgICAgICAgIHByZXZBcmdzUmVmLmN1cnJlbnQgPSBpbnB1dHMhO1xuICAgICAgICAgICAgaWYgKGNsZWFudXAuY3VycmVudClcbiAgICAgICAgICAgICAgICBjbGVhbnVwLmN1cnJlbnQoKTtcbiAgICAgICAgICAgIGNsZWFudXAuY3VycmVudCA9IGVmZmVjdCgpO1xuICAgICAgICB9XG4gICAgfSkoKTsqL1xuXG4gICAgY29uc3QgW2lkXSA9IHVzZVN0YXRlKCgpID0+IGdlbmVyYXRlUmFuZG9tSWQoKSk7XG4gICAgdG9SdW4uc2V0KGlkLCB7IGVmZmVjdCwgaW5wdXRzLCBjbGVhbnVwOiBudWxsIH0pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHRvUnVuLmRlbGV0ZShpZCk7XG4gICAgICAgICAgICBwcmV2aW91c0lucHV0cy5kZWxldGUoaWQpO1xuICAgICAgICB9XG4gICAgfSwgW2lkXSlcbn1cblxuZnVuY3Rpb24gYXJnc0NoYW5nZWQob2xkQXJncz86IElucHV0cywgbmV3QXJncz86IElucHV0cyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIShcbiAgICAgICAgIW9sZEFyZ3MgfHxcbiAgICAgICAgb2xkQXJncy5sZW5ndGggIT09IG5ld0FyZ3M/Lmxlbmd0aCB8fFxuICAgICAgICBuZXdBcmdzPy5zb21lKChhcmcsIGluZGV4KSA9PiBhcmcgIT09IG9sZEFyZ3NbaW5kZXhdKVxuICAgICk7XG59IiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCB7IHVzZUJlZm9yZUxheW91dEVmZmVjdCB9IGZyb20gXCIuL3VzZS1iZWZvcmUtbGF5b3V0LWVmZmVjdFwiO1xuXG5jb25zdCBVbnNldCA9IFN5bWJvbChcInVuc2V0XCIpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGlucHV0IHZhbHVlLCByZXR1cm5zIGEgY29uc3RhbnQgZ2V0dGVyIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgXG4gKiBpbnNpZGUgb2YgYHVzZUVmZmVjdGAgYW5kIGZyaWVuZHMgd2l0aG91dCBpbmNsdWRpbmcgaXQgaW4gdGhlIGRlcGVuZGVuY3kgYXJyYXkuXG4gKiBcbiAqIFRoaXMgdXNlcyBgb3B0aW9ucy5kaWZmZWRgIGluIG9yZGVyIHRvIHJ1biBiZWZvcmUgZXZlcnl0aGluZywgZXZlblxuICogcmVmIGFzc2lnbm1lbnQuIFRoaXMgbWVhbnMgdGhpcyBnZXR0ZXIgaXMgc2FmZSB0byB1c2UgYW55d2hlcmUgKioqZXhjZXB0IHRoZSByZW5kZXIgcGhhc2UqKiouXG4gKiBcbiAqIEBwYXJhbSB2YWx1ZSBcbiAqIEByZXR1cm5zIFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU3RhYmxlR2V0dGVyPFQ+KHZhbHVlOiBUKTogKCkgPT4gVCB7XG4gICAgY29uc3QgcmVmID0gdXNlUmVmPFQ+KFVuc2V0IGFzIHVua25vd24gYXMgVCk7XG4gICAgdXNlQmVmb3JlTGF5b3V0RWZmZWN0KCgpID0+IHsgcmVmLmN1cnJlbnQgPSB2YWx1ZTsgfSwgW3ZhbHVlXSk7XG4gICAgcmV0dXJuIHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgaWYgKHJlZi5jdXJyZW50IGFzIHVua25vd24gPT09IFVuc2V0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZhbHVlIHJldHJpZXZlZCBmcm9tIHVzZVN0YWJsZUdldHRlcigpIGNhbm5vdCBiZSBjYWxsZWQgZHVyaW5nIHJlbmRlci4nKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWYuY3VycmVudDtcbiAgICB9LCBbXSlcbn0iLCJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCB7IHVzZVN0YWJsZUdldHRlciB9IGZyb20gXCIuL3VzZS1zdGFibGUtZ2V0dGVyXCI7XG5cblxuLyoqXG4gKiBBbHRlcm5hdGUgdXNlQ2FsbGJhY2soKSB3aGljaCBhbHdheXMgcmV0dXJucyB0aGUgc2FtZSAod3JhcHBlZCkgZnVuY3Rpb24gcmVmZXJlbmNlXG4gKiBzbyB0aGF0IGl0IGNhbiBiZSBleGNsdWRlZCBmcm9tIHRoZSBkZXBlbmRlbmN5IGFycmF5cyBvZiBgdXNlRWZmZWN0YCBhbmQgZnJpZW5kcy5cbiAqIFxuICogRG8gbm90IHVzZSBkdXJpbmcgdGhlIHJlbmRlciBwaGFzZSEgIGB1c2VMYXlvdXRFZmZlY3RgIGlzIGZpbmUgdGhvdWdoLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU3RhYmxlQ2FsbGJhY2s8VCBleHRlbmRzICguLi5fYXJnczogYW55W10pID0+IGFueT4oZm46IFQpOiBUIHtcbiAgICBjb25zdCBjdXJyZW50Q2FsbGJhY2tHZXR0ZXIgPSB1c2VTdGFibGVHZXR0ZXI8VD4oZm4pO1xuXG4gICAgcmV0dXJuIHVzZUNhbGxiYWNrKCguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KTogUmV0dXJuVHlwZTxUPiA9PiB7XG4gICAgICAgIHJldHVybiBjdXJyZW50Q2FsbGJhY2tHZXR0ZXIoKSguLi5hcmdzKTtcbiAgICB9LCBbXSkgYXMgVDtcbn0iLCJpbXBvcnQgeyBDb21wb25lbnRDaGlsZHJlbiwgY3JlYXRlQ29udGV4dCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xuXG50eXBlIFJhZkNhbGxiYWNrVHlwZSA9IChtc1NpbmNlTGFzdDogbnVtYmVyLCB0YWc/OiBhbnkpID0+IHZvaWQ7XG5cbmludGVyZmFjZSBDb250ZXh0VHlwZSB7XG4gICAgYWRkQ2FsbGJhY2s6IChjYWxsYmFjazogUmFmQ2FsbGJhY2tUeXBlLCB0YWc/OiBhbnkpID0+IHZvaWQ7XG4gICAgcmVtb3ZlQ2FsbGJhY2s6IChjYWxsYmFjazogUmFmQ2FsbGJhY2tUeXBlKSA9PiB2b2lkO1xufVxuXG5jb25zdCBTaGFyZWRBbmltYXRpb25GcmFtZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0PG51bGwgfCBDb250ZXh0VHlwZT4obnVsbCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBQcm92aWRlQmF0Y2hlZEFuaW1hdGlvbkZyYW1lcyh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IENvbXBvbmVudENoaWxkcmVuIH0pIHtcblxuICAgIGNvbnN0IGFkZENhbGxiYWNrID0gdXNlQ2FsbGJhY2s8Q29udGV4dFR5cGVbXCJhZGRDYWxsYmFja1wiXT4oKGNhbGxiYWNrVG9CZUJhdGNoZWQsIHRhZykgPT4geyBhbGxDYWxsYmFja3MuY3VycmVudC5zZXQoY2FsbGJhY2tUb0JlQmF0Y2hlZCwgdGFnKTsgfSwgW10pO1xuICAgIGNvbnN0IHJlbW92ZUNhbGxiYWNrID0gdXNlQ2FsbGJhY2s8Q29udGV4dFR5cGVbXCJyZW1vdmVDYWxsYmFja1wiXT4oKGNhbGxiYWNrKSA9PiB7IGFsbENhbGxiYWNrcy5jdXJyZW50LmRlbGV0ZShjYWxsYmFjayk7IH0sIFtdKTtcblxuICAgIGNvbnN0IGNvbnRleHRJbmZvID0gdXNlUmVmPENvbnRleHRUeXBlPihudWxsISk7XG4gICAgaWYgKGNvbnRleHRJbmZvLmN1cnJlbnQgPT0gbnVsbClcbiAgICAgICAgY29udGV4dEluZm8uY3VycmVudCA9IHsgYWRkQ2FsbGJhY2ssIHJlbW92ZUNhbGxiYWNrIH07XG4gICAgY29uc3QgYWxsQ2FsbGJhY2tzID0gdXNlUmVmPE1hcDxSYWZDYWxsYmFja1R5cGUsIGFueT4+KG51bGwhKTtcbiAgICBpZiAoYWxsQ2FsbGJhY2tzLmN1cnJlbnQgPT0gbnVsbClcbiAgICAgICAgYWxsQ2FsbGJhY2tzLmN1cnJlbnQgPSBuZXcgTWFwKCk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBsZXQgaGFuZGxlID0gLTE7XG5cbiAgICAgICAgZnVuY3Rpb24gcmFmV2l0aEJhdGNoZWRDYWxsYmFja3MobXNTaW5jZUxhc3Q6IG51bWJlcikge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbYmF0Y2hlZFJhZkNhbGxiYWNrLCB0YWddIG9mIGFsbENhbGxiYWNrcy5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgYmF0Y2hlZFJhZkNhbGxiYWNrKG1zU2luY2VMYXN0LCB0YWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFuZGxlID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJhZldpdGhCYXRjaGVkQ2FsbGJhY2tzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhhbmRsZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShyYWZXaXRoQmF0Y2hlZENhbGxiYWNrcyk7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IGNhbmNlbEFuaW1hdGlvbkZyYW1lKGhhbmRsZSk7XG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFNoYXJlZEFuaW1hdGlvbkZyYW1lQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y29udGV4dEluZm8uY3VycmVudH0+XG4gICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvU2hhcmVkQW5pbWF0aW9uRnJhbWVDb250ZXh0LlByb3ZpZGVyPilcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VBbmltYXRpb25GcmFtZVBhcmFtZXRlcnMge1xuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHdpdGggZWZmZWN0aXZlbHkgdGhlIHNhbWUgcnVsZXMgYXMgYHJlcXVlc3RBbmltYXRpb25GcmFtZWBcbiAgICAgKiBcbiAgICAgKiBEb2Vzbid0IG5lZWQgdG8gYmUgc3RhYmxlLlxuICAgICAqL1xuICAgIGNhbGxiYWNrOiBudWxsIHwgKChtc1NpbmNlTGFzdDogbnVtYmVyKSA9PiB2b2lkKTtcbn1cblxuLyoqXG4gKiBUaGUgKG9wdGlvbmFsbHkgbm9uLXN0YWJsZSkgYGNhbGxiYWNrYCB5b3UgcHJvdmlkZSB3aWxsIHN0YXJ0IHJ1bm5pbmcgZXZlcnkgZnJhbWUgYWZ0ZXIgdGhlIGNvbXBvbmVudCBtb3VudHMuXG4gKiBcbiAqIFBhc3NpbmcgYG51bGxgIGlzIGZpbmUgYW5kIHNpbXBseSBzdG9wcyB0aGUgZWZmZWN0IHVudGlsIHlvdSByZXN0YXJ0IGl0IGJ5IHByb3ZpZGluZyBhIG5vbi1udWxsIGNhbGxiYWNrLlxuICogXG4gKiAqKlRoaXMgaG9vayBkb2VzIG5vdCByZXR1cm4gYW55dGhpbmcgYXQgYWxsLCBpbmNsdWRpbmcgbm8gcHJvcC1tb2RpZnlpbmcgaG9va3MqKlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQW5pbWF0aW9uRnJhbWUoeyBjYWxsYmFjayB9OiBVc2VBbmltYXRpb25GcmFtZVBhcmFtZXRlcnMpOiB2b2lkIHtcbiAgICAvLyBHZXQgYSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2l2ZW4gY2FsbGJhY2sgdGhhdCdzIHN0YWJsZVxuICAgIGNvbnN0IHN0YWJsZUNhbGxiYWNrID0gdXNlU3RhYmxlQ2FsbGJhY2soY2FsbGJhY2sgPz8gbm9vcCk7XG4gICAgY29uc3QgaGFzQ2FsbGJhY2sgPSAoY2FsbGJhY2sgIT0gbnVsbCk7XG5cbiAgICBjb25zdCBzaGFyZWRBbmltYXRpb25GcmFtZUNvbnRleHQgPSB1c2VDb250ZXh0KFNoYXJlZEFuaW1hdGlvbkZyYW1lQ29udGV4dCk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoc2hhcmVkQW5pbWF0aW9uRnJhbWVDb250ZXh0KSB7XG4gICAgICAgICAgICBpZiAoaGFzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBzaGFyZWRBbmltYXRpb25GcmFtZUNvbnRleHQuYWRkQ2FsbGJhY2soc3RhYmxlQ2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2hhcmVkQW5pbWF0aW9uRnJhbWVDb250ZXh0LnJlbW92ZUNhbGxiYWNrKHN0YWJsZUNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChoYXNDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIC8vIEdldCBhIHdyYXBwZXIgYXJvdW5kIHRoZSB3cmFwcGVyIGFyb3VuZCB0aGUgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAvLyB0aGF0IGFsc28gY2FsbHMgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAgYWdhaW4uXG4gICAgICAgICAgICAgICAgY29uc3QgcmFmQ2FsbGJhY2sgPSAobXM6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmFmQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICBzdGFibGVDYWxsYmFjayhtcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBoYW5kbGUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmFmQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBjYW5jZWxBbmltYXRpb25GcmFtZShoYW5kbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgW3NoYXJlZEFuaW1hdGlvbkZyYW1lQ29udGV4dCwgaGFzQ2FsbGJhY2tdKVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbmZ1bmN0aW9uIG5vb3AoKSB7IH1cbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdDtcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbmV4cG9ydCBkZWZhdWx0IGZyZWVHbG9iYWw7XG4iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnQgZGVmYXVsdCByb290O1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5leHBvcnQgZGVmYXVsdCBTeW1ib2w7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdFRvU3RyaW5nO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGdldFJhd1RhZyBmcm9tICcuL19nZXRSYXdUYWcuanMnO1xuaW1wb3J0IG9iamVjdFRvU3RyaW5nIGZyb20gJy4vX29iamVjdFRvU3RyaW5nLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3RMaWtlO1xuIiwiXG5pbXBvcnQgeyBTdGF0ZVVwZGF0ZXIsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIGFzIHVzZVN0YXRlUCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcblxuLyoqXG4gKiBTbGlnaHRseSBlbmhhbmNlZCB2ZXJzaW9uIG9mIGB1c2VTdGF0ZWAgdGhhdCBpbmNsdWRlcyBhIGdldHRlciB0aGF0IHJlbWFpbnMgY29uc3RhbnRcbiAqIChpLmUuIHlvdSBjYW4gdXNlIGl0IGluIGB1c2VFZmZlY3RgIGFuZCBmcmllbmRzIHdpdGhvdXQgaXQgYmVpbmcgYSBkZXBlbmRlbmN5KS5cbiAqIFxuICogQHBhcmFtIGluaXRpYWxTdGF0ZSBcbiAqIEByZXR1cm5zIFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU3RhdGU8VD4oaW5pdGlhbFN0YXRlOiBUIHwgKCgpID0+IFQpKTogcmVhZG9ubHkgW3ZhbHVlOiBULCBzZXRWYWx1ZTogU3RhdGVVcGRhdGVyPFQ+LCBnZXRWYWx1ZTogKCkgPT4gVF0ge1xuXG4gICAgLy8gV2Uga2VlcCBib3RoLCBidXQgb3ZlcnJyaWRlIHRoZSBgc2V0U3RhdGVgIGZ1bmN0aW9uYWxpdHlcbiAgICBjb25zdCBbc3RhdGUsIHNldFN0YXRlUF0gPSB1c2VTdGF0ZVAoaW5pdGlhbFN0YXRlKTtcbiAgICBjb25zdCByZWYgPSB1c2VSZWYoc3RhdGUpO1xuXG4gICAgLy8gSGlqYWNrIHRoZSBub3JtYWwgc2V0dGVyIGZ1bmN0aW9uIFxuICAgIC8vIHRvIGFsc28gc2V0IG91ciByZWYgdG8gdGhlIG5ldyB2YWx1ZVxuICAgIGNvbnN0IHNldFN0YXRlID0gdXNlQ2FsbGJhY2s8U3RhdGVVcGRhdGVyPFQ+Pih2YWx1ZSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSB2YWx1ZSBhcyAoKF9wcmV2VmFsdWU6IFQpID0+IFQpO1xuICAgICAgICAgICAgc2V0U3RhdGVQKHByZXZWYWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dFZhbHVlID0gY2FsbGJhY2socHJldlZhbHVlKTtcbiAgICAgICAgICAgICAgICByZWYuY3VycmVudCA9IG5leHRWYWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dFZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICAgICAgICAgICAgc2V0U3RhdGVQKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IGdldFN0YXRlID0gKCkgPT4geyByZXR1cm4gcmVmLmN1cnJlbnQ7IH07XG5cblxuICAgIGNvbnNvbGUuYXNzZXJ0KHJlZi5jdXJyZW50ID09PSBzdGF0ZSB8fCAodHlwZW9mIHN0YXRlID09PSBcIm51bWJlclwiICYmIGlzTmFOKHN0YXRlKSkpO1xuICAgIHJldHVybiBbc3RhdGUsIHNldFN0YXRlLCBnZXRTdGF0ZV0gYXMgY29uc3Q7XG59IiwiaW1wb3J0IHsgU3RhdGVVcGRhdGVyLCB1c2VDYWxsYmFjaywgdXNlTGF5b3V0RWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5pbXBvcnQgeyBPblBhc3NpdmVTdGF0ZUNoYW5nZSwgdXNlRW5zdXJlU3RhYmlsaXR5LCB1c2VQYXNzaXZlU3RhdGUsIGRlYm91bmNlUmVuZGVyaW5nIH0gZnJvbSBcIi4vdXNlLXBhc3NpdmUtc3RhdGVcIjtcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xuXG4vKipcbiAqIFJlbWluZGVyIG9mIG9yZGVyIG9mIGV4ZWN1dGlvbjpcbiAqIFxuICogKiAodHJlZSBtb3VudHMpXG4gKiAqIFBhcmVudCByZW5kZXJzXG4gKiAqIENoaWxkcmVuIHJlbmRlclxuICogKiBDaGlsZHJlbiByZWNlaXZlIHJlZiAoaWYgYXBwbGljYWJsZSlcbiAqICogUGFyZW50IHJlY2VpdmVzIHJlZiAoaWYgYXBwbGljYWJsZSlcbiAqICogQ2hpbGRyZW4gcnVuIGVmZmVjdHNcbiAqICogUGFyZW50IHJ1bnMgZWZmZWN0c1xuICogXG4gKiAqICh0cmVlIHVubW91bnRzKVxuICogKiBQYXJlbnQgcnVucyBlZmZlY3QtY2xlYW51cFxuICogKiBQYXJlbnQgZGVsZXRlcyByZWYgKGlmIGFwcGxpY2FibGUpXG4gKiAqIENoaWxkIHJ1bnMgZWZmZWN0LWNsZWFudXBcbiAqICogQ2hpbGQgZGVsZXRlcyByZWYgKGlmIGFwcGxpY2FibGUpXG4gKiBcbiAqIFR3byB0aGluZ3MgdG8gbm90ZSBoZXJlOlxuICogKiBSZW5kZXJpbmcgc3RhcnRzIGF0IHRoZSByb290LCAgYnV0IGVmZmVjdHMgYW5kIHJlZnMgc3RhcnQgYXQgdGhlIGxlYXZlcy5cbiAqICogcmVmcyBhcmUgKnVzdWFsbHkqIGNhbGxlZCBiZWZvcmUgZWZmZWN0cywgYnV0IG9ubHkgd2hlbiB0aGF0IEhUTUxFbGVtZW50IHJlbmRlcnMuIEJhc2ljYWxseSBqdXN0IGEgcmVtaW5kZXIgdGhhdCBhIGNvbXBvbmVudCBjYW4gYmUgbW91bnRlZCB3aXRob3V0IGl0IGV4aXN0aW5nIGluIHRoZSBET00uXG4gKi9cbmNvbnN0IF9jb21tZW50cyA9IHZvaWQgKDApO1xuXG5cbi8qKlxuICogSW5mb3JtYXRpb24gdGhhdCBjaGlsZHJlbiBhbmQgcGFyZW50cyB1c2UgdG8gY29tbXVuaWNhdGUgd2l0aCBlYWNoIG90aGVyLlxuICogXG4gKiAqIGBpbmRleGAgcmVmZXJzIHRvIHdoaWNoIGNoaWxkIHRoaXMgaXMuXG4gKiAqIGBmbGFnc2AgYXJlIHF1aWNrLWFuZC1lYXN5IGdldHRlcnMgYW5kIHNldHRlcnMgdGhhdCB5b3UgY2FuIG9wdGlvbmFsbHkgdXNlXG4gKiAqIGBzdWJJbmZvYCBpcyBhbnl0aGluZyB1c2VkIGJ5IGEgZGVyaXZlZCBob29rLiBgdXNlUm92aW5nVGFiSW5kZXhgLCBmb3IgZXhhbXBsZSwgbmVlZHMgdG8ga25vdyBob3cgdG8gZm9jdXMgYW4gYXJiaXRyYXJ5IGNoaWxkLCBzbyB0aGUgY2hpbGQgcG9wdWxhdGVzIGBpbmZvYCB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIGEgbWV0aG9kIGNhbGxlZCBgZm9jdXNTZWxmYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNYW5hZ2VkQ2hpbGRJbmZvPFQgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXIsIEMsIEsgZXh0ZW5kcyBzdHJpbmc+IHtcbiAgICBpbmRleDogVDtcbiAgICBmbGFncz86IFBhcnRpYWw8UmVjb3JkPEssIENoaWxkRmxhZ09wZXJhdGlvbnM+PjtcbiAgICBzdWJJbmZvOiBDO1xufVxuXG5cblxuZXhwb3J0IHR5cGUgT25DaGlsZHJlbk1vdW50Q2hhbmdlPFQgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXI+ID0gKChtb3VudGVkOiBTZXQ8VD4sIHVubW91bnRlZDogU2V0PFQ+KSA9PiB2b2lkKTtcbmV4cG9ydCB0eXBlIE9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdDxUIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyPiA9ICgoY2F1c2VyczogSXRlcmFibGU8VD4pID0+IHZvaWQpO1xuXG5pbnRlcmZhY2UgTUNQPFQgZXh0ZW5kcyBudW1iZXIgfCBzdHJpbmc+IHtcbiAgICAvKipcbiAgICAgKiBSdW5zIGFmdGVyIG9uZSBvciBtb3JlIGNoaWxkcmVuIGhhdmUgdXBkYXRlZCB0aGVpciBpbmZvcm1hdGlvbiAoaW5kZXgsIGV0Yy4pLlxuICAgICAqIFxuICAgICAqIE9ubHkgb25lIHdpbGwgcnVuIHBlciB0aWNrLCBqdXN0IGxpa2UgbGF5b3V0RWZmZWN0LCBidXQgaXQgaXNuJ3RcbiAgICAgKiAqZ3VhcmFudGVlZCogdG8gaGF2ZSBhY3R1YWxseSBiZWVuIGEgY2hhbmdlLlxuICAgICAqL1xuICAgIG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdD86IG51bGwgfCB1bmRlZmluZWQgfCBPbkFmdGVyQ2hpbGRMYXlvdXRFZmZlY3Q8VD47XG5cbiAgICAvKipcbiAgICAgKiBTYW1lIGFzIHRoZSBhYm92ZSwgYnV0IG9ubHkgZm9yIG1vdW50L3VubW91bnQgKG9yIHdoZW4gYSBjaGlsZCBjaGFuZ2VzIGl0cyBpbmRleClcbiAgICAgKi9cbiAgICBvbkNoaWxkcmVuTW91bnRDaGFuZ2U/OiBudWxsIHwgdW5kZWZpbmVkIHwgT25DaGlsZHJlbk1vdW50Q2hhbmdlPFQ+O1xufVxuXG5leHBvcnQgdHlwZSBNYW5hZ2VkQ2hpbGRyZW5PbWl0cyA9IGtleW9mIE1DUDxhbnk+O1xuZXhwb3J0IHR5cGUgTWFuYWdlZENoaWxkT21pdHMgPSBrZXlvZiBNYW5hZ2VkQ2hpbGRJbmZvPGFueSwgYW55LCBhbnk+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZU1hbmFnZWRDaGlsZHJlblBhcmFtZXRlcnM8VCBleHRlbmRzIG51bWJlciB8IHN0cmluZywgT21pdHMgZXh0ZW5kcyBrZXlvZiBNQ1A8VD4+IHtcbiAgICBtYW5hZ2VkQ2hpbGRyZW46IE9taXQ8TUNQPFQ+LCBPbWl0cz47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlTWFuYWdlZENoaWxkUGFyYW1ldGVyczxUIGV4dGVuZHMgbnVtYmVyIHwgc3RyaW5nLCBDLCBLIGV4dGVuZHMgc3RyaW5nLCBNY09taXRzIGV4dGVuZHMgTWFuYWdlZENoaWxkT21pdHM+IHtcbiAgICBtYW5hZ2VkQ2hpbGQ6IE9taXQ8TWFuYWdlZENoaWxkSW5mbzxULCBDLCBLPiwgTWNPbWl0cz47XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBVc2VNYW5hZ2VkQ2hpbGRyZW5SZXR1cm5UeXBlSW5mbzxUIGV4dGVuZHMgbnVtYmVyIHwgc3RyaW5nLCBDLCBLIGV4dGVuZHMgc3RyaW5nPiB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2hpbGQgdGhhdCByZW5kZXJlZCBpdHNlbGYgd2l0aCB0aGUgcmVxdWVzdGVkIGtleS5cbiAgICAgKiBcbiAgICAgKiAqKlNUQUJMRSoqIChldmVuIHRob3VnaCBpdCdzIG5vdCBhIGZ1bmN0aW9uLCB0aGUgaWRlbnRpdHkgb2YgdGhpcyBvYmplY3QgbmV2ZXIgY2hhbmdlcylcbiAgICAgKi9cbiAgICBtYW5hZ2VkQ2hpbGRyZW46IHtcbiAgICAgICAgY2hpbGRyZW46IE1hbmFnZWRDaGlsZHJlbjxULCBDLCBLPjtcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlTWFuYWdlZENoaWxkcmVuUmV0dXJuVHlwZVdpdGhIb29rczxUIGV4dGVuZHMgbnVtYmVyIHwgc3RyaW5nLCBDLCBLIGV4dGVuZHMgc3RyaW5nPiBleHRlbmRzIFVzZU1hbmFnZWRDaGlsZHJlblJldHVyblR5cGVJbmZvPFQsIEMsIEs+IHtcbiAgICAvKipcbiAgICAgKiBBIGhvb2sgdGhhdCBtdXN0IGJlIGNhbGxlZCBieSBldmVyeSBjaGlsZCBjb21wb25lbnQgdGhhdFxuICAgICAqIGlzIHRvIGJlIG1hbmFnZWQgYnkgdGhpcyBvbmUuIFRoZSBhcmd1bWVudCB0byB0aGUgaG9va1xuICAgICAqIGlzIGp1c3QgdGhlIGJhZyBvZiBwcm9wZXJ0aWVzIHRvIHBhc3MgdG8gdGhlIHBhcmVudCxcbiAgICAgKiBpbmNsdWRpbmcgdGhlIGNoaWxkJ3MgaW5kZXguXG4gICAgICogXG4gICAgICogKipTVEFCTEUqKlxuICAgICAqL1xuICAgIHVzZU1hbmFnZWRDaGlsZDogVXNlTWFuYWdlZENoaWxkPFQsIEMsIEs+O1xufVxuXG5leHBvcnQgdHlwZSBVc2VNYW5hZ2VkQ2hpbGRSZXR1cm5UeXBlID0gdm9pZDtcblxuZXhwb3J0IHR5cGUgVXNlTWFuYWdlZENoaWxkPFQgZXh0ZW5kcyBudW1iZXIgfCBzdHJpbmcsIEMsIEsgZXh0ZW5kcyBzdHJpbmc+ID0gKGE6IFVzZU1hbmFnZWRDaGlsZFBhcmFtZXRlcnM8VCwgQywgSywgbmV2ZXI+KSA9PiBVc2VNYW5hZ2VkQ2hpbGRSZXR1cm5UeXBlO1xuXG5cblxuXG5cblxuLyoqXG4gKiBBYnN0cmFjdGlvbiBvdmVyIHRoZSBtYW5hZ2VkIGNoaWxkcmVuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWFuYWdlZENoaWxkcmVuPFQgZXh0ZW5kcyBudW1iZXIgfCBzdHJpbmcsIEMsIEsgZXh0ZW5kcyBzdHJpbmc+IHtcbiAgICAvKiogU1RBQkxFICovXG4gICAgZ2V0QXQoaW5kZXg6IFQpOiBNYW5hZ2VkQ2hpbGRJbmZvPFQsIEMsIEs+IHwgdW5kZWZpbmVkO1xuICAgIC8qKiBTVEFCTEUgKi9cbiAgICBnZXRIaWdoZXN0SW5kZXgoKTogbnVtYmVyO1xuICAgIC8qKiBTVEFCTEUgKi9cbiAgICBmb3JFYWNoOiAoZjogKGNoaWxkOiBNYW5hZ2VkQ2hpbGRJbmZvPFQsIEMsIEs+KSA9PiB2b2lkKSA9PiB2b2lkO1xuXG4gICAgLyoqICoqVU5TVEFCTEUqKiwgYWxzbyBpbnRlcm5hbC11c2Ugb25seSwgYWxzbyBUT0RPIG5lZWQgYSB3b3JrYXJvdW5kIGZvciB0aGlzIGZvciBzb3J0YWJsZSBjaGlsZHJlbiAqL1xuICAgIGFycmF5U2xpY2U6ICgpID0+IE1hbmFnZWRDaGlsZEluZm88VCwgQywgSz5bXTtcbn1cblxuXG5cblxuLy9leHBvcnQgdHlwZSBVc2VNYW5hZ2VkQ2hpbGRQYXJhbWV0ZXJzPEkgZXh0ZW5kcyB7fT4gPSB7IGluZm86IEkgfTtcblxuLyoqXG4gKiBBbGxvd3MgYSBwYXJlbnQgY29tcG9uZW50IHRvIGFjY2VzcyBpbmZvcm1hdGlvbiBhYm91dCBjZXJ0YWluXG4gKiBjaGlsZCBjb21wb25lbnRzIG9uY2UgdGhleSBoYXZlIHJlbmRlcmVkLlxuICogXG4gKiBUaGlzIGhvb2sgaXMgZGVzaWduZWQgdG8gYmUgbGlnaHR3ZWlnaHQsIGluIHRoYXQgdGhlIHBhcmVudCBrZWVwcyBubyBzdGF0ZVxuICogYW5kIHJ1bnMgbm8gZWZmZWN0cy4gIEVhY2ggY2hpbGQgKmRvZXMqIHJ1biBhbiBlZmZlY3QsIGJ1dCB3aXRoIG5vIHN0YXRlXG4gKiBjaGFuZ2VzIHVubGVzcyB5b3UgZXhwbGljaXRseSByZXF1ZXN0IHRoZW0uXG4gKiBcbiAqIFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTWFuYWdlZENoaWxkcmVuPFQgZXh0ZW5kcyBudW1iZXIgfCBzdHJpbmcsIEMsIEsgZXh0ZW5kcyBzdHJpbmc+KHBhcmVudFBhcmFtZXRlcnM6IFVzZU1hbmFnZWRDaGlsZHJlblBhcmFtZXRlcnM8VCwgbmV2ZXI+KTogVXNlTWFuYWdlZENoaWxkcmVuUmV0dXJuVHlwZVdpdGhIb29rczxULCBDLCBLPiB7XG4gICAgLy90eXBlIEkgPSBJMyAmIE1hbmFnZWRDaGlsZEluZm9CYXNlPHN0cmluZyB8IG51bWJlcj47XG4gICAgdHlwZSBJbmZvID0gTWFuYWdlZENoaWxkSW5mbzxULCBDLCBLPjtcblxuICAgIGNvbnN0IHsgbWFuYWdlZENoaWxkcmVuOiB7IG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdCwgb25DaGlsZHJlbk1vdW50Q2hhbmdlIH0gfSA9IHBhcmVudFBhcmFtZXRlcnM7XG5cbiAgICB1c2VFbnN1cmVTdGFiaWxpdHkoXCJ1c2VNYW5hZ2VkQ2hpbGRyZW5cIiwgb25BZnRlckNoaWxkTGF5b3V0RWZmZWN0LCBvbkNoaWxkcmVuTW91bnRDaGFuZ2UpO1xuXG4gICAgY29uc3QgZ2V0SGlnaGVzdEluZGV4ID0gdXNlQ2FsbGJhY2soKCk6IG51bWJlciA9PiB7XG4gICAgICAgIHJldHVybiBtYW5hZ2VkQ2hpbGRyZW5BcnJheS5jdXJyZW50LmhpZ2hlc3RJbmRleDtcbiAgICB9LCBbXSk7XG5cbiAgICAvLyBBbGwgdGhlIGluZm9ybWF0aW9uIHdlIGhhdmUgYWJvdXQgb3VyIGNoaWxkcmVuIGlzIHN0b3JlZCBpbiB0aGlzICoqc3RhYmxlKiogYXJyYXkuXG4gICAgLy8gQW55IG11dGF0aW9ucyB0byB0aGlzIGFycmF5ICoqRE8gTk9UKiogdHJpZ2dlciBhbnkgc29ydCBvZiBhIHJlLXJlbmRlci5cbiAgICBjb25zdCBtYW5hZ2VkQ2hpbGRyZW5BcnJheSA9IHVzZVJlZjx7IGFycjogQXJyYXk8SW5mbz47IHJlYzogUGFydGlhbDxSZWNvcmQ8VCwgSW5mbz4+OyBoaWdoZXN0SW5kZXg6IG51bWJlciwgbG93ZXN0SW5kZXg6IG51bWJlciB9Pih7IGFycjogW10sIHJlYzoge30sIGhpZ2hlc3RJbmRleDogMCwgbG93ZXN0SW5kZXg6IDAgfSk7XG5cbiAgICAvLyBGb3IgaW5kaXJlY3QgYWNjZXNzIHRvIGVhY2ggY2hpbGRcbiAgICAvLyBDb21wYXJlIGdldE1hbmFnZWRDaGlsZEluZm9cbiAgICAvLyBUT0RPOiBUaGUgcHJpbWFyeSB1c2UgZm9yIHRoaXMgaXMgZmxhZ2dhYmxlIGNsb3Nlc3QgZml0c1xuICAgIC8vIHdoaWNoIG5lZWRzIHRvIHNlYXJjaCBhbGwgY2hpbGRyZW4gZm9yIHRoYXQgY2xvc2VzdCBmaXQuXG4gICAgLy8gSXQgd291bGQgYmUgbmljZSBpZiB0aGVyZSB3YXMgc29tZXRoaW5nIGJldHRlciBmb3IgdGhhdC5cbiAgICBjb25zdCBmb3JFYWNoQ2hpbGQgPSB1c2VDYWxsYmFjaygoZjogKGNoaWxkOiBJbmZvKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgbWFuYWdlZENoaWxkcmVuQXJyYXkuY3VycmVudC5hcnIpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZClcbiAgICAgICAgICAgICAgICBmKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIGluIG1hbmFnZWRDaGlsZHJlbkFycmF5LmN1cnJlbnQucmVjKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZDogSW5mbyB8IHVuZGVmaW5lZCA9IG1hbmFnZWRDaGlsZHJlbkFycmF5LmN1cnJlbnQucmVjW2ZpZWxkIGFzIGtleW9mIFJlY29yZDxULCBJbmZvPl07XG4gICAgICAgICAgICBpZiAoY2hpbGQpXG4gICAgICAgICAgICAgICAgZihjaGlsZCk7XG4gICAgICAgIH1cbiAgICB9LCBbXSlcblxuICAgIC8vIFJldHJpZXZlcyB0aGUgaW5mb3JtYXRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBjaGlsZCB3aXRoIHRoZSBnaXZlbiBpbmRleC5cbiAgICAvLyBgdW5kZWZpbmVkYCBpZiBub3QgY2hpbGQgdGhlcmUsIG9yIGl0J3MgdW5tb3VudGVkLlxuICAgIGNvbnN0IGdldE1hbmFnZWRDaGlsZEluZm8gPSB1c2VDYWxsYmFjazxNYW5hZ2VkQ2hpbGRyZW48VCwgQywgSz5bXCJnZXRBdFwiXT4oKGluZGV4OiBUKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5kZXggPT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHJldHVybiBtYW5hZ2VkQ2hpbGRyZW5BcnJheS5jdXJyZW50LmFycltpbmRleCBhcyBudW1iZXJdITtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIG1hbmFnZWRDaGlsZHJlbkFycmF5LmN1cnJlbnQucmVjW2luZGV4IGFzIFRdITtcbiAgICB9LCBbXSlcblxuICAgIC8vIHRsO2RyIHRoaXMgaXMgYSB3YXkgdG8gaGF2ZSBydW4gdXNlTGF5b3V0RWZmZWN0IG9uY2UgYWZ0ZXIgYWxsIE4gY2hpbGRyZW5cbiAgICAvLyBoYXZlIG1vdW50ZWQgYW5kIHJ1biAqdGhlaXIqIHVzZUxheW91dEVmZmVjdCwgYnV0IGFsc28gKndpdGhvdXQqIHJlLXJlbmRlcmluZ1xuICAgIC8vIG91cnNlbHZlcyBiZWNhdXNlIG9mIGhhdmluZyBhIGBjaGlsZENvdW50YCBzdGF0ZSBvciBhbnl0aGluZyBzaW1pbGFyLlxuICAgIC8vXG4gICAgLy8gV2hlbiB0aGUgY2hpbGQgY291bnQgcmVmIHVwZGF0ZXMsIHdlIHdhbnQgdGhlIHBhcmVudCB0byBhbHNvIHJ1biBhbiBlZmZlY3RcbiAgICAvLyB0byBtYXliZSBkbyBzb21ldGhpbmcgd2l0aCBhbGwgdGhlc2UgY2hpbGRyZW4gdGhhdCBqdXN0IG1vdW50ZWQuXG4gICAgLy8gVGhlIGVhc2llc3Qgd2F5IHdvdWxkIGJlIHVzZUVmZmVjdCguLi4sIFtjaGlsZENvdW50XSkgYnV0XG4gICAgLy8gdGhhdCB3b3VsZCByZXF1aXJlIHVzIGhhdmluZyBhIGNoaWxkQ291bnQgc3RhdGUsIHRoZW4gY2FsbGluZ1xuICAgIC8vIHNldENoaWxkQ291bnQgYW5kIHJlLXJlbmRlcmluZyBldmVyeSB0aW1lIGNoaWxkcmVuIG1vdW50XG4gICAgLy8gKG9ubHkgb25lIHJlLXJlbmRlciBhdCBhIHRpbWUgdW5sZXNzIGNoaWxkcmVuIGFyZSBzdGFnZ2VyZWQsIGJ1dCBzdGlsbClcbiAgICAvLyBcbiAgICAvLyBBcyBhbiBhbHRlcm5hdGUgc29sdXRpb24sIGFueSB0aW1lIGEgY2hpbGQgdXNlcyBVTEUgb24gbW91bnQsIGl0IHF1ZXVlcyBhIG1pY3JvdGFza1xuICAgIC8vIHRvIGVtdWxhdGUgcnVubmluZyBVTEUgb24gdGhlIHBhcmVudC4gT25seSB0aGUgZmlyc3QgY2hpbGQgd2lsbCBhY3R1YWxseSBxdWV1ZVxuICAgIC8vIHRoZSBtaWNyb3Rhc2sgKGJ5IGNoZWNraW5nIGhhc1JlbW90ZVVMRSBmaXJzdCkgc28gdGhhdCB0aGUgXCJlZmZlY3RcIiBvbmx5XG4gICAgLy8gcnVucyBvbmNlLiBXaGVuIGl0J3MgZG9uZSwgaGFzUmVtb3RlVUxFIGlzIHJlc2V0IHNvIGl0IGNhbiBydW4gYWdhaW4gaWZcbiAgICAvLyBtb3JlIGNoaWxkcmVuIG1vdW50L3VubW91bnQuXG4gICAgY29uc3QgaGFzUmVtb3RlVUxFQ2hpbGRNb3VudGVkID0gdXNlUmVmPHsgbW91bnRzOiBTZXQ8VD4sIHVubW91bnRzOiBTZXQ8VD4gfSB8IG51bGw+KG51bGwpO1xuICAgIGNvbnN0IHJlbW90ZVVMRUNoaWxkQ2hhbmdlZENhdXNlcnMgPSB1c2VSZWYobmV3IFNldDxUPigpKTtcbiAgICBjb25zdCByZW1vdGVVTEVDaGlsZENoYW5nZWQgPSB1c2VDYWxsYmFjaygoaW5kZXg6IFQpID0+IHtcblxuICAgICAgICBpZiAocmVtb3RlVUxFQ2hpbGRDaGFuZ2VkQ2F1c2Vycy5jdXJyZW50LnNpemUgPT0gMCkge1xuICAgICAgICAgICAgZGVib3VuY2VSZW5kZXJpbmcoKCkgPT4ge1xuICAgICAgICAgICAgICAgIG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdD8uKHJlbW90ZVVMRUNoaWxkQ2hhbmdlZENhdXNlcnMuY3VycmVudCk7XG4gICAgICAgICAgICAgICAgcmVtb3RlVUxFQ2hpbGRDaGFuZ2VkQ2F1c2Vycy5jdXJyZW50LmNsZWFyKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlbW90ZVVMRUNoaWxkQ2hhbmdlZENhdXNlcnMuY3VycmVudC5hZGQoaW5kZXgpO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7IH07XG5cbiAgICB9LCBbLyogTXVzdCByZW1haW4gc3RhYmxlICovXSk7XG5cbiAgICBjb25zdCByZW1vdGVVTEVDaGlsZE1vdW50ZWQgPSB1c2VDYWxsYmFjaygoaW5kZXg6IFQsIG1vdW50ZWQ6IGJvb2xlYW4pOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKCFoYXNSZW1vdGVVTEVDaGlsZE1vdW50ZWQuY3VycmVudCkge1xuICAgICAgICAgICAgaGFzUmVtb3RlVUxFQ2hpbGRNb3VudGVkLmN1cnJlbnQgPSB7XG4gICAgICAgICAgICAgICAgbW91bnRzOiBuZXcgU2V0KCksXG4gICAgICAgICAgICAgICAgdW5tb3VudHM6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWJvdW5jZVJlbmRlcmluZygoKSA9PiB7XG4gICAgICAgICAgICAgICAgb25DaGlsZHJlbk1vdW50Q2hhbmdlPy4oaGFzUmVtb3RlVUxFQ2hpbGRNb3VudGVkLmN1cnJlbnQhLm1vdW50cywgaGFzUmVtb3RlVUxFQ2hpbGRNb3VudGVkLmN1cnJlbnQhLnVubW91bnRzKVxuICAgICAgICAgICAgICAgIGhhc1JlbW90ZVVMRUNoaWxkTW91bnRlZC5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1vdW50ZWQpIHtcbiAgICAgICAgICAgIG1hbmFnZWRDaGlsZHJlbkFycmF5LmN1cnJlbnQuaGlnaGVzdEluZGV4ID0gTWF0aC5tYXgobWFuYWdlZENoaWxkcmVuQXJyYXkuY3VycmVudC5oaWdoZXN0SW5kZXgsIGluZGV4IGFzIG51bWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGluZGV4ID09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgbWFuYWdlZENoaWxkcmVuQXJyYXkuY3VycmVudC5hcnJbaW5kZXggYXMgbnVtYmVyXTtcbiAgICAgICAgICAgICAgICBsZXQgc2hhdmUgPSAwO1xuICAgICAgICAgICAgICAgIHdoaWxlIChzaGF2ZSA8PSBtYW5hZ2VkQ2hpbGRyZW5BcnJheS5jdXJyZW50LmFyci5sZW5ndGggJiYgbWFuYWdlZENoaWxkcmVuQXJyYXkuY3VycmVudC5hcnJbbWFuYWdlZENoaWxkcmVuQXJyYXkuY3VycmVudC5hcnIubGVuZ3RoIC0gMSAtIHNoYXZlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICsrc2hhdmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1hbmFnZWRDaGlsZHJlbkFycmF5LmN1cnJlbnQuYXJyLnNwbGljZShtYW5hZ2VkQ2hpbGRyZW5BcnJheS5jdXJyZW50LmFyci5sZW5ndGggLSBzaGF2ZSwgc2hhdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGRlbGV0ZSBtYW5hZ2VkQ2hpbGRyZW5BcnJheS5jdXJyZW50LnJlY1tpbmRleCBhcyBUXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhhc1JlbW90ZVVMRUNoaWxkTW91bnRlZC5jdXJyZW50W21vdW50ZWQgPyBcIm1vdW50c1wiIDogXCJ1bm1vdW50c1wiXS5hZGQoaW5kZXgpO1xuICAgIH0sIFsvKiBNdXN0IHJlbWFpbiBzdGFibGUgKi9dKTtcblxuXG4gICAgY29uc3QgdXNlTWFuYWdlZENoaWxkID0gdXNlQ2FsbGJhY2s8VXNlTWFuYWdlZENoaWxkPFQsIEMsIEs+PigoeyBtYW5hZ2VkQ2hpbGQ6IGluZm8sIH0pID0+IHtcbiAgICAgICAgLy8gQW55IHRpbWUgb3VyIGNoaWxkIHByb3BzIGNoYW5nZSwgbWFrZSB0aGF0IGluZm9ybWF0aW9uIGF2YWlsYWJsZVxuICAgICAgICAvLyB0aGUgcGFyZW50IGlmIHRoZXkgbmVlZCBpdC5cbiAgICAgICAgLy8gVGhlIHBhcmVudCBjYW4gbGlzdGVuIGZvciBhbGwgdXBkYXRlcyBhbmQgb25seSBhY3Qgb24gdGhlIG9uZXMgaXQgY2FyZXMgYWJvdXQsXG4gICAgICAgIC8vIGFuZCBtdWx0aXBsZSBjaGlsZHJlbiB1cGRhdGluZyBpbiB0aGUgc2FtZSB0aWNrIHdpbGwgYWxsIGJlIHNlbnQgYXQgb25jZS5cbiAgICAgICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIC8vIEluc2VydCB0aGlzIGluZm9ybWF0aW9uIGluLXBsYWNlXG4gICAgICAgICAgICBpZiAodHlwZW9mIGluZm8uaW5kZXggPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIG1hbmFnZWRDaGlsZHJlbkFycmF5LmN1cnJlbnQuYXJyW2luZm8uaW5kZXggYXMgbnVtYmVyXSA9IHsgaW5kZXg6IGluZm8uaW5kZXgsIGZsYWdzOiBpbmZvLmZsYWdzID8/IHt9LCBzdWJJbmZvOiBpbmZvLnN1YkluZm8gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1hbmFnZWRDaGlsZHJlbkFycmF5LmN1cnJlbnQucmVjW2luZm8uaW5kZXggYXMgVF0gPSB7IGluZGV4OiBpbmZvLmluZGV4LCBmbGFnczogaW5mby5mbGFncyA/PyB7fSwgc3ViSW5mbzogaW5mby5zdWJJbmZvIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVtb3RlVUxFQ2hpbGRDaGFuZ2VkKGluZm8uaW5kZXggYXMgVCk7XG4gICAgICAgIH0sIFsuLi5PYmplY3QuZW50cmllcyhpbmZvKS5mbGF0KDkpXSk7ICAvLyA5IGlzIGluZmluaXR5LCByaWdodD8gU3VyZS4gVW5yZWxhdGVkOiBUT0RPLlxuXG4gICAgICAgIC8vIFdoZW4gd2UgbW91bnQsIG5vdGlmeSB0aGUgcGFyZW50IHZpYSBxdWV1ZU1pY3JvdGFza1xuICAgICAgICAvLyAoZXZlcnkgY2hpbGQgZG9lcyB0aGlzLCBzbyBldmVyeXRoaW5nJ3MgY29vcmRpbmF0ZWQgdG8gb25seSBxdWV1ZSBhIHNpbmdsZSBtaWNyb3Rhc2sgcGVyIHRpY2spXG4gICAgICAgIC8vIERvIHRoZSBzYW1lIG9uIHVubW91bnQuXG4gICAgICAgIC8vIE5vdGU6IEl0J3MgaW1wb3J0YW50IHRoYXQgdGhpcyBjb21lcyBBRlRFUiByZW1vdGVVTEVDaGlsZENoYW5nZWRcbiAgICAgICAgLy8gc28gdGhhdCByZW1vdGVVTEVDaGlsZE1vdW50ZWQgaGFzIGFjY2VzcyB0byBhbGwgdGhlIGluZm8gb24gbW91bnQuXG4gICAgICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICByZW1vdGVVTEVDaGlsZE1vdW50ZWQ/LihpbmZvLmluZGV4IGFzIFQsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHJlbW90ZVVMRUNoaWxkTW91bnRlZD8uKGluZm8uaW5kZXggYXMgVCwgZmFsc2UpO1xuICAgICAgICB9LCBbaW5mby5pbmRleF0pO1xuICAgIH0sIFsvKiBNdXN0IHJlbWFpbiBzdGFibGUgKi9dKTtcblxuXG4gICAgY29uc3QgbWFuYWdlZENoaWxkcmVuID0gdXNlUmVmPE1hbmFnZWRDaGlsZHJlbjxULCBDLCBLPj4oe1xuICAgICAgICAuLi57IF86IG1hbmFnZWRDaGlsZHJlbkFycmF5LmN1cnJlbnQgfSBhcyB7fSxcbiAgICAgICAgZm9yRWFjaDogZm9yRWFjaENoaWxkLFxuICAgICAgICBnZXRBdDogZ2V0TWFuYWdlZENoaWxkSW5mbyxcbiAgICAgICAgZ2V0SGlnaGVzdEluZGV4OiBnZXRIaWdoZXN0SW5kZXgsXG4gICAgICAgIGFycmF5U2xpY2U6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBtYW5hZ2VkQ2hpbGRyZW5BcnJheS5jdXJyZW50LmFyci5zbGljZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB1c2VNYW5hZ2VkQ2hpbGQsXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbjogeyBjaGlsZHJlbjogbWFuYWdlZENoaWxkcmVuLmN1cnJlbnQgfVxuICAgIH1cbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUNoaWxkcmVuRmxhZ1BhcmFtZXRlcnM8QywgSyBleHRlbmRzIHN0cmluZz4ge1xuXG4gICAgLyoqXG4gICAgICogV2hpY2ggY2hpbGQgaXMgY29uc2lkZXJlZCBhY3RpdmUgb24gbW91bnQuXG4gICAgICogXG4gICAgICogQWZ0ZXIgbW91bnQsIGNoYW5nZSB0aGUgY3VycmVudCBhY3RpdmUgY2hpbGQgd2l0aCBgY2hhbmdlSW5kZXhgLlxuICAgICAqL1xuICAgIGluaXRpYWxJbmRleDogbnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIFdoZW4gcHJvdmlkZWQsIGlmIHRoZSBnaXZlbiBhY3RpdmF0ZWRJbmRleCBkb2Vzbid0IG1hcCBvbnRvIGFueVxuICAgICAqIHByb3ZpZGVkIGNoaWxkIChlaXRoZXIgYmVjYXVzZSBpdCdzIHRvbyBsYXJnZSBvciB0aGF0IGNoaWxkXG4gICAgICogZG9lc24ndCBleGlzdCksIHRoZSBjbG9zZXN0IGNoaWxkIHRvIHRoZSBnaXZlbiBhY3RpdmF0ZWRJbmRleFxuICAgICAqIHdpbGwgaGF2ZSBpdHMgZmxhZyBzZXQgaW5zdGVhZC5cbiAgICAgKiBcbiAgICAgKiBVc2Ugd2l0aCBjYXV0aW9uLCBhbmQgY29uc2lkZXIgaG93IGEgY2hpbGQgaGF2aW5nIGl0cyBmbGFnIHNldFxuICAgICAqIHdoaWxlIHRoZSBwYXJlbnQgdGhpbmtzIGl0IHNob3VsZG4ndCBiZSBjb3VsZCBjYXVzZSBpc3N1ZXMuXG4gICAgICovXG4gICAgLy9jbG9zZXN0Rml0PzogYm9vbGVhbjtcbiAgICBjbG9zZXN0Rml0OiBib29sZWFuO1xuXG4gICAgY2hpbGRyZW46IE1hbmFnZWRDaGlsZHJlbjxudW1iZXIsIEMsIEs+O1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW5ldmVyIGEgbmV3IGluZGV4IGlzIHNlbGVjdGVkLlxuICAgICAqIFxuICAgICAqIE5vdGFibHksIHRoZSB2YWx1ZSBjYW4gYmUgZGlmZmVyZW50IHRoYW4gd2hhdCB3YXMgY2FsbGVkIHdpdGggY2hhbmdlSW5kZXgoKVxuICAgICAqIGlmIHRoZSByZXF1ZXN0ZWQgaW5kZXggZGlkbid0IGV4aXN0IG9yIHdhcyBoaWRkZW4uXG4gICAgICovXG4gICAgb25JbmRleENoYW5nZT86IE9uUGFzc2l2ZVN0YXRlQ2hhbmdlPG51bWJlciB8IG51bGw+O1xuXG4gICAgLyoqXG4gICAgICogV2hlbiBjaGlsZHJlbiBoYXZlIG11bHRpcGxlIGZsYWdzLCB0aGUgYGtleWAgcGFyYW1ldGVyIGNvbnRyb2xzIHdoaWNoIGZsYWcgd2UncmUgY2hlY2tpbmcuXG4gICAgICogXG4gICAgICogVGhpcyBjYW4gYmUgYW55dGhpbmcgeW91IHdhbnQsIGJ1dCBtdXN0IG5vdCBjaGFuZ2UuXG4gICAgICovXG4gICAga2V5OiBLO1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hpbGRGbGFnT3BlcmF0aW9ucyB7XG5cbiAgICAvKipcbiAgICAgKiBNdXN0IHJldHVybiB3aGV0aGVyIHRoZSBjdXJyZW50IGNoaWxkIGlzIGFjdGl2ZVxuICAgICAqL1xuICAgIGdldDogKCkgPT4gYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgY2hpbGQgbXVzdCBzZXQgaXRzZWxmIGFzIGFjdGl2ZS9pbmFjdGl2ZSwgd2hhdGV2ZXIgdGhhdCBlbnRhaWxzLlxuICAgICAqIFRoaXMgY291bGQgYmUgYXMgc2ltcGxlIGFzIGEgc2V0U3RhdGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgc2V0OiAoYWN0aXZlOiBib29sZWFuKSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE11c3QgcmV0dXJuIHRydWUgaWYgdGhpcyBjaGlsZCBpcyBhIHZhbGlkIGNhbmRpZGF0ZSB0byBiZSBmbGFnZ2VkLCBhbmQgZmFsc2UgaWYgbm90LlxuICAgICAqIE1vc3QgY2hpbGRyZW4gc2hvdWxkIHJldHVybiB0cnVlLiBSZXR1cm5pbmcgZmFsc2UgaXMgb25seSB1c2VmdWwgdG8gbWFyayBhIGNoaWxkIGFzIFwiaW52YWxpZFwiIGluIHNvbWUgd2F5LlxuICAgICAqIFJlbW92aW5nIGEgY2hpbGQgZnJvbSB0aGUgbGlzdCBkb2VzIGVmZmVjdGl2ZWx5IHRoZSBzYW1lIHRoaW5nLCBidXQgdGhpcyBsZXRzIHlvdSBrZWVwIHRoZSBjaGlsZCBhcm91bmQuXG4gICAgICovXG4gICAgaXNWYWxpZCgpOiBib29sZWFuO1xufVxuXG5cbi8vZXhwb3J0IGludGVyZmFjZSBGbGFnZ2FibGVDaGlsZEluZm9CPEsgZXh0ZW5kcyBzdHJpbmc+IHsgZmxhZ3M6IFBhcnRpYWw8UmVjb3JkPEssIENoaWxkRmxhZ09wZXJhdGlvbnM+PiB9IFxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlQ2hpbGRyZW5GbGFnUmV0dXJuVHlwZSB7XG4gICAgLyoqICoqU1RBQkxFKiogKi9cbiAgICBjaGFuZ2VJbmRleDogKGFyZzogUGFyYW1ldGVyczxTdGF0ZVVwZGF0ZXI8bnVtYmVyIHwgbnVsbD4+WzBdKSA9PiBudW1iZXIgfCBudWxsO1xuICAgIC8qKiBcbiAgICAgKiAqKlNUQUJMRSoqXG4gICAgICogXG4gICAgICogQ2FsbCB0aGlzIHdoZW5ldmVyIGEgY2hpbGQgbW91bnRzL3VubW91bnRzLCBvciB3aGVuZXZlciBjYWxsaW5nIGEgY2hpbGQncyBpc1ZhbGlkKCkgd291bGQgY2hhbmdlXG4gICAgICogICovXG4gICAgcmVldmFsdWF0ZUNsb3Nlc3RGaXQ6ICgpID0+IHZvaWQ7XG4gICAgLyoqICoqU1RBQkxFKiogKi9cbiAgICBnZXRDdXJyZW50SW5kZXg6ICgpID0+IG51bWJlciB8IG51bGw7XG59XG5cbi8qKlxuICogQW4gZXh0ZW5zaW9uIHRvIHVzZU1hbmFnZWRDaGlsZHJlbiB0aGF0IGhhbmRsZXMgdGhlIGZvbGxvd2luZyBjb21tb24gY2FzZTpcbiAqIDEuIFlvdSBoYXZlIGEgYnVuY2ggb2YgY2hpbGRyZW5cbiAqIDIuIEF0IGFueSBnaXZlbiB0aW1lLCBvbmx5IDEgb2YgdGhlbSBpcyBcInNlbGVjdGVkXCIsIFwiYWN0aXZhdGVkXCIsIFwiZm9jdXNhYmxlXCIsIHdoYXRldmVyIChvciAwIG9mIHRoZW0sIHRoYXQncyBjb29sIHRvbywganVzdCAwIG9yIDEgdGhvdWdoKS5cbiAqIDMuIFRoZSBwYXJlbnQgaGFzIGNvbnRyb2wgb3ZlciB3aG8gaXMgXCJzZWxlY3RlZFwiIHZpYSBhIG51bWVyaWNhbCBpbmRleC5cbiAqIFxuICogVGhpcyBob29rIGFsbG93cyBmb3IgbXVjaCBlYXNpZXIgY29udHJvbCBvdmVyIHNlbGVjdGlvbiBtYW5hZ2VtZW50LlxuICogXG4gKiBOb3RlIHRoYXQgYmVjYXVzZSB5b3UgbWF5IHdhbnQgdG8gdXNlIG11bHRpcGxlIGZsYWdzIHdpdGggdGhlIHNhbWUgY2hpbGRyZW4sIHRoaXMgaG9vayAqZG9lcyBub3QqIHVzZSBgdXNlTWFuYWdlZENoaWxkcmVuYCFcbiAqIFlvdSBuZWVkIHRvIHBhc3MgaXQgdGhlIGV4aXN0aW5nIGNoaWxkcmVuLCBhbmQgeW91IG11c3QgcGFzcyB5b3VyIGludm9jYXRpb24gb2YgYHVzZU1hbmFnZWRDaGlsZHJlbmAgdGhlIHJldHVybmVkIGBvbkNoaWxkcmVuTW91bnRDaGFuZ2VgIGhhbmRsZXIhXG4gKiBcbiAqIEFsc28gYmVjYXVzZSBvZiB0aGF0LCB0aGUgdHlwZXMgb2YgdGhpcyBmdW5jdGlvbiBhcmUgcmF0aGVyIG9kZC4gIEl0J3MgYmV0dGVyIHRvIHN0YXJ0IG9mZiB1c2luZyBhIGhvb2sgdGhhdCBhbHJlYWR5IHVzZXMgYSBmbGFnLCBzdWNoIGFzIGB1c2VSb3ZpbmdUYWJJbmRleGAsIGFzIGFuIGV4YW1wbGUuXG4gKiBcbiAqIFxuICogQHBhcmFtIHBhcmFtMCBcbiAqIEByZXR1cm5zIFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2hpbGRyZW5GbGFnPEMsIEsgZXh0ZW5kcyBzdHJpbmc+KHsgY2hpbGRyZW4sIGluaXRpYWxJbmRleCwgY2xvc2VzdEZpdCwgb25JbmRleENoYW5nZSwga2V5IH06IFVzZUNoaWxkcmVuRmxhZ1BhcmFtZXRlcnM8QywgSz4pOiBVc2VDaGlsZHJlbkZsYWdSZXR1cm5UeXBlIHtcbiAgICB1c2VFbnN1cmVTdGFiaWxpdHkoXCJ1c2VDaGlsZHJlbkZsYWdcIiwgb25JbmRleENoYW5nZSwga2V5KTtcblxuICAgIGNvbnN0IFtnZXRDdXJyZW50SW5kZXgsIHNldEN1cnJlbnRJbmRleF0gPSB1c2VQYXNzaXZlU3RhdGU8bnVsbCB8IG51bWJlcj4ob25JbmRleENoYW5nZSwgdXNlQ2FsbGJhY2soKCkgPT4gKGluaXRpYWxJbmRleCA/PyAobnVsbCkpLCBbXSkpO1xuXG4gICAgY29uc3QgW2dldFJlcXVlc3RlZEluZGV4LCBzZXRSZXF1ZXN0ZWRJbmRleF0gPSB1c2VQYXNzaXZlU3RhdGU8bnVsbCB8IG51bWJlcj4obnVsbCwgdXNlQ2FsbGJhY2soKCkgPT4gKGluaXRpYWxJbmRleCA/PyAobnVsbCkpLCBbXSkpO1xuXG4gICAgLy8gICAgY29uc3QgZ2V0Rml0TnVsbFRvWmVybyA9IHVzZVN0YWJsZUdldHRlcihmaXROdWxsVG9aZXJvKTtcblxuICAgIC8vIFNoYXJlZCBiZXR3ZWVuIG9uQ2hpbGRyZW5Nb3VudENoYW5nZSBhbmQgY2hhbmdlSW5kZXgsIG5vdCBwdWJsaWMgKGJ1dCBjb3VsZCBiZSBJIGd1ZXNzKVxuICAgIGNvbnN0IGdldENsb3Nlc3RGaXQgPSB1c2VDYWxsYmFjaygocmVxdWVzdGVkSW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICBsZXQgY2xvc2VzdERpc3RhbmNlID0gSW5maW5pdHk7XG4gICAgICAgIGxldCBjbG9zZXN0SW5kZXg6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcblxuICAgICAgICAgICAgaWYgKGNoaWxkLmZsYWdzPy5ba2V5XT8uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3RGlzdGFuY2UgPSBNYXRoLmFicyhjaGlsZC5pbmRleCAtIHJlcXVlc3RlZEluZGV4KTtcbiAgICAgICAgICAgICAgICBpZiAobmV3RGlzdGFuY2UgPCBjbG9zZXN0RGlzdGFuY2UgfHwgKG5ld0Rpc3RhbmNlID09IGNsb3Nlc3REaXN0YW5jZSAmJiBjaGlsZC5pbmRleCA8IHJlcXVlc3RlZEluZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICBjbG9zZXN0RGlzdGFuY2UgPSBuZXdEaXN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VzdEluZGV4ID0gY2hpbGQuaW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNsb3Nlc3RJbmRleDtcbiAgICB9LCBbLyogTXVzdCByZW1haW4gc3RhYmxlISAqL10pO1xuXG4gICAgLy8gQW55IHRpbWUgYSBjaGlsZCBtb3VudHMvdW5tb3VudHMsIHdlIG5lZWQgdG8gZG91YmxlLWNoZWNrIHRvIHNlZSBpZiB0aGF0IGFmZmVjdHMgXG4gICAgLy8gdGhlIFwiY3VycmVudGx5IHNlbGVjdGVkXCIgKG9yIHdoYXRldmVyKSBpbmRleC4gIFRoZSB0d28gY2FzZXMgd2UncmUgbG9va2luZyBmb3I6XG4gICAgLy8gMS4gVGhlIGN1cnJlbnRseSBzZWxlY3RlZCBjaGlsZCB1bm1vdW50ZWRcbiAgICAvLyAyLiBBIGNoaWxkIG1vdW50ZWQsIGFuZCBpdCBtb3VudHMgd2l0aCB0aGUgaW5kZXggd2UncmUgbG9va2luZyBmb3JcbiAgICBjb25zdCByZWV2YWx1YXRlQ2xvc2VzdEZpdCA9IHVzZVN0YWJsZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgY29uc3QgcmVxdWVzdGVkSW5kZXggPSBnZXRSZXF1ZXN0ZWRJbmRleCgpO1xuICAgICAgICBjb25zdCBjdXJyZW50SW5kZXggPSBnZXRDdXJyZW50SW5kZXgoKTtcbiAgICAgICAgY29uc3QgY3VycmVudENoaWxkID0gY3VycmVudEluZGV4ID09IG51bGwgPyBudWxsIDogY2hpbGRyZW4uZ2V0QXQoY3VycmVudEluZGV4KTtcblxuICAgICAgICBpZiAocmVxdWVzdGVkSW5kZXggIT0gbnVsbCAmJiBjbG9zZXN0Rml0ICYmIChyZXF1ZXN0ZWRJbmRleCAhPSBjdXJyZW50SW5kZXggfHwgY3VycmVudENoaWxkID09IG51bGwgfHwgIWN1cnJlbnRDaGlsZC5mbGFncz8uW2tleV0/LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIGN1cnJlbnRDaGlsZD8uZmxhZ3M/LltrZXldIS5zZXQoZmFsc2UpO1xuICAgICAgICAgICAgY29uc3QgY2xvc2VzdEZpdEluZGV4ID0gZ2V0Q2xvc2VzdEZpdChyZXF1ZXN0ZWRJbmRleCk7XG4gICAgICAgICAgICBzZXRDdXJyZW50SW5kZXgoY2xvc2VzdEZpdEluZGV4KTtcbiAgICAgICAgICAgIGlmIChjbG9zZXN0Rml0SW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsb3Nlc3RGaXRDaGlsZCA9IGNoaWxkcmVuLmdldEF0KGNsb3Nlc3RGaXRJbmRleCkhO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuYXNzZXJ0KGNsb3Nlc3RGaXRDaGlsZCAhPSBudWxsLCBcIkludGVybmFsIGxvZ2ljPz8/XCIpO1xuICAgICAgICAgICAgICAgIGNsb3Nlc3RGaXRDaGlsZC5mbGFncz8uW2tleV0hLnNldCh0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfSk7XG5cblxuXG5cbiAgICBjb25zdCBjaGFuZ2VJbmRleCA9IHVzZUNhbGxiYWNrKChhcmc6IFBhcmFtZXRlcnM8U3RhdGVVcGRhdGVyPG51bWJlciB8IG51bGw+PlswXSkgPT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0ZWRJbmRleCA9IGFyZyBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gYXJnKGdldFJlcXVlc3RlZEluZGV4KCkpIDogYXJnO1xuICAgICAgICAvL2lmIChyZXF1ZXN0ZWRJbmRleCA9PSBudWxsICYmIGdldEZpdE51bGxUb1plcm8oKSlcbiAgICAgICAgLy8gICAgcmVxdWVzdGVkSW5kZXggPSAwO1xuXG4gICAgICAgIHNldFJlcXVlc3RlZEluZGV4KHJlcXVlc3RlZEluZGV4KTtcbiAgICAgICAgY29uc3QgY3VycmVudEluZGV4ID0gZ2V0Q3VycmVudEluZGV4KCk7XG4gICAgICAgIGlmIChjdXJyZW50SW5kZXggPT0gcmVxdWVzdGVkSW5kZXgpXG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdGVkSW5kZXg7XG5cbiAgICAgICAgbGV0IG5ld01hdGNoaW5nQ2hpbGQgPSAocmVxdWVzdGVkSW5kZXggPT0gbnVsbCA/IG51bGwgOiBjaGlsZHJlbi5nZXRBdChyZXF1ZXN0ZWRJbmRleCkpO1xuICAgICAgICBjb25zdCBvbGRNYXRjaGluZ0NoaWxkID0gKGN1cnJlbnRJbmRleCA9PSBudWxsID8gbnVsbCA6IGNoaWxkcmVuLmdldEF0KGN1cnJlbnRJbmRleCkpO1xuICAgICAgICBpZiAocmVxdWVzdGVkSW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gRWFzeSBjYXNlXG4gICAgICAgICAgICBzZXRDdXJyZW50SW5kZXgobnVsbCk7XG4gICAgICAgICAgICBvbGRNYXRjaGluZ0NoaWxkPy5mbGFncz8uW2tleV0hLnNldChmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChuZXdNYXRjaGluZ0NoaWxkICYmIG5ld01hdGNoaW5nQ2hpbGQuZmxhZ3M/LltrZXldIS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50SW5kZXgocmVxdWVzdGVkSW5kZXgpO1xuICAgICAgICAgICAgICAgIG9sZE1hdGNoaW5nQ2hpbGQ/LmZsYWdzPy5ba2V5XSEuc2V0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICBuZXdNYXRjaGluZ0NoaWxkLmZsYWdzPy5ba2V5XSEuc2V0KHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ZWRJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsb3Nlc3RGaXRJbmRleCA9IGdldENsb3Nlc3RGaXQocmVxdWVzdGVkSW5kZXgpO1xuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRJbmRleChjbG9zZXN0Rml0SW5kZXgpO1xuICAgICAgICAgICAgICAgIGlmIChjbG9zZXN0Rml0SW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdNYXRjaGluZ0NoaWxkID0gY2hpbGRyZW4uZ2V0QXQoY2xvc2VzdEZpdEluZGV4KSE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuYXNzZXJ0KG5ld01hdGNoaW5nQ2hpbGQgIT0gbnVsbCwgXCJJbnRlcm5hbCBsb2dpYz8/P1wiKTtcbiAgICAgICAgICAgICAgICAgICAgb2xkTWF0Y2hpbmdDaGlsZD8uZmxhZ3M/LltrZXldIS5zZXQoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBuZXdNYXRjaGluZ0NoaWxkLmZsYWdzPy5ba2V5XSEuc2V0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvc2VzdEZpdEluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2xkTWF0Y2hpbmdDaGlsZD8uZmxhZ3M/LltrZXldIS5zZXQoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbXSk7XG5cbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoaW5pdGlhbEluZGV4ICE9IG51bGwpXG4gICAgICAgICAgICBjaGlsZHJlbi5nZXRBdChpbml0aWFsSW5kZXgpPy5mbGFncz8uW2tleV0/LnNldCh0cnVlKTtcbiAgICB9LCBbXSlcblxuICAgIHJldHVybiB7IGNoYW5nZUluZGV4LCByZWV2YWx1YXRlQ2xvc2VzdEZpdCwgZ2V0Q3VycmVudEluZGV4IH07XG59XG5cbiIsImZ1bmN0aW9uIHIoZSl7dmFyIHQsZixuPVwiXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlKW4rPWU7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlpZihBcnJheS5pc0FycmF5KGUpKWZvcih0PTA7dDxlLmxlbmd0aDt0KyspZVt0XSYmKGY9cihlW3RdKSkmJihuJiYobis9XCIgXCIpLG4rPWYpO2Vsc2UgZm9yKHQgaW4gZSllW3RdJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZnVuY3Rpb24gY2xzeCgpe2Zvcih2YXIgZSx0LGY9MCxuPVwiXCI7Zjxhcmd1bWVudHMubGVuZ3RoOykoZT1hcmd1bWVudHNbZisrXSkmJih0PXIoZSkpJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZGVmYXVsdCBjbHN4OyIsImltcG9ydCBjbHN4IGZyb20gXCJjbHN4XCI7XG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREb2N1bWVudChlbGVtZW50PzogTm9kZSkgeyByZXR1cm4gKGVsZW1lbnQ/Lm93bmVyRG9jdW1lbnQgPz8gZG9jdW1lbnQgPz8gd2luZG93LmRvY3VtZW50ID8/IGdsb2JhbFRoaXMuZG9jdW1lbnQpOyB9XG5cbnR5cGUgUCA9IFBhcmFtZXRlcnM8dHlwZW9mIGNsc3g+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlRG9jdW1lbnRDbGFzcyhjbGFzc05hbWU6IFBbMF0sIGFjdGl2ZT86IGJvb2xlYW4sIGVsZW1lbnQ/OiBIVE1MRWxlbWVudCkge1xuICAgIGVsZW1lbnQgPz89IGdldERvY3VtZW50KCkuZG9jdW1lbnRFbGVtZW50O1xuICAgIGNsYXNzTmFtZSA9IGNsc3goY2xhc3NOYW1lKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoYWN0aXZlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUgYXMgc3RyaW5nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gZWxlbWVudCEuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUgYXMgc3RyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSwgW2NsYXNzTmFtZSwgYWN0aXZlLCBlbGVtZW50XSk7XG5cbn1cbiIsImltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIEZyYWdtZW50LCBoIH0gZnJvbSBcInByZWFjdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlTWVyZ2VkQ2hpbGRyZW4oeyBjaGlsZHJlbjogbGhzIH06IFBpY2s8aC5KU1guSFRNTEF0dHJpYnV0ZXM8RXZlbnRUYXJnZXQ+LCBcImNoaWxkcmVuXCI+LCB7IGNoaWxkcmVuOiByaHN9OiBQaWNrPGguSlNYLkhUTUxBdHRyaWJ1dGVzPEV2ZW50VGFyZ2V0PiwgXCJjaGlsZHJlblwiPik6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEV2ZW50VGFyZ2V0PltcImNoaWxkcmVuXCJdIHtcbiAgICBpZiAobGhzID09IG51bGwgJiYgcmhzID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSBpZiAobGhzID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJocztcbiAgICB9XG4gICAgZWxzZSBpZiAocmhzID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGxocztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KEZyYWdtZW50LCB7fSwgbGhzLCByaHMpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGRlZmF1bHQgYXMgY2xzeCB9IGZyb20gXCJjbHN4XCI7XHJcbmltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XHJcblxyXG4vKipcclxuICogR2l2ZW4gdHdvIHNldHMgb2YgcHJvcHMsIG1lcmdlcyB0aGVpciBgY2xhc3NgIGFuZCBgY2xhc3NOYW1lYCBwcm9wZXJ0aWVzLlxyXG4gKiBEdXBsaWNhdGUgY2xhc3NlcyBhcmUgcmVtb3ZlZCAob3JkZXIgZG9lc24ndCBtYXR0ZXIgYW55d2F5KS5cclxuICogXHJcbiAqIEBwYXJhbSBsaHMgQ2xhc3NlcyBvZiB0aGUgZmlyc3QgY29tcG9uZW50XHJcbiAqIEBwYXJhbSByaHMgQ2xhc3NlcyBvZiB0aGUgc2Vjb25kIGNvbXBvbmVudFxyXG4gKiBAcmV0dXJucyBBIHN0cmluZyByZXByZXNlbnRpbmcgYWxsIGNvbWJpbmVkIGNsYXNzZXMgZnJvbSBib3RoIGFyZ3VtZW50cy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VNZXJnZWRDbGFzc2VzPEUgZXh0ZW5kcyBFdmVudFRhcmdldD4oeyBjbGFzczogbGhzQ2xhc3MsIGNsYXNzTmFtZTogbGhzQ2xhc3NOYW1lIH06IFBpY2s8aC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4sIFwiY2xhc3NcIiB8IFwiY2xhc3NOYW1lXCI+LCB7IGNsYXNzOiByaHNDbGFzcywgY2xhc3NOYW1lOiByaHNDbGFzc05hbWV9OiBQaWNrPGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+LCBcImNsYXNzXCIgfCBcImNsYXNzTmFtZVwiPik6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcblxyXG4gICAgLy8gTm90ZTogRm9yIHRoZSBzYWtlIG9mIGZvcndhcmQgY29tcGF0aWJpbGl0eSwgdGhpcyBmdW5jdGlvbiBpcyBsYWJlbGxlZCBhc1xyXG4gICAgLy8gYSBob29rLCBidXQgYXMgaXQgdXNlcyBubyBvdGhlciBob29rcyBpdCB0ZWNobmljYWxseSBpc24ndCBvbmUuXHJcblxyXG4gICAgaWYgKGxoc0NsYXNzIHx8IHJoc0NsYXNzIHx8IGxoc0NsYXNzTmFtZSB8fCByaHNDbGFzc05hbWUpIHtcclxuICAgICAgICBjb25zdCBsaHNDbGFzc2VzID0gY2xzeChsaHNDbGFzcywgbGhzQ2xhc3NOYW1lKS5zcGxpdChcIiBcIik7XHJcbiAgICAgICAgY29uc3QgcmhzQ2xhc3NlcyA9IGNsc3gocmhzQ2xhc3MsIHJoc0NsYXNzTmFtZSkuc3BsaXQoXCIgXCIpO1xyXG4gICAgICAgIGNvbnN0IGFsbENsYXNzZXMgPSBuZXcgU2V0KFsuLi5BcnJheS5mcm9tKGxoc0NsYXNzZXMpLCAuLi5BcnJheS5mcm9tKHJoc0NsYXNzZXMpXSlcclxuXHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oYWxsQ2xhc3Nlcykuam9pbihcIiBcIik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGgsIFJlZiwgUmVmQ2FsbGJhY2ssIFJlZk9iamVjdCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcblxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc1JlZjxUPihpbnN0YW5jZTogVCB8IG51bGwsIHJlZjogUmVmPFQ+IHwgbnVsbCB8IHVuZGVmaW5lZCkge1xyXG4gICAgaWYgKHR5cGVvZiByZWYgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIHJlZihpbnN0YW5jZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChyZWYgIT0gbnVsbCkge1xyXG4gICAgICAgIChyZWYgYXMgUmVmT2JqZWN0PFQgfCBudWxsPikuY3VycmVudCA9IGluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tZGVidWdnZXIgKi9cclxuICAgICAgICBkZWJ1Z2dlcjtcclxuICAgICAgICBjb25zb2xlLmFzc2VydChmYWxzZSwgXCJVbmtub3duIHJlZiB0eXBlIGZvdW5kIHRoYXQgd2FzIG5laXRoZXIgYSBSZWZDYWxsYmFjayBub3IgYSBSZWZPYmplY3RcIik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmludGVyZmFjZSBSPEU+IHtcclxuICAgIHJlZj86IFJlZjxFPjtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb21iaW5lcyB0d28gcmVmcyBpbnRvIG9uZS4gVGhpcyBhbGxvd3MgYSBjb21wb25lbnQgdG8gYm90aCB1c2UgaXRzIG93biByZWYgKmFuZCogZm9yd2FyZCBhIHJlZiB0aGF0IHdhcyBnaXZlbiB0byBpdC5cclxuICogQHBhcmFtIGxocyBcclxuICogQHBhcmFtIHJocyBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlTWVyZ2VkUmVmczxFIGV4dGVuZHMgRXZlbnRUYXJnZXQ+KHsgcmVmOiByaHMgfTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4sIHsgcmVmOiBsaHMgfTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4pIHtcclxuICAgIGNvbnN0IGNvbWJpbmVkOiBSZWZDYWxsYmFjazxFPiA9IHVzZUNhbGxiYWNrKChjdXJyZW50OiBFIHwgbnVsbCkgPT4ge1xyXG4gICAgICAgIHByb2Nlc3NSZWYoY3VycmVudCwgbGhzKTtcclxuICAgICAgICBwcm9jZXNzUmVmKGN1cnJlbnQsIHJocyk7XHJcbiAgICB9LCBbbGhzLCByaHNdKTtcclxuXHJcbiAgICBpZiAobGhzID09IG51bGwgJiYgcmhzID09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkITtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGxocyA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIHJocyE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChyaHMgPT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBsaHMhO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XHJcblxyXG5mdW5jdGlvbiBzdHlsZVN0cmluZ1RvT2JqZWN0KHN0eWxlOiBzdHJpbmcpOiBoLkpTWC5DU1NQcm9wZXJ0aWVzIHtcclxuICAgIC8vIFRPRE86IFRoaXMgc3Vja3MgRDpcclxuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoc3R5bGUuc3BsaXQoXCI7XCIpLm1hcChzdGF0ZW1lbnQgPT4gc3RhdGVtZW50LnNwbGl0KFwiOlwiKSkpIGFzIHVua25vd24gYXMgaC5KU1guQ1NTUHJvcGVydGllcztcclxufVxyXG5cclxuLyoqXHJcbiAqIE1lcmdlcyB0d28gc3R5bGUgb2JqZWN0cywgcmV0dXJuaW5nIHRoZSByZXN1bHQuXHJcbiAqIFxyXG4gKiBAcGFyYW0gc3R5bGUgVGhlIHVzZXItZ2l2ZW4gc3R5bGUgcHJvcCBmb3IgdGhpcyBjb21wb25lbnRcclxuICogQHBhcmFtIG9iaiBUaGUgQ1NTIHByb3BlcnRpZXMgeW91IHdhbnQgYWRkZWQgdG8gdGhlIHVzZXItZ2l2ZW4gc3R5bGVcclxuICogQHJldHVybnMgQSBDU1Mgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgYm90aCBvYmplY3RzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZU1lcmdlZFN0eWxlcyhsaHM6IFBpY2s8aC5KU1guSFRNTEF0dHJpYnV0ZXM8RXZlbnRUYXJnZXQ+LCBcInN0eWxlXCI+LCByaHM6IFBpY2s8aC5KU1guSFRNTEF0dHJpYnV0ZXM8RXZlbnRUYXJnZXQ+LCBcInN0eWxlXCI+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8RXZlbnRUYXJnZXQ+W1wic3R5bGVcIl0ge1xyXG5cclxuICAgIC8vIEVhc3kgY2FzZSwgd2hlbiB0aGVyZSBhcmUgbm8gc3R5bGVzIHRvIG1lcmdlIHJldHVybiBub3RoaW5nLlxyXG4gICAgaWYgKCFsaHM/LnN0eWxlICYmICFyaHM/LnN0eWxlKVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBsaHMgIT0gdHlwZW9mIHJocykge1xyXG4gICAgICAgIC8vIEVhc3kgY2FzZXMsIHdoZW4gb25lIGlzIG51bGwgYW5kIHRoZSBvdGhlciBpc24ndC5cclxuICAgICAgICBpZiAobGhzPy5zdHlsZSAmJiAhcmhzPy5zdHlsZSlcclxuICAgICAgICAgICAgcmV0dXJuIGxocy5zdHlsZTtcclxuICAgICAgICBpZiAoIWxocz8uc3R5bGUgJiYgcmhzPy5zdHlsZSlcclxuICAgICAgICAgICAgcmV0dXJuIHJocy5zdHlsZTtcclxuXHJcbiAgICAgICAgLy8gVGhleSdyZSBib3RoIG5vbi1udWxsIGJ1dCBkaWZmZXJlbnQgdHlwZXMuXHJcbiAgICAgICAgLy8gQ29udmVydCB0aGUgc3RyaW5nIHR5cGUgdG8gYW4gb2JqZWN0IGJhZyB0eXBlIGFuZCBydW4gaXQgYWdhaW4uXHJcbiAgICAgICAgaWYgKGxocz8uc3R5bGUgJiYgcmhzPy5zdHlsZSkge1xyXG4gICAgICAgICAgICAvLyAodXNlTWVyZ2VkU3R5bGVzIGlzbid0IGEgdHJ1ZSBob29rIC0tIHRoaXMgaXNuJ3QgYSB2aW9sYXRpb24pXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGhzPy5zdHlsZSA9PSBcInN0cmluZ1wiKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFN0eWxlcyh7IHN0eWxlOiBzdHlsZVN0cmluZ1RvT2JqZWN0KGxocz8uc3R5bGUgYXMgc3RyaW5nKSB9LCByaHMpIGFzIGguSlNYLkNTU1Byb3BlcnRpZXM7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmhzPy5zdHlsZSA9PSBcInN0cmluZ1wiKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFN0eWxlcyhsaHMsIHsgc3R5bGU6IHN0eWxlU3RyaW5nVG9PYmplY3QocmhzPy5zdHlsZSBhcyBzdHJpbmcpIH0pIGFzIGguSlNYLkNTU1Byb3BlcnRpZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBMb2dpYz8/P1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGhleSdyZSBib3RoIHN0cmluZ3MsIGp1c3QgY29uY2F0ZW5hdGUgdGhlbS5cclxuICAgIGlmICh0eXBlb2YgbGhzPy5zdHlsZSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke2xocy5zdHlsZX07JHtyaHM/LnN0eWxlID8/IFwiXCJ9YCBhcyB1bmtub3duIGFzIHN0cmluZztcclxuICAgIH1cclxuXHJcbiAgICAvLyBUaGV5J3JlIGJvdGggb2JqZWN0cywganVzdCBtZXJnZSB0aGVtLlxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAuLi4obGhzPy5zdHlsZSA/PyB7fSkgYXMgaC5KU1guQ1NTUHJvcGVydGllcyxcclxuICAgICAgICAuLi4ocmhzPy5zdHlsZSA/PyB7fSkgYXMgaC5KU1guQ1NTUHJvcGVydGllc1xyXG4gICAgfSBhcyB1bmtub3duIGFzIGguSlNYLkNTU1Byb3BlcnRpZXNcclxufVxyXG5cclxuIiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlTWVyZ2VkQ2hpbGRyZW4gfSBmcm9tIFwiLi91c2UtbWVyZ2VkLWNoaWxkcmVuXCI7XHJcbmltcG9ydCB7IHVzZU1lcmdlZENsYXNzZXMgfSBmcm9tIFwiLi91c2UtbWVyZ2VkLWNsYXNzZXNcIjtcclxuaW1wb3J0IHsgdXNlTWVyZ2VkUmVmcyB9IGZyb20gXCIuL3VzZS1tZXJnZWQtcmVmc1wiO1xyXG5pbXBvcnQgeyB1c2VNZXJnZWRTdHlsZXMgfSBmcm9tIFwiLi91c2UtbWVyZ2VkLXN0eWxlc1wiO1xyXG5cclxubGV0IGxvZyA9IGNvbnNvbGUud2FybjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBlbmFibGVMb2dnaW5nUHJvcENvbmZsaWN0cyhsb2cyOiB0eXBlb2YgY29uc29sZVtcImxvZ1wiXSkge1xyXG4gICAgbG9nID0gbG9nMlxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEdpdmVuIHR3byBzZXRzIG9mIHByb3BzLCBtZXJnZXMgdGhlbSBhbmQgcmV0dXJucyB0aGUgcmVzdWx0LlxyXG4gKiBcclxuICogVGhlIGhvb2sgaXMgYXdhcmUgb2YgYW5kIGNhbiBpbnRlbGxpZ2VudGx5IG1lcmdlIGBjbGFzc05hbWVgLCBgY2xhc3NgLCBgc3R5bGVgLCBgcmVmYCwgYW5kIGFsbCBldmVudCBoYW5kbGVycy5cclxuICogQHBhcmFtIGxoczIgXHJcbiAqIEBwYXJhbSByaHMyIFxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VNZXJnZWRQcm9wczxFIGV4dGVuZHMgRXZlbnRUYXJnZXQ+KGxoc0FsbDogaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4sIHJoc0FsbDogaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4pOiBoLkpTWC5IVE1MQXR0cmlidXRlczxFPiB7XHJcbiAgICAvLyBGaXJzdCwgc2VwYXJhdGUgdGhlIHByb3BzIHdlIHdlcmUgZ2l2ZW4gaW50byB0d28gZ3JvdXBzOlxyXG4gICAgLy8gbGhzQWxsIGFuZCByaHNBbGwgY29udGFpbiBhbGwgdGhlIHByb3BzIHdlIHdlcmUgZ2l2ZW4sIGFuZFxyXG4gICAgLy8gbGhzTWlzYyBhbmQgcmhzTWlzYyBjb250YWluIGFsbCBwcm9wcyAqZXhjZXB0KiBmb3IgdGhlIGVhc3kgb25lc1xyXG4gICAgLy8gbGlrZSBjbGFzc05hbWUgYW5kIHN0eWxlIHRoYXQgd2UgYWxyZWFkeSBrbm93IGhvdyB0byBtZXJnZS5cclxuICAgIGNvbnN0IHsgY2hpbGRyZW46IF9saHNDaGlsZHJlbiwgY2xhc3M6IF9saHNDbGFzcywgY2xhc3NOYW1lOiBfbGhzQ2xhc3NOYW1lLCBzdHlsZTogX2xoc1N0eWxlLCByZWY6IF9saHNSZWYsIC4uLmxoc01pc2MgfSA9IGxoc0FsbDtcclxuICAgIGNvbnN0IHsgY2hpbGRyZW46IF9yaHNDaGlsZHJlbiwgY2xhc3M6IF9yaHNDbGFzcywgY2xhc3NOYW1lOiBfcmhzQ2xhc3NOYW1lLCBzdHlsZTogX3Joc1N0eWxlLCByZWY6IF9yaHNSZWYsIC4uLnJoc01pc2MgfSA9IHJoc0FsbDtcclxuXHJcbiAgICBjb25zdCByZXQ6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+ID0ge1xyXG4gICAgICAgIC4uLmxoc01pc2MsXHJcbiAgICAgICAgcmVmOiB1c2VNZXJnZWRSZWZzPEU+KGxoc0FsbCwgcmhzQWxsKSxcclxuICAgICAgICBzdHlsZTogdXNlTWVyZ2VkU3R5bGVzKGxoc0FsbCwgcmhzQWxsKSxcclxuICAgICAgICBjbGFzc05hbWU6IHVzZU1lcmdlZENsYXNzZXMobGhzQWxsLCByaHNBbGwpLFxyXG4gICAgICAgIGNoaWxkcmVuOiB1c2VNZXJnZWRDaGlsZHJlbihsaHNBbGwsIHJoc0FsbCksXHJcbiAgICB9IGFzIGFueTtcclxuXHJcbiAgICBpZiAocmV0LnJlZiA9PT0gdW5kZWZpbmVkKSBkZWxldGUgcmV0LnJlZjtcclxuICAgIGlmIChyZXQuc3R5bGUgPT09IHVuZGVmaW5lZCkgZGVsZXRlIHJldC5zdHlsZTtcclxuICAgIGlmIChyZXQuY2xhc3NOYW1lID09PSB1bmRlZmluZWQpIGRlbGV0ZSByZXQuY2xhc3NOYW1lO1xyXG4gICAgaWYgKHJldC5jaGlsZHJlbiA9PT0gdW5kZWZpbmVkKSBkZWxldGUgcmV0LmNoaWxkcmVuO1xyXG5cclxuICAgIC8vIE5vdywgZG8gKmV2ZXJ5dGhpbmcqIGVsc2VcclxuICAgIC8vIE1lcmdlIGV2ZXJ5IHJlbWFpbmluZyBleGlzdGluZyBlbnRyeSBpbiBsaHMgd2l0aCB3aGF0IHdlJ3ZlIGFscmVhZHkgcHV0IGluIHJldC5cclxuICAgIC8vY29uc3QgbGhzRW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGxocykgYXMgW2tleW9mIFQsIFRba2V5b2YgVF1dW107XHJcbiAgICBjb25zdCByaHNFbnRyaWVzID0gT2JqZWN0LmVudHJpZXMocmhzTWlzYyk7XHJcblxyXG4gICAgZm9yIChjb25zdCBbcmhzS2V5VSwgcmhzVmFsdWVdIG9mIHJoc0VudHJpZXMpIHtcclxuICAgICAgICBjb25zdCByaHNLZXkgPSByaHNLZXlVIGFzIGtleW9mIGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+O1xyXG5cclxuICAgICAgICBjb25zdCBsaHNWYWx1ZSA9IGxoc01pc2NbcmhzS2V5IGFzIGtleW9mIHR5cGVvZiBsaHNNaXNjXTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBsaHNWYWx1ZSA9PT0gXCJmdW5jdGlvblwiIHx8IHR5cGVvZiByaHNWYWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBUaGV5J3JlIGJvdGggZnVuY3Rpb25zIHRoYXQgY2FuIGJlIG1lcmdlZCAob3Igb25lJ3MgYSBmdW5jdGlvbiBhbmQgdGhlIG90aGVyJ3MgbnVsbCkuXHJcbiAgICAgICAgICAgIC8vIE5vdCBhbiAqZWFzeSogY2FzZSwgYnV0IGEgd2VsbC1kZWZpbmVkIG9uZS5cclxuICAgICAgICAgICAgY29uc3QgbWVyZ2VkID0gbWVyZ2VGdW5jdGlvbnMobGhzVmFsdWUgYXMgbmV2ZXIsIHJoc1ZhbHVlIGFzIG5ldmVyKTtcclxuICAgICAgICAgICAgcmV0W3Joc0tleSBhcyBrZXlvZiBoLkpTWC5IVE1MQXR0cmlidXRlczxFPl0gPSBtZXJnZWQgYXMgbmV2ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBVaC4uLndlJ3JlIGhlcmUgYmVjYXVzZSBvbmUgb2YgdGhlbSdzIG51bGwsIHJpZ2h0P1xyXG4gICAgICAgICAgICBpZiAobGhzVmFsdWUgPT0gbnVsbCAmJiByaHNWYWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmhzVmFsdWUgPT09IG51bGwgJiYgbGhzVmFsdWUgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICByZXRbcmhzS2V5XSA9IHJoc1ZhbHVlIGFzIG5ldmVyO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHJldFtyaHNLZXldID0gbGhzVmFsdWUgYXMgbmV2ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGxoc1ZhbHVlID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICByZXRbcmhzS2V5XSA9IHJoc1ZhbHVlIGFzIG5ldmVyO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChyaHNWYWx1ZSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0W3Joc0tleV0gPSBsaHNWYWx1ZSBhcyBuZXZlcjtcclxuICAgICAgICAgICAgZWxzZSBpZiAoKHJoc1ZhbHVlIGFzIGFueSkgPT0gbGhzVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIC8vIEkgbWVhbiwgdGhleSdyZSB0aGUgc2FtZSB2YWx1ZSBhdCBsZWFzdFxyXG4gICAgICAgICAgICAgICAgLy8gc28gd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZy5cclxuICAgICAgICAgICAgICAgIC8vIE5vdCByZWFsbHkgaWRlYWwgdGhvdWdoLlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gVWdoLlxyXG4gICAgICAgICAgICAgICAgLy8gTm8gZ29vZCBzdHJhdGVnaWVzIGhlcmUsIGp1c3QgbG9nIGl0IGlmIHJlcXVlc3RlZFxyXG4gICAgICAgICAgICAgICAgbG9nPy4oYFRoZSBwcm9wIFwiJHtyaHNLZXl9XCIgY2Fubm90IHNpbXVsdGFuZW91c2x5IGJlIHRoZSB2YWx1ZXMgJHtsaHNWYWx1ZX0gYW5kICR7cmhzVmFsdWV9LiBPbmUgbXVzdCBiZSBjaG9zZW4gb3V0c2lkZSBvZiB1c2VNZXJnZWRQcm9wcy5gKTtcclxuICAgICAgICAgICAgICAgIHJldFtyaHNLZXldID0gcmhzVmFsdWUgYXMgbmV2ZXJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gbWVyZ2VGdW5jdGlvbnM8VCBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gYW55LCBVIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KGxoczogVCB8IG51bGwgfCB1bmRlZmluZWQsIHJoczogVSB8IG51bGwgfCB1bmRlZmluZWQpIHtcclxuXHJcbiAgICBpZiAoIWxocylcclxuICAgICAgICByZXR1cm4gcmhzO1xyXG4gICAgaWYgKCFyaHMpXHJcbiAgICAgICAgcmV0dXJuIGxocztcclxuXHJcbiAgICByZXR1cm4gKC4uLmFyZ3M6IFBhcmFtZXRlcnM8VD4pID0+IHtcclxuICAgICAgICBjb25zdCBsdiA9IGxocyguLi5hcmdzKTtcclxuICAgICAgICBjb25zdCBydiA9IHJocyguLi5hcmdzKTtcclxuXHJcbiAgICAgICAgaWYgKGx2IGluc3RhbmNlb2YgUHJvbWlzZSB8fCBydiBpbnN0YW5jZW9mIFByb21pc2UpXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbbHYsIHJ2XSk7XHJcbiAgICB9O1xyXG59XHJcblxyXG4vKlxyXG5mdW5jdGlvbiB0ZXN0PFAgZXh0ZW5kcyBoLkpTWC5IVE1MQXR0cmlidXRlczxIVE1MSW5wdXRFbGVtZW50Pj4ocHJvcHM6IFApIHtcclxuXHJcbiAgICBjb25zdCBpZDA6IEdlbmVyaWNHZXQ8e30sIFwiaWRcIiwgc3RyaW5nPiA9IFwiXCI7XHJcbiAgICBjb25zdCBpZDM6IEdlbmVyaWNHZXQ8eyBpZDogdW5kZWZpbmVkIH0sIFwiaWRcIiwgc3RyaW5nPiA9IHVuZGVmaW5lZDtcclxuICAgIGNvbnN0IGlkNDogR2VuZXJpY0dldDx7IGlkOiB1bmRlZmluZWQgfSwgXCJpZFwiLCBzdHJpbmc+ID0gdW5kZWZpbmVkO1xyXG4gICAgY29uc3QgaWQ1OiBHZW5lcmljR2V0PHsgaWQ6IHVuZGVmaW5lZCB9LCBcImlkXCIsIHN0cmluZz4gPSB1bmRlZmluZWQ7XHJcbiAgICBjb25zdCBpZDY6IEdlbmVyaWNHZXQ8eyBpZDogdW5kZWZpbmVkIH0sIFwiaWRcIiwgc3RyaW5nPiA9IHVuZGVmaW5lZDtcclxuICAgIC8vY29uc3QgaWQyOiBaaXBTaW5nbGU8c3RyaW5nIHwgdW5kZWZpbmVkLCBzdHJpbmcgfCB1bmRlZmluZWQ+ID0gdW5kZWZpbmVkO1xyXG4gICAgY29uc3QgaWQxOiBaaXBPYmplY3Q8eyBpZDogdW5kZWZpbmVkIH0sIHsgaWQ6IHN0cmluZyB9PiA9IHsgaWQ6IHVuZGVmaW5lZCB9O1xyXG5cclxuICAgIHR5cGUgTTEgPSBHZW5lcmljR2V0PFAsIFwic3R5bGVcIiwgc3RyaW5nPjtcclxuICAgIHR5cGUgTTIgPSBHZW5lcmljR2V0PHt9LCBcInN0eWxlXCIsIHN0cmluZz47XHJcbiAgICBjb25zdCBtMTogTTEgPSBcIlwiO1xyXG4gICAgY29uc3QgbTI6IE0xID0gdW5kZWZpbmVkO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgICAgQmVjYXVzZSBudW1iZXIgaXNuJ3QgYXNzaWduYWJsZSB0byBzdHJpbmdcclxuICAgIGNvbnN0IG0zOiBNMSA9IDA7XHJcblxyXG4gICAgY29uc3QgbTQ6IE0yID0gXCJcIjtcclxuICAgIGNvbnN0IG01OiBNMiA9IHVuZGVmaW5lZDtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yICAgIEJlY2F1c2UgbnVtYmVyIGlzbid0IGFzc2lnbmFibGUgdG8gc3RyaW5nXHJcbiAgICBjb25zdCBtNjogTTIgPSAwO1xyXG5cclxuICAgIGNvbnN0IHAxOiBNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50LCB7fSwgeyBpZDogc3RyaW5nIH0+ID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKSh7fSwgeyBpZDogXCJzdHJpbmdcIiB9KTtcclxuICAgIGNvbnN0IHAyOiBNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50LCB7IGlkOiB1bmRlZmluZWQgfSwgeyBpZDogc3RyaW5nIH0+ID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKSh7IGlkOiB1bmRlZmluZWQgfSwgeyBpZDogXCJzdHJpbmdcIiB9KTtcclxuICAgIGNvbnN0IHAzOiBNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50LCB7IGlkOiB1bmRlZmluZWQgfSwgeyBpZDogdW5kZWZpbmVkIH0+ID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKSh7IGlkOiB1bmRlZmluZWQgfSwgeyBpZDogdW5kZWZpbmVkIH0pO1xyXG4gICAgY29uc3QgcDQ6IE1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQsIHt9LCB7fT4gPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHt9LCB7fSk7XHJcbiAgICBjb25zdCBwNSA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkocHJvcHMsIHt9KTtcclxuICAgIGNvbnN0IHA2ID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKShwcm9wcywgeyBpZDogdW5kZWZpbmVkIH0pO1xyXG4gICAgY29uc3QgcDcgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHByb3BzLCB7IGlkOiBcInN0cmluZ1wiIH0pO1xyXG5cclxuXHJcbiAgICBwMS5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgcDIuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yICAgIGlkIGNhbid0IGJlIGFueXRoaW5nIGJ1dCB1bmRlZmluZWRcclxuICAgIHAzLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciAgICBpZCBjYW4ndCBiZSBhbnl0aGluZyBidXQgdW5kZWZpbmVkXHJcbiAgICBwNC5pZD8uY29uY2F0KFwiXCIpO1xyXG5cclxuXHJcbiAgICBwNS5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgcDYuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIHA3LmlkPy5jb25jYXQoXCJcIik7XHJcblxyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgICAgaWQgbXVzdCBjb250YWluIHVuZGVmaW5lZFxyXG4gICAgcDUuaWQuY29uY2F0KFwiXCIpO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgICAgaWQgbXVzdCBjb250YWluIHVuZGVmaW5lZFxyXG4gICAgcDYuaWQuY29uY2F0KFwiXCIpO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgICAgaWQgbXVzdCBjb250YWluIHVuZGVmaW5lZFxyXG4gICAgcDcuaWQuY29uY2F0KFwiXCIpO1xyXG5cclxuXHJcbiAgICBpZiAocDUuYWxsb3dGdWxsU2NyZWVuID09PSB1bmRlZmluZWQpIHt9XHJcbiAgICBlbHNlIGlmIChwNS5hbGxvd0Z1bGxTY3JlZW4gPT09IGZhbHNlKSB7fVxyXG4gICAgZWxzZSBpZiAocDUuYWxsb3dGdWxsU2NyZWVuID09PSB0cnVlKSB7fVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYWNjZXB0c05ldmVyKHA1LmFsbG93RnVsbFNjcmVlbik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGlmIChwNi5hbGxvd0Z1bGxTY3JlZW4gPT09IHVuZGVmaW5lZCkge31cclxuICAgIGVsc2UgaWYgKHA2LmFsbG93RnVsbFNjcmVlbiA9PT0gZmFsc2UpIHt9XHJcbiAgICBlbHNlIGlmIChwNi5hbGxvd0Z1bGxTY3JlZW4gPT09IHRydWUpIHt9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBhY2NlcHRzTmV2ZXIocDYuYWxsb3dGdWxsU2NyZWVuKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYgKHA3LmFsbG93RnVsbFNjcmVlbiA9PT0gdW5kZWZpbmVkKSB7fVxyXG4gICAgZWxzZSBpZiAocDcuYWxsb3dGdWxsU2NyZWVuID09PSBmYWxzZSkge31cclxuICAgIGVsc2UgaWYgKHA3LmFsbG93RnVsbFNjcmVlbiA9PT0gdHJ1ZSkge31cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFjY2VwdHNOZXZlcihwNy5hbGxvd0Z1bGxTY3JlZW4pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBNYWtlIHN1cmUgaXQgd29ya3MgcmVjdXJzaXZlbHlcclxuICAgIGNvbnN0IHIxYSA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkoe30sIHAxKTtcclxuICAgIGNvbnN0IHIxYiA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkocHJvcHMsIHAxKTtcclxuICAgIGNvbnN0IHIyYSA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkoe30sIHAyKTtcclxuICAgIGNvbnN0IHIyYiA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkocHJvcHMsIHAyKTtcclxuICAgIGNvbnN0IHIzYSA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkoe30sIHAzKTtcclxuICAgIGNvbnN0IHIzYiA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkocHJvcHMsIHAzKTtcclxuICAgIGNvbnN0IHI0YSA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkoe30sIHA0KTtcclxuICAgIGNvbnN0IHI0YiA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkocHJvcHMsIHA0KTtcclxuICAgIGNvbnN0IHI1YSA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkoe30sIHA1KTtcclxuICAgIGNvbnN0IHI1YiA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkocHJvcHMsIHA1KTtcclxuICAgIGNvbnN0IHI2YSA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkoe30sIHA2KTtcclxuICAgIGNvbnN0IHI2YiA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkocHJvcHMsIHA2KTtcclxuICAgIGNvbnN0IHI3YSA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkoe30sIHA3KTtcclxuICAgIGNvbnN0IHI3YiA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkocHJvcHMsIHA3KTtcclxuXHJcblxyXG4gICAgcjFhLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICByMWIuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIHIyYS5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgcjJiLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yICAgIGlkIGNhbid0IGJlIGFueXRoaW5nIGJ1dCB1bmRlZmluZWRcclxuICAgIHIzYS5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgcjNiLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciAgICBpZCBjYW4ndCBiZSBhbnl0aGluZyBidXQgdW5kZWZpbmVkXHJcbiAgICByNGEuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIHI0Yi5pZD8uY29uY2F0KFwiXCIpO1xyXG5cclxuXHJcbiAgICByNWEuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIHI1Yi5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgcjZhLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICByNmIuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIHI3YS5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgcjdiLmlkPy5jb25jYXQoXCJcIik7XHJcblxyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgICAgaWQgbXVzdCBjb250YWluIHVuZGVmaW5lZFxyXG4gICAgcjVhLmlkLmNvbmNhdChcIlwiKTtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yICAgIGlkIG11c3QgY29udGFpbiB1bmRlZmluZWRcclxuICAgIHI1Yi5pZC5jb25jYXQoXCJcIik7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciAgICBpZCBtdXN0IGNvbnRhaW4gdW5kZWZpbmVkXHJcbiAgICByNmEuaWQuY29uY2F0KFwiXCIpO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgICAgaWQgbXVzdCBjb250YWluIHVuZGVmaW5lZFxyXG4gICAgcjZiLmlkLmNvbmNhdChcIlwiKTtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yICAgIGlkIG11c3QgY29udGFpbiB1bmRlZmluZWRcclxuICAgIHI3YS5pZC5jb25jYXQoXCJcIik7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciAgICBpZCBtdXN0IGNvbnRhaW4gdW5kZWZpbmVkXHJcbiAgICByN2IuaWQuY29uY2F0KFwiXCIpO1xyXG5cclxuXHJcbiAgICBpZiAocjVhLmFsbG93RnVsbFNjcmVlbiA9PT0gdW5kZWZpbmVkKSB7fVxyXG4gICAgZWxzZSBpZiAocjVhLmFsbG93RnVsbFNjcmVlbiA9PT0gZmFsc2UpIHt9XHJcbiAgICBlbHNlIGlmIChyNWEuYWxsb3dGdWxsU2NyZWVuID09PSB0cnVlKSB7fVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYWNjZXB0c05ldmVyKHI1YS5hbGxvd0Z1bGxTY3JlZW4pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBpZiAocjViLmFsbG93RnVsbFNjcmVlbiA9PT0gdW5kZWZpbmVkKSB7fVxyXG4gICAgZWxzZSBpZiAocjViLmFsbG93RnVsbFNjcmVlbiA9PT0gZmFsc2UpIHt9XHJcbiAgICBlbHNlIGlmIChyNWIuYWxsb3dGdWxsU2NyZWVuID09PSB0cnVlKSB7fVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYWNjZXB0c05ldmVyKHI1Yi5hbGxvd0Z1bGxTY3JlZW4pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBpZiAocjZhLmFsbG93RnVsbFNjcmVlbiA9PT0gdW5kZWZpbmVkKSB7fVxyXG4gICAgZWxzZSBpZiAocjZhLmFsbG93RnVsbFNjcmVlbiA9PT0gZmFsc2UpIHt9XHJcbiAgICBlbHNlIGlmIChyNmEuYWxsb3dGdWxsU2NyZWVuID09PSB0cnVlKSB7fVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYWNjZXB0c05ldmVyKHI2YS5hbGxvd0Z1bGxTY3JlZW4pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBpZiAocjZiLmFsbG93RnVsbFNjcmVlbiA9PT0gdW5kZWZpbmVkKSB7fVxyXG4gICAgZWxzZSBpZiAocjZiLmFsbG93RnVsbFNjcmVlbiA9PT0gZmFsc2UpIHt9XHJcbiAgICBlbHNlIGlmIChyNmIuYWxsb3dGdWxsU2NyZWVuID09PSB0cnVlKSB7fVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYWNjZXB0c05ldmVyKHI2Yi5hbGxvd0Z1bGxTY3JlZW4pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBpZiAocjdhLmFsbG93RnVsbFNjcmVlbiA9PT0gdW5kZWZpbmVkKSB7fVxyXG4gICAgZWxzZSBpZiAocjdhLmFsbG93RnVsbFNjcmVlbiA9PT0gZmFsc2UpIHt9XHJcbiAgICBlbHNlIGlmIChyN2EuYWxsb3dGdWxsU2NyZWVuID09PSB0cnVlKSB7fVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYWNjZXB0c05ldmVyKHI3YS5hbGxvd0Z1bGxTY3JlZW4pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBpZiAocjdiLmFsbG93RnVsbFNjcmVlbiA9PT0gdW5kZWZpbmVkKSB7fVxyXG4gICAgZWxzZSBpZiAocjdiLmFsbG93RnVsbFNjcmVlbiA9PT0gZmFsc2UpIHt9XHJcbiAgICBlbHNlIGlmIChyN2IuYWxsb3dGdWxsU2NyZWVuID09PSB0cnVlKSB7fVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYWNjZXB0c05ldmVyKHI3Yi5hbGxvd0Z1bGxTY3JlZW4pO1xyXG4gICAgfVxyXG5cclxufVxyXG5mdW5jdGlvbiBhY2NlcHRzTmV2ZXIobjogbmV2ZXIpIHt9XHJcbiovIiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IHVzZU1lcmdlZFByb3BzIH0gZnJvbSBcIi4vdXNlLW1lcmdlZC1wcm9wc1wiO1xyXG5pbXBvcnQgeyBPblBhc3NpdmVTdGF0ZUNoYW5nZSwgcmV0dXJuTnVsbCwgdXNlRW5zdXJlU3RhYmlsaXR5LCB1c2VQYXNzaXZlU3RhdGUgfSBmcm9tIFwiLi91c2UtcGFzc2l2ZS1zdGF0ZVwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VSZWZFbGVtZW50UmV0dXJuVHlwZTxUIGV4dGVuZHMgRXZlbnRUYXJnZXQ+IHtcclxuICAgIC8qKiAqKlNUQUJMRSoqICovXHJcbiAgICBnZXRFbGVtZW50KCk6IFQgfCBudWxsO1xyXG4gICAgLyoqICoqU1RBQkxFKiogKi9cclxuICAgIHVzZVJlZkVsZW1lbnRQcm9wcyhwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8VD4pOiBoLkpTWC5IVE1MQXR0cmlidXRlczxUPjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VSZWZFbGVtZW50UGFyYW1ldGVyczxUPiB7XHJcbiAgICBvbkVsZW1lbnRDaGFuZ2U/OiBPblBhc3NpdmVTdGF0ZUNoYW5nZTxUIHwgbnVsbD47XHJcbiAgICBvbk1vdW50PzogKGVsZW1lbnQ6IFQpID0+IHZvaWQ7XHJcbiAgICBvblVubW91bnQ/OiAoZWxlbWVudDogVCkgPT4gdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFsbG93cyBhY2Nlc3NpbmcgdGhlIGVsZW1lbnQgYSByZWYgcmVmZXJlbmNlcyBhcyBzb29uIGFzIGl0IGRvZXMgc28uXHJcbiAqICpUaGlzIGhvb2sgaXRzZWxmIHJldHVybnMgYSBob29rKi0tdXNlUmVmRWxlbWVudFByb3BzIG1vZGlmaWVzIHRoZSBwcm9wcyB0aGF0IHlvdSB3ZXJlIGdvaW5nIHRvIHBhc3MgdG8gYW4gSFRNTEVsZW1lbnQsIFxyXG4gKiBhZGRpbmcgYSBSZWZDYWxsYmFjayBhbmQgbWVyZ2luZyBpdCB3aXRoIGFueSBleGlzdGluZyByZWYgdGhhdCBleGlzdGVkIG9uIHRoZSBwcm9wcy5cclxuICogXHJcbiAqIERvbid0IGZvcmdldCB0byBwcm92aWRlIHRoZSBFbGVtZW50IGFzIHRoZSB0eXBlIGFyZ3VtZW50IVxyXG4gKiBcclxuICogQHJldHVybnMgVGhlIGVsZW1lbnQsIGFuZCB0aGUgc3ViLWhvb2sgdGhhdCBtYWtlcyBpdCByZXRyaWV2YWJsZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWZFbGVtZW50PFQgZXh0ZW5kcyBFdmVudFRhcmdldD4oYXJncz86IFVzZVJlZkVsZW1lbnRQYXJhbWV0ZXJzPFQ+KTogVXNlUmVmRWxlbWVudFJldHVyblR5cGU8VD4ge1xyXG4gICAgY29uc3QgeyBvbkVsZW1lbnRDaGFuZ2UsIG9uTW91bnQsIG9uVW5tb3VudCB9ID0gKGFyZ3MgPz8ge30pO1xyXG5cclxuICAgIHVzZUVuc3VyZVN0YWJpbGl0eShcInVzZVJlZkVsZW1lbnRcIiwgb25FbGVtZW50Q2hhbmdlLCBvbk1vdW50LCBvblVubW91bnQpO1xyXG5cclxuICAgIC8vIENhbGxlZCAoaW5kaXJlY3RseSkgYnkgdGhlIHJlZiB0aGF0IHRoZSBlbGVtZW50IHJlY2VpdmVzLlxyXG4gICAgY29uc3QgaGFuZGxlciA9IHVzZUNhbGxiYWNrPE9uUGFzc2l2ZVN0YXRlQ2hhbmdlPFQgfCBudWxsPj4oKGUsIHByZXZWYWx1ZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNsZWFudXAgPSBvbkVsZW1lbnRDaGFuZ2U/LihlLCBwcmV2VmFsdWUpO1xyXG4gICAgICAgIGlmIChwcmV2VmFsdWUpXHJcbiAgICAgICAgICAgIG9uVW5tb3VudD8uKHByZXZWYWx1ZSEpO1xyXG5cclxuICAgICAgICBpZiAoZSlcclxuICAgICAgICAgICAgb25Nb3VudD8uKGUpO1xyXG5cclxuICAgICAgICByZXR1cm4gY2xlYW51cDtcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICAvLyBMZXQgdXMgc3RvcmUgdGhlIGFjdHVhbCAocmVmZXJlbmNlIHRvKSB0aGUgZWxlbWVudCB3ZSBjYXB0dXJlXHJcbiAgICBjb25zdCBbZ2V0RWxlbWVudCwgc2V0RWxlbWVudF0gPSB1c2VQYXNzaXZlU3RhdGU8VCB8IG51bGw+KGhhbmRsZXIsIHJldHVybk51bGwsIHJ1bkltbWVkaWF0ZWx5KTtcclxuICAgIGNvbnN0IHVzZVJlZkVsZW1lbnRQcm9wcyA9IHVzZUNhbGxiYWNrPFVzZVJlZkVsZW1lbnRSZXR1cm5UeXBlPFQ+W1widXNlUmVmRWxlbWVudFByb3BzXCJdPigocHJvcHMpID0+IHVzZU1lcmdlZFByb3BzPFQ+KHsgcmVmOiBzZXRFbGVtZW50IH0sIHByb3BzKSwgW10pO1xyXG5cclxuICAgIC8vIFJldHVybiBib3RoIHRoZSBlbGVtZW50IGFuZCB0aGUgaG9vayB0aGF0IG1vZGlmaWVzIFxyXG4gICAgLy8gdGhlIHByb3BzIGFuZCBhbGxvd3MgdXMgdG8gYWN0dWFsbHkgZmluZCB0aGUgZWxlbWVudFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VSZWZFbGVtZW50UHJvcHMsXHJcbiAgICAgICAgZ2V0RWxlbWVudFxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBydW5JbW1lZGlhdGVseShmOiAoKSA9PiB2b2lkKSB7XHJcbiAgICBmKCk7XHJcbn1cclxuIiwiaW1wb3J0IHsgaCwgUHJlYWN0RE9NQXR0cmlidXRlcyB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwiLi91c2UtbWVyZ2VkLXByb3BzXCI7XHJcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgaXMgdXNlZCB0byBzZWxlY3QgKmp1c3QqIHRoZSB0eXBlZCBhZGRFdmVudExpc3RlbmVyIFxyXG4gKiBhbmQgbm90IHRoZSBnZW5lcmljIFwiSSdsbCBhY2NlcHQgYW55IHN0cmluZyBhbmQgYW55IGhhbmRsZXJcIiBvbmUuXHJcbiAqIFxyXG4gKiBUT0RPOiBUaGlzIFwiXCJcIndvcmtzXCJcIlwiIGJ1dCBpdCdzIG5vdCBncmVhdCBhbmQgaW1wbGljaXRseSByZWxpZXMgb25cclxuICogbGliLmRvbS50cyBhbHdheXMgZ2l2ZWluZyB0aGUgdHdvIG92ZXJsb2FkcyBpbiB0aGUgc2FtZSBvcmRlciwgd2l0aCB0aGVcclxuICogdHlwZWQgb25lIGZpcnN0LiAqVGhhdCogcHJvYmFibHkgd29uJ3QgY2hhbmdlLCBidXQgaWYgbW9yZSBvdmVybG9hZHNcclxuICogYXJlIGV2ZXIgYWRkZWQgdGhpcyB3aWxsIG5lZWQgYWRqdXN0bWVudC5cclxuICogXHJcbiAqIFNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTI3NjExNTYgZm9yIGhvdyBzZWxlY3RpbmcgdGhlIGNvcnJlY3Qgb3ZlcmxvYWQgd29ya3MuXHJcbiAqL1xyXG50eXBlIEZpcnN0T3ZlcmxvYWRQYXJhbWV0ZXJzPFQ+ID1cclxuICAgIFQgZXh0ZW5kcyB7ICguLi5hcmdzOiBpbmZlciBSKTogYW55OyAoLi4uYXJnczogYW55W10pOiBhbnk7ICguLi5hcmdzOiBhbnlbXSk6IGFueTsgKC4uLmFyZ3M6IGFueVtdKTogaW5mZXIgUiB9ID8gUiA6XHJcbiAgICBUIGV4dGVuZHMgeyAoLi4uYXJnczogaW5mZXIgUik6IGFueTsgKC4uLmFyZ3M6IGFueVtdKTogYW55OyAoLi4uYXJnczogYW55W10pOiBhbnkgfSA/IFIgOlxyXG4gICAgVCBleHRlbmRzIHsgKC4uLmFyZ3M6IGluZmVyIFIpOiBhbnk7ICguLi5hcmdzOiBhbnlbXSk6IGFueSB9ID8gUiA6XHJcbiAgICBUIGV4dGVuZHMgKC4uLmFyZ3M6IGluZmVyIFIpID0+IGFueSA/IFIgOiBbXTtcclxuXHJcbi8vIEdldCBqdXN0IHRoZSB0eXBlZCB2ZXJzaW9uIG9mIGFkZEV2ZW50TGlzdGVuZXIsIGlmIGl0IGV4aXN0c1xyXG50eXBlIFR5cGVkQWRkRXZlbnRMaXN0ZW5lcjxUIGV4dGVuZHMgRXZlbnRUYXJnZXQ+ID0gKC4uLmFyZ3M6IEZpcnN0T3ZlcmxvYWRQYXJhbWV0ZXJzPChUW1wiYWRkRXZlbnRMaXN0ZW5lclwiXSk+KSA9PiB2b2lkO1xyXG5cclxuLy8gUmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgb2YgXCJhZGRFdmVudExpc3RlbmVyXCIgKHRoZSBldmVudCB0eXBlIGFzIGEgc3RyaW5nKVxyXG50eXBlIFR5cGVkRXZlbnRMaXN0ZW5lclR5cGVzPFQgZXh0ZW5kcyBFdmVudFRhcmdldD4gPSBUeXBlZEFkZEV2ZW50TGlzdGVuZXI8VD4gZXh0ZW5kcyAoKHR5cGU6IGluZmVyIEsyLCAuLi5hcmdzOiBhbnlbXSkgPT4gYW55KSA/IEsyIDogc3RyaW5nO1xyXG5cclxuXHJcbi8vIFRPRE86IFRoaXMgaXNuJ3QgcXVpdGUgYWJsZSB0byBuYXJyb3cgZG93biB0aGUgZXhhY3QgZXZlbnQgdHlwZSBmb3IgdW5rbm93biByZWFzb25zLlxyXG4vLyBJbnN0ZWFkIGl0IHJldHVybnMgYSB1bmlvbiBvZiBhbGwgYXZhaWxhYmxlIGV2ZW50IHR5cGVzLCB3aGljaCBpcy4uLmZpbmUsIEkgZ3Vlc3MuXHJcbi8vIEkgZG9uJ3Qga25vdyB3aHkgYGluZmVyIEhgIGlzIGRvaW5nIHRoYXQgd2hlbiB0aGUgdHlwZSBzaG91bGQgYmUgbmFycm93ZWQgYnkgYFRgIHRob3VnaC4uLlxyXG4vLyBOb3RlIHRoYXQgdGhlIHR5cGUgcGFyYW1ldGVyIGlzIHN0aWxsIHVzZWQsIGV2ZW4gdGhvdWdoIGl0IGRvZXNuJ3QgbmFycm93IGRvd24gdGhlIHR5cGUsXHJcbi8vIGJlY2F1c2Ugb3RoZXJ3aXNlLCBpbnN0ZWFkIG9mIGJlaW5nIGEgdW5pb24gb2YgYWxsIHR5cGVzLCBpdCdzIGp1c3QgYGFueWBcclxudHlwZSBUeXBlZEV2ZW50SGFuZGxlcjxFIGV4dGVuZHMgRXZlbnRUYXJnZXQsIFQgZXh0ZW5kcyBUeXBlZEV2ZW50TGlzdGVuZXJUeXBlczxFPj4gPSBUeXBlZEFkZEV2ZW50TGlzdGVuZXI8RT4gZXh0ZW5kcyAoKHR5cGU6IFQsIGhhbmRsZXI6IGluZmVyIEgsIC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpID8gTm9uTnVsbGFibGU8SD4gOiBuZXZlcjtcclxuLy8oKFR5cGVkQWRkRXZlbnRMaXN0ZW5lcjxFPiAmICgodHlwZTogVCwgaGFuZGxlcjogKGU6IEV2ZW50KSA9PiB2b2lkLCAuLi5hcmdzOiBhbnlbXSkgPT4gYW55KSkgZXh0ZW5kcyAoKHR5cGU6IFQsIGhhbmRsZXI6IChlOiBpbmZlciBIKSA9PiBhbnksIC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpID8gSCA6IEZ1bmN0aW9uKSAvKiYgKFQgZXh0ZW5kcyBrZXlvZiBHbG9iYWxFdmVudEhhbmRsZXJzRXZlbnRNYXA/IEdsb2JhbEV2ZW50SGFuZGxlcnNFdmVudE1hcFtUXSA6IChlOiBFdmVudCkgPT4gdm9pZCkqLztcclxuXHJcbnR5cGUgUGFyYW1ldGVyczI8VCBleHRlbmRzIChFdmVudExpc3RlbmVyT2JqZWN0IHwgKCguLi5hcmdzOiBhbnkpID0+IGFueSkpPiA9XHJcbiAgICBUIGV4dGVuZHMgRXZlbnRMaXN0ZW5lck9iamVjdCA/IFBhcmFtZXRlcnM8VFtcImhhbmRsZUV2ZW50XCJdPiA6XHJcbiAgICBUIGV4dGVuZHMgKC4uLmFyZ3M6IGluZmVyIFApID0+IGFueSA/IFAgOiBuZXZlcjtcclxuXHJcblxyXG50eXBlIFR5cGVkRXZlbnRIYW5kbGVyRXZlbnQ8RSBleHRlbmRzIEV2ZW50VGFyZ2V0LCBUIGV4dGVuZHMgVHlwZWRFdmVudExpc3RlbmVyVHlwZXM8RT4+ID0gUGFyYW1ldGVyczI8VHlwZWRFdmVudEhhbmRsZXI8RSwgVD4+WzBdO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBBbGxvd3MgYXR0YWNoaW5nIGFuIGV2ZW50IGhhbmRsZXIgdG8gYW55ICpub24tUHJlYWN0KiBlbGVtZW50LCBhbmQgcmVtb3ZpbmcgaXQgd2hlbiB0aGUgY29tcG9uZW50IHVzaW5nIHRoZSBob29rIHVubW91bnRzLiBUaGUgY2FsbGJhY2sgZG9lcyBub3QgbmVlZCB0byBiZSBzdGFibGUgYWNyb3NzIHJlbmRlcnMuXHJcbiAqIFxyXG4gKiBEdWUgdG8gdHlwaW5nIGxpbWl0YXRpb25zLCB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgY2FsbGVkIGxpa2UgdGhpczpcclxuICogXHJcbiAqIGB1c2VFdmVudEhhbmRsZXIoZWxlbWVudCwgXCJpbnB1dFwiKTxJbnB1dEV2ZW50PihlID0+IHt9KWBcclxuICogXHJcbiAqIFRoZSB0eXBlIGFyZ3VtZW50IGlzIG9wdGlvbmFsLCBidXQgbmFycm93cyBkb3duIHRoZSB0eXBlIGZyb20gXCJhIHVuaW9uIG9mIGFsbCBldmVudHNcIiB0byB3aGF0ZXZlciB5b3Ugc3BlY2lmeSwgYW5kIGVycm9ycyBpZiBpdCBkb2Vzbid0IGV4aXN0LlxyXG4gKiBcclxuICogVGhlcmUgaXMgYSBzZXBhcmF0ZSB2ZXJzaW9uIHRoYXQgYXR0YWNoZXMgZXZlbnQgaGFuZGxlcnMgdG8gYSBzZXQgb2YgcHJvcHMuIFxyXG4gKiBJdCB0YWtlcyBkaWZmZXJlbnQgZXZlbnQgc3RyaW5nIHR5cGVzIChvbkV2ZW50IHZzIG9uZXZlbnQpLlxyXG4gKiBcclxuICogQHBhcmFtIHRhcmdldCBBICpub24tUHJlYWN0KiBub2RlIHRvIGF0dGFjaCB0aGUgZXZlbnQgdG8uXHJcbiAqIEByZXR1cm5zXHJcbiAqICpcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VHbG9iYWxIYW5kbGVyPFQgZXh0ZW5kcyBFdmVudFRhcmdldCwgRXZlbnRUeXBlIGV4dGVuZHMgVHlwZWRFdmVudExpc3RlbmVyVHlwZXM8VD4sIEggZXh0ZW5kcyBUeXBlZEV2ZW50SGFuZGxlckV2ZW50PFQsIEV2ZW50VHlwZT4+KHRhcmdldDogVCwgdHlwZTogRXZlbnRUeXBlLCBoYW5kbGVyOiBudWxsIHwgKChlOiBIKSA9PiB2b2lkKSwgb3B0aW9ucz86IFBhcmFtZXRlcnM8VHlwZWRBZGRFdmVudExpc3RlbmVyPFQ+PlsyXSk6IHZvaWQge1xyXG5cclxuICAgIC8vIE5vdGUgdG8gc2VsZjogVGhlIHR5cGluZyBkb2Vzbid0IGltcHJvdmUgZXZlbiBpZiB0aGlzIGlzIHNwbGl0IHVwIGludG8gYSBzdWItZnVuY3Rpb24uXHJcbiAgICAvLyBObyBtYXR0ZXIgd2hhdCwgaXQgc2VlbXMgaW1wb3NzaWJsZSB0byBnZXQgdGhlIGhhbmRsZXIncyBldmVudCBvYmplY3QgdHlwZWQgcGVyZmVjdGx5LlxyXG4gICAgLy8gSXQgc2VlbXMgbGlrZSBpdCdzIGd1YXJhbnRlZWQgdG8gYWx3YXlzIGJlIGEgdW5pb24gb2YgYWxsIGF2YWlsYWJsZSB0dXBlcy5cclxuICAgIC8vIEFnYWluLCBubyBtYXR0ZXIgd2hhdCBjb21iaW5hdGlvbiBvZiBzdWItIG9yIHN1Yi1zdWItZnVuY3Rpb25zIHVzZWQuXHJcblxyXG4gICAgbGV0IHN0YWJsZUhhbmRsZXI6IEV2ZW50TGlzdGVuZXIgfCBudWxsID0gdXNlU3RhYmxlQ2FsbGJhY2soaGFuZGxlciA/PyAoKCkgPT4geyB9KSkgYXMgRXZlbnRMaXN0ZW5lcjtcclxuICAgIGlmIChoYW5kbGVyID09IG51bGwpXHJcbiAgICAgICAgc3RhYmxlSGFuZGxlciA9IG51bGw7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAoc3RhYmxlSGFuZGxlcikge1xyXG4gICAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBzdGFibGVIYW5kbGVyLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBzdGFibGVIYW5kbGVyLCBvcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbdGFyZ2V0LCB0eXBlLCBzdGFibGVIYW5kbGVyXSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBhbHRlcm5hdGl2ZSB3YXkgdG8gYWRkIGFuIGV2ZW50IGhhbmRsZXIgdG8gYW4gZWxlbWVudC4gVXNlZnVsIHByaW1hcmlseSB3aGVuIGludGVncmF0aW5nIDNyZCBwYXJ0eSBsaWJyYXJpZXMgdGhhdCBleHBlY3QgYSBnZW5lcmljIFwiYWRkIGV2ZW50IGhhbmRsZXJcIiBmdW5jdGlvbi5cclxuICogXHJcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFsbG93cyB5b3UgdG8gbW9kaWZ5IGEgc2V0IG9mIHByb3BzIHRvIGFwcGx5IHRoaXMgaGFuZGxlci5cclxuICogXHJcbiAqIEZvciB0eXBpbmcgcmVhc29ucywgdGhpcyBmdW5jdGlvbiBpcyBzcGxpdCBpbnRvIHR3by4gIFVzYWdlIGlzIGxpa2UgdGhlIGZvbGxvd2luZzpcclxuICogXHJcbiAqIGBgYFxyXG4gKiBjb25zdCB7IHVzZUxvY2FsRXZlbnRIYW5kbGVyUHJvcHMgfSA9IHVzZUxvY2FsRXZlbnRIYW5kbGVyPEhUTUxEaXZFbGVtZW50PigpKFwib25Nb3VzZURvd25cIiwgZSA9PiB7ICB9KTtcclxuICogY29uc3QgZGl2UHJvcHMgPSB1c2VMb2NhbEV2ZW50SGFuZGxlclByb3BzKHByb3BzKTtcclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9jYWxIYW5kbGVyPEVsZW1lbnRUeXBlIGV4dGVuZHMgKEhUTUxFbGVtZW50VGFnTmFtZU1hcFtrZXlvZiBIVE1MRWxlbWVudFRhZ05hbWVNYXBdIHwgU1ZHRWxlbWVudFRhZ05hbWVNYXBba2V5b2YgU1ZHRWxlbWVudFRhZ05hbWVNYXBdKT4oKSB7XHJcbiAgICByZXR1cm4gdXNlQ2FsbGJhY2soPEV2ZW50VHlwZSBleHRlbmRzIEV4Y2x1ZGU8a2V5b2YgaC5KU1guRE9NQXR0cmlidXRlczxFbGVtZW50VHlwZT4sIGtleW9mIFByZWFjdERPTUF0dHJpYnV0ZXM+Pih0eXBlOiBFdmVudFR5cGUsIGhhbmRsZXI6IE5vbk51bGxhYmxlPGguSlNYLkRPTUF0dHJpYnV0ZXM8RWxlbWVudFR5cGU+W0V2ZW50VHlwZV0+KSA9PiB7XHJcblxyXG4gICAgICAgIGNvbnN0IHN0YWJsZUhhbmRsZXIgPSB1c2VTdGFibGVDYWxsYmFjayhoYW5kbGVyKTtcclxuXHJcbiAgICAgICAgY29uc3QgdXNlTG9jYWxFdmVudEhhbmRsZXJQcm9wcyA9IHVzZUNhbGxiYWNrKChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8RWxlbWVudFR5cGU+KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRQcm9wczxFbGVtZW50VHlwZT4oeyBbdHlwZV06IHN0YWJsZUhhbmRsZXIgfSBhcyB7IFtLIGluIEV2ZW50VHlwZV06IHR5cGVvZiBoYW5kbGVyIH0sIHByb3BzKSBhcyBoLkpTWC5IVE1MQXR0cmlidXRlczxFbGVtZW50VHlwZT47XHJcbiAgICAgICAgfSwgW3R5cGVdKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHsgdXNlTG9jYWxFdmVudEhhbmRsZXJQcm9wcyB9O1xyXG5cclxuICAgIH0sIFtdKTtcclxufVxyXG4iLCJjb25zdCBjYW5kaWRhdGVTZWxlY3RvcnMgPSBbXG4gICdpbnB1dCcsXG4gICdzZWxlY3QnLFxuICAndGV4dGFyZWEnLFxuICAnYVtocmVmXScsXG4gICdidXR0b24nLFxuICAnW3RhYmluZGV4XTpub3Qoc2xvdCknLFxuICAnYXVkaW9bY29udHJvbHNdJyxcbiAgJ3ZpZGVvW2NvbnRyb2xzXScsXG4gICdbY29udGVudGVkaXRhYmxlXTpub3QoW2NvbnRlbnRlZGl0YWJsZT1cImZhbHNlXCJdKScsXG4gICdkZXRhaWxzPnN1bW1hcnk6Zmlyc3Qtb2YtdHlwZScsXG4gICdkZXRhaWxzJyxcbl07XG5jb25zdCBjYW5kaWRhdGVTZWxlY3RvciA9IC8qICNfX1BVUkVfXyAqLyBjYW5kaWRhdGVTZWxlY3RvcnMuam9pbignLCcpO1xuXG5jb25zdCBOb0VsZW1lbnQgPSB0eXBlb2YgRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCc7XG5cbmNvbnN0IG1hdGNoZXMgPSBOb0VsZW1lbnRcbiAgPyBmdW5jdGlvbiAoKSB7fVxuICA6IEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgfHxcbiAgICBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fFxuICAgIEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3RvcjtcblxuY29uc3QgZ2V0Um9vdE5vZGUgPVxuICAhTm9FbGVtZW50ICYmIEVsZW1lbnQucHJvdG90eXBlLmdldFJvb3ROb2RlXG4gICAgPyAoZWxlbWVudCkgPT4gZWxlbWVudC5nZXRSb290Tm9kZSgpXG4gICAgOiAoZWxlbWVudCkgPT4gZWxlbWVudC5vd25lckRvY3VtZW50O1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWwgY29udGFpbmVyIHRvIGNoZWNrIGluXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVDb250YWluZXIgYWRkIGNvbnRhaW5lciB0byBjaGVja1xuICogQHBhcmFtIHsobm9kZTogRWxlbWVudCkgPT4gYm9vbGVhbn0gZmlsdGVyIGZpbHRlciBjYW5kaWRhdGVzXG4gKiBAcmV0dXJucyB7RWxlbWVudFtdfVxuICovXG5jb25zdCBnZXRDYW5kaWRhdGVzID0gZnVuY3Rpb24gKGVsLCBpbmNsdWRlQ29udGFpbmVyLCBmaWx0ZXIpIHtcbiAgbGV0IGNhbmRpZGF0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoXG4gICAgZWwucXVlcnlTZWxlY3RvckFsbChjYW5kaWRhdGVTZWxlY3RvcilcbiAgKTtcbiAgaWYgKGluY2x1ZGVDb250YWluZXIgJiYgbWF0Y2hlcy5jYWxsKGVsLCBjYW5kaWRhdGVTZWxlY3RvcikpIHtcbiAgICBjYW5kaWRhdGVzLnVuc2hpZnQoZWwpO1xuICB9XG4gIGNhbmRpZGF0ZXMgPSBjYW5kaWRhdGVzLmZpbHRlcihmaWx0ZXIpO1xuICByZXR1cm4gY2FuZGlkYXRlcztcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIEdldFNoYWRvd1Jvb3RcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCB0byBjaGVjayBmb3Igc2hhZG93IHJvb3RcbiAqIEByZXR1cm5zIHtTaGFkb3dSb290fGJvb2xlYW59IFNoYWRvd1Jvb3QgaWYgYXZhaWxhYmxlIG9yIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBhIHNoYWRvd1Jvb3QgaXMgYXR0YWNoZWQgYnV0IG5vdCBhdmFpbGFibGUuXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgU2hhZG93Um9vdEZpbHRlclxuICogQHBhcmFtIHtFbGVtZW50fSBzaGFkb3dIb3N0Tm9kZSB0aGUgZWxlbWVudCB3aGljaCBjb250YWlucyBzaGFkb3cgY29udGVudFxuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgYSBzaGFkb3cgcm9vdCBjb3VsZCBwb3RlbnRpYWxseSBjb250YWluIHZhbGlkIGNhbmRpZGF0ZXMuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDYW5kaWRhdGVzU2NvcGVcbiAqIEBwcm9wZXJ0eSB7RWxlbWVudH0gc2NvcGUgY29udGFpbnMgaW5uZXIgY2FuZGlkYXRlc1xuICogQHByb3BlcnR5IHtFbGVtZW50W119IGNhbmRpZGF0ZXNcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEl0ZXJhdGl2ZU9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7R2V0U2hhZG93Um9vdHxib29sZWFufSBnZXRTaGFkb3dSb290IHRydWUgaWYgc2hhZG93IHN1cHBvcnQgaXMgZW5hYmxlZDsgZmFsc3kgaWYgbm90O1xuICogIGlmIGEgZnVuY3Rpb24sIGltcGxpZXMgc2hhZG93IHN1cHBvcnQgaXMgZW5hYmxlZCBhbmQgZWl0aGVyIHJldHVybnMgdGhlIHNoYWRvdyByb290IG9mIGFuIGVsZW1lbnRcbiAqICBvciBhIGJvb2xlYW4gc3RhdGluZyBpZiBpdCBoYXMgYW4gdW5kaXNjbG9zZWQgc2hhZG93IHJvb3RcbiAqIEBwcm9wZXJ0eSB7KG5vZGU6IEVsZW1lbnQpID0+IGJvb2xlYW59IGZpbHRlciBmaWx0ZXIgY2FuZGlkYXRlc1xuICogQHByb3BlcnR5IHtib29sZWFufSBmbGF0dGVuIGlmIHRydWUgdGhlbiByZXN1bHQgd2lsbCBmbGF0dGVuIGFueSBDYW5kaWRhdGVzU2NvcGUgaW50byB0aGUgcmV0dXJuZWQgbGlzdFxuICogQHByb3BlcnR5IHtTaGFkb3dSb290RmlsdGVyfSBzaGFkb3dSb290RmlsdGVyIGZpbHRlciBzaGFkb3cgcm9vdHM7XG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnRbXX0gZWxlbWVudHMgbGlzdCBvZiBlbGVtZW50IGNvbnRhaW5lcnMgdG8gbWF0Y2ggY2FuZGlkYXRlcyBmcm9tXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVDb250YWluZXIgYWRkIGNvbnRhaW5lciBsaXN0IHRvIGNoZWNrXG4gKiBAcGFyYW0ge0l0ZXJhdGl2ZU9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtBcnJheS48RWxlbWVudHxDYW5kaWRhdGVzU2NvcGU+fVxuICovXG5jb25zdCBnZXRDYW5kaWRhdGVzSXRlcmF0aXZlbHkgPSBmdW5jdGlvbiAoXG4gIGVsZW1lbnRzLFxuICBpbmNsdWRlQ29udGFpbmVyLFxuICBvcHRpb25zXG4pIHtcbiAgY29uc3QgY2FuZGlkYXRlcyA9IFtdO1xuICBjb25zdCBlbGVtZW50c1RvQ2hlY2sgPSBBcnJheS5mcm9tKGVsZW1lbnRzKTtcbiAgd2hpbGUgKGVsZW1lbnRzVG9DaGVjay5sZW5ndGgpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNUb0NoZWNrLnNoaWZ0KCk7XG4gICAgaWYgKGVsZW1lbnQudGFnTmFtZSA9PT0gJ1NMT1QnKSB7XG4gICAgICAvLyBhZGQgc2hhZG93IGRvbSBzbG90IHNjb3BlIChzbG90IGl0c2VsZiBjYW5ub3QgYmUgZm9jdXNhYmxlKVxuICAgICAgY29uc3QgYXNzaWduZWQgPSBlbGVtZW50LmFzc2lnbmVkRWxlbWVudHMoKTtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBhc3NpZ25lZC5sZW5ndGggPyBhc3NpZ25lZCA6IGVsZW1lbnQuY2hpbGRyZW47XG4gICAgICBjb25zdCBuZXN0ZWRDYW5kaWRhdGVzID0gZ2V0Q2FuZGlkYXRlc0l0ZXJhdGl2ZWx5KGNvbnRlbnQsIHRydWUsIG9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMuZmxhdHRlbikge1xuICAgICAgICBjYW5kaWRhdGVzLnB1c2goLi4ubmVzdGVkQ2FuZGlkYXRlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYW5kaWRhdGVzLnB1c2goe1xuICAgICAgICAgIHNjb3BlOiBlbGVtZW50LFxuICAgICAgICAgIGNhbmRpZGF0ZXM6IG5lc3RlZENhbmRpZGF0ZXMsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjaGVjayBjYW5kaWRhdGUgZWxlbWVudFxuICAgICAgY29uc3QgdmFsaWRDYW5kaWRhdGUgPSBtYXRjaGVzLmNhbGwoZWxlbWVudCwgY2FuZGlkYXRlU2VsZWN0b3IpO1xuICAgICAgaWYgKFxuICAgICAgICB2YWxpZENhbmRpZGF0ZSAmJlxuICAgICAgICBvcHRpb25zLmZpbHRlcihlbGVtZW50KSAmJlxuICAgICAgICAoaW5jbHVkZUNvbnRhaW5lciB8fCAhZWxlbWVudHMuaW5jbHVkZXMoZWxlbWVudCkpXG4gICAgICApIHtcbiAgICAgICAgY2FuZGlkYXRlcy5wdXNoKGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBpdGVyYXRlIG92ZXIgc2hhZG93IGNvbnRlbnQgaWYgcG9zc2libGVcbiAgICAgIGNvbnN0IHNoYWRvd1Jvb3QgPVxuICAgICAgICBlbGVtZW50LnNoYWRvd1Jvb3QgfHxcbiAgICAgICAgLy8gY2hlY2sgZm9yIGFuIHVuZGlzY2xvc2VkIHNoYWRvd1xuICAgICAgICAodHlwZW9mIG9wdGlvbnMuZ2V0U2hhZG93Um9vdCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgIG9wdGlvbnMuZ2V0U2hhZG93Um9vdChlbGVtZW50KSk7XG5cbiAgICAgIGNvbnN0IHZhbGlkU2hhZG93Um9vdCA9XG4gICAgICAgICFvcHRpb25zLnNoYWRvd1Jvb3RGaWx0ZXIgfHwgb3B0aW9ucy5zaGFkb3dSb290RmlsdGVyKGVsZW1lbnQpO1xuXG4gICAgICBpZiAoc2hhZG93Um9vdCAmJiB2YWxpZFNoYWRvd1Jvb3QpIHtcbiAgICAgICAgLy8gYWRkIHNoYWRvdyBkb20gc2NvcGUgSUlGIGEgc2hhZG93IHJvb3Qgbm9kZSB3YXMgZ2l2ZW47IG90aGVyd2lzZSwgYW4gdW5kaXNjbG9zZWRcbiAgICAgICAgLy8gIHNoYWRvdyBleGlzdHMsIHNvIGxvb2sgYXQgbGlnaHQgZG9tIGNoaWxkcmVuIGFzIGZhbGxiYWNrIEJVVCBjcmVhdGUgYSBzY29wZSBmb3IgYW55XG4gICAgICAgIC8vICBjaGlsZCBjYW5kaWRhdGVzIGZvdW5kIGJlY2F1c2UgdGhleSdyZSBsaWtlbHkgc2xvdHRlZCBlbGVtZW50cyAoZWxlbWVudHMgdGhhdCBhcmVcbiAgICAgICAgLy8gIGNoaWxkcmVuIG9mIHRoZSB3ZWIgY29tcG9uZW50IGVsZW1lbnQgKHdoaWNoIGhhcyB0aGUgc2hhZG93KSwgaW4gdGhlIGxpZ2h0IGRvbSwgYnV0XG4gICAgICAgIC8vICBzbG90dGVkIHNvbWV3aGVyZSBfaW5zaWRlXyB0aGUgdW5kaXNjbG9zZWQgc2hhZG93KSAtLSB0aGUgc2NvcGUgaXMgY3JlYXRlZCBiZWxvdyxcbiAgICAgICAgLy8gIF9hZnRlcl8gd2UgcmV0dXJuIGZyb20gdGhpcyByZWN1cnNpdmUgY2FsbFxuICAgICAgICBjb25zdCBuZXN0ZWRDYW5kaWRhdGVzID0gZ2V0Q2FuZGlkYXRlc0l0ZXJhdGl2ZWx5KFxuICAgICAgICAgIHNoYWRvd1Jvb3QgPT09IHRydWUgPyBlbGVtZW50LmNoaWxkcmVuIDogc2hhZG93Um9vdC5jaGlsZHJlbixcbiAgICAgICAgICB0cnVlLFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5mbGF0dGVuKSB7XG4gICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKC4uLm5lc3RlZENhbmRpZGF0ZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbmRpZGF0ZXMucHVzaCh7XG4gICAgICAgICAgICBzY29wZTogZWxlbWVudCxcbiAgICAgICAgICAgIGNhbmRpZGF0ZXM6IG5lc3RlZENhbmRpZGF0ZXMsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHRoZXJlJ3Mgbm90IHNoYWRvdyBzbyBqdXN0IGRpZyBpbnRvIHRoZSBlbGVtZW50J3MgKGxpZ2h0IGRvbSkgY2hpbGRyZW5cbiAgICAgICAgLy8gIF9fd2l0aG91dF9fIGdpdmluZyB0aGUgZWxlbWVudCBzcGVjaWFsIHNjb3BlIHRyZWF0bWVudFxuICAgICAgICBlbGVtZW50c1RvQ2hlY2sudW5zaGlmdCguLi5lbGVtZW50LmNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNhbmRpZGF0ZXM7XG59O1xuXG5jb25zdCBnZXRUYWJpbmRleCA9IGZ1bmN0aW9uIChub2RlLCBpc1Njb3BlKSB7XG4gIGlmIChub2RlLnRhYkluZGV4IDwgMCkge1xuICAgIC8vIGluIENocm9tZSwgPGRldGFpbHMvPiwgPGF1ZGlvIGNvbnRyb2xzLz4gYW5kIDx2aWRlbyBjb250cm9scy8+IGVsZW1lbnRzIGdldCBhIGRlZmF1bHRcbiAgICAvLyBgdGFiSW5kZXhgIG9mIC0xIHdoZW4gdGhlICd0YWJpbmRleCcgYXR0cmlidXRlIGlzbid0IHNwZWNpZmllZCBpbiB0aGUgRE9NLFxuICAgIC8vIHlldCB0aGV5IGFyZSBzdGlsbCBwYXJ0IG9mIHRoZSByZWd1bGFyIHRhYiBvcmRlcjsgaW4gRkYsIHRoZXkgZ2V0IGEgZGVmYXVsdFxuICAgIC8vIGB0YWJJbmRleGAgb2YgMDsgc2luY2UgQ2hyb21lIHN0aWxsIHB1dHMgdGhvc2UgZWxlbWVudHMgaW4gdGhlIHJlZ3VsYXIgdGFiXG4gICAgLy8gb3JkZXIsIGNvbnNpZGVyIHRoZWlyIHRhYiBpbmRleCB0byBiZSAwLlxuICAgIC8vIEFsc28gYnJvd3NlcnMgZG8gbm90IHJldHVybiBgdGFiSW5kZXhgIGNvcnJlY3RseSBmb3IgY29udGVudEVkaXRhYmxlIG5vZGVzO1xuICAgIC8vIHNvIGlmIHRoZXkgZG9uJ3QgaGF2ZSBhIHRhYmluZGV4IGF0dHJpYnV0ZSBzcGVjaWZpY2FsbHkgc2V0LCBhc3N1bWUgaXQncyAwLlxuICAgIC8vXG4gICAgLy8gaXNTY29wZSBpcyBwb3NpdGl2ZSBmb3IgY3VzdG9tIGVsZW1lbnQgd2l0aCBzaGFkb3cgcm9vdCBvciBzbG90IHRoYXQgYnkgZGVmYXVsdFxuICAgIC8vIGhhdmUgdGFiSW5kZXggLTEsIGJ1dCBuZWVkIHRvIGJlIHNvcnRlZCBieSBkb2N1bWVudCBvcmRlciBpbiBvcmRlciBmb3IgdGhlaXJcbiAgICAvLyBjb250ZW50IHRvIGJlIGluc2VydGVkIGluIHRoZSBjb3JyZWN0IHBvc2l0aW9uXG4gICAgaWYgKFxuICAgICAgKGlzU2NvcGUgfHxcbiAgICAgICAgL14oQVVESU98VklERU98REVUQUlMUykkLy50ZXN0KG5vZGUudGFnTmFtZSkgfHxcbiAgICAgICAgbm9kZS5pc0NvbnRlbnRFZGl0YWJsZSkgJiZcbiAgICAgIGlzTmFOKHBhcnNlSW50KG5vZGUuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpLCAxMCkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbm9kZS50YWJJbmRleDtcbn07XG5cbmNvbnN0IHNvcnRPcmRlcmVkVGFiYmFibGVzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgcmV0dXJuIGEudGFiSW5kZXggPT09IGIudGFiSW5kZXhcbiAgICA/IGEuZG9jdW1lbnRPcmRlciAtIGIuZG9jdW1lbnRPcmRlclxuICAgIDogYS50YWJJbmRleCAtIGIudGFiSW5kZXg7XG59O1xuXG5jb25zdCBpc0lucHV0ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZSA9PT0gJ0lOUFVUJztcbn07XG5cbmNvbnN0IGlzSGlkZGVuSW5wdXQgPSBmdW5jdGlvbiAobm9kZSkge1xuICByZXR1cm4gaXNJbnB1dChub2RlKSAmJiBub2RlLnR5cGUgPT09ICdoaWRkZW4nO1xufTtcblxuY29uc3QgaXNEZXRhaWxzV2l0aFN1bW1hcnkgPSBmdW5jdGlvbiAobm9kZSkge1xuICBjb25zdCByID1cbiAgICBub2RlLnRhZ05hbWUgPT09ICdERVRBSUxTJyAmJlxuICAgIEFycmF5LnByb3RvdHlwZS5zbGljZVxuICAgICAgLmFwcGx5KG5vZGUuY2hpbGRyZW4pXG4gICAgICAuc29tZSgoY2hpbGQpID0+IGNoaWxkLnRhZ05hbWUgPT09ICdTVU1NQVJZJyk7XG4gIHJldHVybiByO1xufTtcblxuY29uc3QgZ2V0Q2hlY2tlZFJhZGlvID0gZnVuY3Rpb24gKG5vZGVzLCBmb3JtKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobm9kZXNbaV0uY2hlY2tlZCAmJiBub2Rlc1tpXS5mb3JtID09PSBmb3JtKSB7XG4gICAgICByZXR1cm4gbm9kZXNbaV07XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBpc1RhYmJhYmxlUmFkaW8gPSBmdW5jdGlvbiAobm9kZSkge1xuICBpZiAoIW5vZGUubmFtZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IHJhZGlvU2NvcGUgPSBub2RlLmZvcm0gfHwgZ2V0Um9vdE5vZGUobm9kZSk7XG4gIGNvbnN0IHF1ZXJ5UmFkaW9zID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gcmFkaW9TY29wZS5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgJ2lucHV0W3R5cGU9XCJyYWRpb1wiXVtuYW1lPVwiJyArIG5hbWUgKyAnXCJdJ1xuICAgICk7XG4gIH07XG5cbiAgbGV0IHJhZGlvU2V0O1xuICBpZiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2Ygd2luZG93LkNTUyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2Ygd2luZG93LkNTUy5lc2NhcGUgPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmFkaW9TZXQgPSBxdWVyeVJhZGlvcyh3aW5kb3cuQ1NTLmVzY2FwZShub2RlLm5hbWUpKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgcmFkaW9TZXQgPSBxdWVyeVJhZGlvcyhub2RlLm5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICdMb29rcyBsaWtlIHlvdSBoYXZlIGEgcmFkaW8gYnV0dG9uIHdpdGggYSBuYW1lIGF0dHJpYnV0ZSBjb250YWluaW5nIGludmFsaWQgQ1NTIHNlbGVjdG9yIGNoYXJhY3RlcnMgYW5kIG5lZWQgdGhlIENTUy5lc2NhcGUgcG9seWZpbGw6ICVzJyxcbiAgICAgICAgZXJyLm1lc3NhZ2VcbiAgICAgICk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY2hlY2tlZCA9IGdldENoZWNrZWRSYWRpbyhyYWRpb1NldCwgbm9kZS5mb3JtKTtcbiAgcmV0dXJuICFjaGVja2VkIHx8IGNoZWNrZWQgPT09IG5vZGU7XG59O1xuXG5jb25zdCBpc1JhZGlvID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgcmV0dXJuIGlzSW5wdXQobm9kZSkgJiYgbm9kZS50eXBlID09PSAncmFkaW8nO1xufTtcblxuY29uc3QgaXNOb25UYWJiYWJsZVJhZGlvID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgcmV0dXJuIGlzUmFkaW8obm9kZSkgJiYgIWlzVGFiYmFibGVSYWRpbyhub2RlKTtcbn07XG5cbi8vIGRldGVybWluZXMgaWYgYSBub2RlIGlzIHVsdGltYXRlbHkgYXR0YWNoZWQgdG8gdGhlIHdpbmRvdydzIGRvY3VtZW50XG5jb25zdCBpc05vZGVBdHRhY2hlZCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIC8vIFRoZSByb290IG5vZGUgaXMgdGhlIHNoYWRvdyByb290IGlmIHRoZSBub2RlIGlzIGluIGEgc2hhZG93IERPTTsgc29tZSBkb2N1bWVudCBvdGhlcndpc2VcbiAgLy8gIChidXQgTk9UIF90aGVfIGRvY3VtZW50OyBzZWUgc2Vjb25kICdJZicgY29tbWVudCBiZWxvdyBmb3IgbW9yZSkuXG4gIC8vIElmIHJvb3ROb2RlIGlzIHNoYWRvdyByb290LCBpdCdsbCBoYXZlIGEgaG9zdCwgd2hpY2ggaXMgdGhlIGVsZW1lbnQgdG8gd2hpY2ggdGhlIHNoYWRvd1xuICAvLyAgaXMgYXR0YWNoZWQsIGFuZCB0aGUgb25lIHdlIG5lZWQgdG8gY2hlY2sgaWYgaXQncyBpbiB0aGUgZG9jdW1lbnQgb3Igbm90IChiZWNhdXNlIHRoZVxuICAvLyAgc2hhZG93LCBhbmQgYWxsIG5vZGVzIGl0IGNvbnRhaW5zLCBpcyBuZXZlciBjb25zaWRlcmVkIGluIHRoZSBkb2N1bWVudCBzaW5jZSBzaGFkb3dzXG4gIC8vICBiZWhhdmUgbGlrZSBzZWxmLWNvbnRhaW5lZCBET01zOyBidXQgaWYgdGhlIHNoYWRvdydzIEhPU1QsIHdoaWNoIGlzIHBhcnQgb2YgdGhlIGRvY3VtZW50LFxuICAvLyAgaXMgaGlkZGVuLCBvciBpcyBub3QgaW4gdGhlIGRvY3VtZW50IGl0c2VsZiBidXQgaXMgZGV0YWNoZWQsIGl0IHdpbGwgYWZmZWN0IHRoZSBzaGFkb3cnc1xuICAvLyAgdmlzaWJpbGl0eSwgaW5jbHVkaW5nIGFsbCB0aGUgbm9kZXMgaXQgY29udGFpbnMpLiBUaGUgaG9zdCBjb3VsZCBiZSBhbnkgbm9ybWFsIG5vZGUsXG4gIC8vICBvciBhIGN1c3RvbSBlbGVtZW50IChpLmUuIHdlYiBjb21wb25lbnQpLiBFaXRoZXIgd2F5LCB0aGF0J3MgdGhlIG9uZSB0aGF0IGlzIGNvbnNpZGVyZWRcbiAgLy8gIHBhcnQgb2YgdGhlIGRvY3VtZW50LCBub3QgdGhlIHNoYWRvdyByb290LCBub3IgYW55IG9mIGl0cyBjaGlsZHJlbiAoaS5lLiB0aGUgbm9kZSBiZWluZ1xuICAvLyAgdGVzdGVkKS5cbiAgLy8gVG8gZnVydGhlciBjb21wbGljYXRlIHRoaW5ncywgd2UgaGF2ZSB0byBsb29rIGFsbCB0aGUgd2F5IHVwIHVudGlsIHdlIGZpbmQgYSBzaGFkb3cgSE9TVFxuICAvLyAgdGhhdCBpcyBhdHRhY2hlZCAob3IgZmluZCBub25lKSBiZWNhdXNlIHRoZSBub2RlIG1pZ2h0IGJlIGluIG5lc3RlZCBzaGFkb3dzLi4uXG4gIC8vIElmIHJvb3ROb2RlIGlzIG5vdCBhIHNoYWRvdyByb290LCBpdCB3b24ndCBoYXZlIGEgaG9zdCwgYW5kIHNvIHJvb3ROb2RlIHNob3VsZCBiZSB0aGVcbiAgLy8gIGRvY3VtZW50IChwZXIgdGhlIGRvY3MpIGFuZCB3aGlsZSBpdCdzIGEgRG9jdW1lbnQtdHlwZSBvYmplY3QsIHRoYXQgZG9jdW1lbnQgZG9lcyBub3RcbiAgLy8gIGFwcGVhciB0byBiZSB0aGUgc2FtZSBhcyB0aGUgbm9kZSdzIGBvd25lckRvY3VtZW50YCBmb3Igc29tZSByZWFzb24sIHNvIGl0J3Mgc2FmZXJcbiAgLy8gIHRvIGlnbm9yZSB0aGUgcm9vdE5vZGUgYXQgdGhpcyBwb2ludCwgYW5kIHVzZSBgbm9kZS5vd25lckRvY3VtZW50YC4gT3RoZXJ3aXNlLFxuICAvLyAgdXNpbmcgYHJvb3ROb2RlLmNvbnRhaW5zKG5vZGUpYCB3aWxsIF9hbHdheXNfIGJlIHRydWUgd2UnbGwgZ2V0IGZhbHNlLXBvc2l0aXZlcyB3aGVuXG4gIC8vICBub2RlIGlzIGFjdHVhbGx5IGRldGFjaGVkLlxuICBsZXQgbm9kZVJvb3RIb3N0ID0gZ2V0Um9vdE5vZGUobm9kZSkuaG9zdDtcbiAgbGV0IGF0dGFjaGVkID0gISEoXG4gICAgbm9kZVJvb3RIb3N0Py5vd25lckRvY3VtZW50LmNvbnRhaW5zKG5vZGVSb290SG9zdCkgfHxcbiAgICBub2RlLm93bmVyRG9jdW1lbnQuY29udGFpbnMobm9kZSlcbiAgKTtcblxuICB3aGlsZSAoIWF0dGFjaGVkICYmIG5vZGVSb290SG9zdCkge1xuICAgIC8vIHNpbmNlIGl0J3Mgbm90IGF0dGFjaGVkIGFuZCB3ZSBoYXZlIGEgcm9vdCBob3N0LCB0aGUgbm9kZSBNVVNUIGJlIGluIGEgbmVzdGVkIHNoYWRvdyBET00sXG4gICAgLy8gIHdoaWNoIG1lYW5zIHdlIG5lZWQgdG8gZ2V0IHRoZSBob3N0J3MgaG9zdCBhbmQgY2hlY2sgaWYgdGhhdCBwYXJlbnQgaG9zdCBpcyBjb250YWluZWRcbiAgICAvLyAgaW4gKGkuZS4gYXR0YWNoZWQgdG8pIHRoZSBkb2N1bWVudFxuICAgIG5vZGVSb290SG9zdCA9IGdldFJvb3ROb2RlKG5vZGVSb290SG9zdCkuaG9zdDtcbiAgICBhdHRhY2hlZCA9ICEhbm9kZVJvb3RIb3N0Py5vd25lckRvY3VtZW50LmNvbnRhaW5zKG5vZGVSb290SG9zdCk7XG4gIH1cblxuICByZXR1cm4gYXR0YWNoZWQ7XG59O1xuXG5jb25zdCBpc1plcm9BcmVhID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4gd2lkdGggPT09IDAgJiYgaGVpZ2h0ID09PSAwO1xufTtcbmNvbnN0IGlzSGlkZGVuID0gZnVuY3Rpb24gKG5vZGUsIHsgZGlzcGxheUNoZWNrLCBnZXRTaGFkb3dSb290IH0pIHtcbiAgLy8gTk9URTogdmlzaWJpbGl0eSB3aWxsIGJlIGB1bmRlZmluZWRgIGlmIG5vZGUgaXMgZGV0YWNoZWQgZnJvbSB0aGUgZG9jdW1lbnRcbiAgLy8gIChzZWUgbm90ZXMgYWJvdXQgdGhpcyBmdXJ0aGVyIGRvd24pLCB3aGljaCBtZWFucyB3ZSB3aWxsIGNvbnNpZGVyIGl0IHZpc2libGVcbiAgLy8gICh0aGlzIGlzIGxlZ2FjeSBiZWhhdmlvciBmcm9tIGEgdmVyeSBsb25nIHdheSBiYWNrKVxuICAvLyBOT1RFOiB3ZSBjaGVjayB0aGlzIHJlZ2FyZGxlc3Mgb2YgYGRpc3BsYXlDaGVjaz1cIm5vbmVcImAgYmVjYXVzZSB0aGlzIGlzIGFcbiAgLy8gIF92aXNpYmlsaXR5XyBjaGVjaywgbm90IGEgX2Rpc3BsYXlfIGNoZWNrXG4gIGlmIChnZXRDb21wdXRlZFN0eWxlKG5vZGUpLnZpc2liaWxpdHkgPT09ICdoaWRkZW4nKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjb25zdCBpc0RpcmVjdFN1bW1hcnkgPSBtYXRjaGVzLmNhbGwobm9kZSwgJ2RldGFpbHM+c3VtbWFyeTpmaXJzdC1vZi10eXBlJyk7XG4gIGNvbnN0IG5vZGVVbmRlckRldGFpbHMgPSBpc0RpcmVjdFN1bW1hcnkgPyBub2RlLnBhcmVudEVsZW1lbnQgOiBub2RlO1xuICBpZiAobWF0Y2hlcy5jYWxsKG5vZGVVbmRlckRldGFpbHMsICdkZXRhaWxzOm5vdChbb3Blbl0pIConKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKFxuICAgICFkaXNwbGF5Q2hlY2sgfHxcbiAgICBkaXNwbGF5Q2hlY2sgPT09ICdmdWxsJyB8fFxuICAgIGRpc3BsYXlDaGVjayA9PT0gJ2xlZ2FjeS1mdWxsJ1xuICApIHtcbiAgICBpZiAodHlwZW9mIGdldFNoYWRvd1Jvb3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIGZpZ3VyZSBvdXQgaWYgd2Ugc2hvdWxkIGNvbnNpZGVyIHRoZSBub2RlIHRvIGJlIGluIGFuIHVuZGlzY2xvc2VkIHNoYWRvdyBhbmQgdXNlIHRoZVxuICAgICAgLy8gICdub24temVyby1hcmVhJyBmYWxsYmFja1xuICAgICAgY29uc3Qgb3JpZ2luYWxOb2RlID0gbm9kZTtcbiAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBub2RlLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHJvb3ROb2RlID0gZ2V0Um9vdE5vZGUobm9kZSk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBwYXJlbnRFbGVtZW50ICYmXG4gICAgICAgICAgIXBhcmVudEVsZW1lbnQuc2hhZG93Um9vdCAmJlxuICAgICAgICAgIGdldFNoYWRvd1Jvb3QocGFyZW50RWxlbWVudCkgPT09IHRydWUgLy8gY2hlY2sgaWYgdGhlcmUncyBhbiB1bmRpc2Nsb3NlZCBzaGFkb3dcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gbm9kZSBoYXMgYW4gdW5kaXNjbG9zZWQgc2hhZG93IHdoaWNoIG1lYW5zIHdlIGNhbiBvbmx5IHRyZWF0IGl0IGFzIGEgYmxhY2sgYm94LCBzbyB3ZVxuICAgICAgICAgIC8vICBmYWxsIGJhY2sgdG8gYSBub24temVyby1hcmVhIHRlc3RcbiAgICAgICAgICByZXR1cm4gaXNaZXJvQXJlYShub2RlKTtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLmFzc2lnbmVkU2xvdCkge1xuICAgICAgICAgIC8vIGl0ZXJhdGUgdXAgc2xvdFxuICAgICAgICAgIG5vZGUgPSBub2RlLmFzc2lnbmVkU2xvdDtcbiAgICAgICAgfSBlbHNlIGlmICghcGFyZW50RWxlbWVudCAmJiByb290Tm9kZSAhPT0gbm9kZS5vd25lckRvY3VtZW50KSB7XG4gICAgICAgICAgLy8gY3Jvc3Mgc2hhZG93IGJvdW5kYXJ5XG4gICAgICAgICAgbm9kZSA9IHJvb3ROb2RlLmhvc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaXRlcmF0ZSB1cCBub3JtYWwgZG9tXG4gICAgICAgICAgbm9kZSA9IHBhcmVudEVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbm9kZSA9IG9yaWdpbmFsTm9kZTtcbiAgICB9XG4gICAgLy8gZWxzZSwgYGdldFNoYWRvd1Jvb3RgIG1pZ2h0IGJlIHRydWUsIGJ1dCBhbGwgdGhhdCBkb2VzIGlzIGVuYWJsZSBzaGFkb3cgRE9NIHN1cHBvcnRcbiAgICAvLyAgKGkuZS4gaXQgZG9lcyBub3QgYWxzbyBwcmVzdW1lIHRoYXQgYWxsIG5vZGVzIG1pZ2h0IGhhdmUgdW5kaXNjbG9zZWQgc2hhZG93cyk7IG9yXG4gICAgLy8gIGl0IG1pZ2h0IGJlIGEgZmFsc3kgdmFsdWUsIHdoaWNoIG1lYW5zIHNoYWRvdyBET00gc3VwcG9ydCBpcyBkaXNhYmxlZFxuXG4gICAgLy8gU2luY2Ugd2UgZGlkbid0IGZpbmQgaXQgc2l0dGluZyBpbiBhbiB1bmRpc2Nsb3NlZCBzaGFkb3cgKG9yIHNoYWRvd3MgYXJlIGRpc2FibGVkKVxuICAgIC8vICBub3cgd2UgY2FuIGp1c3QgdGVzdCB0byBzZWUgaWYgaXQgd291bGQgbm9ybWFsbHkgYmUgdmlzaWJsZSBvciBub3QsIHByb3ZpZGVkIGl0J3NcbiAgICAvLyAgYXR0YWNoZWQgdG8gdGhlIG1haW4gZG9jdW1lbnQuXG4gICAgLy8gTk9URTogV2UgbXVzdCBjb25zaWRlciBjYXNlIHdoZXJlIG5vZGUgaXMgaW5zaWRlIGEgc2hhZG93IERPTSBhbmQgZ2l2ZW4gZGlyZWN0bHkgdG9cbiAgICAvLyAgYGlzVGFiYmFibGUoKWAgb3IgYGlzRm9jdXNhYmxlKClgIC0tIHJlZ2FyZGxlc3Mgb2YgYGdldFNoYWRvd1Jvb3RgIG9wdGlvbiBzZXR0aW5nLlxuXG4gICAgaWYgKGlzTm9kZUF0dGFjaGVkKG5vZGUpKSB7XG4gICAgICAvLyB0aGlzIHdvcmtzIHdoZXJldmVyIHRoZSBub2RlIGlzOiBpZiB0aGVyZSdzIGF0IGxlYXN0IG9uZSBjbGllbnQgcmVjdCwgaXQnc1xuICAgICAgLy8gIHNvbWVob3cgZGlzcGxheWVkOyBpdCBhbHNvIGNvdmVycyB0aGUgQ1NTICdkaXNwbGF5OiBjb250ZW50cycgY2FzZSB3aGVyZSB0aGVcbiAgICAgIC8vICBub2RlIGl0c2VsZiBpcyBoaWRkZW4gaW4gcGxhY2Ugb2YgaXRzIGNvbnRlbnRzOyBhbmQgdGhlcmUncyBubyBuZWVkIHRvIHNlYXJjaFxuICAgICAgLy8gIHVwIHRoZSBoaWVyYXJjaHkgZWl0aGVyXG4gICAgICByZXR1cm4gIW5vZGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLy8gRWxzZSwgdGhlIG5vZGUgaXNuJ3QgYXR0YWNoZWQgdG8gdGhlIGRvY3VtZW50LCB3aGljaCBtZWFucyB0aGUgYGdldENsaWVudFJlY3RzKClgXG4gICAgLy8gIEFQSSB3aWxsIF9fYWx3YXlzX18gcmV0dXJuIHplcm8gcmVjdHMgKHRoaXMgY2FuIGhhcHBlbiwgZm9yIGV4YW1wbGUsIGlmIFJlYWN0XG4gICAgLy8gIGlzIHVzZWQgdG8gcmVuZGVyIG5vZGVzIG9udG8gYSBkZXRhY2hlZCB0cmVlLCBhcyBjb25maXJtZWQgaW4gdGhpcyB0aHJlYWQ6XG4gICAgLy8gIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvOTExNyNpc3N1ZWNvbW1lbnQtMjg0MjI4ODcwKVxuICAgIC8vXG4gICAgLy8gSXQgYWxzbyBtZWFucyB0aGF0IGV2ZW4gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSkuZGlzcGxheSB3aWxsIHJldHVybiBgdW5kZWZpbmVkYFxuICAgIC8vICBiZWNhdXNlIHN0eWxlcyBhcmUgb25seSBjb21wdXRlZCBmb3Igbm9kZXMgdGhhdCBhcmUgaW4gdGhlIGRvY3VtZW50LlxuICAgIC8vXG4gICAgLy8gTk9URTogVEhJUyBIQVMgQkVFTiBUSEUgQ0FTRSBGT1IgWUVBUlMuIEl0IGlzIG5vdCBuZXcsIG5vciBpcyBpdCBjYXVzZWQgYnkgdGFiYmFibGVcbiAgICAvLyAgc29tZWhvdy4gVGhvdWdoIGl0IHdhcyBuZXZlciBzdGF0ZWQgb2ZmaWNpYWxseSwgYW55b25lIHdobyBoYXMgZXZlciB1c2VkIHRhYmJhYmxlXG4gICAgLy8gIEFQSXMgb24gbm9kZXMgaW4gZGV0YWNoZWQgY29udGFpbmVycyBoYXMgYWN0dWFsbHkgaW1wbGljaXRseSB1c2VkIHRhYmJhYmxlIGluIHdoYXRcbiAgICAvLyAgd2FzIGxhdGVyIChhcyBvZiB2NS4yLjAgb24gQXByIDksIDIwMjEpIGNhbGxlZCBgZGlzcGxheUNoZWNrPVwibm9uZVwiYCBtb2RlIC0tIGVzc2VudGlhbGx5XG4gICAgLy8gIGNvbnNpZGVyaW5nIF9fZXZlcnl0aGluZ19fIHRvIGJlIHZpc2libGUgYmVjYXVzZSBvZiB0aGUgaW5uYWJpbGl0eSB0byBkZXRlcm1pbmUgc3R5bGVzLlxuICAgIC8vXG4gICAgLy8gdjYuMC4wOiBBcyBvZiB0aGlzIG1ham9yIHJlbGVhc2UsIHRoZSBkZWZhdWx0ICdmdWxsJyBvcHRpb24gX19ubyBsb25nZXIgdHJlYXRzIGRldGFjaGVkXG4gICAgLy8gIG5vZGVzIGFzIHZpc2libGUgd2l0aCB0aGUgJ25vbmUnIGZhbGxiYWNrLl9fXG4gICAgaWYgKGRpc3BsYXlDaGVjayAhPT0gJ2xlZ2FjeS1mdWxsJykge1xuICAgICAgcmV0dXJuIHRydWU7IC8vIGhpZGRlblxuICAgIH1cbiAgICAvLyBlbHNlLCBmYWxsYmFjayB0byAnbm9uZScgbW9kZSBhbmQgY29uc2lkZXIgdGhlIG5vZGUgdmlzaWJsZVxuICB9IGVsc2UgaWYgKGRpc3BsYXlDaGVjayA9PT0gJ25vbi16ZXJvLWFyZWEnKSB7XG4gICAgLy8gTk9URTogRXZlbiB0aG91Z2ggdGhpcyB0ZXN0cyB0aGF0IHRoZSBub2RlJ3MgY2xpZW50IHJlY3QgaXMgbm9uLXplcm8gdG8gZGV0ZXJtaW5lXG4gICAgLy8gIHdoZXRoZXIgaXQncyBkaXNwbGF5ZWQsIGFuZCB0aGF0IGEgZGV0YWNoZWQgbm9kZSB3aWxsIF9fYWx3YXlzX18gaGF2ZSBhIHplcm8tYXJlYVxuICAgIC8vICBjbGllbnQgcmVjdCwgd2UgZG9uJ3Qgc3BlY2lhbC1jYXNlIGZvciB3aGV0aGVyIHRoZSBub2RlIGlzIGF0dGFjaGVkIG9yIG5vdC4gSW5cbiAgICAvLyAgdGhpcyBtb2RlLCB3ZSBkbyB3YW50IHRvIGNvbnNpZGVyIG5vZGVzIHRoYXQgaGF2ZSBhIHplcm8gYXJlYSB0byBiZSBoaWRkZW4gYXQgYWxsXG4gICAgLy8gIHRpbWVzLCBhbmQgdGhhdCBpbmNsdWRlcyBhdHRhY2hlZCBvciBub3QuXG4gICAgcmV0dXJuIGlzWmVyb0FyZWEobm9kZSk7XG4gIH1cblxuICAvLyB2aXNpYmxlLCBhcyBmYXIgYXMgd2UgY2FuIHRlbGwsIG9yIHBlciBjdXJyZW50IGBkaXNwbGF5Q2hlY2s9bm9uZWAgbW9kZSwgd2UgYXNzdW1lXG4gIC8vICBpdCdzIHZpc2libGVcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLy8gZm9ybSBmaWVsZHMgKG5lc3RlZCkgaW5zaWRlIGEgZGlzYWJsZWQgZmllbGRzZXQgYXJlIG5vdCBmb2N1c2FibGUvdGFiYmFibGVcbi8vICB1bmxlc3MgdGhleSBhcmUgaW4gdGhlIF9maXJzdF8gPGxlZ2VuZD4gZWxlbWVudCBvZiB0aGUgdG9wLW1vc3QgZGlzYWJsZWRcbi8vICBmaWVsZHNldFxuY29uc3QgaXNEaXNhYmxlZEZyb21GaWVsZHNldCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIGlmICgvXihJTlBVVHxCVVRUT058U0VMRUNUfFRFWFRBUkVBKSQvLnRlc3Qobm9kZS50YWdOYW1lKSkge1xuICAgIGxldCBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnRFbGVtZW50O1xuICAgIC8vIGNoZWNrIGlmIGBub2RlYCBpcyBjb250YWluZWQgaW4gYSBkaXNhYmxlZCA8ZmllbGRzZXQ+XG4gICAgd2hpbGUgKHBhcmVudE5vZGUpIHtcbiAgICAgIGlmIChwYXJlbnROb2RlLnRhZ05hbWUgPT09ICdGSUVMRFNFVCcgJiYgcGFyZW50Tm9kZS5kaXNhYmxlZCkge1xuICAgICAgICAvLyBsb29rIGZvciB0aGUgZmlyc3QgPGxlZ2VuZD4gYW1vbmcgdGhlIGNoaWxkcmVuIG9mIHRoZSBkaXNhYmxlZCA8ZmllbGRzZXQ+XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyZW50Tm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGNoaWxkID0gcGFyZW50Tm9kZS5jaGlsZHJlbi5pdGVtKGkpO1xuICAgICAgICAgIC8vIHdoZW4gdGhlIGZpcnN0IDxsZWdlbmQ+IChpbiBkb2N1bWVudCBvcmRlcikgaXMgZm91bmRcbiAgICAgICAgICBpZiAoY2hpbGQudGFnTmFtZSA9PT0gJ0xFR0VORCcpIHtcbiAgICAgICAgICAgIC8vIGlmIGl0cyBwYXJlbnQgPGZpZWxkc2V0PiBpcyBub3QgbmVzdGVkIGluIGFub3RoZXIgZGlzYWJsZWQgPGZpZWxkc2V0PixcbiAgICAgICAgICAgIC8vIHJldHVybiB3aGV0aGVyIGBub2RlYCBpcyBhIGRlc2NlbmRhbnQgb2YgaXRzIGZpcnN0IDxsZWdlbmQ+XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlcy5jYWxsKHBhcmVudE5vZGUsICdmaWVsZHNldFtkaXNhYmxlZF0gKicpXG4gICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICA6ICFjaGlsZC5jb250YWlucyhub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhlIGRpc2FibGVkIDxmaWVsZHNldD4gY29udGFpbmluZyBgbm9kZWAgaGFzIG5vIDxsZWdlbmQ+XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50RWxlbWVudDtcbiAgICB9XG4gIH1cblxuICAvLyBlbHNlLCBub2RlJ3MgdGFiYmFibGUvZm9jdXNhYmxlIHN0YXRlIHNob3VsZCBub3QgYmUgYWZmZWN0ZWQgYnkgYSBmaWVsZHNldCdzXG4gIC8vICBlbmFibGVkL2Rpc2FibGVkIHN0YXRlXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmNvbnN0IGlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUgPSBmdW5jdGlvbiAob3B0aW9ucywgbm9kZSkge1xuICBpZiAoXG4gICAgbm9kZS5kaXNhYmxlZCB8fFxuICAgIGlzSGlkZGVuSW5wdXQobm9kZSkgfHxcbiAgICBpc0hpZGRlbihub2RlLCBvcHRpb25zKSB8fFxuICAgIC8vIEZvciBhIGRldGFpbHMgZWxlbWVudCB3aXRoIGEgc3VtbWFyeSwgdGhlIHN1bW1hcnkgZWxlbWVudCBnZXRzIHRoZSBmb2N1c1xuICAgIGlzRGV0YWlsc1dpdGhTdW1tYXJ5KG5vZGUpIHx8XG4gICAgaXNEaXNhYmxlZEZyb21GaWVsZHNldChub2RlKVxuICApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5jb25zdCBpc05vZGVNYXRjaGluZ1NlbGVjdG9yVGFiYmFibGUgPSBmdW5jdGlvbiAob3B0aW9ucywgbm9kZSkge1xuICBpZiAoXG4gICAgaXNOb25UYWJiYWJsZVJhZGlvKG5vZGUpIHx8XG4gICAgZ2V0VGFiaW5kZXgobm9kZSkgPCAwIHx8XG4gICAgIWlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUob3B0aW9ucywgbm9kZSlcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuY29uc3QgaXNWYWxpZFNoYWRvd1Jvb3RUYWJiYWJsZSA9IGZ1bmN0aW9uIChzaGFkb3dIb3N0Tm9kZSkge1xuICBjb25zdCB0YWJJbmRleCA9IHBhcnNlSW50KHNoYWRvd0hvc3ROb2RlLmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKSwgMTApO1xuICBpZiAoaXNOYU4odGFiSW5kZXgpIHx8IHRhYkluZGV4ID49IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBJZiBhIGN1c3RvbSBlbGVtZW50IGhhcyBhbiBleHBsaWNpdCBuZWdhdGl2ZSB0YWJpbmRleCxcbiAgLy8gYnJvd3NlcnMgd2lsbCBub3QgYWxsb3cgdGFiIHRhcmdldGluZyBzYWlkIGVsZW1lbnQncyBjaGlsZHJlbi5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5LjxFbGVtZW50fENhbmRpZGF0ZXNTY29wZT59IGNhbmRpZGF0ZXNcbiAqIEByZXR1cm5zIEVsZW1lbnRbXVxuICovXG5jb25zdCBzb3J0QnlPcmRlciA9IGZ1bmN0aW9uIChjYW5kaWRhdGVzKSB7XG4gIGNvbnN0IHJlZ3VsYXJUYWJiYWJsZXMgPSBbXTtcbiAgY29uc3Qgb3JkZXJlZFRhYmJhYmxlcyA9IFtdO1xuICBjYW5kaWRhdGVzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICBjb25zdCBpc1Njb3BlID0gISFpdGVtLnNjb3BlO1xuICAgIGNvbnN0IGVsZW1lbnQgPSBpc1Njb3BlID8gaXRlbS5zY29wZSA6IGl0ZW07XG4gICAgY29uc3QgY2FuZGlkYXRlVGFiaW5kZXggPSBnZXRUYWJpbmRleChlbGVtZW50LCBpc1Njb3BlKTtcbiAgICBjb25zdCBlbGVtZW50cyA9IGlzU2NvcGUgPyBzb3J0QnlPcmRlcihpdGVtLmNhbmRpZGF0ZXMpIDogZWxlbWVudDtcbiAgICBpZiAoY2FuZGlkYXRlVGFiaW5kZXggPT09IDApIHtcbiAgICAgIGlzU2NvcGVcbiAgICAgICAgPyByZWd1bGFyVGFiYmFibGVzLnB1c2goLi4uZWxlbWVudHMpXG4gICAgICAgIDogcmVndWxhclRhYmJhYmxlcy5wdXNoKGVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcmRlcmVkVGFiYmFibGVzLnB1c2goe1xuICAgICAgICBkb2N1bWVudE9yZGVyOiBpLFxuICAgICAgICB0YWJJbmRleDogY2FuZGlkYXRlVGFiaW5kZXgsXG4gICAgICAgIGl0ZW06IGl0ZW0sXG4gICAgICAgIGlzU2NvcGU6IGlzU2NvcGUsXG4gICAgICAgIGNvbnRlbnQ6IGVsZW1lbnRzLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gb3JkZXJlZFRhYmJhYmxlc1xuICAgIC5zb3J0KHNvcnRPcmRlcmVkVGFiYmFibGVzKVxuICAgIC5yZWR1Y2UoKGFjYywgc29ydGFibGUpID0+IHtcbiAgICAgIHNvcnRhYmxlLmlzU2NvcGVcbiAgICAgICAgPyBhY2MucHVzaCguLi5zb3J0YWJsZS5jb250ZW50KVxuICAgICAgICA6IGFjYy5wdXNoKHNvcnRhYmxlLmNvbnRlbnQpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSlcbiAgICAuY29uY2F0KHJlZ3VsYXJUYWJiYWJsZXMpO1xufTtcblxuY29uc3QgdGFiYmFibGUgPSBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgbGV0IGNhbmRpZGF0ZXM7XG4gIGlmIChvcHRpb25zLmdldFNoYWRvd1Jvb3QpIHtcbiAgICBjYW5kaWRhdGVzID0gZ2V0Q2FuZGlkYXRlc0l0ZXJhdGl2ZWx5KFtlbF0sIG9wdGlvbnMuaW5jbHVkZUNvbnRhaW5lciwge1xuICAgICAgZmlsdGVyOiBpc05vZGVNYXRjaGluZ1NlbGVjdG9yVGFiYmFibGUuYmluZChudWxsLCBvcHRpb25zKSxcbiAgICAgIGZsYXR0ZW46IGZhbHNlLFxuICAgICAgZ2V0U2hhZG93Um9vdDogb3B0aW9ucy5nZXRTaGFkb3dSb290LFxuICAgICAgc2hhZG93Um9vdEZpbHRlcjogaXNWYWxpZFNoYWRvd1Jvb3RUYWJiYWJsZSxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjYW5kaWRhdGVzID0gZ2V0Q2FuZGlkYXRlcyhcbiAgICAgIGVsLFxuICAgICAgb3B0aW9ucy5pbmNsdWRlQ29udGFpbmVyLFxuICAgICAgaXNOb2RlTWF0Y2hpbmdTZWxlY3RvclRhYmJhYmxlLmJpbmQobnVsbCwgb3B0aW9ucylcbiAgICApO1xuICB9XG4gIHJldHVybiBzb3J0QnlPcmRlcihjYW5kaWRhdGVzKTtcbn07XG5cbmNvbnN0IGZvY3VzYWJsZSA9IGZ1bmN0aW9uIChlbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBsZXQgY2FuZGlkYXRlcztcbiAgaWYgKG9wdGlvbnMuZ2V0U2hhZG93Um9vdCkge1xuICAgIGNhbmRpZGF0ZXMgPSBnZXRDYW5kaWRhdGVzSXRlcmF0aXZlbHkoW2VsXSwgb3B0aW9ucy5pbmNsdWRlQ29udGFpbmVyLCB7XG4gICAgICBmaWx0ZXI6IGlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUuYmluZChudWxsLCBvcHRpb25zKSxcbiAgICAgIGZsYXR0ZW46IHRydWUsXG4gICAgICBnZXRTaGFkb3dSb290OiBvcHRpb25zLmdldFNoYWRvd1Jvb3QsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY2FuZGlkYXRlcyA9IGdldENhbmRpZGF0ZXMoXG4gICAgICBlbCxcbiAgICAgIG9wdGlvbnMuaW5jbHVkZUNvbnRhaW5lcixcbiAgICAgIGlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUuYmluZChudWxsLCBvcHRpb25zKVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gY2FuZGlkYXRlcztcbn07XG5cbmNvbnN0IGlzVGFiYmFibGUgPSBmdW5jdGlvbiAobm9kZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKCFub2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBub2RlIHByb3ZpZGVkJyk7XG4gIH1cbiAgaWYgKG1hdGNoZXMuY2FsbChub2RlLCBjYW5kaWRhdGVTZWxlY3RvcikgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc05vZGVNYXRjaGluZ1NlbGVjdG9yVGFiYmFibGUob3B0aW9ucywgbm9kZSk7XG59O1xuXG5jb25zdCBmb2N1c2FibGVDYW5kaWRhdGVTZWxlY3RvciA9IC8qICNfX1BVUkVfXyAqLyBjYW5kaWRhdGVTZWxlY3RvcnNcbiAgLmNvbmNhdCgnaWZyYW1lJylcbiAgLmpvaW4oJywnKTtcblxuY29uc3QgaXNGb2N1c2FibGUgPSBmdW5jdGlvbiAobm9kZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKCFub2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBub2RlIHByb3ZpZGVkJyk7XG4gIH1cbiAgaWYgKG1hdGNoZXMuY2FsbChub2RlLCBmb2N1c2FibGVDYW5kaWRhdGVTZWxlY3RvcikgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlKG9wdGlvbnMsIG5vZGUpO1xufTtcblxuZXhwb3J0IHsgdGFiYmFibGUsIGZvY3VzYWJsZSwgaXNUYWJiYWJsZSwgaXNGb2N1c2FibGUgfTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZSgnaW5lcnQnLCBmYWN0b3J5KSA6XG4gIChmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4gIC8qKlxuICAgKiBUaGlzIHdvcmsgaXMgbGljZW5zZWQgdW5kZXIgdGhlIFczQyBTb2Z0d2FyZSBhbmQgRG9jdW1lbnQgTGljZW5zZVxuICAgKiAoaHR0cDovL3d3dy53My5vcmcvQ29uc29ydGl1bS9MZWdhbC8yMDE1L2NvcHlyaWdodC1zb2Z0d2FyZS1hbmQtZG9jdW1lbnQpLlxuICAgKi9cblxuICAoZnVuY3Rpb24gKCkge1xuICAgIC8vIFJldHVybiBlYXJseSBpZiB3ZSdyZSBub3QgcnVubmluZyBpbnNpZGUgb2YgdGhlIGJyb3dzZXIuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ29udmVuaWVuY2UgZnVuY3Rpb24gZm9yIGNvbnZlcnRpbmcgTm9kZUxpc3RzLlxuICAgIC8qKiBAdHlwZSB7dHlwZW9mIEFycmF5LnByb3RvdHlwZS5zbGljZX0gKi9cbiAgICB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbiAgICAvKipcbiAgICAgKiBJRSBoYXMgYSBub24tc3RhbmRhcmQgbmFtZSBmb3IgXCJtYXRjaGVzXCIuXG4gICAgICogQHR5cGUge3R5cGVvZiBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzfVxuICAgICAqL1xuICAgIHZhciBtYXRjaGVzID0gRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyB8fCBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvcjtcblxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIHZhciBfZm9jdXNhYmxlRWxlbWVudHNTdHJpbmcgPSBbJ2FbaHJlZl0nLCAnYXJlYVtocmVmXScsICdpbnB1dDpub3QoW2Rpc2FibGVkXSknLCAnc2VsZWN0Om5vdChbZGlzYWJsZWRdKScsICd0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSknLCAnYnV0dG9uOm5vdChbZGlzYWJsZWRdKScsICdkZXRhaWxzJywgJ3N1bW1hcnknLCAnaWZyYW1lJywgJ29iamVjdCcsICdlbWJlZCcsICdbY29udGVudGVkaXRhYmxlXSddLmpvaW4oJywnKTtcblxuICAgIC8qKlxuICAgICAqIGBJbmVydFJvb3RgIG1hbmFnZXMgYSBzaW5nbGUgaW5lcnQgc3VidHJlZSwgaS5lLiBhIERPTSBzdWJ0cmVlIHdob3NlIHJvb3QgZWxlbWVudCBoYXMgYW4gYGluZXJ0YFxuICAgICAqIGF0dHJpYnV0ZS5cbiAgICAgKlxuICAgICAqIEl0cyBtYWluIGZ1bmN0aW9ucyBhcmU6XG4gICAgICpcbiAgICAgKiAtIHRvIGNyZWF0ZSBhbmQgbWFpbnRhaW4gYSBzZXQgb2YgbWFuYWdlZCBgSW5lcnROb2RlYHMsIGluY2x1ZGluZyB3aGVuIG11dGF0aW9ucyBvY2N1ciBpbiB0aGVcbiAgICAgKiAgIHN1YnRyZWUuIFRoZSBgbWFrZVN1YnRyZWVVbmZvY3VzYWJsZSgpYCBtZXRob2QgaGFuZGxlcyBjb2xsZWN0aW5nIGBJbmVydE5vZGVgcyB2aWEgcmVnaXN0ZXJpbmdcbiAgICAgKiAgIGVhY2ggZm9jdXNhYmxlIG5vZGUgaW4gdGhlIHN1YnRyZWUgd2l0aCB0aGUgc2luZ2xldG9uIGBJbmVydE1hbmFnZXJgIHdoaWNoIG1hbmFnZXMgYWxsIGtub3duXG4gICAgICogICBmb2N1c2FibGUgbm9kZXMgd2l0aGluIGluZXJ0IHN1YnRyZWVzLiBgSW5lcnRNYW5hZ2VyYCBlbnN1cmVzIHRoYXQgYSBzaW5nbGUgYEluZXJ0Tm9kZWBcbiAgICAgKiAgIGluc3RhbmNlIGV4aXN0cyBmb3IgZWFjaCBmb2N1c2FibGUgbm9kZSB3aGljaCBoYXMgYXQgbGVhc3Qgb25lIGluZXJ0IHJvb3QgYXMgYW4gYW5jZXN0b3IuXG4gICAgICpcbiAgICAgKiAtIHRvIG5vdGlmeSBhbGwgbWFuYWdlZCBgSW5lcnROb2RlYHMgd2hlbiB0aGlzIHN1YnRyZWUgc3RvcHMgYmVpbmcgaW5lcnQgKGkuZS4gd2hlbiB0aGUgYGluZXJ0YFxuICAgICAqICAgYXR0cmlidXRlIGlzIHJlbW92ZWQgZnJvbSB0aGUgcm9vdCBub2RlKS4gVGhpcyBpcyBoYW5kbGVkIGluIHRoZSBkZXN0cnVjdG9yLCB3aGljaCBjYWxscyB0aGVcbiAgICAgKiAgIGBkZXJlZ2lzdGVyYCBtZXRob2Qgb24gYEluZXJ0TWFuYWdlcmAgZm9yIGVhY2ggbWFuYWdlZCBpbmVydCBub2RlLlxuICAgICAqL1xuXG4gICAgdmFyIEluZXJ0Um9vdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IHJvb3RFbGVtZW50IFRoZSBIVE1MRWxlbWVudCBhdCB0aGUgcm9vdCBvZiB0aGUgaW5lcnQgc3VidHJlZS5cbiAgICAgICAqIEBwYXJhbSB7IUluZXJ0TWFuYWdlcn0gaW5lcnRNYW5hZ2VyIFRoZSBnbG9iYWwgc2luZ2xldG9uIEluZXJ0TWFuYWdlciBvYmplY3QuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIEluZXJ0Um9vdChyb290RWxlbWVudCwgaW5lcnRNYW5hZ2VyKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbmVydFJvb3QpO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7IUluZXJ0TWFuYWdlcn0gKi9cbiAgICAgICAgdGhpcy5faW5lcnRNYW5hZ2VyID0gaW5lcnRNYW5hZ2VyO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqL1xuICAgICAgICB0aGlzLl9yb290RWxlbWVudCA9IHJvb3RFbGVtZW50O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7IVNldDwhSW5lcnROb2RlPn1cbiAgICAgICAgICogQWxsIG1hbmFnZWQgZm9jdXNhYmxlIG5vZGVzIGluIHRoaXMgSW5lcnRSb290J3Mgc3VidHJlZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX21hbmFnZWROb2RlcyA9IG5ldyBTZXQoKTtcblxuICAgICAgICAvLyBNYWtlIHRoZSBzdWJ0cmVlIGhpZGRlbiBmcm9tIGFzc2lzdGl2ZSB0ZWNobm9sb2d5XG4gICAgICAgIGlmICh0aGlzLl9yb290RWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJykpIHtcbiAgICAgICAgICAvKiogQHR5cGUgez9zdHJpbmd9ICovXG4gICAgICAgICAgdGhpcy5fc2F2ZWRBcmlhSGlkZGVuID0gdGhpcy5fcm9vdEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3NhdmVkQXJpYUhpZGRlbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAgICAgLy8gTWFrZSBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIGluIHRoZSBzdWJ0cmVlIHVuZm9jdXNhYmxlIGFuZCBhZGQgdGhlbSB0byBfbWFuYWdlZE5vZGVzXG4gICAgICAgIHRoaXMuX21ha2VTdWJ0cmVlVW5mb2N1c2FibGUodGhpcy5fcm9vdEVsZW1lbnQpO1xuXG4gICAgICAgIC8vIFdhdGNoIGZvcjpcbiAgICAgICAgLy8gLSBhbnkgYWRkaXRpb25zIGluIHRoZSBzdWJ0cmVlOiBtYWtlIHRoZW0gdW5mb2N1c2FibGUgdG9vXG4gICAgICAgIC8vIC0gYW55IHJlbW92YWxzIGZyb20gdGhlIHN1YnRyZWU6IHJlbW92ZSB0aGVtIGZyb20gdGhpcyBpbmVydCByb290J3MgbWFuYWdlZCBub2Rlc1xuICAgICAgICAvLyAtIGF0dHJpYnV0ZSBjaGFuZ2VzOiBpZiBgdGFiaW5kZXhgIGlzIGFkZGVkLCBvciByZW1vdmVkIGZyb20gYW4gaW50cmluc2ljYWxseSBmb2N1c2FibGVcbiAgICAgICAgLy8gICBlbGVtZW50LCBtYWtlIHRoYXQgbm9kZSBhIG1hbmFnZWQgbm9kZS5cbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLl9vbk11dGF0aW9uLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLl9vYnNlcnZlci5vYnNlcnZlKHRoaXMuX3Jvb3RFbGVtZW50LCB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDYWxsIHRoaXMgd2hlbmV2ZXIgdGhpcyBvYmplY3QgaXMgYWJvdXQgdG8gYmVjb21lIG9ic29sZXRlLiAgVGhpcyB1bndpbmRzIGFsbCBvZiB0aGUgc3RhdGVcbiAgICAgICAqIHN0b3JlZCBpbiB0aGlzIG9iamVjdCBhbmQgdXBkYXRlcyB0aGUgc3RhdGUgb2YgYWxsIG9mIHRoZSBtYW5hZ2VkIG5vZGVzLlxuICAgICAgICovXG5cblxuICAgICAgX2NyZWF0ZUNsYXNzKEluZXJ0Um9vdCwgW3tcbiAgICAgICAga2V5OiAnZGVzdHJ1Y3RvcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cnVjdG9yKCkge1xuICAgICAgICAgIHRoaXMuX29ic2VydmVyLmRpc2Nvbm5lY3QoKTtcblxuICAgICAgICAgIGlmICh0aGlzLl9yb290RWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3NhdmVkQXJpYUhpZGRlbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB0aGlzLl9yb290RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdGhpcy5fc2F2ZWRBcmlhSGlkZGVuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuX3Jvb3RFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9tYW5hZ2VkTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5lcnROb2RlKSB7XG4gICAgICAgICAgICB0aGlzLl91bm1hbmFnZU5vZGUoaW5lcnROb2RlLm5vZGUpO1xuICAgICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgICAgLy8gTm90ZSB3ZSBjYXN0IHRoZSBudWxscyB0byB0aGUgQU5ZIHR5cGUgaGVyZSBiZWNhdXNlOlxuICAgICAgICAgIC8vIDEpIFdlIHdhbnQgdGhlIGNsYXNzIHByb3BlcnRpZXMgdG8gYmUgZGVjbGFyZWQgYXMgbm9uLW51bGwsIG9yIGVsc2Ugd2VcbiAgICAgICAgICAvLyAgICBuZWVkIGV2ZW4gbW9yZSBjYXN0cyB0aHJvdWdob3V0IHRoaXMgY29kZS4gQWxsIGJldHMgYXJlIG9mZiBpZiBhblxuICAgICAgICAgIC8vICAgIGluc3RhbmNlIGhhcyBiZWVuIGRlc3Ryb3llZCBhbmQgYSBtZXRob2QgaXMgY2FsbGVkLlxuICAgICAgICAgIC8vIDIpIFdlIGRvbid0IHdhbnQgdG8gY2FzdCBcInRoaXNcIiwgYmVjYXVzZSB3ZSB3YW50IHR5cGUtYXdhcmUgb3B0aW1pemF0aW9uc1xuICAgICAgICAgIC8vICAgIHRvIGtub3cgd2hpY2ggcHJvcGVydGllcyB3ZSdyZSBzZXR0aW5nLlxuICAgICAgICAgIHRoaXMuX29ic2VydmVyID0gLyoqIEB0eXBlIHs/fSAqL251bGw7XG4gICAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQgPSAvKiogQHR5cGUgez99ICovbnVsbDtcbiAgICAgICAgICB0aGlzLl9tYW5hZ2VkTm9kZXMgPSAvKiogQHR5cGUgez99ICovbnVsbDtcbiAgICAgICAgICB0aGlzLl9pbmVydE1hbmFnZXIgPSAvKiogQHR5cGUgez99ICovbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHshU2V0PCFJbmVydE5vZGU+fSBBIGNvcHkgb2YgdGhpcyBJbmVydFJvb3QncyBtYW5hZ2VkIG5vZGVzIHNldC5cbiAgICAgICAgICovXG5cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnX21ha2VTdWJ0cmVlVW5mb2N1c2FibGUnLFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7IU5vZGV9IHN0YXJ0Tm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9tYWtlU3VidHJlZVVuZm9jdXNhYmxlKHN0YXJ0Tm9kZSkge1xuICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgY29tcG9zZWRUcmVlV2FsayhzdGFydE5vZGUsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLl92aXNpdE5vZGUobm9kZSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgYWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cbiAgICAgICAgICBpZiAoIWRvY3VtZW50LmJvZHkuY29udGFpbnMoc3RhcnROb2RlKSkge1xuICAgICAgICAgICAgLy8gc3RhcnROb2RlIG1heSBiZSBpbiBzaGFkb3cgRE9NLCBzbyBmaW5kIGl0cyBuZWFyZXN0IHNoYWRvd1Jvb3QgdG8gZ2V0IHRoZSBhY3RpdmVFbGVtZW50LlxuICAgICAgICAgICAgdmFyIG5vZGUgPSBzdGFydE5vZGU7XG4gICAgICAgICAgICAvKiogQHR5cGUgeyFTaGFkb3dSb290fHVuZGVmaW5lZH0gKi9cbiAgICAgICAgICAgIHZhciByb290ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSkge1xuICAgICAgICAgICAgICAgIHJvb3QgPSAvKiogQHR5cGUgeyFTaGFkb3dSb290fSAqL25vZGU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyb290KSB7XG4gICAgICAgICAgICAgIGFjdGl2ZUVsZW1lbnQgPSByb290LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdGFydE5vZGUuY29udGFpbnMoYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgICAgIGFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgICAgICAgICAgLy8gSW4gSUUxMSwgaWYgYW4gZWxlbWVudCBpcyBhbHJlYWR5IGZvY3VzZWQsIGFuZCB0aGVuIHNldCB0byB0YWJpbmRleD0tMVxuICAgICAgICAgICAgLy8gY2FsbGluZyBibHVyKCkgd2lsbCBub3QgYWN0dWFsbHkgbW92ZSB0aGUgZm9jdXMuXG4gICAgICAgICAgICAvLyBUbyB3b3JrIGFyb3VuZCB0aGlzIHdlIGNhbGwgZm9jdXMoKSBvbiB0aGUgYm9keSBpbnN0ZWFkLlxuICAgICAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ192aXNpdE5vZGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3Zpc2l0Tm9kZShub2RlKSB7XG4gICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBlbGVtZW50ID0gLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovbm9kZTtcblxuICAgICAgICAgIC8vIElmIGEgZGVzY2VuZGFudCBpbmVydCByb290IGJlY29tZXMgdW4taW5lcnQsIGl0cyBkZXNjZW5kYW50cyB3aWxsIHN0aWxsIGJlIGluZXJ0IGJlY2F1c2Ugb2ZcbiAgICAgICAgICAvLyB0aGlzIGluZXJ0IHJvb3QsIHNvIGFsbCBvZiBpdHMgbWFuYWdlZCBub2RlcyBuZWVkIHRvIGJlIGFkb3B0ZWQgYnkgdGhpcyBJbmVydFJvb3QuXG4gICAgICAgICAgaWYgKGVsZW1lbnQgIT09IHRoaXMuX3Jvb3RFbGVtZW50ICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlKCdpbmVydCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9hZG9wdEluZXJ0Um9vdChlbGVtZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobWF0Y2hlcy5jYWxsKGVsZW1lbnQsIF9mb2N1c2FibGVFbGVtZW50c1N0cmluZykgfHwgZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3RhYmluZGV4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX21hbmFnZU5vZGUoZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlZ2lzdGVyIHRoZSBnaXZlbiBub2RlIHdpdGggdGhpcyBJbmVydFJvb3QgYW5kIHdpdGggSW5lcnRNYW5hZ2VyLlxuICAgICAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ19tYW5hZ2VOb2RlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9tYW5hZ2VOb2RlKG5vZGUpIHtcbiAgICAgICAgICB2YXIgaW5lcnROb2RlID0gdGhpcy5faW5lcnRNYW5hZ2VyLnJlZ2lzdGVyKG5vZGUsIHRoaXMpO1xuICAgICAgICAgIHRoaXMuX21hbmFnZWROb2Rlcy5hZGQoaW5lcnROb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVbnJlZ2lzdGVyIHRoZSBnaXZlbiBub2RlIHdpdGggdGhpcyBJbmVydFJvb3QgYW5kIHdpdGggSW5lcnRNYW5hZ2VyLlxuICAgICAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ191bm1hbmFnZU5vZGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VubWFuYWdlTm9kZShub2RlKSB7XG4gICAgICAgICAgdmFyIGluZXJ0Tm9kZSA9IHRoaXMuX2luZXJ0TWFuYWdlci5kZXJlZ2lzdGVyKG5vZGUsIHRoaXMpO1xuICAgICAgICAgIGlmIChpbmVydE5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX21hbmFnZWROb2Rlc1snZGVsZXRlJ10oaW5lcnROb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogVW5yZWdpc3RlciB0aGUgZW50aXJlIHN1YnRyZWUgc3RhcnRpbmcgYXQgYHN0YXJ0Tm9kZWAuXG4gICAgICAgICAqIEBwYXJhbSB7IU5vZGV9IHN0YXJ0Tm9kZVxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdfdW5tYW5hZ2VTdWJ0cmVlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91bm1hbmFnZVN1YnRyZWUoc3RhcnROb2RlKSB7XG4gICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgICBjb21wb3NlZFRyZWVXYWxrKHN0YXJ0Tm9kZSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczMuX3VubWFuYWdlTm9kZShub2RlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBhIGRlc2NlbmRhbnQgbm9kZSBpcyBmb3VuZCB3aXRoIGFuIGBpbmVydGAgYXR0cmlidXRlLCBhZG9wdCBpdHMgbWFuYWdlZCBub2Rlcy5cbiAgICAgICAgICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IG5vZGVcbiAgICAgICAgICovXG5cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2Fkb3B0SW5lcnRSb290JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hZG9wdEluZXJ0Um9vdChub2RlKSB7XG4gICAgICAgICAgdmFyIGluZXJ0U3Vicm9vdCA9IHRoaXMuX2luZXJ0TWFuYWdlci5nZXRJbmVydFJvb3Qobm9kZSk7XG5cbiAgICAgICAgICAvLyBEdXJpbmcgaW5pdGlhbGlzYXRpb24gdGhpcyBpbmVydCByb290IG1heSBub3QgaGF2ZSBiZWVuIHJlZ2lzdGVyZWQgeWV0LFxuICAgICAgICAgIC8vIHNvIHJlZ2lzdGVyIGl0IG5vdyBpZiBuZWVkIGJlLlxuICAgICAgICAgIGlmICghaW5lcnRTdWJyb290KSB7XG4gICAgICAgICAgICB0aGlzLl9pbmVydE1hbmFnZXIuc2V0SW5lcnQobm9kZSwgdHJ1ZSk7XG4gICAgICAgICAgICBpbmVydFN1YnJvb3QgPSB0aGlzLl9pbmVydE1hbmFnZXIuZ2V0SW5lcnRSb290KG5vZGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGluZXJ0U3Vicm9vdC5tYW5hZ2VkTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoc2F2ZWRJbmVydE5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX21hbmFnZU5vZGUoc2F2ZWRJbmVydE5vZGUubm9kZSk7XG4gICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGJhY2sgdXNlZCB3aGVuIG11dGF0aW9uIG9ic2VydmVyIGRldGVjdHMgc3VidHJlZSBhZGRpdGlvbnMsIHJlbW92YWxzLCBvciBhdHRyaWJ1dGUgY2hhbmdlcy5cbiAgICAgICAgICogQHBhcmFtIHshQXJyYXk8IU11dGF0aW9uUmVjb3JkPn0gcmVjb3Jkc1xuICAgICAgICAgKiBAcGFyYW0geyFNdXRhdGlvbk9ic2VydmVyfSBzZWxmXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ19vbk11dGF0aW9uJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbk11dGF0aW9uKHJlY29yZHMsIHNlbGYpIHtcbiAgICAgICAgICByZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqL3JlY29yZC50YXJnZXQ7XG4gICAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09ICdjaGlsZExpc3QnKSB7XG4gICAgICAgICAgICAgIC8vIE1hbmFnZSBhZGRlZCBub2Rlc1xuICAgICAgICAgICAgICBzbGljZS5jYWxsKHJlY29yZC5hZGRlZE5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFrZVN1YnRyZWVVbmZvY3VzYWJsZShub2RlKTtcbiAgICAgICAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgICAgICAgLy8gVW4tbWFuYWdlIHJlbW92ZWQgbm9kZXNcbiAgICAgICAgICAgICAgc2xpY2UuY2FsbChyZWNvcmQucmVtb3ZlZE5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdW5tYW5hZ2VTdWJ0cmVlKG5vZGUpO1xuICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09ICdhdHRyaWJ1dGVzJykge1xuICAgICAgICAgICAgICBpZiAocmVjb3JkLmF0dHJpYnV0ZU5hbWUgPT09ICd0YWJpbmRleCcpIHtcbiAgICAgICAgICAgICAgICAvLyBSZS1pbml0aWFsaXNlIGluZXJ0IG5vZGUgaWYgdGFiaW5kZXggY2hhbmdlc1xuICAgICAgICAgICAgICAgIHRoaXMuX21hbmFnZU5vZGUodGFyZ2V0KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgIT09IHRoaXMuX3Jvb3RFbGVtZW50ICYmIHJlY29yZC5hdHRyaWJ1dGVOYW1lID09PSAnaW5lcnQnICYmIHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2luZXJ0JykpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBhIG5ldyBpbmVydCByb290IGlzIGFkZGVkLCBhZG9wdCBpdHMgbWFuYWdlZCBub2RlcyBhbmQgbWFrZSBzdXJlIGl0IGtub3dzIGFib3V0IHRoZVxuICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgbWFuYWdlZCBub2RlcyBmcm9tIHRoaXMgaW5lcnQgc3Vicm9vdC5cbiAgICAgICAgICAgICAgICB0aGlzLl9hZG9wdEluZXJ0Um9vdCh0YXJnZXQpO1xuICAgICAgICAgICAgICAgIHZhciBpbmVydFN1YnJvb3QgPSB0aGlzLl9pbmVydE1hbmFnZXIuZ2V0SW5lcnRSb290KHRhcmdldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFuYWdlZE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG1hbmFnZWROb2RlKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmNvbnRhaW5zKG1hbmFnZWROb2RlLm5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZXJ0U3Vicm9vdC5fbWFuYWdlTm9kZShtYW5hZ2VkTm9kZS5ub2RlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ21hbmFnZWROb2RlcycsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBuZXcgU2V0KHRoaXMuX21hbmFnZWROb2Rlcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogQHJldHVybiB7Ym9vbGVhbn0gKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdoYXNTYXZlZEFyaWFIaWRkZW4nLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fc2F2ZWRBcmlhSGlkZGVuICE9PSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEBwYXJhbSB7P3N0cmluZ30gYXJpYUhpZGRlbiAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3NhdmVkQXJpYUhpZGRlbicsXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KGFyaWFIaWRkZW4pIHtcbiAgICAgICAgICB0aGlzLl9zYXZlZEFyaWFIaWRkZW4gPSBhcmlhSGlkZGVuO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEByZXR1cm4gez9zdHJpbmd9ICovXG4gICAgICAgICxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3NhdmVkQXJpYUhpZGRlbjtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gSW5lcnRSb290O1xuICAgIH0oKTtcblxuICAgIC8qKlxuICAgICAqIGBJbmVydE5vZGVgIGluaXRpYWxpc2VzIGFuZCBtYW5hZ2VzIGEgc2luZ2xlIGluZXJ0IG5vZGUuXG4gICAgICogQSBub2RlIGlzIGluZXJ0IGlmIGl0IGlzIGEgZGVzY2VuZGFudCBvZiBvbmUgb3IgbW9yZSBpbmVydCByb290IGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogT24gY29uc3RydWN0aW9uLCBgSW5lcnROb2RlYCBzYXZlcyB0aGUgZXhpc3RpbmcgYHRhYmluZGV4YCB2YWx1ZSBmb3IgdGhlIG5vZGUsIGlmIGFueSwgYW5kXG4gICAgICogZWl0aGVyIHJlbW92ZXMgdGhlIGB0YWJpbmRleGAgYXR0cmlidXRlIG9yIHNldHMgaXQgdG8gYC0xYCwgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGVsZW1lbnRcbiAgICAgKiBpcyBpbnRyaW5zaWNhbGx5IGZvY3VzYWJsZSBvciBub3QuXG4gICAgICpcbiAgICAgKiBgSW5lcnROb2RlYCBtYWludGFpbnMgYSBzZXQgb2YgYEluZXJ0Um9vdGBzIHdoaWNoIGFyZSBkZXNjZW5kYW50cyBvZiB0aGlzIGBJbmVydE5vZGVgLiBXaGVuIGFuXG4gICAgICogYEluZXJ0Um9vdGAgaXMgZGVzdHJveWVkLCBhbmQgY2FsbHMgYEluZXJ0TWFuYWdlci5kZXJlZ2lzdGVyKClgLCB0aGUgYEluZXJ0TWFuYWdlcmAgbm90aWZpZXMgdGhlXG4gICAgICogYEluZXJ0Tm9kZWAgdmlhIGByZW1vdmVJbmVydFJvb3QoKWAsIHdoaWNoIGluIHR1cm4gZGVzdHJveXMgdGhlIGBJbmVydE5vZGVgIGlmIG5vIGBJbmVydFJvb3Rgc1xuICAgICAqIHJlbWFpbiBpbiB0aGUgc2V0LiBPbiBkZXN0cnVjdGlvbiwgYEluZXJ0Tm9kZWAgcmVpbnN0YXRlcyB0aGUgc3RvcmVkIGB0YWJpbmRleGAgaWYgb25lIGV4aXN0cyxcbiAgICAgKiBvciByZW1vdmVzIHRoZSBgdGFiaW5kZXhgIGF0dHJpYnV0ZSBpZiB0aGUgZWxlbWVudCBpcyBpbnRyaW5zaWNhbGx5IGZvY3VzYWJsZS5cbiAgICAgKi9cblxuXG4gICAgdmFyIEluZXJ0Tm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHshTm9kZX0gbm9kZSBBIGZvY3VzYWJsZSBlbGVtZW50IHRvIGJlIG1hZGUgaW5lcnQuXG4gICAgICAgKiBAcGFyYW0geyFJbmVydFJvb3R9IGluZXJ0Um9vdCBUaGUgaW5lcnQgcm9vdCBlbGVtZW50IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGluZXJ0IG5vZGUuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIEluZXJ0Tm9kZShub2RlLCBpbmVydFJvb3QpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEluZXJ0Tm9kZSk7XG5cbiAgICAgICAgLyoqIEB0eXBlIHshTm9kZX0gKi9cbiAgICAgICAgdGhpcy5fbm9kZSA9IG5vZGU7XG5cbiAgICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgICB0aGlzLl9vdmVycm9kZUZvY3VzTWV0aG9kID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHshU2V0PCFJbmVydFJvb3Q+fSBUaGUgc2V0IG9mIGRlc2NlbmRhbnQgaW5lcnQgcm9vdHMuXG4gICAgICAgICAqICAgIElmIGFuZCBvbmx5IGlmIHRoaXMgc2V0IGJlY29tZXMgZW1wdHksIHRoaXMgbm9kZSBpcyBubyBsb25nZXIgaW5lcnQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9pbmVydFJvb3RzID0gbmV3IFNldChbaW5lcnRSb290XSk7XG5cbiAgICAgICAgLyoqIEB0eXBlIHs/bnVtYmVyfSAqL1xuICAgICAgICB0aGlzLl9zYXZlZFRhYkluZGV4ID0gbnVsbDtcblxuICAgICAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgICAgIHRoaXMuX2Rlc3Ryb3llZCA9IGZhbHNlO1xuXG4gICAgICAgIC8vIFNhdmUgYW55IHByaW9yIHRhYmluZGV4IGluZm8gYW5kIG1ha2UgdGhpcyBub2RlIHVudGFiYmFibGVcbiAgICAgICAgdGhpcy5lbnN1cmVVbnRhYmJhYmxlKCk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2FsbCB0aGlzIHdoZW5ldmVyIHRoaXMgb2JqZWN0IGlzIGFib3V0IHRvIGJlY29tZSBvYnNvbGV0ZS5cbiAgICAgICAqIFRoaXMgbWFrZXMgdGhlIG1hbmFnZWQgbm9kZSBmb2N1c2FibGUgYWdhaW4gYW5kIGRlbGV0ZXMgYWxsIG9mIHRoZSBwcmV2aW91c2x5IHN0b3JlZCBzdGF0ZS5cbiAgICAgICAqL1xuXG5cbiAgICAgIF9jcmVhdGVDbGFzcyhJbmVydE5vZGUsIFt7XG4gICAgICAgIGtleTogJ2Rlc3RydWN0b3InLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJ1Y3RvcigpIHtcbiAgICAgICAgICB0aGlzLl90aHJvd0lmRGVzdHJveWVkKCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fbm9kZSAmJiB0aGlzLl9ub2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi90aGlzLl9ub2RlO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3NhdmVkVGFiSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgdGhpcy5fc2F2ZWRUYWJJbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXNlIGBkZWxldGVgIHRvIHJlc3RvcmUgbmF0aXZlIGZvY3VzIG1ldGhvZC5cbiAgICAgICAgICAgIGlmICh0aGlzLl9vdmVycm9kZUZvY3VzTWV0aG9kKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBlbGVtZW50LmZvY3VzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFNlZSBub3RlIGluIEluZXJ0Um9vdC5kZXN0cnVjdG9yIGZvciB3aHkgd2UgY2FzdCB0aGVzZSBudWxscyB0byBBTlkuXG4gICAgICAgICAgdGhpcy5fbm9kZSA9IC8qKiBAdHlwZSB7P30gKi9udWxsO1xuICAgICAgICAgIHRoaXMuX2luZXJ0Um9vdHMgPSAvKiogQHR5cGUgez99ICovbnVsbDtcbiAgICAgICAgICB0aGlzLl9kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufSBXaGV0aGVyIHRoaXMgb2JqZWN0IGlzIG9ic29sZXRlIGJlY2F1c2UgdGhlIG1hbmFnZWQgbm9kZSBpcyBubyBsb25nZXIgaW5lcnQuXG4gICAgICAgICAqIElmIHRoZSBvYmplY3QgaGFzIGJlZW4gZGVzdHJveWVkLCBhbnkgYXR0ZW1wdCB0byBhY2Nlc3MgaXQgd2lsbCBjYXVzZSBhbiBleGNlcHRpb24uXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ190aHJvd0lmRGVzdHJveWVkJyxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaHJvdyBpZiB1c2VyIHRyaWVzIHRvIGFjY2VzcyBkZXN0cm95ZWQgSW5lcnROb2RlLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF90aHJvd0lmRGVzdHJveWVkKCkge1xuICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGRlc3Ryb3llZCBJbmVydE5vZGUnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKiogQHJldHVybiB7Ym9vbGVhbn0gKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdlbnN1cmVVbnRhYmJhYmxlJyxcblxuXG4gICAgICAgIC8qKiBTYXZlIHRoZSBleGlzdGluZyB0YWJpbmRleCB2YWx1ZSBhbmQgbWFrZSB0aGUgbm9kZSB1bnRhYmJhYmxlIGFuZCB1bmZvY3VzYWJsZSAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZW5zdXJlVW50YWJiYWJsZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy5ub2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZWxlbWVudCA9IC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqL3RoaXMubm9kZTtcbiAgICAgICAgICBpZiAobWF0Y2hlcy5jYWxsKGVsZW1lbnQsIF9mb2N1c2FibGVFbGVtZW50c1N0cmluZykpIHtcbiAgICAgICAgICAgIGlmICggLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovZWxlbWVudC50YWJJbmRleCA9PT0gLTEgJiYgdGhpcy5oYXNTYXZlZFRhYkluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3NhdmVkVGFiSW5kZXggPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi9lbGVtZW50LnRhYkluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgZWxlbWVudC5mb2N1cyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICAgICAgICB0aGlzLl9vdmVycm9kZUZvY3VzTWV0aG9kID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9zYXZlZFRhYkluZGV4ID0gLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovZWxlbWVudC50YWJJbmRleDtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCd0YWJpbmRleCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGQgYW5vdGhlciBpbmVydCByb290IHRvIHRoaXMgaW5lcnQgbm9kZSdzIHNldCBvZiBtYW5hZ2luZyBpbmVydCByb290cy5cbiAgICAgICAgICogQHBhcmFtIHshSW5lcnRSb290fSBpbmVydFJvb3RcbiAgICAgICAgICovXG5cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnYWRkSW5lcnRSb290JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEluZXJ0Um9vdChpbmVydFJvb3QpIHtcbiAgICAgICAgICB0aGlzLl90aHJvd0lmRGVzdHJveWVkKCk7XG4gICAgICAgICAgdGhpcy5faW5lcnRSb290cy5hZGQoaW5lcnRSb290KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdmUgdGhlIGdpdmVuIGluZXJ0IHJvb3QgZnJvbSB0aGlzIGluZXJ0IG5vZGUncyBzZXQgb2YgbWFuYWdpbmcgaW5lcnQgcm9vdHMuXG4gICAgICAgICAqIElmIHRoZSBzZXQgb2YgbWFuYWdpbmcgaW5lcnQgcm9vdHMgYmVjb21lcyBlbXB0eSwgdGhpcyBub2RlIGlzIG5vIGxvbmdlciBpbmVydCxcbiAgICAgICAgICogc28gdGhlIG9iamVjdCBzaG91bGQgYmUgZGVzdHJveWVkLlxuICAgICAgICAgKiBAcGFyYW0geyFJbmVydFJvb3R9IGluZXJ0Um9vdFxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdyZW1vdmVJbmVydFJvb3QnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlSW5lcnRSb290KGluZXJ0Um9vdCkge1xuICAgICAgICAgIHRoaXMuX3Rocm93SWZEZXN0cm95ZWQoKTtcbiAgICAgICAgICB0aGlzLl9pbmVydFJvb3RzWydkZWxldGUnXShpbmVydFJvb3QpO1xuICAgICAgICAgIGlmICh0aGlzLl9pbmVydFJvb3RzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdHJ1Y3RvcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdkZXN0cm95ZWQnLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gKC8qKiBAdHlwZSB7IUluZXJ0Tm9kZX0gKi90aGlzLl9kZXN0cm95ZWRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2hhc1NhdmVkVGFiSW5kZXgnLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fc2F2ZWRUYWJJbmRleCAhPT0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBAcmV0dXJuIHshTm9kZX0gKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdub2RlJyxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgdGhpcy5fdGhyb3dJZkRlc3Ryb3llZCgpO1xuICAgICAgICAgIHJldHVybiB0aGlzLl9ub2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEBwYXJhbSB7P251bWJlcn0gdGFiSW5kZXggKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdzYXZlZFRhYkluZGV4JyxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodGFiSW5kZXgpIHtcbiAgICAgICAgICB0aGlzLl90aHJvd0lmRGVzdHJveWVkKCk7XG4gICAgICAgICAgdGhpcy5fc2F2ZWRUYWJJbmRleCA9IHRhYkluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEByZXR1cm4gez9udW1iZXJ9ICovXG4gICAgICAgICxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgdGhpcy5fdGhyb3dJZkRlc3Ryb3llZCgpO1xuICAgICAgICAgIHJldHVybiB0aGlzLl9zYXZlZFRhYkluZGV4O1xuICAgICAgICB9XG4gICAgICB9XSk7XG5cbiAgICAgIHJldHVybiBJbmVydE5vZGU7XG4gICAgfSgpO1xuXG4gICAgLyoqXG4gICAgICogSW5lcnRNYW5hZ2VyIGlzIGEgcGVyLWRvY3VtZW50IHNpbmdsZXRvbiBvYmplY3Qgd2hpY2ggbWFuYWdlcyBhbGwgaW5lcnQgcm9vdHMgYW5kIG5vZGVzLlxuICAgICAqXG4gICAgICogV2hlbiBhbiBlbGVtZW50IGJlY29tZXMgYW4gaW5lcnQgcm9vdCBieSBoYXZpbmcgYW4gYGluZXJ0YCBhdHRyaWJ1dGUgc2V0IGFuZC9vciBpdHMgYGluZXJ0YFxuICAgICAqIHByb3BlcnR5IHNldCB0byBgdHJ1ZWAsIHRoZSBgc2V0SW5lcnRgIG1ldGhvZCBjcmVhdGVzIGFuIGBJbmVydFJvb3RgIG9iamVjdCBmb3IgdGhlIGVsZW1lbnQuXG4gICAgICogVGhlIGBJbmVydFJvb3RgIGluIHR1cm4gcmVnaXN0ZXJzIGl0c2VsZiBhcyBtYW5hZ2luZyBhbGwgb2YgdGhlIGVsZW1lbnQncyBmb2N1c2FibGUgZGVzY2VuZGFudFxuICAgICAqIG5vZGVzIHZpYSB0aGUgYHJlZ2lzdGVyKClgIG1ldGhvZC4gVGhlIGBJbmVydE1hbmFnZXJgIGVuc3VyZXMgdGhhdCBhIHNpbmdsZSBgSW5lcnROb2RlYCBpbnN0YW5jZVxuICAgICAqIGlzIGNyZWF0ZWQgZm9yIGVhY2ggc3VjaCBub2RlLCB2aWEgdGhlIGBfbWFuYWdlZE5vZGVzYCBtYXAuXG4gICAgICovXG5cblxuICAgIHZhciBJbmVydE1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2N1bWVudFxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBJbmVydE1hbmFnZXIoZG9jdW1lbnQpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEluZXJ0TWFuYWdlcik7XG5cbiAgICAgICAgaWYgKCFkb2N1bWVudCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyByZXF1aXJlZCBhcmd1bWVudDsgSW5lcnRNYW5hZ2VyIG5lZWRzIHRvIHdyYXAgYSBkb2N1bWVudC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBAdHlwZSB7IURvY3VtZW50fSAqL1xuICAgICAgICB0aGlzLl9kb2N1bWVudCA9IGRvY3VtZW50O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbGwgbWFuYWdlZCBub2RlcyBrbm93biB0byB0aGlzIEluZXJ0TWFuYWdlci4gSW4gYSBtYXAgdG8gYWxsb3cgbG9va2luZyB1cCBieSBOb2RlLlxuICAgICAgICAgKiBAdHlwZSB7IU1hcDwhTm9kZSwgIUluZXJ0Tm9kZT59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9tYW5hZ2VkTm9kZXMgPSBuZXcgTWFwKCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbCBpbmVydCByb290cyBrbm93biB0byB0aGlzIEluZXJ0TWFuYWdlci4gSW4gYSBtYXAgdG8gYWxsb3cgbG9va2luZyB1cCBieSBOb2RlLlxuICAgICAgICAgKiBAdHlwZSB7IU1hcDwhTm9kZSwgIUluZXJ0Um9vdD59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9pbmVydFJvb3RzID0gbmV3IE1hcCgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPYnNlcnZlciBmb3IgbXV0YXRpb25zIG9uIGBkb2N1bWVudC5ib2R5YC5cbiAgICAgICAgICogQHR5cGUgeyFNdXRhdGlvbk9ic2VydmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLl93YXRjaEZvckluZXJ0LmJpbmQodGhpcykpO1xuXG4gICAgICAgIC8vIEFkZCBpbmVydCBzdHlsZS5cbiAgICAgICAgYWRkSW5lcnRTdHlsZShkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcblxuICAgICAgICAvLyBXYWl0IGZvciBkb2N1bWVudCB0byBiZSBsb2FkZWQuXG4gICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgdGhpcy5fb25Eb2N1bWVudExvYWRlZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9vbkRvY3VtZW50TG9hZGVkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBTZXQgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBzaG91bGQgYmUgYW4gaW5lcnQgcm9vdCBvciBub3QuXG4gICAgICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gcm9vdFxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBpbmVydFxuICAgICAgICovXG5cblxuICAgICAgX2NyZWF0ZUNsYXNzKEluZXJ0TWFuYWdlciwgW3tcbiAgICAgICAga2V5OiAnc2V0SW5lcnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SW5lcnQocm9vdCwgaW5lcnQpIHtcbiAgICAgICAgICBpZiAoaW5lcnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbmVydFJvb3RzLmhhcyhyb290KSkge1xuICAgICAgICAgICAgICAvLyBlbGVtZW50IGlzIGFscmVhZHkgaW5lcnRcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaW5lcnRSb290ID0gbmV3IEluZXJ0Um9vdChyb290LCB0aGlzKTtcbiAgICAgICAgICAgIHJvb3Quc2V0QXR0cmlidXRlKCdpbmVydCcsICcnKTtcbiAgICAgICAgICAgIHRoaXMuX2luZXJ0Um9vdHMuc2V0KHJvb3QsIGluZXJ0Um9vdCk7XG4gICAgICAgICAgICAvLyBJZiBub3QgY29udGFpbmVkIGluIHRoZSBkb2N1bWVudCwgaXQgbXVzdCBiZSBpbiBhIHNoYWRvd1Jvb3QuXG4gICAgICAgICAgICAvLyBFbnN1cmUgaW5lcnQgc3R5bGVzIGFyZSBhZGRlZCB0aGVyZS5cbiAgICAgICAgICAgIGlmICghdGhpcy5fZG9jdW1lbnQuYm9keS5jb250YWlucyhyb290KSkge1xuICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gcm9vdC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudC5ub2RlVHlwZSA9PT0gMTEpIHtcbiAgICAgICAgICAgICAgICAgIGFkZEluZXJ0U3R5bGUocGFyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9pbmVydFJvb3RzLmhhcyhyb290KSkge1xuICAgICAgICAgICAgICAvLyBlbGVtZW50IGlzIGFscmVhZHkgbm9uLWluZXJ0XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIF9pbmVydFJvb3QgPSB0aGlzLl9pbmVydFJvb3RzLmdldChyb290KTtcbiAgICAgICAgICAgIF9pbmVydFJvb3QuZGVzdHJ1Y3RvcigpO1xuICAgICAgICAgICAgdGhpcy5faW5lcnRSb290c1snZGVsZXRlJ10ocm9vdCk7XG4gICAgICAgICAgICByb290LnJlbW92ZUF0dHJpYnV0ZSgnaW5lcnQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSBJbmVydFJvb3Qgb2JqZWN0IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIGluZXJ0IHJvb3QgZWxlbWVudCwgaWYgYW55LlxuICAgICAgICAgKiBAcGFyYW0geyFOb2RlfSBlbGVtZW50XG4gICAgICAgICAqIEByZXR1cm4geyFJbmVydFJvb3R8dW5kZWZpbmVkfVxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRJbmVydFJvb3QnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5lcnRSb290KGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5faW5lcnRSb290cy5nZXQoZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVnaXN0ZXIgdGhlIGdpdmVuIEluZXJ0Um9vdCBhcyBtYW5hZ2luZyB0aGUgZ2l2ZW4gbm9kZS5cbiAgICAgICAgICogSW4gdGhlIGNhc2Ugd2hlcmUgdGhlIG5vZGUgaGFzIGEgcHJldmlvdXNseSBleGlzdGluZyBpbmVydCByb290LCB0aGlzIGluZXJ0IHJvb3Qgd2lsbFxuICAgICAgICAgKiBiZSBhZGRlZCB0byBpdHMgc2V0IG9mIGluZXJ0IHJvb3RzLlxuICAgICAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAgICAgICAqIEBwYXJhbSB7IUluZXJ0Um9vdH0gaW5lcnRSb290XG4gICAgICAgICAqIEByZXR1cm4geyFJbmVydE5vZGV9IGluZXJ0Tm9kZVxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdyZWdpc3RlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3Rlcihub2RlLCBpbmVydFJvb3QpIHtcbiAgICAgICAgICB2YXIgaW5lcnROb2RlID0gdGhpcy5fbWFuYWdlZE5vZGVzLmdldChub2RlKTtcbiAgICAgICAgICBpZiAoaW5lcnROb2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIG5vZGUgd2FzIGFscmVhZHkgaW4gYW4gaW5lcnQgc3VidHJlZVxuICAgICAgICAgICAgaW5lcnROb2RlLmFkZEluZXJ0Um9vdChpbmVydFJvb3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmVydE5vZGUgPSBuZXcgSW5lcnROb2RlKG5vZGUsIGluZXJ0Um9vdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fbWFuYWdlZE5vZGVzLnNldChub2RlLCBpbmVydE5vZGUpO1xuXG4gICAgICAgICAgcmV0dXJuIGluZXJ0Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZS1yZWdpc3RlciB0aGUgZ2l2ZW4gSW5lcnRSb290IGFzIG1hbmFnaW5nIHRoZSBnaXZlbiBpbmVydCBub2RlLlxuICAgICAgICAgKiBSZW1vdmVzIHRoZSBpbmVydCByb290IGZyb20gdGhlIEluZXJ0Tm9kZSdzIHNldCBvZiBtYW5hZ2luZyBpbmVydCByb290cywgYW5kIHJlbW92ZSB0aGUgaW5lcnRcbiAgICAgICAgICogbm9kZSBmcm9tIHRoZSBJbmVydE1hbmFnZXIncyBzZXQgb2YgbWFuYWdlZCBub2RlcyBpZiBpdCBpcyBkZXN0cm95ZWQuXG4gICAgICAgICAqIElmIHRoZSBub2RlIGlzIG5vdCBjdXJyZW50bHkgbWFuYWdlZCwgdGhpcyBpcyBlc3NlbnRpYWxseSBhIG5vLW9wLlxuICAgICAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAgICAgICAqIEBwYXJhbSB7IUluZXJ0Um9vdH0gaW5lcnRSb290XG4gICAgICAgICAqIEByZXR1cm4gez9JbmVydE5vZGV9IFRoZSBwb3RlbnRpYWxseSBkZXN0cm95ZWQgSW5lcnROb2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG5vZGUsIGlmIGFueS5cbiAgICAgICAgICovXG5cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnZGVyZWdpc3RlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXJlZ2lzdGVyKG5vZGUsIGluZXJ0Um9vdCkge1xuICAgICAgICAgIHZhciBpbmVydE5vZGUgPSB0aGlzLl9tYW5hZ2VkTm9kZXMuZ2V0KG5vZGUpO1xuICAgICAgICAgIGlmICghaW5lcnROb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbmVydE5vZGUucmVtb3ZlSW5lcnRSb290KGluZXJ0Um9vdCk7XG4gICAgICAgICAgaWYgKGluZXJ0Tm9kZS5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX21hbmFnZWROb2Rlc1snZGVsZXRlJ10obm9kZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGluZXJ0Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsYmFjayB1c2VkIHdoZW4gZG9jdW1lbnQgaGFzIGZpbmlzaGVkIGxvYWRpbmcuXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ19vbkRvY3VtZW50TG9hZGVkJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkRvY3VtZW50TG9hZGVkKCkge1xuICAgICAgICAgIC8vIEZpbmQgYWxsIGluZXJ0IHJvb3RzIGluIGRvY3VtZW50IGFuZCBtYWtlIHRoZW0gYWN0dWFsbHkgaW5lcnQuXG4gICAgICAgICAgdmFyIGluZXJ0RWxlbWVudHMgPSBzbGljZS5jYWxsKHRoaXMuX2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tpbmVydF0nKSk7XG4gICAgICAgICAgaW5lcnRFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpbmVydEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SW5lcnQoaW5lcnRFbGVtZW50LCB0cnVlKTtcbiAgICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICAgIC8vIENvbW1lbnQgdGhpcyBvdXQgdG8gdXNlIHByb2dyYW1tYXRpYyBBUEkgb25seS5cbiAgICAgICAgICB0aGlzLl9vYnNlcnZlci5vYnNlcnZlKHRoaXMuX2RvY3VtZW50LmJvZHkgfHwgdGhpcy5fZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7IGF0dHJpYnV0ZXM6IHRydWUsIHN1YnRyZWU6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsYmFjayB1c2VkIHdoZW4gbXV0YXRpb24gb2JzZXJ2ZXIgZGV0ZWN0cyBhdHRyaWJ1dGUgY2hhbmdlcy5cbiAgICAgICAgICogQHBhcmFtIHshQXJyYXk8IU11dGF0aW9uUmVjb3JkPn0gcmVjb3Jkc1xuICAgICAgICAgKiBAcGFyYW0geyFNdXRhdGlvbk9ic2VydmVyfSBzZWxmXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ193YXRjaEZvckluZXJ0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF93YXRjaEZvckluZXJ0KHJlY29yZHMsIHNlbGYpIHtcbiAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgIHJlY29yZHMuZm9yRWFjaChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHJlY29yZC50eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ2NoaWxkTGlzdCc6XG4gICAgICAgICAgICAgICAgc2xpY2UuY2FsbChyZWNvcmQuYWRkZWROb2RlcykuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHZhciBpbmVydEVsZW1lbnRzID0gc2xpY2UuY2FsbChub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tpbmVydF0nKSk7XG4gICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcy5jYWxsKG5vZGUsICdbaW5lcnRdJykpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5lcnRFbGVtZW50cy51bnNoaWZ0KG5vZGUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaW5lcnRFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpbmVydEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRJbmVydChpbmVydEVsZW1lbnQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgfSwgX3RoaXMpO1xuICAgICAgICAgICAgICAgIH0sIF90aGlzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnYXR0cmlidXRlcyc6XG4gICAgICAgICAgICAgICAgaWYgKHJlY29yZC5hdHRyaWJ1dGVOYW1lICE9PSAnaW5lcnQnKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi9yZWNvcmQudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHZhciBpbmVydCA9IHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2luZXJ0Jyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0SW5lcnQodGFyZ2V0LCBpbmVydCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1dKTtcblxuICAgICAgcmV0dXJuIEluZXJ0TWFuYWdlcjtcbiAgICB9KCk7XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSB3YWxrIHRoZSBjb21wb3NlZCB0cmVlIGZyb20gfG5vZGV8LlxuICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcbiAgICAgKiBAcGFyYW0geyhmdW5jdGlvbiAoIUhUTUxFbGVtZW50KSk9fSBjYWxsYmFjayBDYWxsYmFjayB0byBiZSBjYWxsZWQgZm9yIGVhY2ggZWxlbWVudCB0cmF2ZXJzZWQsXG4gICAgICogICAgIGJlZm9yZSBkZXNjZW5kaW5nIGludG8gY2hpbGQgbm9kZXMuXG4gICAgICogQHBhcmFtIHs/U2hhZG93Um9vdD19IHNoYWRvd1Jvb3RBbmNlc3RvciBUaGUgbmVhcmVzdCBTaGFkb3dSb290IGFuY2VzdG9yLCBpZiBhbnkuXG4gICAgICovXG5cblxuICAgIGZ1bmN0aW9uIGNvbXBvc2VkVHJlZVdhbGsobm9kZSwgY2FsbGJhY2ssIHNoYWRvd1Jvb3RBbmNlc3Rvcikge1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi9ub2RlO1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjayhlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlc2NlbmQgaW50byBub2RlOlxuICAgICAgICAvLyBJZiBpdCBoYXMgYSBTaGFkb3dSb290LCBpZ25vcmUgYWxsIGNoaWxkIGVsZW1lbnRzIC0gdGhlc2Ugd2lsbCBiZSBwaWNrZWRcbiAgICAgICAgLy8gdXAgYnkgdGhlIDxjb250ZW50PiBvciA8c2hhZG93PiBlbGVtZW50cy4gRGVzY2VuZCBzdHJhaWdodCBpbnRvIHRoZVxuICAgICAgICAvLyBTaGFkb3dSb290LlxuICAgICAgICB2YXIgc2hhZG93Um9vdCA9IC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqL2VsZW1lbnQuc2hhZG93Um9vdDtcbiAgICAgICAgaWYgKHNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICBjb21wb3NlZFRyZWVXYWxrKHNoYWRvd1Jvb3QsIGNhbGxiYWNrLCBzaGFkb3dSb290KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBpdCBpcyBhIDxjb250ZW50PiBlbGVtZW50LCBkZXNjZW5kIGludG8gZGlzdHJpYnV0ZWQgZWxlbWVudHMgLSB0aGVzZVxuICAgICAgICAvLyBhcmUgZWxlbWVudHMgZnJvbSBvdXRzaWRlIHRoZSBzaGFkb3cgcm9vdCB3aGljaCBhcmUgcmVuZGVyZWQgaW5zaWRlIHRoZVxuICAgICAgICAvLyBzaGFkb3cgRE9NLlxuICAgICAgICBpZiAoZWxlbWVudC5sb2NhbE5hbWUgPT0gJ2NvbnRlbnQnKSB7XG4gICAgICAgICAgdmFyIGNvbnRlbnQgPSAvKiogQHR5cGUgeyFIVE1MQ29udGVudEVsZW1lbnR9ICovZWxlbWVudDtcbiAgICAgICAgICAvLyBWZXJpZmllcyBpZiBTaGFkb3dEb20gdjAgaXMgc3VwcG9ydGVkLlxuICAgICAgICAgIHZhciBkaXN0cmlidXRlZE5vZGVzID0gY29udGVudC5nZXREaXN0cmlidXRlZE5vZGVzID8gY29udGVudC5nZXREaXN0cmlidXRlZE5vZGVzKCkgOiBbXTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3RyaWJ1dGVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbXBvc2VkVHJlZVdhbGsoZGlzdHJpYnV0ZWROb2Rlc1tpXSwgY2FsbGJhY2ssIHNoYWRvd1Jvb3RBbmNlc3Rvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGl0IGlzIGEgPHNsb3Q+IGVsZW1lbnQsIGRlc2NlbmQgaW50byBhc3NpZ25lZCBub2RlcyAtIHRoZXNlXG4gICAgICAgIC8vIGFyZSBlbGVtZW50cyBmcm9tIG91dHNpZGUgdGhlIHNoYWRvdyByb290IHdoaWNoIGFyZSByZW5kZXJlZCBpbnNpZGUgdGhlXG4gICAgICAgIC8vIHNoYWRvdyBET00uXG4gICAgICAgIGlmIChlbGVtZW50LmxvY2FsTmFtZSA9PSAnc2xvdCcpIHtcbiAgICAgICAgICB2YXIgc2xvdCA9IC8qKiBAdHlwZSB7IUhUTUxTbG90RWxlbWVudH0gKi9lbGVtZW50O1xuICAgICAgICAgIC8vIFZlcmlmeSBpZiBTaGFkb3dEb20gdjEgaXMgc3VwcG9ydGVkLlxuICAgICAgICAgIHZhciBfZGlzdHJpYnV0ZWROb2RlcyA9IHNsb3QuYXNzaWduZWROb2RlcyA/IHNsb3QuYXNzaWduZWROb2Rlcyh7IGZsYXR0ZW46IHRydWUgfSkgOiBbXTtcbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgX2Rpc3RyaWJ1dGVkTm9kZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBjb21wb3NlZFRyZWVXYWxrKF9kaXN0cmlidXRlZE5vZGVzW19pXSwgY2FsbGJhY2ssIHNoYWRvd1Jvb3RBbmNlc3Rvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiBpdCBpcyBuZWl0aGVyIHRoZSBwYXJlbnQgb2YgYSBTaGFkb3dSb290LCBhIDxjb250ZW50PiBlbGVtZW50LCBhIDxzbG90PlxuICAgICAgLy8gZWxlbWVudCwgbm9yIGEgPHNoYWRvdz4gZWxlbWVudCByZWN1cnNlIG5vcm1hbGx5LlxuICAgICAgdmFyIGNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgd2hpbGUgKGNoaWxkICE9IG51bGwpIHtcbiAgICAgICAgY29tcG9zZWRUcmVlV2FsayhjaGlsZCwgY2FsbGJhY2ssIHNoYWRvd1Jvb3RBbmNlc3Rvcik7XG4gICAgICAgIGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIHN0eWxlIGVsZW1lbnQgdG8gdGhlIG5vZGUgY29udGFpbmluZyB0aGUgaW5lcnQgc3BlY2lmaWMgc3R5bGVzXG4gICAgICogQHBhcmFtIHshTm9kZX0gbm9kZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZEluZXJ0U3R5bGUobm9kZSkge1xuICAgICAgaWYgKG5vZGUucXVlcnlTZWxlY3Rvcignc3R5bGUjaW5lcnQtc3R5bGUsIGxpbmsjaW5lcnQtc3R5bGUnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgc3R5bGUuc2V0QXR0cmlidXRlKCdpZCcsICdpbmVydC1zdHlsZScpO1xuICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSAnXFxuJyArICdbaW5lcnRdIHtcXG4nICsgJyAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuJyArICcgIGN1cnNvcjogZGVmYXVsdDtcXG4nICsgJ31cXG4nICsgJ1xcbicgKyAnW2luZXJ0XSwgW2luZXJ0XSAqIHtcXG4nICsgJyAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4nICsgJyAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4nICsgJyAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbicgKyAnICB1c2VyLXNlbGVjdDogbm9uZTtcXG4nICsgJ31cXG4nO1xuICAgICAgbm9kZS5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuXG4gICAgaWYgKCFIVE1MRWxlbWVudC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJ2luZXJ0JykpIHtcbiAgICAgIC8qKiBAdHlwZSB7IUluZXJ0TWFuYWdlcn0gKi9cbiAgICAgIHZhciBpbmVydE1hbmFnZXIgPSBuZXcgSW5lcnRNYW5hZ2VyKGRvY3VtZW50KTtcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ2luZXJ0Jywge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAvKiogQHRoaXMgeyFIVE1MRWxlbWVudH0gKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaGFzQXR0cmlidXRlKCdpbmVydCcpO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHRoaXMgeyFIVE1MRWxlbWVudH0gKi9cbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoaW5lcnQpIHtcbiAgICAgICAgICBpbmVydE1hbmFnZXIuc2V0SW5lcnQodGhpcywgaW5lcnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pKCk7XG5cbn0pKSk7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIGBCbG9ja2luZ0VsZW1lbnRzYCBtYW5hZ2VzIGEgc3RhY2sgb2YgZWxlbWVudHMgdGhhdCBpbmVydCB0aGUgaW50ZXJhY3Rpb25cbiAqIG91dHNpZGUgdGhlbS4gVGhlIHRvcCBlbGVtZW50IGlzIHRoZSBpbnRlcmFjdGl2ZSBwYXJ0IG9mIHRoZSBkb2N1bWVudC5cbiAqIFRoZSBzdGFjayBjYW4gYmUgdXBkYXRlZCB3aXRoIHRoZSBtZXRob2RzIGBwdXNoLCByZW1vdmUsIHBvcGAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmxvY2tpbmdFbGVtZW50cyB7XG4gIC8qKlxuICAgKiBDYWxsIHRoaXMgd2hlbmV2ZXIgdGhpcyBvYmplY3QgaXMgYWJvdXQgdG8gYmVjb21lIG9ic29sZXRlLiBUaGlzIGVtcHRpZXNcbiAgICogdGhlIGJsb2NraW5nIGVsZW1lbnRzXG4gICAqL1xuICBkZXN0cnVjdG9yKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFRoZSB0b3AgYmxvY2tpbmcgZWxlbWVudC5cbiAgICovXG4gIHRvcDogSFRNTEVsZW1lbnR8bnVsbDtcblxuICAvKipcbiAgICogQWRkcyB0aGUgZWxlbWVudCB0byB0aGUgYmxvY2tpbmcgZWxlbWVudHMuXG4gICAqL1xuICBwdXNoKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZDtcblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgZWxlbWVudCBmcm9tIHRoZSBibG9ja2luZyBlbGVtZW50cy4gUmV0dXJucyB0cnVlIGlmIHRoZVxuICAgKiBlbGVtZW50IHdhcyByZW1vdmVkLlxuICAgKi9cbiAgcmVtb3ZlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbjtcblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSB0b3AgYmxvY2tpbmcgZWxlbWVudCBhbmQgcmV0dXJucyBpdC5cbiAgICovXG4gIHBvcCgpOiBIVE1MRWxlbWVudHxudWxsO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGlmIHRoZSBlbGVtZW50IGlzIGEgYmxvY2tpbmcgZWxlbWVudC5cbiAgICovXG4gIGhhcyhlbGVtZW50OiBIVE1MRWxlbWVudCk6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRXaXRoQmxvY2tpbmdFbGVtZW50cyBleHRlbmRzIERvY3VtZW50IHtcbiAgJGJsb2NraW5nRWxlbWVudHM6IEJsb2NraW5nRWxlbWVudHM7XG59XG5cbigoKSA9PiB7XG4gIC8qIFN5bWJvbHMgZm9yIHByaXZhdGUgcHJvcGVydGllcyAqL1xuICBjb25zdCBfYmxvY2tpbmdFbGVtZW50cyA9IFN5bWJvbCgpO1xuICBjb25zdCBfYWxyZWFkeUluZXJ0RWxlbWVudHMgPSBTeW1ib2woKTtcbiAgY29uc3QgX3RvcEVsUGFyZW50cyA9IFN5bWJvbCgpO1xuICBjb25zdCBfc2libGluZ3NUb1Jlc3RvcmUgPSBTeW1ib2woKTtcbiAgY29uc3QgX3BhcmVudE1PID0gU3ltYm9sKCk7XG5cbiAgLyogU3ltYm9scyBmb3IgcHJpdmF0ZSBzdGF0aWMgbWV0aG9kcyAqL1xuICBjb25zdCBfdG9wQ2hhbmdlZCA9IFN5bWJvbCgpO1xuICBjb25zdCBfc3dhcEluZXJ0ZWRTaWJsaW5nID0gU3ltYm9sKCk7XG4gIGNvbnN0IF9pbmVydFNpYmxpbmdzID0gU3ltYm9sKCk7XG4gIGNvbnN0IF9yZXN0b3JlSW5lcnRlZFNpYmxpbmdzID0gU3ltYm9sKCk7XG4gIGNvbnN0IF9nZXRQYXJlbnRzID0gU3ltYm9sKCk7XG4gIGNvbnN0IF9nZXREaXN0cmlidXRlZENoaWxkcmVuID0gU3ltYm9sKCk7XG4gIGNvbnN0IF9pc0luZXJ0YWJsZSA9IFN5bWJvbCgpO1xuICBjb25zdCBfaGFuZGxlTXV0YXRpb25zID0gU3ltYm9sKCk7XG5cbiAgaW50ZXJmYWNlIEluZXJ0YWJsZSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBpbmVydD86IGJvb2xlYW47XG4gIH1cblxuICBpbnRlcmZhY2UgSW50ZXJuYWxTdGF0ZSB7XG4gICAgW19zaWJsaW5nc1RvUmVzdG9yZV06IFNldDxNYXliZUhhc0ludGVybmFsU3RhdGU+O1xuICAgIFtfcGFyZW50TU9dOiBNdXRhdGlvbk9ic2VydmVyO1xuICB9XG4gIGludGVyZmFjZSBIYXNJbnRlcm5hbFN0YXRlIGV4dGVuZHMgSW5lcnRhYmxlLCBJbnRlcm5hbFN0YXRlIHt9XG4gIGludGVyZmFjZSBNYXliZUhhc0ludGVybmFsU3RhdGUgZXh0ZW5kcyBJbmVydGFibGUsIFBhcnRpYWw8SW50ZXJuYWxTdGF0ZT4ge31cblxuICAvKipcbiAgICogU2hhZHlET00gc2hhZHkgcm9vdHMgbG9vayBhIGxvdCBsaWtlIHJlYWwgU2hhZG93Um9vdHMuIFRoZSBfX3NoYWR5IHByb3BlcnR5XG4gICAqIGdpdmVzIHRoZW0gYXdheSwgdGhvdWdoLlxuICAgKi9cbiAgaW50ZXJmYWNlIE1heWJlU2hhZHlSb290IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgX19zaGFkeTogdW5rbm93bjtcbiAgICBob3N0OiBFbGVtZW50O1xuICB9XG5cbiAgY2xhc3MgQmxvY2tpbmdFbGVtZW50c0ltcGwgaW1wbGVtZW50cyBCbG9ja2luZ0VsZW1lbnRzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgYmxvY2tpbmcgZWxlbWVudHMuXG4gICAgICovXG4gICAgcHJpdmF0ZVtfYmxvY2tpbmdFbGVtZW50c106IE1heWJlSGFzSW50ZXJuYWxTdGF0ZVtdID0gW107XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIGtlZXAgdHJhY2sgb2YgdGhlIHBhcmVudHMgb2YgdGhlIHRvcCBlbGVtZW50LCBmcm9tIHRoZSBlbGVtZW50XG4gICAgICogaXRzZWxmIHVwIHRvIGJvZHkuIFdoZW4gdG9wIGNoYW5nZXMsIHRoZSBvbGQgdG9wIG1pZ2h0IGhhdmUgYmVlbiByZW1vdmVkXG4gICAgICogZnJvbSB0aGUgZG9jdW1lbnQsIHNvIHdlIG5lZWQgdG8gbWVtb2l6ZSB0aGUgaW5lcnRlZCBwYXJlbnRzJyBzaWJsaW5nc1xuICAgICAqIGluIG9yZGVyIHRvIHJlc3RvcmUgdGhlaXIgaW5lcnRlbmVzcyB3aGVuIHRvcCBjaGFuZ2VzLlxuICAgICAqL1xuICAgIHByaXZhdGVbX3RvcEVsUGFyZW50c106IEhhc0ludGVybmFsU3RhdGVbXSA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogRWxlbWVudHMgdGhhdCBhcmUgYWxyZWFkeSBpbmVydCBiZWZvcmUgdGhlIGZpcnN0IGJsb2NraW5nIGVsZW1lbnQgaXNcbiAgICAgKiBwdXNoZWQuXG4gICAgICovXG4gICAgcHJpdmF0ZVtfYWxyZWFkeUluZXJ0RWxlbWVudHNdID0gbmV3IFNldDxNYXliZUhhc0ludGVybmFsU3RhdGU+KCk7XG5cbiAgICBkZXN0cnVjdG9yKCk6IHZvaWQge1xuICAgICAgLy8gUmVzdG9yZSBvcmlnaW5hbCBpbmVydG5lc3MuXG4gICAgICB0aGlzW19yZXN0b3JlSW5lcnRlZFNpYmxpbmdzXSh0aGlzW190b3BFbFBhcmVudHNdKTtcbiAgICAgIC8vIE5vdGUgd2UgZG9uJ3Qgd2FudCB0byBtYWtlIHRoZXNlIHByb3BlcnRpZXMgbnVsbGFibGUgb24gdGhlIGNsYXNzLFxuICAgICAgLy8gc2luY2UgdGhlbiB3ZSdkIG5lZWQgbm9uLW51bGwgY2FzdHMgaW4gbWFueSBwbGFjZXMuIENhbGxpbmcgYSBtZXRob2Qgb25cbiAgICAgIC8vIGEgQmxvY2tpbmdFbGVtZW50cyBpbnN0YW5jZSBhZnRlciBjYWxsaW5nIGRlc3RydWN0b3Igd2lsbCByZXN1bHQgaW4gYW5cbiAgICAgIC8vIGV4Y2VwdGlvbi5cbiAgICAgIGNvbnN0IG51bGxhYmxlID0gdGhpcyBhcyB1bmtub3duIGFzIHtcbiAgICAgICAgW19ibG9ja2luZ0VsZW1lbnRzXTogbnVsbDtcbiAgICAgICAgW190b3BFbFBhcmVudHNdOiBudWxsO1xuICAgICAgICBbX2FscmVhZHlJbmVydEVsZW1lbnRzXTogbnVsbDtcbiAgICAgIH07XG4gICAgICBudWxsYWJsZVtfYmxvY2tpbmdFbGVtZW50c10gPSBudWxsO1xuICAgICAgbnVsbGFibGVbX3RvcEVsUGFyZW50c10gPSBudWxsO1xuICAgICAgbnVsbGFibGVbX2FscmVhZHlJbmVydEVsZW1lbnRzXSA9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0IHRvcCgpOiBIVE1MRWxlbWVudHxudWxsIHtcbiAgICAgIGNvbnN0IGVsZW1zID0gdGhpc1tfYmxvY2tpbmdFbGVtZW50c107XG4gICAgICByZXR1cm4gZWxlbXNbZWxlbXMubGVuZ3RoIC0gMV0gfHwgbnVsbDtcbiAgICB9XG5cbiAgICBwdXNoKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudCA9PT0gdGhpcy50b3ApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUmVtb3ZlIGl0IGZyb20gdGhlIHN0YWNrLCB3ZSdsbCBicmluZyBpdCB0byB0aGUgdG9wLlxuICAgICAgdGhpcy5yZW1vdmUoZWxlbWVudCk7XG4gICAgICB0aGlzW190b3BDaGFuZ2VkXShlbGVtZW50KTtcbiAgICAgIHRoaXNbX2Jsb2NraW5nRWxlbWVudHNdLnB1c2goZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgICBjb25zdCBpID0gdGhpc1tfYmxvY2tpbmdFbGVtZW50c10uaW5kZXhPZihlbGVtZW50KTtcbiAgICAgIGlmIChpID09PSAtMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aGlzW19ibG9ja2luZ0VsZW1lbnRzXS5zcGxpY2UoaSwgMSk7XG4gICAgICAvLyBUb3AgY2hhbmdlZCBvbmx5IGlmIHRoZSByZW1vdmVkIGVsZW1lbnQgd2FzIHRoZSB0b3AgZWxlbWVudC5cbiAgICAgIGlmIChpID09PSB0aGlzW19ibG9ja2luZ0VsZW1lbnRzXS5sZW5ndGgpIHtcbiAgICAgICAgdGhpc1tfdG9wQ2hhbmdlZF0odGhpcy50b3ApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcG9wKCk6IEhUTUxFbGVtZW50fG51bGwge1xuICAgICAgY29uc3QgdG9wID0gdGhpcy50b3A7XG4gICAgICB0b3AgJiYgdGhpcy5yZW1vdmUodG9wKTtcbiAgICAgIHJldHVybiB0b3A7XG4gICAgfVxuXG4gICAgaGFzKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpc1tfYmxvY2tpbmdFbGVtZW50c10uaW5kZXhPZihlbGVtZW50KSAhPT0gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBgaW5lcnRgIHRvIGFsbCBkb2N1bWVudCBlbGVtZW50cyBleGNlcHQgdGhlIG5ldyB0b3AgZWxlbWVudCwgaXRzXG4gICAgICogcGFyZW50cywgYW5kIGl0cyBkaXN0cmlidXRlZCBjb250ZW50LlxuICAgICAqL1xuICAgIHByaXZhdGVbX3RvcENoYW5nZWRdKG5ld1RvcDogTWF5YmVIYXNJbnRlcm5hbFN0YXRlfG51bGwpOiB2b2lkIHtcbiAgICAgIGNvbnN0IHRvS2VlcEluZXJ0ID0gdGhpc1tfYWxyZWFkeUluZXJ0RWxlbWVudHNdO1xuICAgICAgY29uc3Qgb2xkUGFyZW50cyA9IHRoaXNbX3RvcEVsUGFyZW50c107XG4gICAgICAvLyBObyBuZXcgdG9wLCByZXNldCBvbGQgdG9wIGlmIGFueS5cbiAgICAgIGlmICghbmV3VG9wKSB7XG4gICAgICAgIHRoaXNbX3Jlc3RvcmVJbmVydGVkU2libGluZ3NdKG9sZFBhcmVudHMpO1xuICAgICAgICB0b0tlZXBJbmVydC5jbGVhcigpO1xuICAgICAgICB0aGlzW190b3BFbFBhcmVudHNdID0gW107XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbmV3UGFyZW50cyA9IHRoaXNbX2dldFBhcmVudHNdKG5ld1RvcCk7XG4gICAgICAvLyBOZXcgdG9wIGlzIG5vdCBjb250YWluZWQgaW4gdGhlIG1haW4gZG9jdW1lbnQhXG4gICAgICBpZiAobmV3UGFyZW50c1tuZXdQYXJlbnRzLmxlbmd0aCAtIDFdLnBhcmVudE5vZGUgIT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ05vbi1jb25uZWN0ZWQgZWxlbWVudCBjYW5ub3QgYmUgYSBibG9ja2luZyBlbGVtZW50Jyk7XG4gICAgICB9XG4gICAgICAvLyBDYXN0IGhlcmUgYmVjYXVzZSB3ZSBrbm93IHdlJ2xsIGNhbGwgX2luZXJ0U2libGluZ3Mgb24gbmV3UGFyZW50c1xuICAgICAgLy8gYmVsb3cuXG4gICAgICB0aGlzW190b3BFbFBhcmVudHNdID0gbmV3UGFyZW50cyBhcyBBcnJheTxIYXNJbnRlcm5hbFN0YXRlPjtcblxuICAgICAgY29uc3QgdG9Ta2lwID0gdGhpc1tfZ2V0RGlzdHJpYnV0ZWRDaGlsZHJlbl0obmV3VG9wKTtcblxuICAgICAgLy8gTm8gcHJldmlvdXMgdG9wIGVsZW1lbnQuXG4gICAgICBpZiAoIW9sZFBhcmVudHMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXNbX2luZXJ0U2libGluZ3NdKG5ld1BhcmVudHMsIHRvU2tpcCwgdG9LZWVwSW5lcnQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBpID0gb2xkUGFyZW50cy5sZW5ndGggLSAxO1xuICAgICAgbGV0IGogPSBuZXdQYXJlbnRzLmxlbmd0aCAtIDE7XG4gICAgICAvLyBGaW5kIGNvbW1vbiBwYXJlbnQuIEluZGV4IDAgaXMgdGhlIGVsZW1lbnQgaXRzZWxmIChzbyBzdG9wIGJlZm9yZSBpdCkuXG4gICAgICB3aGlsZSAoaSA+IDAgJiYgaiA+IDAgJiYgb2xkUGFyZW50c1tpXSA9PT0gbmV3UGFyZW50c1tqXSkge1xuICAgICAgICBpLS07XG4gICAgICAgIGotLTtcbiAgICAgIH1cbiAgICAgIC8vIElmIHVwIHRoZSBwYXJlbnRzIHRyZWUgdGhlcmUgYXJlIDIgZWxlbWVudHMgdGhhdCBhcmUgc2libGluZ3MsIHN3YXBcbiAgICAgIC8vIHRoZSBpbmVydGVkIHNpYmxpbmcuXG4gICAgICBpZiAob2xkUGFyZW50c1tpXSAhPT0gbmV3UGFyZW50c1tqXSkge1xuICAgICAgICB0aGlzW19zd2FwSW5lcnRlZFNpYmxpbmddKG9sZFBhcmVudHNbaV0sIG5ld1BhcmVudHNbal0pO1xuICAgICAgfVxuICAgICAgLy8gUmVzdG9yZSBvbGQgcGFyZW50cyBzaWJsaW5ncyBpbmVydG5lc3MuXG4gICAgICBpID4gMCAmJiB0aGlzW19yZXN0b3JlSW5lcnRlZFNpYmxpbmdzXShvbGRQYXJlbnRzLnNsaWNlKDAsIGkpKTtcbiAgICAgIC8vIE1ha2UgbmV3IHBhcmVudHMgc2libGluZ3MgaW5lcnQuXG4gICAgICBqID4gMCAmJiB0aGlzW19pbmVydFNpYmxpbmdzXShuZXdQYXJlbnRzLnNsaWNlKDAsIGopLCB0b1NraXAsIG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN3YXBzIGluZXJ0bmVzcyBiZXR3ZWVuIHR3byBzaWJsaW5nIGVsZW1lbnRzLlxuICAgICAqIFNldHMgdGhlIHByb3BlcnR5IGBpbmVydGAgb3ZlciB0aGUgYXR0cmlidXRlIHNpbmNlIHRoZSBpbmVydCBzcGVjXG4gICAgICogZG9lc24ndCBzcGVjaWZ5IGlmIGl0IHNob3VsZCBiZSByZWZsZWN0ZWQuXG4gICAgICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW50ZXJhY3Rpb24uaHRtbCNpbmVydFxuICAgICAqL1xuICAgIHByaXZhdGVbX3N3YXBJbmVydGVkU2libGluZ10oXG4gICAgICAgIG9sZEluZXJ0OiBIYXNJbnRlcm5hbFN0YXRlLCBuZXdJbmVydDogTWF5YmVIYXNJbnRlcm5hbFN0YXRlKTogdm9pZCB7XG4gICAgICBjb25zdCBzaWJsaW5nc1RvUmVzdG9yZSA9IG9sZEluZXJ0W19zaWJsaW5nc1RvUmVzdG9yZV07XG4gICAgICAvLyBvbGRJbmVydCBpcyBub3QgY29udGFpbmVkIGluIHNpYmxpbmdzIHRvIHJlc3RvcmUsIHNvIHdlIGhhdmUgdG8gY2hlY2tcbiAgICAgIC8vIGlmIGl0J3MgaW5lcnRhYmxlIGFuZCBpZiBhbHJlYWR5IGluZXJ0LlxuICAgICAgaWYgKHRoaXNbX2lzSW5lcnRhYmxlXShvbGRJbmVydCkgJiYgIW9sZEluZXJ0LmluZXJ0KSB7XG4gICAgICAgIG9sZEluZXJ0LmluZXJ0ID0gdHJ1ZTtcbiAgICAgICAgc2libGluZ3NUb1Jlc3RvcmUuYWRkKG9sZEluZXJ0KTtcbiAgICAgIH1cbiAgICAgIC8vIElmIG5ld0luZXJ0IHdhcyBhbHJlYWR5IGJldHdlZW4gdGhlIHNpYmxpbmdzIHRvIHJlc3RvcmUsIGl0IG1lYW5zIGl0IGlzXG4gICAgICAvLyBpbmVydGFibGUgYW5kIG11c3QgYmUgcmVzdG9yZWQuXG4gICAgICBpZiAoc2libGluZ3NUb1Jlc3RvcmUuaGFzKG5ld0luZXJ0KSkge1xuICAgICAgICBuZXdJbmVydC5pbmVydCA9IGZhbHNlO1xuICAgICAgICBzaWJsaW5nc1RvUmVzdG9yZS5kZWxldGUobmV3SW5lcnQpO1xuICAgICAgfVxuICAgICAgbmV3SW5lcnRbX3BhcmVudE1PXSA9IG9sZEluZXJ0W19wYXJlbnRNT107XG4gICAgICBuZXdJbmVydFtfc2libGluZ3NUb1Jlc3RvcmVdID0gc2libGluZ3NUb1Jlc3RvcmU7XG4gICAgICAob2xkSW5lcnQgYXMgTWF5YmVIYXNJbnRlcm5hbFN0YXRlKVtfcGFyZW50TU9dID0gdW5kZWZpbmVkO1xuICAgICAgKG9sZEluZXJ0IGFzIE1heWJlSGFzSW50ZXJuYWxTdGF0ZSlbX3NpYmxpbmdzVG9SZXN0b3JlXSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXN0b3JlcyBvcmlnaW5hbCBpbmVydG5lc3MgdG8gdGhlIHNpYmxpbmdzIG9mIHRoZSBlbGVtZW50cy5cbiAgICAgKiBTZXRzIHRoZSBwcm9wZXJ0eSBgaW5lcnRgIG92ZXIgdGhlIGF0dHJpYnV0ZSBzaW5jZSB0aGUgaW5lcnQgc3BlY1xuICAgICAqIGRvZXNuJ3Qgc3BlY2lmeSBpZiBpdCBzaG91bGQgYmUgcmVmbGVjdGVkLlxuICAgICAqIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2ludGVyYWN0aW9uLmh0bWwjaW5lcnRcbiAgICAgKi9cbiAgICBwcml2YXRlW19yZXN0b3JlSW5lcnRlZFNpYmxpbmdzXShlbGVtZW50czogSGFzSW50ZXJuYWxTdGF0ZVtdKSB7XG4gICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgY29uc3QgbW8gPSBlbGVtZW50W19wYXJlbnRNT107XG4gICAgICAgIG1vLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgKGVsZW1lbnQgYXMgTWF5YmVIYXNJbnRlcm5hbFN0YXRlKVtfcGFyZW50TU9dID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBzaWJsaW5ncyA9IGVsZW1lbnRbX3NpYmxpbmdzVG9SZXN0b3JlXTtcbiAgICAgICAgZm9yIChjb25zdCBzaWJsaW5nIG9mIHNpYmxpbmdzKSB7XG4gICAgICAgICAgc2libGluZy5pbmVydCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIChlbGVtZW50IGFzIE1heWJlSGFzSW50ZXJuYWxTdGF0ZSlbX3NpYmxpbmdzVG9SZXN0b3JlXSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbmVydHMgdGhlIHNpYmxpbmdzIG9mIHRoZSBlbGVtZW50cyBleGNlcHQgdGhlIGVsZW1lbnRzIHRvIHNraXAuIFN0b3Jlc1xuICAgICAqIHRoZSBpbmVydGVkIHNpYmxpbmdzIGludG8gdGhlIGVsZW1lbnQncyBzeW1ib2wgYF9zaWJsaW5nc1RvUmVzdG9yZWAuXG4gICAgICogUGFzcyBgdG9LZWVwSW5lcnRgIHRvIGNvbGxlY3QgdGhlIGFscmVhZHkgaW5lcnQgZWxlbWVudHMuXG4gICAgICogU2V0cyB0aGUgcHJvcGVydHkgYGluZXJ0YCBvdmVyIHRoZSBhdHRyaWJ1dGUgc2luY2UgdGhlIGluZXJ0IHNwZWNcbiAgICAgKiBkb2Vzbid0IHNwZWNpZnkgaWYgaXQgc2hvdWxkIGJlIHJlZmxlY3RlZC5cbiAgICAgKiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbnRlcmFjdGlvbi5odG1sI2luZXJ0XG4gICAgICovXG4gICAgcHJpdmF0ZVtfaW5lcnRTaWJsaW5nc10oXG4gICAgICAgIGVsZW1lbnRzOiBNYXliZUhhc0ludGVybmFsU3RhdGVbXSwgdG9Ta2lwOiBTZXQ8SFRNTEVsZW1lbnQ+fG51bGwsXG4gICAgICAgIHRvS2VlcEluZXJ0OiBTZXQ8SFRNTEVsZW1lbnQ+fG51bGwpIHtcbiAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykge1xuICAgICAgICAvLyBBc3N1bWUgZWxlbWVudCBpcyBub3QgYSBEb2N1bWVudCwgc28gaXQgbXVzdCBoYXZlIGEgcGFyZW50Tm9kZS5cbiAgICAgICAgY29uc3QgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlITtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBwYXJlbnQuY2hpbGRyZW47XG4gICAgICAgIGNvbnN0IGluZXJ0ZWRTaWJsaW5ncyA9IG5ldyBTZXQ8SFRNTEVsZW1lbnQ+KCk7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBjb25zdCBzaWJsaW5nID0gY2hpbGRyZW5bal0gYXMgTWF5YmVIYXNJbnRlcm5hbFN0YXRlO1xuICAgICAgICAgIC8vIFNraXAgdGhlIGlucHV0IGVsZW1lbnQsIGlmIG5vdCBpbmVydGFibGUgb3IgdG8gYmUgc2tpcHBlZC5cbiAgICAgICAgICBpZiAoc2libGluZyA9PT0gZWxlbWVudCB8fCAhdGhpc1tfaXNJbmVydGFibGVdKHNpYmxpbmcpIHx8XG4gICAgICAgICAgICAgICh0b1NraXAgJiYgdG9Ta2lwLmhhcyhzaWJsaW5nKSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBTaG91bGQgYmUgY29sbGVjdGVkIHNpbmNlIGFscmVhZHkgaW5lcnRlZC5cbiAgICAgICAgICBpZiAodG9LZWVwSW5lcnQgJiYgc2libGluZy5pbmVydCkge1xuICAgICAgICAgICAgdG9LZWVwSW5lcnQuYWRkKHNpYmxpbmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaWJsaW5nLmluZXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGluZXJ0ZWRTaWJsaW5ncy5hZGQoc2libGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFN0b3JlIHRoZSBzaWJsaW5ncyB0aGF0IHdlcmUgaW5lcnRlZC5cbiAgICAgICAgZWxlbWVudFtfc2libGluZ3NUb1Jlc3RvcmVdID0gaW5lcnRlZFNpYmxpbmdzO1xuICAgICAgICAvLyBPYnNlcnZlIG9ubHkgaW1tZWRpYXRlIGNoaWxkcmVuIG11dGF0aW9ucyBvbiB0aGUgcGFyZW50LlxuICAgICAgICBjb25zdCBtbyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXNbX2hhbmRsZU11dGF0aW9uc10uYmluZCh0aGlzKSk7XG4gICAgICAgIGVsZW1lbnRbX3BhcmVudE1PXSA9IG1vO1xuICAgICAgICBsZXQgcGFyZW50VG9PYnNlcnZlID0gcGFyZW50O1xuICAgICAgICAvLyBJZiB3ZSdyZSB1c2luZyB0aGUgU2hhZHlET00gcG9seWZpbGwsIHRoZW4gb3VyIHBhcmVudCBjb3VsZCBiZSBhXG4gICAgICAgIC8vIHNoYWR5IHJvb3QsIHdoaWNoIGlzIGFuIG9iamVjdCB0aGF0IGFjdHMgbGlrZSBhIFNoYWRvd1Jvb3QsIGJ1dCBpc24ndFxuICAgICAgICAvLyBhY3R1YWxseSBhIG5vZGUgaW4gdGhlIHJlYWwgRE9NLiBPYnNlcnZlIHRoZSByZWFsIERPTSBwYXJlbnQgaW5zdGVhZC5cbiAgICAgICAgY29uc3QgbWF5YmVTaGFkeVJvb3QgPSBwYXJlbnRUb09ic2VydmUgYXMgTWF5YmVTaGFkeVJvb3Q7XG4gICAgICAgIGlmIChtYXliZVNoYWR5Um9vdC5fX3NoYWR5ICYmIG1heWJlU2hhZHlSb290Lmhvc3QpIHtcbiAgICAgICAgICBwYXJlbnRUb09ic2VydmUgPSBtYXliZVNoYWR5Um9vdC5ob3N0O1xuICAgICAgICB9XG4gICAgICAgIG1vLm9ic2VydmUocGFyZW50VG9PYnNlcnZlLCB7XG4gICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIG5ld2x5IGFkZGVkL3JlbW92ZWQgbm9kZXMgYnkgdG9nZ2xpbmcgdGhlaXIgaW5lcnRuZXNzLlxuICAgICAqIEl0IGFsc28gY2hlY2tzIGlmIHRoZSBjdXJyZW50IHRvcCBCbG9ja2luZyBFbGVtZW50IGhhcyBiZWVuIHJlbW92ZWQsXG4gICAgICogbm90aWZ5aW5nIGFuZCByZW1vdmluZyBpdC5cbiAgICAgKi9cbiAgICBwcml2YXRlW19oYW5kbGVNdXRhdGlvbnNdKG11dGF0aW9uczogTXV0YXRpb25SZWNvcmRbXSk6IHZvaWQge1xuICAgICAgY29uc3QgcGFyZW50cyA9IHRoaXNbX3RvcEVsUGFyZW50c107XG4gICAgICBjb25zdCB0b0tlZXBJbmVydCA9IHRoaXNbX2FscmVhZHlJbmVydEVsZW1lbnRzXTtcbiAgICAgIGZvciAoY29uc3QgbXV0YXRpb24gb2YgbXV0YXRpb25zKSB7XG4gICAgICAgIC8vIElmIHRoZSB0YXJnZXQgaXMgYSBzaGFkb3dSb290LCBnZXQgaXRzIGhvc3QgYXMgd2Ugc2tpcCBzaGFkb3dSb290cyB3aGVuXG4gICAgICAgIC8vIGNvbXB1dGluZyBfdG9wRWxQYXJlbnRzLlxuICAgICAgICBjb25zdCB0YXJnZXQgPSAobXV0YXRpb24udGFyZ2V0IGFzIFNoYWRvd1Jvb3QpLmhvc3QgfHwgbXV0YXRpb24udGFyZ2V0O1xuICAgICAgICBjb25zdCBpZHggPSB0YXJnZXQgPT09IGRvY3VtZW50LmJvZHkgP1xuICAgICAgICAgICAgcGFyZW50cy5sZW5ndGggOlxuICAgICAgICAgICAgcGFyZW50cy5pbmRleE9mKHRhcmdldCBhcyBIYXNJbnRlcm5hbFN0YXRlKTtcbiAgICAgICAgY29uc3QgaW5lcnRlZENoaWxkID0gcGFyZW50c1tpZHggLSAxXTtcbiAgICAgICAgY29uc3QgaW5lcnRlZFNpYmxpbmdzID0gaW5lcnRlZENoaWxkW19zaWJsaW5nc1RvUmVzdG9yZV07XG5cbiAgICAgICAgLy8gVG8gcmVzdG9yZS5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtdXRhdGlvbi5yZW1vdmVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBzaWJsaW5nID0gbXV0YXRpb24ucmVtb3ZlZE5vZGVzW2ldIGFzIE1heWJlSGFzSW50ZXJuYWxTdGF0ZTtcbiAgICAgICAgICBpZiAoc2libGluZyA9PT0gaW5lcnRlZENoaWxkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ0RldGVjdGVkIHJlbW92YWwgb2YgdGhlIHRvcCBCbG9ja2luZyBFbGVtZW50LicpO1xuICAgICAgICAgICAgdGhpcy5wb3AoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGluZXJ0ZWRTaWJsaW5ncy5oYXMoc2libGluZykpIHtcbiAgICAgICAgICAgIHNpYmxpbmcuaW5lcnQgPSBmYWxzZTtcbiAgICAgICAgICAgIGluZXJ0ZWRTaWJsaW5ncy5kZWxldGUoc2libGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVG8gaW5lcnQuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbXV0YXRpb24uYWRkZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IHNpYmxpbmcgPSBtdXRhdGlvbi5hZGRlZE5vZGVzW2ldIGFzIE1heWJlSGFzSW50ZXJuYWxTdGF0ZTtcbiAgICAgICAgICBpZiAoIXRoaXNbX2lzSW5lcnRhYmxlXShzaWJsaW5nKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0b0tlZXBJbmVydCAmJiBzaWJsaW5nLmluZXJ0KSB7XG4gICAgICAgICAgICB0b0tlZXBJbmVydC5hZGQoc2libGluZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNpYmxpbmcuaW5lcnQgPSB0cnVlO1xuICAgICAgICAgICAgaW5lcnRlZFNpYmxpbmdzLmFkZChzaWJsaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGlmIHRoZSBlbGVtZW50IGlzIGluZXJ0YWJsZS5cbiAgICAgKi9cbiAgICBwcml2YXRlW19pc0luZXJ0YWJsZV0oZWxlbWVudDogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBmYWxzZSA9PT0gL14oc3R5bGV8dGVtcGxhdGV8c2NyaXB0KSQvLnRlc3QoZWxlbWVudC5sb2NhbE5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxpc3Qgb2YgbmV3UGFyZW50cyBvZiBhbiBlbGVtZW50LCBzdGFydGluZyBmcm9tIGVsZW1lbnRcbiAgICAgKiAoaW5jbHVkZWQpIHVwIHRvIGBkb2N1bWVudC5ib2R5YCAoZXhjbHVkZWQpLlxuICAgICAqL1xuICAgIHByaXZhdGVbX2dldFBhcmVudHNdKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogQXJyYXk8SFRNTEVsZW1lbnQ+IHtcbiAgICAgIGNvbnN0IHBhcmVudHMgPSBbXTtcbiAgICAgIGxldCBjdXJyZW50OiBIVE1MRWxlbWVudHxudWxsfHVuZGVmaW5lZCA9IGVsZW1lbnQ7XG4gICAgICAvLyBTdG9wIHRvIGJvZHkuXG4gICAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50ICE9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgIC8vIFNraXAgc2hhZG93IHJvb3RzLlxuICAgICAgICBpZiAoY3VycmVudC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICBwYXJlbnRzLnB1c2goY3VycmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2hhZG93RG9tIHYxXG4gICAgICAgIGlmIChjdXJyZW50LmFzc2lnbmVkU2xvdCkge1xuICAgICAgICAgIC8vIENvbGxlY3Qgc2xvdHMgZnJvbSBkZWVwZXN0IHNsb3QgdG8gdG9wLlxuICAgICAgICAgIHdoaWxlIChjdXJyZW50ID0gY3VycmVudC5hc3NpZ25lZFNsb3QpIHtcbiAgICAgICAgICAgIHBhcmVudHMucHVzaChjdXJyZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQ29udGludWUgdGhlIHNlYXJjaCBvbiB0aGUgdG9wIHNsb3QuXG4gICAgICAgICAgY3VycmVudCA9IHBhcmVudHMucG9wKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudCB8fFxuICAgICAgICAgICAgKGN1cnJlbnQgYXMgTm9kZSBhcyBTaGFkb3dSb290KS5ob3N0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcmVudHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZGlzdHJpYnV0ZWQgY2hpbGRyZW4gb2YgdGhlIGVsZW1lbnQncyBzaGFkb3cgcm9vdC5cbiAgICAgKiBSZXR1cm5zIG51bGwgaWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIGEgc2hhZG93IHJvb3QuXG4gICAgICovXG4gICAgcHJpdmF0ZVtfZ2V0RGlzdHJpYnV0ZWRDaGlsZHJlbl0oZWxlbWVudDogSFRNTEVsZW1lbnQpOlxuICAgICAgICBTZXQ8SFRNTEVsZW1lbnQ+fG51bGwge1xuICAgICAgY29uc3Qgc2hhZG93Um9vdCA9IGVsZW1lbnQuc2hhZG93Um9vdDtcbiAgICAgIGlmICghc2hhZG93Um9vdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTZXQ8SFRNTEVsZW1lbnQ+KCk7XG4gICAgICBsZXQgaTtcbiAgICAgIGxldCBqO1xuICAgICAgbGV0IG5vZGVzO1xuICAgICAgY29uc3Qgc2xvdHMgPSBzaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ3Nsb3QnKTtcbiAgICAgIGlmIChzbG90cy5sZW5ndGggJiYgc2xvdHNbMF0uYXNzaWduZWROb2Rlcykge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2xvdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBub2RlcyA9IHNsb3RzW2ldLmFzc2lnbmVkTm9kZXMoe1xuICAgICAgICAgICAgZmxhdHRlbjogdHJ1ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbm9kZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChub2Rlc1tqXS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgcmVzdWx0LmFkZChub2Rlc1tqXSBhcyBIVE1MRWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE5vIG5lZWQgdG8gc2VhcmNoIGZvciA8Y29udGVudD4uXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIChkb2N1bWVudCBhcyBEb2N1bWVudFdpdGhCbG9ja2luZ0VsZW1lbnRzKS4kYmxvY2tpbmdFbGVtZW50cyA9XG4gICAgICBuZXcgQmxvY2tpbmdFbGVtZW50c0ltcGwoKTtcbn0pKCk7XG4iLCJpbXBvcnQgXCJ3aWNnLWluZXJ0XCI7XG5pbXBvcnQgXCJibG9ja2luZy1lbGVtZW50c1wiO1xuaW1wb3J0IHsgRG9jdW1lbnRXaXRoQmxvY2tpbmdFbGVtZW50cyB9IGZyb20gXCJibG9ja2luZy1lbGVtZW50c1wiO1xuaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tIFwiLi91c2UtZG9jdW1lbnQtY2xhc3NcIjtcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xuXG5mdW5jdGlvbiBibG9ja2luZ0VsZW1lbnRzKCkgeyByZXR1cm4gKGdldERvY3VtZW50KCkgYXMgRG9jdW1lbnRXaXRoQmxvY2tpbmdFbGVtZW50cykuJGJsb2NraW5nRWxlbWVudHMgfVxuLyoqXG4gKiBBbGxvd3MgYW4gZWxlbWVudCB0byB0cmFwIGZvY3VzIGJ5IGFwcGx5aW5nIHRoZSBcImluZXJ0XCIgYXR0cmlidXRlIHRvIGFsbCBzaWJsaW5nLCBhdW50LCBhbmQgdW5jbGUgbm9kZXMuXG4gKiBcbiAqIEF1dG9tYXRpY2FsbHkgaGFuZGxlcyBjb25zZWN1dGl2ZSBjYWxscyB3aXRoIGEgbG9vc2VseSBhcHBsaWVkIHN0YWNrIG9wZXJhdGlvbiBcbiAqIChzcGVjaWZpY2FsbHkgdmlhIGBibG9ja2luZ0VsZW1lbnRzYCwgd2l0aCBhIHNtYWxsIHBvbHlmaWxsIGJlY2F1c2UgSSdtIG5vdCBzdXJlIGhvdyBsb25nXG4gKiBpdCdsbCB0YWtlIHRvIGZpbmQgaXRzIHdheSBpbnRvIHRoZSBzcGVjLCBpZiBldmVyKVxuICogQHBhcmFtIHRhcmdldCBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUJsb2NraW5nRWxlbWVudDxFIGV4dGVuZHMgRWxlbWVudD4oZW5hYmxlZDogYm9vbGVhbiwgZ2V0VGFyZ2V0OiAoKSA9PiAoRSB8IG51bGwpKSB7XG5cbiAgICBjb25zdCBzdGFibGVHZXRUYXJnZXQgPSB1c2VTdGFibGVDYWxsYmFjayhnZXRUYXJnZXQpO1xuXG4gICAgLyoqXG4gICAgICogUHVzaC9wb3AgdGhlIGVsZW1lbnQgZnJvbSB0aGUgYmxvY2tpbmdFbGVtZW50cyBzdGFjay5cbiAgICAgKi9cbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBzdGFibGVHZXRUYXJnZXQoKTtcblxuICAgICAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgICAgICAgLy8gU29tZXRpbWVzIGJsb2NraW5nRWxlbWVudHMgd2lsbCBmYWlsIGlmLCBmb3IgZXhhbXBsZSxcbiAgICAgICAgICAgIC8vIHRoZSB0YXJnZXQgZWxlbWVudCBpc24ndCBjb25uZWN0ZWQgdG8gZG9jdW1lbnQuYm9keS5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgcmFyZSwgYnV0IGl0J3MgYmV0dGVyIHRvIGZhaWwgc2lsZW50bHkgd2l0aCB3ZWlyZCB0YWJiaW5nIGJlaGF2aW9yXG4gICAgICAgICAgICAvLyB0aGFuIHRvIGNyYXNoIHRoZSBlbnRpcmUgYXBwbGljYXRpb24uXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGJsb2NraW5nRWxlbWVudHMoKS5wdXNoKHRhcmdldCBhcyBFbGVtZW50IGFzIEhUTUxFbGVtZW50KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBibG9ja2luZ0VsZW1lbnRzKCkucmVtb3ZlKHRhcmdldCBhcyBFbGVtZW50IGFzIEhUTUxFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gV2VsbCwgc2VtaS1zaWxlbnRseS5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFtlbmFibGVkXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb3BFbGVtZW50KCkge1xuICAgIHJldHVybiBibG9ja2luZ0VsZW1lbnRzKCkudG9wO1xufVxuXG5cbiIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuaW1wb3J0IHsgaXNGb2N1c2FibGUgfSBmcm9tIFwidGFiYmFibGVcIjtcbmltcG9ydCB7IHVzZUFjdGl2ZUVsZW1lbnQgfSBmcm9tIFwiLi91c2UtYWN0aXZlLWVsZW1lbnRcIjtcbmltcG9ydCB7IGdldFRvcEVsZW1lbnQsIHVzZUJsb2NraW5nRWxlbWVudCB9IGZyb20gXCIuL3VzZS1ibG9ja2luZy1lbGVtZW50XCI7XG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gXCIuL3VzZS1kb2N1bWVudC1jbGFzc1wiO1xuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwiLi91c2UtbWVyZ2VkLXByb3BzXCI7XG5pbXBvcnQgeyB1c2VSZWZFbGVtZW50LCBVc2VSZWZFbGVtZW50UmV0dXJuVHlwZSB9IGZyb20gXCIuL3VzZS1yZWYtZWxlbWVudFwiO1xuaW1wb3J0IHsgdXNlU3RhYmxlQ2FsbGJhY2sgfSBmcm9tIFwiLi91c2Utc3RhYmxlLWNhbGxiYWNrXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlRm9jdXNUcmFwUGFyYW1ldGVycyB7IHRyYXBBY3RpdmU6IGJvb2xlYW47IH1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VGb2N1c1RyYXBSZXR1cm5UeXBlPEUgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIE9taXQ8VXNlUmVmRWxlbWVudFJldHVyblR5cGU8RT4sIFwidXNlUmVmRWxlbWVudFByb3BzXCI+IHtcbiAgICAvKiogKlVuc3RhYmxlKiAocmVsaWVzIG9uIHRoZSBgdHJhcEFjdGl2ZWAgcHJvcCkgKi9cbiAgICB1c2VGb2N1c1RyYXBQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxFPikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT47XG59XG5cbmNvbnN0IGVsZW1lbnRzVG9SZXN0b3JlRm9jdXNUbyA9IG5ldyBNYXA8RWxlbWVudCB8IG51bGwsIChOb2RlICYgSFRNTE9yU1ZHRWxlbWVudCk+KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb2N1c1RyYXA8RSBleHRlbmRzIEhUTUxFbGVtZW50Pih7IHRyYXBBY3RpdmUgfTogVXNlRm9jdXNUcmFwUGFyYW1ldGVycyk6IFVzZUZvY3VzVHJhcFJldHVyblR5cGU8RT4ge1xuICAgIFxuICAgIGNvbnN0IGhhbmRsZUFjdGl2ZUNoYW5nZSA9IHVzZUNhbGxiYWNrKCh0cmFwQWN0aXZlOiBib29sZWFuLCBlbGVtZW50OiBFIHwgbnVsbCkgPT4ge1xuICAgICAgICBpZiAodHJhcEFjdGl2ZSAmJiBlbGVtZW50KSB7XG5cbiAgICAgICAgICAgIGxldCByYWZIYW5kbGUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IFRoaXMgZXh0cmEgcXVldWVNaWNyb3Rhc2sgaXMgbmVlZGVkIGZvclxuICAgICAgICAgICAgICAgIC8vIC4uLnJlYXNvbnM/XG4gICAgICAgICAgICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmaW5kRmlyc3RGb2N1c2FibGUoZWxlbWVudCk/LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIHJhZkhhbmRsZSA9IDA7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJhZkhhbmRsZSlcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmSGFuZGxlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZWxlbWVudCkge1xuXG4gICAgICAgICAgICAvLyBSZXN0b3JlIHRoZSBmb2N1cyB0byB0aGUgZWxlbWVudFxuICAgICAgICAgICAgLy8gdGhhdCBoYXMgcmV0dXJuZWQgdG8gdGhlIHRvcCBvZiB0aGUgc3RhY2tcbiAgICAgICAgICAgIGxldCByYWZIYW5kbGUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudHNUb1Jlc3RvcmVGb2N1c1RvLmdldChnZXRUb3BFbGVtZW50KCkpPy5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICByYWZIYW5kbGUgPSAwO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJhZkhhbmRsZSlcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmSGFuZGxlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9LCBbXSk7XG4gICAgXG4gICAgY29uc3QgeyBnZXRFbGVtZW50LCB1c2VSZWZFbGVtZW50UHJvcHMgfSA9IHVzZVJlZkVsZW1lbnQ8RT4oeyBvbkVsZW1lbnRDaGFuZ2U6IHVzZVN0YWJsZUNhbGxiYWNrKChlbGVtZW50OiBFIHwgbnVsbCkgPT4gaGFuZGxlQWN0aXZlQ2hhbmdlKHRyYXBBY3RpdmUsIGVsZW1lbnQpKSB9KVxuICAgIGNvbnN0IHsgZ2V0TGFzdEFjdGl2ZUVsZW1lbnQgfSA9IHVzZUFjdGl2ZUVsZW1lbnQoeyBnZXREb2N1bWVudDogdXNlU3RhYmxlQ2FsbGJhY2soKCkgPT4gZ2V0RWxlbWVudCgpPy5vd25lckRvY3VtZW50ID8/IHdpbmRvdy5kb2N1bWVudCApIH0pO1xuXG5cbiAgICAvLyBXaGVuIHRoZSB0cmFwIGJlY29tZXMgYWN0aXZlLCBiZWZvcmUgd2UgbGV0IHRoZSBibG9ja2luZ0VsZW1lbnRzIGhvb2sgcnVuLFxuICAgIC8vIGtlZXAgdHJhY2sgb2Ygd2hhdGV2ZXIncyBjdXJyZW50bHkgZm9jdXNlZCBhbmQgc2F2ZSBpdC5cbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZ2V0RWxlbWVudCgpO1xuICAgICAgICBpZiAodHJhcEFjdGl2ZSAmJiBlbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KGVsZW1lbnQpO1xuXG4gICAgICAgICAgICAvLyBTYXZlIHRoZSBjdXJyZW50bHkgZm9jdXNlZCBlbGVtZW50XG4gICAgICAgICAgICAvLyB0byB3aGF0ZXZlcidzIGN1cnJlbnRseSBhdCB0aGUgdG9wIG9mIHRoZSBzdGFja1xuICAgICAgICAgICAgZWxlbWVudHNUb1Jlc3RvcmVGb2N1c1RvLnNldChnZXRUb3BFbGVtZW50KCksIChnZXRMYXN0QWN0aXZlRWxlbWVudCgpIGFzIChFbGVtZW50ICYgSFRNTE9yU1ZHRWxlbWVudCkpID8/IGRvY3VtZW50LmJvZHkpO1xuICAgICAgICB9XG4gICAgfSwgW3RyYXBBY3RpdmVdKTtcblxuICAgIHVzZUJsb2NraW5nRWxlbWVudCh0cmFwQWN0aXZlLCBnZXRFbGVtZW50KTtcblxuICAgIC8qKlxuICAgICAqIEFueSB0aW1lIHdlIGFjdGl2YXRlIG9yIGRlYWN0aXZhdGUgdGhlIHRyYXAsXG4gICAgICogY2hhbmdlIGZvY3VzIHRvIHNvbWV0aGluZyBlbHNlIChzb21ldGhpbmcgaW5cbiAgICAgKiB0aGUgdHJhcCBpZiBpdCdzIGFjdGl2ZSwgb3Igd2hhdGV2ZXIgd2UndmVcbiAgICAgKiB0cmFja2VkIGluIGVsZW1lbnRzVG9SZXN0b3JlRm9jdXNUbyBpZiBub3QpXG4gICAgICovXG4gICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgICAgaGFuZGxlQWN0aXZlQ2hhbmdlKHRyYXBBY3RpdmUsIGdldEVsZW1lbnQoKSk7XG4gICAgfSwgW3RyYXBBY3RpdmVdKTtcblxuICAgIGNvbnN0IHVzZUZvY3VzVHJhcFByb3BzID0gKChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4pID0+IHtcbiAgICAgICAgY29uc3QgcDEgPSB1c2VSZWZFbGVtZW50UHJvcHMocHJvcHMpO1xuICAgICAgICBjb25zdCBwMiA9IHsgXCJhcmlhLW1vZGFsXCI6IHRyYXBBY3RpdmUgPyBcInRydWVcIiA6IHVuZGVmaW5lZCB9IGFzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+O1xuICAgICAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHM8RT4ocDEsIHAyKTtcbiAgICB9KTtcblxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXNlRm9jdXNUcmFwUHJvcHMsXG4gICAgICAgIGdldEVsZW1lbnRcbiAgICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50IGNvbnRhaW5lZCB3aXRoaW4gdGhlIGdpdmVuIG5vZGUsIG9yIG51bGwgaWYgbm9uZSBhcmUgZm91bmQuXG4gKiBAcGFyYW0gZWxlbWVudCBcbiAqIEByZXR1cm5zIFxuICovXG5leHBvcnQgZnVuY3Rpb24gZmluZEZpcnN0Rm9jdXNhYmxlKGVsZW1lbnQ6IE5vZGUpIHtcbiAgICBjb25zdCB0cmVlV2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihlbGVtZW50LCBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCwgeyBhY2NlcHROb2RlOiAobm9kZSkgPT4gKG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50ICYmIGlzRm9jdXNhYmxlKG5vZGUpID8gTm9kZUZpbHRlci5GSUxURVJfQUNDRVBUIDogTm9kZUZpbHRlci5GSUxURVJfU0tJUCkgfSlcbiAgICBjb25zdCBmaXJzdEZvY3VzYWJsZSA9IHRyZWVXYWxrZXIuZmlyc3RDaGlsZCgpIGFzIChFbGVtZW50ICYgSFRNTE9yU1ZHRWxlbWVudCkgfCBudWxsO1xuICAgIHJldHVybiBmaXJzdEZvY3VzYWJsZTtcbn1cblxuIiwiaW1wb3J0IHsgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsLCB3aGVuIGNhbGxlZCwgZm9yY2UgdGhlIGNvbXBvbmVudFxuICogdGhhdCB1c2VzIHRoaXMgaG9vayB0byByZS1yZW5kZXIgaXRzZWxmLlxuICogXG4gKiBJdCdzIGEgYml0IHNtZWxseSwgc28gYmVzdCB0byB1c2Ugc3BhcmluZ2x5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRm9yY2VVcGRhdGUoKSB7XG4gICAgY29uc3QgWywgc2V0XSA9IHVzZVN0YXRlKDApO1xuICAgIHJldHVybiB1c2VSZWYoKCkgPT4gc2V0KGkgPT4gKytpKSkuY3VycmVudDtcbn0iLCJcclxuaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgVXNlTWFuYWdlZENoaWxkUGFyYW1ldGVycywgdXNlTWFuYWdlZENoaWxkcmVuLCBVc2VNYW5hZ2VkQ2hpbGRyZW5QYXJhbWV0ZXJzLCBVc2VNYW5hZ2VkQ2hpbGRyZW5SZXR1cm5UeXBlSW5mbyB9IGZyb20gXCIuL3VzZS1jaGlsZC1tYW5hZ2VyXCI7XHJcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xyXG5pbXBvcnQgeyB1c2VBY3RpdmVFbGVtZW50LCBVc2VBY3RpdmVFbGVtZW50UGFyYW1ldGVycywgVXNlQWN0aXZlRWxlbWVudFJldHVyblR5cGUgfSBmcm9tIFwiLi91c2UtYWN0aXZlLWVsZW1lbnRcIjtcclxuaW1wb3J0IHsgcmV0dXJuRmFsc2UsIHVzZUVuc3VyZVN0YWJpbGl0eSwgdXNlUGFzc2l2ZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXBhc3NpdmUtc3RhdGVcIjtcclxuaW1wb3J0IHsgdXNlUmVmRWxlbWVudCwgVXNlUmVmRWxlbWVudFBhcmFtZXRlcnMsIFVzZVJlZkVsZW1lbnRSZXR1cm5UeXBlIH0gZnJvbSBcIi4vdXNlLXJlZi1lbGVtZW50XCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZUhhc0ZvY3VzUGFyYW1ldGVyczxUIGV4dGVuZHMgTm9kZT4gZXh0ZW5kcyBVc2VBY3RpdmVFbGVtZW50UGFyYW1ldGVycywgVXNlUmVmRWxlbWVudFBhcmFtZXRlcnM8VD4ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHRoZSBlbGVtZW50IGl0c2VsZiBjdXJyZW50bHkgaGFzIGZvY3VzLlxyXG4gICAgICogXHJcbiAgICAgKiBgcHJldkZvY3VzZWRgIGlzIGdlbmVyYWxseSB0aGUgb3Bwb3NpdGUgb2YgYGZvY3VzZWRgLCBidXQgb24gbW91bnQgaXQncyBgdW5kZWZpbmVkYCB3aGlsZSBgZm9jdXNlZGAgaXMgcHJvYmFibHkgZmFsc2UgKGJvdGggZmFsc3kpXHJcbiAgICAgKi9cclxuICAgIG9uRm9jdXNlZENoYW5nZWQ/KGZvY3VzZWQ6IGJvb2xlYW4sIHByZXZGb2N1c2VkOiBib29sZWFuIHwgdW5kZWZpbmVkKTogdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExpa2UgYG9uRm9jdXNlZENoYW5nZWRgLCBidXQgYWxzbyAqYWRkaXRpb25hbGx5KiBpZiBhbnkgY2hpbGQgZWxlbWVudHMgYXJlIGZvY3VzZWQuXHJcbiAgICAgKiBcclxuICAgICAqIEBzZWUgdGhpcy5vbkZvY3VzZWRDaGFuZ2VkXHJcbiAgICAgKi9cclxuICAgIG9uRm9jdXNlZElubmVyQ2hhbmdlZD8oZm9jdXNlZDogYm9vbGVhbiwgcHJldkZvY3VzZWQ6IGJvb2xlYW4gfCB1bmRlZmluZWQpOiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2ltaWxhciB0byBgb25Gb2N1c2VkQ2hhbmdlZGAsIGJ1dCBpZiB0aGVyZSBpcyBubyBjdXJyZW50bHkgZm9jdXNlZCBlbGVtZW50LCBpcyBgdHJ1ZWAgaWYgdGhpcyBlbGVtZW50IHRoYXQgKmRpZCogaGF2ZSBmb2N1cyBsYXN0LlxyXG4gICAgICogXHJcbiAgICAgKiBUaGlzIGlzIGFsd2F5cyBgdHJ1ZWAgd2hpbGUgYGZvY3VzZWRgIGlzIGB0cnVlYC4gSWYgYGZvY3VzZWRgIGlzIGBmYWxzZWAsIHRoaXMgbWF5IGJlIGB0cnVlYCBvciBgZmFsc2VgLlxyXG4gICAgICovXHJcbiAgICBvbkxhc3RGb2N1c2VkQ2hhbmdlZD8oZm9jdXNlZDogYm9vbGVhbiwgcHJldkZvY3VzZWQ6IGJvb2xlYW4gfCB1bmRlZmluZWQpOiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29tYmluZXMgdGhlIGltcGxpY2F0aW9ucyBvZiBgb25Gb2N1c2VkQ2hhbmdlZGAgYW5kIGBvbkZvY3VzZWRDaGFuZ2VkYC5cclxuICAgICAqL1xyXG4gICAgb25MYXN0Rm9jdXNlZElubmVyQ2hhbmdlZD8oZm9jdXNlZDogYm9vbGVhbiwgcHJldkZvY3VzZWQ6IGJvb2xlYW4gfCB1bmRlZmluZWQpOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZUhhc0ZvY3VzUmV0dXJuVHlwZTxUIGV4dGVuZHMgTm9kZT4gZXh0ZW5kcyBPbWl0PFVzZVJlZkVsZW1lbnRSZXR1cm5UeXBlPFQ+LCBcInVzZVJlZkVsZW1lbnRQcm9wc1wiPiwgVXNlQWN0aXZlRWxlbWVudFJldHVyblR5cGUge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTW9kaWZpZXMgdGhlIGVsZW1lbnQgdG8gYmUgYWJsZSB0byB0cmFjayBpdHMgb3duIGZvY3VzIHN0YXRlXHJcbiAgICAgKiBcclxuICAgICAqICoqU1RBQkxFKipcclxuICAgICAqL1xyXG4gICAgdXNlSGFzRm9jdXNQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxUPikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8VD47XHJcblxyXG4gICAgLyoqIFNUQUJMRSAqL1xyXG4gICAgZ2V0Rm9jdXNlZCgpOiBib29sZWFuO1xyXG4gICAgLyoqIFNUQUJMRSAqL1xyXG4gICAgZ2V0Rm9jdXNlZElubmVyKCk6IGJvb2xlYW47XHJcbiAgICAvKiogU1RBQkxFICovXHJcbiAgICBnZXRMYXN0Rm9jdXNlZCgpOiBib29sZWFuO1xyXG4gICAgLyoqIFNUQUJMRSAqL1xyXG4gICAgZ2V0TGFzdEZvY3VzZWRJbm5lcigpOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlSGFzRm9jdXM8VCBleHRlbmRzIE5vZGU+KHsgb25Gb2N1c2VkQ2hhbmdlZCwgb25Gb2N1c2VkSW5uZXJDaGFuZ2VkLCBvbkxhc3RGb2N1c2VkQ2hhbmdlZCwgb25MYXN0Rm9jdXNlZElubmVyQ2hhbmdlZCwgb25MYXN0QWN0aXZlRWxlbWVudENoYW5nZSwgb25BY3RpdmVFbGVtZW50Q2hhbmdlLCBvbldpbmRvd0ZvY3VzZWRDaGFuZ2UsIGdldERvY3VtZW50LCBnZXRXaW5kb3csIG9uRWxlbWVudENoYW5nZSwgb25Nb3VudCwgb25Vbm1vdW50IH06IFVzZUhhc0ZvY3VzUGFyYW1ldGVyczxUPik6IFVzZUhhc0ZvY3VzUmV0dXJuVHlwZTxUPiB7XHJcblxyXG4gICAgdXNlRW5zdXJlU3RhYmlsaXR5KFwidXNlSGFzRm9jdXNcIiwgb25Gb2N1c2VkQ2hhbmdlZCwgb25Gb2N1c2VkSW5uZXJDaGFuZ2VkLCBvbkxhc3RGb2N1c2VkQ2hhbmdlZCwgb25MYXN0Rm9jdXNlZElubmVyQ2hhbmdlZCwgb25MYXN0QWN0aXZlRWxlbWVudENoYW5nZSwgb25BY3RpdmVFbGVtZW50Q2hhbmdlLCBvbldpbmRvd0ZvY3VzZWRDaGFuZ2UpO1xyXG5cclxuICAgIGNvbnN0IFtnZXRGb2N1c2VkLCBzZXRGb2N1c2VkXSA9IHVzZVBhc3NpdmVTdGF0ZTxib29sZWFuPihvbkZvY3VzZWRDaGFuZ2VkLCByZXR1cm5GYWxzZSk7XHJcbiAgICBjb25zdCBbZ2V0Rm9jdXNlZElubmVyLCBzZXRGb2N1c2VkSW5uZXJdID0gdXNlUGFzc2l2ZVN0YXRlPGJvb2xlYW4+KG9uRm9jdXNlZElubmVyQ2hhbmdlZCwgcmV0dXJuRmFsc2UpO1xyXG4gICAgY29uc3QgW2dldExhc3RGb2N1c2VkLCBzZXRMYXN0Rm9jdXNlZF0gPSB1c2VQYXNzaXZlU3RhdGU8Ym9vbGVhbj4ob25MYXN0Rm9jdXNlZENoYW5nZWQsIHJldHVybkZhbHNlKTtcclxuICAgIGNvbnN0IFtnZXRMYXN0Rm9jdXNlZElubmVyLCBzZXRMYXN0Rm9jdXNlZElubmVyXSA9IHVzZVBhc3NpdmVTdGF0ZTxib29sZWFuPihvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkLCByZXR1cm5GYWxzZSk7XHJcblxyXG4gICAgY29uc3QgeyBnZXRFbGVtZW50LCB1c2VSZWZFbGVtZW50UHJvcHMgfSA9IHVzZVJlZkVsZW1lbnQ8VD4oeyBvbkVsZW1lbnRDaGFuZ2UsIG9uTW91bnQsIG9uVW5tb3VudCB9KTtcclxuXHJcbiAgICBjb25zdCB7IGdldEFjdGl2ZUVsZW1lbnQsIGdldExhc3RBY3RpdmVFbGVtZW50LCBnZXRXaW5kb3dGb2N1c2VkIH0gPSB1c2VBY3RpdmVFbGVtZW50KHtcclxuICAgICAgICBnZXREb2N1bWVudCxcclxuICAgICAgICBnZXRXaW5kb3csXHJcbiAgICAgICAgb25BY3RpdmVFbGVtZW50Q2hhbmdlOiB1c2VDYWxsYmFjazxOb25OdWxsYWJsZTxVc2VBY3RpdmVFbGVtZW50UGFyYW1ldGVyc1tcIm9uQWN0aXZlRWxlbWVudENoYW5nZVwiXT4+KChhY3RpdmVFbGVtZW50LCBwcmV2QWN0aXZlRWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxmRWxlbWVudCA9IGdldEVsZW1lbnQoKTtcclxuICAgICAgICAgICAgY29uc3QgZm9jdXNlZCA9IChzZWxmRWxlbWVudCAhPSBudWxsICYmIChzZWxmRWxlbWVudCA9PSBhY3RpdmVFbGVtZW50IGFzIE5vZGUgfCBudWxsKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvY3VzZWRJbm5lciA9ICghIXNlbGZFbGVtZW50Py5jb250YWlucyhhY3RpdmVFbGVtZW50IGFzIE5vZGUgfCBudWxsKSk7XHJcbiAgICAgICAgICAgIHNldEZvY3VzZWQoZm9jdXNlZCk7XHJcbiAgICAgICAgICAgIHNldEZvY3VzZWRJbm5lcihmb2N1c2VkSW5uZXIpO1xyXG4gICAgICAgICAgICBvbkFjdGl2ZUVsZW1lbnRDaGFuZ2U/LihhY3RpdmVFbGVtZW50LCBwcmV2QWN0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgfSwgW10pLFxyXG4gICAgICAgIG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2U6IHVzZUNhbGxiYWNrPE5vbk51bGxhYmxlPFVzZUFjdGl2ZUVsZW1lbnRQYXJhbWV0ZXJzW1wib25MYXN0QWN0aXZlRWxlbWVudENoYW5nZVwiXT4+KChsYXN0QWN0aXZlRWxlbWVudCwgcHJldkxhc3RBY3RpdmVFbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGZFbGVtZW50ID0gZ2V0RWxlbWVudCgpO1xyXG4gICAgICAgICAgICBjb25zdCBmb2N1c2VkID0gKHNlbGZFbGVtZW50ICE9IG51bGwgJiYgKHNlbGZFbGVtZW50ID09IGxhc3RBY3RpdmVFbGVtZW50IGFzIE5vZGUgfCBudWxsKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvY3VzZWRJbm5lciA9ICghIXNlbGZFbGVtZW50Py5jb250YWlucyhsYXN0QWN0aXZlRWxlbWVudCBhcyBOb2RlIHwgbnVsbCkpO1xyXG4gICAgICAgICAgICBzZXRMYXN0Rm9jdXNlZChmb2N1c2VkKTtcclxuICAgICAgICAgICAgc2V0TGFzdEZvY3VzZWRJbm5lcihmb2N1c2VkSW5uZXIpO1xyXG4gICAgICAgICAgICBvbkxhc3RBY3RpdmVFbGVtZW50Q2hhbmdlPy4obGFzdEFjdGl2ZUVsZW1lbnQsIHByZXZMYXN0QWN0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgfSwgW10pLFxyXG4gICAgICAgIG9uV2luZG93Rm9jdXNlZENoYW5nZVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgdXNlSGFzRm9jdXNQcm9wcyA9IHVzZUNhbGxiYWNrKChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8VD4pID0+IHsgcmV0dXJuIHVzZVJlZkVsZW1lbnRQcm9wcyhwcm9wcyk7IH0sIFtdKTtcclxuXHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VIYXNGb2N1c1Byb3BzLFxyXG4gICAgICAgIGdldEVsZW1lbnQsXHJcbiAgICAgICAgZ2V0Rm9jdXNlZCxcclxuICAgICAgICBnZXRGb2N1c2VkSW5uZXIsXHJcbiAgICAgICAgZ2V0TGFzdEZvY3VzZWQsXHJcbiAgICAgICAgZ2V0TGFzdEZvY3VzZWRJbm5lcixcclxuICAgICAgICBnZXRBY3RpdmVFbGVtZW50LFxyXG4gICAgICAgIGdldExhc3RBY3RpdmVFbGVtZW50LFxyXG4gICAgICAgIGdldFdpbmRvd0ZvY3VzZWRcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlQ2hpbGRyZW5IYXZlRm9jdXNQYXJhbWV0ZXJzIGV4dGVuZHMgVXNlTWFuYWdlZENoaWxkcmVuUGFyYW1ldGVyczxudW1iZXIsIG5ldmVyPiB7XHJcbiAgICBjaGlsZHJlbkhhdmVGb2N1czoge1xyXG4gICAgICAgIG9uQW55R2FpbmVkRm9jdXM/KCk6IHZvaWQ7XHJcbiAgICAgICAgb25BbGxMb3N0Rm9jdXM/KCk6IHZvaWQ7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VDaGlsZHJlbkhhdmVGb2N1c0NoaWxkUGFyYW1ldGVyczxFIGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VNYW5hZ2VkQ2hpbGRQYXJhbWV0ZXJzPG51bWJlciwgRm9jdXNJbmZvLCBuZXZlciwgXCJzdWJJbmZvXCI+LCBVc2VIYXNGb2N1c1BhcmFtZXRlcnM8RT4ge1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZUNoaWxkcmVuSGF2ZUZvY3VzQ2hpbGRSZXR1cm5UeXBlPEUgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIE9taXQ8VXNlUmVmRWxlbWVudFJldHVyblR5cGU8RT4sIFwidXNlUmVmRWxlbWVudFByb3BzXCI+LCBPbWl0PFVzZUhhc0ZvY3VzUmV0dXJuVHlwZTxFPiwgXCJ1c2VIYXNGb2N1c1Byb3BzXCI+IHtcclxuICAgIHVzZUNoaWxkcmVuSGF2ZUZvY3VzQ2hpbGRQcm9wcyhwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4pOiBoLkpTWC5IVE1MQXR0cmlidXRlczxFPjtcclxufVxyXG5cclxuaW50ZXJmYWNlIEZvY3VzSW5mbyB7XHJcblxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZUNoaWxkcmVuSGF2ZUZvY3VzUmV0dXJuVHlwZUluZm8gZXh0ZW5kcyBVc2VNYW5hZ2VkQ2hpbGRyZW5SZXR1cm5UeXBlSW5mbzxudW1iZXIsIEZvY3VzSW5mbywgbmV2ZXI+IHtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlQ2hpbGRyZW5IYXZlRm9jdXNSZXR1cm5UeXBlV2l0aEhvb2tzIGV4dGVuZHMgVXNlQ2hpbGRyZW5IYXZlRm9jdXNSZXR1cm5UeXBlSW5mbyB7XHJcbiAgICB1c2VDaGlsZHJlbkhhdmVGb2N1c0NoaWxkOiA8RSBleHRlbmRzIEVsZW1lbnQ+KHBhcmFtZXRlcnM6IFVzZUNoaWxkcmVuSGF2ZUZvY3VzQ2hpbGRQYXJhbWV0ZXJzPEU+KSA9PiBVc2VDaGlsZHJlbkhhdmVGb2N1c0NoaWxkUmV0dXJuVHlwZTxFPjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNoaWxkcmVuSGF2ZUZvY3VzKHsgY2hpbGRyZW5IYXZlRm9jdXM6IHsgb25BbGxMb3N0Rm9jdXMsIG9uQW55R2FpbmVkRm9jdXMgfSwgbWFuYWdlZENoaWxkcmVuOiB7IG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdCwgb25DaGlsZHJlbk1vdW50Q2hhbmdlIH0gfTogVXNlQ2hpbGRyZW5IYXZlRm9jdXNQYXJhbWV0ZXJzKTogVXNlQ2hpbGRyZW5IYXZlRm9jdXNSZXR1cm5UeXBlV2l0aEhvb2tzIHtcclxuICAgIGNvbnN0IHsgbWFuYWdlZENoaWxkcmVuLCB1c2VNYW5hZ2VkQ2hpbGQgfSA9IHVzZU1hbmFnZWRDaGlsZHJlbjxudW1iZXIsIEZvY3VzSW5mbywgbmV2ZXI+KHsgbWFuYWdlZENoaWxkcmVuOiB7IG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdCwgb25DaGlsZHJlbk1vdW50Q2hhbmdlIH0gfSk7XHJcbiAgICBjb25zdCBhbGxFbGVtZW50c1JlZiA9IHVzZVJlZjxTZXQ8Tm9kZT4+KG5ldyBTZXQoKSk7XHJcbiAgICBjb25zdCBbX2dldEZvY3VzQ291bnQsIHNldEZvY3VzQ291bnRdID0gdXNlUGFzc2l2ZVN0YXRlPG51bWJlcj4odXNlU3RhYmxlQ2FsbGJhY2soKGFueUZvY3VzZWQ6IG51bWJlciwgYW55UHJldmlvdXNseUZvY3VzZWQ6IG51bWJlciB8IHVuZGVmaW5lZCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBDaGFuZ2luZyBmb2N1cyBjb3VudCBmcm9tICR7YW55UHJldmlvdXNseUZvY3VzZWR9IHRvICR7YW55Rm9jdXNlZH1gKTtcclxuICAgICAgICBjb25zb2xlLmFzc2VydChhbnlGb2N1c2VkID49IDAgJiYgYW55Rm9jdXNlZCA8PSAxKTtcclxuXHJcbiAgICAgICAgaWYgKGFueUZvY3VzZWQgJiYgIWFueVByZXZpb3VzbHlGb2N1c2VkKVxyXG4gICAgICAgICAgICBvbkFueUdhaW5lZEZvY3VzPy4oKTtcclxuICAgICAgICBpZiAoIWFueUZvY3VzZWQgJiYgYW55UHJldmlvdXNseUZvY3VzZWQpXHJcbiAgICAgICAgICAgIG9uQWxsTG9zdEZvY3VzPy4oKTtcclxuICAgIH0pKTtcclxuXHJcbiAgICBjb25zdCB1c2VDaGlsZHJlbkhhdmVGb2N1c0NoaWxkID0gdXNlQ2FsbGJhY2soPEUgZXh0ZW5kcyBFbGVtZW50Pih7IG9uRWxlbWVudENoYW5nZSwgb25Nb3VudCwgb25Vbm1vdW50LCBnZXREb2N1bWVudCwgZ2V0V2luZG93LCBvbkFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uRm9jdXNlZENoYW5nZWQsIG9uRm9jdXNlZElubmVyQ2hhbmdlZCwgb25MYXN0QWN0aXZlRWxlbWVudENoYW5nZSwgb25MYXN0Rm9jdXNlZENoYW5nZWQsIG9uTGFzdEZvY3VzZWRJbm5lckNoYW5nZWQsIG9uV2luZG93Rm9jdXNlZENoYW5nZSwgbWFuYWdlZENoaWxkOiB7IGluZGV4LCBmbGFncyB9IH06IFVzZUNoaWxkcmVuSGF2ZUZvY3VzQ2hpbGRQYXJhbWV0ZXJzPEU+KTogVXNlQ2hpbGRyZW5IYXZlRm9jdXNDaGlsZFJldHVyblR5cGU8RT4gPT4ge1xyXG4gICAgICAgIHVzZU1hbmFnZWRDaGlsZCh7IG1hbmFnZWRDaGlsZDogeyBpbmRleCwgc3ViSW5mbzoge30sIGZsYWdzIH0gfSk7XHJcbiAgICAgICAgY29uc3QgeyB1c2VIYXNGb2N1c1Byb3BzLCAuLi5oYXNGb2N1cyAgfSA9IHVzZUhhc0ZvY3VzPEU+KHtcclxuICAgICAgICAgICAgZ2V0RG9jdW1lbnQsXHJcbiAgICAgICAgICAgIGdldFdpbmRvdyxcclxuICAgICAgICAgICAgb25BY3RpdmVFbGVtZW50Q2hhbmdlLFxyXG4gICAgICAgICAgICBvbkVsZW1lbnRDaGFuZ2U6IHVzZUNhbGxiYWNrKChlOiBFIHwgbnVsbCwgcHJldjogRSB8IG51bGwgfCB1bmRlZmluZWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCByID0gb25FbGVtZW50Q2hhbmdlPy4oZSwgcHJldik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbEVsZW1lbnRzUmVmLmN1cnJlbnQuYWRkKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHI/LigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxFbGVtZW50c1JlZi5jdXJyZW50LmRlbGV0ZShlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIFtvbkVsZW1lbnRDaGFuZ2VdKSxcclxuICAgICAgICAgICAgb25Nb3VudCxcclxuICAgICAgICAgICAgb25Vbm1vdW50LFxyXG4gICAgICAgICAgICBvbkZvY3VzZWRDaGFuZ2VkLFxyXG4gICAgICAgICAgICBvbkZvY3VzZWRJbm5lckNoYW5nZWQsXHJcbiAgICAgICAgICAgIG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UsXHJcbiAgICAgICAgICAgIG9uTGFzdEZvY3VzZWRDaGFuZ2VkLFxyXG4gICAgICAgICAgICBvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkOiB1c2VTdGFibGVDYWxsYmFjaygoZm9jdXNlZDogYm9vbGVhbiwgcHJldjogYm9vbGVhbiB8IHVuZGVmaW5lZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQ2hpbGQgJHtpbmRleH0gaXMgZm9jdXNlZGApO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldEZvY3VzQ291bnQocCA9PiAocCA/PyAwKSArIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWZvY3VzZWQgJiYgcHJldikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDaGlsZCAke2luZGV4fSBpcyB1bmZvY3VzZWRgKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRGb2N1c0NvdW50KHAgPT4gKHAgPz8gMCkgLSAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkPy4oZm9jdXNlZCwgcHJldik7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBvbldpbmRvd0ZvY3VzZWRDaGFuZ2VcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXNlQ2hpbGRyZW5IYXZlRm9jdXNDaGlsZFByb3BzOiB1c2VIYXNGb2N1c1Byb3BzLFxyXG4gICAgICAgICAgICAuLi5oYXNGb2N1c1xyXG4gICAgICAgIH1cclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbixcclxuICAgICAgICB1c2VDaGlsZHJlbkhhdmVGb2N1c0NoaWxkXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCB7IHVzZUdsb2JhbEhhbmRsZXIgfSBmcm9tIFwiLi91c2UtZXZlbnQtaGFuZGxlclwiO1xuaW1wb3J0IHsgdXNlRm9yY2VVcGRhdGUgfSBmcm9tIFwiLi91c2UtZm9yY2UtdXBkYXRlXCI7XG5pbXBvcnQgeyB1c2VIYXNGb2N1cywgVXNlSGFzRm9jdXNQYXJhbWV0ZXJzIH0gZnJvbSBcIi4vdXNlLWhhcy1mb2N1c1wiO1xuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwiLi91c2UtbWVyZ2VkLXByb3BzXCI7XG5pbXBvcnQgeyB1c2VTdGFibGVDYWxsYmFjayB9IGZyb20gXCIuL3VzZS1zdGFibGUtY2FsbGJhY2tcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXN0YXRlXCI7XG5cbmludGVyZmFjZSBVc2VQcmVzc1BhcmFtZXRlcnM8RSBleHRlbmRzIE5vZGU+IHtcbiAgICBvbkNsaWNrU3luYzogKChlOiBoLkpTWC5UYXJnZXRlZEV2ZW50PEU+KSA9PiB2b2lkKSB8IG51bGwgfCB1bmRlZmluZWQ7XG4gICAgZXhjbHVkZTogdW5kZWZpbmVkIHwgeyBjbGljaz86IFwiZXhjbHVkZVwiIHwgdW5kZWZpbmVkLCBzcGFjZT86IFwiZXhjbHVkZVwiIHwgdW5kZWZpbmVkLCBlbnRlcj86IFwiZXhjbHVkZVwiIHwgdW5kZWZpbmVkIH07XG4gICAgaGFzRm9jdXM6IFVzZUhhc0ZvY3VzUGFyYW1ldGVyczxFPjtcbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBuZWNlc3NhcnkgZXZlbnQgaGFuZGxlcnMgdG8gY3JlYXRlIGEgXCJwcmVzc1wiLWxpa2UgZXZlbnQgZm9yXG4gKiBhbnkgZWxlbWVudCwgd2hldGhlciBpdCdzIGEgbmF0aXZlIDxCVVRUT04+IG9yIHJlZ3VsYXIgPERJVj4uXG4gKiBcbiAqIE5vdGFibHksIHRoZSBmb2xsb3dpbmcgY2FzZXMgYXJlIGNvdmVyZWQ6XG4gKiAqIFRoZSB0YXJnZXQgZWxlbWVudCBpcyBwcm9wZXJseSBmb2N1c2VkLCBldmVuIG9uIGlPUyBTYWZhcmkgKCplc3BlY2lhbGx5KiBvbiBpT1MgU2FmYXJpKVxuICogKiBEb3VibGUtY2xpY2tzIHdvbid0IHNlbGVjdCB0ZXh0LiBcbiAqICogQ29udmVyc2VseSwgbWFudWFsbHkgc2VsZWN0aW5nIHRleHQgd29uJ3QgaW52b2tlIGEgcHJlc3MuXG4gKiAqIEtleWJvYXJkIGV2ZW50cyAmbWRhc2g7IGBlbnRlcmAgaW1tZWRpYXRlbHkgaW52b2tlcyB0aGUgaGFuZGxlciwgd2hpbGUgYHNwYWNlYCBpbnZva2VzIGl0IG9uIGtleXVwLlxuICogKiBIYXB0aWMgZmVlZGJhY2sgKG9uLCBsaWtlLCB0aGUgb25lIGJyb3dzZXIgY29tYmluYXRpb24gdGhhdCBzdXBwb3J0cyBpdCAmbWRhc2g7IHRoaXMgY2FuIGJlIGRpc2FibGVkIGFwcC13aWRlIHdpdGggYHNldEJ1dHRvblZpYnJhdGVgKVxuICogXG4gKiBJbiBhZGRpdGlvbiwgd2hlbiB0aGUgQ1NTIGA6YWN0aXZlYCBwc2V1ZG8tY2xhc3Mgd291bGQgYXBwbHkgdG8gYSBub3JtYWwgYnV0dG9uXG4gKiAoaS5lLiB3aGVuIGhvbGRpbmcgdGhlIHNwYWNlYmFyIG9yIGR1cmluZyBtb3VzZWRvd24pLCBgeyBcImRhdGEtcHNldWRvLWFjdGl2ZVwiOiBcInRydWVcIiB9YFxuICogaXMgYWRkZWQgdG8gdGhlIHByb3BzLiAgWW91IGNhbiBlaXRoZXIgbGV0IGl0IHBhc3MgdGhyb3VnaCBhbmQgc3R5bGUgaXQgdGhyb3VnaCBuZXcgQ1NTLFxuICogb3IgaW5zcGVjdCB0aGUgcmV0dXJuZWQgcHJvcHMgZm9yIGl0IGFuZCBhZGQgZS5nLiBhbiBgLmFjdGl2ZWAgY2xhc3MgZm9yIGV4aXN0aW5nIENTU1xuICogXG4gKiBAcGFyYW0gb25DbGlja1N5bmMgXG4gKiBAcGFyYW0gZXhjbHVkZSBXaGV0aGVyIHRoZSBwb2x5ZmlsbCBzaG91bGRuJ3QgYXBwbHkgKGNhbiBzcGVjaWZ5IGZvciBzcGVjaWZpYyBpbnRlcmFjdGlvbnMpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VQcmVzczxFIGV4dGVuZHMgTm9kZT4oeyBleGNsdWRlLCBoYXNGb2N1czogeyBvbkZvY3VzZWRJbm5lckNoYW5nZWQsIC4uLmhhc0ZvY3VzIH0sIG9uQ2xpY2tTeW5jIH06IFVzZVByZXNzUGFyYW1ldGVyczxFPikge1xuXG4gICAgLy8gQSBidXR0b24gY2FuIGJlIGFjdGl2YXRlZCBpbiBtdWx0aXBsZSB3YXlzLCBzbyBvbiB0aGUgb2ZmIGNoYW5jZVxuICAgIC8vIHRoYXQgbXVsdGlwbGUgYXJlIHRyaWdnZXJlZCBhdCBvbmNlLCB3ZSBvbmx5ICphY3R1YWxseSogcmVnaXN0ZXJcbiAgICAvLyBhIHByZXNzIG9uY2UgYWxsIG9mIG91ciBcIm9uXCIgc2lnbmFscyBoYXZlIHR1cm5lZCBiYWNrIHRvIFwib2ZmXCIuXG4gICAgLy8gV2UgYXBwcm94aW1hdGUgdGhpcyBieSBqdXN0IGluY3JlbWVudGluZyB3aGVuIGFjdGl2ZSwgYW5kXG4gICAgLy8gZGVjcmVtZW50aW5nIHdoZW4gZGVhY3RpdmF0ZWQuXG4gICAgLy9cbiAgICAvLyBBcyBhbiBlbWVyZ2VuY3kgZmFpbHNhZmUsIHdoZW4gdGhlIGVsZW1lbnQgbG9zZXMgZm9jdXMsXG4gICAgLy8gdGhpcyBpcyByZXNldCBiYWNrIHRvIDAuXG4gICAgY29uc3QgW2FjdGl2ZSwgc2V0QWN0aXZlLCBnZXRBY3RpdmVdID0gdXNlU3RhdGUoMCk7XG4gICAgY29uc3QgZm9yY2VVcGRhdGUgPSB1c2VGb3JjZVVwZGF0ZSgpO1xuICAgIGNvbnN0IHsgdXNlSGFzRm9jdXNQcm9wcywgZ2V0RWxlbWVudCB9ID0gdXNlSGFzRm9jdXMoe1xuICAgICAgICAuLi5oYXNGb2N1cyxcbiAgICAgICAgb25Gb2N1c2VkSW5uZXJDaGFuZ2VkOiB1c2VTdGFibGVDYWxsYmFjaygoZjogYm9vbGVhbiwgcDogYm9vbGVhbiB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgICAgICAgb25Gb2N1c2VkSW5uZXJDaGFuZ2VkPy4oZiwgcCk7XG4gICAgICAgICAgICBpZiAoIWYpIHtcbiAgICAgICAgICAgICAgICBzZXRBY3RpdmUoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSk7XG5cbiAgICAvLyBJZiB3ZSB0aGUgY3VycmVudCB0ZXh0IHNlbGVjdGlvbiBjaGFuZ2VzIHRvIGluY2x1ZGUgdGhpcyBlbGVtZW50XG4gICAgLy8gRFVSSU5HIGUuZy4gYSBtb3VzZWRvd24sIHRoZW4gd2UgZG9uJ3Qgd2FudCB0aGUgbW91c2V1cCB0byBcImNvdW50XCIsIGFzIGl0IHdlcmUsXG4gICAgLy8gYmVjYXVzZSBpdHMgb25seSBwdXJwb3NlIHdhcyBzZWxlY3RpbmcgdGV4dCwgbm90IGNsaWNraW5nIGJ1dHRvbnMuXG4gICAgLy9cbiAgICAvLyBUbyBjYXRjaCB0aGlzLCBhbnkgdGltZSB0aGUgdGV4dCBzZWxlY3Rpb24gaW5jbHVkZXMgdXMgd2hpbGUgaW4gdGhlIG1pZGRsZVxuICAgIC8vIG9mIGEgY2xpY2ssIHRoaXMgZmxhZyBpcyBzZXQsIHdoaWNoIGNhbmNlbHMgdGhlIGFjdGl2YXRpb24gb2YgYSBwcmVzcy5cbiAgICAvLyBUaGUgZmxhZyBpcyByZXNldCBhbnkgdGltZSB0aGUgc2VsZWN0aW9uIGlzIGVtcHR5IG9yIHRoZSBidXR0b24gaXNcbiAgICAvLyBubyBsb25nZXIgYWN0aXZlLlxuICAgIGNvbnN0IFt0ZXh0U2VsZWN0ZWREdXJpbmdBY3RpdmF0aW9uU3RhcnRUaW1lLCBzZXRUZXh0U2VsZWN0ZWREdXJpbmdBY3RpdmF0aW9uU3RhcnRUaW1lXSA9IHVzZVN0YXRlPERhdGUgfCBudWxsPihudWxsKTtcbiAgICBjb25zdCBwc2V1ZG9BY3RpdmUgPSAoYWN0aXZlICYmICh0ZXh0U2VsZWN0ZWREdXJpbmdBY3RpdmF0aW9uU3RhcnRUaW1lID09IG51bGwpKTtcblxuICAgIHVzZUdsb2JhbEhhbmRsZXIoZG9jdW1lbnQsIFwic2VsZWN0aW9uY2hhbmdlXCIsIF8gPT4ge1xuICAgICAgICBzZXRUZXh0U2VsZWN0ZWREdXJpbmdBY3RpdmF0aW9uU3RhcnRUaW1lKHByZXYgPT4gbm9kZVNlbGVjdGVkVGV4dExlbmd0aChnZXRFbGVtZW50KCkpID09IDAgPyBudWxsIDogcHJldiAhPSBudWxsID8gcHJldiA6IG5ldyBEYXRlKCkpO1xuICAgIH0pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGFjdGl2ZSA9PSAwKVxuICAgICAgICAgICAgc2V0VGV4dFNlbGVjdGVkRHVyaW5nQWN0aXZhdGlvblN0YXJ0VGltZShudWxsKTtcblxuICAgIH0sIFthY3RpdmUgPT0gMF0pO1xuXG4gICAgY29uc3Qgb25BY3RpdmVTdGFydCA9IHVzZVN0YWJsZUNhbGxiYWNrPE5vbk51bGxhYmxlPHR5cGVvZiBvbkNsaWNrU3luYz4+KChfKSA9PiB7XG4gICAgICAgIHNldEFjdGl2ZShhID0+ICsrYSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBvbkFjdGl2ZVN0b3AgPSB1c2VTdGFibGVDYWxsYmFjazxOb25OdWxsYWJsZTx0eXBlb2Ygb25DbGlja1N5bmM+PigoZSkgPT4ge1xuICAgICAgICBzZXRBY3RpdmUoYSA9PiBNYXRoLm1heCgwLCAtLWEpKTtcblxuICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGNvbnN0IHRpbWVEaWZmZXJlbmNlID0gKHRleHRTZWxlY3RlZER1cmluZ0FjdGl2YXRpb25TdGFydFRpbWUgPT0gbnVsbCA/IG51bGwgOiArY3VycmVudFRpbWUgLSArdGV4dFNlbGVjdGVkRHVyaW5nQWN0aXZhdGlvblN0YXJ0VGltZSk7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlcnNTZWxlY3RlZCA9IG5vZGVTZWxlY3RlZFRleHRMZW5ndGgoZ2V0RWxlbWVudCgpKVxuXG4gICAgICAgIC8vIElmIHdlJ3JlIHNlbGVjdGluZyB0ZXh0IChoZXVyaXN0aWNhbGx5IGRldGVybWluZWQgYnkgc2VsZWN0aW5nIGZvciBsb25nZXIgdGhhbiAxLzQgYSBzZWNvbmQsIG9yIG1vcmUgdGhhbiAyIGNoYXJhY3RlcnMpXG4gICAgICAgIC8vIHRoZW4gdGhpcyBpc24ndCBhIHByZXNzIGV2ZW50LlxuICAgICAgICAvLyBUT0RPOiBUaGlzIHNob3VsZCBtZWFzdXJlIGdseXBocyBpbnN0ZWFkIG9mIGNoYXJhY3RlcnMuXG4gICAgICAgIGlmIChjaGFyYWN0ZXJzU2VsZWN0ZWQgPiAxIHx8ICgodGltZURpZmZlcmVuY2UgPz8gMCkgPiAyNTAgJiYgY2hhcmFjdGVyc1NlbGVjdGVkID49IDEpKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ2V0QWN0aXZlKCkgPD0gMCkge1xuICAgICAgICAgICAgaGFuZGxlUHJlc3MoZSk7XG4gICAgICAgICAgICBmb3JjZVVwZGF0ZSgpOyAgLy8gVE9ETzogUmVtb3ZlIHdoZW4gaXNzdWUgcmVzb2x2ZWQgaHR0cHM6Ly9naXRodWIuY29tL3ByZWFjdGpzL3ByZWFjdC9pc3N1ZXMvMzczMVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBoYW5kbGVQcmVzcyA9IHVzZVN0YWJsZUNhbGxiYWNrPE5vbk51bGxhYmxlPHR5cGVvZiBvbkNsaWNrU3luYz4+KChlKSA9PiB7XG4gICAgICAgIGlmIChvbkNsaWNrU3luYykge1xuXG4gICAgICAgICAgICAvLyBOb3RlOiBUaGUgZWxlbWVudCBpcyBmb2N1c2VkIGhlcmUgYmVjYXVzZSBvZiBpT1MgU2FmYXJpLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEl0J3MgYWx3YXlzIGlPUyBTYWZhcmkuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gaU9TIFNhZmFyaSAodGVzdGVkIG9uIDEyKSBkb3ducmlnaHQgcmVmdXNlcyB0byBhbGxvdyBcbiAgICAgICAgICAgIC8vIGVsZW1lbnRzIHRvIGJlIG1hbnVhbGx5IGZvY3VzZWQgVU5MRVNTIGl0IGhhcHBlbnMgd2l0aGluXG4gICAgICAgICAgICAvLyBhbiBldmVudCBoYW5kbGVyIGxpa2UgdGhpcy4gIEl0IGFsc28gZG9lc24ndCBmb2N1c1xuICAgICAgICAgICAgLy8gYnV0dG9ucyBieSBkZWZhdWx0IHdoZW4gY2xpY2tlZCwgdGFwcGVkLCBldGMuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gSWYgaXQgYmVjb21lcyBwcm9ibGVtYXRpYyB0aGF0IGJ1dHRvbi1saWtlcyBleHBsaWNpdGx5IGJlY29tZVxuICAgICAgICAgICAgLy8gZm9jdXNlZCB3aGVuIHRoZXkgYXJlIHByZXNzZWQsIHRoZW4gYW4gYWx0ZXJuYXRpdmUgc29sdXRpb24gZm9yXG4gICAgICAgICAgICAvLyB0aGUgcXVlc3Rpb24gb2YgXCJob3cgZG8gbWVudSBidXR0b25zIGtlZXAgdGhlaXIgbWVudXMgb3BlblwiXG4gICAgICAgICAgICAvLyBhbmQgb3RoZXIgZm9jdXMtcmVsYXRlZCBub25zZW5zZSBuZWVkcyB0byBiZSBmaWd1cmVkIG91dC5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBGb3IgaU9TIFNhZmFyaS5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZ2V0RWxlbWVudCgpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgXCJmb2N1c1wiIGluIChlbGVtZW50IGFzIEV2ZW50VGFyZ2V0IGFzIEhUTUxFbGVtZW50KSlcbiAgICAgICAgICAgICAgICAoZWxlbWVudCBhcyBFdmVudFRhcmdldCBhcyBIVE1MRWxlbWVudCB8IG51bGwpPy5mb2N1cygpO1xuXG4gICAgICAgICAgICAvLyBXaGF0ZXZlciB0aGUgYnJvd3NlciB3YXMgZ29pbmcgdG8gZG8gd2l0aCB0aGlzIGV2ZW50LFxuICAgICAgICAgICAgLy8gZm9yZ2V0IGl0LiBXZSdyZSB0dXJuaW5nIGl0IGludG8gYSBcInByZXNzXCIgZXZlbnQuXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIC8vIEFsc28gc3RvcCBhbnlvbmUgZWxzZSBmcm9tIGxpc3RlbmluZyB0byB0aGlzIGV2ZW50LFxuICAgICAgICAgICAgLy8gc2luY2Ugd2UncmUgZXhwbGljaXRseSBoYW5kbGluZyBpdC5cbiAgICAgICAgICAgIC8vIChOb3RhYmx5LCB0aGlzIGFsbG93cyBsYWJlbHMgdG8gd3JhcCBpbnB1dHMsIHdpdGggdGhlbVxuICAgICAgICAgICAgLy8gYm90aCBoYXZpbmcgcHJlc3MgZXZlbnQgaGFuZGxlcnMsIHdpdGhvdXQgZG91YmxlLWZpcmluZylcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgIC8vIEhhcHRpYyBmZWVkYmFjayBmb3IgdGhpcyBwcmVzcyBldmVudFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBkb2Vzbid0IHRocm93LFxuICAgICAgICAgICAgICAgIC8vIGJ1dCB3ZSBzaG91bGQgZ3VhcmQgYWdhaW5zdCB1c2VyIGltcGxlbWVudGF0aW9ucyB0aGF0IGNvdWxkLlxuICAgICAgICAgICAgICAgIHB1bHNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAvLyBBY3R1YWxseSBjYWxsIG91ciBoYW5kbGVyLlxuICAgICAgICAgICAgICAgIG9uQ2xpY2tTeW5jKGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IG9uTW91c2VEb3duID0gZXhjbHVkZXMoXCJjbGlja1wiLCBleGNsdWRlKSA/IHVuZGVmaW5lZCA6IChlOiBoLkpTWC5UYXJnZXRlZE1vdXNlRXZlbnQ8RT4pID0+IHtcbiAgICAgICAgLy8gU3RvcCBkb3VibGUgY2xpY2tzIGZyb20gc2VsZWN0aW5nIHRleHQgaW4gYW4gY29tcG9uZW50IHRoYXQncyAqc3VwcG9zZWQqIHRvIGJlIGFjdGluZyBsaWtlIGEgYnV0dG9uLFxuICAgICAgICAvLyBidXQgYWxzbyBkb24ndCBwcmV2ZW50IHRoZSB1c2VyIGZyb20gc2VsZWN0aW5nIHRoYXQgdGV4dCBtYW51YWxseSBpZiB0aGV5IHJlYWxseSB3YW50IHRvXG4gICAgICAgIC8vICh3aGljaCB1c2VyLXNlbGVjdDogbm9uZSB3b3VsZCBkbywgYnV0IGNhbmNlbGxpbmcgYSBkb3VibGUgY2xpY2sgb24gbW91c2VEb3duIGRvZXNuJ3QpXG4gICAgICAgIGlmIChlLmRldGFpbCA+IDEpXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cblxuICAgICAgICBpZiAoZS5idXR0b24gPT09IDApXG4gICAgICAgICAgICBvbkFjdGl2ZVN0YXJ0KGUpO1xuICAgIH1cbiAgICBjb25zdCBvbk1vdXNlVXAgPSBleGNsdWRlcyhcImNsaWNrXCIsIGV4Y2x1ZGUpID8gdW5kZWZpbmVkIDogKGU6IGguSlNYLlRhcmdldGVkTW91c2VFdmVudDxFPikgPT4ge1xuICAgICAgICBpZiAoZS5idXR0b24gPT09IDAgJiYgYWN0aXZlID4gMClcbiAgICAgICAgICAgIG9uQWN0aXZlU3RvcChlKTtcbiAgICB9O1xuXG5cbiAgICBjb25zdCBvbk1vdXNlTGVhdmUgPSB1c2VTdGFibGVDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGlmICghZXhjbHVkZXMoXCJjbGlja1wiLCBleGNsdWRlKSlcbiAgICAgICAgICAgIHNldEFjdGl2ZSgwKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IG9uS2V5RG93biA9IGV4Y2x1ZGVzKFwic3BhY2VcIiwgZXhjbHVkZSkgJiYgZXhjbHVkZXMoXCJlbnRlclwiLCBleGNsdWRlKSA/IHVuZGVmaW5lZCA6IChlOiBoLkpTWC5UYXJnZXRlZEtleWJvYXJkRXZlbnQ8RT4pID0+IHtcbiAgICAgICAgaWYgKGUua2V5ID09IFwiIFwiICYmIG9uQ2xpY2tTeW5jICYmICFleGNsdWRlcyhcInNwYWNlXCIsIGV4Y2x1ZGUpKSB7XG4gICAgICAgICAgICAvLyBXZSBkb24ndCBhY3R1YWxseSBhY3RpdmF0ZSBpdCBvbiBhIHNwYWNlIGtleWRvd25cbiAgICAgICAgICAgIC8vIGJ1dCB3ZSBkbyBwcmV2ZW50RGVmYXVsdCB0byBzdG9wIHRoZSBwYWdlIGZyb20gc2Nyb2xsaW5nLlxuICAgICAgICAgICAgb25BY3RpdmVTdGFydChlKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlLmtleSA9PSBcIkVudGVyXCIgJiYgIWV4Y2x1ZGVzKFwiZW50ZXJcIiwgZXhjbHVkZSkpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIG9uQWN0aXZlU3RhcnQoZSk7XG4gICAgICAgICAgICBvbkFjdGl2ZVN0b3AoZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBvbktleVVwID0gZXhjbHVkZXMoXCJzcGFjZVwiLCBleGNsdWRlKSA/IHVuZGVmaW5lZCA6IChlOiBoLkpTWC5UYXJnZXRlZEtleWJvYXJkRXZlbnQ8RT4pID0+IHtcbiAgICAgICAgaWYgKGUua2V5ID09IFwiIFwiICYmICFleGNsdWRlcyhcInNwYWNlXCIsIGV4Y2x1ZGUpKVxuICAgICAgICAgICAgb25BY3RpdmVTdG9wKGUpO1xuICAgIH1cblxuICAgIGNvbnN0IG9uQ2xpY2sgPSAoZTogaC5KU1guVGFyZ2V0ZWRNb3VzZUV2ZW50PEU+KSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKGUuZGV0YWlsID4gMSkge1xuICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gdXNlUHJlc3NQcm9wcyhwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4pIHtcbiAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzPEU+KHByb3BzLCB1c2VIYXNGb2N1c1Byb3BzKCh7XG4gICAgICAgICAgICBvbktleURvd24sXG4gICAgICAgICAgICBvbktleVVwLFxuICAgICAgICAgICAgb25Nb3VzZURvd24sXG4gICAgICAgICAgICBvbk1vdXNlVXAsXG4gICAgICAgICAgICBvbk1vdXNlTGVhdmUsXG4gICAgICAgICAgICBvbkNsaWNrLFxuICAgICAgICAgICAgc3R5bGU6ICh0ZXh0U2VsZWN0ZWREdXJpbmdBY3RpdmF0aW9uU3RhcnRUaW1lICE9IG51bGwpID8geyBjdXJzb3I6IFwidGV4dFwiIH0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAuLi57IFwiZGF0YS1wc2V1ZG8tYWN0aXZlXCI6IHBzZXVkb0FjdGl2ZSA/IFwidHJ1ZVwiIDogdW5kZWZpbmVkIH0gYXMge31cbiAgICAgICAgfSkpKTtcbiAgICB9XG59XG5cblxuXG5cbi8qKlxuICogc2VsZWN0aW9uLmNvbnRhaW5zTm9kZSBkb2Vzbid0IGFjY291bnQgZm9yIHNlbGVjdGlvbi5pc0NvbGxhcHNlZCxcbiAqIHNvIGhlcmUncyBhIHdvcmthcm91bmQgZm9yIHRoYXQuXG4gKiBcbiAqIFdlIGFsc28gb25seSBsb29rIGZvciB0aGUgc2VsZWN0aW9uIGVuZCB0byBvbmx5IGNhdGNoIHRoZSBcbiAqIGVzc2Vuc2Ugb2YgYSBub24tZXhpc3RhbnQgXCJzZWxlY3Rpb25zdG9wXCIgZXZlbnQuXG4gKiBcbiAqIEBwYXJhbSBlbGVtZW50IFxuICogQHJldHVybnMgXG4gKi9cbmZ1bmN0aW9uIG5vZGVTZWxlY3RlZFRleHRMZW5ndGgoZWxlbWVudDogRXZlbnRUYXJnZXQgfCBudWxsIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudCBpbnN0YW5jZW9mIE5vZGUpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgKHNlbGVjdGlvbj8ucmFuZ2VDb3VudCA/PyAwKTsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHNlbGVjdGlvbiEuZ2V0UmFuZ2VBdChpKSE7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5jb250YWlucyhyYW5nZS5lbmRDb250YWluZXIpICYmICFzZWxlY3Rpb24/LmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbiEudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbn1cblxuXG5sZXQgcHVsc2UgPSAoKFwidmlicmF0ZVwiIGluIG5hdmlnYXRvcikgJiYgKG5hdmlnYXRvci52aWJyYXRlIGluc3RhbmNlb2YgRnVuY3Rpb24pKSA/ICgoKSA9PiBuYXZpZ2F0b3IudmlicmF0ZSgxMCkpIDogKCgpID0+IHsgfSk7XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBlbmFibGUvZGlzYWJsZSBidXR0b24gdmlicmF0aW9uIHB1bHNlcyBvbiBhbiBhcHAtd2lkZSBzY2FsZS5cbiAqIFxuICogXG4gKiBAcGFyYW0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcnVuIHdoZW4gYSBidXR0b24gaXMgdGFwcGVkLlxuICogKERlZmF1bHQgaXMgYCgpID0+IG5hdmlnYXRvci52aWJyYXRlKDEwKWAgaW4gYnJvd3NlcnMgdGhhdCBzdXBwb3J0IGl0LCBhIG5vb3Agb3RoZXJ3aXNlKVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0UHJlc3NWaWJyYXRlKGZ1bmM6ICgpID0+IHZvaWQpIHtcbiAgICBwdWxzZSA9IGZ1bmM7XG59XG5cblxuXG5mdW5jdGlvbiBleGNsdWRlcyh0YXJnZXQ6IFwiY2xpY2tcIiB8IFwic3BhY2VcIiB8IFwiZW50ZXJcIiwgZXhjbHVkZTogdW5kZWZpbmVkIHwgeyBjbGljaz86IFwiZXhjbHVkZVwiIHwgdW5kZWZpbmVkLCBzcGFjZT86IFwiZXhjbHVkZVwiIHwgdW5kZWZpbmVkLCBlbnRlcj86IFwiZXhjbHVkZVwiIHwgdW5kZWZpbmVkIH0pIHtcbiAgICBpZiAoZXhjbHVkZT8uW3RhcmdldF0pXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuIiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuaW1wb3J0IHsgRWxlbWVudFNpemUsIHVzZUVsZW1lbnRTaXplIH0gZnJvbSBcIi4vdXNlLWVsZW1lbnQtc2l6ZVwiO1xuaW1wb3J0IHsgcmV0dXJuTnVsbCwgdXNlRW5zdXJlU3RhYmlsaXR5LCB1c2VQYXNzaXZlU3RhdGUgfSBmcm9tIFwiLi91c2UtcGFzc2l2ZS1zdGF0ZVwiO1xuaW1wb3J0IHsgdXNlUmVmRWxlbWVudCB9IGZyb20gXCIuL3VzZS1yZWYtZWxlbWVudFwiO1xuXG4vL2V4cG9ydCB0eXBlIEJsb2NrRmxvd0RpcmVjdGlvbiA9IFwiZG93bndhcmRzXCIgfCBcImxlZnR3YXJkc1wiIHwgXCJyaWdodHdhcmRzXCI7XG5leHBvcnQgdHlwZSBQaHlzaWNhbERpcmVjdGlvbiA9IFwibHRyXCIgfCBcInJ0bFwiIHwgXCJ0dGJcIiB8IFwiYnR0XCI7XG5leHBvcnQgdHlwZSBQaHlzaWNhbE9yaWVudGF0aW9uID0gXCJob3Jpem9udGFsXCIgfCBcInZlcnRpY2FsXCI7XG5leHBvcnQgdHlwZSBQaHlzaWNhbFNpemUgPSBcIndpZHRoXCIgfCBcImhlaWdodFwiO1xuXG5leHBvcnQgdHlwZSBMb2dpY2FsT3JpZW50YXRpb24gPSBcImlubGluZVwiIHwgXCJibG9ja1wiO1xuXG4vL2V4cG9ydCB0eXBlIExpbmVPcmllbnRhdGlvbiA9IFwidXByaWdodFwiIHwgXCJsZWZ0cmlnaHRcIiB8IFwiZG93bnJpZ2h0XCIgfCBcInJpZ2h0cmlnaHRcIjtcblxudHlwZSBXcml0aW5nTW9kZSA9IFwiaG9yaXpvbnRhbC10YlwiIHwgXCJ2ZXJ0aWNhbC1sclwiIHwgXCJzaWRld2F5cy1ybFwiIHwgXCJ2ZXJ0aWNhbC1ybFwiIHwgXCJzaWRld2F5cy1sclwiO1xudHlwZSBEaXJlY3Rpb24gPSBcImx0clwiIHwgXCJydGxcIjtcbnR5cGUgVGV4dE9yaWVudGF0aW9uID0gXCJtaXhlZFwiIHwgXCJ1cHJpZ2h0XCIgfCBcInNpZGV3YXlzXCI7XG5cbmZ1bmN0aW9uIGNhcGl0YWxpemU8VCBleHRlbmRzIHN0cmluZz4oc3RyOiBUKTogQ2FwaXRhbGl6ZTxUPiB7XG4gICAgcmV0dXJuIChzdHJbMF0udG9VcHBlckNhc2UoKSArIHN0ci5zdWJzdHJpbmcoMSkpIGFzIENhcGl0YWxpemU8VD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlTG9naWNhbERpcmVjdGlvblBhcmFtZXRlcnMge1xuICAgIG9uTG9naWNhbERpcmVjdGlvbkNoYW5nZT8oaW5mbzogTG9naWNhbERpcmVjdGlvbkluZm8gfCBudWxsKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb2dpY2FsRWxlbWVudFNpemUge1xuICAgIGNsaWVudElubGluZVNpemU6IG51bWJlcjtcbiAgICBzY3JvbGxJbmxpbmVTaXplOiBudW1iZXI7XG4gICAgb2Zmc2V0SW5saW5lU2l6ZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIGNsaWVudEJsb2NrU2l6ZTogbnVtYmVyO1xuICAgIHNjcm9sbEJsb2NrU2l6ZTogbnVtYmVyO1xuICAgIG9mZnNldEJsb2NrU2l6ZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIGNsaWVudElubGluZUluc2V0OiBudW1iZXI7XG4gICAgc2Nyb2xsSW5saW5lSW5zZXQ6IG51bWJlcjtcbiAgICBvZmZzZXRJbmxpbmVJbnNldDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIGNsaWVudEJsb2NrSW5zZXQ6IG51bWJlcjtcbiAgICBzY3JvbGxCbG9ja0luc2V0OiBudW1iZXI7XG4gICAgb2Zmc2V0QmxvY2tJbnNldDogbnVtYmVyIHwgdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEluc3BlY3RzIHRoZSBlbGVtZW50J3Mgc3R5bGUgYW5kIGRldGVybWluZXMgdGhlIGxvZ2ljYWwgZGlyZWN0aW9uIHRoYXQgdGV4dCBmbG93cy5cbiAqIFxuICogQ2VydGFpbiBDU1MgcHJvcGVydGllcywgbGlrZSBgYmxvY2stc2l6ZWAsIHJlc3BlY3QgdGhlIGN1cnJlbnQgd3JpdGluZyBtb2RlIGFuZCB0ZXh0IGRpcmVjdGlvbi5cbiAqIEJ1dCBgdHJhbnNmb3JtYCwgYGNsaXBgLCBldGMuIGRvbid0LlxuICogXG4gKiBUaGlzIGlzIHByb3ZpZGVkIHNvIHRoYXQgQ1NTIHByb3BlcnRpZXMgY2FuIGNvbnNpc3RlbnRseSB1c2UgdGhvc2UgbG9naWNhbCBwcm9wZXJ0aWVzLlxuICogXG4gKiBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy13cml0aW5nLW1vZGVzLyNsb2dpY2FsLXRvLXBoeXNpY2FsXG4gKiBcbiAqIEByZXR1cm5zIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zOlxuICogKiBgZ2V0TG9naWNhbERpcmVjdGlvbmA6IHJldHJpZXZlcyBhIGBMb2dpY2FsRGlyZWN0aW9uSW5mb2AgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBlbGVtZW50LiAoRnVuY3Rpb24gaXMgY29uc3RhbnQgYmV0d2VlbiByZW5kZXJzKVxuICogKiBgY29udmVydEVsZW1lbnRTaXplYDogV2hlbiB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHVzZUVsZW1lbnRTaXplYCwgYWxsb3dzIHlvdSB0byByZXRyaWV2ZSB0aGUgbG9naWNhbCBzaXplIG9mIGFuIGVsZW1lbnQgaW5zdGVhZCBvZiB0aGUgcGh5c2ljYWwgc2l6ZS4gXG4gKiAqIGBjb252ZXJ0VG9Mb2dpY2FsT3JpZW50YXRpb25gOiBCYXNlZCBvbiB0aGUgY3VycmVudCBkaXJlY3Rpb24sIGNvbnZlcnRzIFwiaG9yaXpvbnRhbFwiIG9yIFwidmVydGljYWxcIiB0byBcImlubGluZVwiIG9yIFwiYmxvY2tcIi5cbiAqICogYGNvbnZlcnRUb1BoeXNpY2FsT3JpZW50YXRpb25gOiAgQmFzZWQgb24gdGhlIGN1cnJlbnQgZGlyZWN0aW9uLCBjb252ZXJ0cyBcImlubGluZVwiIG9yIFwiYmxvY2tcIiB0byBcImhvcml6b250YWxcIiBvciBcInZlcnRpY2FsXCIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VMb2dpY2FsRGlyZWN0aW9uPFQgZXh0ZW5kcyBFbGVtZW50Pih7IG9uTG9naWNhbERpcmVjdGlvbkNoYW5nZSB9OiBVc2VMb2dpY2FsRGlyZWN0aW9uUGFyYW1ldGVycyk6IFVzZUxvZ2ljYWxEaXJlY3Rpb25SZXR1cm5UeXBlPFQ+IHtcblxuICAgIHVzZUVuc3VyZVN0YWJpbGl0eShcInVzZUxvZ2ljYWxEaXJlY3Rpb25cIiwgb25Mb2dpY2FsRGlyZWN0aW9uQ2hhbmdlKTtcblxuICAgIGNvbnN0IFtnZXRDb21wdXRlZFN0eWxlcywgc2V0Q29tcHV0ZWRTdHlsZXNdID0gdXNlUGFzc2l2ZVN0YXRlPENTU1N0eWxlRGVjbGFyYXRpb24gfCBudWxsPihudWxsLCByZXR1cm5OdWxsKTtcblxuXG4gICAgY29uc3QgeyBnZXRFbGVtZW50LCB1c2VSZWZFbGVtZW50UHJvcHMgfSA9IHVzZVJlZkVsZW1lbnQ8VD4oe1xuICAgICAgICBvbkVsZW1lbnRDaGFuZ2U6IHVzZUNhbGxiYWNrKChlbGVtZW50OiBUIHwgbnVsbCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBzZXRDb21wdXRlZFN0eWxlcyh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIFtdKVxuICAgIH0pO1xuXG4gICAgLy8gVE9ETzogVGhlcmUncyBubyB3YXkgdG8gcmVmcmVzaCB3aGljaCB3cml0aW5nIG1vZGUgd2UgaGF2ZSBvbmNlIG1vdW50ZWQuXG4gICAgLy8gICBBLiBUaGVyZSdzIG5vIHdheSB0byB3YXRjaCBmb3IgQ1NTIHN0eWxlIGNoYW5nZXNcbiAgICAvLyAgIEIuIENhbGxpbmcgZ2V0Q29tcHV0ZWRTdHlsZSBhZnRlciBldmVyeSByZW5kZXIgZm9yIGV2ZXJ5IGVsZW1lbnQgZ2V0cyBleHBlbnNpdmUgZmFzdCBhbmRcbiAgICAvLyAgIEMuIElzIG5vdCBuZWNlc3NhcnkgZm9yIG1vc3QgdXNlIGNhc2VzIHRoYXQgd2lsbCBuZXZlciBzd2l0Y2ggd3JpdGluZy1tb2RlIHdpdGhpbiBhIHNpbmdsZSBjb21wb25lbnRcbiAgICAvLyAgICAgIChUaG9zZSB0aGF0IGRvIHdpbGwgbmVlZCB0byBtb3VudCBhbmQgdW5tb3VudCB0aGUgY29tcG9uZW50IHRoYXQgdXNlcyBpdClcbiAgICAvL1xuICAgIC8vIEFzIGEgc29sdXRpb24sIGhlcmUncyBhIGNoZWFwIHdvcmthcm91bmQgdGhhdCBjaGVja3Mgd2hlbiB0aGUgZWxlbWVudCdzIHNpemUgaGFzIGNoYW5nZWQsXG4gICAgLy8gYW5kIGlmIHNvLCB0ZXN0cyBpZiB0aGUgd3JpdGluZyBtb2RlIGhhcyBjaGFuZ2VkIHRvby5cbiAgICAvL1xuICAgIC8vIFRoaXMgd2lsbCB3b3JrIGZvciBhdCBsZWFzdCBzb21lIG51bWJlciBvZiBjYXNlcywgYnV0IGEgYmV0dGVyIHNvbHV0aW9uIGlzIHN0aWxsIG5lZWRlZC5cbiAgICBjb25zdCB7IHVzZUVsZW1lbnRTaXplUHJvcHMgfSA9IHVzZUVsZW1lbnRTaXplPFQ+KHsgb25TaXplQ2hhbmdlOiB1c2VDYWxsYmFjayhfID0+IG9uTG9naWNhbERpcmVjdGlvbkNoYW5nZT8uKGdldExvZ2ljYWxEaXJlY3Rpb25JbmZvKCkpLCBbXSkgfSlcblxuICAgIGNvbnN0IGdldExvZ2ljYWxEaXJlY3Rpb25JbmZvID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBjb25zdCBjb21wdXRlZFN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGVzKCk7XG4gICAgICAgIGlmIChjb21wdXRlZFN0eWxlcykge1xuICAgICAgICAgICAgY29uc3QgdyA9IGNvbXB1dGVkU3R5bGVzLndyaXRpbmdNb2RlIGFzIFdyaXRpbmdNb2RlO1xuICAgICAgICAgICAgbGV0IGQgPSBjb21wdXRlZFN0eWxlcy5kaXJlY3Rpb24gYXMgRGlyZWN0aW9uO1xuICAgICAgICAgICAgY29uc3QgdCA9IGNvbXB1dGVkU3R5bGVzLnRleHRPcmllbnRhdGlvbiBhcyBUZXh0T3JpZW50YXRpb247XG5cbiAgICAgICAgICAgIGlmICh0ID09IFwidXByaWdodFwiKVxuICAgICAgICAgICAgICAgIGQgPSBcImx0clwiO1xuXG4gICAgICAgICAgICByZXR1cm4gKHsgLi4uV3JpdGluZ01vZGVzW3cgfHwgXCJob3Jpem9udGFsLXRiXCJdW2QgfHwgXCJsdHJcIl0gfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LCBbXSlcblxuICAgIC8vY29uc3QgW2dldExvZ2ljYWxEaXJlY3Rpb25JbmZvLCBzZXRMb2dpY2FsRGlyZWN0aW9uSW5mb10gPSB1c2VQYXNzaXZlU3RhdGU8TG9naWNhbERpcmVjdGlvbkluZm8+KG9uTG9naWNhbERpcmVjdGlvbkNoYW5nZSk7XG5cbiAgICBjb25zdCBjb252ZXJ0VG9Mb2dpY2FsT3JpZW50YXRpb24gPSB1c2VDYWxsYmFjaygoZWxlbWVudE9yaWVudGF0aW9uOiBQaHlzaWNhbE9yaWVudGF0aW9uLCBkaXJlY3Rpb24/OiBMb2dpY2FsRGlyZWN0aW9uSW5mbyB8IG51bGwgfCB1bmRlZmluZWQpID0+IHtcbiAgICAgICAgZGlyZWN0aW9uID8/PSBnZXRMb2dpY2FsRGlyZWN0aW9uSW5mbygpO1xuICAgICAgICBpZiAoZGlyZWN0aW9uPy5pbmxpbmVPcmllbnRhdGlvbiA9PT0gZWxlbWVudE9yaWVudGF0aW9uKVxuICAgICAgICAgICAgcmV0dXJuIFwiaW5saW5lXCI7XG4gICAgICAgIHJldHVybiBcImJsb2NrXCI7XG4gICAgfSwgW10pO1xuXG4gICAgY29uc3QgY29udmVydFRvUGh5c2ljYWxTaWRlID0gdXNlQ2FsbGJhY2soKHNpZGU6IFwiaW5saW5lLXN0YXJ0XCIgfCBcImlubGluZS1lbmRcIiB8IFwiYmxvY2stc3RhcnRcIiB8IFwiYmxvY2stZW5kXCIsIGRpcmVjdGlvbj86IExvZ2ljYWxEaXJlY3Rpb25JbmZvIHwgbnVsbCB8IHVuZGVmaW5lZCk6IFwidG9wXCIgfCBcImJvdHRvbVwiIHwgXCJsZWZ0XCIgfCBcInJpZ2h0XCIgPT4ge1xuICAgICAgICBkaXJlY3Rpb24gPz89IGdldExvZ2ljYWxEaXJlY3Rpb25JbmZvKCk7XG5cbiAgICAgICAgc3dpdGNoIChzaWRlKSB7XG4gICAgICAgICAgICBjYXNlIFwiYmxvY2stc3RhcnRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gTVsoZGlyZWN0aW9uPy5ibG9ja0RpcmVjdGlvbiA/PyBcInR0YlwiKVswXSBhcyBcInRcIiB8IFwiYlwiIHwgXCJsXCIgfCBcInJcIl07XG4gICAgICAgICAgICBjYXNlIFwiYmxvY2stZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1bKGRpcmVjdGlvbj8uYmxvY2tEaXJlY3Rpb24gPz8gXCJ0dGJcIilbMl0gYXMgXCJ0XCIgfCBcImJcIiB8IFwibFwiIHwgXCJyXCJdO1xuXG4gICAgICAgICAgICBjYXNlIFwiaW5saW5lLXN0YXJ0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1bKGRpcmVjdGlvbj8uaW5saW5lRGlyZWN0aW9uID8/IFwibHRyXCIpWzBdIGFzIFwidFwiIHwgXCJiXCIgfCBcImxcIiB8IFwiclwiXTtcbiAgICAgICAgICAgIGNhc2UgXCJpbmxpbmUtZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1bKGRpcmVjdGlvbj8uaW5saW5lRGlyZWN0aW9uID8/IFwibHRyXCIpWzJdIGFzIFwidFwiIHwgXCJiXCIgfCBcImxcIiB8IFwiclwiXTtcbiAgICAgICAgfVxuICAgIH0sIFtdKVxuXG4gICAgY29uc3QgY29udmVydFRvTG9naWNhbFNpZGUgPSB1c2VDYWxsYmFjaygoc2lkZTogXCJ0b3BcIiB8IFwiYm90dG9tXCIgfCBcImxlZnRcIiB8IFwicmlnaHRcIiwgZGlyZWN0aW9uPzogTG9naWNhbERpcmVjdGlvbkluZm8gfCBudWxsIHwgdW5kZWZpbmVkKTogXCJpbmxpbmUtc3RhcnRcIiB8IFwiaW5saW5lLWVuZFwiIHwgXCJibG9jay1zdGFydFwiIHwgXCJibG9jay1lbmRcIiA9PiB7XG4gICAgICAgIGRpcmVjdGlvbiA/Pz0gZ2V0TG9naWNhbERpcmVjdGlvbkluZm8oKTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbj8uaW5saW5lT3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xuICAgICAgICAgICAgc3dpdGNoIChzaWRlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInRvcFwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlyZWN0aW9uLmlubGluZURpcmVjdGlvbiA9PT0gXCJ0dGJcIiA/IFwiaW5saW5lLXN0YXJ0XCIgOiBcImlubGluZS1lbmRcIjtcbiAgICAgICAgICAgICAgICBjYXNlIFwiYm90dG9tXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkaXJlY3Rpb24uaW5saW5lRGlyZWN0aW9uID09PSBcImJ0dFwiID8gXCJpbmxpbmUtc3RhcnRcIiA6IFwiaW5saW5lLWVuZFwiO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcImxlZnRcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGlvbi5ibG9ja0RpcmVjdGlvbiA9PT0gXCJsdHJcIiA/IFwiYmxvY2stc3RhcnRcIiA6IFwiYmxvY2stZW5kXCI7XG4gICAgICAgICAgICAgICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkaXJlY3Rpb24uYmxvY2tEaXJlY3Rpb24gPT09IFwicnRsXCIgPyBcImJsb2NrLXN0YXJ0XCIgOiBcImJsb2NrLWVuZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRpcmVjdGlvbj8uaW5saW5lT3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHNpZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwidG9wXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkaXJlY3Rpb24uYmxvY2tEaXJlY3Rpb24gPT09IFwidHRiXCIgPyBcImJsb2NrLXN0YXJ0XCIgOiBcImJsb2NrLWVuZFwiO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJib3R0b21cIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGlvbi5ibG9ja0RpcmVjdGlvbiA9PT0gXCJidHRcIiA/IFwiYmxvY2stc3RhcnRcIiA6IFwiYmxvY2stZW5kXCI7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwibGVmdFwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlyZWN0aW9uLmlubGluZURpcmVjdGlvbiA9PT0gXCJsdHJcIiA/IFwiaW5saW5lLXN0YXJ0XCIgOiBcImlubGluZS1lbmRcIjtcbiAgICAgICAgICAgICAgICBjYXNlIFwicmlnaHRcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGlvbi5pbmxpbmVEaXJlY3Rpb24gPT09IFwicnRsXCIgPyBcImlubGluZS1zdGFydFwiIDogXCJpbmxpbmUtZW5kXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1kZWJ1Z2dlciAqL1xuICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgY29uc29sZS5hc3NlcnQoZmFsc2UpO1xuICAgICAgICByZXR1cm4gXCJpbmxpbmUtc3RhcnRcIjtcblxuICAgIH0sIFtdKVxuXG4gICAgY29uc3QgY29udmVydFRvUGh5c2ljYWxPcmllbnRhdGlvbiA9IHVzZUNhbGxiYWNrKChlbGVtZW50T3JpZW50YXRpb246IExvZ2ljYWxPcmllbnRhdGlvbiwgZGlyZWN0aW9uPzogTG9naWNhbERpcmVjdGlvbkluZm8gfCBudWxsIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgIGRpcmVjdGlvbiA/Pz0gZ2V0TG9naWNhbERpcmVjdGlvbkluZm8oKTtcbiAgICAgICAgaWYgKGVsZW1lbnRPcmllbnRhdGlvbiA9PSBcImlubGluZVwiKSB7XG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9uPy5pbmxpbmVPcmllbnRhdGlvbiA9PSBcImhvcml6b250YWxcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJob3Jpem9udGFsXCI7XG4gICAgICAgICAgICByZXR1cm4gXCJ2ZXJ0aWNhbFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbj8uYmxvY2tPcmllbnRhdGlvbiA9PSBcInZlcnRpY2FsXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidmVydGljYWxcIjtcblxuICAgICAgICAgICAgcmV0dXJuIFwiaG9yaXpvbnRhbFwiO1xuICAgICAgICB9XG4gICAgfSwgW10pO1xuXG4gICAgY29uc3QgY29udmVydEVsZW1lbnRTaXplID0gdXNlQ2FsbGJhY2soKGVsZW1lbnRTaXplOiBFbGVtZW50U2l6ZSwgZGlyZWN0aW9uPzogTG9naWNhbERpcmVjdGlvbkluZm8gfCBudWxsIHwgdW5kZWZpbmVkKTogTG9naWNhbEVsZW1lbnRTaXplIHwgbnVsbCA9PiB7XG4gICAgICAgIGRpcmVjdGlvbiA/Pz0gZ2V0TG9naWNhbERpcmVjdGlvbkluZm8oKTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgY29uc3QgeyBpbmxpbmVTaXplLCBibG9ja1NpemUsIGlubGluZURpcmVjdGlvbiwgYmxvY2tEaXJlY3Rpb24gfSA9IGRpcmVjdGlvbjtcblxuICAgICAgICAgICAgLy8gU2l6ZSBpcyByZWxhdGl2ZWx5IHNpbXBsZVxuICAgICAgICAgICAgY29uc3QgY2xpZW50SW5saW5lU2l6ZSA9IGVsZW1lbnRTaXplW2BjbGllbnQke2NhcGl0YWxpemUoaW5saW5lU2l6ZSl9YF07XG4gICAgICAgICAgICBjb25zdCBjbGllbnRCbG9ja1NpemUgPSBlbGVtZW50U2l6ZVtgY2xpZW50JHtjYXBpdGFsaXplKGJsb2NrU2l6ZSl9YF07XG5cbiAgICAgICAgICAgIGNvbnN0IG9mZnNldElubGluZVNpemUgPSBlbGVtZW50U2l6ZVtgb2Zmc2V0JHtjYXBpdGFsaXplKGlubGluZVNpemUpfWBdO1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0QmxvY2tTaXplID0gZWxlbWVudFNpemVbYG9mZnNldCR7Y2FwaXRhbGl6ZShibG9ja1NpemUpfWBdO1xuXG4gICAgICAgICAgICBjb25zdCBzY3JvbGxJbmxpbmVTaXplID0gZWxlbWVudFNpemVbYHNjcm9sbCR7Y2FwaXRhbGl6ZShpbmxpbmVTaXplKX1gXTtcbiAgICAgICAgICAgIGNvbnN0IHNjcm9sbEJsb2NrU2l6ZSA9IGVsZW1lbnRTaXplW2BzY3JvbGwke2NhcGl0YWxpemUoYmxvY2tTaXplKX1gXTtcblxuXG5cblxuICAgICAgICAgICAgY29uc3QgZjEgPSBnZXRQaHlzaWNhbExlZnRUb3AoaW5saW5lRGlyZWN0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IGYyID0gZ2V0UGh5c2ljYWxSaWdodEJvdHRvbShpbmxpbmVEaXJlY3Rpb24pO1xuXG4gICAgICAgICAgICBjb25zdCBmMyA9IGdldFBoeXNpY2FsTGVmdFRvcChibG9ja0RpcmVjdGlvbik7XG4gICAgICAgICAgICBjb25zdCBmNCA9IGdldFBoeXNpY2FsUmlnaHRCb3R0b20oYmxvY2tEaXJlY3Rpb24pO1xuXG5cbiAgICAgICAgICAgY29uc3QgY2xpZW50SW5saW5lSW5zZXQgPSBlbGVtZW50U2l6ZVtgY2xpZW50JHtjYXBpdGFsaXplKGYxKX1gXSArICghZjIgPyAwIDogZWxlbWVudFNpemVbYGNsaWVudCR7Y2FwaXRhbGl6ZShmMil9YF0pO1xuICAgICAgICAgICBjb25zdCBzY3JvbGxJbmxpbmVJbnNldCA9IGVsZW1lbnRTaXplW2BzY3JvbGwke2NhcGl0YWxpemUoZjEpfWBdICsgKCFmMiA/IDAgOiBlbGVtZW50U2l6ZVtgc2Nyb2xsJHtjYXBpdGFsaXplKGYyKX1gXSk7XG4gICAgICAgICAgIGNvbnN0IG9mZnNldElubGluZUluc2V0ID0gZWxlbWVudFNpemVbYG9mZnNldCR7Y2FwaXRhbGl6ZShmMSl9YF0gPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogKGVsZW1lbnRTaXplW2BvZmZzZXQke2NhcGl0YWxpemUoZjEpfWBdISArICghZjIgPyAwIDogZWxlbWVudFNpemVbYG9mZnNldCR7Y2FwaXRhbGl6ZShmMil9YF0hKSk7XG5cblxuICAgICAgICAgICAgY29uc3QgY2xpZW50QmxvY2tJbnNldCA9IGVsZW1lbnRTaXplW2BjbGllbnQke2NhcGl0YWxpemUoZjMpfWBdICsgKCFmNCA/IDAgOiBlbGVtZW50U2l6ZVtgY2xpZW50JHtjYXBpdGFsaXplKGY0KX1gXSk7XG4gICAgICAgICAgICBjb25zdCBzY3JvbGxCbG9ja0luc2V0ID0gZWxlbWVudFNpemVbYHNjcm9sbCR7Y2FwaXRhbGl6ZShmMyl9YF0gKyAoIWY0ID8gMCA6IGVsZW1lbnRTaXplW2BzY3JvbGwke2NhcGl0YWxpemUoZjQpfWBdKTtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldEJsb2NrSW5zZXQgPSBlbGVtZW50U2l6ZVtgb2Zmc2V0JHtjYXBpdGFsaXplKGYzKX1gXSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAoZWxlbWVudFNpemVbYG9mZnNldCR7Y2FwaXRhbGl6ZShmMyl9YF0hICsgKCFmNCA/IDAgOiBlbGVtZW50U2l6ZVtgb2Zmc2V0JHtjYXBpdGFsaXplKGY0KX1gXSEpKTtcblxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNsaWVudElubGluZVNpemUsXG4gICAgICAgICAgICAgICAgc2Nyb2xsSW5saW5lU2l6ZSxcbiAgICAgICAgICAgICAgICBvZmZzZXRJbmxpbmVTaXplLFxuICAgICAgICAgICAgICAgIGNsaWVudEJsb2NrU2l6ZSxcbiAgICAgICAgICAgICAgICBzY3JvbGxCbG9ja1NpemUsXG4gICAgICAgICAgICAgICAgb2Zmc2V0QmxvY2tTaXplLFxuICAgICAgICAgICAgICAgIGNsaWVudElubGluZUluc2V0LFxuICAgICAgICAgICAgICAgIHNjcm9sbElubGluZUluc2V0LFxuICAgICAgICAgICAgICAgIG9mZnNldElubGluZUluc2V0LFxuICAgICAgICAgICAgICAgIGNsaWVudEJsb2NrSW5zZXQsXG4gICAgICAgICAgICAgICAgc2Nyb2xsQmxvY2tJbnNldCxcbiAgICAgICAgICAgICAgICBvZmZzZXRCbG9ja0luc2V0LFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB1c2VMb2dpY2FsRGlyZWN0aW9uUHJvcHM6IHVzZUNhbGxiYWNrKChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8VD4pID0+IHVzZVJlZkVsZW1lbnRQcm9wcyh1c2VFbGVtZW50U2l6ZVByb3BzKHByb3BzKSksIFtdKSxcbiAgICAgICAgZ2V0RWxlbWVudCxcbiAgICAgICAgZ2V0TG9naWNhbERpcmVjdGlvbkluZm8sXG4gICAgICAgIGNvbnZlcnRUb0xvZ2ljYWxTaXplOiBjb252ZXJ0RWxlbWVudFNpemUsXG4gICAgICAgIGNvbnZlcnRUb0xvZ2ljYWxPcmllbnRhdGlvbixcbiAgICAgICAgY29udmVydFRvUGh5c2ljYWxPcmllbnRhdGlvbixcbiAgICAgICAgY29udmVydFRvTG9naWNhbFNpZGUsXG4gICAgICAgIGNvbnZlcnRUb1BoeXNpY2FsU2lkZVxuICAgIH07XG59XG5cbi8vIFBvc2l0aW9uIHJlcXVpcmVzIHVzIHRvIHNvbWV0aW1lcyB1c2Ugb25lIHByb3BlcnR5IChsaWtlIGBsZWZ0YClcbi8vIG9yIHNvbWV0aW1lcyB0d28gKGxpa2UgYGxlZnRgICsgYHdpZHRoYClcbmZ1bmN0aW9uIGdldFBoeXNpY2FsTGVmdFRvcChkaXI6IFBoeXNpY2FsRGlyZWN0aW9uKSB7IGlmIChkaXIgPT09IFwibHRyXCIgfHwgZGlyID09IFwicnRsXCIpIHJldHVybiBcImxlZnRcIjsgcmV0dXJuIFwidG9wXCI7IH1cbmZ1bmN0aW9uIGdldFBoeXNpY2FsUmlnaHRCb3R0b20oZGlyOiBQaHlzaWNhbERpcmVjdGlvbikgeyBpZiAoZGlyID09PSBcInJ0bFwiKSByZXR1cm4gXCJ3aWR0aFwiOyBpZiAoZGlyID09PSBcImJ0dFwiKSByZXR1cm4gXCJoZWlnaHRcIjsgcmV0dXJuIG51bGw7IH1cblxuLy8gSGVscGVyIGZvciBleHRyYWN0aW5nIGluZm8gZnJvbSBcImx0clwiLCBcInR0YlwiLCBldGMuXG5jb25zdCBNID0ge1xuICAgIHQ6IFwidG9wXCIsXG4gICAgYjogXCJib3R0b21cIixcbiAgICBsOiBcImxlZnRcIixcbiAgICByOiBcInJpZ2h0XCJcbn0gYXMgY29uc3Q7XG5cblxuZXhwb3J0IGludGVyZmFjZSBVc2VMb2dpY2FsRGlyZWN0aW9uUmV0dXJuVHlwZTxUIGV4dGVuZHMgRXZlbnRUYXJnZXQ+IHtcbiAgICAvKiogKipTVEFCTEUqKiAqL1xuICAgIHVzZUxvZ2ljYWxEaXJlY3Rpb25Qcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxUPikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8VD47XG4gICAgLyoqICoqU1RBQkxFKiogKi9cbiAgICBnZXRFbGVtZW50OiAoKSA9PiBUIHwgbnVsbDtcbiAgICAvKiogKipTVEFCTEUqKiAqL1xuICAgIGdldExvZ2ljYWxEaXJlY3Rpb25JbmZvOiAoKSA9PiBMb2dpY2FsRGlyZWN0aW9uSW5mbyB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiB0aGUgRWxlbWVudFNpemUgaW5mbyBmcm9tIHVzZUVsZW1lbnRTaXplLCBjb252ZXJ0cyBhbGwgdGhvc2UgcGh5c2ljYWwgcHJvcGVydGllcyB0byB0aGVpciBsb2dpY2FsIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBcbiAgICAgKiAqKlNUQUJMRSoqXG4gICAgICovXG4gICAgY29udmVydFRvTG9naWNhbFNpemU6IChlbGVtZW50U2l6ZTogRWxlbWVudFNpemUsIGRpcmVjdGlvbj86IExvZ2ljYWxEaXJlY3Rpb25JbmZvIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gTG9naWNhbEVsZW1lbnRTaXplIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFR1cm5zIGBcImhvcml6b250YWxcIiB8IFwidmVydGljYWxcImAgaW50byBgXCJpbmxpbmVcIiB8IFwiYmxvY2tcImBcbiAgICAgKiBcbiAgICAgKiAqKlNUQUJMRSoqXG4gICAgICovXG4gICAgY29udmVydFRvTG9naWNhbE9yaWVudGF0aW9uOiAoZWxlbWVudE9yaWVudGF0aW9uOiBQaHlzaWNhbE9yaWVudGF0aW9uLCBkaXJlY3Rpb24/OiBMb2dpY2FsRGlyZWN0aW9uSW5mbyB8IG51bGwgfCB1bmRlZmluZWQpID0+IFwiaW5saW5lXCIgfCBcImJsb2NrXCI7XG5cbiAgICAvKipcbiAgICAgKiBUdXJucyBgXCJpbmxpbmVcIiB8IFwiYmxvY2tcImAgaW50byBgXCJob3Jpem9udGFsXCIgfCBcInZlcnRpY2FsXCJgXG4gICAgICogXG4gICAgICogKipTVEFCTEUqKlxuICAgICAqL1xuICAgIGNvbnZlcnRUb1BoeXNpY2FsT3JpZW50YXRpb246IChlbGVtZW50T3JpZW50YXRpb246IExvZ2ljYWxPcmllbnRhdGlvbiwgZGlyZWN0aW9uPzogTG9naWNhbERpcmVjdGlvbkluZm8gfCBudWxsIHwgdW5kZWZpbmVkKSA9PiBcImhvcml6b250YWxcIiB8IFwidmVydGljYWxcIjtcblxuICAgIC8qKlxuICAgICAqIFR1cm5zIGBcInRvcFwiIHwgXCJib3R0b21cIiB8IFwibGVmdFwiIHwgXCJyaWdodFwiYCBpbnRvIGBcImJsb2NrLXN0YXJ0XCIgfCBcImJsb2NrLWVuZFwiIHwgXCJpbmxpbmUtc3RhcnRcIiB8IFwiaW5saW5lLWVuZFwiYFxuICAgICAqIFxuICAgICAqICoqU1RBQkxFKipcbiAgICAgKi9cbiAgICBjb252ZXJ0VG9Mb2dpY2FsU2lkZTogKHNpZGU6IFwidG9wXCIgfCBcImJvdHRvbVwiIHwgXCJsZWZ0XCIgfCBcInJpZ2h0XCIsIGRpcmVjdGlvbj86IExvZ2ljYWxEaXJlY3Rpb25JbmZvIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gXCJpbmxpbmUtc3RhcnRcIiB8IFwiaW5saW5lLWVuZFwiIHwgXCJibG9jay1zdGFydFwiIHwgXCJibG9jay1lbmRcIjtcblxuICAgIC8qKlxuICAgICAqIFR1cm5zIGBcImJsb2NrLXN0YXJ0XCIgfCBcImJsb2NrLWVuZFwiIHwgXCJpbmxpbmUtc3RhcnRcIiB8IFwiaW5saW5lLWVuZFwiYCBpbnRvIGBcInRvcFwiIHwgXCJib3R0b21cIiB8IFwibGVmdFwiIHwgXCJyaWdodFwiYFxuICAgICAqIFxuICAgICAqICoqU1RBQkxFKipcbiAgICAgKi9cbiAgICBjb252ZXJ0VG9QaHlzaWNhbFNpZGU6IChzaWRlOiBcImlubGluZS1zdGFydFwiIHwgXCJpbmxpbmUtZW5kXCIgfCBcImJsb2NrLXN0YXJ0XCIgfCBcImJsb2NrLWVuZFwiLCBkaXJlY3Rpb24/OiBMb2dpY2FsRGlyZWN0aW9uSW5mbyB8IG51bGwgfCB1bmRlZmluZWQpID0+IFwidG9wXCIgfCBcImJvdHRvbVwiIHwgXCJsZWZ0XCIgfCBcInJpZ2h0XCI7XG59XG5cblxuXG5leHBvcnQgaW50ZXJmYWNlIExvZ2ljYWxEaXJlY3Rpb25JbmZvIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIHRoZSBkaXJlY3Rpb24gdGV4dCBmbG93cywgZ2x5cGggYnkgZ2x5cGguICBCeSBmYXIgdGhlIG1vc3QgY29tcGxleCBwcm9wZXJ0eS5cbiAgICAgKiBcbiAgICAgKiB8YHdyaXRpbmctbW9kZWB8YGRpcmVjdGlvbmB8UmVzdWx0fFxuICAgICAqIHwtLS0tLXwtLS0tLXwtLS0tLXxcbiAgICAgKiB8YGhvcml6b250YWwtdGJgfGBsdHJgfGBsdHJgfFxuICAgICAqIHxgaG9yaXpvbnRhbC10YmB8YHJ0bGB8YHJ0bGB8XG4gICAgICogfGB2ZXJ0aWNhbC1ybGAgJiBgc2lkZXdheXMtcmxgfGBsdHJgfGB0dGJgfFxuICAgICAqIHxgdmVydGljYWwtcmxgICYgYHNpZGV3YXlzLXJsYHxgcnRsYHxgYnR0YHxcbiAgICAgKiB8YHZlcnRpY2FsLWxyYHxgbHRyYHxgdHRiYHxcbiAgICAgKiB8YHZlcnRpY2FsLWxyYHxgcnRsYHxgYnR0YHxcbiAgICAgKiB8YHNpZGV3YXlzLWxyYHxgbHRyYHxgYnR0YHxcbiAgICAgKiB8YHNpZGV3YXlzLWxyYHxgcnRsYHxgdHRiYHxcbiAgICAgKi9cbiAgICBpbmxpbmVEaXJlY3Rpb246IFBoeXNpY2FsRGlyZWN0aW9uO1xuXG4gICAgLyoqXG4gICAgICogU2ltcGxpZmllZCB2ZXJzaW9uIG9mIGBpbmxpbmVEaXJlY3Rpb25gOlxuICAgICAqIFxuICAgICAqICogYGhvcml6b250YWxgIGZvciBgaG9yaXpvbnRhbC10YmBcbiAgICAgKiAqIGB2ZXJ0aWNhbGAgZm9yIGFsbCBvdGhlcnNcbiAgICAgKi9cbiAgICBpbmxpbmVPcmllbnRhdGlvbjogUGh5c2ljYWxPcmllbnRhdGlvbjtcblxuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgdGhlIGRpcmVjdGlvbiB0ZXh0IGZsb3dzLCBsaW5lIGJ5IGxpbmUuXG4gICAgICogXG4gICAgICogKiBgdHRiYCBmb3IgYGhvcml6b250YWwtdGJgLCByZWdhcmRsZXNzIG9mIGRpcmVjdGlvblxuICAgICAqICogYHJ0bGAgZm9yIGB2ZXJ0aWNhbC1ybGAgJiBgc2lkZXdheXMtcmxgLCByZWdhcmRsZXNzIG9mIGRpcmVjdGlvblxuICAgICAqICogYGx0cmAgZm9yIGB2ZXJ0aWNhbC1scmAgJiBgc2lkZXdheXMtbHJgLCByZWdhcmRsZXNzIG9mIGRpcmVjdGlvblxuICAgICAqL1xuICAgIGJsb2NrRGlyZWN0aW9uOiBQaHlzaWNhbERpcmVjdGlvbjtcblxuICAgIC8qKlxuICAgICAqIFNpbXBsaWZpZWQgdmVyc2lvbiBvZiBgYmxvY2tEaXJlY3Rpb25gOlxuICAgICAqIFxuICAgICAqICogYHZlcnRpY2FsYCBmb3IgYGhvcml6b250YWwtdGJgXG4gICAgICogKiBgaG9yaXpvbnRhbGAgZm9yIGFsbCBvdGhlcnNcbiAgICAgKi9cbiAgICBibG9ja09yaWVudGF0aW9uOiBQaHlzaWNhbE9yaWVudGF0aW9uO1xuXG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBob3cgeW91IGNhbiAqcGh5c2ljYWxseSogcmVmZXIgdG8gdGhlIHNpemUgb2YgdGhlIGVsZW1lbnQgaW4gdGhlICppbmxpbmUqIHNpemUuXG4gICAgICogXG4gICAgICogKiBgd2lkdGhgIGZvciBgaG9yaXpvbnRhbC10YmAsIHJlZ2FyZGxlc3Mgb2YgZGlyZWN0aW9uXG4gICAgICogKiBgaGVpZ2h0YCBmb3IgYWxsIG90aGVyc1xuICAgICAqL1xuICAgIGlubGluZVNpemU6IFBoeXNpY2FsU2l6ZTtcblxuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgaG93IHlvdSBjYW4gKnBoeXNpY2FsbHkqIHJlZmVyIHRvIHRoZSBzaXplIG9mIHRoZSBlbGVtZW50IGluIHRoZSAqYmxvY2sqIHNpemUuXG4gICAgICogXG4gICAgICogKiBgaGVpZ2h0YCBmb3IgYGhvcml6b250YWwtdGJgLCByZWdhcmRsZXNzIG9mIGRpcmVjdGlvblxuICAgICAqICogYHdpZHRoYCBmb3IgYWxsIG90aGVyc1xuICAgICAqL1xuICAgIGJsb2NrU2l6ZTogUGh5c2ljYWxTaXplO1xuXG4gICAgLyoqXG4gICAgICogRm9yIGVhY2ggZ2x5cGgsIGFzY2VuZGVycyB0byBkZXNjZW5kZXJzICpwaHlzaWNhbGx5KiBnbzpcbiAgICAgKiBcbiAgICAgKiAqIGB0dGJgIGZvciBgaG9yaXpvbnRhbC10YmBcbiAgICAgKiAqIGBydGxgIGZvciBgdmVydGljYWwtcmxgLCBgdmVydGljYWwtbHJgLCAmIGBzaWRld2F5cy1ybGBcbiAgICAgKiAqIGBsdHJgIGZvciBgc2lkZXdheXMtbHJgXG4gICAgICovXG4gICAgb3ZlclVuZGVyRGlyZWN0aW9uOiBQaHlzaWNhbERpcmVjdGlvbjtcblxuICAgIC8qKlxuICAgICAqIEZvciBlYWNoIGdseXBoLCBpdHMgXCJsZWZ0XCIgc2lkZSAodGhpbmsgb2YgdGhpcyByZWxhdGl2ZSB0byBgd3JpdGluZy1tb2RlYCBidXQgKm5vdCogcmVsYXRpdmUgdG8gYGRpcmVjdGlvbmAsIG9yIGFsdGVybmF0aXZlbHkgd2hhdCBgdGV4dC1hbGlnbjogbGVmdGAgbWVhbnMpIHRvIGl0cyBcInJpZ2h0XCIgc2lkZSAqcGh5c2ljYWxseSogZ29lcyBmcm9tOlxuICAgICAqIFxuICAgICAqICogYGx0cmAgZm9yIGBob3Jpem9udGFsLXRiYFxuICAgICAqICogYHR0YmAgZm9yIGB2ZXJ0aWNhbC1ybGAsIGB2ZXJ0aWNhbC1scmAsICYgYHNpZGV3YXlzLXJsYFxuICAgICAqICogYGJ0dGAgZm9yIGBzaWRld2F5cy1scmBcbiAgICAgKi9cbiAgICBsZWZ0UmlnaHREaXJlY3Rpb246IFBoeXNpY2FsRGlyZWN0aW9uO1xufVxuXG5jb25zdCBIb3Jpem9udGFsVGJMdHI6IExvZ2ljYWxEaXJlY3Rpb25JbmZvID0ge1xuICAgIGlubGluZURpcmVjdGlvbjogXCJsdHJcIixcbiAgICBibG9ja0RpcmVjdGlvbjogXCJ0dGJcIixcblxuICAgIGlubGluZU9yaWVudGF0aW9uOiBcImhvcml6b250YWxcIixcbiAgICBibG9ja09yaWVudGF0aW9uOiBcInZlcnRpY2FsXCIsXG5cbiAgICBpbmxpbmVTaXplOiBcIndpZHRoXCIsXG4gICAgYmxvY2tTaXplOiBcImhlaWdodFwiLFxuXG4gICAgbGVmdFJpZ2h0RGlyZWN0aW9uOiBcImx0clwiLFxuICAgIG92ZXJVbmRlckRpcmVjdGlvbjogXCJ0dGJcIlxufTtcblxuY29uc3QgSG9yaXpvbnRhbFRiUnRsOiBMb2dpY2FsRGlyZWN0aW9uSW5mbyA9IHtcbiAgICAuLi5Ib3Jpem9udGFsVGJMdHIsXG4gICAgaW5saW5lRGlyZWN0aW9uOiBcInJ0bFwiLFxufTtcblxuY29uc3QgVmVydGljYWxSbEx0cjogTG9naWNhbERpcmVjdGlvbkluZm8gPSB7XG4gICAgaW5saW5lRGlyZWN0aW9uOiBcInR0YlwiLFxuICAgIGJsb2NrRGlyZWN0aW9uOiBcInJ0bFwiLFxuXG4gICAgaW5saW5lT3JpZW50YXRpb246IFwidmVydGljYWxcIixcbiAgICBibG9ja09yaWVudGF0aW9uOiBcImhvcml6b250YWxcIixcblxuICAgIGlubGluZVNpemU6IFwiaGVpZ2h0XCIsXG4gICAgYmxvY2tTaXplOiBcIndpZHRoXCIsXG5cbiAgICBsZWZ0UmlnaHREaXJlY3Rpb246IFwidHRiXCIsXG4gICAgb3ZlclVuZGVyRGlyZWN0aW9uOiBcInJ0bFwiXG59O1xuXG5jb25zdCBWZXJ0aWNhbFJsUnRsOiBMb2dpY2FsRGlyZWN0aW9uSW5mbyA9IHtcbiAgICAuLi5WZXJ0aWNhbFJsTHRyLFxuICAgIGlubGluZURpcmVjdGlvbjogXCJidHRcIlxufTtcblxuXG5jb25zdCBTaWRld2F5c1JsTHRyOiBMb2dpY2FsRGlyZWN0aW9uSW5mbyA9IHsgLi4uVmVydGljYWxSbEx0ciB9O1xuY29uc3QgU2lkZXdheXNSbFJ0bDogTG9naWNhbERpcmVjdGlvbkluZm8gPSB7IC4uLlZlcnRpY2FsUmxSdGwgfTtcblxuY29uc3QgVmVydGljYWxMckx0cjogTG9naWNhbERpcmVjdGlvbkluZm8gPSB7XG4gICAgLi4uVmVydGljYWxSbEx0cixcbiAgICBibG9ja0RpcmVjdGlvbjogXCJsdHJcIixcbn07XG5cbmNvbnN0IFZlcnRpY2FsTHJSdGw6IExvZ2ljYWxEaXJlY3Rpb25JbmZvID0ge1xuICAgIC4uLlZlcnRpY2FsUmxSdGwsXG4gICAgYmxvY2tEaXJlY3Rpb246IFwibHRyXCIsXG59O1xuXG5jb25zdCBTaWRld2F5c0x0THRyOiBMb2dpY2FsRGlyZWN0aW9uSW5mbyA9IHtcbiAgICAuLi5WZXJ0aWNhbExyTHRyLFxuICAgIGlubGluZURpcmVjdGlvbjogXCJidHRcIixcblxuICAgIGxlZnRSaWdodERpcmVjdGlvbjogXCJidHRcIixcbiAgICBvdmVyVW5kZXJEaXJlY3Rpb246IFwibHRyXCJcbn07XG5cbmNvbnN0IFNpZGV3YXlzTHRSdGw6IExvZ2ljYWxEaXJlY3Rpb25JbmZvID0ge1xuICAgIC4uLlNpZGV3YXlzTHRMdHIsXG4gICAgaW5saW5lRGlyZWN0aW9uOiBcInR0YlwiXG59O1xuXG5cblxuY29uc3QgSG9yaXpvbnRhbFRiID0ge1xuICAgIGx0cjogSG9yaXpvbnRhbFRiTHRyLFxuICAgIHJ0bDogSG9yaXpvbnRhbFRiUnRsXG59IGFzIGNvbnN0O1xuXG5jb25zdCBWZXJ0aWNhbFJsID0ge1xuICAgIGx0cjogVmVydGljYWxSbEx0cixcbiAgICBydGw6IFZlcnRpY2FsUmxSdGxcbn0gYXMgY29uc3Q7XG5cbmNvbnN0IFZlcnRpY2FsTHIgPSB7XG4gICAgbHRyOiBWZXJ0aWNhbExyTHRyLFxuICAgIHJ0bDogVmVydGljYWxMclJ0bFxufSBhcyBjb25zdDtcblxuY29uc3QgU2lkZXdheXNSbCA9IHtcbiAgICBsdHI6IFNpZGV3YXlzUmxMdHIsXG4gICAgcnRsOiBTaWRld2F5c1JsUnRsXG59IGFzIGNvbnN0O1xuXG5jb25zdCBTaWRld2F5c0xyID0ge1xuICAgIGx0cjogU2lkZXdheXNMdEx0cixcbiAgICBydGw6IFNpZGV3YXlzTHRSdGxcbn0gYXMgY29uc3Q7XG5cbmNvbnN0IFdyaXRpbmdNb2RlcyA9IHtcbiAgICBcImhvcml6b250YWwtdGJcIjogSG9yaXpvbnRhbFRiLFxuICAgIFwidmVydGljYWwtbHJcIjogVmVydGljYWxMcixcbiAgICBcInZlcnRpY2FsLXJsXCI6IFZlcnRpY2FsUmwsXG4gICAgXCJzaWRld2F5cy1sclwiOiBTaWRld2F5c0xyLFxuICAgIFwic2lkZXdheXMtcmxcIjogU2lkZXdheXNSbFxufSBhcyBjb25zdDtcbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xuaW1wb3J0IHsgdXNlU3RhYmxlR2V0dGVyIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1nZXR0ZXJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBVc2VUaW1lb3V0IHtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIG1zIHRvIHdhaXQgYmVmb3JlIGludm9raW5nIGBjYWxsYmFja2AuICBcbiAgICAgKiBJZiBgbnVsbGAsIGNhbmNlbHMgdGhlIHRpbWVvdXQgaW1tZWRpYXRlbHkuXG4gICAgICovXG4gICAgdGltZW91dDogbnVtYmVyIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdG8gdGhpcyBwcm9wIGJldHdlZW4gcmVuZGVycyBjYW4gYmUgdXNlZCB0byBjbGVhciB0aGUgY3VycmVudCB0aW1lb3V0IGFuZCBjcmVhdGUgYSBuZXcgb25lLlxuICAgICAqL1xuICAgIHRyaWdnZXJJbmRleD86IHVua25vd247XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgYHRpbWVvdXRgIG1zIGFmdGVyIG1vdW50LCBvciB0aGUgbGFzdCBjaGFuZ2UgdG8gYHRyaWdnZXJJbmRleGAuXG4gICAgICogXG4gICAgICogRG9lcyAqbm90KiBuZWVkIHRvIGJlIHN0YWJsZS4gR28gYWhlYWQgYW5kIHBhc3MgYW4gYW5vbnltb3VzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGNhbGxiYWNrOiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlVGltZW91dCh7IHRpbWVvdXQsIGNhbGxiYWNrLCB0cmlnZ2VySW5kZXggfTogVXNlVGltZW91dCkge1xuICAgIGNvbnN0IHN0YWJsZUNhbGxiYWNrID0gdXNlU3RhYmxlQ2FsbGJhY2soKCkgPT4geyBzdGFydFRpbWVSZWYuY3VycmVudCA9IG51bGw7IGNhbGxiYWNrKCk7IH0pO1xuICAgIGNvbnN0IGdldFRpbWVvdXQgPSB1c2VTdGFibGVHZXR0ZXIodGltZW91dCk7XG5cbiAgICAvLyBTZXQgYW55IHRpbWUgd2Ugc3RhcnQgdGltZW91dC5cbiAgICAvLyBVbnNldCBhbnkgdGltZSB0aGUgdGltZW91dCBjb21wbGV0ZXNcbiAgICBjb25zdCBzdGFydFRpbWVSZWYgPSB1c2VSZWY8bnVtYmVyIHwgbnVsbD4obnVsbCk7XG5cbiAgICBjb25zdCB0aW1lb3V0SXNOdWxsID0gKHRpbWVvdXQgPT0gbnVsbCk7XG5cbiAgICAvLyBBbnkgdGltZSB0aGUgdHJpZ2dlckluZGV4IGNoYW5nZXMgKGluY2x1ZGluZyBvbiBtb3VudClcbiAgICAvLyByZXN0YXJ0IHRoZSB0aW1lb3V0LiAgVGhlIHRpbWVvdXQgZG9lcyBOT1QgcmVzZXRcbiAgICAvLyB3aGVuIHRoZSBkdXJhdGlvbiBvciBjYWxsYmFjayBjaGFuZ2VzLCBvbmx5IHRyaWdnZXJJbmRleC5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIXRpbWVvdXRJc051bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVvdXQgPSBnZXRUaW1lb3V0KCk7XG4gICAgICAgICAgICBjb25zb2xlLmFzc2VydCh0aW1lb3V0SXNOdWxsID09ICh0aW1lb3V0ID09IG51bGwpKTtcbiAgICBcbiAgICAgICAgICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzdGFydFRpbWVSZWYuY3VycmVudCA9ICsobmV3IERhdGUoKSk7XG4gICAgXG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlID0gc2V0VGltZW91dChzdGFibGVDYWxsYmFjaywgdGltZW91dCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dChoYW5kbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH0sIFt0cmlnZ2VySW5kZXgsIHRpbWVvdXRJc051bGxdKVxuXG4gICAgY29uc3QgZ2V0RWxhcHNlZFRpbWUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIHJldHVybiAoKyhuZXcgRGF0ZSgpKSkgLSAoKyhzdGFydFRpbWVSZWYuY3VycmVudCA/PyBuZXcgRGF0ZSgpKSk7XG4gICAgfSwgW10pO1xuXG4gICAgY29uc3QgZ2V0UmVtYWluaW5nVGltZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgY29uc3QgdGltZW91dCA9IGdldFRpbWVvdXQoKTtcbiAgICAgICAgcmV0dXJuIHRpbWVvdXQgPT0gbnVsbCA/IG51bGwgOiBNYXRoLm1heCgwLCB0aW1lb3V0IC0gZ2V0RWxhcHNlZFRpbWUoKSlcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4geyBnZXRFbGFwc2VkVGltZSwgZ2V0UmVtYWluaW5nVGltZSB9O1xufVxuIiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuaW1wb3J0IHsgdXNlTG9naWNhbERpcmVjdGlvbiB9IGZyb20gXCIuL3VzZS1sb2dpY2FsLWRpcmVjdGlvblwiO1xuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwiLi91c2UtbWVyZ2VkLXByb3BzXCI7XG5pbXBvcnQgeyB1c2VTdGFibGVDYWxsYmFjayB9IGZyb20gXCIuL3VzZS1zdGFibGUtY2FsbGJhY2tcIjtcbmltcG9ydCB7IHVzZVN0YWJsZUdldHRlciB9IGZyb20gXCIuL3VzZS1zdGFibGUtZ2V0dGVyXCI7XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCIuL3VzZS1zdGF0ZVwiO1xuaW1wb3J0IHsgdXNlVGltZW91dCB9IGZyb20gXCIuL3VzZS10aW1lb3V0XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlTGluZWFyTmF2aWdhdGlvblJldHVyblR5cGVJbmZvIHtcbiAgICBsaW5lYXJOYXZpZ2F0aW9uOiB7fVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxpbmVhck5hdmlnYXRpb25SZXR1cm5UeXBlV2l0aEhvb2tzPFBhcmVudE9yQ2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VMaW5lYXJOYXZpZ2F0aW9uUmV0dXJuVHlwZUluZm8ge1xuICAgIC8qKiBcbiAgICAgKiBUaGVzZSBwcm9wcyBjYW4gYmUgYXR0YXRjaGVkIGVpdGhlciB0byB0aGUgcGFyZW50IG9yIHRvIGVhY2ggaW5kaXZpZHVhbCBjaGlsZC5cbiAgICAgKiBXaGljaGV2ZXIgd29ya3MgYmV0dGVyIGZvciB5b3VyIHNjZW5hcmlvLlxuICAgICAqIFxuICAgICAqICoqU1RBQkxFKiogXG4gICAgICogKi9cbiAgICB1c2VMaW5lYXJOYXZpZ2F0aW9uUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8UGFyZW50T3JDaGlsZEVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxQYXJlbnRPckNoaWxkRWxlbWVudD47XG59XG5cbmludGVyZmFjZSBMTlAge1xuICAgIG5hdmlnYXRlVG9OZXh0KCk6IHZvaWQ7XG4gICAgbmF2aWdhdGVUb1ByZXYoKTogdm9pZDtcbiAgICBuYXZpZ2F0ZVRvRmlyc3QoKTogdm9pZDtcbiAgICBuYXZpZ2F0ZVRvTGFzdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIHdoaWNoIGFycm93IGtleXMgYXJlIHVzZWQgdG8gbmF2aWdhdGUgdGhyb3VnaCB0aGUgY29tcG9uZW50LlxuICAgICAqIFJlbGF0aXZlIHRvIHRoZSB3cml0aW5nIG1vZGUsIHNvIGluIEVuZ2xpc2gsIFwiaW5saW5lXCIgY29ycmVzcG9uZHNcbiAgICAgKiB0byB0aGUgbGVmdCAmIHJpZ2h0IGFycm93IGtleXMsIGFuZCBcImJsb2NrXCIgdG8gdGhlIHVwICYgZG93biBhcnJvdyBrZXlzLlxuICAgICAqIFxuICAgICAqIFVzZSBcImVpdGhlclwiIHRvIGFsbG93IG5hdmlnYXRpb24gaW4gZWl0aGVyIGRpcmVjdGlvbi5cbiAgICAgKiBcbiAgICAgKiBVc2UgXCJub25lXCIgdG8gZGlzYWxsb3cgbmF2aWdhdGlvbiB3aXRoIHRoZSBhcnJvdyBrZXlzIGluIGFueSBkaXJlY3Rpb24uXG4gICAgICovXG4gICAgbmF2aWdhdGlvbkRpcmVjdGlvbj86IFwiaW5saW5lXCIgfCBcImJsb2NrXCIgfCBcImVpdGhlclwiIHwgXCJub25lXCI7XG5cbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gdHJ1ZSwgbmF2aWdhdGlvbiB3aXRoIHRoZSBhcnJvdyBrZXlzIHdpbGwgYmUgXG4gICAgICogZGlzYWJsZWQsIGJ1dCBuYXZpZ2F0aW9uIHdpdGggdGhlIGhvbWUgJiBlbmQga2V5cyB3aWxsXG4gICAgICogYmUgdW5hZmZlY3RlZC5cbiAgICAgKi9cbiAgICBkaXNhYmxlQXJyb3dLZXlzPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIElmIHNldCB0byB0cnVlLCBuYXZpZ2F0aW9uIHdpdGggdGhlIGhvbWUgJiBlbmQga2V5cyB3aWxsXG4gICAgICogYmUgZGlzYWJsZWQsIGJ1dCBuYXZpZ2F0aW9uIHdpdGggdGhlIGFycm93IGtleXMgd2lsbCBiZVxuICAgICAqIHVuYWZmZWN0ZWQuXG4gICAgICovXG4gICAgZGlzYWJsZUhvbWVFbmRLZXlzPzogYm9vbGVhbjtcbn1cbmV4cG9ydCB0eXBlIExpbmVhck5hdmlnYXRpb25PbWl0cyA9IGtleW9mIExOUDtcblxuLyoqIEFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIHBhcmVudCBgdXNlTGluZWFyTmF2aWdhdGlvbmAgKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlTGluZWFyTmF2aWdhdGlvblBhcmFtZXRlcnM8T21pdHMgZXh0ZW5kcyBMaW5lYXJOYXZpZ2F0aW9uT21pdHM+IHtcbiAgICBsaW5lYXJOYXZpZ2F0aW9uOiBPbWl0PExOUCwgT21pdHM+XG59XG5cblxuLyoqIEFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIGNoaWxkICd1c2VMaW5lYXJOYXZpZ2F0aW9uQ2hpbGRgICovXG4vL2V4cG9ydCBpbnRlcmZhY2UgVXNlTGluZWFyTmF2aWdhdGlvbkNoaWxkSW5mbyB7IH1cblxuLyoqXG4gKiBXaGVuIHVzZWQgaW4gdGFuZGVtIHdpdGggYHVzZVJvdmluZ1RhYkluZGV4YCwgYWxsb3dzIGNvbnRyb2wgb2ZcbiAqIHRoZSB0YWJiYWJsZSBpbmRleCB3aXRoIHRoZSBhcnJvdyBrZXlzLlxuICogXG4gKiBAc2VlIHVzZUxpc3ROYXZpZ2F0aW9uLCB3aGljaCBwYWNrYWdlcyBldmVyeXRoaW5nIHVwIHRvZ2V0aGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTGluZWFyTmF2aWdhdGlvbjxQYXJlbnRPckNoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KHsgbGluZWFyTmF2aWdhdGlvbjogeyBuYXZpZ2F0ZVRvRmlyc3Q6IG50ZiwgbmF2aWdhdGVUb0xhc3Q6IG50bCwgbmF2aWdhdGVUb05leHQ6IG50biwgbmF2aWdhdGVUb1ByZXY6IG50cCwgbmF2aWdhdGlvbkRpcmVjdGlvbjogbmQsIGRpc2FibGVBcnJvd0tleXM6IGRhaywgZGlzYWJsZUhvbWVFbmRLZXlzOiBkaGVrIH0gfTogVXNlTGluZWFyTmF2aWdhdGlvblBhcmFtZXRlcnM8bmV2ZXI+KTogVXNlTGluZWFyTmF2aWdhdGlvblJldHVyblR5cGVXaXRoSG9va3M8UGFyZW50T3JDaGlsZEVsZW1lbnQ+IHtcblxuICAgIG5kID8/PSBcImVpdGhlclwiO1xuXG4gICAgY29uc3QgeyBnZXRMb2dpY2FsRGlyZWN0aW9uSW5mbywgdXNlTG9naWNhbERpcmVjdGlvblByb3BzIH0gPSB1c2VMb2dpY2FsRGlyZWN0aW9uPFBhcmVudE9yQ2hpbGRFbGVtZW50Pih7fSk7XG5cbiAgICBjb25zdCBuYXZpZ2F0ZVRvRmlyc3QgPSB1c2VTdGFibGVDYWxsYmFjayhudGYpO1xuICAgIGNvbnN0IG5hdmlnYXRlVG9MYXN0ID0gdXNlU3RhYmxlQ2FsbGJhY2sobnRsKTtcbiAgICBjb25zdCBuYXZpZ2F0ZVRvTmV4dCA9IHVzZVN0YWJsZUNhbGxiYWNrKG50bik7XG4gICAgY29uc3QgbmF2aWdhdGVUb1ByZXYgPSB1c2VTdGFibGVDYWxsYmFjayhudHApO1xuICAgIGNvbnN0IGdldERpc2FibGVBcnJvd0tleXMgPSB1c2VTdGFibGVHZXR0ZXIoZGFrKTtcbiAgICBjb25zdCBnZXREaXNhYmxlSG9tZUVuZEtleXMgPSB1c2VTdGFibGVHZXR0ZXIoZGhlayk7XG4gICAgY29uc3QgZ2V0TmF2aWdhdGlvbkRpcmVjdGlvbiA9IHVzZVN0YWJsZUdldHRlcihuZCk7XG5cblxuICAgIHJldHVybiB7XG4gICAgICAgIGxpbmVhck5hdmlnYXRpb246IHt9LFxuICAgICAgICB1c2VMaW5lYXJOYXZpZ2F0aW9uUHJvcHM6IHVzZUNhbGxiYWNrKChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8UGFyZW50T3JDaGlsZEVsZW1lbnQ+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8UGFyZW50T3JDaGlsZEVsZW1lbnQ+ID0+IHtcblxuICAgICAgICAgICAgY29uc3Qgb25LZXlEb3duID0gKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBOb3QgaGFuZGxlZCBieSB0eXBlYWhlYWQgKGkuZS4gYXNzdW1lIHRoaXMgaXMgYSBrZXlib2FyZCBzaG9ydGN1dClcbiAgICAgICAgICAgICAgICBpZiAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaW5mbyA9IGdldExvZ2ljYWxEaXJlY3Rpb25JbmZvKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmF2aWdhdGlvbkRpcmVjdGlvbiA9IGdldE5hdmlnYXRpb25EaXJlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXNhYmxlQXJyb3dLZXlzID0gZ2V0RGlzYWJsZUFycm93S2V5cygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc2FibGVIb21lRW5kS2V5cyA9IGdldERpc2FibGVIb21lRW5kS2V5cygpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgYWxsb3dzQmxvY2tOYXZpZ2F0aW9uID0gKG5hdmlnYXRpb25EaXJlY3Rpb24gPT0gXCJibG9ja1wiIHx8IG5hdmlnYXRpb25EaXJlY3Rpb24gPT0gXCJlaXRoZXJcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgYWxsb3dzSW5saW5lTmF2aWdhdGlvbiA9IChuYXZpZ2F0aW9uRGlyZWN0aW9uID09IFwiaW5saW5lXCIgfHwgbmF2aWdhdGlvbkRpcmVjdGlvbiA9PSBcImVpdGhlclwiKTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFycm93VXBcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcE5hbWUgPSAoaW5mbz8uYmxvY2tPcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiID8gXCJibG9ja0RpcmVjdGlvblwiIDogXCJpbmxpbmVEaXJlY3Rpb25cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3Rpb25BbGxvd2VkID0gKCFkaXNhYmxlQXJyb3dLZXlzICYmIChpbmZvPy5ibG9ja09yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIgPyBhbGxvd3NCbG9ja05hdmlnYXRpb24gOiBhbGxvd3NJbmxpbmVOYXZpZ2F0aW9uKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uQWxsb3dlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvPy5bcHJvcE5hbWVdID09PSBcImJ0dFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRlVG9OZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0ZVRvUHJldigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJBcnJvd0Rvd25cIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcE5hbWUgPSAoaW5mbz8uYmxvY2tPcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiID8gXCJibG9ja0RpcmVjdGlvblwiIDogXCJpbmxpbmVEaXJlY3Rpb25cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3Rpb25BbGxvd2VkID0gKCFkaXNhYmxlQXJyb3dLZXlzICYmIChpbmZvPy5ibG9ja09yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIgPyBhbGxvd3NCbG9ja05hdmlnYXRpb24gOiBhbGxvd3NJbmxpbmVOYXZpZ2F0aW9uKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uQWxsb3dlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvPy5bcHJvcE5hbWVdID09PSBcImJ0dFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRlVG9QcmV2KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0ZVRvTmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFycm93TGVmdFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wTmFtZSA9IChpbmZvPy5pbmxpbmVPcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIgPyBcImlubGluZURpcmVjdGlvblwiIDogXCJibG9ja0RpcmVjdGlvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbkFsbG93ZWQgPSAoIWRpc2FibGVBcnJvd0tleXMgJiYgKGluZm8/LmlubGluZU9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIiA/IGFsbG93c0lubGluZU5hdmlnYXRpb24gOiBhbGxvd3NCbG9ja05hdmlnYXRpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb25BbGxvd2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8/Lltwcm9wTmFtZV0gPT09IFwicnRsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGVUb05leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRlVG9QcmV2KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcE5hbWUgPSAoaW5mbz8uaW5saW5lT3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiID8gXCJpbmxpbmVEaXJlY3Rpb25cIiA6IFwiYmxvY2tEaXJlY3Rpb25cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3Rpb25BbGxvd2VkID0gKCFkaXNhYmxlQXJyb3dLZXlzICYmIChpbmZvPy5pbmxpbmVPcmllbnRhdGlvbiA9PT0gXCJob3Jpem9udGFsXCIgPyBhbGxvd3NJbmxpbmVOYXZpZ2F0aW9uIDogYWxsb3dzQmxvY2tOYXZpZ2F0aW9uKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uQWxsb3dlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvPy5bcHJvcE5hbWVdID09PSBcInJ0bFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRlVG9QcmV2KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0ZVRvTmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiSG9tZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkaXNhYmxlSG9tZUVuZEtleXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0ZVRvRmlyc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJFbmRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGlzYWJsZUhvbWVFbmRLZXlzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGVUb0xhc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gdXNlTG9naWNhbERpcmVjdGlvblByb3BzKHVzZU1lcmdlZFByb3BzPFBhcmVudE9yQ2hpbGRFbGVtZW50Pih7IG9uS2V5RG93biB9LCBwcm9wcykpXG4gICAgICAgIH0sIFtdKSxcbiAgICB9XG5cblxufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlVHlwZWFoZWFkTmF2aWdhdGlvblJldHVyblR5cGVJbmZvIHtcbiAgICB0eXBlYWhlYWROYXZpZ2F0aW9uOiB7XG4gICAgICAgIGN1cnJlbnRUeXBlYWhlYWQ6IHN0cmluZyB8IG51bGw7XG4gICAgICAgIGludmFsaWRUeXBlYWhlYWQ6IGJvb2xlYW4gfCBudWxsO1xuICAgIH1cbn1cblxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlVHlwZWFoZWFkTmF2aWdhdGlvblJldHVyblR5cGVXaXRoSG9va3M8UGFyZW50T3JDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZVR5cGVhaGVhZE5hdmlnYXRpb25SZXR1cm5UeXBlSW5mbyB7XG4gICAgLyoqXG4gICAgICogQ2FuIGJlIHVzZWQgb24gZWl0aGVyIHRoZSBwYXJlbnQgb3IgZWFjaCBjaGlsZCBlbGVtZW50LlxuICAgICAqIFxuICAgICAqICoqU1RBQkxFKipcbiAgICAgKi9cbiAgICB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uUHJvcHM6IFVzZVR5cGVhaGVhZE5hdmlnYXRpb25Qcm9wczxQYXJlbnRPckNoaWxkRWxlbWVudD47XG5cbiAgICAvKiogKipTVEFCTEUqKiAqL1xuICAgIHVzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZDogVXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkO1xuXG59XG5cbmV4cG9ydCB0eXBlIFVzZVR5cGVhaGVhZE5hdmlnYXRpb25Qcm9wczxFIGV4dGVuZHMgRWxlbWVudD4gPSAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxFPjtcbmV4cG9ydCB0eXBlIFVzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZFJldHVyblR5cGUgPSB2b2lkO1xuXG5pbnRlcmZhY2UgVE5QIHtcbiAgICAvKipcbiAgICAgKiBBIGNvbGxhdG9yIHRvIHVzZSB3aGVuIGNvbXBhcmluZy4gSWYgbm90IHByb3ZpZGVkLCBzaW1wbHkgdXNlcyBgbG9jYWxlQ29tcGFyZWAgYWZ0ZXIgdHJhbnNmb3JtaW5nIGVhY2ggdG8gbG93ZXJjYXNlLCB3aGljaCB3aWxsLCBhdCBiZXN0LCB3b3JrIG9rYXkgaW4gRW5nbGlzaC5cbiAgICAgKi9cbiAgICBjb2xsYXRvcj86IEludGwuQ29sbGF0b3I7XG5cbiAgICBub1R5cGVhaGVhZD86IGJvb2xlYW47XG5cbiAgICB0eXBlYWhlYWRUaW1lb3V0PzogbnVtYmVyO1xuICAgIGdldEluZGV4KCk6IG51bWJlciB8IG51bGw7XG4gICAgc2V0SW5kZXgodmFsdWU6IG51bWJlciB8IG51bGwgfCAoKHByZXZpb3VzVmFsdWU6IG51bWJlciB8IG51bGwpID0+IChudW1iZXIgfCBudWxsKSkpOiB2b2lkO1xufVxuXG5leHBvcnQgdHlwZSBUeXBlYWhlYWROYXZpZ2F0aW9uT21pdHMgPSBrZXlvZiBUTlA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlVHlwZWFoZWFkTmF2aWdhdGlvblBhcmFtZXRlcnM8T21pdHMgZXh0ZW5kcyBUeXBlYWhlYWROYXZpZ2F0aW9uT21pdHM+IHtcbiAgICB0eXBlYWhlYWROYXZpZ2F0aW9uOiBPbWl0PFROUCwgT21pdHM+XG59XG5cbi8qKiBBcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBjaGlsZCAndXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkYCAqL1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkUGFyYW1ldGVycyB7XG4gICAgLyoqXG4gICAgICogSWYgcHJvdmlkZWQsIGFsbG93cyB0aGlzIGNvbXBvbmVudCB0byBiZSBuYXZpZ2F0ZWQgdG8gYnkgdHlwaW5nIHRoaXMgc3RyaW5nLiBcbiAgICAgKiBJdCBzaG91bGQgYmUgdGhlIHNhbWUgdGV4dCBjb250ZW50IGFzIHdoYXRldmVyJ3MgZGlzcGxheWVkLCBpZGVhbGx5LlxuICAgICAqL1xuICAgIHRleHQ6IHN0cmluZyB8IG51bGw7XG5cbiAgICBpbmRleDogbnVtYmVyO1xufVxuXG4vKiogVHlwZSBvZiB0aGUgY2hpbGQncyBzdWItaG9vayAqL1xuZXhwb3J0IHR5cGUgVXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkID0gKGFyZ3M6IFVzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZFBhcmFtZXRlcnMpID0+IFVzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZFJldHVyblR5cGU7XG5cblxuLyoqXG4gKiBBbGxvd3MgZm9yIHRoZSBzZWxlY3Rpb24gb2YgYSBtYW5hZ2VkIGNoaWxkIGJ5IHR5cGluZyB0aGUgZ2l2ZW4gdGV4dCBhc3NvY2lhdGVkIHdpdGggaXQuXG4gKiBcbiAqIEBzZWUgdXNlTGlzdE5hdmlnYXRpb24sIHdoaWNoIHBhY2thZ2VzIGV2ZXJ5dGhpbmcgdXAgdG9nZXRoZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uPFBhcmVudE9yQ2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4oeyB0eXBlYWhlYWROYXZpZ2F0aW9uOiB7IGNvbGxhdG9yLCBnZXRJbmRleCwgdHlwZWFoZWFkVGltZW91dCwgc2V0SW5kZXgsIG5vVHlwZWFoZWFkIH0gfTogVXNlVHlwZWFoZWFkTmF2aWdhdGlvblBhcmFtZXRlcnM8bmV2ZXI+KTogVXNlVHlwZWFoZWFkTmF2aWdhdGlvblJldHVyblR5cGVXaXRoSG9va3M8UGFyZW50T3JDaGlsZEVsZW1lbnQ+IHtcblxuXG4gICAgLy8gRm9yIHR5cGVhaGVhZCwga2VlcCB0cmFjayBvZiB3aGF0IG91ciBjdXJyZW50IFwic2VhcmNoXCIgc3RyaW5nIGlzIChpZiB3ZSBoYXZlIG9uZSlcbiAgICAvLyBhbmQgYWxzbyBjbGVhciBpdCBldmVyeSAxMDAwIG1zIHNpbmNlIHRoZSBsYXN0IHRpbWUgaXQgY2hhbmdlZC5cbiAgICAvLyBOZXh0LCBrZWVwIGEgbWFwcGluZyBvZiB0eXBlYWhlYWQgdmFsdWVzIHRvIGluZGljZXMgZm9yIGZhc3RlciBzZWFyY2hpbmcuXG4gICAgLy8gQW5kLCBmb3IgdGhlIHVzZXIncyBzYWtlLCBsZXQgdGhlbSBrbm93IHdoZW4gdGhlaXIgdHlwZWFoZWFkIGNhbid0IG1hdGNoIGFueXRoaW5nIGFueW1vcmVcbiAgICBjb25zdCBbY3VycmVudFR5cGVhaGVhZCwgc2V0Q3VycmVudFR5cGVhaGVhZCwgZ2V0Q3VycmVudFR5cGVhaGVhZF0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcbiAgICB1c2VUaW1lb3V0KHsgdGltZW91dDogdHlwZWFoZWFkVGltZW91dCA/PyAxMDAwLCBjYWxsYmFjazogKCkgPT4geyBzZXRDdXJyZW50VHlwZWFoZWFkKG51bGwpOyBzZXRJbnZhbGlkVHlwZWFoZWFkKG51bGwpOyB9LCB0cmlnZ2VySW5kZXg6IGN1cnJlbnRUeXBlYWhlYWQgfSk7XG4gICAgY29uc3Qgc29ydGVkVHlwZWFoZWFkSW5mbyA9IHVzZVJlZjx7IHRleHQ6IHN0cmluZywgdW5zb3J0ZWRJbmRleDogbnVtYmVyIH1bXT4oW10pO1xuICAgIGNvbnN0IFtpbnZhbGlkVHlwZWFoZWFkLCBzZXRJbnZhbGlkVHlwZWFoZWFkXSA9IHVzZVN0YXRlPGJvb2xlYW4gfCBudWxsPihmYWxzZSk7XG5cbiAgICAvLyBIYW5kbGUgdHlwZWFoZWFkIGZvciBpbnB1dCBtZXRob2QgZWRpdG9ycyBhcyB3ZWxsXG4gICAgLy8gRXNzZW50aWFsbHksIHdoZW4gYWN0aXZlLCBpZ25vcmUgZnVydGhlciBrZXlzIFxuICAgIC8vIGJlY2F1c2Ugd2UncmUgd2FpdGluZyBmb3IgYSBDb21wb3NpdGlvbkVuZCBldmVudFxuICAgIGNvbnN0IFssIHNldEltZUFjdGl2ZSwgZ2V0SW1lQWN0aXZlXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAgIC8vIEJlY2F1c2UgY29tcG9zaXRpb24gZXZlbnRzIGZpcmUgKmFmdGVyKiBrZXlkb3duIGV2ZW50cyBcbiAgICAvLyAoYnV0IHdpdGhpbiB0aGUgc2FtZSB0YXNrLCB3aGljaCwgVE9ETywgY291bGQgYmUgYnJvd3Nlci1kZXBlbmRlbnQpLFxuICAgIC8vIHdlIGNhbiB1c2UgdGhpcyB0byBrZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50IHdlJ3JlIGxpc3RlbmluZyBmb3Igb24gdGhlIGZpcnN0IGtleWRvd24uXG4gICAgY29uc3QgW25leHRUeXBlYWhlYWRDaGFyLCBzZXROZXh0VHlwZWFoZWFkQ2hhcl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAobmV4dFR5cGVhaGVhZENoYXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHNldEN1cnJlbnRUeXBlYWhlYWQodHlwZWFoZWFkID0+ICgodHlwZWFoZWFkID8/IFwiXCIpICsgbmV4dFR5cGVhaGVhZENoYXIpKTtcbiAgICAgICAgICAgIHNldE5leHRUeXBlYWhlYWRDaGFyKG51bGwpO1xuICAgICAgICB9XG4gICAgfSwgW25leHRUeXBlYWhlYWRDaGFyXSk7XG5cblxuICAgIGNvbnN0IGNvbXBhcmF0b3JTaGFyZWQgPSB1c2VTdGFibGVDYWxsYmFjaygoc2FmZUxoczogc3RyaW5nLCBzYWZlUmhzOiBzdHJpbmcpID0+IHtcbiAgICAgICAgbGV0IGNvbXBhcmU6IG51bWJlcjtcbiAgICAgICAgLy8gRm9yIHRoZSBwdXJwb3NlcyBvZiB0eXBlYWhlYWQsIG9ubHkgY29tcGFyZSBhIHN0cmluZyBvZiB0aGUgc2FtZSBzaXplIGFzIG91ciBjdXJyZW50bHkgdHlwZWQgc3RyaW5nLlxuICAgICAgICAvLyBCeSBub3JtYWxpemluZyB0aGVtIGZpcnN0LCB3ZSBlbnN1cmUgdGhpcyBieXRlLWJ5LWJ5dGUgaGFuZGxpbmcgb2YgcmF3IGNoYXJhY3RlciBkYXRhIHdvcmtzIG91dCBva2F5LlxuICAgICAgICBzYWZlTGhzID0gc2FmZUxocy5ub3JtYWxpemUoXCJORkRcIik7XG4gICAgICAgIHNhZmVSaHMgPSBzYWZlUmhzLm5vcm1hbGl6ZShcIk5GRFwiKVxuXG4gICAgICAgIGlmIChjb2xsYXRvcilcbiAgICAgICAgICAgIGNvbXBhcmUgPSBjb2xsYXRvci5jb21wYXJlKHNhZmVMaHMsIHNhZmVSaHMpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNvbXBhcmUgPSBzYWZlTGhzLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShzYWZlUmhzLnRvTG93ZXJDYXNlKCkgPz8gXCJcIik7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBhcmU7XG4gICAgfSk7XG5cbiAgICBjb25zdCBpbnNlcnRpbmdDb21wYXJhdG9yID0gdXNlU3RhYmxlQ2FsbGJhY2soKGxoczogc3RyaW5nLCByaHM6IHsgdGV4dDogc3RyaW5nOyB1bnNvcnRlZEluZGV4OiBudW1iZXI7IH0pID0+IHtcblxuICAgICAgICBpZiAodHlwZW9mIGxocyA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgcmhzLnRleHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wYXJhdG9yU2hhcmVkKGxocywgcmhzLnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChsaHMgYXMgdW5rbm93biBhcyBudW1iZXIpIC0gKHJocyBhcyB1bmtub3duIGFzIG51bWJlcik7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0eXBlYWhlYWRDb21wYXJhdG9yID0gdXNlU3RhYmxlQ2FsbGJhY2soKGxoczogc3RyaW5nLCByaHM6IHsgdGV4dDogc3RyaW5nOyB1bnNvcnRlZEluZGV4OiBudW1iZXI7IH0pID0+IHtcblxuICAgICAgICBpZiAodHlwZW9mIGxocyA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgcmhzLnRleHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIC8vIER1cmluZyB0eXBlYWhlYWQsIGFsbCBzdHJpbmdzIGxvbmdlciB0aGFuIG91cnMgc2hvdWxkIGJlIHRydW5jYXRlZFxuICAgICAgICAgICAgLy8gc28gdGhhdCB0aGV5J3JlIGFsbCBjb25zaWRlcmVkIGVxdWFsbHkgYnkgdGhhdCBwb2ludC5cbiAgICAgICAgICAgIHJldHVybiBjb21wYXJhdG9yU2hhcmVkKGxocywgcmhzLnRleHQuc3Vic3RyaW5nKDAsIGxocy5sZW5ndGgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAobGhzIGFzIHVua25vd24gYXMgbnVtYmVyKSAtIChyaHMgYXMgdW5rbm93biBhcyBudW1iZXIpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgaXNEaXNhYmxlZCA9IHVzZVN0YWJsZUdldHRlcihub1R5cGVhaGVhZCk7XG5cblxuICAgIGNvbnN0IHVzZVR5cGVhaGVhZE5hdmlnYXRpb25Qcm9wczogVXNlVHlwZWFoZWFkTmF2aWdhdGlvblByb3BzPFBhcmVudE9yQ2hpbGRFbGVtZW50PiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICh7IC4uLnByb3BzIH06IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFBhcmVudE9yQ2hpbGRFbGVtZW50Pik6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFBhcmVudE9yQ2hpbGRFbGVtZW50PiB7XG5cbiAgICAgICAgY29uc3Qgb25Db21wb3NpdGlvblN0YXJ0ID0gKF9lOiBDb21wb3NpdGlvbkV2ZW50KSA9PiB7IHNldEltZUFjdGl2ZSh0cnVlKSB9O1xuICAgICAgICBjb25zdCBvbkNvbXBvc2l0aW9uRW5kID0gKGU6IENvbXBvc2l0aW9uRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHNldE5leHRUeXBlYWhlYWRDaGFyKGUuZGF0YSk7XG4gICAgICAgICAgICBzZXRJbWVBY3RpdmUoZmFsc2UpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IG9uS2V5RG93biA9IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNEaXNhYmxlZCgpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgY29uc3QgaW1lQWN0aXZlID0gZ2V0SW1lQWN0aXZlKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGUua2V5O1xuXG4gICAgICAgICAgICAvLyBOb3QgaGFuZGxlZCBieSB0eXBlYWhlYWQgKGkuZS4gYXNzdW1lIHRoaXMgaXMgYSBrZXlib2FyZCBzaG9ydGN1dClcbiAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKCFpbWVBY3RpdmUgJiYgZS5rZXkgPT09IFwiQmFja3NwYWNlXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGxhc3QgY2hhcmFjdGVyIGluIGEgd2F5IHRoYXQgZG9lc24ndCBzcGxpdCBVVEYtMTYgc3Vycm9nYXRlcy5cbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50VHlwZWFoZWFkKHQgPT4gdCA9PT0gbnVsbCA/IG51bGwgOiBbLi4udF0ucmV2ZXJzZSgpLnNsaWNlKDEpLnJldmVyc2UoKS5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRoZSBrZXkgcHJvcGVydHkgcmVwcmVzZW50cyB0aGUgdHlwZWQgY2hhcmFjdGVyIE9SIHRoZSBcIm5hbWVkIGtleSBhdHRyaWJ1dGVcIiBvZiB0aGUga2V5IHByZXNzZWQuXG4gICAgICAgICAgICAvLyBUaGVyZSdzIG5vIGRlZmluaXRlIHdheSB0byB0ZWxsIHRoZSBkaWZmZXJlbmNlLCBidXQgZm9yIGFsbCBpbnRlbnRzIGFuZCBwdXJwb3Nlc1xuICAgICAgICAgICAgLy8gdGhlcmUgYXJlIG5vIG9uZS1jaGFyYWN0ZXIgbmFtZXMsIGFuZCB0aGVyZSBhcmUgbm8gbm9uLUFTQ0lJLWFscGhhIG5hbWVzLlxuICAgICAgICAgICAgLy8gVGh1cywgYW55IG9uZS1jaGFyYWN0ZXIgb3Igbm9uLUFTQ0lJIHZhbHVlIGZvciBga2V5YCBpcyAqYWxtb3N0IGNlcnRhaW5seSogYSB0eXBlZCBjaGFyYWN0ZXIuXG4gICAgICAgICAgICBjb25zdCBpc0NoYXJhY3RlcktleSA9IChrZXkubGVuZ3RoID09PSAxIHx8ICEvXltBLVphLXpdLy50ZXN0KGtleSkpO1xuICAgICAgICAgICAgaWYgKGlzQ2hhcmFjdGVyS2V5KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09IFwiIFwiICYmIChnZXRDdXJyZW50VHlwZWFoZWFkKCkgPz8gXCJcIikudHJpbSgpLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGRvIGFueXRoaW5nIGJlY2F1c2UgYSBzcGFjZWJhciBjYW4ndCBldmVyIFxuICAgICAgICAgICAgICAgICAgICAvLyBpbml0aWF0ZSBhIHR5cGVhaGVhZCwgb25seSBjb250aW51ZSBvbmUuXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gKFNwZWNpZmljYWxseSwgbGV0IHRoZSBldmVudCBjb250aW51ZSBwcm9wYWdhdGlvbiBpbiB0aGlzIGNhc2UpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBXb24ndCBiZSB0cnVlIGZvciB0aGUgZmlyc3Qga2V5ZG93blxuICAgICAgICAgICAgICAgICAgICAvLyBidXQgd2lsbCBiZSBvdmVyd3JpdHRlbiBiZWZvcmUgdXNlTGF5b3V0RWZmZWN0IGlzIGNhbGxlZFxuICAgICAgICAgICAgICAgICAgICAvLyB0byBhY3R1YWxseSBhcHBseSB0aGUgY2hhbmdlXG4gICAgICAgICAgICAgICAgICAgIGlmICghaW1lQWN0aXZlKVxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TmV4dFR5cGVhaGVhZENoYXIoa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHM8UGFyZW50T3JDaGlsZEVsZW1lbnQ+KHsgb25LZXlEb3duLCBvbkNvbXBvc2l0aW9uU3RhcnQsIG9uQ29tcG9zaXRpb25FbmQsIH0sIHByb3BzKTtcbiAgICB9LCBbXSk7XG5cbiAgICAvLyBIYW5kbGUgY2hhbmdlcyBpbiB0eXBlYWhlYWQgdGhhdCBjYXVzZSBjaGFuZ2VzIHRvIHRoZSB0YWJiYWJsZSBpbmRleFxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChjdXJyZW50VHlwZWFoZWFkICYmIHNvcnRlZFR5cGVhaGVhZEluZm8uY3VycmVudC5sZW5ndGgpIHtcblxuXG5cbiAgICAgICAgICAgIGNvbnN0IHNvcnRlZFR5cGVhaGVhZEluZGV4ID0gYmluYXJ5U2VhcmNoKHNvcnRlZFR5cGVhaGVhZEluZm8uY3VycmVudCwgY3VycmVudFR5cGVhaGVhZCwgdHlwZWFoZWFkQ29tcGFyYXRvcik7XG5cbiAgICAgICAgICAgIGlmIChzb3J0ZWRUeXBlYWhlYWRJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgdXNlciBoYXMgdHlwZWQgYW4gZW50cnkgdGhhdCBkb2Vzbid0IGV4aXN0IGluIHRoZSBsaXN0XG4gICAgICAgICAgICAgICAgLy8gKG9yIG1vcmUgc3BlY2lmaWNhbGx5IFwiZm9yIHdoaWNoIHRoZXJlIGlzIG5vIGVudHJ5IHRoYXQgc3RhcnRzIHdpdGggdGhhdCBpbnB1dFwiKVxuICAgICAgICAgICAgICAgIHNldEludmFsaWRUeXBlYWhlYWQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRJbnZhbGlkVHlwZWFoZWFkKGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICBXZSBrbm93IHJvdWdobHkgd2hlcmUsIGluIHRoZSBzb3J0ZWQgYXJyYXkgb2Ygc3RyaW5ncywgb3VyIG5leHQgdHlwZWFoZWFkIGxvY2F0aW9uIGlzLlxuICAgICAgICAgICAgICAgICAgQnV0IHJvdWdobHkgaXNuJ3QgZ29vZCBlbm91Z2ggaWYgdGhlcmUgYXJlIG11bHRpcGxlIG1hdGNoZXMuXG4gICAgICAgICAgICAgICAgICBUbyBjb252ZXJ0IG91ciBzb3J0ZWQgaW5kZXggdG8gdGhlIHVuc29ydGVkIGluZGV4IHdlIG5lZWQsIHdlIGhhdmUgdG8gZmluZCB0aGUgZmlyc3RcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQgdGhhdCBtYXRjaGVzIHVzICphbmQqIChpZiBhbnkgc3VjaCBleGlzdCkgaXMgKmFmdGVyKiBvdXIgY3VycmVudCBzZWxlY3Rpb24uXG5cbiAgICAgICAgICAgICAgICAgIEluIG90aGVyIHdvcmRzLCB0aGUgb25seSB3YXkgdHlwZWFoZWFkIG1vdmVzIGJhY2t3YXJkcyByZWxhdGl2ZSB0byBvdXIgY3VycmVudFxuICAgICAgICAgICAgICAgICAgcG9zaXRpb24gaXMgaWYgdGhlIG9ubHkgb3RoZXIgb3B0aW9uIGlzIGJlaGluZCB1cy5cblxuICAgICAgICAgICAgICAgICAgSXQncyBub3Qgc3BlY2lmaWVkIGluIFdBSS1BUklBIHdoYXQgdG8gZG8gaW4gdGhhdCBjYXNlLiAgSSBzdXBwb3NlIHdyYXAgYmFjayB0byB0aGUgc3RhcnQ/XG4gICAgICAgICAgICAgICAgICBUaG91Z2ggdGhlcmUncyBhbHNvIGEgY2FzZSBmb3IganVzdCBnb2luZyB1cHdhcmRzIHRvIHRoZSBuZWFyZXN0IHRvIHByZXZlbnQganVtcGluZXNzLlxuICAgICAgICAgICAgICAgICAgQnV0IGlmIHlvdSdyZSBhbHJlYWR5IGRvaW5nIHR5cGVhaGVhZCBvbiBhbiB1bnNvcnRlZCBsaXN0LCBsaWtlLCBqdW1waW5lc3MgY2FuJ3QgYmUgYXZvaWRlZC5cbiAgICAgICAgICAgICAgICAgIEkgZHVubm8uIEdvaW5nIGJhY2sgdG8gdGhlIHN0YXJ0IGlzIHRoZSBzaW1wbGlzdCB0aG91Z2guXG5cbiAgICAgICAgICAgICAgICAgIEJhc2ljYWxseSB3aGF0IHRoaXMgZG9lczogU3RhcnRpbmcgZnJvbSB3aGVyZSB3ZSBmb3VuZCBvdXJzZWx2ZXMgYWZ0ZXIgb3VyIGJpbmFyeSBzZWFyY2gsXG4gICAgICAgICAgICAgICAgICBzY2FuIGJhY2t3YXJkcyBhbmQgZm9yd2FyZHMgdGhyb3VnaCBhbGwgYWRqYWNlbnQgZW50cmllcyB0aGF0IGFsc28gY29tcGFyZSBlcXVhbGx5IHNvIHRoYXRcbiAgICAgICAgICAgICAgICAgIHdlIGNhbiBmaW5kIHRoZSBvbmUgd2hvc2UgYHVuc29ydGVkSW5kZXhgIGlzIHRoZSBsb3dlc3QgYW1vbmdzdCBhbGwgb3RoZXIgZXF1YWwgc3RyaW5nc1xuICAgICAgICAgICAgICAgICAgKGFuZCBhbHNvIHRoZSBsb3dlc3QgYHVuc29ydGVkSW5kZXhgIHlhZGRhIHlhZGRhIGV4Y2VwdCB0aGF0IGl0IGNvbWVzIGFmdGVyIHVzKS5cblxuICAgICAgICAgICAgICAgICAgVE9ETzogVGhlIGJpbmFyeSBzZWFyY2ggc3RhcnRzIHRoaXMgb2ZmIHdpdGggYSBzb2xpZCBPKGxvZyBuKSwgYnV0IG9uZS1jaGFyYWN0ZXIgXG4gICAgICAgICAgICAgICAgICBzZWFyY2hlcyBhcmUsIHRoYW5rcyB0byBwaWdlb25ob2xlIHByaW5jaXBhbCwgZXZlbnR1YWxseSBndWFyYW50ZWVkIHRvIGJlY29tZSBcbiAgICAgICAgICAgICAgICAgIE8obipsb2cgbikuIFRoaXMgaXMgYW5ub3lpbmcgYnV0IHByb2JhYmx5IG5vdCBlYXNpbHkgc29sdmFibGU/IFRoZXJlIGNvdWxkIGJlIGFuIFxuICAgICAgICAgICAgICAgICAgZXhjZXB0aW9uIGZvciBvbmUtY2hhcmFjdGVyIHN0cmluZ3MsIGJ1dCB0aGF0J3MganVzdCBraWNraW5nIHRoZSBjYW4gZG93biBcbiAgICAgICAgICAgICAgICAgIHRoZSByb2FkLiBNYXliZSBvbmUgb3IgdHdvIGNoYXJhY3RlcnMgd291bGQgYmUgZ29vZCBlbm91Z2ggdGhvdWdoLlxuICAgICAgICAgICAgICAgICovXG5cblxuICAgICAgICAgICAgICAgIC8vIFRoZXNlIGFyZSB1c2VkIHRvIGtlZXAgdHJhY2sgb2YgdGhlIGNhbmRpZGF0ZXMnIHBvc2l0aW9ucyBpbiBib3RoIG91ciBzb3J0ZWQgYXJyYXkgYW5kIHRoZSB1bnNvcnRlZCBET00uXG4gICAgICAgICAgICAgICAgbGV0IGxvd2VzdFVuc29ydGVkSW5kZXhBbGw6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICAgICAgICAgICAgICAgIGxldCBsb3dlc3RTb3J0ZWRJbmRleEFsbCA9IHNvcnRlZFR5cGVhaGVhZEluZGV4O1xuXG4gICAgICAgICAgICAgICAgLy8gVGhlc2UgdHdvIGFyZSBvbmx5IHNldCBmb3IgZWxlbWVudHMgdGhhdCBhcmUgYWhlYWQgb2YgdXMsIGJ1dCB0aGUgcHJpbmNpcGxlJ3MgdGhlIHNhbWUgb3RoZXJ3aXNlXG4gICAgICAgICAgICAgICAgbGV0IGxvd2VzdFVuc29ydGVkSW5kZXhOZXh0OiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgICAgICAgICAgICAgICBsZXQgbG93ZXN0U29ydGVkSW5kZXhOZXh0ID0gc29ydGVkVHlwZWFoZWFkSW5kZXg7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVCZXN0Rml0ID0gKHU6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobG93ZXN0VW5zb3J0ZWRJbmRleEFsbCA9PSBudWxsIHx8IHUgPCBsb3dlc3RVbnNvcnRlZEluZGV4QWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dlc3RVbnNvcnRlZEluZGV4QWxsID0gdTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VzdFNvcnRlZEluZGV4QWxsID0gaTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoKGxvd2VzdFVuc29ydGVkSW5kZXhOZXh0ID09IG51bGwgfHwgdSA8IGxvd2VzdFVuc29ydGVkSW5kZXhOZXh0KSAmJiB1ID4gKGdldEluZGV4KCkgPz8gLUluZmluaXR5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXN0VW5zb3J0ZWRJbmRleE5leHQgPSB1O1xuICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXN0U29ydGVkSW5kZXhOZXh0ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBpID0gc29ydGVkVHlwZWFoZWFkSW5kZXg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiB0eXBlYWhlYWRDb21wYXJhdG9yKGN1cnJlbnRUeXBlYWhlYWQsIHNvcnRlZFR5cGVhaGVhZEluZm8uY3VycmVudFtpXSkgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVCZXN0Rml0KHNvcnRlZFR5cGVhaGVhZEluZm8uY3VycmVudFtpXS51bnNvcnRlZEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgLS1pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGkgPSBzb3J0ZWRUeXBlYWhlYWRJbmRleDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSA8IHNvcnRlZFR5cGVhaGVhZEluZm8uY3VycmVudC5sZW5ndGggJiYgdHlwZWFoZWFkQ29tcGFyYXRvcihjdXJyZW50VHlwZWFoZWFkLCBzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnRbaV0pID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQmVzdEZpdChzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnRbaV0udW5zb3J0ZWRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICsraTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobG93ZXN0VW5zb3J0ZWRJbmRleE5leHQgIT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHNldEluZGV4KHNvcnRlZFR5cGVhaGVhZEluZm8uY3VycmVudFtsb3dlc3RTb3J0ZWRJbmRleE5leHRdLnVuc29ydGVkSW5kZXgpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxvd2VzdFVuc29ydGVkSW5kZXhBbGwgIT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHNldEluZGV4KHNvcnRlZFR5cGVhaGVhZEluZm8uY3VycmVudFtsb3dlc3RTb3J0ZWRJbmRleEFsbF0udW5zb3J0ZWRJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbY3VycmVudFR5cGVhaGVhZF0pO1xuXG4gICAgY29uc3QgdXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkID0gdXNlQ2FsbGJhY2s8VXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkPigoeyBpbmRleCwgdGV4dCB9KSA9PiB7XG5cbiAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0ZXh0KSB7XG5cbiAgICAgICAgICAgICAgICAvLyBGaW5kIHdoZXJlIHRvIGluc2VydCB0aGlzIGl0ZW0uXG4gICAgICAgICAgICAgICAgLy8gQmVjYXVzZSBhbGwgaW5kZXggdmFsdWVzIHNob3VsZCBiZSB1bmlxdWUsIHRoZSByZXR1cm5lZCBzb3J0ZWRJbmRleFxuICAgICAgICAgICAgICAgIC8vIHNob3VsZCBhbHdheXMgcmVmZXIgdG8gYSBuZXcgbG9jYXRpb24gKGkuZS4gYmUgbmVnYXRpdmUpICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IHNvcnRlZEluZGV4ID0gYmluYXJ5U2VhcmNoKHNvcnRlZFR5cGVhaGVhZEluZm8uY3VycmVudCwgdGV4dCwgaW5zZXJ0aW5nQ29tcGFyYXRvcik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5hc3NlcnQoc29ydGVkSW5kZXggPCAwIHx8IGluc2VydGluZ0NvbXBhcmF0b3Ioc29ydGVkVHlwZWFoZWFkSW5mby5jdXJyZW50W3NvcnRlZEluZGV4XS50ZXh0LCB7IHVuc29ydGVkSW5kZXg6IGluZGV4LCB0ZXh0IH0pID09IDApO1xuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWRJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc29ydGVkVHlwZWFoZWFkSW5mby5jdXJyZW50LnNwbGljZSgtc29ydGVkSW5kZXggLSAxLCAwLCB7IHRleHQsIHVuc29ydGVkSW5kZXg6IGluZGV4IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc29ydGVkVHlwZWFoZWFkSW5mby5jdXJyZW50LnNwbGljZShzb3J0ZWRJbmRleCwgMCwgeyB0ZXh0LCB1bnNvcnRlZEluZGV4OiBpbmRleCB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHVubW91bnRpbmcsIGZpbmQgd2hlcmUgd2Ugd2VyZSBhbmQgcmVtb3ZlIG91cnNlbHZlcy5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWdhaW4sIHdlIHNob3VsZCBhbHdheXMgZmluZCBvdXJzZWx2ZXMgYmVjYXVzZSB0aGVyZSBzaG91bGQgYmUgbm8gZHVwbGljYXRlIHZhbHVlcyBpZiBlYWNoIGluZGV4IGlzIHVuaXF1ZS5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc29ydGVkSW5kZXggPSBiaW5hcnlTZWFyY2goc29ydGVkVHlwZWFoZWFkSW5mby5jdXJyZW50LCB0ZXh0LCBpbnNlcnRpbmdDb21wYXJhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5hc3NlcnQoc29ydGVkSW5kZXggPCAwIHx8IGluc2VydGluZ0NvbXBhcmF0b3Ioc29ydGVkVHlwZWFoZWFkSW5mby5jdXJyZW50W3NvcnRlZEluZGV4XS50ZXh0LCB7IHVuc29ydGVkSW5kZXg6IGluZGV4LCB0ZXh0IH0pID09IDApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3J0ZWRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnQuc3BsaWNlKHNvcnRlZEluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgW3RleHRdKTtcblxuICAgICAgICByZXR1cm47XG5cbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uQ2hpbGQsXG4gICAgICAgIHVzZVR5cGVhaGVhZE5hdmlnYXRpb25Qcm9wcyxcblxuICAgICAgICB0eXBlYWhlYWROYXZpZ2F0aW9uOiB7XG4gICAgICAgICAgICBjdXJyZW50VHlwZWFoZWFkLFxuICAgICAgICAgICAgaW52YWxpZFR5cGVhaGVhZCxcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4vKipcbiAqIFlvdXIgdXN1YWwgYmluYXJ5IHNlYXJjaCBpbXBsZW1lbnRhdGlvbi5cbiAqIFxuICogSXQncyB1c2VkIGhlcmUgdG8gcXVpY2tseSBmaW5kIGEgZ29vZCBzcG90IHRvIHN0YXJ0IHNlYXJjaGluZyBmb3Igb3VyIG5leHQgdHlwZWFoZWFkIGNhbmRpZGF0ZS5cbiAqIEBwYXJhbSBhcnJheSBUaGUgYXJyYXkgdG8gc2VhcmNoIHRocm91Z2hcbiAqIEBwYXJhbSB3YW50ZWQgVGhlIHZhbHVlIHlvdSdkIGxpa2UgdG8gZmluZFxuICogQHBhcmFtIGNvbXBhcmF0b3IgQ29tcGFyZXMgYHdhbnRlZGAgd2l0aCB0aGUgY3VycmVudCB2YWx1ZSBpbiBgYXJyYXlgXG4gKiBAcmV0dXJucyBBIG5vbi1uZWdhdGl2ZSB2YWx1ZSBpZiBgd2FudGVkYCB3YXMgZm91bmQsIGFuZCBhIG5lZ2F0aXZlIG51bWJlciBpZiBub3QuIFxuICogVGhlIGFic29sdXRlIHZhbHVlIG9mIHRoaXMgbnVtYmVyLCBtaW51cyBvbmUsIGlzIHdoZXJlIGB3YW50ZWRgICp3b3VsZCogYmUgZm91bmQgaWYgaXQgKndhcyogaW4gYGFycmF5YFxuICovXG5leHBvcnQgZnVuY3Rpb24gYmluYXJ5U2VhcmNoPFQsIFUsIEYgZXh0ZW5kcyAobGhzOiBVLCByaHM6IFQpID0+IG51bWJlcj4oYXJyYXk6IFRbXSwgd2FudGVkOiBVLCBjb21wYXJhdG9yOiBGKTogbnVtYmVyIHtcbiAgICBsZXQgZmlyc3RJbmRleCA9IDA7XG4gICAgbGV0IGxhc3RJbmRleCA9IGFycmF5Lmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKGZpcnN0SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgIGNvbnN0IHRlc3RJbmRleCA9IChsYXN0SW5kZXggKyBmaXJzdEluZGV4KSA+PiAxO1xuICAgICAgICBjb25zdCBjb21wYXJpc29uUmVzdWx0ID0gY29tcGFyYXRvcih3YW50ZWQsIGFycmF5W3Rlc3RJbmRleF0pO1xuXG4gICAgICAgIGlmIChjb21wYXJpc29uUmVzdWx0ID4gMCkge1xuICAgICAgICAgICAgZmlyc3RJbmRleCA9IHRlc3RJbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29tcGFyaXNvblJlc3VsdCA8IDApIHtcbiAgICAgICAgICAgIGxhc3RJbmRleCA9IHRlc3RJbmRleCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGVzdEluZGV4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIC1maXJzdEluZGV4IC0gMTtcbn1cbiIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XG5pbXBvcnQgeyBTdGF0ZVVwZGF0ZXIsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCB7IENoaWxkRmxhZ09wZXJhdGlvbnMsIE1hbmFnZWRDaGlsZE9taXRzLCBNYW5hZ2VkQ2hpbGRyZW5PbWl0cywgT25DaGlsZHJlbk1vdW50Q2hhbmdlLCB1c2VDaGlsZHJlbkZsYWcsIFVzZU1hbmFnZWRDaGlsZFBhcmFtZXRlcnMsIHVzZU1hbmFnZWRDaGlsZHJlbiwgVXNlTWFuYWdlZENoaWxkcmVuUGFyYW1ldGVycywgVXNlTWFuYWdlZENoaWxkcmVuUmV0dXJuVHlwZUluZm8gfSBmcm9tIFwiLi91c2UtY2hpbGQtbWFuYWdlclwiO1xuaW1wb3J0IHsgdXNlSGFzRm9jdXMgfSBmcm9tIFwiLi91c2UtaGFzLWZvY3VzXCI7XG5pbXBvcnQgeyB1c2VNZXJnZWRQcm9wcyB9IGZyb20gXCIuL3VzZS1tZXJnZWQtcHJvcHNcIjtcbmltcG9ydCB7IHVzZVBhc3NpdmVTdGF0ZSB9IGZyb20gXCIuL3VzZS1wYXNzaXZlLXN0YXRlXCI7XG5pbXBvcnQgeyB1c2VTdGFibGVDYWxsYmFjayB9IGZyb20gXCIuL3VzZS1zdGFibGUtY2FsbGJhY2tcIjtcbmltcG9ydCB7IHVzZVN0YWJsZUdldHRlciB9IGZyb20gXCIuL3VzZS1zdGFibGUtZ2V0dGVyXCI7XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCIuL3VzZS1zdGF0ZVwiO1xuXG4vL2V4cG9ydCB0eXBlIFVzZVJvdmluZ1RhYkluZGV4Q2hpbGRJbmZvPEsgZXh0ZW5kcyBzdHJpbmcsIEkgZXh0ZW5kcyBSb3ZpbmdUYWJJbmRleENoaWxkSW5mb0Jhc2U8Sz4+ID0gUmVxdWlyZWQ8ST4gJiBGbGFnZ2FibGVDaGlsZEluZm88XCJ0YWJiYWJsZVwiPiAmIHtcbi8vfTtcblxuZXhwb3J0IHR5cGUgT25UYWJiYWJsZUluZGV4Q2hhbmdlID0gKHRhYmJhYmxlSW5kZXg6IG51bWJlciB8IG51bGwpID0+IHZvaWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlUm92aW5nVGFiSW5kZXhTdWJJbmZvPEUgZXh0ZW5kcyBFbGVtZW50LCBDPiB7XG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGFiYmluZyB0aHJvdWdoIHRoaXMgY29tcG9uZW50IHdpbGwgY2F1c2UgdGhlIHJlZmVyZW5jZWQgZWxlbWVudCB0byBiZSBmb2N1c2VkLlxuICAgICAqIFxuICAgICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhpcyBiZWhhdmlvciB0byBkbyBzb21ldGhpbmcgZGlmZmVyZW50IGlmIHlvdSdkIGxpa2UuXG4gICAgICovXG4gICAgZm9jdXNTZWxmKCk6IHZvaWQ7XG5cbiAgICAvL2JsdXJTZWxmKCk6IHZvaWQ7XG5cbiAgICBnZXRFbGVtZW50KCk6IEUgfCBudWxsO1xuXG4gICAgaGlkZGVuOiBib29sZWFuO1xuXG4gICAgc3ViSW5mbzogQztcbn1cblxuaW50ZXJmYWNlIFJUSVAge1xuICAgIC8vIENhbGxlZCBkdXJpbmcgYW4gZWZmZWN0IGFmdGVyIHRoZSBjb21wb25lbnQgaGFzIHJlbmRlcmVkIGl0c2VsZiBpbiBhIHRhYmJhYmxlIHN0YXRlXG4gICAgb25UYWJiYWJsZVJlbmRlcj86IChpbmRleDogbnVtYmVyKSA9PiB2b2lkO1xuXG4gICAgb25UYWJiYWJsZUluZGV4Q2hhbmdlPzogT25UYWJiYWJsZUluZGV4Q2hhbmdlO1xuXG4gICAgLy9vblRhYmJlZEluVG8/OiAoKSA9PiB2b2lkO1xuICAgIC8vb25UYWJiZWRPdXRPZj86ICgpID0+IHZvaWQ7XG5cbiAgICBpbml0aWFsSW5kZXg/OiBudW1iZXI7XG59XG5leHBvcnQgdHlwZSBSb3ZpbmdUYWJJbmRleFBhcmFtZXRlcnNPbWl0cyA9IGtleW9mIFJUSVA7XG5leHBvcnQgaW50ZXJmYWNlIFVzZVJvdmluZ1RhYkluZGV4UGFyYW1ldGVyczxSdGlPbWl0cyBleHRlbmRzIFJvdmluZ1RhYkluZGV4UGFyYW1ldGVyc09taXRzLCBNY09taXRzIGV4dGVuZHMgTWFuYWdlZENoaWxkcmVuT21pdHM+IGV4dGVuZHMgVXNlTWFuYWdlZENoaWxkcmVuUGFyYW1ldGVyczxudW1iZXIsIE1jT21pdHM+IHtcbiAgICByb3ZpbmdUYWJJbmRleDogT21pdDxSVElQLCBSdGlPbWl0cz47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlUm92aW5nVGFiSW5kZXhSZXR1cm5UeXBlSW5mbzxSdGlTdWJJbmZvLCBFeHRyYUZsYWdLZXlzIGV4dGVuZHMgc3RyaW5nPiBleHRlbmRzIFVzZU1hbmFnZWRDaGlsZHJlblJldHVyblR5cGVJbmZvPG51bWJlciwgUnRpU3ViSW5mbywgRXh0cmFGbGFnS2V5cz4ge1xuICAgIHJvdmluZ1RhYkluZGV4OiB7XG4gICAgICAgIC8qKiAqKlNUQUJMRSoqICovXG4gICAgICAgIHNldFRhYmJhYmxlSW5kZXg6ICh1cGRhdGVyOiBQYXJhbWV0ZXJzPFN0YXRlVXBkYXRlcjxudW1iZXIgfCBudWxsPj5bMF0sIGZyb21Vc2VySW50ZXJhY3Rpb246IGJvb2xlYW4pID0+IHZvaWQ7XG4gICAgICAgIC8qKiAqKlNUQUJMRSoqICovXG4gICAgICAgIGdldFRhYmJhYmxlSW5kZXg6ICgpID0+IG51bWJlciB8IG51bGw7XG4gICAgICAgIC8qKiAqKlNUQUJMRSoqICovXG4gICAgICAgIGZvY3VzU2VsZjogKCkgPT4gdm9pZDtcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlUm92aW5nVGFiSW5kZXhSZXR1cm5UeXBlV2l0aEhvb2tzPENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIFJ0aVN1YkluZm8sIEV4dHJhRmxhZ0tleXMgZXh0ZW5kcyBzdHJpbmc+IGV4dGVuZHNcbiAgICBVc2VSb3ZpbmdUYWJJbmRleFJldHVyblR5cGVJbmZvPFVzZVJvdmluZ1RhYkluZGV4U3ViSW5mbzxDaGlsZEVsZW1lbnQsIFJ0aVN1YkluZm8+LCBFeHRyYUZsYWdLZXlzIHwgXCJ0YWJiYWJsZVwiPlxue1xuICAgIC8qKiAqKlNUQUJMRSoqICovXG4gICAgdXNlUm92aW5nVGFiSW5kZXhDaGlsZDogVXNlUm92aW5nVGFiSW5kZXhDaGlsZDxDaGlsZEVsZW1lbnQsIFJ0aVN1YkluZm8sIEV4dHJhRmxhZ0tleXM+O1xufVxuXG5leHBvcnQgdHlwZSBSb3ZpbmdUYWJJbmRleENoaWxkT21pdHMgPSBrZXlvZiBVc2VSb3ZpbmdUYWJJbmRleFN1YkluZm88YW55LCBhbnk+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQYXJhbWV0ZXJzPFJ0aVN1YkluZm8sIEV4dHJhRmxhZ0tleXMgZXh0ZW5kcyBzdHJpbmcsIFJ0aWNPbWl0cyBleHRlbmRzIFJvdmluZ1RhYkluZGV4Q2hpbGRPbWl0cywgTWNPbWl0cyBleHRlbmRzIE1hbmFnZWRDaGlsZE9taXRzLCBTdWJiZXN0SW5mbz4gZXh0ZW5kc1xuICAgIFVzZU1hbmFnZWRDaGlsZFBhcmFtZXRlcnM8bnVtYmVyLCBVc2VSb3ZpbmdUYWJJbmRleFN1YkluZm88YW55LCBSdGlTdWJJbmZvPiwgRXh0cmFGbGFnS2V5cyB8IFwidGFiYmFibGVcIiwgTWNPbWl0cyB8IFwic3ViSW5mb1wiPiB7XG4gICAgcm92aW5nVGFiSW5kZXg6IE9taXQ8UGFydGlhbDxPbWl0PFVzZVJvdmluZ1RhYkluZGV4U3ViSW5mbzxhbnksIGFueT4sIFwiZ2V0RWxlbWVudFwiIHwgXCJzdWJJbmZvXCI+PiwgUnRpY09taXRzPjtcbiAgICBzdWJJbmZvOiBTdWJiZXN0SW5mbztcbn1cblxuZXhwb3J0IHR5cGUgVXNlUm92aW5nVGFiSW5kZXhDaGlsZDxDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBSdGlTdWJJbmZvLCBFeHRyYUZsYWdLZXlzIGV4dGVuZHMgc3RyaW5nPiA9IChhOiBVc2VSb3ZpbmdUYWJJbmRleENoaWxkUGFyYW1ldGVyczxSdGlTdWJJbmZvLCBFeHRyYUZsYWdLZXlzLCBuZXZlciwgbmV2ZXIsIFJ0aVN1YkluZm8+KSA9PiBVc2VSb3ZpbmdUYWJJbmRleENoaWxkUmV0dXJuVHlwZVdpdGhIb29rczxDaGlsZEVsZW1lbnQ+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZVJvdmluZ1RhYkluZGV4Q2hpbGRSZXR1cm5UeXBlSW5mbzxDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiB7XG4gICAgcm92aW5nVGFiSW5kZXg6IHtcbiAgICAgICAgdGFiYmFibGU6IGJvb2xlYW47XG4gICAgICAgIC8qKiAqKlNUQUJMRSoqICovXG4gICAgICAgIGdldFRhYmJhYmxlKCk6IGJvb2xlYW47XG4gICAgICAgIC8qKiAqKlNUQUJMRSoqICovXG4gICAgICAgIGdldEVsZW1lbnQoKTogQ2hpbGRFbGVtZW50IHwgbnVsbDtcbiAgICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIFVzZVJvdmluZ1RhYkluZGV4Q2hpbGRSZXR1cm5UeXBlV2l0aEhvb2tzPENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlUm92aW5nVGFiSW5kZXhDaGlsZFJldHVyblR5cGVJbmZvPENoaWxkRWxlbWVudD4ge1xuICAgIC8qKiAqVW5zdGFibGUqICovXG4gICAgdXNlUm92aW5nVGFiSW5kZXhDaGlsZFByb3BzOiAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPENoaWxkRWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPENoaWxkRWxlbWVudD47XG59XG5cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgcm92aW5nIHRhYmluZGV4IHN5c3RlbSB3aGVyZSBvbmx5IG9uZSBcImZvY3VzYWJsZVwiXG4gKiBjb21wb25lbnQgaW4gYSBzZXQgaXMgYWJsZSB0byByZWNlaXZlIGEgdGFiIGZvY3VzLiAqV2hpY2gqXG4gKiBvZiB0aG9zZSBlbGVtZW50cyByZWNlaXZlcyBmb2N1cyBpcyBkZXRlcm1pbmVkIGJ5IHlvdSwgYnV0IGl0J3NcbiAqIHJlY29tbWVuZGVkIHRvIG9mZmxvYWQgdGhhdCBsb2dpYyB0aGVuIHRvIGFub3RoZXIgaG9vaywgbGlrZVxuICogYHVzZUxpbmVhck5hdmlnYXRpb25gLCB3aGljaCBsZXRzIHlvdSBjaGFuZ2UgdGhlIHRhYmJhYmxlXG4gKiBlbGVtZW50IHdpdGggdGhlIGFycm93IGtleXMsIGB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uYCwgd2hpY2hcbiAqIGxldHMgeW91IGNoYW5nZSB0aGUgdGFiYmFibGUgaW5kZXggd2l0aCB0eXBlYWhlYWQsIG9yXG4gKiBgdXNlTGlzdE5hdmlnYXRpb25gIGlmIHlvdSBqdXN0IHdhbnQgZXZlcnl0aGluZyBidW5kbGVkIHRvZ2V0aGVyLlxuICogXG4gKiBOb3RlIHRoYXQgdGhlIGNoaWxkIGhvb2sgcmV0dXJuZWQgYnkgdGhpcyBmdW5jdGlvbiBtdXN0IGJlIHVzZWRcbiAqIGJ5IGV2ZXJ5IGNoaWxkIHRoYXQgdXNlcyB0aGlzIHJvdmluZyB0YWJpbmRleCBsb2dpYy4gIFRoZVxuICogcHJvcC1tb2RpZnlpbmcgaG9vayAqdGhhdCogaG9vayByZXR1cm5zIHNob3VsZCB0aGVuIGJlIHVzZWRcbiAqIG9uIHRoZSBjaGlsZCdzIGVsZW1lbnQsIGFzIHdlbGwgYXMgYW55IG90aGVyIGVsZW1lbnRzIHlvdSdkIGxpa2VcbiAqIHRvIGJlIGV4cGxpY2l0bHkgbWFkZSB1bnRhYmJhYmxlIHRvby5cbiAqIFxuICogYHNob3VsZEZvY3VzT25DaGFuZ2VgIHNob3VsZCByZXR1cm4gdHJ1ZSBpZiBmb2N1cyBpcyBcbiAqIGNvbnRhaW5lZCB3aXRoaW4gd2hhdGV2ZXIgZWxlbWVudCBjb250YWlucyB0aGUgcm92aW5nIHRhYiBpbmRleC5cbiAqIEdlbmVyYWxseSBhcyBzaW1wbGUgYXMgdGhlIGZvbGxvd2luZzpcbiAqIGBgYFxuICogY29uc3QgW2ZvY3VzZWRJbm5lciwgc2V0Rm9jdXNlZElubmVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqIGNvbnN0IHsgdXNlSGFzRm9jdXNQcm9wcyB9ID0gdXNlSGFzRm9jdXM8UGFyZW50RWxlbWVudD4oeyBzZXRGb2N1c2VkSW5uZXIgfSk7XG4gKiBjb25zdCBmb2N1c09uQ2hhbmdlID0gKGZvY3VzZWRJbm5lciAhPSBmYWxzZSk7XG4gKiBgYGBcbiAqIEl0J3Mgbm90IGluY2x1ZGVkIGhlcmUgYmVjYXVzZSBgdXNlUm92aW5nVGFiSW5kZXhgIGRvZXNuJ3Qga25vdyBcbiAqIGFueXRoaW5nIGFib3V0IHRoZSBjb250YWluZXIgZWxlbWVudCwgb25seSBjaGlsZHJlbiBlbGVtZW50cy5cbiAqIEFuZCBqdXN0IGFzIHdlbGwhIENoaWxkcmVuIHNob3VsZCBiZSBhbGxvd2VkIGF0IHRoZSByb290LCBcbiAqIHJlZ2FyZGxlc3Mgb2YgaWYgaXQncyB0aGUgd2hvbGUgYXBwIG9yIGp1c3QgYSBnaXZlbiBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3ZpbmdUYWJJbmRleDxDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBSdGlTdWJJbmZvLCBFeHRyYUZsYWdLZXlzIGV4dGVuZHMgc3RyaW5nPihwYXJlbnRQYXJhbWV0ZXJzOiBVc2VSb3ZpbmdUYWJJbmRleFBhcmFtZXRlcnM8bmV2ZXIsIG5ldmVyPik6IFVzZVJvdmluZ1RhYkluZGV4UmV0dXJuVHlwZVdpdGhIb29rczxDaGlsZEVsZW1lbnQsIFJ0aVN1YkluZm8sIEV4dHJhRmxhZ0tleXM+IHtcblxuICAgIGxldCB7IHJvdmluZ1RhYkluZGV4OiB7IGluaXRpYWxJbmRleCwgb25UYWJiYWJsZVJlbmRlciwgb25UYWJiYWJsZUluZGV4Q2hhbmdlIH0sIG1hbmFnZWRDaGlsZHJlbjogeyBvbkFmdGVyQ2hpbGRMYXlvdXRFZmZlY3QsIG9uQ2hpbGRyZW5Nb3VudENoYW5nZSB9IH0gPSBwYXJlbnRQYXJhbWV0ZXJzO1xuXG4gICAgaW5pdGlhbEluZGV4ID8/PSAwO1xuICAgIGNvbnN0IHN0YWJsZU9uVGFiYmFibGVSZW5kZXIgPSB1c2VTdGFibGVDYWxsYmFjayhvblRhYmJhYmxlUmVuZGVyID8/ICgoKSA9PiB7IH0pKTtcbiAgICAvKmNvbnN0IFtfZ2V0QW55Rm9jdXNlZCwgc2V0QW55Rm9jdXNlZF0gPSB1c2VQYXNzaXZlU3RhdGU8bnVtYmVyPih1c2VTdGFibGVDYWxsYmFjaygobmV3Q291bnQ6IG51bWJlciwgb2xkQ291bnQ6IG51bWJlciB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgICBpZiAob2xkQ291bnQgPT0gMCAmJiBuZXdDb3VudCA+IDApIHtcbiAgICAgICAgICAgIG9uVGFiYmVkSW5Ubz8uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3Q291bnQgPT0gMCAmJiAob2xkQ291bnQgPz8gMCkgPiAwKSB7XG4gICAgICAgICAgICBvblRhYmJlZE91dE9mPy4oKTtcbiAgICAgICAgfVxuICAgIH0pLCByZXR1cm5aZXJvKTsqL1xuXG4gICAgLy8gS2VlcCB0cmFjayBvZiB0aHJlZSB0aGluZ3MgcmVsYXRlZCB0byB0aGUgY3VycmVudGx5IHRhYmJhYmxlIGVsZW1lbnQncyBpbmRleDpcbiAgICAvLyBXaGF0IGl0IGlzLCBhbmQgd2hldGhlciwgd2hlbiB3ZSByZW5kZXIgdGhpcyBjb21wb25lbnQgYW5kIGl0J3MgY2hhbmdlZCwgdG8gYWxzbyBmb2N1cyB0aGUgZWxlbWVudCB0aGF0IHdhcyBtYWRlIHRhYmJhYmxlLlxuICAgIGNvbnN0IFtnZXRUYWJiYWJsZUluZGV4LCBzZXRUYWJiYWJsZUluZGV4Ml0gPSB1c2VQYXNzaXZlU3RhdGU8bnVtYmVyIHwgbnVsbD4ob25UYWJiYWJsZUluZGV4Q2hhbmdlLCB1c2VDYWxsYmFjaygoKSA9PiB7IHJldHVybiBpbml0aWFsSW5kZXggPz8gMCB9LCBbXSkpO1xuICAgIGNvbnN0IHNldFRhYmJhYmxlSW5kZXggPSB1c2VDYWxsYmFjaygodXBkYXRlcjogUGFyYW1ldGVyczxTdGF0ZVVwZGF0ZXI8bnVtYmVyIHwgbnVsbD4+WzBdLCBmcm9tVXNlckludGVyYWN0aW9uOiBib29sZWFuKSA9PiB7XG4gICAgICAgIHNldFRhYmJhYmxlSW5kZXgyKChwcmV2SW5kZXgpID0+IHtcbiAgICAgICAgICAgIGxldCBuZXh0SW5kZXggPSBwcmV2SW5kZXg7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXBkYXRlciA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgIG5leHRJbmRleCA9IHVwZGF0ZXIocHJldkluZGV4ID8/IG51bGwpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG5leHRJbmRleCA9IHVwZGF0ZXI7XG5cbiAgICAgICAgICAgIG5leHRJbmRleCA9IGNoYW5nZUluZGV4KG5leHRJbmRleCk7XG5cbiAgICAgICAgICAgIGlmIChwcmV2SW5kZXggIT0gbmV4dEluZGV4KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dENoaWxkID0gbmV4dEluZGV4ID09IG51bGwgPyBudWxsIDogcGFyZW50UmV0dXJuVHlwZS5tYW5hZ2VkQ2hpbGRyZW4uY2hpbGRyZW4uZ2V0QXQobmV4dEluZGV4KTtcbiAgICAgICAgICAgICAgICAvL2NvbnN0IHByZXZDaGlsZCA9IHByZXZJbmRleCA9PSBudWxsID8gbnVsbCA6IHBhcmVudFJldHVyblR5cGUubWFuYWdlZENoaWxkcmVuLmNoaWxkcmVuLmdldEF0KHByZXZJbmRleCk7XG5cbiAgICAgICAgICAgICAgICAvL2lmIChwcmV2Q2hpbGQgIT0gbnVsbClcbiAgICAgICAgICAgICAgICAvLyAgICBwcmV2Q2hpbGQuc3ViSW5mby5ibHVyU2VsZigpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5leHRDaGlsZCAhPSBudWxsICYmIGZyb21Vc2VySW50ZXJhY3Rpb24pXG4gICAgICAgICAgICAgICAgICAgIG5leHRDaGlsZC5zdWJJbmZvLmZvY3VzU2VsZigpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXh0SW5kZXg7XG4gICAgICAgIH0pO1xuXG4gICAgfSwgW10pO1xuXG4gICAgLy8gQW55IHRpbWUgdGhlIHRhYmJhYmxlIGluZGV4IGNoYW5nZXMsXG4gICAgLy8gbm90aWZ5IHRoZSBwcmV2aW91cyBjaGlsZCB0aGF0IGl0J3Mgbm8gbG9uZ2VyIHRhYmJhYmxlLFxuICAgIC8vIGFuZCBub3RpZnkgdGhlIG5leHQgY2hpbGQgdGhhdCBpcyBhbGxvd2VkIHRvIGJlIHRhYmJlZCB0by5cbiAgICBjb25zdCBwYXJlbnRSZXR1cm5UeXBlID0gdXNlTWFuYWdlZENoaWxkcmVuPG51bWJlciwgVXNlUm92aW5nVGFiSW5kZXhTdWJJbmZvPENoaWxkRWxlbWVudCwgUnRpU3ViSW5mbz4sIEV4dHJhRmxhZ0tleXMgfCBcInRhYmJhYmxlXCI+KHtcbiAgICAgICAgbWFuYWdlZENoaWxkcmVuOiB7XG4gICAgICAgICAgICBvbkFmdGVyQ2hpbGRMYXlvdXRFZmZlY3QsXG4gICAgICAgICAgICBvbkNoaWxkcmVuTW91bnRDaGFuZ2U6IHVzZVN0YWJsZUNhbGxiYWNrPE9uQ2hpbGRyZW5Nb3VudENoYW5nZTxudW1iZXI+PigobW91bnRlZCwgdW5tb3VudGVkKSA9PiB7IG9uQ2hpbGRyZW5Nb3VudENoYW5nZT8uKG1vdW50ZWQsIHVubW91bnRlZCk7IHJlZXZhbHVhdGVDbG9zZXN0Rml0KCk7IH0pLFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgY29uc3QgeyB1c2VNYW5hZ2VkQ2hpbGQgfSA9IHBhcmVudFJldHVyblR5cGU7XG5cbiAgICBjb25zdCB7IGNoYW5nZUluZGV4LCByZWV2YWx1YXRlQ2xvc2VzdEZpdCB9ID0gdXNlQ2hpbGRyZW5GbGFnPFVzZVJvdmluZ1RhYkluZGV4U3ViSW5mbzxDaGlsZEVsZW1lbnQsIFJ0aVN1YkluZm8+LCBFeHRyYUZsYWdLZXlzIHwgXCJ0YWJiYWJsZVwiPih7IGluaXRpYWxJbmRleCwgY2hpbGRyZW46IHBhcmVudFJldHVyblR5cGUubWFuYWdlZENoaWxkcmVuLmNoaWxkcmVuLCBjbG9zZXN0Rml0OiB0cnVlLCBrZXk6IFwidGFiYmFibGVcIiB9KTtcblxuICAgIGNvbnN0IHVzZVJvdmluZ1RhYkluZGV4Q2hpbGQgPSB1c2VDYWxsYmFjazxVc2VSb3ZpbmdUYWJJbmRleENoaWxkPENoaWxkRWxlbWVudCwgUnRpU3ViSW5mbywgRXh0cmFGbGFnS2V5cz4+KChjaGlsZFBhcmFtZXRlcnMpID0+IHtcblxuICAgICAgICBjb25zdCB7IHN1YkluZm8sIG1hbmFnZWRDaGlsZDogeyBpbmRleCwgZmxhZ3MgfSwgcm92aW5nVGFiSW5kZXg6IHsgaGlkZGVuLCBmb2N1c1NlbGY6IGZvY3VzU2VsZk92ZXJyaWRlIH0gfSA9IGNoaWxkUGFyYW1ldGVycztcblxuICAgICAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgcmVldmFsdWF0ZUNsb3Nlc3RGaXQoKTtcbiAgICAgICAgfSwgWyEhaGlkZGVuXSlcblxuXG4gICAgICAgIGNvbnN0IGZzT3ZlcnJpZGUgPSB1c2VTdGFibGVHZXR0ZXIoZm9jdXNTZWxmT3ZlcnJpZGUpO1xuICAgICAgICBjb25zdCBmb2N1c1NlbGYgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmcyA9IGZzT3ZlcnJpZGUoKTtcbiAgICAgICAgICAgIGlmIChmcykge1xuICAgICAgICAgICAgICAgIGZzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZ2V0RWxlbWVudCgpIGFzIChFbGVtZW50ICYgUGFydGlhbDxIVE1MRWxlbWVudD4pO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmZvY3VzPy4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgW10pO1xuICAgICAgICAvKmNvbnN0IGJsdXJTZWxmID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYnMgPSBic092ZXJyaWRlKCk7XG4gICAgICAgICAgICBpZiAoYnMpIHtcbiAgICAgICAgICAgICAgICBicygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGdldEVsZW1lbnQoKSBhcyAoRWxlbWVudCAmIFBhcnRpYWw8SFRNTEVsZW1lbnQ+KTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudClcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5ibHVyPy4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgW10pOyovXG5cbiAgICAgICAgY29uc3Qgb25Gb2N1c2VkSW5uZXJDaGFuZ2VkID0gdXNlU3RhYmxlQ2FsbGJhY2soKGZvY3VzZWQ6IGJvb2xlYW4sIF9wcmV2Rm9jdXNlZDogYm9vbGVhbiB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgICAgICAgaWYgKGZvY3VzZWQpIHtcbiAgICAgICAgICAgICAgICBzZXRUYWJiYWJsZUluZGV4KGluZGV4LCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7IGdldEVsZW1lbnQsIHVzZUhhc0ZvY3VzUHJvcHMgfSA9IHVzZUhhc0ZvY3VzPENoaWxkRWxlbWVudD4oeyBvbkZvY3VzZWRJbm5lckNoYW5nZWQsIGdldERvY3VtZW50OiB1c2VDYWxsYmFjaygoKTogRG9jdW1lbnQgPT4geyByZXR1cm4gKGdldEVsZW1lbnQoKT8ub3duZXJEb2N1bWVudCkgPz8gKHdpbmRvdy5kb2N1bWVudCkgfSwgW10pIH0pO1xuXG4gICAgICAgIGNvbnN0IFt0YWJiYWJsZSwgc2V0VGFiYmFibGUsIGdldFRhYmJhYmxlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICAgICAgY29uc3QgdGFiYmFibGVGbGFncyA9IHVzZVJlZjxDaGlsZEZsYWdPcGVyYXRpb25zPih7IGdldDogZ2V0VGFiYmFibGUsIHNldDogc2V0VGFiYmFibGUsIGlzVmFsaWQ6IHVzZVN0YWJsZUNhbGxiYWNrKCgpID0+ICFoaWRkZW4pIH0pO1xuXG4gICAgICAgIGNvbnN0IF86IHZvaWQgPSB1c2VNYW5hZ2VkQ2hpbGQoe1xuICAgICAgICAgICAgbWFuYWdlZENoaWxkOiB7XG4gICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgZmxhZ3M6IHsgLi4uZmxhZ3MsIHRhYmJhYmxlOiB0YWJiYWJsZUZsYWdzLmN1cnJlbnQgfSBhcyBQYXJ0aWFsPFJlY29yZDxFeHRyYUZsYWdLZXlzIHwgXCJ0YWJiYWJsZVwiLCBDaGlsZEZsYWdPcGVyYXRpb25zPj4sXG4gICAgICAgICAgICAgICAgc3ViSW5mbzoge1xuICAgICAgICAgICAgICAgICAgICAvL2JsdXJTZWxmLFxuICAgICAgICAgICAgICAgICAgICBmb2N1c1NlbGYsXG4gICAgICAgICAgICAgICAgICAgIGdldEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGhpZGRlbjogISFoaWRkZW4sXG4gICAgICAgICAgICAgICAgICAgIHN1YkluZm9cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRhYmJhYmxlKVxuICAgICAgICAgICAgICAgIHN0YWJsZU9uVGFiYmFibGVSZW5kZXIoaW5kZXgpO1xuICAgICAgICB9LCBbdGFiYmFibGUsIGluZGV4XSlcbiAgICAgICAgZnVuY3Rpb24gdXNlUm92aW5nVGFiSW5kZXhDaGlsZFByb3BzKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxDaGlsZEVsZW1lbnQ+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8Q2hpbGRFbGVtZW50PiB7XG4gICAgICAgICAgICBjb25zb2xlLmFzc2VydChwcm9wcy50YWJJbmRleCA9PSBudWxsKTtcbiAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRQcm9wczxDaGlsZEVsZW1lbnQ+KHVzZUhhc0ZvY3VzUHJvcHMoeyB0YWJJbmRleDogdGFiYmFibGUgPyAwIDogLTEgfSksIHByb3BzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1c2VSb3ZpbmdUYWJJbmRleENoaWxkUHJvcHMsXG4gICAgICAgICAgICByb3ZpbmdUYWJJbmRleDoge1xuICAgICAgICAgICAgICAgIGdldEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFiYmFibGUsXG4gICAgICAgICAgICAgICAgZ2V0VGFiYmFibGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFsvKiBNdXN0IHJlbWFpbiBzdGFibGUgKi9dKTtcblxuICAgIGNvbnN0IGZvY3VzU2VsZiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYHVzZVJvdmluZ1RhYkluZGV4LmZvY3VzU2VsZmApO1xuICAgICAgICBjb25zdCBpbmRleCA9IGdldFRhYmJhYmxlSW5kZXgoKTtcbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpXG4gICAgICAgICAgICBwYXJlbnRSZXR1cm5UeXBlLm1hbmFnZWRDaGlsZHJlbi5jaGlsZHJlbi5nZXRBdChpbmRleCk/LnN1YkluZm8uZm9jdXNTZWxmPy4oKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgc2V0VGFiYmFibGVJbmRleChudWxsLCB0cnVlKTtcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB1c2VSb3ZpbmdUYWJJbmRleENoaWxkLFxuICAgICAgICBtYW5hZ2VkQ2hpbGRyZW46IHsgY2hpbGRyZW46IHBhcmVudFJldHVyblR5cGUubWFuYWdlZENoaWxkcmVuLmNoaWxkcmVuIH0sXG4gICAgICAgIHJvdmluZ1RhYkluZGV4OiB7XG4gICAgICAgICAgICBzZXRUYWJiYWJsZUluZGV4LFxuICAgICAgICAgICAgZ2V0VGFiYmFibGVJbmRleCxcbiAgICAgICAgICAgIGZvY3VzU2VsZixcbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8qZnVuY3Rpb24gdGVzdCgpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBmb2N1c1NlbGYsIGdldFRhYmJhYmxlSW5kZXgsIHNldFRhYmJhYmxlSW5kZXgsIHVzZVJvdmluZ1RhYkluZGV4Q2hpbGQsIH0gPSB1c2VSb3ZpbmdUYWJJbmRleDxIVE1MRGl2RWxlbWVudCwgeyBcImZvb1wiOiBcImJhclwiIH0sIFwiZmxhZzJcIj4oeyBtYW5hZ2VkQ2hpbGRyZW46IHt9LCByb3ZpbmdUYWJJbmRleDoge30gfSk7XG4gICAgY29uc3QgeyB9ID0gdXNlUm92aW5nVGFiSW5kZXhDaGlsZCh7IG1hbmFnZWRDaGlsZHJlbjogeyBpbmRleDogMCwgZmxhZ3M6IHt9IH0sIHJ0aTogeyBpbmZvMzogeyBmb286IFwiYmFyXCIgfSB9IH0pO1xufSovXG4iLCIvKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29weUFycmF5O1xuIiwiLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gKiBmbG9hdGluZy1wb2ludCBudW1iZXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbG93ZXIgVGhlIGxvd2VyIGJvdW5kLlxuICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gKi9cbmZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKSB7XG4gIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VSYW5kb207XG4iLCJpbXBvcnQgYmFzZVJhbmRvbSBmcm9tICcuL19iYXNlUmFuZG9tLmpzJztcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgd2hpY2ggbXV0YXRlcyBhbmQgc2V0cyB0aGUgc2l6ZSBvZiBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT1hcnJheS5sZW5ndGhdIFRoZSBzaXplIG9mIGBhcnJheWAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gc2h1ZmZsZVNlbGYoYXJyYXksIHNpemUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gIHNpemUgPSBzaXplID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBzaXplO1xuICB3aGlsZSAoKytpbmRleCA8IHNpemUpIHtcbiAgICB2YXIgcmFuZCA9IGJhc2VSYW5kb20oaW5kZXgsIGxhc3RJbmRleCksXG4gICAgICAgIHZhbHVlID0gYXJyYXlbcmFuZF07XG5cbiAgICBhcnJheVtyYW5kXSA9IGFycmF5W2luZGV4XTtcbiAgICBhcnJheVtpbmRleF0gPSB2YWx1ZTtcbiAgfVxuICBhcnJheS5sZW5ndGggPSBzaXplO1xuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNodWZmbGVTZWxmO1xuIiwiaW1wb3J0IGNvcHlBcnJheSBmcm9tICcuL19jb3B5QXJyYXkuanMnO1xuaW1wb3J0IHNodWZmbGVTZWxmIGZyb20gJy4vX3NodWZmbGVTZWxmLmpzJztcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJyYXlTaHVmZmxlO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJyYXlNYXA7XG4iLCJpbXBvcnQgYXJyYXlNYXAgZnJvbSAnLi9fYXJyYXlNYXAuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAqIG9mIGBwcm9wc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVZhbHVlcztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUaW1lcztcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc0FyZ3VtZW50cztcbiIsImltcG9ydCBiYXNlSXNBcmd1bWVudHMgZnJvbSAnLi9fYmFzZUlzQXJndW1lbnRzLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcnJheTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R1YkZhbHNlO1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5pbXBvcnQgc3R1YkZhbHNlIGZyb20gJy4vc3R1YkZhbHNlLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5leHBvcnQgZGVmYXVsdCBpc0J1ZmZlcjtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNJbmRleDtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNMZW5ndGg7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc0xlbmd0aCBmcm9tICcuL2lzTGVuZ3RoLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VVbmFyeTtcbiIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBub2RlVXRpbDtcbiIsImltcG9ydCBiYXNlSXNUeXBlZEFycmF5IGZyb20gJy4vX2Jhc2VJc1R5cGVkQXJyYXkuanMnO1xuaW1wb3J0IGJhc2VVbmFyeSBmcm9tICcuL19iYXNlVW5hcnkuanMnO1xuaW1wb3J0IG5vZGVVdGlsIGZyb20gJy4vX25vZGVVdGlsLmpzJztcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzVHlwZWRBcnJheTtcbiIsImltcG9ydCBiYXNlVGltZXMgZnJvbSAnLi9fYmFzZVRpbWVzLmpzJztcbmltcG9ydCBpc0FyZ3VtZW50cyBmcm9tICcuL2lzQXJndW1lbnRzLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNCdWZmZXIgZnJvbSAnLi9pc0J1ZmZlci5qcyc7XG5pbXBvcnQgaXNJbmRleCBmcm9tICcuL19pc0luZGV4LmpzJztcbmltcG9ydCBpc1R5cGVkQXJyYXkgZnJvbSAnLi9pc1R5cGVkQXJyYXkuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5TGlrZUtleXM7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUHJvdG90eXBlO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG92ZXJBcmc7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVLZXlzO1xuIiwiaW1wb3J0IGlzUHJvdG90eXBlIGZyb20gJy4vX2lzUHJvdG90eXBlLmpzJztcbmltcG9ydCBuYXRpdmVLZXlzIGZyb20gJy4vX25hdGl2ZUtleXMuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VLZXlzO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRnVuY3Rpb247XG4iLCJpbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuaW1wb3J0IGlzTGVuZ3RoIGZyb20gJy4vaXNMZW5ndGguanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNBcnJheUxpa2U7XG4iLCJpbXBvcnQgYXJyYXlMaWtlS2V5cyBmcm9tICcuL19hcnJheUxpa2VLZXlzLmpzJztcbmltcG9ydCBiYXNlS2V5cyBmcm9tICcuL19iYXNlS2V5cy5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBrZXlzO1xuIiwiaW1wb3J0IGJhc2VWYWx1ZXMgZnJvbSAnLi9fYmFzZVZhbHVlcy5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8udmFsdWVzKG5ldyBGb28pO1xuICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy52YWx1ZXMoJ2hpJyk7XG4gKiAvLyA9PiBbJ2gnLCAnaSddXG4gKi9cbmZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVzO1xuIiwiaW1wb3J0IHNodWZmbGVTZWxmIGZyb20gJy4vX3NodWZmbGVTZWxmLmpzJztcbmltcG9ydCB2YWx1ZXMgZnJvbSAnLi92YWx1ZXMuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNodWZmbGVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgcmV0dXJuIHNodWZmbGVTZWxmKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VTaHVmZmxlO1xuIiwiaW1wb3J0IGFycmF5U2h1ZmZsZSBmcm9tICcuL19hcnJheVNodWZmbGUuanMnO1xuaW1wb3J0IGJhc2VTaHVmZmxlIGZyb20gJy4vX2Jhc2VTaHVmZmxlLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAqIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyLVlhdGVzX3NodWZmbGUpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNF0pO1xuICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gKi9cbmZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNodWZmbGU7XG4iLCJpbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7IGgsIFZOb2RlIH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHsgTXV0YWJsZVJlZiwgdXNlQ2FsbGJhY2ssIHVzZUxheW91dEVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xuaW1wb3J0IHsgTWFuYWdlZENoaWxkSW5mbywgTWFuYWdlZENoaWxkcmVuIH0gZnJvbSBcIi4vdXNlLWNoaWxkLW1hbmFnZXJcIjtcbmltcG9ydCB7IHVzZUZvcmNlVXBkYXRlIH0gZnJvbSBcIi4vdXNlLWZvcmNlLXVwZGF0ZVwiO1xuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwiLi91c2UtbWVyZ2VkLXByb3BzXCI7XG5pbXBvcnQgeyByZXR1cm5OdWxsLCB1c2VQYXNzaXZlU3RhdGUgfSBmcm9tIFwiLi91c2UtcGFzc2l2ZS1zdGF0ZVwiO1xuaW1wb3J0IGxvZGFzaFNodWZmbGUgZnJvbSBcImxvZGFzaC1lcy9zaHVmZmxlXCI7XG5cbmV4cG9ydCB0eXBlIEdldEluZGV4PEMsIEsgZXh0ZW5kcyBzdHJpbmc+ID0gKHJvdzogTWFuYWdlZENoaWxkSW5mbzxudW1iZXIsIEMsIEs+KSA9PiAobnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZCk7XG5leHBvcnQgdHlwZSBHZXRWYWx1ZTxDLCBLIGV4dGVuZHMgc3RyaW5nLCBHIGV4dGVuZHMgYW55W10sIFY+ID0gKHJvdzogTWFuYWdlZENoaWxkSW5mbzxudW1iZXIsIEMsIEs+LCAuLi5hcmdzOiBHKSA9PiBWO1xuZXhwb3J0IHR5cGUgQ29tcGFyZTxWPiA9IChsaHM6IFYsIHJoczogVikgPT4gbnVtYmVyO1xuXG4vKipcbiAqIEFsbCBvZiB0aGVzZSBmdW5jdGlvbnMgKipNVVNUKiogYmUgc3RhYmxlIGFjcm9zcyByZW5kZXJzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFVzZVJlYXJyYW5nZWFibGVDaGlsZHJlblBhcmFtZXRlcnM8QywgSyBleHRlbmRzIHN0cmluZz4ge1xuXG4gICAgLyoqXG4gICAgICogTXVzdCByZXR1cm4sIGUuZy4sIHRoZSByb3cgaW5kZXggb2YgdGhpcyBjaGlsZFxuICAgICAqIChVc3VhbGx5IGp1c3QgYW4gYGluZGV4YCBwcm9wKVxuICAgICAqL1xuICAgIHJlYXJyYW5nZWFibGVDaGlsZHJlbjogeyBnZXRJbmRleDogR2V0SW5kZXg8QywgSz47IH1cbn1cblxuLyoqXG4gKiBBbGwgb2YgdGhlc2UgZnVuY3Rpb25zICoqTVVTVCoqIGJlIHN0YWJsZSBhY3Jvc3MgcmVuZGVycy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VTb3J0YWJsZUNoaWxkcmVuUGFyYW1ldGVyczxDLCBLIGV4dGVuZHMgc3RyaW5nLCBHIGV4dGVuZHMgYW55W10sIFY+IGV4dGVuZHMgVXNlUmVhcnJhbmdlYWJsZUNoaWxkcmVuUGFyYW1ldGVyczxDLCBLPiB7XG4gICAgc29ydGFibGVDaGlsZHJlbjoge1xuICAgICAgICAvKipcbiAgICAgICAgICogTXVzdCByZXR1cm4gdGhlIHZhbHVlIHRoaXMgY2hpbGQgdXNlcyBSRTogc29ydGluZy5cbiAgICAgICAgICogSWYgeW91IGRvbid0IGNhcmUgYWJvdXQgc29ydGluZyAoeW91IGp1c3QgdXNlIFxuICAgICAgICAgKiB5b3VyIG93bmFyYml0cmFyeSByZW9yZGVyaW5nKSwgdGhpcyB3aWxsIG5ldmVyXG4gICAgICAgICAqIGJlIHVzZWQsIHNvIGl0IGNhbiByZXR1cm4gYW55dGhpbmcuXG4gICAgICAgICAqIEBwYXJhbSByb3cgXG4gICAgICAgICAqIEBwYXJhbSBhcmdzIFxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0VmFsdWU6IEdldFZhbHVlPEMsIEssIEcsIFY+O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb250cm9scyBob3cgdmFsdWVzIGNvbXBhcmUgYWdhaW5zdCBlYWNoIG90aGVyLlxuICAgICAgICAgKiBAcGFyYW0gbGhzIFxuICAgICAgICAgKiBAcGFyYW0gcmhzIFxuICAgICAgICAgKi9cbiAgICAgICAgY29tcGFyZTogQ29tcGFyZTxWPjtcbiAgICB9XG59XG5cblxuXG4vKipcbiAqIEhvb2sgdGhhdCBhbGxvd3MgZm9yIHRoZSAqKmRpcmVjdCBkZXNjZW5kYW50KiogY2hpbGRyZW4gb2YgdGhpcyBjb21wb25lbnQgdG8gYmUgcmUtb3JkZXJlZCBhbmQgc29ydGVkLlxuICogXG4gKiAqVGhpcyBpcyAqKnNlcGFyYXRlKiogZnJvbSBcIm1hbmFnZWRcIiBjaGlsZHJlbiwgd2hpY2ggY2FuIGJlIGFueSBsZXZlbCBvZiBjaGlsZCBuZWVkZWQhIFNvcnRhYmxlL3JlYXJyYW5nZWFibGUgY2hpbGRyZW4gbXVzdCBiZSAqKmRpcmVjdCBkZXNjZW5kYW50cyoqIG9mIHRoZSBwYXJlbnQgdGhhdCB1c2VzIHRoaXMgaG9vayEqXG4gKiBcbiAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgaW4gY29uanVuY3Rpb24gd2l0aCBgdXNlTGlzdE5hdmlnYXRpb25gOyBpdCB0YWtlcyB0aGUgc2FtZSBgaW5kZXhNYW5nbGVyYCBhbmQgYGluZGV4RGVtYW5nbGVyYCBcbiAqIGZ1bmN0aW9ucyB0aGF0IHRoaXMgaG9vayByZXR1cm5zLiBgdXNlTGlzdE5hdmlnYXRpb25gIGRvZXMgbm90IGRpcmVjdGx5IHVzZSB0aGlzIGhvb2sgYmVjYXVzZSwgYXMgbWVudGlvbmVkLCBcbiAqIHRoaXMgaG9vayBpbXBvc2VzIHNlcmlvdXMgcmVzdHJpY3Rpb25zIG9uIGNoaWxkIHN0cnVjdHVyZSwgd2hpbGUgYHVzZUxpc3ROYXZpZ2F0aW9uYCBhbGxvd3MgYW55dGhpbmcuXG4gKiBcbiAqIEJlc2lkZXMgdGhlIHByb3AtbW9kaWZ5aW5nIGhvb2sgdGhhdCdzIHJldHVybmVkLCB0aGUgYHNvcnRgIGZ1bmN0aW9uIHRoYXQncyByZXR1cm5lZCB3aWxsXG4gKiBzb3J0IGFsbCBjaGlsZHJlbiBhY2NvcmRpbmcgdG8gdGhlaXIgdmFsdWUgZnJvbSB0aGUgYGdldFZhbHVlYCBhcmd1bWVudCB5b3UgcGFzcyBpbi5cbiAqIFxuICogSWYgeW91IHdhbnQgdG8gcGVyZm9ybSBzb21lIHJlLW9yZGVyaW5nIG9wZXJhdGlvbiB0aGF0J3MgKm5vdCogYSBzb3J0LCB5b3UgY2FuIG1hbnVhbGx5XG4gKiByZS1tYXAgZWFjaCBjaGlsZCdzIHBvc2l0aW9uIHVzaW5nIGBtYW5nbGVNYXBgIGFuZCBgZGVtYW5nbGVNYXBgLCB3aGljaCBjb252ZXJ0IGJldHdlZW5cbiAqIHNvcnRlZCBhbmQgdW5zb3J0ZWQgaW5kZXggcG9zaXRpb25zLlxuICogXG4gKiBBZ2FpbiwgdW5saWtlIHNvbWUgb3RoZXIgaG9va3MsICoqdGhlc2UgY2hpbGRyZW4gbXVzdCBiZSBkaXJlY3QgZGVzY2VuZGFudHMqKi4gVGhpcyBpcyBiZWNhdXNlXG4gKiB0aGUgcHJvcC1tb2RpZnlpbmcgaG9vayBpbnNwZWN0cyB0aGUgZ2l2ZW4gY2hpbGRyZW4sIHRoZW4gcmUtY3JlYXRlcyB0aGVtIHdpdGggbmV3IGBrZXlgcy5cbiAqIEJlY2F1c2Uga2V5cyBhcmUgZ2l2ZW4gc3BlY2lhbCB0cmVhdG1lbnQgYW5kIGEgY2hpbGQgaGFzIG5vIHdheSBvZiBtb2RpZnlpbmcgaXRzIG93biBrZXlcbiAqIHRoZXJlJ3Mgbm8gb3RoZXIgdGltZSBvciBwbGFjZSB0aGlzIGNhbiBoYXBwZW4gb3RoZXIgdGhhbiBleGFjdGx5IHdpdGhpbiB0aGUgcGFyZW50IGNvbXBvbmVudCdzIHJlbmRlciBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlYXJyYW5nZWFibGVDaGlsZHJlbjxQYXJlbnRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgQywgSyBleHRlbmRzIHN0cmluZz4oeyByZWFycmFuZ2VhYmxlQ2hpbGRyZW46IHsgZ2V0SW5kZXggfSB9OiBVc2VSZWFycmFuZ2VhYmxlQ2hpbGRyZW5QYXJhbWV0ZXJzPEMsIEs+KTogVXNlUmVhcnJhbmdlYWJsZUNoaWxkcmVuUmV0dXJuVHlwZVdpdGhIb29rczxQYXJlbnRFbGVtZW50LCBDLCBLPiB7XG5cbiAgICAvLyBUaGVzZSBhcmUgdXNlZCB0byBrZWVwIHRyYWNrIG9mIGEgbWFwcGluZyBiZXR3ZWVuIHVuc29ydGVkIGluZGV4IDwtLS0+IHNvcnRlZCBpbmRleC5cbiAgICAvLyBUaGVzZSBhcmUgbmVlZGVkIGZvciBuYXZpZ2F0aW9uIHdpdGggdGhlIGFycm93IGtleXMuXG4gICAgY29uc3QgbWFuZ2xlTWFwID0gdXNlUmVmKG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+KCkpO1xuICAgIGNvbnN0IGRlbWFuZ2xlTWFwID0gdXNlUmVmKG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+KCkpO1xuICAgIGNvbnN0IGluZGV4TWFuZ2xlciA9IHVzZUNhbGxiYWNrKChuOiBudW1iZXIpID0+IChtYW5nbGVNYXAuY3VycmVudC5nZXQobikgPz8gbiksIFtdKTtcbiAgICBjb25zdCBpbmRleERlbWFuZ2xlciA9IHVzZUNhbGxiYWNrKChuOiBudW1iZXIpID0+IChkZW1hbmdsZU1hcC5jdXJyZW50LmdldChuKSA/PyBuKSwgW10pO1xuXG4gICAgLy8gVGhlIHNvcnQgZnVuY3Rpb24gbmVlZHMgdG8gYmUgYWJsZSB0byB1cGRhdGUgd2hvZXZlciBoYXMgYWxsIHRoZSBzb3J0YWJsZSBjaGlsZHJlbi5cbiAgICAvLyBCZWNhdXNlIHRoYXQgbWlnaHQgbm90IGJlIHRoZSBjb25zdW1lciBvZiAqdGhpcyogaG9vayBkaXJlY3RseSAoZS5nLiBhIHRhYmxlIHVzZXNcbiAgICAvLyB0aGlzIGhvb2ssIGJ1dCBpdCdzIHRib2R5IHRoYXQgYWN0dWFsbHkgbmVlZHMgdXBkYXRpbmcpLCB3ZSBuZWVkIHRvIHJlbW90ZWx5XG4gICAgLy8gZ2V0IGFuZCBzZXQgYSBmb3JjZVVwZGF0ZSBmdW5jdGlvbi5cbiAgICAvL2NvbnN0IFtnZXRGb3JjZVVwZGF0ZSwgc2V0Rm9yY2VVcGRhdGVdID0gdXNlUGFzc2l2ZVN0YXRlPG51bGwgfCAoKCkgPT4gdm9pZCk+KG51bGwsIHJldHVybk51bGwpO1xuICAgIGNvbnN0IFtnZXRGb3JjZVVwZGF0ZSwgc2V0Rm9yY2VVcGRhdGVdID0gdXNlUGFzc2l2ZVN0YXRlPG51bGwgfCAoKCkgPT4gdm9pZCk+KG51bGwsIHJldHVybk51bGwpO1xuXG4gICAgY29uc3QgcmVhcnJhbmdlID0gdXNlQ2FsbGJhY2soKHNvcnRlZFJvd3M6IE1hbmFnZWRDaGlsZEluZm88bnVtYmVyLCBDLCBLPltdKSA9PiB7XG5cbiAgICAgICAgLy8gVXBkYXRlIG91ciBzb3J0ZWQgPC0tPiB1bnNvcnRlZCBpbmRpY2VzIG1hcCBcbiAgICAgICAgLy8gYW5kIHJlcmVuZGVyIHRoZSB3aG9sZSB0YWJsZSwgYmFzaWNhbGx5XG4gICAgICAgIGZvciAobGV0IGluZGV4QXNTb3J0ZWQgPSAwOyBpbmRleEFzU29ydGVkIDwgc29ydGVkUm93cy5sZW5ndGg7ICsraW5kZXhBc1NvcnRlZCkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXhBc1Vuc29ydGVkID0gc29ydGVkUm93c1tpbmRleEFzU29ydGVkXS5pbmRleDtcblxuICAgICAgICAgICAgbWFuZ2xlTWFwLmN1cnJlbnQuc2V0KGluZGV4QXNVbnNvcnRlZCwgaW5kZXhBc1NvcnRlZCk7XG4gICAgICAgICAgICBkZW1hbmdsZU1hcC5jdXJyZW50LnNldChpbmRleEFzU29ydGVkLCBpbmRleEFzVW5zb3J0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBnZXRGb3JjZVVwZGF0ZSgpPy4oKTtcbiAgICB9LCBbXSk7XG5cbiAgICBjb25zdCB1c2VSZWFycmFuZ2VhYmxlUHJvcHMgPSB1c2VDYWxsYmFjaygoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfTogT21pdDxoLkpTWC5IVE1MQXR0cmlidXRlczxQYXJlbnRFbGVtZW50PiwgXCJjaGlsZHJlblwiPiAmIHsgY2hpbGRyZW4/OiBWTm9kZTxhbnk+W10gfSkgPT4ge1xuXG4gICAgICAgIGNvbnN0IGZvcmNlVXBkYXRlID0gdXNlRm9yY2VVcGRhdGUoKTtcbiAgICAgICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHsgc2V0Rm9yY2VVcGRhdGUoX3ByZXYgPT4gZm9yY2VVcGRhdGUpOyB9LCBbZm9yY2VVcGRhdGVdKVxuXG4gICAgICAgIHJldHVybiAodXNlTWVyZ2VkUHJvcHM8UGFyZW50RWxlbWVudD4oe1xuICAgICAgICAgICAgY2hpbGRyZW46XG4gICAgICAgICAgICAgICAgKGNoaWxkcmVuIGFzIFZOb2RlPE1hbmFnZWRDaGlsZEluZm88bnVtYmVyLCBDLCBLPj5bXSlcbiAgICAgICAgICAgICAgICAgICAgLnNsaWNlKClcbiAgICAgICAgICAgICAgICAgICAgLm1hcChjaGlsZCA9PiAoeyBjaGlsZCwgbWFuZ2xlZEluZGV4OiBpbmRleE1hbmdsZXIoZ2V0SW5kZXgoY2hpbGQucHJvcHMhKSEpLCBkZW1hbmdsZWRJbmRleDogZ2V0SW5kZXgoY2hpbGQucHJvcHMpIH0pKVxuICAgICAgICAgICAgICAgICAgICAuc29ydCgobGhzLCByaHMpID0+IHsgcmV0dXJuIGxocy5tYW5nbGVkSW5kZXggLSByaHMubWFuZ2xlZEluZGV4IH0pXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKHsgY2hpbGQsIG1hbmdsZWRJbmRleCwgZGVtYW5nbGVkSW5kZXggfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgoY2hpbGQudHlwZSBhcyBhbnksIHsgLi4uY2hpbGQucHJvcHMsIGtleTogZGVtYW5nbGVkSW5kZXgsIFwiZGF0YS1tYW5nbGVkLWluZGV4XCI6IG1hbmdsZWRJbmRleCwgXCJkYXRhLXVubWFuZ2xlZC1pbmRleFwiOiBkZW1hbmdsZWRJbmRleCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfSwgcHJvcHMpKTtcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4geyB1c2VSZWFycmFuZ2VhYmxlUHJvcHMsIHJlYXJyYW5nZWFibGVDaGlsZHJlbjogeyBpbmRleE1hbmdsZXIsIGluZGV4RGVtYW5nbGVyLCBtYW5nbGVNYXAsIGRlbWFuZ2xlTWFwLCByZWFycmFuZ2UgfSB9O1xufVxuXG5cbi8qKlxuICogSG9vayB0aGF0IGFsbG93cyBmb3IgdGhlICoqZGlyZWN0IGRlc2NlbmRhbnQqKiBjaGlsZHJlbiBvZiB0aGlzIGNvbXBvbmVudCB0byBiZSByZS1vcmRlcmVkIGFuZCBzb3J0ZWQuXG4gKiBcbiAqICpUaGlzIGlzICoqc2VwYXJhdGUqKiBmcm9tIFwibWFuYWdlZFwiIGNoaWxkcmVuLCB3aGljaCBjYW4gYmUgYW55IGxldmVsIG9mIGNoaWxkIG5lZWRlZCEgU29ydGFibGUvcmVhcnJhbmdlYWJsZSBjaGlsZHJlbiBtdXN0IGJlICoqZGlyZWN0IGRlc2NlbmRhbnRzKiogb2YgdGhlIHBhcmVudCB0aGF0IHVzZXMgdGhpcyBob29rISogXG4gKiBcbiAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoaXMgaW4gY29uanVuY3Rpb24gd2l0aCBgdXNlTGlzdE5hdmlnYXRpb25gOyBpdCB0YWtlcyB0aGUgc2FtZSBgaW5kZXhNYW5nbGVyYCBhbmQgYGluZGV4RGVtYW5nbGVyYCBcbiAqIGZ1bmN0aW9ucyB0aGF0IHRoaXMgaG9vayByZXR1cm5zLiBgdXNlTGlzdE5hdmlnYXRpb25gIGRvZXMgbm90IGRpcmVjdGx5IHVzZSB0aGlzIGhvb2sgYmVjYXVzZSwgYXMgbWVudGlvbmVkLCBcbiAqIHRoaXMgaG9vayBpbXBvc2VzIHNlcmlvdXMgcmVzdHJpY3Rpb25zIG9uIGNoaWxkIHN0cnVjdHVyZSwgd2hpbGUgYHVzZUxpc3ROYXZpZ2F0aW9uYCBhbGxvd3MgYW55dGhpbmcuXG4gKiBcbiAqIEJlc2lkZXMgdGhlIHByb3AtbW9kaWZ5aW5nIGhvb2sgdGhhdCdzIHJldHVybmVkLCB0aGUgYHNvcnRgIGZ1bmN0aW9uIHRoYXQncyByZXR1cm5lZCB3aWxsXG4gKiBzb3J0IGFsbCBjaGlsZHJlbiBhY2NvcmRpbmcgdG8gdGhlaXIgdmFsdWUgZnJvbSB0aGUgYGdldFZhbHVlYCBhcmd1bWVudCB5b3UgcGFzcyBpbi5cbiAqIFxuICogSWYgeW91IHdhbnQgdG8gcGVyZm9ybSBzb21lIHJlLW9yZGVyaW5nIG9wZXJhdGlvbiB0aGF0J3MgKm5vdCogYSBzb3J0LCB5b3UgY2FuIG1hbnVhbGx5XG4gKiByZS1tYXAgZWFjaCBjaGlsZCdzIHBvc2l0aW9uIHVzaW5nIGBtYW5nbGVNYXBgIGFuZCBgZGVtYW5nbGVNYXBgLCB3aGljaCBjb252ZXJ0IGJldHdlZW5cbiAqIHNvcnRlZCBhbmQgdW5zb3J0ZWQgaW5kZXggcG9zaXRpb25zLlxuICogXG4gKiBBZ2FpbiwgdW5saWtlIHNvbWUgb3RoZXIgaG9va3MsICoqdGhlc2UgY2hpbGRyZW4gbXVzdCBiZSBkaXJlY3QgZGVzY2VuZGFudHMqKi4gVGhpcyBpcyBiZWNhdXNlXG4gKiB0aGUgcHJvcC1tb2RpZnlpbmcgaG9vayBpbnNwZWN0cyB0aGUgZ2l2ZW4gY2hpbGRyZW4sIHRoZW4gcmUtY3JlYXRlcyB0aGVtIHdpdGggbmV3IGBrZXlgcy5cbiAqIEJlY2F1c2Uga2V5cyBhcmUgZ2l2ZW4gc3BlY2lhbCB0cmVhdG1lbnQgYW5kIGEgY2hpbGQgaGFzIG5vIHdheSBvZiBtb2RpZnlpbmcgaXRzIG93biBrZXlcbiAqIHRoZXJlJ3Mgbm8gb3RoZXIgdGltZSBvciBwbGFjZSB0aGlzIGNhbiBoYXBwZW4gb3RoZXIgdGhhbiBleGFjdGx5IHdpdGhpbiB0aGUgcGFyZW50IGNvbXBvbmVudCdzIHJlbmRlciBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNvcnRhYmxlQ2hpbGRyZW48UGFyZW50RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEMsIEsgZXh0ZW5kcyBzdHJpbmcsIEcgZXh0ZW5kcyBhbnlbXSwgVj4oeyByZWFycmFuZ2VhYmxlQ2hpbGRyZW46IHsgZ2V0SW5kZXggfSwgc29ydGFibGVDaGlsZHJlbjogeyBjb21wYXJlOiB1c2VyQ29tcGFyZSwgZ2V0VmFsdWUgfSB9OiBVc2VTb3J0YWJsZUNoaWxkcmVuUGFyYW1ldGVyczxDLCBLLCBHLCBWPik6IFVzZVNvcnRhYmxlQ2hpbGRyZW5SZXR1cm5UeXBlV2l0aEhvb2tzPFBhcmVudEVsZW1lbnQsIEMsIEssIEc+IHtcblxuICAgIGNvbnN0IGNvbXBhcmUgPSAodXNlckNvbXBhcmUgPz8gZGVmYXVsdENvbXBhcmUpO1xuXG4gICAgY29uc3QgeyB1c2VSZWFycmFuZ2VhYmxlUHJvcHM6IHVzZVNvcnRhYmxlUHJvcHMsIC4uLnJlYXJyYW5nZWFibGVDaGlsZHJlblJldHVyblR5cGUgfSA9IHVzZVJlYXJyYW5nZWFibGVDaGlsZHJlbjxQYXJlbnRFbGVtZW50LCBDLCBLPih7IHJlYXJyYW5nZWFibGVDaGlsZHJlbjogeyBnZXRJbmRleCB9IH0pO1xuICAgIGNvbnN0IHsgcmVhcnJhbmdlYWJsZUNoaWxkcmVuOiB7IHJlYXJyYW5nZSB9IH0gPSByZWFycmFuZ2VhYmxlQ2hpbGRyZW5SZXR1cm5UeXBlO1xuICAgIC8vIFRoZSBhY3R1YWwgc29ydCBmdW5jdGlvbi5cbiAgICBjb25zdCBzb3J0ID0gdXNlQ2FsbGJhY2soKG1hbmFnZWRSb3dzOiBNYW5hZ2VkQ2hpbGRyZW48bnVtYmVyLCBDLCBLPiwgZGlyZWN0aW9uOiBcImFzY2VuZGluZ1wiIHwgXCJkZXNjZW5kaW5nXCIsIC4uLmFyZ3M6IEcpOiBQcm9taXNlPHZvaWQ+IHwgdm9pZCA9PiB7XG5cbiAgICAgICAgY29uc3Qgc29ydGVkUm93cyA9IG1hbmFnZWRSb3dzLmFycmF5U2xpY2UoKS5zb3J0KChsaHNSb3csIHJoc1JvdykgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBsaHNWYWx1ZSA9IGdldFZhbHVlKGxoc1JvdywgLi4uYXJncykgYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgcmhzVmFsdWUgPSBnZXRWYWx1ZShyaHNSb3csIC4uLmFyZ3MpIGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBhcmUobGhzVmFsdWUsIHJoc1ZhbHVlKSAvLyBsaHNSb3cuZ2V0TWFuYWdlZENlbGxzKCk/Lltjb2x1bW5dPy52YWx1ZSwgcmhzUm93LmdldE1hbmFnZWRDZWxscygpPy5bY29sdW1uXT8udmFsdWUpO1xuICAgICAgICAgICAgaWYgKGRpcmVjdGlvblswXSA9PSBcImRcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gLXJlc3VsdDtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlYXJyYW5nZShzb3J0ZWRSb3dzKTtcblxuICAgIH0sIFsgLyogTXVzdCByZW1haW4gc3RhYmxlICovXSk7XG5cbiAgICBjb25zdCBzaHVmZmxlID0gdXNlQ2FsbGJhY2soKG1hbmFnZWRSb3dzOiBNYW5hZ2VkQ2hpbGRyZW48bnVtYmVyLCBDLCBLPik6IFByb21pc2U8dm9pZD4gfCB2b2lkID0+IHtcbiAgICAgICAgY29uc3Qgc2h1ZmZsZWRSb3dzID0gbG9kYXNoU2h1ZmZsZShtYW5hZ2VkUm93cy5hcnJheVNsaWNlKCkpXG4gICAgICAgIHJldHVybiByZWFycmFuZ2Uoc2h1ZmZsZWRSb3dzKTtcbiAgICB9LCBbLyogTXVzdCByZW1haW4gc3RhYmxlICovXSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB1c2VTb3J0YWJsZVByb3BzLFxuICAgICAgICBzb3J0YWJsZUNoaWxkcmVuOiB7IHNvcnQsIHNodWZmbGUgfSxcbiAgICAgICAgcmVhcnJhbmdlYWJsZUNoaWxkcmVuOiByZWFycmFuZ2VhYmxlQ2hpbGRyZW5SZXR1cm5UeXBlLnJlYXJyYW5nZWFibGVDaGlsZHJlblxuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlUmVhcnJhbmdlYWJsZUNoaWxkcmVuUmV0dXJuVHlwZUluZm88QywgSyBleHRlbmRzIHN0cmluZz4ge1xuICAgIHJlYXJyYW5nZWFibGVDaGlsZHJlbjoge1xuICAgICAgICAvKipcbiAgICAgICAgICogUGFzcyBhbiBhcnJheSBvZiBub3Qtc29ydGVkIGNoaWxkIGluZm9ybWF0aW9uIHRvIHRoaXMgZnVuY3Rpb25cbiAgICAgICAgICogYW5kIHRoZSBjaGlsZHJlbiB3aWxsIHJlLWFycmFuZ2UgdGhlbXNlbHZlcyB0byBtYXRjaC5cbiAgICAgICAgICogIFxuICAgICAgICAgKiAqKlNUQUJMRSoqXG4gICAgICAgICAqICBcbiAgICAgICAgICogXG4gICAgICAgICAqL1xuICAgICAgICByZWFycmFuZ2U6IChyb3dzSW5PcmRlcjogTWFuYWdlZENoaWxkSW5mbzxudW1iZXIsIEMsIEs+W10pID0+IHZvaWQ7XG4gICAgICAgIC8qKiAqKlNUQUJMRSoqICovXG4gICAgICAgIGluZGV4TWFuZ2xlcjogKG46IG51bWJlcikgPT4gbnVtYmVyO1xuICAgICAgICAvKiogKipTVEFCTEUqKiAqL1xuICAgICAgICBpbmRleERlbWFuZ2xlcjogKG46IG51bWJlcikgPT4gbnVtYmVyO1xuICAgICAgICAvKiogKipTVEFCTEUqKiAqL1xuICAgICAgICBtYW5nbGVNYXA6IE11dGFibGVSZWY8TWFwPG51bWJlciwgbnVtYmVyPj47XG4gICAgICAgIC8qKiAqKlNUQUJMRSoqICovXG4gICAgICAgIGRlbWFuZ2xlTWFwOiBNdXRhYmxlUmVmPE1hcDxudW1iZXIsIG51bWJlcj4+O1xuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VSZWFycmFuZ2VhYmxlQ2hpbGRyZW5SZXR1cm5UeXBlV2l0aEhvb2tzPFBhcmVudEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDLCBLIGV4dGVuZHMgc3RyaW5nPiBleHRlbmRzIFVzZVJlYXJyYW5nZWFibGVDaGlsZHJlblJldHVyblR5cGVJbmZvPEMsIEs+IHtcbiAgICAvKiogKipTVEFCTEUqKiAqL1xuICAgIHVzZVJlYXJyYW5nZWFibGVQcm9wczogKHByb3BzOiBPbWl0PGguSlNYLkhUTUxBdHRyaWJ1dGVzPFBhcmVudEVsZW1lbnQ+LCBcImNoaWxkcmVuXCI+ICYgeyBjaGlsZHJlbj86IFZOb2RlPGFueT5bXSB8IHVuZGVmaW5lZDsgfSkgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8UGFyZW50RWxlbWVudD47XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VTb3J0YWJsZUNoaWxkcmVuUmV0dXJuVHlwZUluZm88QywgSyBleHRlbmRzIHN0cmluZywgRyBleHRlbmRzIGFueVtdPiBleHRlbmRzIFVzZVJlYXJyYW5nZWFibGVDaGlsZHJlblJldHVyblR5cGVJbmZvPEMsIEs+IHtcbiAgICBzb3J0YWJsZUNoaWxkcmVuOiB7LyoqICoqU1RBQkxFKiogKi9cbiAgICAgICAgc29ydDogKG1hbmFnZWRSb3dzOiBNYW5hZ2VkQ2hpbGRyZW48bnVtYmVyLCBDLCBLPiwgZGlyZWN0aW9uOiBcImFzY2VuZGluZ1wiIHwgXCJkZXNjZW5kaW5nXCIsIC4uLmFyZ3M6IEcpID0+IFByb21pc2U8dm9pZD4gfCB2b2lkO1xuICAgICAgICAvKiogKipTVEFCTEUqKiAqL1xuICAgICAgICBzaHVmZmxlOiAobWFuYWdlZFJvd3M6IE1hbmFnZWRDaGlsZHJlbjxudW1iZXIsIEMsIEs+KSA9PiBQcm9taXNlPHZvaWQ+IHwgdm9pZDtcbiAgICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIFVzZVNvcnRhYmxlQ2hpbGRyZW5SZXR1cm5UeXBlV2l0aEhvb2tzPFBhcmVudEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDLCBLIGV4dGVuZHMgc3RyaW5nLCBHIGV4dGVuZHMgYW55W10+IGV4dGVuZHNcbiAgICBVc2VTb3J0YWJsZUNoaWxkcmVuUmV0dXJuVHlwZUluZm88QywgSywgRz4ge1xuICAgIC8qKiAqKlNUQUJMRSoqICovXG4gICAgdXNlU29ydGFibGVQcm9wczogKHByb3BzOiBPbWl0PGguSlNYLkhUTUxBdHRyaWJ1dGVzPFBhcmVudEVsZW1lbnQ+LCBcImNoaWxkcmVuXCI+ICYgeyBjaGlsZHJlbj86IFZOb2RlPGFueT5bXSB8IHVuZGVmaW5lZDsgfSkgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8UGFyZW50RWxlbWVudD47XG59XG5cblxuZnVuY3Rpb24gZGVmYXVsdENvbXBhcmUobGhzOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgRGF0ZSB8IG51bGwgfCB1bmRlZmluZWQsIHJoczogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IERhdGUgfCBudWxsIHwgdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNvbXBhcmUxKGxocywgcmhzKTtcblxuICAgIGZ1bmN0aW9uIGNvbXBhcmUzKGxoczogc3RyaW5nIHwgbnVtYmVyLCByaHM6IHN0cmluZyB8IG51bWJlcikge1xuXG4gICAgICAgIC8vIENvZXJjZSBzdHJpbmdzIHRvIG51bWJlcnMgaWYgdGhleSBzZWVtIHRvIHN0YXkgdGhlIHNhbWUgd2hlbiBzZXJpYWxpemVkXG4gICAgICAgIGlmIChgJHsrbGhzfWAgPT09IGxocylcbiAgICAgICAgICAgIGxocyA9ICtsaHM7XG4gICAgICAgIGlmIChgJHsrcmhzfWAgPT09IHJocylcbiAgICAgICAgICAgIHJocyA9ICtyaHM7XG5cbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgaWYgZWl0aGVyIGFyZ3VtZW50IGlzIGEgc3RyaW5nLCB0dXJuIHRoZSBvdGhlciBvbmUgaW50byBvbmUgdG9vXG4gICAgICAgIGlmICh0eXBlb2YgbGhzID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgcmhzID0gYCR7cmhzfWA7XG4gICAgICAgIGlmICh0eXBlb2YgcmhzID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgbGhzID0gYCR7bGhzfWA7XG5cbiAgICAgICAgY29uc29sZS5hc3NlcnQodHlwZW9mIGxocyA9PT0gdHlwZW9mIHJocyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBsaHMgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICByZXR1cm4gbGhzLmxvY2FsZUNvbXBhcmUocmhzIGFzIHN0cmluZyk7XG4gICAgICAgIGlmICh0eXBlb2YgbGhzID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgcmV0dXJuICtsaHMgLSArcmhzO1xuXG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wYXJlMihsaHM6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBEYXRlLCByaHM6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBEYXRlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbGhzID09PSBcImJvb2xlYW5cIiB8fCBsaHMgaW5zdGFuY2VvZiBEYXRlKVxuICAgICAgICAgICAgbGhzID0gK2xocztcbiAgICAgICAgaWYgKHR5cGVvZiByaHMgPT09IFwiYm9vbGVhblwiIHx8IHJocyBpbnN0YW5jZW9mIERhdGUpXG4gICAgICAgICAgICByaHMgPSArcmhzO1xuICAgICAgICByZXR1cm4gY29tcGFyZTMobGhzLCByaHMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wYXJlMShsaHM6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBEYXRlIHwgbnVsbCB8IHVuZGVmaW5lZCwgcmhzOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgRGF0ZSB8IG51bGwgfCB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGxocyA9PSBudWxsICYmIHJocyA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBUaGV5J3JlIGJvdGggbnVsbFxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGhzID09IG51bGwgfHwgcmhzID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIE9uZSBvZiB0aGUgdHdvIGlzIG51bGwgLS0gZWFzeSBjYXNlXG4gICAgICAgICAgICByZXR1cm4gbGhzICE9IG51bGwgPyAxIDogLTFcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tcGFyZTIobGhzLCByaHMpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGgsIFZOb2RlIH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XG5pbXBvcnQgeyB1c2VQcmVzcyB9IGZyb20gXCIuL3VzZS1wcmVzc1wiO1xuaW1wb3J0IHsgdXNlQ2hpbGRyZW5IYXZlRm9jdXMsIFVzZUNoaWxkcmVuSGF2ZUZvY3VzUGFyYW1ldGVycywgVXNlSGFzRm9jdXNQYXJhbWV0ZXJzIH0gZnJvbSBcIi4vdXNlLWhhcy1mb2N1c1wiO1xuaW1wb3J0IHsgQ2hpbGRGbGFnT3BlcmF0aW9ucywgTWFuYWdlZENoaWxkT21pdHMsIE1hbmFnZWRDaGlsZHJlbiwgTWFuYWdlZENoaWxkcmVuT21pdHMsIE9uQ2hpbGRyZW5Nb3VudENoYW5nZSwgdXNlQ2hpbGRyZW5GbGFnIH0gZnJvbSBcIi4vdXNlLWNoaWxkLW1hbmFnZXJcIjtcbmltcG9ydCB7IExpbmVhck5hdmlnYXRpb25PbWl0cywgVHlwZWFoZWFkTmF2aWdhdGlvbk9taXRzLCB1c2VMaW5lYXJOYXZpZ2F0aW9uLCBVc2VMaW5lYXJOYXZpZ2F0aW9uUGFyYW1ldGVycywgVXNlTGluZWFyTmF2aWdhdGlvblJldHVyblR5cGVJbmZvLCB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uLCBVc2VUeXBlYWhlYWROYXZpZ2F0aW9uUGFyYW1ldGVycywgVXNlVHlwZWFoZWFkTmF2aWdhdGlvblJldHVyblR5cGVJbmZvIH0gZnJvbSBcIi4vdXNlLWtleWJvYXJkLW5hdmlnYXRpb25cIjtcbmltcG9ydCB7IHVzZU1lcmdlZFByb3BzIH0gZnJvbSBcIi4vdXNlLW1lcmdlZC1wcm9wc1wiO1xuaW1wb3J0IHsgdXNlRW5zdXJlU3RhYmlsaXR5IH0gZnJvbSBcIi4vdXNlLXBhc3NpdmUtc3RhdGVcIjtcbmltcG9ydCB7IFJvdmluZ1RhYkluZGV4Q2hpbGRPbWl0cywgUm92aW5nVGFiSW5kZXhQYXJhbWV0ZXJzT21pdHMsIHVzZVJvdmluZ1RhYkluZGV4LCBVc2VSb3ZpbmdUYWJJbmRleENoaWxkUGFyYW1ldGVycywgVXNlUm92aW5nVGFiSW5kZXhDaGlsZFJldHVyblR5cGVJbmZvLCBVc2VSb3ZpbmdUYWJJbmRleFBhcmFtZXRlcnMsIFVzZVJvdmluZ1RhYkluZGV4UmV0dXJuVHlwZUluZm8sIFVzZVJvdmluZ1RhYkluZGV4U3ViSW5mbyB9IGZyb20gXCIuL3VzZS1yb3ZpbmctdGFiaW5kZXhcIjtcbmltcG9ydCB7IHVzZVNvcnRhYmxlQ2hpbGRyZW4sIFVzZVNvcnRhYmxlQ2hpbGRyZW5QYXJhbWV0ZXJzLCBVc2VTb3J0YWJsZUNoaWxkcmVuUmV0dXJuVHlwZUluZm8gfSBmcm9tIFwiLi91c2Utc29ydGFibGUtY2hpbGRyZW5cIjtcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xuaW1wb3J0IHsgdXNlU3RhYmxlR2V0dGVyIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1nZXR0ZXJcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXN0YXRlXCI7XG5cblxuLyoqXG4gKiBcbiAqIFRPRE86IFRoaXMgdGFibGUgd2FzIHNjcmFwcGVkIHdoZW4gdGhpcyB3YXMgY2hhbmdlZCB0byBqdXN0IGFjY2VwdCBhIGNvbGxhdG9yIGRpcmVjdGx5LFxuICogYnV0IGl0J3Mgbm90IGJhZCBmb3IgYSBjb2xsYXRpb24gY3Jhc2ggY291cnNlIGFuZCBJIG1pZ2h0IHVzZSBpdCBhZ2Fpbi5cbiAqIEV2ZW4ganVzdCBhcyBhIFwidGhpcyBpcyB3aHkgaXQncyBpbXBvcnRhbnQgYW5kIGdvb2QgdG8gdXNlIHRoZXNlIHRoaW5nc1wiIHRoaW5nLlxuICogXG4gKiB8TGFuZy58VGFyZ2V0fFVzZXIgaW5wdXR8YGJhc2VgfGBhY2NlbnRgfGBjYXNlYHxgdmFyaWFudGB8XG4gKiB8LS0tLXwtLS0tfC0tLS18LS0tLXwtLS0tfC0tLS18LS0tLXxcbiAqIHxFTnxIaXxCeWV84p2MfOKdjHzinYx84p2MfFxuICogfEVOfEhpfEhpfOKchXzinIV84pyFfOKchXxcbiAqIHxFTnxIaXzvvKjvvYl84pyFfOKchXzinIV84p2MfFxuICogfEVOfEhpfGhpfOKchXzinIV84p2MfOKdjHxcbiAqIHxFTnxIaXxIw6984pyFfOKdjHzinYx84p2MfFxuICogfEVOfMOlfGFhfOKdjHzinYx84p2MfOKdjHxcbiAqIHxEQXzDpXxhYXzinIV84pyFfOKchXzinYx8XG4gKiB8REF8w6V8QUF84pyFfOKchXzinYx84p2MfFxuICogfERBfMOlfEFhfOKchXzinIV84p2MfOKdjHxcbiAqIHxEQXzDpXxhQXzinYx84p2MfOKdjHzinYx8XG4gKiB8RU58w6V8YXzinIV84pyFfOKdjHzinYx8XG4gKiB8REF8w6V8YXzinIV84pyFfOKdjHzinYx8XG4gKiB8SlB876qqfOedgHzinIV84pyFfOKchXzinIV8XG4gKiB8SlB844KrfO+9tnzinIV84pyFfOKchXzinIV8XG4gKiB8SlB844KrfOOBi3zinIV84pyFfOKchXzinYx8XG4gKiB8SlB844KrfOODtXzinIV84pyFfOKchXzinYx8XG4gKiB8SlB844KrfOOLlXzinIV84pyFfOKdjHzinYx8XG4gKiB8SlB844KrfOOCrHzinIV84p2MfOKdjHzinYx8XG4gKiB8SlB844KrfOWKm3zinYx84p2MfOKdjHzinYx8XG4gKiB8Wkh857SFfOe6onzinYx84p2MfOKdjHzinYx8XG4gKiBcbiAqIFxuICogKE5vdGUgdG8gc2VsZjogQXQgc29tZSBwb2ludCwgdGhpcyBmaWxlIHdpbGwgcHJvYmFibHkgYmUgbm9ybWFsaXplZFxuICogYnkgc29tZWJvZHkgYW5kIO+qqiB3aWxsIHR1cm4gYmFjayBpbnRvIOedgC4pXG4gKiBcbiAqL1xuY29uc3QgX2R1bW15OiBhbnkgPSBudWxsO1xuXG5cbmZ1bmN0aW9uIGlkZW50aXR5PFQ+KHQ6IFQpIHsgcmV0dXJuIHQ7IH1cbnR5cGUgT21pdDxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSBQaWNrPFQsIEV4Y2x1ZGU8a2V5b2YgVCwgSz4+O1xuXG5cblxuZXhwb3J0IGludGVyZmFjZSBVc2VMaXN0TmF2aWdhdGlvblN1YkluZm88Qz4ge1xuICAgIHRleHQ6IHN0cmluZztcblxuICAgIHN1YkluZm86IEM7XG59XG5cbi8qKlxuICogQHBhcmFtIGZyb21Vc2VySW50ZXJhY3Rpb24gV2hldGhlciB0aGUgdXNlciBpbnRlcmFjdGVkIHdpdGggdGhpcyBjaGlsZCBhcyBhIG1lYW5zIG9mIG5hdmlnYXRpbmcgdG8gaXQuICBJbiB0aGF0IHdhcyB0aGUgY2FzZSwgdGhlIGNoaWxkIGlzIGFsc28gZm9jdXNlZC4gT3RoZXJ3aXNlLCBmb2N1cyBtb3ZlcyBhcyB0aGUgYnJvd3NlciBkZXRlcm1pbmVzLlxuICovXG5leHBvcnQgdHlwZSBOYXZpZ2F0ZVRvSW5kZXggPSAoaTogbnVtYmVyIHwgbnVsbCwgZnJvbVVzZXJJbnRlcmFjdGlvbjogYm9vbGVhbikgPT4gdm9pZDtcblxuXG5pbnRlcmZhY2UgTFNQIHtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgYW5kIGluZGV4RGVtYW5nbGVyIGFyZSB1c2VkIHRvIGFsbG93IGNoaWxkcmVuIHRvIGJlIG5hdmlnYXRlZCBpbiBhbiBvcmRlclxuICAgICAqIHRoYXQgZG9lc24ndCBuZWNlc3NhcmlseSBtYXRjaCB0aGVpciBjaGlsZCBvcmRlciwgbGlrZSBpZiBhIGxpc3QgaXMgc29ydGVkLlxuICAgICAqIFxuICAgICAqIFVzZWQgdG8gdHVybiBhbiBcImFic29sdXRlXCIgaW5kZXggaW50byBhIFwic29ydGVkL2ZpbHRlcmVkL21hbmdsZWRcIiBvbmUuXG4gICAgICogXG4gICAgICogRm9yIGV4YW1wbGUsIG5hdmlnYXRlVG9GaXJzdCBtYW5nbGVzIDAgYW5kIG5hdmlnYXRlcyB0byB0aGF0IHJlc3VsdGluZyByb3cuXG4gICAgICogQHBhcmFtIHJhd0luZGV4IFxuICAgICAqL1xuICAgIGluZGV4TWFuZ2xlcj8ocmF3SW5kZXg6IG51bWJlcik6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdHVybiBhIFwibWFuZ2xlZFwiIGluZGV4IGludG8gaXQncyBcInVuc29ydGVkXCIgb3IgXCJ1bm1hbmdsZWRcIiBpbmRleC5cbiAgICAgKiBcbiAgICAgKiBGb3IgZXhhbXBsZSwgd2hlbiBpbmNyZW1lbnRpbmcgb3IgZGVjcmVtZW50aW5nIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgaW5kZXgsXG4gICAgICogaXQgbmVlZHMgdG8gYmUgZGVtYW5nbGVkIHRvIGRvIFwibm9ybWFsXCIgbWF0aCBvbiBpdCwgYW5kIHRoZW4gcmUtbWFuZ2xlZCAoYWJvdmUpXG4gICAgICogdG8gdHVybiB0aGF0IGFic29sdXRlIHJvdyBpbmRleCBiYWNrIGludG8gYSBtYW5nbGVkIG9uZS5cbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtZWRJbmRleCBcbiAgICAgKi9cbiAgICBpbmRleERlbWFuZ2xlcj8odHJhbnNmb3JtZWRJbmRleDogbnVtYmVyKTogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBMaXN0TmF2aWdhdGlvblBhcmFtZXRlcnNPbWl0cyA9IGtleW9mIExTUDtcblxuLy8gKioqIFBhcmFtZXRlcnMgKGxpc3QsIGxpc3Qtc2luZ2xlLCBsaXN0LWNoaWxkLCBsaXN0LXNpbmdsZS1jaGlsZClcbmV4cG9ydCBpbnRlcmZhY2UgVXNlTGlzdE5hdmlnYXRpb25QYXJhbWV0ZXJzPExzT21pdHMgZXh0ZW5kcyBMaXN0TmF2aWdhdGlvblBhcmFtZXRlcnNPbWl0cywgTG5PbWl0cyBleHRlbmRzIExpbmVhck5hdmlnYXRpb25PbWl0cywgVG5PbWl0cyBleHRlbmRzIFR5cGVhaGVhZE5hdmlnYXRpb25PbWl0cywgUnRpT21pdHMgZXh0ZW5kcyBSb3ZpbmdUYWJJbmRleFBhcmFtZXRlcnNPbWl0cywgTWNPbWl0cyBleHRlbmRzIE1hbmFnZWRDaGlsZHJlbk9taXRzPiBleHRlbmRzXG4gICAgVXNlUm92aW5nVGFiSW5kZXhQYXJhbWV0ZXJzPFJ0aU9taXRzLCBNY09taXRzPixcbiAgICBVc2VUeXBlYWhlYWROYXZpZ2F0aW9uUGFyYW1ldGVyczxUbk9taXRzIHwgXCJnZXRJbmRleFwiIHwgXCJzZXRJbmRleFwiPixcbiAgICBVc2VMaW5lYXJOYXZpZ2F0aW9uUGFyYW1ldGVyczxMbk9taXRzIHwgXCJuYXZpZ2F0ZVRvRmlyc3RcIiB8IFwibmF2aWdhdGVUb0xhc3RcIiB8IFwibmF2aWdhdGVUb05leHRcIiB8IFwibmF2aWdhdGVUb1ByZXZcIj4ge1xuICAgIGxpc3ROYXZpZ2F0aW9uOiBPbWl0PExTUCwgTHNPbWl0cz47XG59XG5cbmludGVyZmFjZSBTU1Age1xuICAgIHNlbGVjdGVkSW5kZXg6IG51bWJlciB8IG51bGw7XG4gICAgb25TZWxlY3RlZEluZGV4Q2hhbmdlOiAoZXZlbnQ6IEV2ZW50LCBuZXdJbmRleDogbnVtYmVyKSA9PiB2b2lkO1xuICAgIHNlbGVjdGlvbk1vZGU6IFwiZm9jdXNcIiB8IFwiYWN0aXZhdGlvblwiO1xufVxuZXhwb3J0IHR5cGUgU2luZ2xlU2VsZWN0aW9uT21pdHMgPSBrZXlvZiBTU1A7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25QYXJhbWV0ZXJzPFNTT21pdHMgZXh0ZW5kcyBTaW5nbGVTZWxlY3Rpb25PbWl0cywgTHNPbWl0cyBleHRlbmRzIExpc3ROYXZpZ2F0aW9uUGFyYW1ldGVyc09taXRzLCBMbk9taXRzIGV4dGVuZHMgTGluZWFyTmF2aWdhdGlvbk9taXRzLCBUbk9taXRzIGV4dGVuZHMgVHlwZWFoZWFkTmF2aWdhdGlvbk9taXRzLCBSdGlPbWl0cyBleHRlbmRzIFJvdmluZ1RhYkluZGV4UGFyYW1ldGVyc09taXRzLCBNY09taXRzIGV4dGVuZHMgTWFuYWdlZENoaWxkcmVuT21pdHM+IGV4dGVuZHMgVXNlTGlzdE5hdmlnYXRpb25QYXJhbWV0ZXJzPExzT21pdHMsIExuT21pdHMsIFRuT21pdHMsIFJ0aU9taXRzIHwgXCJpbml0aWFsSW5kZXhcIiwgTWNPbWl0cz4ge1xuICAgIHNpbmdsZVNlbGVjdGlvbjogT21pdDxTU1AsIFNTT21pdHM+O1xuICAgIGNoaWxkcmVuSGF2ZUZvY3VzOiBQYXJ0aWFsPFVzZUNoaWxkcmVuSGF2ZUZvY3VzUGFyYW1ldGVyc1tcImNoaWxkcmVuSGF2ZUZvY3VzXCJdPjtcbn1cbmV4cG9ydCB0eXBlIExpc3ROYXZpZ2F0aW9uQ2hpbGRPbWl0cyA9IGtleW9mIFVzZUxpc3ROYXZpZ2F0aW9uU3ViSW5mbzxhbnk+O1xuZXhwb3J0IGludGVyZmFjZSBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkUGFyYW1ldGVyczxMc1N1YkluZm8sIEV4dHJhRmxhZ0tleXMgZXh0ZW5kcyBzdHJpbmcsIExzT21pdHMgZXh0ZW5kcyBMaXN0TmF2aWdhdGlvbkNoaWxkT21pdHMsIFJ0aU9taXRzIGV4dGVuZHMgUm92aW5nVGFiSW5kZXhDaGlsZE9taXRzLCBNY09taXRzIGV4dGVuZHMgTWFuYWdlZENoaWxkT21pdHMsIFN1YmJlc3RJbmZvPiBleHRlbmRzXG4gICAgVXNlUm92aW5nVGFiSW5kZXhDaGlsZFBhcmFtZXRlcnM8VXNlTGlzdE5hdmlnYXRpb25TdWJJbmZvPExzU3ViSW5mbz4sIEV4dHJhRmxhZ0tleXMsIFJ0aU9taXRzLCBNY09taXRzLCBTdWJiZXN0SW5mbz4ge1xuICAgIC8vcm92aW5nVGFiSW5kZXg6IE9taXQ8VXNlUm92aW5nVGFiSW5kZXhDaGlsZFBhcmFtZXRlcnM8VXNlTGlzdE5hdmlnYXRpb25TdWJJbmZvPExzU3ViSW5mbz4sIEV4dHJhRmxhZ0tleXMsIG5ldmVyPltcInJvdmluZ1RhYkluZGV4XCJdLCBcInN1YkluZm9cIj47XG4gICAgbGlzdE5hdmlnYXRpb246IE9taXQ8VXNlTGlzdE5hdmlnYXRpb25TdWJJbmZvPExzU3ViSW5mbz4sIExzT21pdHMgfCBcInN1YkluZm9cIj47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZFBhcmFtZXRlcnM8RSBleHRlbmRzIEVsZW1lbnQsIEMsIEsgZXh0ZW5kcyBzdHJpbmcsIExzT21pdHMgZXh0ZW5kcyBMaXN0TmF2aWdhdGlvbkNoaWxkT21pdHMsIFJ0aU9taXRzIGV4dGVuZHMgUm92aW5nVGFiSW5kZXhDaGlsZE9taXRzLCBNY09taXRzIGV4dGVuZHMgTWFuYWdlZENoaWxkT21pdHMsIFN1YmJlc3RJbmZvPiBleHRlbmRzIFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQYXJhbWV0ZXJzPEMsIEsgfCBcInNlbGVjdGVkXCIsIExzT21pdHMsIFJ0aU9taXRzLCBNY09taXRzLCBTdWJiZXN0SW5mbz4ge1xuICAgIGhhc0ZvY3VzOiBVc2VIYXNGb2N1c1BhcmFtZXRlcnM8RT47XG59XG5cblxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxpc3ROYXZpZ2F0aW9uUmV0dXJuVHlwZUluZm88Q2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTHNTdWJJbmZvLCBFeHRyYUZsYWdLZXlzIGV4dGVuZHMgc3RyaW5nPiBleHRlbmRzIFVzZVJvdmluZ1RhYkluZGV4UmV0dXJuVHlwZUluZm88VXNlUm92aW5nVGFiSW5kZXhTdWJJbmZvPENoaWxkRWxlbWVudCwgVXNlTGlzdE5hdmlnYXRpb25TdWJJbmZvPExzU3ViSW5mbz4+LCBcInRhYmJhYmxlXCIgfCBFeHRyYUZsYWdLZXlzPiwgVXNlVHlwZWFoZWFkTmF2aWdhdGlvblJldHVyblR5cGVJbmZvLCBVc2VMaW5lYXJOYXZpZ2F0aW9uUmV0dXJuVHlwZUluZm8ge1xuICAgIGxpc3ROYXZpZ2F0aW9uOiB7IG5hdmlnYXRlVG9JbmRleDogTmF2aWdhdGVUb0luZGV4IH07XG59XG5cbi8vICoqKiBSZXR1cm4gdHlwZXMgKGxpc3QsIGxpc3Qtc2luZ2xlLCBsaXN0LWNoaWxkLCBsaXN0LXNpbmdsZS1jaGlsZClcbmV4cG9ydCBpbnRlcmZhY2UgVXNlTGlzdE5hdmlnYXRpb25SZXR1cm5UeXBlV2l0aEhvb2tzPFBhcmVudE9yQ2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgQ2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTHNTdWJJbmZvLCBFeHRyYUZsYWdLZXlzIGV4dGVuZHMgc3RyaW5nPiBleHRlbmRzXG4gICAgVXNlTGlzdE5hdmlnYXRpb25SZXR1cm5UeXBlSW5mbzxDaGlsZEVsZW1lbnQsIExzU3ViSW5mbywgRXh0cmFGbGFnS2V5cz4ge1xuXG4gICAgLyoqICoqU1RBQkxFKiogKi9cbiAgICB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkOiBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkPENoaWxkRWxlbWVudCwgTHNTdWJJbmZvLCBFeHRyYUZsYWdLZXlzPjtcbiAgICAvKiogKipTVEFCTEUqKiAqL1xuICAgIHVzZUxpc3ROYXZpZ2F0aW9uUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8UGFyZW50T3JDaGlsZEVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxQYXJlbnRPckNoaWxkRWxlbWVudD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlTGlzdE5hdmlnYXRpb25DaGlsZFJldHVyblR5cGVJbmZvPENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlUm92aW5nVGFiSW5kZXhDaGlsZFJldHVyblR5cGVJbmZvPENoaWxkRWxlbWVudD4ge1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlTGlzdE5hdmlnYXRpb25DaGlsZFJldHVyblR5cGVXaXRoSG9va3M8Q2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkUmV0dXJuVHlwZUluZm88Q2hpbGRFbGVtZW50PiB7XG4gICAgdXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzOiAocDogaC5KU1guSFRNTEF0dHJpYnV0ZXM8Q2hpbGRFbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8Q2hpbGRFbGVtZW50Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvblJldHVyblR5cGVJbmZvPENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIExzU3ViSW5mbywgRXh0cmFGbGFnS2V5cyBleHRlbmRzIHN0cmluZz4gZXh0ZW5kcyBVc2VMaXN0TmF2aWdhdGlvblJldHVyblR5cGVJbmZvPENoaWxkRWxlbWVudCwgTHNTdWJJbmZvLCBFeHRyYUZsYWdLZXlzPiB7XG4gICAgc2luZ2xlU2VsZWN0aW9uOiB7fVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uUmV0dXJuVHlwZVdpdGhIb29rczxQYXJlbnRPckNoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEMsIEsgZXh0ZW5kcyBzdHJpbmc+IGV4dGVuZHNcbiAgICBVc2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvblJldHVyblR5cGVJbmZvPENoaWxkRWxlbWVudCwgQywgSz4ge1xuICAgIC8qKiAqKlNUQUJMRSoqICovXG4gICAgdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZDogVXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZDxDaGlsZEVsZW1lbnQsIEMsIEs+O1xuICAgIC8qKiAqKlNUQUJMRSoqICovXG4gICAgdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25Qcm9wczogVXNlTGlzdE5hdmlnYXRpb25SZXR1cm5UeXBlV2l0aEhvb2tzPFBhcmVudE9yQ2hpbGRFbGVtZW50LCBDaGlsZEVsZW1lbnQsIEMsIEs+W1widXNlTGlzdE5hdmlnYXRpb25Qcm9wc1wiXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkUmV0dXJuVHlwZUluZm88Q2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkUmV0dXJuVHlwZUluZm88Q2hpbGRFbGVtZW50PiB7XG4gICAgc2luZ2xlU2VsZWN0aW9uOiB7XG4gICAgICAgIHNlbGVjdGVkOiBib29sZWFuO1xuICAgICAgICBnZXRTZWxlY3RlZCgpOiBib29sZWFuO1xuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkUmV0dXJuVHlwZVdpdGhIb29rczxDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uQ2hpbGRSZXR1cm5UeXBlSW5mbzxDaGlsZEVsZW1lbnQ+IHtcbiAgICB1c2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkUHJvcHM6IFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRSZXR1cm5UeXBlV2l0aEhvb2tzPENoaWxkRWxlbWVudD5bXCJ1c2VMaXN0TmF2aWdhdGlvbkNoaWxkUHJvcHNcIl07XG59XG5cblxuZXhwb3J0IHR5cGUgVXNlTGlzdE5hdmlnYXRpb25DaGlsZDxDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDLCBLIGV4dGVuZHMgc3RyaW5nPiA9IChhOiBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkUGFyYW1ldGVyczxDLCBLLCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBDPikgPT4gVXNlTGlzdE5hdmlnYXRpb25DaGlsZFJldHVyblR5cGVXaXRoSG9va3M8Q2hpbGRFbGVtZW50PjtcblxuZXhwb3J0IHR5cGUgVXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZDxDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDLCBLIGV4dGVuZHMgc3RyaW5nPiA9IChwOiBVc2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkUGFyYW1ldGVyczxDaGlsZEVsZW1lbnQsIEMsIEssIG5ldmVyLCBuZXZlciwgbmV2ZXIsIEM+KSA9PiBVc2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkUmV0dXJuVHlwZVdpdGhIb29rczxDaGlsZEVsZW1lbnQ+O1xuXG5cblxuLyoqXG4gKiBJbXBsZW1lbnRzIHByb3BlciBrZXlib2FyZCBuYXZpZ2F0aW9uIGZvciBjb21wb25lbnRzIGxpa2UgbGlzdGJveGVzLCBidXR0b24gZ3JvdXBzLCBtZW51cywgZXRjLlxuICogXG4gKiBJbiB0aGUgZG9jdW1lbnQgb3JkZXIsIHRoZXJlIHdpbGwgYmUgb25seSBvbmUgXCJmb2N1c2VkXCIgb3IgXCJ0YWJiYWJsZVwiIGVsZW1lbnQsIG1ha2luZyBpdCBhY3QgbW9yZSBsaWtlIG9uZSBjb21wbGV0ZSB1bml0IGluIGNvbXBhcmlzb24gdG8gZXZlcnl0aGluZyBhcm91bmQgaXQuXG4gKiBOYXZpZ2F0aW5nIGZvcndhcmRzL2JhY2t3YXJkcyBjYW4gYmUgZG9uZSB3aXRoIHRoZSBhcnJvdyBrZXlzLCBIb21lL0VuZCBrZXlzLCBvciBhbnkgYW55IHRleHQgZm9yIHR5cGVhaGVhZCB0byBmb2N1cyB0aGUgbmV4dCBpdGVtIHRoYXQgbWF0Y2hlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUxpc3ROYXZpZ2F0aW9uPFBhcmVudE9yQ2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgQ2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTHNTdWJJbmZvLCBFeHRyYUZsYWdLZXlzIGV4dGVuZHMgc3RyaW5nPih7XG4gICAgbWFuYWdlZENoaWxkcmVuOiB7IG9uQ2hpbGRyZW5Nb3VudENoYW5nZSwgLi4ubWMgfSxcbiAgICByb3ZpbmdUYWJJbmRleCxcbiAgICBsaXN0TmF2aWdhdGlvbjogeyBpbmRleERlbWFuZ2xlciwgaW5kZXhNYW5nbGVyIH0sXG4gICAgbGluZWFyTmF2aWdhdGlvbixcbiAgICB0eXBlYWhlYWROYXZpZ2F0aW9uXG59OiBVc2VMaXN0TmF2aWdhdGlvblBhcmFtZXRlcnM8bmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyPik6IFVzZUxpc3ROYXZpZ2F0aW9uUmV0dXJuVHlwZVdpdGhIb29rczxQYXJlbnRPckNoaWxkRWxlbWVudCwgQ2hpbGRFbGVtZW50LCBMc1N1YkluZm8sIEV4dHJhRmxhZ0tleXM+IHtcbiAgICBpbmRleE1hbmdsZXIgPz89IGlkZW50aXR5O1xuICAgIGluZGV4RGVtYW5nbGVyID8/PSBpZGVudGl0eTtcblxuICAgIHVzZUVuc3VyZVN0YWJpbGl0eShcInVzZUxpc3ROYXZpZ2F0aW9uXCIsIGluZGV4TWFuZ2xlciwgaW5kZXhEZW1hbmdsZXIpO1xuXG5cbiAgICBjb25zdCBwYXJlbnRSZXR1cm5UeXBlID0gdXNlUm92aW5nVGFiSW5kZXg8Q2hpbGRFbGVtZW50LCBVc2VMaXN0TmF2aWdhdGlvblN1YkluZm88THNTdWJJbmZvPiwgRXh0cmFGbGFnS2V5cz4oe1xuICAgICAgICBtYW5hZ2VkQ2hpbGRyZW46IHtcbiAgICAgICAgICAgIC4uLm1jLCBvbkNoaWxkcmVuTW91bnRDaGFuZ2U6IHVzZUNhbGxiYWNrPE9uQ2hpbGRyZW5Nb3VudENoYW5nZTxudW1iZXI+PigobSwgdSkgPT4ge1xuICAgICAgICAgICAgICAgIG9uQ2hpbGRyZW5Nb3VudENoYW5nZT8uKG0sIHUpO1xuICAgICAgICAgICAgfSwgW10pXG4gICAgICAgIH0sXG4gICAgICAgIHJvdmluZ1RhYkluZGV4XG4gICAgfSk7XG5cbiAgICBjb25zdCB7IHVzZVJvdmluZ1RhYkluZGV4Q2hpbGQsIG1hbmFnZWRDaGlsZHJlbjogeyBjaGlsZHJlbiB9LCByb3ZpbmdUYWJJbmRleDogeyBnZXRUYWJiYWJsZUluZGV4LCBzZXRUYWJiYWJsZUluZGV4IH0gfSA9IHBhcmVudFJldHVyblR5cGU7XG5cbiAgICBjb25zdCBuYXZpZ2F0ZVRvSW5kZXggPSB1c2VDYWxsYmFjaygoaTogbnVtYmVyIHwgbnVsbCwgZnJvbVVzZXJJbnRlcmFjdGlvbjogYm9vbGVhbikgPT4ge1xuICAgICAgICBpZiAoaSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0SW5kZXggPSB0cnlOYXZpZ2F0ZVRvSW5kZXgoe1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAwLFxuICAgICAgICAgICAgICAgIHRhcmdldDogaSxcbiAgICAgICAgICAgICAgICBzZWFyY2hEaXJlY3Rpb246IDEsXG4gICAgICAgICAgICAgICAgaW5kZXhNYW5nbGVyOiBpbmRleE1hbmdsZXIgPz8gaWRlbnRpdHksXG4gICAgICAgICAgICAgICAgaW5kZXhEZW1hbmdsZXI6IGluZGV4RGVtYW5nbGVyID8/IGlkZW50aXR5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNldFRhYmJhYmxlSW5kZXgoaSA9PSBudWxsID8gbnVsbCA6IG5leHRJbmRleCwgZnJvbVVzZXJJbnRlcmFjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXRUYWJiYWJsZUluZGV4KG51bGwsIGZyb21Vc2VySW50ZXJhY3Rpb24pO1xuICAgICAgICB9XG4gICAgfSwgW10pO1xuXG4gICAgY29uc3Qge1xuICAgICAgICB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uQ2hpbGQsXG4gICAgICAgIHVzZVR5cGVhaGVhZE5hdmlnYXRpb25Qcm9wcyxcbiAgICAgICAgdHlwZWFoZWFkTmF2aWdhdGlvbjoge1xuICAgICAgICAgICAgY3VycmVudFR5cGVhaGVhZCxcbiAgICAgICAgICAgIGludmFsaWRUeXBlYWhlYWRcbiAgICAgICAgfVxuICAgIH0gPSB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uPFBhcmVudE9yQ2hpbGRFbGVtZW50Pih7XG4gICAgICAgIHR5cGVhaGVhZE5hdmlnYXRpb246IHtcbiAgICAgICAgICAgIGdldEluZGV4OiBnZXRUYWJiYWJsZUluZGV4LFxuICAgICAgICAgICAgc2V0SW5kZXg6IHVzZUNhbGxiYWNrKChpbmRleDogKG51bWJlciB8IG51bGwpIHwgKChwcmV2OiBudW1iZXIgfCBudWxsKSA9PiAobnVtYmVyIHwgbnVsbCkpKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0VGFiYmFibGVJbmRleChpbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICB9LCBbXSksXG4gICAgICAgICAgICAuLi50eXBlYWhlYWROYXZpZ2F0aW9uXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCB7IHVzZUxpbmVhck5hdmlnYXRpb25Qcm9wcyB9ID0gdXNlTGluZWFyTmF2aWdhdGlvbjxQYXJlbnRPckNoaWxkRWxlbWVudD4oe1xuICAgICAgICBsaW5lYXJOYXZpZ2F0aW9uOiB7XG4gICAgICAgICAgICBuYXZpZ2F0ZVRvUHJldjogdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRhYmJhYmxlSW5kZXgoYyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnlOYXZpZ2F0ZVRvSW5kZXgoeyBjaGlsZHJlbiwgZGVmYXVsdDogYyA/PyAwLCB0YXJnZXQ6IGluZGV4RGVtYW5nbGVyIShpbmRleE1hbmdsZXIhKChjID8/IDApKSAtIDEpLCBzZWFyY2hEaXJlY3Rpb246IC0xLCBpbmRleE1hbmdsZXI6IGluZGV4TWFuZ2xlciA/PyBpZGVudGl0eSwgaW5kZXhEZW1hbmdsZXI6IGluZGV4RGVtYW5nbGVyID8/IGlkZW50aXR5IH0pXG4gICAgICAgICAgICAgICAgfSwgdHJ1ZSlcbiAgICAgICAgICAgIH0sIFtdKSxcbiAgICAgICAgICAgIG5hdmlnYXRlVG9OZXh0OiB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0VGFiYmFibGVJbmRleChjID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyeU5hdmlnYXRlVG9JbmRleCh7IGNoaWxkcmVuLCBkZWZhdWx0OiBjID8/IDAsIHRhcmdldDogaW5kZXhEZW1hbmdsZXIhKGluZGV4TWFuZ2xlciEoYyA/PyAwKSArIDEpLCBzZWFyY2hEaXJlY3Rpb246IDEsIGluZGV4TWFuZ2xlcjogaW5kZXhNYW5nbGVyID8/IGlkZW50aXR5LCBpbmRleERlbWFuZ2xlcjogaW5kZXhEZW1hbmdsZXIgPz8gaWRlbnRpdHkgfSk7XG4gICAgICAgICAgICAgICAgfSwgdHJ1ZSlcbiAgICAgICAgICAgIH0sIFtdKSxcbiAgICAgICAgICAgIG5hdmlnYXRlVG9GaXJzdDogdXNlQ2FsbGJhY2soKCkgPT4geyBuYXZpZ2F0ZVRvSW5kZXgoaW5kZXhEZW1hbmdsZXIhKDApLCB0cnVlKTsgfSwgW10pLFxuICAgICAgICAgICAgbmF2aWdhdGVUb0xhc3Q6IHVzZUNhbGxiYWNrKCgpID0+IHsgbmF2aWdhdGVUb0luZGV4KGluZGV4RGVtYW5nbGVyIShjaGlsZHJlbi5nZXRIaWdoZXN0SW5kZXgoKSksIHRydWUpOyB9LCBbXSksXG4gICAgICAgICAgICAuLi5saW5lYXJOYXZpZ2F0aW9uXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHVzZUxpc3ROYXZpZ2F0aW9uUHJvcHMgPSB1c2VDYWxsYmFjaygocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFBhcmVudE9yQ2hpbGRFbGVtZW50Pik6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFBhcmVudE9yQ2hpbGRFbGVtZW50PiA9PiB7XG4gICAgICAgIHJldHVybiB1c2VMaW5lYXJOYXZpZ2F0aW9uUHJvcHModXNlVHlwZWFoZWFkTmF2aWdhdGlvblByb3BzKHByb3BzKSk7XG4gICAgfSwgW3VzZUxpbmVhck5hdmlnYXRpb25Qcm9wcywgdXNlVHlwZWFoZWFkTmF2aWdhdGlvblByb3BzXSk7XG5cblxuICAgIGNvbnN0IHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGQgPSB1c2VDYWxsYmFjazxVc2VMaXN0TmF2aWdhdGlvbkNoaWxkPENoaWxkRWxlbWVudCwgTHNTdWJJbmZvLCBFeHRyYUZsYWdLZXlzPj4oKHsgbWFuYWdlZENoaWxkOiB7IGluZGV4LCBmbGFncyB9LCByb3ZpbmdUYWJJbmRleDogeyBmb2N1c1NlbGYsIGhpZGRlbiB9LCBsaXN0TmF2aWdhdGlvbjogeyB0ZXh0IH0sIHN1YkluZm8gfSkgPT4ge1xuXG4gICAgICAgIGNvbnN0IF92OiB2b2lkID0gdXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkKHsgdGV4dCwgaW5kZXggfSk7XG4gICAgICAgIGNvbnN0IGdldEluZGV4ID0gdXNlU3RhYmxlR2V0dGVyKGluZGV4KTtcbiAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcblxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0VGFiYmFibGVJbmRleCgpID09IGdldEluZGV4KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGVUb0luZGV4KGluZGV4LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSwgW10pO1xuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQcm9wcyxcbiAgICAgICAgICAgIHJvdmluZ1RhYkluZGV4OiB7XG4gICAgICAgICAgICAgICAgdGFiYmFibGUsXG4gICAgICAgICAgICAgICAgZ2V0VGFiYmFibGUsXG4gICAgICAgICAgICAgICAgZ2V0RWxlbWVudFxuICAgICAgICAgICAgfVxuICAgICAgICB9ID0gdXNlUm92aW5nVGFiSW5kZXhDaGlsZCh7XG4gICAgICAgICAgICBtYW5hZ2VkQ2hpbGQ6IHsgaW5kZXgsIGZsYWdzIH0sXG4gICAgICAgICAgICByb3ZpbmdUYWJJbmRleDogeyBmb2N1c1NlbGYsIGhpZGRlbjogISFoaWRkZW4gfSxcbiAgICAgICAgICAgIHN1YkluZm86IHsgdGV4dCwgc3ViSW5mbyB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQcm9wczogKHA6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPENoaWxkRWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPENoaWxkRWxlbWVudD4gPSBmdW5jdGlvbiAoeyAuLi5wcm9wcyB9KSB7XG4gICAgICAgICAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHM8Q2hpbGRFbGVtZW50Pih1c2VSb3ZpbmdUYWJJbmRleENoaWxkUHJvcHMoKCh7IGluZXJ0OiBoaWRkZW4gfSBhcyBoLkpTWC5IVE1MQXR0cmlidXRlczxDaGlsZEVsZW1lbnQ+KSkpLCBwcm9wcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzLFxuICAgICAgICAgICAgcm92aW5nVGFiSW5kZXg6IHtcbiAgICAgICAgICAgICAgICB0YWJiYWJsZSxcbiAgICAgICAgICAgICAgICBnZXRUYWJiYWJsZSxcbiAgICAgICAgICAgICAgICBnZXRFbGVtZW50XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBbdXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkLCB1c2VSb3ZpbmdUYWJJbmRleENoaWxkLCBuYXZpZ2F0ZVRvSW5kZXhdKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGQsXG4gICAgICAgIHVzZUxpc3ROYXZpZ2F0aW9uUHJvcHMsXG5cbiAgICAgICAgbGlzdE5hdmlnYXRpb246IHsgbmF2aWdhdGVUb0luZGV4IH0sXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbjogcGFyZW50UmV0dXJuVHlwZS5tYW5hZ2VkQ2hpbGRyZW4sXG4gICAgICAgIHJvdmluZ1RhYkluZGV4OiBwYXJlbnRSZXR1cm5UeXBlLnJvdmluZ1RhYkluZGV4LFxuICAgICAgICBsaW5lYXJOYXZpZ2F0aW9uOiB7fSxcbiAgICAgICAgdHlwZWFoZWFkTmF2aWdhdGlvbjogeyBjdXJyZW50VHlwZWFoZWFkLCBpbnZhbGlkVHlwZWFoZWFkIH1cbiAgICAgICAgLypsaXN0TmF2aWdhdGlvbjogeyBuYXZpZ2F0ZVRvSW5kZXggfSxcbiAgICAgICAgcm92aW5nVGFiSW5kZXg6IHsgZm9jdXNTZWxmLCBnZXRUYWJiYWJsZUluZGV4LCBzZXRUYWJiYWJsZUluZGV4IH0sXG4gICAgICAgIGxpbmVhck5hdmlnYXRpb246IHt9LFxuICAgICAgICB0eXBlYWhlYWROYXZpZ2F0aW9uOiB7IGN1cnJlbnRUeXBlYWhlYWQsIGludmFsaWRUeXBlYWhlYWQgfSovXG4gICAgfVxufVxuXG5cblxuXG5cblxuLyoqXG4gKiBJdCdzIHZlcnkgY29tbW9uIHRvIGNvbWJpbmUgYSB0YWJiYWJsZSBsaXN0IG9mIHRoaW5ncyBhbmQgXCJzZWxlY3Rpb25cIiBvZiBvbmUgb2YgdGhvc2UgdGhpbmdzLlxuICogXG4gKiBMaXN0cywgcmFkaW8gYnV0dG9ucywgdGFicywgZXRjLiBldGMuXG4gKiBcbiAqIFRoaXMgaXMgYSBzaG9ydGN1dCB0aGF0IGNvbWJpbmVzIHRoZSB0d28gd2l0aCB0aGUgY29ycmVjdCB0eXBpbmcuXG4gKiBAcGFyYW0gcGFyYW0wIFxuICogQHJldHVybnMgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbjxQYXJlbnRPckNoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEMsIEsgZXh0ZW5kcyBzdHJpbmc+KHtcbiAgICBzaW5nbGVTZWxlY3Rpb246IHsgc2VsZWN0ZWRJbmRleCwgc2VsZWN0aW9uTW9kZSwgb25TZWxlY3RlZEluZGV4Q2hhbmdlIH0sXG4gICAgbGlzdE5hdmlnYXRpb24sXG4gICAgbWFuYWdlZENoaWxkcmVuLFxuICAgIHJvdmluZ1RhYkluZGV4OiB7IC4uLnJvdmluZ1RhYkluZGV4IH0sXG4gICAgbGluZWFyTmF2aWdhdGlvbixcbiAgICB0eXBlYWhlYWROYXZpZ2F0aW9uLFxuICAgIGNoaWxkcmVuSGF2ZUZvY3VzOiB7IG9uQWxsTG9zdEZvY3VzLCBvbkFueUdhaW5lZEZvY3VzIH1cbn06IFVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uUGFyYW1ldGVyczxuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyPik6IFVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uUmV0dXJuVHlwZVdpdGhIb29rczxQYXJlbnRPckNoaWxkRWxlbWVudCwgQ2hpbGRFbGVtZW50LCBDLCBLPiB7XG4gICAgY29uc3QgcGFyZW50UmV0dXJuVHlwZSA9IHVzZUxpc3ROYXZpZ2F0aW9uPFBhcmVudE9yQ2hpbGRFbGVtZW50LCBDaGlsZEVsZW1lbnQsIEMsIEsgfCBcInNlbGVjdGVkXCI+KHtcbiAgICAgICAgbGlzdE5hdmlnYXRpb24sXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbixcbiAgICAgICAgcm92aW5nVGFiSW5kZXg6IHtcbiAgICAgICAgICAgIGluaXRpYWxJbmRleDogKHNlbGVjdGVkSW5kZXggPz8gdW5kZWZpbmVkKSxcbiAgICAgICAgICAgIC4uLnJvdmluZ1RhYkluZGV4XG4gICAgICAgIH0sXG4gICAgICAgIGxpbmVhck5hdmlnYXRpb24sXG4gICAgICAgIHR5cGVhaGVhZE5hdmlnYXRpb25cbiAgICB9KTtcblxuICAgIGNvbnN0IHsgdXNlQ2hpbGRyZW5IYXZlRm9jdXNDaGlsZCB9ID0gdXNlQ2hpbGRyZW5IYXZlRm9jdXMoe1xuICAgICAgICBjaGlsZHJlbkhhdmVGb2N1czoge1xuICAgICAgICAgICAgb25BbGxMb3N0Rm9jdXM6IHVzZVN0YWJsZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBvbkFsbExvc3RGb2N1cz8uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkSW5kZXggIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgc2V0VGFiYmFibGVJbmRleChzZWxlY3RlZEluZGV4LCBmYWxzZSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG9uQW55R2FpbmVkRm9jdXNcbiAgICAgICAgfSwgbWFuYWdlZENoaWxkcmVuOiB7XG4gICAgICAgICAgICBvbkFmdGVyQ2hpbGRMYXlvdXRFZmZlY3Q6IG51bGwsXG4gICAgICAgICAgICBvbkNoaWxkcmVuTW91bnRDaGFuZ2U6IG51bGxcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3RhYmxlT25DaGFuZ2UgPSB1c2VTdGFibGVDYWxsYmFjayhvblNlbGVjdGVkSW5kZXhDaGFuZ2UpO1xuXG4gICAgY29uc3Qge1xuICAgICAgICB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkLFxuICAgICAgICB1c2VMaXN0TmF2aWdhdGlvblByb3BzLFxuICAgICAgICAuLi5saXN0UmVzdFxuICAgIH0gPSBwYXJlbnRSZXR1cm5UeXBlO1xuXG4gICAgY29uc3QgeyBtYW5hZ2VkQ2hpbGRyZW46IHsgY2hpbGRyZW4gfSwgcm92aW5nVGFiSW5kZXg6IHsgc2V0VGFiYmFibGVJbmRleCB9IH0gPSBsaXN0UmVzdDtcblxuICAgIGNvbnN0IHtcbiAgICAgICAgY2hhbmdlSW5kZXg6IGNoYW5nZVNlbGVjdGVkSW5kZXgsXG4gICAgICAgIGdldEN1cnJlbnRJbmRleDogZ2V0U2VsZWN0ZWRJbmRleCxcbiAgICAgICAgLy9yZWV2YWx1YXRlQ2xvc2VzdEZpdFxuICAgIH0gPSB1c2VDaGlsZHJlbkZsYWc8VXNlUm92aW5nVGFiSW5kZXhTdWJJbmZvPENoaWxkRWxlbWVudCwgVXNlTGlzdE5hdmlnYXRpb25TdWJJbmZvPEM+PiwgSyB8IFwic2VsZWN0ZWRcIj4oe1xuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICAgIGluaXRpYWxJbmRleDogc2VsZWN0ZWRJbmRleCxcbiAgICAgICAga2V5OiBcInNlbGVjdGVkXCIsXG4gICAgICAgIGNsb3Nlc3RGaXQ6IGZhbHNlXG4gICAgfSk7XG5cbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjaGFuZ2VTZWxlY3RlZEluZGV4KHNlbGVjdGVkSW5kZXgpO1xuICAgIH0sIFtzZWxlY3RlZEluZGV4XSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB1c2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkOiB1c2VDYWxsYmFjazxVc2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkPENoaWxkRWxlbWVudCwgQywgSyB8IFwic2VsZWN0ZWRcIj4+KCh7IG1hbmFnZWRDaGlsZDogeyBpbmRleCwgZmxhZ3MgfSwgcm92aW5nVGFiSW5kZXg6IHJ0aSwgbGlzdE5hdmlnYXRpb246IGxzLCBoYXNGb2N1czogeyBvbkZvY3VzZWRJbm5lckNoYW5nZWQsIC4uLmhhc0ZvY3VzIH0sIHN1YkluZm8gfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgW2lzU2VsZWN0ZWQsIHNldElzU2VsZWN0ZWQsIGdldElzU2VsZWN0ZWRdID0gdXNlU3RhdGUoZ2V0U2VsZWN0ZWRJbmRleCgpID09IGluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkUmVmID0gdXNlUmVmPENoaWxkRmxhZ09wZXJhdGlvbnM+KHsgZ2V0OiBnZXRJc1NlbGVjdGVkLCBzZXQ6IHNldElzU2VsZWN0ZWQsIGlzVmFsaWQ6IHVzZVN0YWJsZUNhbGxiYWNrKCgpID0+ICFydGkuaGlkZGVuKSB9KTtcbiAgICAgICAgICAgIGNvbnN0IHsgdXNlQ2hpbGRyZW5IYXZlRm9jdXNDaGlsZFByb3BzLCBnZXRFbGVtZW50IH0gPSB1c2VDaGlsZHJlbkhhdmVGb2N1c0NoaWxkKHtcbiAgICAgICAgICAgICAgICBvbkZvY3VzZWRJbm5lckNoYW5nZWQ6IHVzZVN0YWJsZUNhbGxiYWNrKChmb2N1c2VkOiBib29sZWFuLCBwcmV2OiBib29sZWFuIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG9uRm9jdXNlZElubmVyQ2hhbmdlZD8uKGZvY3VzZWQsIHByZXYpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uTW9kZSA9PSAnZm9jdXMnICYmIGZvY3VzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFibGVPbkNoYW5nZSh7IHRhcmdldDogZ2V0RWxlbWVudCgpLCBjdXJyZW50VGFyZ2V0OiBnZXRFbGVtZW50KCkgfSBhcyBFdmVudCwgZ2V0SW5kZXgoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIC4uLmhhc0ZvY3VzLFxuICAgICAgICAgICAgICAgIG1hbmFnZWRDaGlsZDogeyBpbmRleCB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIHJvdmluZ1RhYkluZGV4OiBydGlfcmV0LFxuICAgICAgICAgICAgICAgIHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQcm9wc1xuICAgICAgICAgICAgfSA9IHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGQoe1xuICAgICAgICAgICAgICAgIG1hbmFnZWRDaGlsZDoge1xuICAgICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZFJlZi5jdXJyZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmxhZ3NcbiAgICAgICAgICAgICAgICAgICAgfSBhcyBQYXJ0aWFsPFJlY29yZDxLIHwgXCJzZWxlY3RlZFwiIHwgXCJ0YWJiYWJsZVwiLCBDaGlsZEZsYWdPcGVyYXRpb25zPj5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJvdmluZ1RhYkluZGV4OiBydGksXG4gICAgICAgICAgICAgICAgbGlzdE5hdmlnYXRpb246IGxzLFxuICAgICAgICAgICAgICAgIHN1YkluZm8sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGdldEluZGV4ID0gdXNlU3RhYmxlR2V0dGVyKGluZGV4KTtcblxuICAgICAgICAgICAgY29uc3QgdXNlUHJlc3NQcm9wcyA9IHVzZVByZXNzPENoaWxkRWxlbWVudD4oeyBvbkNsaWNrU3luYzogKGUpID0+IHsgc3RhYmxlT25DaGFuZ2UoZSwgZ2V0SW5kZXgoKSk7IH0sIGV4Y2x1ZGU6IHt9LCBoYXNGb2N1cyB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1c2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8Q2hpbGRFbGVtZW50PikgPT4gdXNlUHJlc3NQcm9wcyh1c2VDaGlsZHJlbkhhdmVGb2N1c0NoaWxkUHJvcHModXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzKHByb3BzKSkpLFxuICAgICAgICAgICAgICAgIHJvdmluZ1RhYkluZGV4OiBydGlfcmV0LFxuICAgICAgICAgICAgICAgIHNpbmdsZVNlbGVjdGlvbjogeyBzZWxlY3RlZDogaXNTZWxlY3RlZCwgZ2V0U2VsZWN0ZWQ6IGdldElzU2VsZWN0ZWQgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSwgW3NlbGVjdGlvbk1vZGVdKSxcbiAgICAgICAgdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25Qcm9wczogdXNlQ2FsbGJhY2soKC4uLnA6IFBhcmFtZXRlcnM8dHlwZW9mIHVzZUxpc3ROYXZpZ2F0aW9uUHJvcHM+KSA9PiB7IHJldHVybiB1c2VMaXN0TmF2aWdhdGlvblByb3BzKC4uLnApIH0sIFtdKSxcbiAgICAgICAgLi4ubGlzdFJlc3QsXG4gICAgICAgIHNpbmdsZVNlbGVjdGlvbjoge31cbiAgICB9XG59XG5cblxuXG5cblxuXG5cblxuZXhwb3J0IGludGVyZmFjZSBVc2VTb3J0YWJsZUxpc3ROYXZpZ2F0aW9uUGFyYW1ldGVyczxDLCBLIGV4dGVuZHMgc3RyaW5nLCBHIGV4dGVuZHMgYW55W10sIFYsIExzT21pdHMgZXh0ZW5kcyBMaXN0TmF2aWdhdGlvblBhcmFtZXRlcnNPbWl0cywgTG5PbWl0cyBleHRlbmRzIExpbmVhck5hdmlnYXRpb25PbWl0cywgVG5PbWl0cyBleHRlbmRzIFR5cGVhaGVhZE5hdmlnYXRpb25PbWl0cywgUnRpT21pdHMgZXh0ZW5kcyBSb3ZpbmdUYWJJbmRleFBhcmFtZXRlcnNPbWl0cywgTWNPbWl0cyBleHRlbmRzIE1hbmFnZWRDaGlsZHJlbk9taXRzPiBleHRlbmRzXG4gICAgVXNlTGlzdE5hdmlnYXRpb25QYXJhbWV0ZXJzPExzT21pdHMgfCBcImluZGV4TWFuZ2xlclwiIHwgXCJpbmRleERlbWFuZ2xlclwiLCBMbk9taXRzLCBUbk9taXRzLCBSdGlPbWl0cywgTWNPbWl0cz4sXG4gICAgVXNlU29ydGFibGVDaGlsZHJlblBhcmFtZXRlcnM8QywgSywgRywgVj4ge1xufVxuXG5leHBvcnQgdHlwZSBVc2VTb3J0YWJsZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQYXJhbWV0ZXJzPEMsIEsgZXh0ZW5kcyBzdHJpbmcsIExzT21pdHMgZXh0ZW5kcyBMaXN0TmF2aWdhdGlvbkNoaWxkT21pdHMsIFJ0aU9taXRzIGV4dGVuZHMgUm92aW5nVGFiSW5kZXhDaGlsZE9taXRzLCBNY09taXRzIGV4dGVuZHMgTWFuYWdlZENoaWxkT21pdHM+ID0gVXNlTGlzdE5hdmlnYXRpb25DaGlsZFBhcmFtZXRlcnM8QywgSywgTHNPbWl0cywgUnRpT21pdHMsIE1jT21pdHMsIEM+O1xuZXhwb3J0IHR5cGUgVXNlU29ydGFibGVMaXN0TmF2aWdhdGlvbkNoaWxkPENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEMsIEsgZXh0ZW5kcyBzdHJpbmc+ID0gKHA6IFVzZVNvcnRhYmxlTGlzdE5hdmlnYXRpb25DaGlsZFBhcmFtZXRlcnM8QywgSywgbmV2ZXIsIG5ldmVyLCBuZXZlcj4pID0+IFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRSZXR1cm5UeXBlV2l0aEhvb2tzPENoaWxkRWxlbWVudD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlU29ydGFibGVMaXN0TmF2aWdhdGlvblJldHVyblR5cGVJbmZvPENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEMsIEsgZXh0ZW5kcyBzdHJpbmcsIEcgZXh0ZW5kcyBhbnlbXT4gZXh0ZW5kcyBVc2VMaXN0TmF2aWdhdGlvblJldHVyblR5cGVJbmZvPENoaWxkRWxlbWVudCwgQywgSz4sXG4gICAgVXNlU29ydGFibGVDaGlsZHJlblJldHVyblR5cGVJbmZvPEMsIEssIEc+IHtcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZVNvcnRhYmxlTGlzdE5hdmlnYXRpb25SZXR1cm5UeXBlV2l0aEhvb2tzPFBhcmVudEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDLCBLIGV4dGVuZHMgc3RyaW5nLCBHIGV4dGVuZHMgYW55W10+IGV4dGVuZHMgVXNlU29ydGFibGVMaXN0TmF2aWdhdGlvblJldHVyblR5cGVJbmZvPENoaWxkRWxlbWVudCwgQywgSywgRz4ge1xuICAgIHVzZVNvcnRhYmxlTGlzdE5hdmlnYXRpb25Qcm9wczogKHByb3BzOiBPbWl0PGguSlNYLkhUTUxBdHRyaWJ1dGVzPFBhcmVudEVsZW1lbnQ+LCBcImNoaWxkcmVuXCI+ICYgeyBjaGlsZHJlbjogVk5vZGU8YW55PltdOyB9KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxQYXJlbnRFbGVtZW50PlxuICAgIHVzZVNvcnRhYmxlTGlzdE5hdmlnYXRpb25DaGlsZDogVXNlU29ydGFibGVMaXN0TmF2aWdhdGlvbkNoaWxkPENoaWxkRWxlbWVudCwgQywgSz47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTb3J0YWJsZUxpc3ROYXZpZ2F0aW9uPFBhcmVudEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDLCBLIGV4dGVuZHMgc3RyaW5nLCBHIGV4dGVuZHMgYW55W10sIFY+KHsgbGluZWFyTmF2aWdhdGlvbiwgbGlzdE5hdmlnYXRpb24sIG1hbmFnZWRDaGlsZHJlbiwgcm92aW5nVGFiSW5kZXgsIHR5cGVhaGVhZE5hdmlnYXRpb24sIHJlYXJyYW5nZWFibGVDaGlsZHJlbiwgc29ydGFibGVDaGlsZHJlbiB9OiBVc2VTb3J0YWJsZUxpc3ROYXZpZ2F0aW9uUGFyYW1ldGVyczxDLCBLLCBHLCBWLCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXI+KTogVXNlU29ydGFibGVMaXN0TmF2aWdhdGlvblJldHVyblR5cGVXaXRoSG9va3M8UGFyZW50RWxlbWVudCwgQ2hpbGRFbGVtZW50LCBDLCBLLCBHPiB7XG5cbiAgICBjb25zdCB7XG4gICAgICAgIHVzZVNvcnRhYmxlUHJvcHMsXG4gICAgICAgIC4uLnNvcnRhYmxlQ2hpbGRyZW5SZXR1cm5UeXBlXG4gICAgfSA9IHVzZVNvcnRhYmxlQ2hpbGRyZW48UGFyZW50RWxlbWVudCwgQywgSywgRywgVj4oe1xuICAgICAgICByZWFycmFuZ2VhYmxlQ2hpbGRyZW4sXG4gICAgICAgIHNvcnRhYmxlQ2hpbGRyZW4sXG4gICAgfSk7XG5cbiAgICBjb25zdCB7IHJlYXJyYW5nZWFibGVDaGlsZHJlbjogeyBpbmRleERlbWFuZ2xlciwgaW5kZXhNYW5nbGVyIH0gfSA9IHNvcnRhYmxlQ2hpbGRyZW5SZXR1cm5UeXBlO1xuXG4gICAgY29uc3Qge1xuICAgICAgICB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkLFxuICAgICAgICB1c2VMaXN0TmF2aWdhdGlvblByb3BzLFxuICAgICAgICAuLi5saXN0TmF2UmV0dXJuVHlwZVxuICAgIH0gPSB1c2VMaXN0TmF2aWdhdGlvbjxQYXJlbnRFbGVtZW50LCBDaGlsZEVsZW1lbnQsIEMsIEs+KHtcbiAgICAgICAgbGluZWFyTmF2aWdhdGlvbjogbGluZWFyTmF2aWdhdGlvbixcbiAgICAgICAgbGlzdE5hdmlnYXRpb246IHsgaW5kZXhEZW1hbmdsZXIsIGluZGV4TWFuZ2xlciwgLi4ubGlzdE5hdmlnYXRpb24gfSxcbiAgICAgICAgbWFuYWdlZENoaWxkcmVuOiBtYW5hZ2VkQ2hpbGRyZW4sXG4gICAgICAgIHJvdmluZ1RhYkluZGV4LFxuICAgICAgICB0eXBlYWhlYWROYXZpZ2F0aW9uOiB0eXBlYWhlYWROYXZpZ2F0aW9uLFxuICAgIH0pO1xuXG4gICAgY29uc3QgdXNlU29ydGFibGVMaXN0TmF2aWdhdGlvblByb3BzID0gKHByb3BzOiBPbWl0PGguSlNYLkhUTUxBdHRyaWJ1dGVzPFBhcmVudEVsZW1lbnQ+LCBcImNoaWxkcmVuXCI+ICYgeyBjaGlsZHJlbjogVk5vZGU8YW55PltdOyB9KSA9PiB7XG4gICAgICAgIHJldHVybiAodXNlTGlzdE5hdmlnYXRpb25Qcm9wcyh1c2VTb3J0YWJsZVByb3BzKHByb3BzKSkpXG4gICAgfVxuICAgIGNvbnN0IHVzZVNvcnRhYmxlTGlzdE5hdmlnYXRpb25DaGlsZDogVXNlU29ydGFibGVMaXN0TmF2aWdhdGlvbkNoaWxkPENoaWxkRWxlbWVudCwgQywgSz4gPSAocCkgPT4ge1xuICAgICAgICByZXR1cm4gdXNlTGlzdE5hdmlnYXRpb25DaGlsZChwKVxuICAgIH1cblxuICAgIHJldHVybiAoe1xuICAgICAgICB1c2VTb3J0YWJsZUxpc3ROYXZpZ2F0aW9uUHJvcHMsXG4gICAgICAgIHVzZVNvcnRhYmxlTGlzdE5hdmlnYXRpb25DaGlsZCxcbiAgICAgICAgLi4ubGlzdE5hdlJldHVyblR5cGUsXG4gICAgICAgIC4uLnNvcnRhYmxlQ2hpbGRyZW5SZXR1cm5UeXBlXG4gICAgICAgIC8qbWFuYWdlZENoaWxkcmVuOiBsaXN0TmF2UmV0dXJuVHlwZS5tYW5hZ2VkQ2hpbGRyZW4sXG4gICAgICAgIGxpc3ROYXZpZ2F0aW9uOiBsaXN0TmF2UmV0dXJuVHlwZS5saXN0TmF2aWdhdGlvbixcbiAgICAgICAgbGluZWFyTmF2aWdhdGlvbjogbGlzdE5hdlJldHVyblR5cGUubGluZWFyTmF2aWdhdGlvbixcbiAgICAgICAgcm92aW5nVGFiSW5kZXg6IGxpc3ROYXZSZXR1cm5UeXBlLnJvdmluZ1RhYkluZGV4LFxuICAgICAgICB0eXBlYWhlYWROYXZpZ2F0aW9uOiBsaXN0TmF2UmV0dXJuVHlwZS50eXBlYWhlYWROYXZpZ2F0aW9uLFxuICAgICAgICBzb3J0YWJsZUNoaWxkcmVuOiBzb3J0YWJsZUNoaWxkcmVuUmV0dXJuVHlwZS5zb3J0YWJsZUNoaWxkcmVuLFxuICAgICAgICByZWFycmFuZ2VhYmxlQ2hpbGRyZW46IHNvcnRhYmxlQ2hpbGRyZW5SZXR1cm5UeXBlLnJlYXJyYW5nZWFibGVDaGlsZHJlbiovXG4gICAgfSk7XG5cbn1cblxuZXhwb3J0IHR5cGUgVXNlU29ydGFibGVMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkPENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEMsIEsgZXh0ZW5kcyBzdHJpbmc+ID0gKGFyZ3M6IFVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uQ2hpbGRQYXJhbWV0ZXJzPENoaWxkRWxlbWVudCwgQywgSywgbmV2ZXIsIG5ldmVyLCBuZXZlciwgQz4pID0+IFVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uQ2hpbGRSZXR1cm5UeXBlV2l0aEhvb2tzPENoaWxkRWxlbWVudD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlU29ydGFibGVMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvblBhcmFtZXRlcnM8U1NPbWl0cyBleHRlbmRzIFNpbmdsZVNlbGVjdGlvbk9taXRzLCBMc09taXRzIGV4dGVuZHMgTGlzdE5hdmlnYXRpb25QYXJhbWV0ZXJzT21pdHMsIExuT21pdHMgZXh0ZW5kcyBMaW5lYXJOYXZpZ2F0aW9uT21pdHMsIFRuT21pdHMgZXh0ZW5kcyBUeXBlYWhlYWROYXZpZ2F0aW9uT21pdHMsIFJ0aU9taXRzIGV4dGVuZHMgUm92aW5nVGFiSW5kZXhQYXJhbWV0ZXJzT21pdHMsIE1jT21pdHMgZXh0ZW5kcyBNYW5hZ2VkQ2hpbGRyZW5PbWl0cz4gZXh0ZW5kcyBVc2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvblBhcmFtZXRlcnM8U1NPbWl0cywgTHNPbWl0cyB8IFwiaW5kZXhNYW5nbGVyXCIgfCBcImluZGV4RGVtYW5nbGVyXCIsIExuT21pdHMsIFRuT21pdHMsIFJ0aU9taXRzLCBNY09taXRzPiB7XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VTb3J0YWJsZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uUmV0dXJuVHlwZUluZm88Q2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgQywgSyBleHRlbmRzIHN0cmluZywgRyBleHRlbmRzIGFueVtdPiBleHRlbmRzIFVzZVNvcnRhYmxlQ2hpbGRyZW5SZXR1cm5UeXBlSW5mbzxDLCBLLCBHPiwgVXNlTGlzdE5hdmlnYXRpb25SZXR1cm5UeXBlSW5mbzxDaGlsZEVsZW1lbnQsIEMsIEs+IHtcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZVNvcnRhYmxlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25SZXR1cm5UeXBlV2l0aEhvb2tzPFBhcmVudEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDLCBLIGV4dGVuZHMgc3RyaW5nLCBHIGV4dGVuZHMgYW55W10+IGV4dGVuZHNcbiAgICBVc2VTb3J0YWJsZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uUmV0dXJuVHlwZUluZm88Q2hpbGRFbGVtZW50LCBDLCBLLCBHPiB7XG4gICAgdXNlU29ydGFibGVMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvblByb3BzOiAocHJvcHM6IE9taXQ8aC5KU1guSFRNTEF0dHJpYnV0ZXM8UGFyZW50RWxlbWVudD4sIFwiY2hpbGRyZW5cIj4gJiB7IGNoaWxkcmVuOiBWTm9kZTxhbnk+W107IH0pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFBhcmVudEVsZW1lbnQ+XG4gICAgdXNlU29ydGFibGVMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkOiBVc2VTb3J0YWJsZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uQ2hpbGQ8Q2hpbGRFbGVtZW50LCBDLCBLPjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNvcnRhYmxlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb248UGFyZW50RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIENoaWxkRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEMsIEsgZXh0ZW5kcyBzdHJpbmc+KHsgbGluZWFyTmF2aWdhdGlvbiwgbGlzdE5hdmlnYXRpb24sIG1hbmFnZWRDaGlsZHJlbiwgcm92aW5nVGFiSW5kZXgsIHNpbmdsZVNlbGVjdGlvbiwgdHlwZWFoZWFkTmF2aWdhdGlvbiwgY2hpbGRyZW5IYXZlRm9jdXMgfTogVXNlU29ydGFibGVMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvblBhcmFtZXRlcnM8bmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlcj4pOiBVc2VTb3J0YWJsZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uUmV0dXJuVHlwZVdpdGhIb29rczxQYXJlbnRFbGVtZW50LCBDaGlsZEVsZW1lbnQsIEMsIEssIFtdPiB7XG5cbiAgICBjb25zdCB7XG4gICAgICAgIHVzZVNvcnRhYmxlUHJvcHMsXG4gICAgICAgIC4uLnNvcnRhYmxlUmV0dXJuVHlwZVxuICAgIH0gPSB1c2VTb3J0YWJsZUNoaWxkcmVuPFBhcmVudEVsZW1lbnQsIEMsIEssIFtdLCBudW1iZXI+KHtcbiAgICAgICAgcmVhcnJhbmdlYWJsZUNoaWxkcmVuOiB7IGdldEluZGV4OiB1c2VDYWxsYmFjaygocm93KSA9PiByb3cuaW5kZXgsIFtdKSB9LFxuICAgICAgICBzb3J0YWJsZUNoaWxkcmVuOiB7XG4gICAgICAgICAgICBnZXRWYWx1ZTogdXNlQ2FsbGJhY2soKHJvdykgPT4gcm93LmluZGV4LCBbXSksXG4gICAgICAgICAgICBjb21wYXJlOiB1c2VDYWxsYmFjaygobGhzLCByaHMpID0+IHsgcmV0dXJuIGxocyAtIHJoczsgfSwgW10pLFxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCB7IHJlYXJyYW5nZWFibGVDaGlsZHJlbjogeyBpbmRleERlbWFuZ2xlciwgaW5kZXhNYW5nbGVyIH0gfSA9IHNvcnRhYmxlUmV0dXJuVHlwZTtcblxuICAgIGNvbnN0IHtcbiAgICAgICAgdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZCxcbiAgICAgICAgdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25Qcm9wcyxcbiAgICAgICAgLi4ubGlzdE5hdlJldHVyblR5cGVcbiAgICB9ID0gdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb248UGFyZW50RWxlbWVudCwgQ2hpbGRFbGVtZW50LCBDLCBLPih7XG4gICAgICAgIGxpbmVhck5hdmlnYXRpb246IGxpbmVhck5hdmlnYXRpb24sXG4gICAgICAgIGxpc3ROYXZpZ2F0aW9uOiB7IGluZGV4RGVtYW5nbGVyLCBpbmRleE1hbmdsZXIsIC4uLmxpc3ROYXZpZ2F0aW9uIH0sXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbjogbWFuYWdlZENoaWxkcmVuLFxuICAgICAgICByb3ZpbmdUYWJJbmRleDogcm92aW5nVGFiSW5kZXgsXG4gICAgICAgIHR5cGVhaGVhZE5hdmlnYXRpb246IHR5cGVhaGVhZE5hdmlnYXRpb24sXG4gICAgICAgIHNpbmdsZVNlbGVjdGlvbjogc2luZ2xlU2VsZWN0aW9uLFxuICAgICAgICBjaGlsZHJlbkhhdmVGb2N1czogY2hpbGRyZW5IYXZlRm9jdXNcbiAgICB9KTtcblxuICAgIGNvbnN0IHVzZVNvcnRhYmxlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25Qcm9wcyA9IChwcm9wczogT21pdDxoLkpTWC5IVE1MQXR0cmlidXRlczxQYXJlbnRFbGVtZW50PiwgXCJjaGlsZHJlblwiPiAmIHsgY2hpbGRyZW46IFZOb2RlPGFueT5bXTsgfSkgPT4ge1xuICAgICAgICByZXR1cm4gKHVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uUHJvcHModXNlU29ydGFibGVQcm9wcyhwcm9wcykpKTtcbiAgICB9XG4gICAgY29uc3QgdXNlU29ydGFibGVMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkID0gKHA6IFVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uQ2hpbGRQYXJhbWV0ZXJzPENoaWxkRWxlbWVudCwgQywgSywgbmV2ZXIsIG5ldmVyLCBuZXZlciwgQz4pID0+IHtcbiAgICAgICAgcmV0dXJuIHVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uQ2hpbGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICh7XG4gICAgICAgIHVzZVNvcnRhYmxlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZCxcbiAgICAgICAgdXNlU29ydGFibGVMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvblByb3BzLFxuICAgICAgICAvL3NvcnRhYmxlOiB7IHNvcnQsIHNodWZmbGUsIHJlYXJyYW5nZSwgZGVtYW5nbGVNYXAsIGluZGV4RGVtYW5nbGVyLCBpbmRleE1hbmdsZXIsIG1hbmdsZU1hcCB9LFxuICAgICAgICAuLi5zb3J0YWJsZVJldHVyblR5cGUsXG4gICAgICAgIC4uLmxpc3ROYXZSZXR1cm5UeXBlXG4gICAgfSk7XG5cbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJ5TmF2aWdhdGVUb0luZGV4UGFyYW1ldGVyczxDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDLCBLIGV4dGVuZHMgc3RyaW5nPiB7XG4gICAgY2hpbGRyZW46IE1hbmFnZWRDaGlsZHJlbjxudW1iZXIsIFVzZVJvdmluZ1RhYkluZGV4U3ViSW5mbzxDaGlsZEVsZW1lbnQsIFVzZUxpc3ROYXZpZ2F0aW9uU3ViSW5mbzxDPj4sIEs+O1xuICAgIGRlZmF1bHQ6IG51bWJlcjtcbiAgICB0YXJnZXQ6IG51bWJlcjtcbiAgICBzZWFyY2hEaXJlY3Rpb246IDEgfCAtMTtcbiAgICBpbmRleE1hbmdsZXI6IChuOiBudW1iZXIpID0+IG51bWJlcjtcbiAgICBpbmRleERlbWFuZ2xlcjogKG46IG51bWJlcikgPT4gbnVtYmVyO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cnlOYXZpZ2F0ZVRvSW5kZXg8Q2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgQywgSyBleHRlbmRzIHN0cmluZz4oeyBjaGlsZHJlbiwgc2VhcmNoRGlyZWN0aW9uLCBpbmRleERlbWFuZ2xlciwgaW5kZXhNYW5nbGVyLCB0YXJnZXQgfTogVHJ5TmF2aWdhdGVUb0luZGV4UGFyYW1ldGVyczxDaGlsZEVsZW1lbnQsIEMsIEs+KSB7XG4gICAgY29uc3QgdXBwZXIgPSBjaGlsZHJlbi5nZXRIaWdoZXN0SW5kZXgoKTtcbiAgICBjb25zdCBsb3dlciA9IDA7XG5cbiAgICBpZiAoc2VhcmNoRGlyZWN0aW9uID09PSAtMSkge1xuICAgICAgICB3aGlsZSAoKHRhcmdldCA+PSBsb3dlciAmJiAoY2hpbGRyZW4uZ2V0QXQodGFyZ2V0KSA9PSBudWxsKSB8fCAhIWNoaWxkcmVuLmdldEF0KHRhcmdldCk/LnN1YkluZm8uaGlkZGVuKSlcbiAgICAgICAgICAgIHRhcmdldCA9IGluZGV4RGVtYW5nbGVyKGluZGV4TWFuZ2xlcih0YXJnZXQpIC0gMSk7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldCA8IGxvd2VyID8gaW5kZXhEZW1hbmdsZXIobG93ZXIpIDogdGFyZ2V0O1xuICAgIH1cbiAgICBlbHNlIGlmIChzZWFyY2hEaXJlY3Rpb24gPT09IDEpIHtcbiAgICAgICAgd2hpbGUgKCh0YXJnZXQgPD0gdXBwZXIgJiYgY2hpbGRyZW4uZ2V0QXQodGFyZ2V0KSA9PSBudWxsKSB8fCAhIWNoaWxkcmVuLmdldEF0KHRhcmdldCk/LnN1YkluZm8uaGlkZGVuKVxuICAgICAgICAgICAgdGFyZ2V0ID0gaW5kZXhEZW1hbmdsZXIoaW5kZXhNYW5nbGVyKHRhcmdldCkgKyAxKTtcblxuICAgICAgICByZXR1cm4gdGFyZ2V0ID4gdXBwZXIgPyBpbmRleERlbWFuZ2xlcih1cHBlcikgOiB0YXJnZXQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbG93ZXI7XG4gICAgfVxufVxuXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCB7IE1hbmFnZWRDaGlsZE9taXRzLCBNYW5hZ2VkQ2hpbGRyZW5PbWl0cyB9IGZyb20gXCIuL3VzZS1jaGlsZC1tYW5hZ2VyXCI7XG5pbXBvcnQgeyBMaW5lYXJOYXZpZ2F0aW9uT21pdHMsIFR5cGVhaGVhZE5hdmlnYXRpb25PbWl0cyB9IGZyb20gXCIuL3VzZS1rZXlib2FyZC1uYXZpZ2F0aW9uXCI7XG5pbXBvcnQgeyBSb3ZpbmdUYWJJbmRleENoaWxkT21pdHMsIFJvdmluZ1RhYkluZGV4UGFyYW1ldGVyc09taXRzIH0gZnJvbSBcIi4vdXNlLXJvdmluZy10YWJpbmRleFwiO1xuaW1wb3J0IHsgdXNlSGFzRm9jdXMsIFVzZUhhc0ZvY3VzUGFyYW1ldGVycyB9IGZyb20gXCIuL3VzZS1oYXMtZm9jdXNcIjtcbmltcG9ydCB7IExpc3ROYXZpZ2F0aW9uQ2hpbGRPbWl0cywgTGlzdE5hdmlnYXRpb25QYXJhbWV0ZXJzT21pdHMsIHVzZUxpc3ROYXZpZ2F0aW9uLCBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkUGFyYW1ldGVycywgVXNlTGlzdE5hdmlnYXRpb25DaGlsZFJldHVyblR5cGVJbmZvLCBVc2VMaXN0TmF2aWdhdGlvblBhcmFtZXRlcnMsIFVzZUxpc3ROYXZpZ2F0aW9uUmV0dXJuVHlwZUluZm8gfSBmcm9tIFwiLi91c2UtbGlzdC1uYXZpZ2F0aW9uXCI7XG5pbXBvcnQgeyB1c2VTdGFibGVDYWxsYmFjayB9IGZyb20gXCIuL3VzZS1zdGFibGUtY2FsbGJhY2tcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXN0YXRlXCI7XG5cbi8qKlxuICogR3JpZHMgYXJlIGltcGxlbWVudGVkIHVzaW5nIHR3byBzZXRzIG9mIGxpc3QgbmF2aWdhdGlvbi5cbiAqIFxuICogVGhpcyByZXN1bHRzIGluIGEgbG90IG9mIHRoaW5ncyB3aXRoIHZlcnkgc2ltaWxhciBuYW1lcyBhbmQganVzdCBjb25mdXNpb24gYWxsIGFyb3VuZC4gUGxlYXNlIHVzZSBjYXV0aW9uLlxuICovXG5cbi8vIFBhcmFtZXRlcnMgKHBhcmVudCwgcm93LCBjZWxsKVxuZXhwb3J0IGludGVyZmFjZSBVc2VHcmlkTmF2aWdhdGlvblBhcmFtZXRlcnM8THNPbWl0cyBleHRlbmRzIExpc3ROYXZpZ2F0aW9uUGFyYW1ldGVyc09taXRzLCBMbk9taXRzIGV4dGVuZHMgTGluZWFyTmF2aWdhdGlvbk9taXRzLCBUbk9taXRzIGV4dGVuZHMgVHlwZWFoZWFkTmF2aWdhdGlvbk9taXRzLCBSdGlPbWl0cyBleHRlbmRzIFJvdmluZ1RhYkluZGV4UGFyYW1ldGVyc09taXRzLCBNY09taXRzIGV4dGVuZHMgTWFuYWdlZENoaWxkcmVuT21pdHM+IGV4dGVuZHMgVXNlTGlzdE5hdmlnYXRpb25QYXJhbWV0ZXJzPExzT21pdHMgfCBcImluZGV4TWFuZ2xlclwiIHwgXCJpbmRleERlbWFuZ2xlclwiLCBMbk9taXRzIHwgXCJuYXZpZ2F0aW9uRGlyZWN0aW9uXCIsIFRuT21pdHMsIFJ0aU9taXRzLCBNY09taXRzPiB7XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VHcmlkTmF2aWdhdGlvblJvd1BhcmFtZXRlcnM8XG4gICAgQ1IsXG4gICAgS1IgZXh0ZW5kcyBzdHJpbmcsXG4gICAgTHNPbWl0cyBleHRlbmRzIExpc3ROYXZpZ2F0aW9uUGFyYW1ldGVyc09taXRzLFxuICAgIExuT21pdHMgZXh0ZW5kcyBMaW5lYXJOYXZpZ2F0aW9uT21pdHMsXG4gICAgVG5PbWl0cyBleHRlbmRzIFR5cGVhaGVhZE5hdmlnYXRpb25PbWl0cyxcbiAgICBSdGlPbWl0cyBleHRlbmRzIFJvdmluZ1RhYkluZGV4UGFyYW1ldGVyc09taXRzLFxuICAgIE1jT21pdHMgZXh0ZW5kcyBNYW5hZ2VkQ2hpbGRyZW5PbWl0cyxcblxuICAgIExzQ2hpbGRPbWl0cyBleHRlbmRzIExpc3ROYXZpZ2F0aW9uQ2hpbGRPbWl0cyxcbiAgICBSdGlDaGlsZE9taXRzIGV4dGVuZHMgUm92aW5nVGFiSW5kZXhDaGlsZE9taXRzLFxuICAgIE1jQ2hpbGRPbWl0cyBleHRlbmRzIE1hbmFnZWRDaGlsZE9taXRzLFxuXG4gICAgU3ViYmVzdEluZm9cbiAgICA+IHtcbiAgICBhc1BhcmVudFJvd09mQ2VsbHM6IFVzZUxpc3ROYXZpZ2F0aW9uUGFyYW1ldGVyczxMc09taXRzLCBMbk9taXRzIHwgXCJuYXZpZ2F0aW9uRGlyZWN0aW9uXCIsIFRuT21pdHMsIFJ0aU9taXRzLCBNY09taXRzPjtcbiAgICBhc0NoaWxkUm93T2ZTZWN0aW9uOiBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkUGFyYW1ldGVyczxDUiwgS1IsIExzQ2hpbGRPbWl0cywgUnRpQ2hpbGRPbWl0cywgTWNDaGlsZE9taXRzLCBTdWJiZXN0SW5mbz5cblxufVxuZXhwb3J0IGludGVyZmFjZSBVc2VHcmlkTmF2aWdhdGlvbkNlbGxQYXJhbWV0ZXJzPENlbGxFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgQ0MsIEtDIGV4dGVuZHMgc3RyaW5nLCBMc0NoaWxkT21pdHMgZXh0ZW5kcyBMaXN0TmF2aWdhdGlvbkNoaWxkT21pdHMsIFJ0aUNoaWxkT21pdHMgZXh0ZW5kcyBSb3ZpbmdUYWJJbmRleENoaWxkT21pdHMsIE1jQ2hpbGRPbWl0cyBleHRlbmRzIE1hbmFnZWRDaGlsZE9taXRzLCBTdWJiZXN0SW5mbz4gZXh0ZW5kc1xuICAgIFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQYXJhbWV0ZXJzPENDLCBLQywgTHNDaGlsZE9taXRzLCBSdGlDaGlsZE9taXRzLCBNY0NoaWxkT21pdHMsIFN1YmJlc3RJbmZvPiB7XG4gICAgaGFzRm9jdXM6IFVzZUhhc0ZvY3VzUGFyYW1ldGVyczxDZWxsRWxlbWVudD47XG59XG5cblxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUdyaWROYXZpZ2F0aW9uUmV0dXJuVHlwZUluZm88Q2hpbGRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTHNTdWJJbmZvLCBFeHRyYUZsYWdLZXlzIGV4dGVuZHMgc3RyaW5nPiBleHRlbmRzIFVzZUxpc3ROYXZpZ2F0aW9uUmV0dXJuVHlwZUluZm88Q2hpbGRFbGVtZW50LCBMc1N1YkluZm8sIEV4dHJhRmxhZ0tleXM+IHtcbiAgICBncmlkTmF2aWdhdGlvbjoge1xuICAgICAgICBnZXRDdXJyZW50Q29sdW1uKCk6IG51bWJlciB8IG51bGw7XG4gICAgICAgIGN1cnJlbnRDb2x1bW46IG51bWJlciB8IG51bGw7XG4gICAgfVxufVxuZXhwb3J0IGludGVyZmFjZSBVc2VHcmlkTmF2aWdhdGlvblJldHVyblR5cGVXaXRoSG9va3M8UGFyZW50T3JSb3dFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgUm93RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIENlbGxFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgQ1IsIENDLCBLUiBleHRlbmRzIHN0cmluZywgS0MgZXh0ZW5kcyBzdHJpbmc+IGV4dGVuZHMgVXNlR3JpZE5hdmlnYXRpb25SZXR1cm5UeXBlSW5mbzxSb3dFbGVtZW50LCBDUiwgS1I+IHtcbiAgICB1c2VHcmlkTmF2aWdhdGlvblJvdzogVXNlR3JpZE5hdmlnYXRpb25Sb3c8Um93RWxlbWVudCwgQ2VsbEVsZW1lbnQsIENSLCBDQywgS1IsIEtDPjtcbiAgICB1c2VHcmlkTmF2aWdhdGlvblByb3BzOiAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFBhcmVudE9yUm93RWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFBhcmVudE9yUm93RWxlbWVudD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlR3JpZE5hdmlnYXRpb25Sb3dSZXR1cm5UeXBlSW5mbzxSb3cgZXh0ZW5kcyBFbGVtZW50LCBDZWxsIGV4dGVuZHMgRWxlbWVudCwgQ0MsIEtDIGV4dGVuZHMgc3RyaW5nPiB7XG4gICAgYXNDaGlsZFJvdzogVXNlTGlzdE5hdmlnYXRpb25DaGlsZFJldHVyblR5cGVJbmZvPFJvdz47XG4gICAgYXNQYXJlbnRPZkNlbGxzOiBVc2VMaXN0TmF2aWdhdGlvblJldHVyblR5cGVJbmZvPENlbGwsIENDLCBLQz47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlR3JpZE5hdmlnYXRpb25Sb3dSZXR1cm5UeXBlV2l0aEhvb2tzPFJvdyBleHRlbmRzIEVsZW1lbnQsIENlbGwgZXh0ZW5kcyBFbGVtZW50LCBDQywgS0MgZXh0ZW5kcyBzdHJpbmc+IGV4dGVuZHMgVXNlR3JpZE5hdmlnYXRpb25Sb3dSZXR1cm5UeXBlSW5mbzxSb3csIENlbGwsIENDLCBLQz4ge1xuICAgIHVzZUdyaWROYXZpZ2F0aW9uQ2VsbDogVXNlR3JpZE5hdmlnYXRpb25DZWxsPENlbGwsIENDLCBLQz47XG4gICAgdXNlR3JpZE5hdmlnYXRpb25Sb3dQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxSb3c+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxSb3c+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUdyaWROYXZpZ2F0aW9uQ2VsbFJldHVyblR5cGVJbmZvPENlbGwgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRSZXR1cm5UeXBlSW5mbzxDZWxsPiB7XG4gICAgZ3JpZE5hdmlnYXRpb246IHtcbiAgICAgICAgLy9yb3dJc1RhYmJhYmxlOiBib29sZWFuO1xuICAgICAgICAvL2dldFJvd0lzVGFiYmFibGUoKTogYm9vbGVhbjtcbiAgICAgICAgZ2V0Q3VycmVudENvbHVtbigpOiBudW1iZXIgfCBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VHcmlkTmF2aWdhdGlvbkNlbGxSZXR1cm5UeXBlV2l0aEhvb2tzPENlbGwgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZUdyaWROYXZpZ2F0aW9uQ2VsbFJldHVyblR5cGVJbmZvPENlbGw+IHtcbiAgICB1c2VHcmlkTmF2aWdhdGlvbkNlbGxQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxDZWxsPikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8Q2VsbD47XG59XG5cblxuZXhwb3J0IHR5cGUgVXNlR3JpZE5hdmlnYXRpb25Sb3c8Um93IGV4dGVuZHMgRWxlbWVudCwgQ2VsbCBleHRlbmRzIEVsZW1lbnQsIENSLCBDQywgS1IgZXh0ZW5kcyBzdHJpbmcsIEtDIGV4dGVuZHMgc3RyaW5nPiA9IChhOiBVc2VHcmlkTmF2aWdhdGlvblJvd1BhcmFtZXRlcnM8Q1IsIEtSLCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXIsIENSPikgPT4gVXNlR3JpZE5hdmlnYXRpb25Sb3dSZXR1cm5UeXBlV2l0aEhvb2tzPFJvdywgQ2VsbCwgQ0MsIEtDPjtcbmV4cG9ydCB0eXBlIFVzZUdyaWROYXZpZ2F0aW9uQ2VsbDxDZWxsIGV4dGVuZHMgRWxlbWVudCwgQ0MsIEtDIGV4dGVuZHMgc3RyaW5nPiA9IChwOiBVc2VHcmlkTmF2aWdhdGlvbkNlbGxQYXJhbWV0ZXJzPENlbGwsIENDLCBLQywgbmV2ZXIsIG5ldmVyLCBuZXZlciwgQ0M+KSA9PiBVc2VHcmlkTmF2aWdhdGlvbkNlbGxSZXR1cm5UeXBlV2l0aEhvb2tzPENlbGw+O1xuXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VHcmlkTmF2aWdhdGlvbjxcbiAgICBQYXJlbnRPclJvd0VsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LFxuICAgIFJvd0VsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LFxuICAgIENlbGxFbGVtZW50IGV4dGVuZHMgRWxlbWVudCxcbiAgICBSb3dTdWJJbmZvLFxuICAgIENlbGxTdWJJbmZvLFxuICAgIFJvd0V4dHJhRmxhZ3MgZXh0ZW5kcyBzdHJpbmcsXG4gICAgQ2VsbEV4dHJhRmxhZ3MgZXh0ZW5kcyBzdHJpbmdcbj4oe1xuICAgIG1hbmFnZWRDaGlsZHJlbjogbWMsXG4gICAgcm92aW5nVGFiSW5kZXg6IHJ0aSxcbiAgICBsaXN0TmF2aWdhdGlvbjogbHMsXG4gICAgbGluZWFyTmF2aWdhdGlvbjogbG4sXG4gICAgdHlwZWFoZWFkTmF2aWdhdGlvbjogdG5cbn06IFVzZUdyaWROYXZpZ2F0aW9uUGFyYW1ldGVyczxuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXI+KTogVXNlR3JpZE5hdmlnYXRpb25SZXR1cm5UeXBlV2l0aEhvb2tzPFBhcmVudE9yUm93RWxlbWVudCwgUm93RWxlbWVudCwgQ2VsbEVsZW1lbnQsIFJvd1N1YkluZm8sIENlbGxTdWJJbmZvLCBSb3dFeHRyYUZsYWdzLCBDZWxsRXh0cmFGbGFncz4ge1xuICAgIGNvbnN0IFtjdXJyZW50Q29sdW1uLCBzZXRDdXJyZW50Q29sdW1uLCBnZXRDdXJyZW50Q29sdW1uXSA9IHVzZVN0YXRlPG51bWJlciB8IG51bGw+KHJ0aS5pbml0aWFsSW5kZXggPz8gMCk7XG5cbiAgICBjb25zdCB7XG4gICAgICAgIHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGQ6IHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRBc0dyaWRSb3csXG4gICAgICAgIHVzZUxpc3ROYXZpZ2F0aW9uUHJvcHM6IHVzZUxpc3ROYXZpZ2F0aW9uUHJvcHNBc0dyaWRQYXJlbnQsXG4gICAgICAgIC4uLnBhcmVudExzUmV0dXJuVHlwZVxuICAgIH0gPSB1c2VMaXN0TmF2aWdhdGlvbjxQYXJlbnRPclJvd0VsZW1lbnQsIFJvd0VsZW1lbnQsIFJvd1N1YkluZm8sIFJvd0V4dHJhRmxhZ3M+KHtcbiAgICAgICAgbWFuYWdlZENoaWxkcmVuOiBtYyxcbiAgICAgICAgcm92aW5nVGFiSW5kZXg6IHJ0aSxcbiAgICAgICAgbGlzdE5hdmlnYXRpb246IGxzLFxuICAgICAgICBsaW5lYXJOYXZpZ2F0aW9uOiB7IG5hdmlnYXRpb25EaXJlY3Rpb246IFwiYmxvY2tcIiwgLi4ubG4gfSxcbiAgICAgICAgdHlwZWFoZWFkTmF2aWdhdGlvbjogdG4sXG4gICAgfSk7XG5cblxuICAgIGNvbnN0IHVzZUdyaWROYXZpZ2F0aW9uUm93ID0gdXNlQ2FsbGJhY2s8VXNlR3JpZE5hdmlnYXRpb25Sb3c8Um93RWxlbWVudCwgQ2VsbEVsZW1lbnQsIFJvd1N1YkluZm8sIENlbGxTdWJJbmZvLCBSb3dFeHRyYUZsYWdzLCBDZWxsRXh0cmFGbGFncz4+KCh7IGFzQ2hpbGRSb3dPZlNlY3Rpb246IGFzQ2hpbGQsIGFzUGFyZW50Um93T2ZDZWxsczogYXNQYXJlbnQgfSkgPT4ge1xuICAgICAgICAvLyBPdmVycmlkZSB0aGUgZm9jdXNTZWxmIHRoYXQgcm92aW5nVGFiSW5kZXggZG9lcy5cbiAgICAgICAgLy8gSW5zdGVhZCBvZiBmb2N1c2luZyB0aGUgZW50aXJlIHJvdywgd2UgYXNrIHRoZSBjZWxsIHRoYXQgY29ycmVzcG9uZHNcbiAgICAgICAgLy8gdG8gb3VyIGN1cnJlbnQgY29sdW1uIHRvIGZvY3VzIGl0c2VsZi5cbiAgICAgICAgY29uc3QgZm9jdXNTZWxmID0gdXNlU3RhYmxlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYzIgPSBnZXRDdXJyZW50Q29sdW1uKCk7XG4gICAgICAgICAgICBpZiAoYXNDaGlsZC5yb3ZpbmdUYWJJbmRleC5mb2N1c1NlbGYpIHtcbiAgICAgICAgICAgICAgICBhc0NoaWxkLnJvdmluZ1RhYkluZGV4LmZvY3VzU2VsZigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmF2aWdhdGVUb0luZGV4KGMyID8/IDAsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCByb3dMc0NoaWxkUmV0dXJuVHlwZSA9IHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRBc0dyaWRSb3coe1xuICAgICAgICAgICAgbWFuYWdlZENoaWxkOiBhc0NoaWxkLm1hbmFnZWRDaGlsZCxcbiAgICAgICAgICAgIGxpc3ROYXZpZ2F0aW9uOiB7IC4uLmFzQ2hpbGQubGlzdE5hdmlnYXRpb24gfSxcbiAgICAgICAgICAgIHJvdmluZ1RhYkluZGV4OiB7IC4uLmFzQ2hpbGQucm92aW5nVGFiSW5kZXgsIGZvY3VzU2VsZiB9LFxuICAgICAgICAgICAgc3ViSW5mbzogYXNDaGlsZC5zdWJJbmZvLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgeyByb3ZpbmdUYWJJbmRleDogeyB0YWJiYWJsZSB9LCB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkUHJvcHMgfSA9IHJvd0xzQ2hpbGRSZXR1cm5UeXBlO1xuICAgICAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0YWJiYWJsZSkge1xuICAgICAgICAgICAgICAgIG5hdmlnYXRlVG9JbmRleChudWxsLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIFt0YWJiYWJsZV0pO1xuXG4gICAgICAgIGNvbnN0IHJvd0xzUmV0dXJuVHlwZSA9IHVzZUxpc3ROYXZpZ2F0aW9uPENlbGxFbGVtZW50LCBDZWxsRWxlbWVudCwgQ2VsbFN1YkluZm8sIENlbGxFeHRyYUZsYWdzPih7XG4gICAgICAgICAgICBtYW5hZ2VkQ2hpbGRyZW46IHsgLi4uYXNQYXJlbnQubWFuYWdlZENoaWxkcmVuIH0sXG4gICAgICAgICAgICByb3ZpbmdUYWJJbmRleDogeyAuLi5hc1BhcmVudC5yb3ZpbmdUYWJJbmRleCB9LFxuICAgICAgICAgICAgbGluZWFyTmF2aWdhdGlvbjoge1xuICAgICAgICAgICAgICAgIC4uLmFzUGFyZW50LmxpbmVhck5hdmlnYXRpb24sXG4gICAgICAgICAgICAgICAgbmF2aWdhdGlvbkRpcmVjdGlvbjogXCJpbmxpbmVcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0eXBlYWhlYWROYXZpZ2F0aW9uOiB7IC4uLmFzUGFyZW50LnR5cGVhaGVhZE5hdmlnYXRpb24sIG5vVHlwZWFoZWFkOiB0cnVlIH0sXG4gICAgICAgICAgICBsaXN0TmF2aWdhdGlvbjogeyAuLi5hc1BhcmVudC5saXN0TmF2aWdhdGlvbiB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHsgcm92aW5nVGFiSW5kZXg6IHsgc2V0VGFiYmFibGVJbmRleCB9LCB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkOiB1c2VHcmlkTmF2aWdhdGlvbkNvbHVtbjIsIHVzZUxpc3ROYXZpZ2F0aW9uUHJvcHM6IHVzZUdyaWROYXZpZ2F0aW9uQ29sdW1uUHJvcHMsIGxpc3ROYXZpZ2F0aW9uOiB7IG5hdmlnYXRlVG9JbmRleCB9IH0gPSByb3dMc1JldHVyblR5cGU7XG5cbiAgICAgICAgLy9jb25zdCByb3dIaWRkZW4gPSAhIWFzQ2hpbGQucm92aW5nVGFiSW5kZXguaGlkZGVuO1xuXG4gICAgICAgIGNvbnN0IHVzZUdyaWROYXZpZ2F0aW9uQ2VsbCA9IHVzZUNhbGxiYWNrPFVzZUdyaWROYXZpZ2F0aW9uQ2VsbDxDZWxsRWxlbWVudCwgQ2VsbFN1YkluZm8sIENlbGxFeHRyYUZsYWdzPj4oKHsgc3ViSW5mbywgaGFzRm9jdXM6IHsgb25MYXN0Rm9jdXNlZElubmVyQ2hhbmdlZCwgLi4uaGFzRm9jdXMgfSwgbWFuYWdlZENoaWxkLCBsaXN0TmF2aWdhdGlvbjogbHMsIHJvdmluZ1RhYkluZGV4OiB7IGZvY3VzU2VsZjogZnMsIC4uLnJ0aSB9IH0pID0+IHtcbiAgICAgICAgICAgIC8vcnRpLmhpZGRlbiB8fCByb3dIaWRkZW47XG5cbiAgICAgICAgICAgIGNvbnN0IGZvY3VzU2VsZiA9IHVzZVN0YWJsZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50Q29sdW1uKG1hbmFnZWRDaGlsZC5pbmRleCk7XG4gICAgICAgICAgICAgICAgc2V0VGFiYmFibGVJbmRleChtYW5hZ2VkQ2hpbGQuaW5kZXgsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpZiAoZnMpXG4gICAgICAgICAgICAgICAgICAgIGZzKCk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAocnRpX2NlbGxfcmV0LmdldEVsZW1lbnQoKSBhcyBFbGVtZW50ICYgUGFydGlhbDxIVE1MRWxlbWVudD4pPy5mb2N1cz8uKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8qY29uc3QgYmx1clNlbGYgPSB1c2VTdGFibGVDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGJzKVxuICAgICAgICAgICAgICAgICAgICBicygpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgKHJ0aV9jZWxsX3JldC5nZXRFbGVtZW50KCkgYXMgRWxlbWVudCAmIFBhcnRpYWw8SFRNTEVsZW1lbnQ+KT8uYmx1cj8uKCk7XG4gICAgICAgICAgICB9KTsqL1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQcm9wcyxcbiAgICAgICAgICAgICAgICByb3ZpbmdUYWJJbmRleDogcnRpX2NlbGxfcmV0XG4gICAgICAgICAgICB9ID0gdXNlR3JpZE5hdmlnYXRpb25Db2x1bW4yKHtcbiAgICAgICAgICAgICAgICBtYW5hZ2VkQ2hpbGQ6IG1hbmFnZWRDaGlsZCxcbiAgICAgICAgICAgICAgICBsaXN0TmF2aWdhdGlvbjogeyAuLi5scyB9LFxuICAgICAgICAgICAgICAgIHJvdmluZ1RhYkluZGV4OiB7IGZvY3VzU2VsZiwgLi4ucnRpIH0sXG4gICAgICAgICAgICAgICAgc3ViSW5mb1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHsgdXNlSGFzRm9jdXNQcm9wcyB9ID0gdXNlSGFzRm9jdXM8Q2VsbEVsZW1lbnQ+KHtcbiAgICAgICAgICAgICAgICBvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkOiB1c2VTdGFibGVDYWxsYmFjaygoZm9jdXNlZDogYm9vbGVhbiwgcHJldjogYm9vbGVhbiB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkPy4oZm9jdXNlZCwgcHJldik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb2N1c2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50Q29sdW1uKG1hbmFnZWRDaGlsZC5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUYWJiYWJsZUluZGV4KG1hbmFnZWRDaGlsZC5pbmRleCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgLi4uaGFzRm9jdXNcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIGNvbnN0IHJldDogVXNlR3JpZE5hdmlnYXRpb25DZWxsUmV0dXJuVHlwZVdpdGhIb29rczxDZWxsRWxlbWVudD4gPSB7XG4gICAgICAgICAgICAgICAgZ3JpZE5hdmlnYXRpb246IHsgZ2V0Q3VycmVudENvbHVtbiB9LFxuICAgICAgICAgICAgICAgIHJvdmluZ1RhYkluZGV4OiBydGlfY2VsbF9yZXQsXG4gICAgICAgICAgICAgICAgdXNlR3JpZE5hdmlnYXRpb25DZWxsUHJvcHM6IGZ1bmN0aW9uIDxQIGV4dGVuZHMgaC5KU1guSFRNTEF0dHJpYnV0ZXM8Q2VsbEVsZW1lbnQ+Pihwcm9wczogUCkgeyByZXR1cm4gdXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzKHVzZUdyaWROYXZpZ2F0aW9uQ29sdW1uUHJvcHModXNlSGFzRm9jdXNQcm9wcyhwcm9wcykpKTsgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuXG4gICAgICAgIH0sIFtdKTtcblxuICAgICAgICBjb25zdCByZXQ6IFVzZUdyaWROYXZpZ2F0aW9uUm93UmV0dXJuVHlwZVdpdGhIb29rczxSb3dFbGVtZW50LCBDZWxsRWxlbWVudCwgQ2VsbFN1YkluZm8sIENlbGxFeHRyYUZsYWdzPiA9IHtcbiAgICAgICAgICAgIGFzUGFyZW50T2ZDZWxsczoge1xuICAgICAgICAgICAgICAgIGxpbmVhck5hdmlnYXRpb246IHJvd0xzUmV0dXJuVHlwZS5saW5lYXJOYXZpZ2F0aW9uLFxuICAgICAgICAgICAgICAgIGxpc3ROYXZpZ2F0aW9uOiByb3dMc1JldHVyblR5cGUubGlzdE5hdmlnYXRpb24sXG4gICAgICAgICAgICAgICAgbWFuYWdlZENoaWxkcmVuOiByb3dMc1JldHVyblR5cGUubWFuYWdlZENoaWxkcmVuLFxuICAgICAgICAgICAgICAgIHJvdmluZ1RhYkluZGV4OiByb3dMc1JldHVyblR5cGUucm92aW5nVGFiSW5kZXgsXG4gICAgICAgICAgICAgICAgdHlwZWFoZWFkTmF2aWdhdGlvbjogcm93THNSZXR1cm5UeXBlLnR5cGVhaGVhZE5hdmlnYXRpb24sXG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhc0NoaWxkUm93OiByb3dMc0NoaWxkUmV0dXJuVHlwZSxcblxuICAgICAgICAgICAgdXNlR3JpZE5hdmlnYXRpb25DZWxsLFxuICAgICAgICAgICAgdXNlR3JpZE5hdmlnYXRpb25Sb3dQcm9wczogZnVuY3Rpb24gPFAgZXh0ZW5kcyBoLkpTWC5IVE1MQXR0cmlidXRlczxSb3dFbGVtZW50Pj4ocHJvcHM6IFApIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXQgPSB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkUHJvcHMocHJvcHMpO1xuICAgICAgICAgICAgICAgIHJldC50YWJJbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGdyaWROYXZpZ2F0aW9uOiB7XG4gICAgICAgICAgICBnZXRDdXJyZW50Q29sdW1uLFxuICAgICAgICAgICAgY3VycmVudENvbHVtblxuICAgICAgICB9LFxuICAgICAgICBsaW5lYXJOYXZpZ2F0aW9uOiBwYXJlbnRMc1JldHVyblR5cGUubGluZWFyTmF2aWdhdGlvbixcbiAgICAgICAgbGlzdE5hdmlnYXRpb246IHBhcmVudExzUmV0dXJuVHlwZS5saXN0TmF2aWdhdGlvbixcbiAgICAgICAgcm92aW5nVGFiSW5kZXg6IHBhcmVudExzUmV0dXJuVHlwZS5yb3ZpbmdUYWJJbmRleCxcbiAgICAgICAgdHlwZWFoZWFkTmF2aWdhdGlvbjogcGFyZW50THNSZXR1cm5UeXBlLnR5cGVhaGVhZE5hdmlnYXRpb24sXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbjogcGFyZW50THNSZXR1cm5UeXBlLm1hbmFnZWRDaGlsZHJlbixcbiAgICAgICAgdXNlR3JpZE5hdmlnYXRpb25Sb3csXG4gICAgICAgIHVzZUdyaWROYXZpZ2F0aW9uUHJvcHM6IHVzZUxpc3ROYXZpZ2F0aW9uUHJvcHNBc0dyaWRQYXJlbnQsXG4gICAgfVxufVxuIiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcbmltcG9ydCB7IGdlbmVyYXRlUmFuZG9tSWQgfSBmcm9tIFwiLi91c2UtYmVmb3JlLWxheW91dC1lZmZlY3RcIjtcbmltcG9ydCB7IHVzZU1hbmFnZWRDaGlsZHJlbiwgVXNlTWFuYWdlZENoaWxkcmVuUGFyYW1ldGVycywgVXNlTWFuYWdlZENoaWxkcmVuUmV0dXJuVHlwZUluZm8gfSBmcm9tIFwiLi91c2UtY2hpbGQtbWFuYWdlclwiO1xuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwiLi91c2UtbWVyZ2VkLXByb3BzXCI7XG5pbXBvcnQgeyB1c2VFbnN1cmVTdGFiaWxpdHkgfSBmcm9tIFwiLi91c2UtcGFzc2l2ZS1zdGF0ZVwiO1xuaW1wb3J0IHsgdXNlUmVmRWxlbWVudCB9IGZyb20gXCIuL3VzZS1yZWYtZWxlbWVudFwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwiLi91c2Utc3RhdGVcIjtcbmV4cG9ydCB7IGdlbmVyYXRlUmFuZG9tSWQgfVxuXG5leHBvcnQgdHlwZSBVc2VSYW5kb21JZFByb3BzUGFyYW1ldGVycyA9IFVzZVJlZmVyZW5jZWRJZFByb3BzUGFyYW1ldGVyczxcImlkXCI+O1xuZXhwb3J0IHR5cGUgVXNlUmFuZG9tSWRQcm9wc1JldHVyblR5cGU8UCBleHRlbmRzIFVzZVJhbmRvbUlkUHJvcHNQYXJhbWV0ZXJzPiA9IFVzZVJlZmVyZW5jZWRJZFByb3BzUmV0dXJuVHlwZTxQLCBcImlkXCI+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZVJhbmRvbUlkUGFyYW1ldGVycyBleHRlbmRzIFVzZU1hbmFnZWRDaGlsZHJlblBhcmFtZXRlcnM8XCJyZWZlcmVuY2VyXCIgfCBcInNvdXJjZVwiLCBuZXZlcj4ge1xuICAgIHJhbmRvbUlkOiB7XG4gICAgICAgIHByZWZpeD86IHN0cmluZztcbiAgICB9XG59XG5cblxuZXhwb3J0IHR5cGUgVXNlUmVmZXJlbmNlZElkUHJvcHNQYXJhbWV0ZXJzPEsgZXh0ZW5kcyBrZXlvZiBoLkpTWC5IVE1MQXR0cmlidXRlczxhbnk+PiA9IFBhcnRpYWw8UmVjb3JkPEssIGFueT4+Oy8vPEUgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+IHsgfTtcblxuXG5leHBvcnQgdHlwZSBVc2VSZWZlcmVuY2VkSWRQcm9wc1JldHVyblR5cGU8UCBleHRlbmRzIFVzZVJlZmVyZW5jZWRJZFByb3BzUGFyYW1ldGVyczxhbnk+LCBLIGV4dGVuZHMga2V5b2YgaC5KU1guSFRNTEF0dHJpYnV0ZXM8YW55Pj4gPSBPbWl0PFAsIEs+ICYgUmVjb3JkPEssIHN0cmluZz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlUmFuZG9tSWRSZXR1cm5UeXBlSW5mbyBleHRlbmRzIFVzZU1hbmFnZWRDaGlsZHJlblJldHVyblR5cGVJbmZvPFwicmVmZXJlbmNlclwiIHwgXCJzb3VyY2VcIiwge30sIG5ldmVyPiB7XG4gICAgcmFuZG9tSWQ6IHtcbiAgICAgICAgdXNlZElkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICAgIC8qKiAqKlNUQUJMRSoqICovXG4gICAgICAgIGdldFVzZWRJZCgpOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZVJhbmRvbUlkUmV0dXJuVHlwZVdpdGhIb29rczxTIGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VSYW5kb21JZFJldHVyblR5cGVJbmZvIHtcbiAgICAvKiogKipTVEFCTEUqKiAqL1xuICAgIHVzZVJhbmRvbUlkU291cmNlRWxlbWVudDogVXNlUmFuZG9tSWRTb3VyY2VFbGVtZW50PFM+O1xuICAgIC8qKiAqKlNUQUJMRSoqICovXG4gICAgdXNlUmFuZG9tSWRSZWZlcmVuY2VyRWxlbWVudDogVXNlUmFuZG9tSWRSZWZlcmVuY2VyRWxlbWVudDtcbn1cblxuaW50ZXJmYWNlIFJhbmRvbUlkQ2hpbGRJbmZvQmFzZSB7XG4gICAgc2V0VXNlZElkKGlkOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8vc2VuZFNvdXJjZUlkVG9SZWZlcmVuY2VyRWxlbWVudChzb3VyY2VJZDogc3RyaW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IHR5cGUgVXNlUmFuZG9tSWRTb3VyY2VFbGVtZW50PFMgZXh0ZW5kcyBFbGVtZW50PiA9ICgpID0+IFVzZVJhbmRvbUlkU291cmNlRWxlbWVudFJldHVyblR5cGU8Uz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlUmFuZG9tSWRTb3VyY2VFbGVtZW50UmV0dXJuVHlwZTxTIGV4dGVuZHMgRWxlbWVudD4ge1xuICAgIHVzZWRJZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIC8qKiAqKlNUQUJMRSoqICovXG4gICAgZ2V0VXNlZElkKCk6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAvKiogKlVuc3RhYmxlKiAqL1xuICAgIHVzZVJhbmRvbUlkU291cmNlRWxlbWVudFByb3BzOiAocDogaC5KU1guSFRNTEF0dHJpYnV0ZXM8Uz4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFM+O1xufVxuXG5leHBvcnQgdHlwZSBVc2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50ID0gPFIgZXh0ZW5kcyBFbGVtZW50PihpZFByb3BOYW1lOiBrZXlvZiBoLkpTWC5IVE1MQXR0cmlidXRlczxFdmVudFRhcmdldD4pID0+IFVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnRSZXR1cm5UeXBlPFI+O1xuZXhwb3J0IGludGVyZmFjZSBVc2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50UmV0dXJuVHlwZTxSIGV4dGVuZHMgRWxlbWVudD4ge1xuICAgIHVzZWRJZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIC8qKiAqKlNUQUJMRSoqICovXG4gICAgZ2V0VXNlZElkKCk6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAvKiogKlVuc3RhYmxlKiAqL1xuICAgIHVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnRQcm9wczogKHA6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFI+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxSPjtcbn1cblxuXG5cbi8qKlxuICogUmV0dXJucyBhIGhvb2sgdGhhdCBtb2RpZmllcyBhIHNldCBvZiBwcm9wcyB0byBwcm92aWRlIGEgcmFuZG9tbHktZ2VuZXJhdGVkIElEIGlmIG9uZSB3YXMgbm90IHByb3ZpZGVkLlxuICogXG4gKiBJZiB5b3UnZCBsaWtlIHRvIHVzZSB0aGUgSUQgaW4gYSBwcm9wZXJ0eSB0aGF0J3MgKm5vdCogbmFtZWQgYGlkYCAobGlrZSBgZm9yYCBvciBgYXJpYS1sYWJlbGxlZGJ5YCBvciB3aGF0bm90KSwgYHVzZVJlZmVyZW5jZWRJZFByb3BzYCBpcyBhbHNvIHByb3ZpZGVkLlxuICogXG4gKiBBbmQgdGhlIHJhbmRvbWx5LWdlbmVyYXRlZCBpZCBpdHNlbGYgaXMgYWxzbyBwcm92aWRlZCBpbiBjYXNlIHlvdSB3YW50IHRvIGhhbmRsZSB0aGUgbG9naWMgeW91cnNlbGYgd2l0aG91dCBgdXNlTWVyZ2VkUHJvcHNgLlxuICogXG4gKiBVbmxpa2UgbW9zdCBvdGhlciBgdXNlKlByb3BzYCBob29rcywgdGhlc2UgYXJlIG1vc3RseSBzdGFibGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSYW5kb21JZDxTIGV4dGVuZHMgRWxlbWVudD4oeyByYW5kb21JZDogeyBwcmVmaXggfSwgbWFuYWdlZENoaWxkcmVuOiB7IG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdCwgb25DaGlsZHJlbk1vdW50Q2hhbmdlIH0gfTogVXNlUmFuZG9tSWRQYXJhbWV0ZXJzKTogVXNlUmFuZG9tSWRSZXR1cm5UeXBlV2l0aEhvb2tzPFM+IHtcbiAgICBjb25zdCBbYmFja3VwUmFuZG9tSWQsICwgZ2V0QmFja3VwUmFuZG9tSWRdID0gdXNlU3RhdGU8c3RyaW5nPigoKSA9PiBnZW5lcmF0ZVJhbmRvbUlkKHByZWZpeCkpO1xuICAgIGNvbnN0IFt1c2VkSWQsIHNldFVzZWRJZCwgZ2V0VXNlZElkXSA9IHVzZVN0YXRlPHN0cmluZyB8IHVuZGVmaW5lZD4oKCkgPT4gZ2V0QmFja3VwUmFuZG9tSWQoKSk7XG4gICAgY29uc3QgbWlzbWF0Y2hFcnJvclJlZiA9IHVzZVJlZihmYWxzZSk7XG4gICAgdXNlRW5zdXJlU3RhYmlsaXR5KFwidXNlUmFuZG9tSWRcIiwgcHJlZml4KTtcblxuICAgIGNvbnN0IHsgdXNlTWFuYWdlZENoaWxkLCAuLi5tYW5hZ2VkQ2hpbGRyZW5SZXR1cm5UeXBlIH0gPSB1c2VNYW5hZ2VkQ2hpbGRyZW48XCJyZWZlcmVuY2VyXCIgfCBcInNvdXJjZVwiLCBSYW5kb21JZENoaWxkSW5mb0Jhc2UsIG5ldmVyPih7IG1hbmFnZWRDaGlsZHJlbjogeyBvbkFmdGVyQ2hpbGRMYXlvdXRFZmZlY3QsIG9uQ2hpbGRyZW5Nb3VudENoYW5nZSB9IH0pO1xuICAgIGNvbnN0IHsgbWFuYWdlZENoaWxkcmVuOiB7IGNoaWxkcmVuIH0gfSA9IG1hbmFnZWRDaGlsZHJlblJldHVyblR5cGU7XG5cbiAgICBjb25zdCB1c2VSYW5kb21JZFNvdXJjZUVsZW1lbnQgPSB1c2VDYWxsYmFjazxVc2VSYW5kb21JZFNvdXJjZUVsZW1lbnQ8Uz4+KCgpID0+IHtcbiAgICAgICAgY29uc3QgW3VzZWRJZExvY2FsLCBzZXRVc2VkSWRMb2NhbCwgZ2V0VXNlZElkTG9jYWxdID0gdXNlU3RhdGUoZ2V0VXNlZElkKCkpO1xuICAgICAgICBjb25zdCB7IHVzZVJlZkVsZW1lbnRQcm9wcywgZ2V0RWxlbWVudCB9ID0gdXNlUmVmRWxlbWVudDxTPigpO1xuICAgICAgICAvLyBFdmVyeSB0aW1lIHRoZSBzb3VyY2UgZWxlbWVudCByZW5kZXJzLCBpbnNwZWN0IHRoZSBJRCBpdCBhY3R1YWxseSB1c2VkXG4gICAgICAgIC8vICh3aGV0aGVyIGl0IHdhcyBvdXJzIG9yIG5vdCBpc24ndCB1cCB0byB1cywgaXQncyB1cCB0byB0aGUgY29tcG9uZW50KVxuICAgICAgICAvLyBzbyB0aGlzIGlzIGhvdyB3ZSBub3RpZnkgdGhlIHJlZmVyZW5jZXIgY29tcG9uZW50IG9mIGNoYW5nZXNcbiAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBnZXRFbGVtZW50KCk7XG5cbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4uZ2V0QXQoXCJyZWZlcmVuY2VyXCIpIS5zdWJJbmZvLnNldFVzZWRJZChlbGVtZW50LmlkKTtcbiAgICAgICAgICAgICAgICBzZXRVc2VkSWQoZWxlbWVudC5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IF86IHZvaWQgPSB1c2VNYW5hZ2VkQ2hpbGQoeyBtYW5hZ2VkQ2hpbGQ6IHsgaW5kZXg6IFwic291cmNlXCIsIHN1YkluZm86IHsgc2V0VXNlZElkOiBzZXRVc2VkSWRMb2NhbCB9IH0gfSk7XG5cbiAgICAgICAgY29uc3QgdXNlUmFuZG9tSWRTb3VyY2VFbGVtZW50UHJvcHMgPSB1c2VDYWxsYmFjazxVc2VSYW5kb21JZFNvdXJjZUVsZW1lbnRSZXR1cm5UeXBlPFM+W1widXNlUmFuZG9tSWRTb3VyY2VFbGVtZW50UHJvcHNcIl0+KGZ1bmN0aW9uIChwOiBoLkpTWC5IVE1MQXR0cmlidXRlczxTPikge1xuICAgICAgICAgICAgcC5pZCB8fD0gYmFja3VwUmFuZG9tSWQ7XG4gICAgICAgICAgICByZXR1cm4gdXNlUmVmRWxlbWVudFByb3BzKHApO1xuICAgICAgICB9LCBbXSlcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXNlZElkOiB1c2VkSWRMb2NhbCxcbiAgICAgICAgICAgIGdldFVzZWRJZDogZ2V0VXNlZElkTG9jYWwsXG4gICAgICAgICAgICB1c2VSYW5kb21JZFNvdXJjZUVsZW1lbnRQcm9wc1xuICAgICAgICB9O1xuICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IHVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnQgPSB1c2VDYWxsYmFjazxVc2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50Pig8UiBleHRlbmRzIEVsZW1lbnQ+KGlkUHJvcE5hbWU6IGtleW9mIGguSlNYLkhUTUxBdHRyaWJ1dGVzPFI+KSA9PiB7XG4gICAgICAgIGNvbnN0IFt1c2VkSWRMb2NhbCwgc2V0VXNlZElkTG9jYWwsIGdldFVzZWRJZExvY2FsXSA9IHVzZVN0YXRlKGdldFVzZWRJZCgpKTtcbiAgICAgICAgLy8gV2hhdGV2ZXIgSUQgd2FzIG1vc3QgcmVjZW50bHkgdXNlZCBieSB0aGUgYWN0dWFsIFwiaWRcIiBwcm9wIG9mIHRoZSBzb3VyY2UgZWxlbWVudFxuICAgICAgICB1c2VFbnN1cmVTdGFiaWxpdHkoaWRQcm9wTmFtZSk7XG5cbiAgICAgICAgY29uc3QgX3Y6IHZvaWQgPSB1c2VNYW5hZ2VkQ2hpbGQoeyBtYW5hZ2VkQ2hpbGQ6IHsgaW5kZXg6IFwicmVmZXJlbmNlclwiLCBzdWJJbmZvOiB7IHNldFVzZWRJZDogc2V0VXNlZElkTG9jYWwgfSB9IH0pO1xuXG4gICAgICAgIGNvbnN0IHVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnRQcm9wcyA9IHVzZUNhbGxiYWNrPFVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnRSZXR1cm5UeXBlPFI+W1widXNlUmFuZG9tSWRSZWZlcmVuY2VyRWxlbWVudFByb3BzXCJdPihmdW5jdGlvbiA8UiBleHRlbmRzIEVsZW1lbnQ+KHsgW2lkUHJvcE5hbWVdOiBnaXZlbklkLCAuLi5wIH06IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFI+KSB7XG4gICAgICAgICAgICBpZiAoZ2l2ZW5JZCAmJiB1c2VkSWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZ2l2ZW5JZCAhPSB1c2VkSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtaXNtYXRjaEVycm9yUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pc21hdGNoRXJyb3JSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBNdWx0aXBsZSBtaXMtbWF0Y2hlZCBJRHMgd2VyZSBwcm92aWRlZCBmb3IgdGhlICR7aWRQcm9wTmFtZX0gcHJvcDogdGhlIGNoaWxkIGV4cGxpY2l0bHkgc3BlY2lmaWVkICR7Z2l2ZW5JZH0gaW4gaXRzICAke2lkUHJvcE5hbWV9IHByb3AsIGJ1dCB0aGUgcGFyZW50IHRvbGQgdGhpcyBjaGlsZCB0byB1c2UgJHt1c2VkSWR9ICh0aGUgcGFyZW50J3MgSUQpLmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzPFI+KHAsIHsgW2lkUHJvcE5hbWVdOiB1c2VkSWQgfSk7XG4gICAgICAgIH0sIFt1c2VkSWRdKTtcblxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1c2VkSWQ6IHVzZWRJZExvY2FsLFxuICAgICAgICAgICAgZ2V0VXNlZElkOiBnZXRVc2VkSWRMb2NhbCxcbiAgICAgICAgICAgIHVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnRQcm9wc1xuICAgICAgICB9XG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmFuZG9tSWQ6IHtcbiAgICAgICAgICAgIHVzZWRJZCxcbiAgICAgICAgICAgIGdldFVzZWRJZFxuICAgICAgICB9LFxuICAgICAgICAuLi5tYW5hZ2VkQ2hpbGRyZW5SZXR1cm5UeXBlLFxuICAgICAgICB1c2VSYW5kb21JZFNvdXJjZUVsZW1lbnQsXG4gICAgICAgIHVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnRcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgVXNlSGFzRm9jdXNQYXJhbWV0ZXJzLCB1c2VNZXJnZWRQcm9wcywgdXNlUHJlc3MgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVyc1wiO1xyXG5pbXBvcnQgeyBkZWJ1Z0xvZywgRWxlbWVudFRvVGFnLCBFbmhhbmNlZEV2ZW50LCBlbmhhbmNlRXZlbnQgfSBmcm9tIFwiLi9wcm9wc1wiO1xyXG5cclxuXHJcbmV4cG9ydCB0eXBlIEJ1dHRvblByZXNzRXZlbnQ8RSBleHRlbmRzIEV2ZW50VGFyZ2V0PiA9IEVuaGFuY2VkRXZlbnQ8RSwgRXZlbnQgfCBFdmVudCwgeyBwcmVzc2VkOiBib29sZWFuIHwgbnVsbCB9PjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlQnV0dG9uUGFyYW1ldGVyczxFIGV4dGVuZHMgTm9kZT4ge1xyXG4gICAgYnV0dG9uOiB7XHJcbiAgICAgICAgdGFnQnV0dG9uOiBFbGVtZW50VG9UYWc8RT47XHJcbiAgICAgICAgZGlzYWJsZWQ/OiBib29sZWFuIHwgXCJzb2Z0XCIgfCBcImhhcmRcIjtcclxuICAgICAgICBwcmVzc2VkPzogYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgb25QcmVzcz8oZXZlbnQ6IEJ1dHRvblByZXNzRXZlbnQ8RT4pOiB2b2lkO1xyXG4gICAgfVxyXG4gICAgaGFzRm9jdXM6IFVzZUhhc0ZvY3VzUGFyYW1ldGVyczxFPjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VCdXR0b25SZXR1cm5UeXBlPEUgZXh0ZW5kcyBFdmVudFRhcmdldD4ge1xyXG4gICAgLyoqICpVbnN0YWJsZSogKi9cclxuICAgIHVzZUJ1dHRvblByb3BzOiAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxFPjtcclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlQnV0dG9uPEUgZXh0ZW5kcyBOb2RlPih7IGJ1dHRvbjogeyB0YWdCdXR0b24sIGRpc2FibGVkLCBvblByZXNzLCBwcmVzc2VkIH0sIGhhc0ZvY3VzIH06IFVzZUJ1dHRvblBhcmFtZXRlcnM8RT4pOiBVc2VCdXR0b25SZXR1cm5UeXBlPEU+IHtcclxuICAgIGRlYnVnTG9nKFwidXNlQnV0dG9uXCIpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHVzZUJ1dHRvblByb3BzKHsgXCJhcmlhLXByZXNzZWRcIjogYXJpYVByZXNzZWQsIHRhYkluZGV4LCByb2xlLCAuLi5wIH06IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4ge1xyXG5cclxuICAgICAgICBjb25zdCB1c2VQcmVzc1Byb3BzID0gdXNlUHJlc3M8RT4oe1xyXG4gICAgICAgICAgICBvbkNsaWNrU3luYzogKGUpID0+IChkaXNhYmxlZCA/IG51bGwgOiBvblByZXNzKT8uKGVuaGFuY2VFdmVudChlLCB7IHByZXNzZWQ6IHByZXNzZWQgPT0gbnVsbCA/IG51bGwgOiAhcHJlc3NlZCB9KSksXHJcbiAgICAgICAgICAgIGV4Y2x1ZGU6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgaGFzRm9jdXNcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBwcm9wcyA9IHVzZVByZXNzUHJvcHMocCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJhc2VQcm9wcyA9IHsgcm9sZSwgdGFiSW5kZXgsIFwiYXJpYS1wcmVzc2VkXCI6IGFyaWFQcmVzc2VkID8/IChwcmVzc2VkID09PSB0cnVlID8gXCJ0cnVlXCIgOiBwcmVzc2VkID09PSBmYWxzZSA/IFwiZmFsc2VcIiA6IHVuZGVmaW5lZCkgfTtcclxuICAgICAgICBjb25zdCBidXR0b25Qcm9wcyA9IHsgLi4uYmFzZVByb3BzLCBkaXNhYmxlZDogKGRpc2FibGVkICYmIGRpc2FibGVkICE9IFwic29mdFwiKSA/IHRydWUgOiBmYWxzZSwgXCJhcmlhLWRpc2FibGVkXCI6IChkaXNhYmxlZCA9PT0gJ3NvZnQnID8gJ3RydWUnIDogdW5kZWZpbmVkKSB9O1xyXG4gICAgICAgIGNvbnN0IGRpdlByb3BzID0geyAuLi5iYXNlUHJvcHMsIHRhYkluZGV4OiB0YWJJbmRleCA/PyAoZGlzYWJsZWQgPT09IFwiaGFyZFwiID8gLTEgOiAwKSwgcm9sZTogcm9sZSA/PyBcImJ1dHRvblwiLCBcImFyaWEtZGlzYWJsZWRcIjogZGlzYWJsZWQgPyBcInRydWVcIiA6IHVuZGVmaW5lZCB9O1xyXG4gICAgICAgIHN3aXRjaCAodGFnQnV0dG9uKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJidXR0b25cIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRQcm9wczxFPihidXR0b25Qcm9wcywgcHJvcHMpO1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRQcm9wczxFPihkaXZQcm9wcywgcHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVzZUJ1dHRvblByb3BzXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyBPbkNoaWxkcmVuTW91bnRDaGFuZ2UsIHJldHVyblRydWUsIHVzZUNoaWxkcmVuRmxhZywgVXNlSGFzRm9jdXNQYXJhbWV0ZXJzLCB1c2VMaW5lYXJOYXZpZ2F0aW9uLCBVc2VMaW5lYXJOYXZpZ2F0aW9uUGFyYW1ldGVycywgVXNlTWFuYWdlZENoaWxkUGFyYW1ldGVycywgdXNlTWFuYWdlZENoaWxkcmVuLCBVc2VNYW5hZ2VkQ2hpbGRyZW5QYXJhbWV0ZXJzLCBVc2VNYW5hZ2VkQ2hpbGRyZW5SZXR1cm5UeXBlSW5mbywgdXNlUmFuZG9tSWQsIHVzZVJlZkVsZW1lbnQsIHVzZVN0YWJsZUNhbGxiYWNrLCB1c2VTdGFibGVHZXR0ZXIsIHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgZGVidWdMb2cgfSBmcm9tIFwiLi9wcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VCdXR0b24sIFVzZUJ1dHRvblBhcmFtZXRlcnMgfSBmcm9tIFwiLi91c2UtYnV0dG9uXCI7XHJcblxyXG5leHBvcnQgdHlwZSBVc2VBY2NvcmRpb248SGVhZGVyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEJvZHlFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gPSAoYXJnczogVXNlQWNjb3JkaW9uUGFyYW1ldGVycykgPT4gVXNlQWNjb3JkaW9uUmV0dXJuVHlwZVdpdGhIb29rczxIZWFkZXJFbGVtZW50LCBCb2R5RWxlbWVudD47XHJcbmV4cG9ydCB0eXBlIFVzZUFjY29yZGlvblNlY3Rpb248SGVhZGVyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEJvZHlFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gPSAoYXJnczogVXNlQWNjb3JkaW9uU2VjdGlvblBhcmFtZXRlcnM8SGVhZGVyRWxlbWVudD4pID0+IFVzZUFjY29yZGlvblNlY3Rpb25SZXR1cm5UeXBlV2l0aEhvb2tzPEhlYWRlckVsZW1lbnQsIEJvZHlFbGVtZW50PjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlQWNjb3JkaW9uUGFyYW1ldGVycyBleHRlbmRzIFVzZUxpbmVhck5hdmlnYXRpb25QYXJhbWV0ZXJzPFwibmF2aWdhdGVUb0ZpcnN0XCIgfCBcIm5hdmlnYXRlVG9MYXN0XCIgfCBcIm5hdmlnYXRlVG9OZXh0XCIgfCBcIm5hdmlnYXRlVG9QcmV2XCI+LCBVc2VNYW5hZ2VkQ2hpbGRyZW5QYXJhbWV0ZXJzPG51bWJlciwgbmV2ZXI+IHtcclxuICAgIGFjY29yZGlvbjogeyBpbml0aWFsSW5kZXg/OiBudW1iZXIgfCBudWxsOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlQWNjb3JkaW9uUmV0dXJuVHlwZUluZm8gZXh0ZW5kcyBVc2VNYW5hZ2VkQ2hpbGRyZW5SZXR1cm5UeXBlSW5mbzxudW1iZXIsIFVzZUFjY29yZGlvblNlY3Rpb25JbmZvQmFzZSwgXCJ0YWJiZWRcIiB8IFwib3BlblwiPiB7XHJcbiAgICAvKiogKipTVEFCTEUqKiAqL1xyXG4gICAgYWNjb3JkaW9uOiB7IGNoYW5nZUV4cGFuZGVkSW5kZXg6IChhcmc6IG51bWJlciB8ICgocHJldlN0YXRlOiBudW1iZXIgfCBudWxsKSA9PiBudW1iZXIgfCBudWxsKSB8IG51bGwpID0+IG51bWJlciB8IG51bGw7IH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VBY2NvcmRpb25SZXR1cm5UeXBlV2l0aEhvb2tzPEhlYWRlckVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBCb2R5RWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlQWNjb3JkaW9uUmV0dXJuVHlwZUluZm8ge1xyXG4gICAgLyoqICoqU1RBQkxFKiogKi9cclxuICAgIHVzZUFjY29yZGlvblNlY3Rpb246IFVzZUFjY29yZGlvblNlY3Rpb248SGVhZGVyRWxlbWVudCwgQm9keUVsZW1lbnQ+O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZUFjY29yZGlvblNlY3Rpb25JbmZvQmFzZSB7XHJcbiAgICBzZXRPcGVuRnJvbVBhcmVudChvcGVuOiBib29sZWFuKTogdm9pZDtcclxuICAgIGdldE9wZW5Gcm9tUGFyZW50KCk6IGJvb2xlYW4gfCBudWxsO1xyXG4gICAgZm9jdXMoKTogdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VBY2NvcmRpb25TZWN0aW9uUGFyYW1ldGVyczxIZWFkZXJFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4ge1xyXG4gICAgbWFuYWdlZENoaWxkcmVuOiBVc2VNYW5hZ2VkQ2hpbGRQYXJhbWV0ZXJzPG51bWJlciwgVXNlQWNjb3JkaW9uU2VjdGlvbkluZm9CYXNlLCBcInRhYmJlZFwiIHwgXCJvcGVuXCIsIFwic3ViSW5mb1wiIHwgXCJmbGFnc1wiPltcIm1hbmFnZWRDaGlsZFwiXTtcclxuICAgIGFjY29yZGlvblNlY3Rpb246IHsgb3Blbj86IGJvb2xlYW4gfCB1bmRlZmluZWQ7IH1cclxuICAgIGJ1dHRvbjogT21pdDxVc2VCdXR0b25QYXJhbWV0ZXJzPEhlYWRlckVsZW1lbnQ+W1wiYnV0dG9uXCJdLCBcInByZXNzZWRcIiB8IFwib25QcmVzc1wiPjtcclxuICAgIGhhc0ZvY3VzOiBVc2VIYXNGb2N1c1BhcmFtZXRlcnM8SGVhZGVyRWxlbWVudD47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlQWNjb3JkaW9uU2VjdGlvblJldHVyblR5cGVJbmZvIHtcclxuICAgIGFjY29yZGlvblNlY3Rpb246IHtcclxuICAgICAgICBleHBhbmRlZDogYm9vbGVhbjtcclxuICAgICAgICBmb2N1c2VkOiBib29sZWFuO1xyXG4gICAgICAgIGhlYWRlcklkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgYm9keUlkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgZ2V0SGVhZGVySWQoKTogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGdldEJvZHlJZCgpOiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlQWNjb3JkaW9uU2VjdGlvblJldHVyblR5cGVXaXRoSG9va3M8SGVhZGVyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEJvZHlFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VBY2NvcmRpb25TZWN0aW9uUmV0dXJuVHlwZUluZm8ge1xyXG4gICAgLyoqICpVbnN0YWJsZSogKi9cclxuICAgIHVzZUFjY29yZGlvblNlY3Rpb25IZWFkZXJQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxIZWFkZXJFbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8SGVhZGVyRWxlbWVudD47XHJcbiAgICAvKiogKlVuc3RhYmxlKiAqL1xyXG4gICAgdXNlQWNjb3JkaW9uU2VjdGlvbkJvZHlQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxCb2R5RWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEJvZHlFbGVtZW50PjtcclxufVxyXG5cclxuXHJcbi8vZXhwb3J0IHR5cGUgVXNlQWNjb3JkaW9uU2VjdGlvbkhlYWRlcjxFIGV4dGVuZHMgRWxlbWVudD4gPSAoYXJnczogVXNlQnV0dG9uUGFyYW1ldGVyczxFPikgPT4gVXNlQWNjb3JkaW9uU2VjdGlvbkhlYWRlclJldHVyblR5cGU8RT47XHJcbi8vZXhwb3J0IGludGVyZmFjZSBVc2VBY2NvcmRpb25TZWN0aW9uSGVhZGVyUmV0dXJuVHlwZTxFIGV4dGVuZHMgRWxlbWVudD4geyB1c2VBY2NvcmRpb25TZWN0aW9uSGVhZGVyUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+OyB9XHJcbi8vZXhwb3J0IHR5cGUgVXNlQWNjb3JkaW9uU2VjdGlvbkJvZHk8RSBleHRlbmRzIEVsZW1lbnQ+ID0gKCkgPT4gVXNlQWNjb3JkaW9uU2VjdGlvbkJvZHlSZXR1cm5UeXBlPEU+O1xyXG4vL2V4cG9ydCBpbnRlcmZhY2UgVXNlQWNjb3JkaW9uU2VjdGlvbkJvZHlSZXR1cm5UeXBlPEUgZXh0ZW5kcyBFbGVtZW50PiB7IHVzZUFjY29yZGlvblNlY3Rpb25Cb2R5UHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+OyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlQWNjb3JkaW9uPEhlYWRlckVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCwgQm9keUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB8IFNWR0VsZW1lbnQ+KHsgYWNjb3JkaW9uOiB7IGluaXRpYWxJbmRleCB9LCBsaW5lYXJOYXZpZ2F0aW9uOiB7IGRpc2FibGVBcnJvd0tleXMsIGRpc2FibGVIb21lRW5kS2V5cywgbmF2aWdhdGlvbkRpcmVjdGlvbiB9LCBtYW5hZ2VkQ2hpbGRyZW46IHsgb25BZnRlckNoaWxkTGF5b3V0RWZmZWN0LCBvbkNoaWxkcmVuTW91bnRDaGFuZ2UgfSB9OiBVc2VBY2NvcmRpb25QYXJhbWV0ZXJzKTogVXNlQWNjb3JkaW9uUmV0dXJuVHlwZVdpdGhIb29rczxIZWFkZXJFbGVtZW50LCBCb2R5RWxlbWVudD4ge1xyXG4gICAgZGVidWdMb2coXCJ1c2VBY2NvcmRpYW5cIik7XHJcbiAgICBjb25zdCBbX2N1cnJlbnRGb2N1c2VkSW5kZXgsIHNldEN1cnJlbnRGb2N1c2VkSW5kZXgsIGdldEN1cnJlbnRGb2N1c2VkSW5kZXhdID0gdXNlU3RhdGU8bnVtYmVyIHwgbnVsbD4obnVsbCk7XHJcblxyXG4gICAgY29uc3QgbWNSZXR1cm5UeXBlID0gdXNlTWFuYWdlZENoaWxkcmVuPG51bWJlciwgVXNlQWNjb3JkaW9uU2VjdGlvbkluZm9CYXNlLCBcInRhYmJlZFwiIHwgXCJvcGVuXCI+KHtcclxuICAgICAgICBtYW5hZ2VkQ2hpbGRyZW46IHtcclxuICAgICAgICAgICAgb25DaGlsZHJlbk1vdW50Q2hhbmdlOiB1c2VTdGFibGVDYWxsYmFjazxPbkNoaWxkcmVuTW91bnRDaGFuZ2U8bnVtYmVyPj4oKG0sIHUpID0+IHsgb2NtYzIoKTsgb25DaGlsZHJlbk1vdW50Q2hhbmdlPy4obSwgdSk7IH0pLFxyXG4gICAgICAgICAgICBvbkFmdGVyQ2hpbGRMYXlvdXRFZmZlY3RcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB7IHVzZU1hbmFnZWRDaGlsZCwgbWFuYWdlZENoaWxkcmVuOiB7IGNoaWxkcmVuIH0gfSA9IG1jUmV0dXJuVHlwZTtcclxuXHJcbiAgICBjb25zdCBuYXZpZ2F0ZVRvRmlyc3QgPSB1c2VDYWxsYmFjaygoKSA9PiB7IGNoYW5nZVRhYmJlZEluZGV4KDApOyB9LCBbXSk7XHJcbiAgICBjb25zdCBuYXZpZ2F0ZVRvTGFzdCA9IHVzZUNhbGxiYWNrKCgpID0+IHsgY2hhbmdlVGFiYmVkSW5kZXgoY2hpbGRyZW4uZ2V0SGlnaGVzdEluZGV4KCkpOyB9LCBbXSk7XHJcbiAgICBjb25zdCBuYXZpZ2F0ZVRvUHJldiA9IHVzZUNhbGxiYWNrKCgpID0+IHsgY2hhbmdlVGFiYmVkSW5kZXgoaSA9PiAoKGkgPz8gMCkgLSAxKSkgfSwgW10pO1xyXG4gICAgY29uc3QgbmF2aWdhdGVUb05leHQgPSB1c2VDYWxsYmFjaygoKSA9PiB7IGNoYW5nZVRhYmJlZEluZGV4KGkgPT4gKChpID8/IDApICsgMSkpIH0sIFtdKTtcclxuICAgIGNvbnN0IGxpbmVhclJldHVyblR5cGUgPSB1c2VMaW5lYXJOYXZpZ2F0aW9uPEhlYWRlckVsZW1lbnQ+KHtcclxuICAgICAgICBsaW5lYXJOYXZpZ2F0aW9uOiB7XHJcbiAgICAgICAgICAgIG5hdmlnYXRlVG9GaXJzdCxcclxuICAgICAgICAgICAgbmF2aWdhdGVUb0xhc3QsXHJcbiAgICAgICAgICAgIG5hdmlnYXRlVG9OZXh0LFxyXG4gICAgICAgICAgICBuYXZpZ2F0ZVRvUHJldixcclxuICAgICAgICAgICAgZGlzYWJsZUFycm93S2V5cyxcclxuICAgICAgICAgICAgZGlzYWJsZUhvbWVFbmRLZXlzLFxyXG4gICAgICAgICAgICBuYXZpZ2F0aW9uRGlyZWN0aW9uOiBuYXZpZ2F0aW9uRGlyZWN0aW9uID8/IFwiYmxvY2tcIlxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHsgdXNlTGluZWFyTmF2aWdhdGlvblByb3BzIH0gPSBsaW5lYXJSZXR1cm5UeXBlO1xyXG5cclxuXHJcbiAgICBjb25zdCB7IGNoYW5nZUluZGV4OiBjaGFuZ2VFeHBhbmRlZEluZGV4LCBnZXRDdXJyZW50SW5kZXg6IF9nZXRDdXJyZW50RXhwYW5kZWRJbmRleCB9ID0gdXNlQ2hpbGRyZW5GbGFnKHtcclxuICAgICAgICBpbml0aWFsSW5kZXgsXHJcbiAgICAgICAgY2hpbGRyZW4sXHJcbiAgICAgICAga2V5OiBcIm9wZW5cIixcclxuICAgICAgICBjbG9zZXN0Rml0OiBmYWxzZVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgeyBjaGFuZ2VJbmRleDogY2hhbmdlVGFiYmVkSW5kZXgsIGdldEN1cnJlbnRJbmRleDogX2dldFRhYmJlZEluZGV4LCByZWV2YWx1YXRlQ2xvc2VzdEZpdDogb2NtYzIgfSA9IHVzZUNoaWxkcmVuRmxhZyh7XHJcbiAgICAgICAgaW5pdGlhbEluZGV4LFxyXG4gICAgICAgIGNoaWxkcmVuLFxyXG4gICAgICAgIGtleTogXCJ0YWJiZWRcIixcclxuICAgICAgICBjbG9zZXN0Rml0OiB0cnVlLFxyXG4gICAgICAgIG9uSW5kZXhDaGFuZ2U6IHVzZUNhbGxiYWNrKChpOiBudW1iZXIgfCBudWxsKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLmdldEF0KGkpPy5zdWJJbmZvLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBbXSlcclxuICAgIH0pXHJcblxyXG4gICAgY29uc3QgdXNlQWNjb3JkaW9uU2VjdGlvbjogVXNlQWNjb3JkaW9uU2VjdGlvbjxIZWFkZXJFbGVtZW50LCBCb2R5RWxlbWVudD4gPSB1c2VDYWxsYmFjazxVc2VBY2NvcmRpb25TZWN0aW9uPEhlYWRlckVsZW1lbnQsIEJvZHlFbGVtZW50Pj4oKHsgYnV0dG9uOiB7IGRpc2FibGVkLCB0YWdCdXR0b24gfSwgYWNjb3JkaW9uU2VjdGlvbjogeyBvcGVuOiBvcGVuRnJvbVVzZXIgfSwgbWFuYWdlZENoaWxkcmVuOiB7IGluZGV4IH0sIGhhc0ZvY3VzOiB7IG9uRm9jdXNlZElubmVyQ2hhbmdlZCwgLi4uaGFzRm9jdXMgfSB9KSA9PiB7XHJcblxyXG4gICAgICAgIGRlYnVnTG9nKFwidXNlQWNjb3JkaWFuU2VjdGlvblwiKTtcclxuICAgICAgICBjb25zdCBbb3BlbkZyb21QYXJlbnQsIHNldE9wZW5Gcm9tUGFyZW50LCBnZXRPcGVuRnJvbVBhcmVudF0gPSB1c2VTdGF0ZTxib29sZWFuIHwgbnVsbD4obnVsbCk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgY29uc3QgeyB1c2VSYW5kb21JZFNvdXJjZUVsZW1lbnQ6IHVzZUJvZHlBc1NvdXJjZUlkLCB1c2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50OiB1c2VIZWFkZXJBc1JlZmVyZW5jZXJJZCwgcmFuZG9tSWQ6IHsgdXNlZElkOiBib2R5SWQsIGdldFVzZWRJZDogZ2V0Qm9keUlkIH0gfSA9IHVzZVJhbmRvbUlkPEJvZHlFbGVtZW50Pih7IHJhbmRvbUlkOiB7IHByZWZpeDogXCJhcmlhLWFjY29yZGlvbi1zZWN0aW9uLWJvZHktXCIgfSwgbWFuYWdlZENoaWxkcmVuOiB7IG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdDogbnVsbCwgb25DaGlsZHJlbk1vdW50Q2hhbmdlOiBudWxsIH0gfSk7XHJcbiAgICAgICAgY29uc3QgeyB1c2VSYW5kb21JZFNvdXJjZUVsZW1lbnQ6IHVzZUhlYWRlckFzU291cmNlSWQsIHVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnQ6IHVzZUJvZHlBc1JlZmVyZW5jZXJJZCwgcmFuZG9tSWQ6IHsgdXNlZElkOiBoZWFkZXJJZCwgZ2V0VXNlZElkOiBnZXRIZWFkZXJJZCB9IH0gPSB1c2VSYW5kb21JZDxIZWFkZXJFbGVtZW50Pih7IHJhbmRvbUlkOiB7IHByZWZpeDogXCJhcmlhLWFjY29yZGlvbi1zZWN0aW9uLWhlYWRlci1cIiB9LCBtYW5hZ2VkQ2hpbGRyZW46IHsgb25BZnRlckNoaWxkTGF5b3V0RWZmZWN0OiBudWxsLCBvbkNoaWxkcmVuTW91bnRDaGFuZ2U6IG51bGwgfSB9KTtcclxuICAgICAgICBjb25zdCB7IHVzZVJhbmRvbUlkU291cmNlRWxlbWVudFByb3BzOiB1c2VCb2R5QXNTb3VyY2VJZFByb3BzIH0gPSB1c2VCb2R5QXNTb3VyY2VJZCgpO1xyXG4gICAgICAgIGNvbnN0IHsgdXNlUmFuZG9tSWRSZWZlcmVuY2VyRWxlbWVudFByb3BzOiB1c2VCb2R5QXNSZWZlcmVuY2VySWRQcm9wcyB9ID0gdXNlQm9keUFzUmVmZXJlbmNlcklkPEJvZHlFbGVtZW50PihcImFyaWEtbGFiZWxsZWRieVwiIGFzIG5ldmVyKTtcclxuICAgICAgICBjb25zdCB7IHVzZVJhbmRvbUlkU291cmNlRWxlbWVudFByb3BzOiB1c2VIZWFkZXJBc1NvdXJjZUlkUHJvcHMgfSA9IHVzZUhlYWRlckFzU291cmNlSWQoKTtcclxuICAgICAgICBjb25zdCB7IHVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnRQcm9wczogdXNlSGVhZGVyQXNSZWZlcmVuY2VySWRQcm9wcyB9ID0gdXNlSGVhZGVyQXNSZWZlcmVuY2VySWQ8SGVhZGVyRWxlbWVudD4oXCJhcmlhLWNvbnRyb2xzXCIgYXMgbmV2ZXIpO1xyXG5cclxuICAgICAgICBjb25zdCBvcGVuID0gKChvcGVuRnJvbVVzZXIgPz8gb3BlbkZyb21QYXJlbnQpID8/IGZhbHNlKTtcclxuICAgICAgICAvL2NvbnN0IGdldE9wZW4gPSB1c2VTdGFibGVHZXR0ZXIoISFvcGVuKTtcclxuICAgICAgICBjb25zdCBnZXRJbmRleCA9IHVzZVN0YWJsZUdldHRlcihpbmRleCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgZ2V0RWxlbWVudDogZ2V0SGVhZGVyRWxlbWVudCwgdXNlUmVmRWxlbWVudFByb3BzOiB1c2VIZWFkZXJSZWZFbGVtZW50UHJvcHMgfSA9IHVzZVJlZkVsZW1lbnQ8SGVhZGVyRWxlbWVudD4oe30pO1xyXG4gICAgICAgIGNvbnN0IHsgZ2V0RWxlbWVudDogZ2V0Qm9keUVsZW1lbnQsIHVzZVJlZkVsZW1lbnRQcm9wczogdXNlQm9keVJlZkVsZW1lbnRQcm9wcyB9ID0gdXNlUmVmRWxlbWVudDxCb2R5RWxlbWVudD4oe30pO1xyXG4gICAgICAgIGNvbnN0IGZvY3VzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZ2V0Q3VycmVudEZvY3VzZWRJbmRleCgpICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAoZ2V0SGVhZGVyRWxlbWVudCgpIGFzIEVsZW1lbnQgYXMgSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQpPy5mb2N1cygpO1xyXG4gICAgICAgIH0sIFtdKTtcclxuICAgICAgICBjb25zdCBvcGVuUmVmID0gdXNlUmVmKHtcclxuICAgICAgICAgICAgZ2V0OiAoKSA9PiAhIWdldE9wZW5Gcm9tUGFyZW50KCksXHJcbiAgICAgICAgICAgIHNldDogKG9wZW46IGJvb2xlYW4pID0+IHtcclxuICAgICAgICAgICAgICAgIHNldE9wZW5Gcm9tUGFyZW50KG9wZW4pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvcGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9keUVsZW1lbnQgPSBnZXRCb2R5RWxlbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRGb2N1c2VkSW5kZXgoZ2V0SW5kZXgoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHlFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IGJvZHlFbGVtZW50LmZvY3VzKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaXNWYWxpZDogcmV0dXJuVHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHRhYmJlZFJlZiA9IHVzZVJlZih7XHJcbiAgICAgICAgICAgIGdldDogKCkgPT4gKGdldEN1cnJlbnRGb2N1c2VkSW5kZXgoKSA9PSBnZXRJbmRleCgpKSxcclxuICAgICAgICAgICAgc2V0OiAob3BlbjogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wZW4pXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0Q3VycmVudEZvY3VzZWRJbmRleChnZXRJbmRleCgpKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaXNWYWxpZDogcmV0dXJuVHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IF9fOiB2b2lkID0gdXNlTWFuYWdlZENoaWxkKHtcclxuICAgICAgICAgICAgbWFuYWdlZENoaWxkOiB7XHJcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICBmbGFnczoge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wZW46IG9wZW5SZWYuY3VycmVudCxcclxuICAgICAgICAgICAgICAgICAgICB0YWJiZWQ6IHRhYmJlZFJlZi5jdXJyZW50XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc3ViSW5mbzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzLFxyXG4gICAgICAgICAgICAgICAgICAgIGdldE9wZW5Gcm9tUGFyZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIHNldE9wZW5Gcm9tUGFyZW50XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgLy8gaW5mbzogeyBpbmRleCwgc2V0T3BlbkZyb21QYXJlbnQsIGdldE9wZW5Gcm9tUGFyZW50LCBmb2N1cywgZmxhZ3M6IHsgb3Blbjogb3BlblJlZi5jdXJyZW50LCB0YWJiZWQ6IHRhYmJlZFJlZi5jdXJyZW50IH0gfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHVzZUFjY29yZGlvblNlY3Rpb25IZWFkZXJQcm9wcyh7IFtcImFyaWEtZXhwYW5kZWRcIl06IGFyaWFFeHBhbmRlZCwgW1wiYXJpYS1kaXNhYmxlZFwiXTogYXJpYURpc2FibGVkLCAuLi5wcm9wcyB9OiBoLkpTWC5IVE1MQXR0cmlidXRlczxIZWFkZXJFbGVtZW50Pik6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEhlYWRlckVsZW1lbnQ+IHtcclxuXHJcbiAgICAgICAgICAgIC8vY29uc3Qgb25Gb2N1cyA9ICgpID0+IHsgY2hhbmdlVGFiYmVkSW5kZXgoaW5kZXgpOyB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9uUHJlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2V0T3BlbkZyb21QYXJlbnQoKSlcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VFeHBhbmRlZEluZGV4KG51bGwpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZUV4cGFuZGVkSW5kZXgoaW5kZXgpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcHJvcHMudGFiSW5kZXggPSAwO1xyXG4gICAgICAgICAgICBjb25zdCB7IHVzZUJ1dHRvblByb3BzIH0gPSB1c2VCdXR0b248SGVhZGVyRWxlbWVudD4oe1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uOiB7IHRhZ0J1dHRvbiwgZGlzYWJsZWQsIG9uUHJlc3MgfSwgaGFzRm9jdXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAuLi5oYXNGb2N1cyxcclxuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzZWRJbm5lckNoYW5nZWQ6IHVzZVN0YWJsZUNhbGxiYWNrKChmb2N1c2VkOiBib29sZWFuLCBwcmV2OiBib29sZWFuIHwgdW5kZWZpbmVkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRm9jdXNlZElubmVyQ2hhbmdlZD8uKGZvY3VzZWQsIHByZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9jdXNlZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVRhYmJlZEluZGV4KGluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc3QgcmV0QiA9IHVzZUJ1dHRvblByb3BzKHByb3BzKTtcclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIC8vY29uc3QgcmV0MzogaC5KU1guSFRNTEF0dHJpYnV0ZXM8SGVhZGVyRWxlbWVudD5cclxuICAgICAgICAgICAgLy8gICAgPSB1c2VNZXJnZWRQcm9wczxIZWFkZXJFbGVtZW50PihyZXRELCB7IG9uRm9jdXMgfSk7XHJcblxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHVzZUxpbmVhck5hdmlnYXRpb25Qcm9wcyh1c2VIZWFkZXJBc1NvdXJjZUlkUHJvcHModXNlSGVhZGVyQXNSZWZlcmVuY2VySWRQcm9wcyh7XHJcbiAgICAgICAgICAgICAgICBcImFyaWEtZXhwYW5kZWRcIjogKGFyaWFFeHBhbmRlZCA/PyBvcGVuID8/IGZhbHNlKS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgXCJhcmlhLWRpc2FibGVkXCI6IChhcmlhRGlzYWJsZWQgPz8gKG9wZW4gPyBcInRydWVcIiA6IHVuZGVmaW5lZCkpLFxyXG4gICAgICAgICAgICAgICAgLi4udXNlSGVhZGVyUmVmRWxlbWVudFByb3BzKHJldEIpXHJcbiAgICAgICAgICAgIH0gYXMgaC5KU1guSFRNTEF0dHJpYnV0ZXM8SGVhZGVyRWxlbWVudD4pKSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdXNlQWNjb3JkaW9uU2VjdGlvbkJvZHlQcm9wcyh7IHJvbGUsIC4uLnByb3BzIH06IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEJvZHlFbGVtZW50Pik6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEJvZHlFbGVtZW50PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJldDEgPSB1c2VCb2R5QXNSZWZlcmVuY2VySWRQcm9wcyh7IHJvbGU6IHJvbGUgPz8gXCJyZWdpb25cIiwgLi4ucHJvcHMgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJldDIgPSB1c2VCb2R5QXNTb3VyY2VJZFByb3BzKHJldDEpO1xyXG4gICAgICAgICAgICByZXQyLnRhYkluZGV4ID8/PSAtMTtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZUJvZHlSZWZFbGVtZW50UHJvcHMocmV0Mik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBhY2NvcmRpb25TZWN0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBleHBhbmRlZDogb3BlbixcclxuICAgICAgICAgICAgICAgIGZvY3VzZWQ6IChnZXRDdXJyZW50Rm9jdXNlZEluZGV4KCkgPT0gaW5kZXgpLFxyXG4gICAgICAgICAgICAgICAgYm9keUlkLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVySWQsXHJcbiAgICAgICAgICAgICAgICBnZXRCb2R5SWQsXHJcbiAgICAgICAgICAgICAgICBnZXRIZWFkZXJJZFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1c2VBY2NvcmRpb25TZWN0aW9uSGVhZGVyUHJvcHMsXHJcbiAgICAgICAgICAgIHVzZUFjY29yZGlvblNlY3Rpb25Cb2R5UHJvcHMsXHJcblxyXG4gICAgICAgIH1cclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbjogbWNSZXR1cm5UeXBlLm1hbmFnZWRDaGlsZHJlbixcclxuICAgICAgICBhY2NvcmRpb246IHsgY2hhbmdlRXhwYW5kZWRJbmRleCB9LFxyXG4gICAgICAgIHVzZUFjY29yZGlvblNlY3Rpb24sXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuIiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgVXNlSGFzRm9jdXNQYXJhbWV0ZXJzLCB1c2VNZXJnZWRQcm9wcywgdXNlUHJlc3MsIHVzZVJhbmRvbUlkLCB1c2VSZWZFbGVtZW50LCB1c2VTdGFibGVDYWxsYmFjayB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IEVsZW1lbnRUb1RhZyB9IGZyb20gXCIuL3Byb3BzXCI7XHJcblxyXG5pbnRlcmZhY2UgVUxJPElucHV0RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIExhYmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IHtcclxuICAgIHByZWZpeExhYmVsOiBzdHJpbmc7XHJcbiAgICBwcmVmaXhJbnB1dDogc3RyaW5nO1xyXG4gICAgdGFnSW5wdXQ6IEVsZW1lbnRUb1RhZzxJbnB1dEVsZW1lbnQ+O1xyXG4gICAgdGFnTGFiZWw6IEVsZW1lbnRUb1RhZzxMYWJlbEVsZW1lbnQ+O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBMYWJlbE9taXRzID0ga2V5b2YgVUxJPGFueSwgYW55PjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlTGFiZWxQYXJhbWV0ZXJzPElucHV0RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIExhYmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIExPbWl0cyBleHRlbmRzIExhYmVsT21pdHM+IHtcclxuICAgIGxhYmVsOiBPbWl0PFVMSTxJbnB1dEVsZW1lbnQsIExhYmVsRWxlbWVudD4sIExPbWl0cz5cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VMYWJlbFJldHVyblR5cGVJbmZvIHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgICAgbGFiZWxJZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGlucHV0SWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKiogKipTdGFibGUqKiAqL1xyXG4gICAgICAgIGdldExhYmVsSWQ6ICgpID0+IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKiogKipTdGFibGUqKiAqL1xyXG4gICAgICAgIGdldElucHV0SWQ6ICgpID0+IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VMYWJlbFJldHVyblR5cGVXaXRoSG9va3M8SW5wdXRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTGFiZWxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VMYWJlbFJldHVyblR5cGVJbmZvIHtcclxuICAgIC8qKiAqTm90YWJseSB1bnN0YWJsZSogKi9cclxuICAgIHVzZUxhYmVsSW5wdXQ6ICgpID0+IHsgdXNlTGFiZWxJbnB1dFByb3BzOiAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPElucHV0RWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPElucHV0RWxlbWVudD47IH07XHJcbiAgICAvKiogKk5vdGFibHkgdW5zdGFibGUqICovXHJcbiAgICB1c2VMYWJlbExhYmVsOiAoKSA9PiB7IHVzZUxhYmVsTGFiZWxQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxMYWJlbEVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxMYWJlbEVsZW1lbnQ+OyB9O1xyXG59XHJcblxyXG4vKipcclxuICogQWRkcyBhbiBJRCBhbmQgXCJhcmlhLWxhYmVsbGVkYnlcIiBmb3IgdHdvIGVsZW1lbnRzLCBhbiBcImlucHV0XCIgZWxlbWVudCBhbmQgYSBcImxhYmVsXCIgZWxlbWVudC5cclxuICogXHJcbiAqIFJldHVybnMgdGhlIGB1c2VSZWZlcmVuY2VkSWRQcm9wc2AgaG9va3MgaWYgeW91IG5lZWQgdG8gYWxzbyBhZGQgb3RoZXIgSUQtcmVmZXJlbmNlciBhdHRyaWJ1dGVzLCBsaWtlIGBmb3JgXHJcbiAqIFxyXG4gKiBAc2VlIHVzZUlucHV0TGFiZWxcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VMYWJlbDxJbnB1dEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50Pih7IGxhYmVsOiB7IHByZWZpeElucHV0LCBwcmVmaXhMYWJlbCwgdGFnSW5wdXQsIHRhZ0xhYmVsIH0gfTogVXNlTGFiZWxQYXJhbWV0ZXJzPElucHV0RWxlbWVudCwgTGFiZWxFbGVtZW50LCBuZXZlcj4pOiBVc2VMYWJlbFJldHVyblR5cGVXaXRoSG9va3M8SW5wdXRFbGVtZW50LCBMYWJlbEVsZW1lbnQ+IHtcclxuXHJcbiAgICBjb25zdCB7IHVzZVJhbmRvbUlkU291cmNlRWxlbWVudDogdXNlTGFiZWxBc1NvdXJjZUlkLCB1c2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50OiB1c2VMYWJlbEFzUmVmZXJlbmNlcklkLCByYW5kb21JZDogeyB1c2VkSWQ6IGxhYmVsSWQsIGdldFVzZWRJZDogZ2V0TGFiZWxJZCB9IH0gPSB1c2VSYW5kb21JZDxMYWJlbEVsZW1lbnQ+KHsgcmFuZG9tSWQ6IHsgcHJlZml4OiBwcmVmaXhMYWJlbCB9LCBtYW5hZ2VkQ2hpbGRyZW46IHsgb25BZnRlckNoaWxkTGF5b3V0RWZmZWN0OiBudWxsLCBvbkNoaWxkcmVuTW91bnRDaGFuZ2U6IG51bGwgfSB9KTtcclxuICAgIGNvbnN0IHsgdXNlUmFuZG9tSWRTb3VyY2VFbGVtZW50OiB1c2VJbnB1dEFzU291cmNlSWQsIHVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnQ6IHVzZUlucHV0QXNSZWZlcmVuY2VySWQsIHJhbmRvbUlkOiB7IHVzZWRJZDogaW5wdXRJZCwgZ2V0VXNlZElkOiBnZXRJbnB1dElkIH0gfSA9IHVzZVJhbmRvbUlkPElucHV0RWxlbWVudD4oeyByYW5kb21JZDogeyBwcmVmaXg6IHByZWZpeElucHV0IH0sIG1hbmFnZWRDaGlsZHJlbjogeyBvbkFmdGVyQ2hpbGRMYXlvdXRFZmZlY3Q6IG51bGwsIG9uQ2hpbGRyZW5Nb3VudENoYW5nZTogbnVsbCB9IH0pO1xyXG4gICAgY29uc3QgeyB1c2VSYW5kb21JZFNvdXJjZUVsZW1lbnRQcm9wczogdXNlTGFiZWxBc1NvdXJjZUlkUHJvcHMgfSA9IHVzZUxhYmVsQXNTb3VyY2VJZCgpO1xyXG4gICAgY29uc3QgeyB1c2VSYW5kb21JZFNvdXJjZUVsZW1lbnRQcm9wczogdXNlSW5wdXRBc1NvdXJjZUlkUHJvcHMgfSA9IHVzZUlucHV0QXNTb3VyY2VJZCgpO1xyXG4gICAgY29uc3QgeyB1c2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50UHJvcHM6IHVzZUxhYmVsQXNSZWZlcmVuY2VySWRQcm9wcyB9ID0gdXNlTGFiZWxBc1JlZmVyZW5jZXJJZDxJbnB1dEVsZW1lbnQ+KFwiYXJpYS1sYWJlbGxlZGJ5XCIgYXMgbmV2ZXIpO1xyXG4gICAgY29uc3QgeyB1c2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50UHJvcHM6IHVzZUlucHV0QXNSZWZlcmVuY2VySWRQcm9wcyB9ID0gdXNlSW5wdXRBc1JlZmVyZW5jZXJJZDxMYWJlbEVsZW1lbnQ+KFwiZm9yXCIpO1xyXG5cclxuICAgIGNvbnN0IGlzU3ludGhldGljTGFiZWwgPSAodGFnSW5wdXQgIT0gXCJpbnB1dFwiIHx8IHRhZ0xhYmVsICE9IFwibGFiZWxcIik7XHJcblxyXG4gICAgY29uc3QgdXNlTGFiZWxMYWJlbDogKCgpID0+IHsgdXNlTGFiZWxMYWJlbFByb3BzOiAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExhYmVsRWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExhYmVsRWxlbWVudD47IH0pID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlTGFiZWxMYWJlbCgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB1c2VMYWJlbExhYmVsUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGFiZWxFbGVtZW50Pik6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExhYmVsRWxlbWVudD4gPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcHNXaXRob3V0Rm9yID0gdXNlTGFiZWxBc1NvdXJjZUlkUHJvcHMocHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcHNXaXRoRm9yID0gdXNlSW5wdXRBc1JlZmVyZW5jZXJJZFByb3BzKHByb3BzV2l0aG91dEZvcik7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFnTGFiZWwgPT0gXCJsYWJlbFwiICYmIHRhZ0lucHV0ID09IFwiaW5wdXRcIilcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHNXaXRoRm9yO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wc1dpdGhvdXRGb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LCBbaXNTeW50aGV0aWNMYWJlbF0pO1xyXG5cclxuICAgIGNvbnN0IHVzZUxhYmVsSW5wdXQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiB1c2VMYWJlbElucHV0KCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVzZUxhYmVsSW5wdXRQcm9wczogKHsgXCJhcmlhLWxhYmVsbGVkYnlcIjogYXJpYUxhYmVsbGVkYnksIC4uLnByb3BzIH06IGguSlNYLkhUTUxBdHRyaWJ1dGVzPElucHV0RWxlbWVudD4pOiBoLkpTWC5IVE1MQXR0cmlidXRlczxJbnB1dEVsZW1lbnQ+ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuYXNzZXJ0KCFhcmlhTGFiZWxsZWRieSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcHNXaXRob3V0QXJpYUxhYmVsbGVkQnkgPSB1c2VJbnB1dEFzU291cmNlSWRQcm9wcyhwcm9wcyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wc1dpdGhBcmlhTGFiZWxsZWRCeSA9IHVzZUxhYmVsQXNSZWZlcmVuY2VySWRQcm9wcyhwcm9wc1dpdGhvdXRBcmlhTGFiZWxsZWRCeSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNTeW50aGV0aWNMYWJlbCAmJiAhcHJvcHNbXCJhcmlhLWxhYmVsXCJdKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wc1dpdGhBcmlhTGFiZWxsZWRCeTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHNXaXRob3V0QXJpYUxhYmVsbGVkQnk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW2lzU3ludGhldGljTGFiZWxdKVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlTGFiZWxJbnB1dCxcclxuICAgICAgICB1c2VMYWJlbExhYmVsLFxyXG4gICAgICAgIGxhYmVsOiB7XHJcbiAgICAgICAgICAgIGxhYmVsSWQsXHJcbiAgICAgICAgICAgIGlucHV0SWQsXHJcbiAgICAgICAgICAgIGdldExhYmVsSWQsXHJcbiAgICAgICAgICAgIGdldElucHV0SWRcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgdHlwZSBDaGVja2JveENoZWNrZWRUeXBlID0gYm9vbGVhbiB8IFwibWl4ZWRcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlQ2hlY2tib3hMaWtlUGFyYW1ldGVyczxJbnB1dFR5cGUgZXh0ZW5kcyBFbGVtZW50LCBMYWJlbFR5cGUgZXh0ZW5kcyBFbGVtZW50PiB7XHJcbiAgICBsYWJlbDogVXNlTGFiZWxQYXJhbWV0ZXJzPElucHV0VHlwZSwgTGFiZWxUeXBlLCBcInByZWZpeExhYmVsXCIgfCBcInByZWZpeElucHV0XCI+W1wibGFiZWxcIl07XHJcbiAgICBjaGVja2JveExpa2U6IHtcclxuICAgICAgICBsYWJlbFBvc2l0aW9uOiBcIndyYXBwaW5nXCIgfCBcInNlcGFyYXRlXCI7XHJcbiAgICAgICAgLyoqIFRoZSByb2xlIGF0dHJpYnV0ZSB0byB1c2UsIHdoZW4gYXBwbGljYWJsZSAqL1xyXG4gICAgICAgIHJvbGU6IHN0cmluZztcclxuICAgICAgICBkaXNhYmxlZDogYm9vbGVhbjtcclxuICAgICAgICBjaGVja2VkOiBDaGVja2JveENoZWNrZWRUeXBlO1xyXG4gICAgICAgIG9uQ2hlY2tlZENoYW5nZT8oZXZlbnQ6IGguSlNYLlRhcmdldGVkRXZlbnQ8SW5wdXRUeXBlPik6IHZvaWQ7XHJcbiAgICAgICAgLy9vbklucHV0PyhldmVudDogaC5KU1guVGFyZ2V0ZWRFdmVudDxMYWJlbFR5cGU+KTogdm9pZDtcclxuICAgIH1cclxuICAgIGhhc0ZvY3VzSW5wdXQ6IFVzZUhhc0ZvY3VzUGFyYW1ldGVyczxJbnB1dFR5cGU+O1xyXG4gICAgaGFzRm9jdXNMYWJlbDogVXNlSGFzRm9jdXNQYXJhbWV0ZXJzPExhYmVsVHlwZT47XHJcbn1cclxuXHJcbmNvbnN0IGhhbmRsZXNJbnB1dCA9IDxFIGV4dGVuZHMgRWxlbWVudD4odGFnOiBFbGVtZW50VG9UYWc8RT4sIGxhYmVsUG9zaXRpb246IFwid3JhcHBpbmdcIiB8IFwic2VwYXJhdGVcIiwgd2hpY2g6IFwiaW5wdXQtZWxlbWVudFwiIHwgXCJsYWJlbC1lbGVtZW50XCIpID0+IHtcclxuICAgIGlmIChsYWJlbFBvc2l0aW9uID09PSBcInNlcGFyYXRlXCIpIHtcclxuICAgICAgICBpZiAod2hpY2ggPT09IFwiaW5wdXQtZWxlbWVudFwiKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBlbHNlIGlmICh3aGljaCA9PT0gXCJsYWJlbC1lbGVtZW50XCIpXHJcbiAgICAgICAgICAgIHJldHVybiB0YWcgIT0gXCJpbnB1dFwiO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobGFiZWxQb3NpdGlvbiA9PT0gXCJ3cmFwcGluZ1wiKSB7XHJcbiAgICAgICAgaWYgKHdoaWNoID09PSBcImlucHV0LWVsZW1lbnRcIilcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmICh3aGljaCA9PSBcImxhYmVsLWVsZW1lbnRcIilcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBVc2VDaGVja2JveExpa2VJbnB1dEVsZW1lbnQ8SW5wdXRUeXBlIGV4dGVuZHMgRWxlbWVudD4gPSAoKSA9PiB7XHJcbiAgICBnZXRJbnB1dEVsZW1lbnQ6ICgpID0+IElucHV0VHlwZSB8IG51bGw7XHJcbiAgICAvKiogKlVuc3RhYmxlKiAqL1xyXG4gICAgdXNlQ2hlY2tib3hMaWtlSW5wdXRFbGVtZW50UHJvcHM6ICh7IC4uLnAwIH06IGguSlNYLkhUTUxBdHRyaWJ1dGVzPElucHV0VHlwZT4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPElucHV0VHlwZT47XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFVzZUNoZWNrYm94TGlrZUxhYmVsRWxlbWVudDxMYWJlbFR5cGUgZXh0ZW5kcyBFbGVtZW50PiA9ICgpID0+IHtcclxuICAgIC8qKiAqVW5zdGFibGUqICovXHJcbiAgICB1c2VDaGVja2JveExpa2VMYWJlbEVsZW1lbnRQcm9wczogKHsgLi4ucDAgfTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGFiZWxUeXBlPikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGFiZWxUeXBlPjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VDaGVja2JveExpa2VSZXR1cm5UeXBlSW5mbzxJbnB1dFR5cGUgZXh0ZW5kcyBFbGVtZW50LCBMYWJlbFR5cGUgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZUxhYmVsUmV0dXJuVHlwZUluZm8ge1xyXG4gICAgY2hlY2tib3hMaWtlOiB7XHJcbiAgICAgICAgLyoqICoqU1RBQkxFKiogKi9cclxuICAgICAgICBnZXRMYWJlbEVsZW1lbnQ6ICgpID0+IExhYmVsVHlwZSB8IG51bGw7XHJcbiAgICAgICAgLyoqICoqU1RBQkxFKiogKi9cclxuICAgICAgICBnZXRJbnB1dEVsZW1lbnQ6ICgpID0+IElucHV0VHlwZSB8IG51bGw7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlQ2hlY2tib3hMaWtlUmV0dXJuVHlwZVdpdGhIb29rczxJbnB1dFR5cGUgZXh0ZW5kcyBFbGVtZW50LCBMYWJlbFR5cGUgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZUNoZWNrYm94TGlrZVJldHVyblR5cGVJbmZvPElucHV0VHlwZSwgTGFiZWxUeXBlPiB7XHJcbiAgICAvKiogKk5vdGFibHkgdW5zdGFibGUqICovXHJcbiAgICB1c2VDaGVja2JveExpa2VJbnB1dEVsZW1lbnQ6IFVzZUNoZWNrYm94TGlrZUlucHV0RWxlbWVudDxJbnB1dFR5cGU+O1xyXG4gICAgLyoqICpOb3RhYmx5IHVuc3RhYmxlKiAqL1xyXG4gICAgdXNlQ2hlY2tib3hMaWtlTGFiZWxFbGVtZW50OiAoKSA9PiB7IHVzZUNoZWNrYm94TGlrZUxhYmVsRWxlbWVudFByb3BzOiAoeyAuLi5wMCB9OiBoLkpTWC5IVE1MQXR0cmlidXRlczxMYWJlbFR5cGU+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxMYWJlbFR5cGU+OyB9O1xyXG59XHJcblxyXG4vKipcclxuICogSGFuZGxlcyBsYWJlbCB0eXBlICh3cmFwcGluZyBvciBzZXBhcmF0ZSkgZm9yIGNoZWNrYm94ZXMsIHJhZGlvcywgc3dpdGNoZXMsIGV0Yy5cclxuICogXHJcbiAqIElmIGl0J3MgYSB0b2dnbGVhYmxlIGNsaWNrLXRoaW5nIHdpdGggYSBsYWJlbCAodGhhdCBjYW4gYWxzbyBiZSBjbGlja2VkKSwgdGhlbiBpdCdzIGEgY2hlY2tib3gtbGlrZS5cclxuICogQHBhcmFtIHBhcmFtMCBcclxuICogQHJldHVybnMgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlQ2hlY2tib3hMaWtlPElucHV0VHlwZSBleHRlbmRzIEVsZW1lbnQsIExhYmVsVHlwZSBleHRlbmRzIEVsZW1lbnQ+KHsgY2hlY2tib3hMaWtlOiB7IGNoZWNrZWQsIGRpc2FibGVkLCBsYWJlbFBvc2l0aW9uLCByb2xlLCBvbkNoZWNrZWRDaGFuZ2UgfSwgbGFiZWw6IHsgdGFnSW5wdXQsIHRhZ0xhYmVsIH0sIGhhc0ZvY3VzSW5wdXQsIGhhc0ZvY3VzTGFiZWwgfTogVXNlQ2hlY2tib3hMaWtlUGFyYW1ldGVyczxJbnB1dFR5cGUsIExhYmVsVHlwZT4pOiBVc2VDaGVja2JveExpa2VSZXR1cm5UeXBlV2l0aEhvb2tzPElucHV0VHlwZSwgTGFiZWxUeXBlPiB7XHJcblxyXG4gICAgY29uc3Qgc3RhYmxlT25JbnB1dCA9IHVzZVN0YWJsZUNhbGxiYWNrKChlOiBoLkpTWC5UYXJnZXRlZEV2ZW50PElucHV0VHlwZT4gfCBoLkpTWC5UYXJnZXRlZEV2ZW50PExhYmVsVHlwZT4pID0+IHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgb25DaGVja2VkQ2hhbmdlPy4oZSBhcyBoLkpTWC5UYXJnZXRlZEV2ZW50PElucHV0VHlwZT4pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgeyB1c2VMYWJlbElucHV0OiB1c2VJTElucHV0LCB1c2VMYWJlbExhYmVsOiB1c2VJTExhYmVsLCBsYWJlbCB9ID0gdXNlTGFiZWw8SW5wdXRUeXBlLCBMYWJlbFR5cGU+KHsgbGFiZWw6IHsgcHJlZml4TGFiZWw6IFwiYXJpYS1jaGVja2JveC1sYWJlbC1cIiwgcHJlZml4SW5wdXQ6IFwiYXJpYS1jaGVja2JveC1pbnB1dC1cIiwgdGFnSW5wdXQ6IHRhZ0lucHV0LCB0YWdMYWJlbDogdGFnTGFiZWwgfSB9KTtcclxuXHJcblxyXG4gICAgY29uc3QgeyBnZXRFbGVtZW50OiBnZXRMYWJlbEVsZW1lbnQsIHVzZVJlZkVsZW1lbnRQcm9wczogdXNlTGFiZWxSZWZFbGVtZW50UHJvcHMgfSA9IHVzZVJlZkVsZW1lbnQ8TGFiZWxUeXBlPigpO1xyXG4gICAgY29uc3QgeyBnZXRFbGVtZW50OiBnZXRJbnB1dEVsZW1lbnQsIHVzZVJlZkVsZW1lbnRQcm9wczogdXNlSW5wdXRSZWZFbGVtZW50UHJvcHMgfSA9IHVzZVJlZkVsZW1lbnQ8SW5wdXRUeXBlPigpO1xyXG5cclxuICAgIGNvbnN0IHVzZUNoZWNrYm94TGlrZUlucHV0RWxlbWVudDogVXNlQ2hlY2tib3hMaWtlSW5wdXRFbGVtZW50PElucHV0VHlwZT4gPSB1c2VDYWxsYmFjayhmdW5jdGlvbiB1c2VDaGVja2JveElucHV0RWxlbWVudCgpIHtcclxuICAgICAgICBjb25zdCB0YWcgPSB0YWdJbnB1dDtcclxuICAgICAgICBjb25zdCB7IHVzZUxhYmVsSW5wdXRQcm9wczogdXNlSUxJbnB1dFByb3BzIH0gPSB1c2VJTElucHV0KCk7XHJcbiAgICAgICAgY29uc3QgeyB1c2VSZWZFbGVtZW50UHJvcHMsIGdldEVsZW1lbnQgfSA9IHVzZVJlZkVsZW1lbnQ8SW5wdXRUeXBlPih7fSk7XHJcblxyXG4gICAgICAgIC8vIG9uQ2xpY2sgYW5kIG9uQ2hhbmdlIGFyZSBhIGJpdCBtZXNzeSwgc28gd2UgbmVlZCB0b1xyXG4gICAgICAgIC8vICphbHdheXMqIG1ha2Ugc3VyZSB0aGF0IHRoZSB2aXNpYmxlIHN0YXRlIGlzIGNvcnJlY3RcclxuICAgICAgICAvLyBhZnRlciBhbGwgdGhlIGV2ZW50IGR1c3Qgc2V0dGxlcy5cclxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3ByZWFjdGpzL3ByZWFjdC9pc3N1ZXMvMjc0NSxcclxuICAgICAgICAvLyBhbmQgaHR0cHM6Ly9naXRodWIuY29tL3ByZWFjdGpzL3ByZWFjdC9pc3N1ZXMvMTg5OSNpc3N1ZWNvbW1lbnQtNTI1NjkwMTk0XHJcbiAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGdldEVsZW1lbnQoKTtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgdGFnID09IFwiaW5wdXRcIikge1xyXG4gICAgICAgICAgICAgICAgKGVsZW1lbnQgYXMgRWxlbWVudCBhcyBIVE1MSW5wdXRFbGVtZW50KS5pbmRldGVybWluYXRlID0gKGNoZWNrZWQgPT09IFwibWl4ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAoZWxlbWVudCBhcyBFbGVtZW50IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQgPSAoY2hlY2tlZCA9PT0gdHJ1ZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIFt0YWcsIGNoZWNrZWRdKVxyXG5cclxuICAgICAgICByZXR1cm4geyBnZXRJbnB1dEVsZW1lbnQ6IGdldEVsZW1lbnQsIHVzZUNoZWNrYm94TGlrZUlucHV0RWxlbWVudFByb3BzIH07XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiB1c2VDaGVja2JveExpa2VJbnB1dEVsZW1lbnRQcm9wcyh7IC4uLnAwIH06IGguSlNYLkhUTUxBdHRyaWJ1dGVzPElucHV0VHlwZT4pOiBoLkpTWC5IVE1MQXR0cmlidXRlczxJbnB1dFR5cGU+IHtcclxuXHJcbiAgICAgICAgICAgIC8vIEZvciBzb21lIHJlYXNvbiwgQ2hyb21lIHdvbid0IGZpcmUgb25JbnB1dCBldmVudHMgZm9yIHJhZGlvIGJ1dHRvbnMgdGhhdCBhcmUgdGFiSW5kZXg9LTE/P1xyXG4gICAgICAgICAgICAvLyBOZWVkcyBpbnZlc3RpZ2F0aW5nLCBidXQgb25JbnB1dCB3b3JrcyBmaW5lIGluIEZpcmVmb3hcclxuICAgICAgICAgICAgLy8gVE9ET1xyXG4gICAgICAgICAgICBjb25zdCB1c2VQcmVzc1Byb3BzID0gdXNlUHJlc3M8SW5wdXRUeXBlPih7XHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrU3luYzogZGlzYWJsZWQgfHwgIWhhbmRsZXNJbnB1dCh0YWcsIGxhYmVsUG9zaXRpb24sIFwiaW5wdXQtZWxlbWVudFwiKSA/IHVuZGVmaW5lZCA6IHN0YWJsZU9uSW5wdXQsXHJcbiAgICAgICAgICAgICAgICBleGNsdWRlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBoYXNGb2N1czogaGFzRm9jdXNJbnB1dFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbGV0IHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxJbnB1dFR5cGU+ID0gdXNlUHJlc3NQcm9wcyhwMCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGFnID09IFwiaW5wdXRcIilcclxuICAgICAgICAgICAgICAgIHByb3BzLm9uSW5wdXQgPSAoZTogRXZlbnQpID0+IGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIHByb3BzID0gdXNlUmVmRWxlbWVudFByb3BzKHVzZUlMSW5wdXRQcm9wcyhwcm9wcykpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChsYWJlbFBvc2l0aW9uID09IFwid3JhcHBpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgLy8gQmVjYXVzZSB0aGUgd3JhcHBlZCBsYWJlbCBoYW5kbGVzIGFsbCBpbnRlcmFjdGlvbnMsXHJcbiAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGlzIGVsZW1lbnQgY2FuJ3QgYmUgaW50ZXJhY3RlZCB3aXRoXHJcbiAgICAgICAgICAgICAgICAvLyBldmVuIGlmIGl0J3MgYW4gaW5wdXQgZWxlbWVudC5cclxuICAgICAgICAgICAgICAgIHByb3BzLmluZXJ0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHByb3BzLnRhYkluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICBwcm9wcy5yb2xlID0gXCJwcmVzZW50YXRpb25cIjtcclxuICAgICAgICAgICAgICAgIHByb3BzW1wiYXJpYS1oaWRkZW5cIl0gPSBcInRydWVcIjtcclxuICAgICAgICAgICAgICAgIHByb3BzLm9uRm9jdXMgPSBfID0+IChnZXRMYWJlbEVsZW1lbnQoKSBhcyBIVE1MRWxlbWVudCB8IG51bGwpPy5mb2N1cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhZyA9PT0gXCJpbnB1dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMuY2hlY2tlZCA9IChjaGVja2VkID09PSB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnJvbGUgPSByb2xlO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnRhYkluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wc1tcImFyaWEtY2hlY2tlZFwiXSA9IGNoZWNrZWQgPT09IFwibWl4ZWRcIiA/IFwibWl4ZWRcIiA6IGNoZWNrZWQgPT09IHRydWUgPyBcInRydWVcIiA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHByb3BzW1wiYXJpYS1kaXNhYmxlZFwiXSA9IGRpc2FibGVkLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCBsYWJlbCBjbGlja3MgY2FuJ3QgYWZmZWN0IHRoZSBjaGVja2JveCB3aGlsZSBpdCdzIGRpc2FibGVkXHJcbiAgICAgICAgICAgIHByb3BzLm9uQ2xpY2sgPSBkaXNhYmxlZCA/ICgoZSkgPT4geyBlLnByZXZlbnREZWZhdWx0KCkgfSkgOiBwcm9wcy5vbkNsaWNrO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHVzZUlucHV0UmVmRWxlbWVudFByb3BzKHVzZU1lcmdlZFByb3BzPElucHV0VHlwZT4ocDAsIHByb3BzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW3VzZUlMSW5wdXQsIHJvbGUsIGxhYmVsUG9zaXRpb24sIGRpc2FibGVkLCBjaGVja2VkLCB0YWdJbnB1dF0pO1xyXG5cclxuICAgIGNvbnN0IHVzZUNoZWNrYm94TGlrZUxhYmVsRWxlbWVudCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHVzZUNoZWNrYm94TGFiZWxFbGVtZW50KCkge1xyXG4gICAgICAgIGNvbnN0IHRhZyA9IHRhZ0xhYmVsO1xyXG4gICAgICAgIGNvbnN0IHsgdXNlTGFiZWxMYWJlbFByb3BzOiB1c2VJTExhYmVsUHJvcHMgfSA9IHVzZUlMTGFiZWwoKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdXNlQ2hlY2tib3hMaWtlTGFiZWxFbGVtZW50UHJvcHMoeyAuLi5wMCB9OiBoLkpTWC5IVE1MQXR0cmlidXRlczxMYWJlbFR5cGU+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGFiZWxUeXBlPiB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB1c2VQcmVzc1Byb3BzID0gdXNlUHJlc3M8TGFiZWxUeXBlPih7XHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrU3luYzogZGlzYWJsZWQgfHwgIWhhbmRsZXNJbnB1dCh0YWcsIGxhYmVsUG9zaXRpb24sIFwibGFiZWwtZWxlbWVudFwiKSA/IHVuZGVmaW5lZCA6IHN0YWJsZU9uSW5wdXQsXHJcbiAgICAgICAgICAgICAgICBleGNsdWRlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBoYXNGb2N1czogaGFzRm9jdXNMYWJlbFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc3QgbmV3UHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExhYmVsVHlwZT4gPSB1c2VQcmVzc1Byb3BzKHAwKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChsYWJlbFBvc2l0aW9uID09IFwid3JhcHBpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ld1Byb3BzLnRhYkluZGV4ID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3UHJvcHMudGFiSW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ld1Byb3BzLnJvbGUgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBuZXdQcm9wcy5yb2xlID0gcm9sZTtcclxuICAgICAgICAgICAgICAgIG5ld1Byb3BzW1wiYXJpYS1kaXNhYmxlZFwiXSA9IGRpc2FibGVkLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBuZXdQcm9wc1tcImFyaWEtY2hlY2tlZFwiXSA9IGNoZWNrZWQudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoZSBvbmUgY2FzZSB3aGVyZSB0aGVyZSdzIGFsbW9zdCBub3RoaW5nIHRvIGRvXHJcbiAgICAgICAgICAgICAgICAvLyBUaGUgbW9zdCBub3JtYWwgY2FzZSB3aGVyZSBldmVyeXRoaW5nIGFjdHMgYWNjb3JkaW5nIG5vcm1hbCBIVE1MIG1lY2hhbmljcy5cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEp1c3QgbWFrZSBzdXJlIHRoYXQgbGFiZWwgY2xpY2tzIGNhbid0IGFmZmVjdCB0aGUgY2hlY2tib3ggd2hpbGUgaXQncyBkaXNhYmxlZFxyXG4gICAgICAgICAgICBuZXdQcm9wcy5vbkNsaWNrID0gZGlzYWJsZWQgPyAoKGUpID0+IHsgZS5wcmV2ZW50RGVmYXVsdCgpIH0pIDogbmV3UHJvcHMub25DbGljaztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB1c2VJTExhYmVsUHJvcHModXNlTGFiZWxSZWZFbGVtZW50UHJvcHMobmV3UHJvcHMpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7IHVzZUNoZWNrYm94TGlrZUxhYmVsRWxlbWVudFByb3BzIH07XHJcblxyXG4gICAgfSwgW3VzZUlMTGFiZWwsIGRpc2FibGVkLCBjaGVja2VkLCByb2xlLCBsYWJlbFBvc2l0aW9uLCB0YWdMYWJlbF0pO1xyXG5cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVzZUNoZWNrYm94TGlrZUlucHV0RWxlbWVudCxcclxuICAgICAgICB1c2VDaGVja2JveExpa2VMYWJlbEVsZW1lbnQsXHJcbiAgICAgICAgY2hlY2tib3hMaWtlOiB7XHJcbiAgICAgICAgICAgIGdldExhYmVsRWxlbWVudCxcclxuICAgICAgICAgICAgZ2V0SW5wdXRFbGVtZW50LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGFiZWxcclxuICAgIH07XHJcblxyXG5cclxufVxyXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyByZXR1cm5GYWxzZSwgdXNlTGlzdE5hdmlnYXRpb24sIFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQYXJhbWV0ZXJzLCBVc2VMaXN0TmF2aWdhdGlvblBhcmFtZXRlcnMsIFVzZUxpc3ROYXZpZ2F0aW9uUmV0dXJuVHlwZUluZm8sIHVzZU1lcmdlZFByb3BzLCB1c2VQYXNzaXZlU3RhdGUsIFVzZVJvdmluZ1RhYkluZGV4Q2hpbGRSZXR1cm5UeXBlSW5mbywgdXNlU3RhYmxlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgU3RhdGVVcGRhdGVyLCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IENoZWNrYm94Q2hlY2tlZFR5cGUgfSBmcm9tIFwiLi91c2UtbGFiZWxcIjtcclxuaW1wb3J0IHsgZGVidWdMb2csIEVuaGFuY2VkRXZlbnQsIGVuaGFuY2VFdmVudCwgRXZlbnREZXRhaWwgfSBmcm9tIFwiLi9wcm9wc1wiO1xyXG5pbXBvcnQgeyBDaGVja2JveENoYW5nZUV2ZW50LCB1c2VDaGVja2JveCwgVXNlQ2hlY2tib3hQYXJhbWV0ZXJzLCBVc2VDaGVja2JveFJldHVyblR5cGVJbmZvIH0gZnJvbSBcIi4vdXNlLWNoZWNrYm94XCI7XHJcblxyXG5leHBvcnQgdHlwZSBDaGVja2JveEdyb3VwQ2hhbmdlRXZlbnQ8RSBleHRlbmRzIEV2ZW50VGFyZ2V0PiA9IEVuaGFuY2VkRXZlbnQ8RSwgRXZlbnQsIHsgY2hpbGRyZW5DaGVja2VkOiBib29sZWFuIHwgTWFwPG51bWJlciwgYm9vbGVhbiB8IFwibWl4ZWRcIj4gfT47XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZUNoZWNrYm94R3JvdXBQYXJhbWV0ZXJzIGV4dGVuZHMgVXNlTGlzdE5hdmlnYXRpb25QYXJhbWV0ZXJzPG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlcj4ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGlzIGNhbGxlZCB3aGVuZXZlciB0aGUgcGFyZW50IGNoZWNrYm94IGlzIGNoYW5nZWQgYW5kIGFuIHVwZGF0ZSBvZlxyXG4gICAgICogYWxsIHRoZSBjaGlsZHJlbiBuZWVkcyB0byBvY2N1ci5cclxuICAgICAqIFxyXG4gICAgICogYGV2ZW50W0V2ZW50RGV0YWlsXS5jaGlsZHJlbkNoZWNrZWRgIHdpbGwgYmUgXHJcbiAgICAgKiAqIHRydWUgd2hlbiBhbGwgY2hpbGRyZW4gbmVlZCB0byBiZWNvbWUgY2hlY2tlZFxyXG4gICAgICogKiBmYWxzZSB3aGVuIGFsbCBjaGlsZHJlbiBuZWVkIHRvIGJlY29tZSB1bmNoZWNrZWRcclxuICAgICAqICogQSBgTWFwPGluZGV4LGNoZWNrZWQ+YCBvZiBlYWNoIGNoaWxkJ3Mgc3RhdHVzIHdoZW4gcmV2ZXJ0aW5nIHRvIFwibWl4ZWRcIi5cclxuICAgICAqIFxyXG4gICAgICogQmVjYXVzZSB3ZSdyZSBkZWFsaW5nIHdpdGggY29udHJvbGxlZCBjb21wb25lbnRzIGhlcmUsIGFuZCB0aGUgZGF0YSBmb3JcclxuICAgICAqIHdoYXQgY2hlY2tib3hlcyBhcmUgY2hlY2tlZCBsaXZlICpvdXRzaWRlKiBvZiBhbnkgb2YgdGhlc2UgaG9va3MsXHJcbiAgICAgKiBpdCdzIHlvdSB3aG8ncyByZXNwb25zaWJsZSBmb3IgbGlzdGVuaW5nIGZvciB0aGlzIGV2ZW50LCBtb2RpZnlpbmcgdGhlXHJcbiAgICAgKiBkYXRhLCBhbmQgcmUtcmVuZGVyaW5nIGFwcHJvcHJpYXRlbHkuXHJcbiAgICAgKiBcclxuICAgICAqIEhpZ2hseSByZWNvbW1lbmRlZCB0bywgZm9yIGV4YW1wbGUsIGFkZCBlYWNoIGNoaWxkJ3MgYG9uSW5wdXRgIGV2ZW50IGhhbmRsZXJcclxuICAgICAqIGF2YWlsYWJsZSBpbiB0aGUgY2hpbGQgaW5mbyB0aGUgcGFyZW50IGdldHMgc28gaXQgY2FuIGNhbGwgdGhlIGhhbmRsZXJcclxuICAgICAqIHJlbW90ZWx5IGZyb20gYG1hbmFnZWRDaGVja2JveGVzYC5cclxuICAgICAqIEBwYXJhbSBldmVudCBcclxuICAgICAqL1xyXG4gICAgLy9jaGVja2JveEdyb3VwOiB7fVxyXG4gICAgLy9vblVwZGF0ZUNoaWxkcmVuKGV2ZW50OiBDaGVja2JveEdyb3VwQ2hhbmdlRXZlbnQ8aC5KU1guVGFyZ2V0ZWRFdmVudDxFPj4pOiB2b2lkO1xyXG59XHJcblxyXG4vL2V4cG9ydCBpbnRlcmZhY2UgVXNlQ2hlY2tib3hHcm91cENoaWxkSW5mb0Jhc2U8SyBleHRlbmRzIHN0cmluZz4gZXh0ZW5kcyBMaXN0TmF2aWdhdGlvbkNoaWxkSW5mb0Jhc2U8Sz4ge1xyXG4vKipcclxuICogVGhlIGlkIGF0dHJpYnV0ZSB1c2VkIGZvciB0aGUgY2hpbGQuXHJcbiAqL1xyXG4vL2lkOiBzdHJpbmc7XHJcblxyXG4vKipcclxuICogVGhlIGN1cnJlbnQgY2hlY2tlZCBzdGF0ZSBvZiB0aGlzIGNoaWxkLlxyXG4gKiBcclxuICogVGhpcyBpcyB1c2VkIGJ5IHRoZSBwYXJlbnQgd2hlbmV2ZXIgaXQncyBpbnRlcmFjdGVkIHdpdGggXHJcbiAqIGFuZCBhYm91dCB0byBmb3JjZSBldmVyeSBvbmUgdG8gYmUgc29tZXRoaW5nIGRpZmZlcmVudCAtLSBcclxuICogaXQgd2lsbCBzYXZlIHRoZSBzdGF0ZSBvZiBhbGwgY2hpbGQgY2hlY2tib3hlcyBmb3IgbGF0ZXJcclxuICogYnkgYXNraW5nIGVhY2ggb25lIHdoYXQgaXRzIGN1cnJlbnQgc3RhdGUgaXMgaW5kaXZpZHVhbGx5XHJcbiAqIGF0IHRoYXQgbW9tZW50LlxyXG4gKiBcclxuICogQWxsIHRoZSBjaGVja2JveCdzIHN0YXRlcyBhcmUgY2FwdHVyZWQgd2hlbiB0aGUgcGFyZW50XHJcbiAqIGlzIGluIHRoZSBcIm1peGVkXCIgc3RhdGUgYW5kIGlzIGNsaWNrZWQuIEl0IGtlZXBzIHRoZW1cclxuICogdGhhdCB3YXkgdW50aWwgdGhlIHNhbWUgY29uZGl0aW9ucyBhcmlzZSBhZ2Fpbi5cclxuICovXHJcbi8vICAgIGdldExhc3RVc2VyQ2hlY2tlZCgpOiBib29sZWFuIHwgXCJtaXhlZFwiO1xyXG4vLyAgICBvbklucHV0OiBVc2VDaGVja2JveFBhcmFtZXRlcnM8YW55LCBhbnk+W1wib25JbnB1dFwiXTtcclxuLy99XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENCRyB7XHJcbiAgICBjaGVja2VkOiBib29sZWFuIHwgXCJtaXhlZFwiO1xyXG4gICAgZ2V0TGFzdFVzZXJDaGVja2VkKCk6IGJvb2xlYW4gfCBcIm1peGVkXCI7XHJcbiAgICBvbkNoZWNrZWRDaGFuZ2U6IFVzZUNoZWNrYm94UGFyYW1ldGVyczxhbnksIGFueT5bXCJjaGVja2JveFwiXVtcIm9uQ2hlY2tlZENoYW5nZVwiXTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlQ2hlY2tib3hHcm91cENoaWxkUGFyYW1ldGVyczxJbnB1dEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiB7XHJcbiAgICBhc0NoZWNrYm94OiBVc2VDaGVja2JveFBhcmFtZXRlcnM8SW5wdXRFbGVtZW50LCBMYWJlbEVsZW1lbnQ+O1xyXG4gICAgYXNDaGVja2JveEdyb3VwQ2hpbGQ6IHtcclxuICAgICAgICBtYW5hZ2VkQ2hpbGQ6IFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQYXJhbWV0ZXJzPENCRywgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyPltcIm1hbmFnZWRDaGlsZFwiXTtcclxuICAgICAgICBsaXN0TmF2aWdhdGlvbjogT21pdDxVc2VMaXN0TmF2aWdhdGlvbkNoaWxkUGFyYW1ldGVyczxDQkcsIG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlcj5bXCJsaXN0TmF2aWdhdGlvblwiXSwgXCJzdWJJbmZvXCI+O1xyXG4gICAgICAgIHJvdmluZ1RhYkluZGV4OiBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkUGFyYW1ldGVyczxDQkcsIG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlcj5bXCJyb3ZpbmdUYWJJbmRleFwiXTtcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlQ2hlY2tib3hHcm91cENoaWxkUmV0dXJuVHlwZUluZm88SW5wdXRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTGFiZWxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VDaGVja2JveFJldHVyblR5cGVJbmZvPElucHV0RWxlbWVudCwgTGFiZWxFbGVtZW50PiwgVXNlUm92aW5nVGFiSW5kZXhDaGlsZFJldHVyblR5cGVJbmZvPElucHV0RWxlbWVudD4ge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VDaGVja2JveEdyb3VwQ2hpbGRSZXR1cm5UeXBlV2l0aEhvb2tzPElucHV0RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIExhYmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlQ2hlY2tib3hHcm91cENoaWxkUmV0dXJuVHlwZUluZm88SW5wdXRFbGVtZW50LCBMYWJlbEVsZW1lbnQ+IHtcclxuICAgIHVzZUNoZWNrYm94R3JvdXBDaGlsZElucHV0UHJvcHM6ICh7IHRhYkluZGV4LCAuLi5wcm9wcyB9OiBoLkpTWC5IVE1MQXR0cmlidXRlczxJbnB1dEVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxJbnB1dEVsZW1lbnQ+O1xyXG4gICAgdXNlQ2hlY2tib3hHcm91cENoaWxkTGFiZWxQcm9wczogKHsgdGFiSW5kZXgsIC4uLnByb3BzIH06IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExhYmVsRWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExhYmVsRWxlbWVudD47XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFVzZUNoZWNrYm94R3JvdXBDaGlsZDxJbnB1dEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiA9IChhcmdzOiBVc2VDaGVja2JveEdyb3VwQ2hpbGRQYXJhbWV0ZXJzPElucHV0RWxlbWVudCwgTGFiZWxFbGVtZW50PikgPT4gVXNlQ2hlY2tib3hHcm91cENoaWxkUmV0dXJuVHlwZVdpdGhIb29rczxJbnB1dEVsZW1lbnQsIExhYmVsRWxlbWVudD4gLyp7XHJcbiAgICAvL3RhYmJhYmxlOiBib29sZWFuIHwgbnVsbDtcclxuICAgIGNoZWNrYm94TGlrZTogVXNlQ2hlY2tib3hSZXR1cm5UeXBlPElucHV0RWxlbWVudCwgTGFiZWxFbGVtZW50PltcImNoZWNrYm94TGlrZVwiXTtcclxuICAgIGxhYmVsOiBVc2VDaGVja2JveFJldHVyblR5cGU8SW5wdXRFbGVtZW50LCBMYWJlbEVsZW1lbnQ+W1wibGFiZWxcIl07XHJcbiAgICByb3ZpbmdUYWJJbmRleDogVXNlTGlzdE5hdmlnYXRpb25DaGlsZFJldHVyblR5cGU8SW5wdXRFbGVtZW50PltcInJvdmluZ1RhYkluZGV4XCJdO1xyXG4gICAgdXNlQ2hlY2tib3hHcm91cENoaWxkSW5wdXRQcm9wczogKHsgdGFiSW5kZXgsIC4uLnByb3BzIH06IGguSlNYLkhUTUxBdHRyaWJ1dGVzPElucHV0RWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPElucHV0RWxlbWVudD47XHJcbiAgICB1c2VDaGVja2JveEdyb3VwQ2hpbGRMYWJlbFByb3BzOiAoeyB0YWJJbmRleCwgLi4ucHJvcHMgfTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGFiZWxFbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGFiZWxFbGVtZW50PjtcclxufSovXHJcblxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlQ2hlY2tib3hHcm91cFJldHVyblR5cGVJbmZvPElucHV0RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIF9MYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZUxpc3ROYXZpZ2F0aW9uUmV0dXJuVHlwZUluZm88SW5wdXRFbGVtZW50LCBDQkcsIG5ldmVyPiB7XHJcbiAgICBjaGVja2JveEdyb3VwOiB7XHJcbiAgICAgICAgcGFyZW50SXNDaGVja2VkOiBib29sZWFuIHwgXCJtaXhlZFwiO1xyXG4gICAgICAgIHBhcmVudFBlcmNlbnRDaGVja2VkOiBudW1iZXI7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZUNoZWNrYm94R3JvdXBSZXR1cm5UeXBlV2l0aEhvb2tzPElucHV0RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIExhYmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlQ2hlY2tib3hHcm91cFJldHVyblR5cGVJbmZvPElucHV0RWxlbWVudCwgTGFiZWxFbGVtZW50PiB7XHJcbiAgICAvKiogKipTVEFCTEUgKiogKi9cclxuICAgIC8vY2hlY2tib3hlczogTWFuYWdlZENoaWxkcmVuPEk+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBFYWNoIGNoaWxkIGNoZWNrYm94IG11c3QgY2FsbCB0aGlzIGhvb2ssICppbiBhZGRpdGlvbiB0byogYHVzZUNoZWNrYm94YFxyXG4gICAgICovXHJcbiAgICB1c2VDaGVja2JveEdyb3VwQ2hpbGQ6IFVzZUNoZWNrYm94R3JvdXBDaGlsZDxJbnB1dEVsZW1lbnQsIExhYmVsRWxlbWVudD47XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBwYXJlbnQgY2hlY2tib3ggbXVzdCB1c2UgdGhpcyBob29rXHJcbiAgICAgKiBcclxuICAgICAqICoqTm90YWJseSB1bnN0YWJsZSEqKiBiZWNhdXNlIGl0IHJlbGllcyBvbiBgYXJpYUNvbnRyb2xzYCwgcG9wdWxhdGVkIGJ5IGFsbCBjaGlsZCBjaGVja2JveGVzXHJcbiAgICAgKi9cclxuICAgIHVzZUNoZWNrYm94R3JvdXBQYXJlbnRJbnB1dDogVXNlQ2hlY2tib3hHcm91cFBhcmVudDxJbnB1dEVsZW1lbnQsIExhYmVsRWxlbWVudD47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlQ2hlY2tib3hHcm91cFBhcmVudFBhcmFtZXRlcnM8SW5wdXRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTGFiZWxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4ge1xyXG4gICAgY2hlY2tib3g6IE9taXQ8VXNlQ2hlY2tib3hQYXJhbWV0ZXJzPElucHV0RWxlbWVudCwgTGFiZWxFbGVtZW50PltcImNoZWNrYm94XCJdLCBcIm9uQ2hlY2tlZENoYW5nZVwiPjtcclxuICAgIGxhYmVsOiBVc2VDaGVja2JveFBhcmFtZXRlcnM8SW5wdXRFbGVtZW50LCBMYWJlbEVsZW1lbnQ+W1wibGFiZWxcIl07XHJcbiAgICBoYXNGb2N1c0xhYmVsOiBVc2VDaGVja2JveFBhcmFtZXRlcnM8SW5wdXRFbGVtZW50LCBMYWJlbEVsZW1lbnQ+W1wiaGFzRm9jdXNMYWJlbFwiXTtcclxuICAgIGhhc0ZvY3VzSW5wdXQ6IFVzZUNoZWNrYm94UGFyYW1ldGVyczxJbnB1dEVsZW1lbnQsIExhYmVsRWxlbWVudD5bXCJoYXNGb2N1c0lucHV0XCJdO1xyXG4gICAgY2hlY2tib3hMaWtlOiBPbWl0PFVzZUNoZWNrYm94UGFyYW1ldGVyczxJbnB1dEVsZW1lbnQsIExhYmVsRWxlbWVudD5bXCJjaGVja2JveExpa2VcIl0sIFwiY2hlY2tlZFwiPjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgVXNlQ2hlY2tib3hHcm91cFBhcmVudDxJbnB1dEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiA9IChhOiBVc2VDaGVja2JveEdyb3VwUGFyZW50UGFyYW1ldGVyczxJbnB1dEVsZW1lbnQsIExhYmVsRWxlbWVudD4pID0+IHtcclxuICAgIHVzZUNoZWNrYm94R3JvdXBQYXJlbnRJbnB1dFByb3BzOiAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPElucHV0RWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPElucHV0RWxlbWVudD47XHJcbiAgICB1c2VDaGVja2JveEdyb3VwUGFyZW50TGFiZWxQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxMYWJlbEVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxMYWJlbEVsZW1lbnQ+O1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBcclxuICogXHJcbiAqIEBwYXJhbSBwYXJhbTAgXHJcbiAqIEByZXR1cm5zIFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNoZWNrYm94R3JvdXA8SW5wdXRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTGFiZWxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4oeyBsaW5lYXJOYXZpZ2F0aW9uLCBsaXN0TmF2aWdhdGlvbiwgbWFuYWdlZENoaWxkcmVuLCByb3ZpbmdUYWJJbmRleCwgdHlwZWFoZWFkTmF2aWdhdGlvbiB9OiBVc2VDaGVja2JveEdyb3VwUGFyYW1ldGVycyk6IFVzZUNoZWNrYm94R3JvdXBSZXR1cm5UeXBlV2l0aEhvb2tzPElucHV0RWxlbWVudCwgTGFiZWxFbGVtZW50PiB7XHJcbiAgICBkZWJ1Z0xvZyhcInVzZUNoZWNrYm94R3JvdXBcIik7XHJcbiAgICAvL2NvbnN0IG9uVXBkYXRlQ2hpbGRyZW4gPSB1c2VTdGFibGVDYWxsYmFjayhvblVwZGF0ZUNoaWxkcmVuVW5zdGFibGUgPz8gKCgpID0+IHt9KSk7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgICAgdXNlTGlzdE5hdmlnYXRpb25DaGlsZCxcclxuICAgICAgICB1c2VMaXN0TmF2aWdhdGlvblByb3BzLFxyXG4gICAgICAgIC4uLmxpc3RSZXR1cm5UeXBlXHJcbiAgICB9ID0gdXNlTGlzdE5hdmlnYXRpb248SW5wdXRFbGVtZW50LCBJbnB1dEVsZW1lbnQsIENCRywgbmV2ZXI+KHtcclxuICAgICAgICBsaW5lYXJOYXZpZ2F0aW9uLFxyXG4gICAgICAgIGxpc3ROYXZpZ2F0aW9uLFxyXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbixcclxuICAgICAgICByb3ZpbmdUYWJJbmRleCxcclxuICAgICAgICB0eXBlYWhlYWROYXZpZ2F0aW9uXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB7IG1hbmFnZWRDaGlsZHJlbjogeyBjaGlsZHJlbiB9IH0gPSBsaXN0UmV0dXJuVHlwZTtcclxuXHJcbiAgICAvL2NvbnN0IFt1bmNoZWNrZWRDb3VudCwgc2V0VW5oZWNrZWRDb3VudF0gPSB1c2VTdGF0ZSgwKTtcclxuXHJcblxyXG4gICAgLy8gS2VlcCB0cmFjayBvZiBhbGwgY2hpbGQgSURzLCBhbmQgYW55IHRpbWUgYW55IG9mIHRoZW0gY2hhbmdlLCBcclxuICAgIC8vIGdlbmVyYXRlIGEgbmV3IHN0cmluZyB3aXRoIGFsbCBvZiB0aGVtIGNvbmNhdGVuYXRlZCB0b2dldGhlclxyXG4gICAgLy8gKGJ1dCBvbmx5IG9uY2UgcGVyIHJlbmRlcik7XHJcbiAgICBjb25zdCBhbGxJZHMgPSB1c2VSZWYobmV3IFNldDxzdHJpbmc+KCkpO1xyXG4gICAgY29uc3QgW2FyaWFDb250cm9scywgc2V0Q29udHJvbHNdID0gdXNlU3RhdGUoXCJcIik7XHJcbiAgICBjb25zdCBbdXBkYXRlSW5kZXgsIHNldElkVXBkYXRlSW5kZXhdID0gdXNlU3RhdGUoMCk7XHJcblxyXG5cclxuICAgIGNvbnN0IFtjaGVja2VkQ291bnQsIHNldENoZWNrZWRDb3VudF0gPSB1c2VTdGF0ZSgwKTtcclxuICAgIGNvbnN0IGNoZWNrZWRJbmRpY2VzID0gdXNlUmVmKG5ldyBTZXQ8bnVtYmVyPigpKTtcclxuICAgIC8vY29uc3QgW3NlbGZJc0NoZWNrZWQsIHNldFNlbGZJc0NoZWNrZWQsIGdldFNlbGZJc0NoZWNrZWRdID0gdXNlU3RhdGU8Ym9vbGVhbiB8IFwibWl4ZWRcIj4oZmFsc2UpO1xyXG5cclxuICAgIGNvbnN0IGdldFNlbGZJc0NoZWNrZWRVbnN0YWJsZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gY2hlY2tlZENvdW50IC8gKGNoaWxkcmVuLmdldEhpZ2hlc3RJbmRleCgpICsgMSk7XHJcbiAgICAgICAgcmV0dXJuIHBlcmNlbnRhZ2UgPD0gMCA/IGZhbHNlIDogcGVyY2VudGFnZSA+PSAxID8gdHJ1ZSA6IFwibWl4ZWRcIjtcclxuICAgIH0sIFtjaGVja2VkQ291bnRdKTtcclxuXHJcbiAgICBjb25zdCBnZXRTZWxmSXNDaGVja2VkU3RhYmxlID0gdXNlU3RhYmxlQ2FsbGJhY2soZ2V0U2VsZklzQ2hlY2tlZFVuc3RhYmxlKTtcclxuICAgIGNvbnN0IFtzZXRQYXJlbnRDaGVja2JveENoZWNrZWQsIHNldFNldFBhcmVudENoZWNrYm94Q2hlY2tlZF0gPSB1c2VTdGF0ZTxTdGF0ZVVwZGF0ZXI8Q2hlY2tib3hDaGVja2VkVHlwZT4gfCBudWxsPihudWxsKTtcclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgc2V0UGFyZW50Q2hlY2tib3hDaGVja2VkPy4oY2hlY2tlZENvdW50ID09IDAgPyBmYWxzZSA6IGNoZWNrZWRDb3VudCA9PSAoY2hpbGRyZW4uZ2V0SGlnaGVzdEluZGV4KCkgKyAxKSA/IHRydWUgOiBcIm1peGVkXCIpO1xyXG4gICAgfSwgW3NldFBhcmVudENoZWNrYm94Q2hlY2tlZCwgY2hlY2tlZENvdW50XSlcclxuXHJcbiAgICAvLyBJZiB0aGUgdXNlciBoYXMgY2hhbmdlZCB0aGUgcGFyZW50IGNoZWNrYm94J3MgdmFsdWUsIHRoZW4gdGhpcyByZWYgaG9sZHMgYSBtZW1vcnkgb2Ygd2hhdCB2YWx1ZXMgd2VyZSBoZWxkIGJlZm9yZS5cclxuICAgIC8vIE90aGVyd2lzZSwgaXQncyBudWxsIHdoZW4gdGhlIGxhc3QgaW5wdXQgd2FzIGZyb20gYSBjaGlsZCBjaGVja2JveC4gXHJcbiAgICAvL2NvbnN0IHNhdmVkQ2hlY2tlZFZhbHVlcyA9IHVzZVJlZjxNYXA8bnVtYmVyLCBib29sZWFuIHwgXCJtaXhlZFwiPiB8IG51bGw+KG51bGwpO1xyXG4gICAgY29uc3QgdXNlQ2hlY2tib3hHcm91cFBhcmVudElucHV0ID0gdXNlQ2FsbGJhY2s8VXNlQ2hlY2tib3hHcm91cFBhcmVudDxJbnB1dEVsZW1lbnQsIExhYmVsRWxlbWVudD4+KCh7IGNoZWNrYm94LCBjaGVja2JveExpa2UsIGxhYmVsLCBoYXNGb2N1c0xhYmVsLCBoYXNGb2N1c0lucHV0IH0pID0+IHtcclxuICAgICAgICBkZWJ1Z0xvZyhcInVzZUNoZWNrYm94R3JvdXBQYXJlbnRcIik7XHJcbiAgICAgICAgY29uc3QgeyAuLi5fdm9pZCB9ID0gY2hlY2tib3g7XHJcbiAgICAgICAgY29uc3QgeyBkaXNhYmxlZCwgbGFiZWxQb3NpdGlvbiwgIC4uLl92b2lkMiB9ID0gY2hlY2tib3hMaWtlO1xyXG4gICAgICAgIGNvbnN0IHsgdGFnSW5wdXQsIHRhZ0xhYmVsLCAgLi4uX3ZvaWQzIH0gPSBsYWJlbDtcclxuXHJcbiAgICAgICAgY29uc3QgW2NoZWNrZWQsIHNldENoZWNrZWRdID0gdXNlU3RhdGU8Q2hlY2tib3hDaGVja2VkVHlwZT4oZmFsc2UpO1xyXG4gICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHNldFNldFBhcmVudENoZWNrYm94Q2hlY2tlZCgoKSA9PiBzZXRDaGVja2VkKTtcclxuICAgICAgICB9LCBbXSlcclxuICAgICAgICBjb25zdCB7IHVzZUNoZWNrYm94SW5wdXRFbGVtZW50LCB1c2VDaGVja2JveExhYmVsRWxlbWVudCB9ID0gdXNlQ2hlY2tib3g8SW5wdXRFbGVtZW50LCBMYWJlbEVsZW1lbnQ+KHsgY2hlY2tib3hMaWtlOiB7IGxhYmVsUG9zaXRpb24sIGNoZWNrZWQsIGRpc2FibGVkLCB9LCBsYWJlbDogeyB0YWdJbnB1dCwgdGFnTGFiZWwgfSwgY2hlY2tib3g6IHsgb25DaGVja2VkQ2hhbmdlOiBvbkNoZWNrYm94R3JvdXBQYXJlbnRJbnB1dDIgYXMgYW55LCB9LCBoYXNGb2N1c0lucHV0LCBoYXNGb2N1c0xhYmVsIH0pO1xyXG4gICAgICAgIGNvbnN0IHsgdXNlQ2hlY2tib3hJbnB1dEVsZW1lbnRQcm9wcyB9ID0gdXNlQ2hlY2tib3hJbnB1dEVsZW1lbnQoKTtcclxuICAgICAgICBjb25zdCB7IHVzZUNoZWNrYm94TGFiZWxFbGVtZW50UHJvcHMgfSA9IHVzZUNoZWNrYm94TGFiZWxFbGVtZW50KCk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXNlQ2hlY2tib3hHcm91cFBhcmVudElucHV0UHJvcHM6IGZ1bmN0aW9uIHVzZUNoZWNrYm94R3JvdXBQYXJlbnRJbnB1dFByb3BzKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxJbnB1dEVsZW1lbnQ+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8SW5wdXRFbGVtZW50PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXQgPSAodXNlTWVyZ2VkUHJvcHM8SW5wdXRFbGVtZW50Pih1c2VNZXJnZWRQcm9wczxJbnB1dEVsZW1lbnQ+KHt9LCB7IFwiYXJpYS1jb250cm9sc1wiOiBhcmlhQ29udHJvbHMsIG9uSW5wdXQ6IHRhZ0lucHV0ID09IFwiaW5wdXRcIiA/IChlID0+IGUucHJldmVudERlZmF1bHQoKSkgOiB1bmRlZmluZWQgfSBhcyBoLkpTWC5IVE1MQXR0cmlidXRlczxJbnB1dEVsZW1lbnQ+KSwgcHJvcHMpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1c2VDaGVja2JveElucHV0RWxlbWVudFByb3BzKGxhYmVsUG9zaXRpb24gPT0gXCJzZXBhcmF0ZVwiID8gcmV0IDogcHJvcHMpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1c2VDaGVja2JveEdyb3VwUGFyZW50TGFiZWxQcm9wczogZnVuY3Rpb24gdXNlQ2hlY2tib3hHcm91cFBhcmVudExhYmVsUHJvcHMocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExhYmVsRWxlbWVudD4pOiBoLkpTWC5IVE1MQXR0cmlidXRlczxMYWJlbEVsZW1lbnQ+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJldCA9ICh1c2VNZXJnZWRQcm9wczxMYWJlbEVsZW1lbnQ+KHVzZU1lcmdlZFByb3BzPExhYmVsRWxlbWVudD4oe30sIHsgXCJhcmlhLWNvbnRyb2xzXCI6IGFyaWFDb250cm9scyB9IGFzIGFueSkgYXMgYW55LCBwcm9wcykpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZUNoZWNrYm94TGFiZWxFbGVtZW50UHJvcHMobGFiZWxQb3NpdGlvbiA9PSBcIndyYXBwaW5nXCIgPyByZXQgOiBwcm9wcylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sIFthcmlhQ29udHJvbHNdKTtcclxuXHJcbiAgICBjb25zdCBvbkNoZWNrYm94R3JvdXBQYXJlbnRJbnB1dDIgPSB1c2VDYWxsYmFjaygoZTogQ2hlY2tib3hDaGFuZ2VFdmVudDxJbnB1dEVsZW1lbnQ+KSA9PiB7XHJcblxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2VsZklzQ2hlY2tlZCA9IGdldFNlbGZJc0NoZWNrZWRTdGFibGUoKTtcclxuICAgICAgICBjb25zdCBuZXh0Q2hlY2tlZCA9IChzZWxmSXNDaGVja2VkID09PSBmYWxzZSA/IFwibWl4ZWRcIiA6IHNlbGZJc0NoZWNrZWQgPT09IFwibWl4ZWRcIiA/IHRydWUgOiBmYWxzZSk7XHJcbiAgICAgICAgbGV0IHdpbGxDaGFuZ2VBbnkgPSBmYWxzZTtcclxuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHdpbGxDaGFuZ2VBbnkgfHw9IChjaGlsZC5zdWJJbmZvLnN1YkluZm8uc3ViSW5mby5jaGVja2VkICE9IGNoaWxkLnN1YkluZm8uc3ViSW5mby5zdWJJbmZvLmdldExhc3RVc2VyQ2hlY2tlZCgpKSk7XHJcbiAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XHJcbiAgICAgICAgICAgIGxldCBjaGVja2VkOiBib29sZWFuO1xyXG4gICAgICAgICAgICBpZiAobmV4dENoZWNrZWQgPT0gXCJtaXhlZFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAod2lsbENoYW5nZUFueSlcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkID0gKGNoaWxkLnN1YkluZm8uc3ViSW5mby5zdWJJbmZvLmdldExhc3RVc2VyQ2hlY2tlZCgpIGFzIGJvb2xlYW4pO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tlZCA9IG5leHRDaGVja2VkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNoaWxkLnN1YkluZm8uc3ViSW5mby5zdWJJbmZvLm9uQ2hlY2tlZENoYW5nZT8uKGVuaGFuY2VFdmVudChlLCB7IGNoZWNrZWQgfSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8qaWYgKHNlbGZJc0NoZWNrZWQgPT09IHRydWUgfHwgKHNlbGZJc0NoZWNrZWQgPT09IGZhbHNlICYmIHNhdmVkQ2hlY2tlZFZhbHVlcy5jdXJyZW50ID09IG51bGwpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvblVwZGF0ZUNoaWxkcmVuKGVuaGFuY2VFdmVudChlLCB7IGNoaWxkcmVuQ2hlY2tlZDogZmFsc2UgfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzZWxmSXNDaGVja2VkID09PSBcIm1peGVkXCIpIHtcclxuXHJcbiAgICAgICAgICAgIHNhdmVkQ2hlY2tlZFZhbHVlcy5jdXJyZW50ID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcclxuICAgICAgICAgICAgICAgIHNhdmVkQ2hlY2tlZFZhbHVlcy5jdXJyZW50IS5zZXQoY2hpbGQuaW5kZXgsIGNoaWxkLmdldExhc3RVc2VyQ2hlY2tlZCgpKTtcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBvblVwZGF0ZUNoaWxkcmVuKGVuaGFuY2VFdmVudChlLCB7IGNoaWxkcmVuQ2hlY2tlZDogdHJ1ZSB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gb25VcGRhdGVDaGlsZHJlbihlbmhhbmNlRXZlbnQoZSwgeyBjaGlsZHJlbkNoZWNrZWQ6IHNhdmVkQ2hlY2tlZFZhbHVlcy5jdXJyZW50ID8/IHRydWUgfSkpO1xyXG4gICAgICAgIH0qL1xyXG4gICAgfSwgW10pXHJcblxyXG4gICAgY29uc3Qgbm90aWZ5Q2hlY2tlZCA9IHVzZUNhbGxiYWNrKChpbmRleDogbnVtYmVyLCBjaGVja2VkOiBib29sZWFuIHwgXCJtaXhlZFwiKSA9PiB7XHJcbiAgICAgICAgaWYgKGNoZWNrZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgaWYgKCFjaGVja2VkSW5kaWNlcy5jdXJyZW50LmhhcyhpbmRleCkpIHtcclxuICAgICAgICAgICAgICAgIHNldENoZWNrZWRDb3VudChjID0+IChjICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgY2hlY2tlZEluZGljZXMuY3VycmVudC5hZGQoaW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoY2hlY2tlZEluZGljZXMuY3VycmVudC5oYXMoaW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRDaGVja2VkQ291bnQoYyA9PiAoYyAtIDEpKTtcclxuICAgICAgICAgICAgICAgIGNoZWNrZWRJbmRpY2VzLmN1cnJlbnQuZGVsZXRlKGluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICAvKnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgbGV0IHBlcmNlbnRhZ2UgPSBjaGVja2VkQ291bnQgLyBtYW5hZ2VkQ2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgIHNldFNlbGZJc0NoZWNrZWQocGVyY2VudGFnZSA8PSAwID8gZmFsc2UgOiBwZXJjZW50YWdlID49IDEgPyB0cnVlIDogXCJtaXhlZFwiKVxyXG4gICAgfSwgW3NldFNlbGZJc0NoZWNrZWQsIG1hbmFnZWRDaGlsZHJlbi5sZW5ndGgsIGNoZWNrZWRDb3VudF0pOyovXHJcblxyXG4gICAgLypjb25zdCB1c2VDaGVja2JveEdyb3VwUGFyZW50UHJvcHMgPSB1c2VDYWxsYmFjaygocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPElucHV0RWxlbWVudD4pID0+IHtcclxuICAgICAgICByZXR1cm4gXHJcbiAgICB9LCBbYXJpYUNvbnRyb2xzXSk7Ki9cclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHNldENvbnRyb2xzKEFycmF5LmZyb20oYWxsSWRzLmN1cnJlbnQpLmpvaW4oXCIgXCIpKTtcclxuICAgIH0sIFt1cGRhdGVJbmRleF0pXHJcblxyXG4gICAgY29uc3QgdXNlQ2hlY2tib3hHcm91cENoaWxkOiBVc2VDaGVja2JveEdyb3VwQ2hpbGQ8SW5wdXRFbGVtZW50LCBMYWJlbEVsZW1lbnQ+ID0gdXNlQ2FsbGJhY2s8VXNlQ2hlY2tib3hHcm91cENoaWxkPElucHV0RWxlbWVudCwgTGFiZWxFbGVtZW50Pj4oZnVuY3Rpb24gKHsgYXNDaGVja2JveCwgYXNDaGVja2JveEdyb3VwQ2hpbGQgfSkge1xyXG4gICAgICAgIGRlYnVnTG9nKFwidXNlQ2hlY2tib3hHcm91cENoaWxkXCIsIGFzQ2hlY2tib3hHcm91cENoaWxkLm1hbmFnZWRDaGlsZC5pbmRleCwgYXNDaGVja2JveC5jaGVja2JveExpa2UuY2hlY2tlZCk7XHJcbiAgICAgICAgY29uc3QgeyBjaGVja2JveDogeyBvbkNoZWNrZWRDaGFuZ2UgfSwgY2hlY2tib3hMaWtlOiB7IGNoZWNrZWQsIGRpc2FibGVkLCBsYWJlbFBvc2l0aW9uIH0sIGxhYmVsOiB7IHRhZ0lucHV0LCB0YWdMYWJlbCB9LCBoYXNGb2N1c0lucHV0LCBoYXNGb2N1c0xhYmVsIH0gPSBhc0NoZWNrYm94O1xyXG4gICAgICAgIGNvbnN0IHsgbWFuYWdlZENoaWxkOiB7IGluZGV4IH0gfSA9IGFzQ2hlY2tib3hHcm91cENoaWxkO1xyXG4gICAgICAgIC8vbGFiZWxQb3NpdGlvbiA/Pz0gXCJzZXBhcmF0ZVwiO1xyXG4gICAgICAgIGNvbnN0IFtnZXRMYXN0VXNlckNoZWNrZWQsIHNldExhc3RVc2VyQ2hlY2tlZF0gPSB1c2VQYXNzaXZlU3RhdGU8Ym9vbGVhbiB8IFwibWl4ZWRcIj4obnVsbCwgcmV0dXJuRmFsc2UpO1xyXG4gICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgICAgdXNlQ2hlY2tib3hJbnB1dEVsZW1lbnQsXHJcbiAgICAgICAgICAgIHVzZUNoZWNrYm94TGFiZWxFbGVtZW50LFxyXG4gICAgICAgICAgICAuLi5jaGVja2JveFJldHVyblR5cGVcclxuICAgICAgICB9ID0gdXNlQ2hlY2tib3g8SW5wdXRFbGVtZW50LCBMYWJlbEVsZW1lbnQ+KHtcclxuICAgICAgICAgICAgY2hlY2tib3g6IHtcclxuICAgICAgICAgICAgICAgIG9uQ2hlY2tlZENoYW5nZTogdXNlU3RhYmxlQ2FsbGJhY2s8Tm9uTnVsbGFibGU8dHlwZW9mIG9uQ2hlY2tlZENoYW5nZT4+KGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldExhc3RVc2VyQ2hlY2tlZChlW0V2ZW50RGV0YWlsXS5jaGVja2VkKTtcclxuICAgICAgICAgICAgICAgICAgICBvbkNoZWNrZWRDaGFuZ2U/LihlIGFzIGFueSk7XHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2hlY2tib3hMaWtlOiB7XHJcbiAgICAgICAgICAgICAgICBjaGVja2VkLFxyXG4gICAgICAgICAgICAgICAgbGFiZWxQb3NpdGlvbixcclxuICAgICAgICAgICAgICAgIGRpc2FibGVkLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsYWJlbDoge1xyXG4gICAgICAgICAgICAgICAgdGFnSW5wdXQsXHJcbiAgICAgICAgICAgICAgICB0YWdMYWJlbFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoYXNGb2N1c0lucHV0LFxyXG4gICAgICAgICAgICBoYXNGb2N1c0xhYmVsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgbGFiZWw6IHsgaW5wdXRJZCwgbGFiZWxJZCB9IH0gPSBjaGVja2JveFJldHVyblR5cGU7XHJcblxyXG4gICAgICAgIC8vY29uc3QgZ2V0Q2hlY2tlZCA9IHVzZVN0YWJsZUdldHRlcihjaGVja2VkKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29udHJvbHNJZCA9IChsYWJlbFBvc2l0aW9uID09IFwic2VwYXJhdGVcIiA/IGlucHV0SWQgOiBsYWJlbElkKSE7XHJcblxyXG4gICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGFsbElkcy5jdXJyZW50LmFkZChjb250cm9sc0lkKTtcclxuICAgICAgICAgICAgc2V0SWRVcGRhdGVJbmRleChpID0+ICsraSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYWxsSWRzLmN1cnJlbnQuZGVsZXRlKGNvbnRyb2xzSWQpO1xyXG4gICAgICAgICAgICAgICAgc2V0SWRVcGRhdGVJbmRleChpID0+ICsraSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBbY29udHJvbHNJZF0pO1xyXG5cclxuXHJcbiAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgbm90aWZ5Q2hlY2tlZChpbmRleCwgY2hlY2tlZCk7XHJcbiAgICAgICAgfSwgW2luZGV4LCBjaGVja2VkXSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgdXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzLCAuLi5saXN0TmF2aWdhdGlvblJldHVyblR5cGUgfSA9IHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGQoe1xyXG4gICAgICAgICAgICBzdWJJbmZvOiB7IGdldExhc3RVc2VyQ2hlY2tlZCwgb25DaGVja2VkQ2hhbmdlLCBjaGVja2VkIH0sXHJcbiAgICAgICAgICAgIGxpc3ROYXZpZ2F0aW9uOiB7IC4uLmFzQ2hlY2tib3hHcm91cENoaWxkLmxpc3ROYXZpZ2F0aW9uIH0sXHJcbiAgICAgICAgICAgIG1hbmFnZWRDaGlsZDogYXNDaGVja2JveEdyb3VwQ2hpbGQubWFuYWdlZENoaWxkLFxyXG4gICAgICAgICAgICByb3ZpbmdUYWJJbmRleDogYXNDaGVja2JveEdyb3VwQ2hpbGQucm92aW5nVGFiSW5kZXhcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY2hlY2tib3hMaWtlOiBjaGVja2JveFJldHVyblR5cGUuY2hlY2tib3hMaWtlLFxyXG4gICAgICAgICAgICBsYWJlbDogY2hlY2tib3hSZXR1cm5UeXBlLmxhYmVsLFxyXG4gICAgICAgICAgICByb3ZpbmdUYWJJbmRleDogbGlzdE5hdmlnYXRpb25SZXR1cm5UeXBlLnJvdmluZ1RhYkluZGV4LFxyXG4gICAgICAgICAgICB1c2VDaGVja2JveEdyb3VwQ2hpbGRJbnB1dFByb3BzOiAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPElucHV0RWxlbWVudD4pOiBoLkpTWC5IVE1MQXR0cmlidXRlczxJbnB1dEVsZW1lbnQ+ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdXNlQ2hlY2tib3hJbnB1dEVsZW1lbnRQcm9wcyB9ID0gdXNlQ2hlY2tib3hJbnB1dEVsZW1lbnQoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJldCA9IHVzZUNoZWNrYm94SW5wdXRFbGVtZW50UHJvcHMocHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmV0MiA9IHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQcm9wcyh1c2VMaXN0TmF2aWdhdGlvblByb3BzKHJldCkgYXMgaC5KU1guSFRNTEF0dHJpYnV0ZXM8SW5wdXRFbGVtZW50Pik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGxhYmVsUG9zaXRpb24gPT0gXCJzZXBhcmF0ZVwiID8gcmV0MiA6IHJldCkgYXMgaC5KU1guSFRNTEF0dHJpYnV0ZXM8SW5wdXRFbGVtZW50PjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdXNlQ2hlY2tib3hHcm91cENoaWxkTGFiZWxQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxMYWJlbEVsZW1lbnQ+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGFiZWxFbGVtZW50PiA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHVzZUNoZWNrYm94TGFiZWxFbGVtZW50UHJvcHMgfSA9IHVzZUNoZWNrYm94TGFiZWxFbGVtZW50KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXQgPSB1c2VDaGVja2JveExhYmVsRWxlbWVudFByb3BzKHByb3BzKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJldDIgPSB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkUHJvcHModXNlTGlzdE5hdmlnYXRpb25Qcm9wcyhyZXQgYXMgYW55KSBhcyBhbnkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChsYWJlbFBvc2l0aW9uID09IFwid3JhcHBpbmdcIiA/IHJldDIgOiByZXQpIGFzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPExhYmVsRWxlbWVudD47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVzZUNoZWNrYm94R3JvdXBDaGlsZCxcclxuICAgICAgICB1c2VDaGVja2JveEdyb3VwUGFyZW50SW5wdXQsXHJcbiAgICAgICAgbGluZWFyTmF2aWdhdGlvbjogbGlzdFJldHVyblR5cGUubGluZWFyTmF2aWdhdGlvbixcclxuICAgICAgICBsaXN0TmF2aWdhdGlvbjogbGlzdFJldHVyblR5cGUubGlzdE5hdmlnYXRpb24sXHJcbiAgICAgICAgbWFuYWdlZENoaWxkcmVuOiBsaXN0UmV0dXJuVHlwZS5tYW5hZ2VkQ2hpbGRyZW4sXHJcbiAgICAgICAgcm92aW5nVGFiSW5kZXg6IGxpc3RSZXR1cm5UeXBlLnJvdmluZ1RhYkluZGV4LFxyXG4gICAgICAgIHR5cGVhaGVhZE5hdmlnYXRpb246IGxpc3RSZXR1cm5UeXBlLnR5cGVhaGVhZE5hdmlnYXRpb24sXHJcbiAgICAgICAgY2hlY2tib3hHcm91cDoge1xyXG4gICAgICAgICAgICBwYXJlbnRJc0NoZWNrZWQ6IGdldFNlbGZJc0NoZWNrZWRVbnN0YWJsZSgpIGFzIGJvb2xlYW4gfCBcIm1peGVkXCIsXHJcbiAgICAgICAgICAgIHBhcmVudFBlcmNlbnRDaGVja2VkOiAoY2hlY2tlZENvdW50IC8gKGNoaWxkcmVuLmdldEhpZ2hlc3RJbmRleCgpICsgMSkpLFxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuIiwiXHJcbmltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZUFjdGl2ZUVsZW1lbnQsIFVzZUFjdGl2ZUVsZW1lbnRQYXJhbWV0ZXJzLCB1c2VGb2N1c1RyYXAsIHVzZU1lcmdlZFByb3BzLCB1c2VQYXNzaXZlU3RhdGUsIHVzZVJhbmRvbUlkLCB1c2VSZWZFbGVtZW50LCB1c2VTdGFibGVDYWxsYmFjaywgdXNlU3RhYmxlR2V0dGVyIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuXHJcbmludGVyZmFjZSBTRFAge1xyXG4gICAgLyoqXHJcbiAgICAgKiBNdXN0IGJlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFsbCBlbGVtZW50cyB0aGF0IGNvdW50IGFzIFwid2l0aGluXCIgdGhpcyBjb21wb25lbnQuXHJcbiAgICAgKiBcclxuICAgICAqIFVzdWFsbHkganVzdCBhIHNpbmdsZSBlbGVtZW50LCBidXQgZS5nLiBhIE1lbnUgKyBNZW51QnV0dG9uIGNvdWxkIGhhdmUgdHdvLlxyXG4gICAgICovXHJcbiAgICBnZXRFbGVtZW50czogKCkgPT4gRWxlbWVudCB8IChFbGVtZW50IHwgbnVsbClbXSB8IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGRpc21pc3NlZFxyXG4gICAgICovXHJcbiAgICBvbkNsb3NlKHJlYXNvbjogXCJiYWNrZHJvcFwiIHwgXCJlc2NhcGVcIiB8IFwibG9zdC1mb2N1c1wiKTogdm9pZDtcclxuXHJcbiAgICBvcGVuOiBib29sZWFuO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgTVAge1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIHRydWUsIHRoZSBib2R5IGVsZW1lbnQgcHJvdmlkZWQgY29udGFpbnMgcHVyZWx5IHNlbWFudGljIGNvbnRlbnRcclxuICAgICAqIHRoYXQgY2FuIGJlIHJlYWQgb3V0IGJ5IGEgc2NyZWVuIHJlYWRlciBpbiBvbmUgbG9uZywgdW5pbnRlcnJ1cHRlZCBzdHJldGNoLlxyXG4gICAgICogXHJcbiAgICAgKiBUaGlzIHNob3VsZCBiZSBmYWxzZSBpZiB0aGUgbW9kYWwgY29udGFpbnMsIGZvciBleGFtcGxlLCBhIGxpc3Qgb3Igb3RoZXJcclxuICAgICAqIGludGVyYWN0aXZlIHdpZGdldHMsIGFuZCB0cnVlIGlmIGl0J3MgbW9zdGx5IHNob3J0LWZvcm0gdGV4dCBjb250ZW50LlxyXG4gICAgICogXHJcbiAgICAgKiBUaGUgZGVmYXVsdCBpcyBmYWxzZSB0byBiZSBvbiB0aGUgc2FmZSBzaWRlLCBidXQgdGhpcyBzaG91bGQgYmUgdHJ1ZSB3aGVuZXZlciByZWFzb25hYmxlLlxyXG4gICAgICovXHJcbiAgICBib2R5SXNPbmx5U2VtYW50aWM/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2hlbiBhbnkgbW9kYWwgZGlhbG9nIG9wZW5zLCBpdCBtdXN0IHNlbmQgZm9jdXMgdG8gdGhhdCBkaWFsb2csIGlkZWFsbHkgd2hpY2hldmVyIGVsZW1lbnQgbWFrZXMgdGhlIG1vc3Qgc2Vuc2UgaW4gY29udGV4dC5cclxuICAgICAqIFxyXG4gICAgICogRm9yIGV4YW1wbGUsIGlmIGl0J3MgYSBjb25maXJtYXRpb24gZGlhbG9nIGFib3V0IGRlbGV0aW5nIHNvbWV0aGluZywgaXQncyBiZXN0IHRvIHNlbmQgZm9jdXMgdG8gdGhlIFwiY2FuY2VsXCIgYnV0dG9uLlxyXG4gICAgICogXHJcbiAgICAgKiBJbiBvdGhlciBjYXNlcywgaXQgbWFrZXMgbW9yZSBzZW5zZSB0byBmb2N1cyB0aGUgZGlhbG9nJ3MgdGl0bGUsIGZpcnN0IGludGVyYWN0aXZlIGVsZW1lbnQsIGV0Yy5cclxuICAgICAqIFxyXG4gICAgICogQnkgZGVmYXVsdCwgd2UgdHJ5IHRvIHBpY2sgYSBzZW5zaWJsZSBkZWZhdWx0IC0tIGlmIHRoZSBkaWFsb2cgY29udGFpbnMgb25seSBkZXNjcmlwdGl2ZSBjb250ZW50LCB0aGVuIHdlIGZvY3VzIHRoZSBib2R5LiBPdGhlcndpc2Ugd2UgZm9jdXMgdGhlIHRpdGxlLlxyXG4gICAgICogXHJcbiAgICAgKiAqKlBMRUFTRSoqIGNvbnNpZGVyIG92ZXJyaWRpbmcgdGhpcyB0byBwcm92aWRlIHRoZSBiZXN0IGV4cGVyaWVuY2UgZm9yIHlvdXIgZGlhbG9nLiAgWW91IHNob3VsZG4ndCBoYXZlIHRoYXQgbWFueSBtb2RhbCBkaWFsb2dzIGFueXdheSAtLSB0YWtlIHRoYXQgYml0IG9mIGV4dHJhIHRpbWUgaWYgeW91IGNhbi5cclxuICAgICAqL1xyXG4gICAgZm9jdXNTZWxmPygpOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBTb2Z0RGlzbWlzc09taXRzID0ga2V5b2YgU0RQO1xyXG5leHBvcnQgdHlwZSBNb2RhbE9taXRzID0ga2V5b2YgTVA7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVNvZnREaXNtaXNzUGFyYW1ldGVyczxPbWl0cyBleHRlbmRzIFNvZnREaXNtaXNzT21pdHM+IHtcclxuICAgIHNvZnREaXNtaXNzOiBPbWl0PFNEUCwgT21pdHM+O1xyXG4gICAgYWN0aXZlRWxlbWVudDogVXNlQWN0aXZlRWxlbWVudFBhcmFtZXRlcnM7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlTW9kYWxQYXJhbWV0ZXJzPE1PIGV4dGVuZHMgTW9kYWxPbWl0cywgU0RPIGV4dGVuZHMgU29mdERpc21pc3NPbWl0cz4gZXh0ZW5kcyBVc2VTb2Z0RGlzbWlzc1BhcmFtZXRlcnM8U0RPIHwgXCJnZXRFbGVtZW50c1wiPiB7XHJcbiAgICBtb2RhbDogT21pdDxNUCwgTU8+O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVNvZnREaXNtaXNzUmV0dXJuVHlwZUluZm8ge1xyXG4gICAgc29mdERpc21pc3M6IHtcclxuICAgICAgICBvbkJhY2tkcm9wQ2xpY2s6IChlOiBoLkpTWC5UYXJnZXRlZEV2ZW50PGFueT4pID0+IHZvaWQ7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVNvZnREaXNtaXNzUmV0dXJuVHlwZVdpdGhIb29rczxUIGV4dGVuZHMgTm9kZT4gZXh0ZW5kcyBVc2VTb2Z0RGlzbWlzc1JldHVyblR5cGVJbmZvIHtcclxuICAgIC8qKiBUaGlzIGJhc2ljYWxseSBjYW4gYmUgYW55IGVsZW1lbnQgLS0gaXQncyBvbmx5IHVzZWQgdG8gZ2V0IHRoZSBvd25pbmcgd2luZG93L2RvY3VtZW50LiAqL1xyXG4gICAgdXNlU29mdERpc21pc3NQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxUPikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8VD47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciBhIG1vZGFsLWxpa2Ugc29mdC1kaXNtaXNzIGludGVyYWN0aW9uLlxyXG4gKiBcclxuICogVGhhdCBpcywgYW55IGNsaWNrcyBvciB0YXBzIG91dHNpZGUgb2YgdGhlIGdpdmVuIGNvbXBvbmVudCwgXHJcbiAqIG9yIGFueSB0aW1lIHRoZSBFc2NhcGUga2V5IGlzIHByZXNzZWQgd2l0aGluIHRoZSBjb21wb25lbnQsXHJcbiAqICh3aXRoIHZhcmlvdXMgYnJvd3NlciBvZGRpdGllcyByZWdhcmRpbmcgY2xpY2tzIG9uIGJsYW5rIG9yIGluZXJ0IGFyZWFzIGhhbmRsZWQpXHJcbiAqIHRoZSBjb21wb25lbnQgd2lsbCByZXF1ZXN0IHRvIGNsb3NlIGl0c2VsZi5cclxuICogXHJcbiAqIE9mIGNvdXJzZSwgaWYgeW91IGRvbid0IGRvIGFueXRoaW5nIGluIHRoZSBgb25DbG9zZWAgZnVuY3Rpb24sXHJcbiAqIGl0IHdvbid0IGJlIGEgc29mdCBkaXNtaXNzIGFueW1vcmUuXHJcbiAqIFxyXG4gKiBAcGFyYW0gcGFyYW0wIFxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VTb2Z0RGlzbWlzczxUIGV4dGVuZHMgTm9kZT4oeyBzb2Z0RGlzbWlzczogeyBvbkNsb3NlLCBnZXRFbGVtZW50cywgb3BlbiB9LCBhY3RpdmVFbGVtZW50OiB7IG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UsIC4uLmFjdGl2ZUVsZW1lbnQgfSB9OiBVc2VTb2Z0RGlzbWlzc1BhcmFtZXRlcnM8bmV2ZXI+KTogVXNlU29mdERpc21pc3NSZXR1cm5UeXBlV2l0aEhvb2tzPFQ+IHtcclxuXHJcbiAgICBjb25zdCBzdGFibGVPbkNsb3NlID0gdXNlU3RhYmxlQ2FsbGJhY2sob25DbG9zZSk7XHJcbiAgICBjb25zdCBzdGFibGVHZXRFbGVtZW50cyA9IHVzZVN0YWJsZUNhbGxiYWNrKGdldEVsZW1lbnRzKTtcclxuICAgIGNvbnN0IGdldE9wZW4gPSB1c2VTdGFibGVHZXR0ZXIob3Blbik7XHJcblxyXG4gICAgY29uc3QgeyBnZXREb2N1bWVudCB9ID0gYWN0aXZlRWxlbWVudFxyXG5cclxuICAgIGNvbnN0IG9uQmFja2Ryb3BDbGljayA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIG9uQmFja2Ryb3BDbGljayhlOiBoLkpTWC5UYXJnZXRlZEV2ZW50PGFueT4pIHtcclxuICAgICAgICBpZiAoIWdldE9wZW4oKSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XHJcblxyXG4gICAgICAgIC8vIEJhc2ljYWxseSwgXCJ3YXMgdGhpcyBldmVudCBmaXJlZCBvbiB0aGUgcm9vdC1tb3N0IGVsZW1lbnQsIG9yIGF0IGxlYXN0IGFuIGVsZW1lbnQgbm90IGNvbnRhaW5lZCBieSB0aGUgbW9kYWw/XCJcclxuICAgICAgICAvLyBFaXRoZXIgY291bGQgYmUgaG93IHRoZSBicm93c2VyIGhhbmRsZXMgdGhlc2Ugc29ydHMgb2YgXCJpbnRlcmFjdGluZyB3aXRoIG5vdGhpbmdcIiBldmVudHMuXHJcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09IGRvY3VtZW50Py5kb2N1bWVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgc3RhYmxlT25DbG9zZShcImJhY2tkcm9wXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGVsZW1lbnRzID0gc3RhYmxlR2V0RWxlbWVudHMoKTtcclxuXHJcbiAgICAgICAgaWYgKGVsZW1lbnRzICYmIGUudGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZWxlbWVudHMpKVxyXG4gICAgICAgICAgICAgICAgZWxlbWVudHMgPSBbZWxlbWVudHNdO1xyXG5cclxuICAgICAgICAgICAgbGV0IGZvdW5kSW5zaWRlQ2xpY2sgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5jb250YWlucyhlLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZEluc2lkZUNsaWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFmb3VuZEluc2lkZUNsaWNrKSB7XHJcbiAgICAgICAgICAgICAgICBvbkNsb3NlKFwiYmFja2Ryb3BcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LCBbXSlcclxuXHJcbiAgICBjb25zdCB7Li4uX3VudXNlZCB9ID0gdXNlQWN0aXZlRWxlbWVudCh7XHJcbiAgICAgICAgLi4uYWN0aXZlRWxlbWVudCxcclxuXHJcbiAgICAgICAgb25MYXN0QWN0aXZlRWxlbWVudENoYW5nZTogdXNlQ2FsbGJhY2soKG5ld0VsZW1lbnQ6IEVsZW1lbnQsIHByZXY6IEVsZW1lbnQgfCB1bmRlZmluZWQpID0+IHtcclxuICAgICAgICAgICAgb25MYXN0QWN0aXZlRWxlbWVudENoYW5nZT8uKG5ld0VsZW1lbnQsIHByZXYpO1xyXG4gICAgICAgICAgICBsZXQgdmFsaWRGb2N1c2FibGVFbGVtZW50cyA9IHN0YWJsZUdldEVsZW1lbnRzKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsaWRGb2N1c2FibGVFbGVtZW50cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbGlkRm9jdXNhYmxlRWxlbWVudHMpKVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkRm9jdXNhYmxlRWxlbWVudHMgPSBbdmFsaWRGb2N1c2FibGVFbGVtZW50c107XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBmb2N1c2FibGUgb2YgdmFsaWRGb2N1c2FibGVFbGVtZW50cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb2N1c2FibGU/LmNvbnRhaW5zKG5ld0VsZW1lbnQpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9uQ2xvc2UoXCJsb3N0LWZvY3VzXCIpO1xyXG4gICAgICAgIH0sIFtdKVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIGNvbnN0IHsgdXNlUmVmRWxlbWVudFByb3BzIH0gPSB1c2VSZWZFbGVtZW50PFQ+KHtcclxuICAgICAgICBvbkVsZW1lbnRDaGFuZ2U6IHVzZUNhbGxiYWNrKChlOiBUIHwgbnVsbCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkb2N1bWVudCA9IGU/Lm93bmVyRG9jdW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHdpbmRvdyA9IGRvY3VtZW50Py5kZWZhdWx0VmlldztcclxuXHJcbiAgICAgICAgICAgIC8vIFNpbmNlIGV2ZXJ5dGhpbmcgZWxzZSBpcyBpbmVydCwgd2UgbGlzdGVuIGZvciBjYXB0dXJlZCBjbGlja3Mgb24gdGhlIHdpbmRvd1xyXG4gICAgICAgICAgICAvLyAod2UgZG9uJ3QgdXNlIG9uQ2xpY2sgc2luY2UgdGhhdCBkb2Vzbid0IGZpcmUgd2hlbiBjbGlja2VkIG9uIGVtcHR5L2luZXJ0IGFyZWFzKVxyXG4gICAgICAgICAgICAvLyBOb3RlOiBXZSBuZWVkIGEgKnNlcGFyYXRlKiB0b3VjaCBldmVudCBvbiBtb2JpbGUgU2FmYXJpLCBiZWNhdXNlXHJcbiAgICAgICAgICAgIC8vIGl0IGRvZXNuJ3QgbGV0IGNsaWNrIGV2ZW50cyBidWJibGUgb3IgYmUgY2FwdHVyZWQgZnJvbSB0cmFkaXRpb25hbGx5IG5vbi1pbnRlcmFjdGl2ZSBlbGVtZW50cyxcclxuICAgICAgICAgICAgLy8gYnV0IHRvdWNoIGV2ZW50cyB3b3JrIGFzIGV4cGVjdGVkLlxyXG4gICAgICAgICAgICBjb25zdCBtb3VzZURvd24gPSAoZTogTW91c2VFdmVudCkgPT4geyBpZiAoZ2V0T3BlbigpKSBvbkJhY2tkcm9wQ2xpY2soZSk7IH07XHJcbiAgICAgICAgICAgIGNvbnN0IHRvdWNoU3RhcnQgPSAoZTogVG91Y2hFdmVudCkgPT4geyBpZiAoZ2V0T3BlbigpKSBvbkJhY2tkcm9wQ2xpY2soZSk7IH07XHJcbiAgICAgICAgICAgIGNvbnN0IGtleURvd24gPSAoZTogS2V5Ym9hcmRFdmVudCkgPT4geyBpZiAoZS5rZXkgPT09IFwiRXNjYXBlXCIpIHsgc3RhYmxlT25DbG9zZShcImVzY2FwZVwiKTsgfSB9O1xyXG5cclxuICAgICAgICAgICAgd2luZG93Py5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIG1vdXNlRG93biwgeyBjYXB0dXJlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICB3aW5kb3c/LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRvdWNoU3RhcnQsIHsgY2FwdHVyZTogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgd2luZG93Py5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBrZXlEb3duKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3c/LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgbW91c2VEb3duKTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdz8ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdG91Y2hTdGFydCk7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3c/LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGtleURvd24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgW10pXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVzZVNvZnREaXNtaXNzUHJvcHM6IHVzZUNhbGxiYWNrKChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8VD4pOiBoLkpTWC5IVE1MQXR0cmlidXRlczxUPiA9PiAodXNlUmVmRWxlbWVudFByb3BzKHByb3BzKSksIFtdKSxcclxuICAgICAgICBzb2Z0RGlzbWlzczoge1xyXG4gICAgICAgICAgICBvbkJhY2tkcm9wQ2xpY2ssXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZU1vZGFsUmV0dXJuVHlwZUluZm8gZXh0ZW5kcyBVc2VTb2Z0RGlzbWlzc1JldHVyblR5cGVJbmZvIHtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlTW9kYWxSZXR1cm5UeXBlV2l0aEhvb2tzPEZvY3VzQ29udGFpbmVyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIE1vZGFsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIFRpdGxlRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEJvZHlFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgQmFja2Ryb3BFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VNb2RhbFJldHVyblR5cGVJbmZvIHtcclxuICAgIHVzZU1vZGFsUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TW9kYWxFbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8TW9kYWxFbGVtZW50PjtcclxuICAgIHVzZU1vZGFsVGl0bGU6IFVzZU1vZGFsVGl0bGU8VGl0bGVFbGVtZW50PjtcclxuICAgIHVzZU1vZGFsQm9keTogVXNlTW9kYWxCb2R5PEJvZHlFbGVtZW50PlxyXG4gICAgdXNlTW9kYWxCYWNrZHJvcDogVXNlTW9kYWxCYWNrZHJvcDxCYWNrZHJvcEVsZW1lbnQ+O1xyXG4gICAgdXNlTW9kYWxGb2N1c0NvbnRhaW5lclByb3BzKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxGb2N1c0NvbnRhaW5lckVsZW1lbnQ+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8Rm9jdXNDb250YWluZXJFbGVtZW50PjtcclxuICAgIC8vc29mdERpc21pc3M6IE9taXQ8VXNlU29mdERpc21pc3NSZXR1cm5UeXBlPE1vZGFsRWxlbWVudD5bXCJzb2Z0RGlzbWlzc1wiXSwgXCJ1c2VTb2Z0RGlzbWlzc1Byb3BzXCI+O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBVc2VNb2RhbFRpdGxlPFRpdGxlRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+ID0gKCkgPT4geyB1c2VNb2RhbFRpdGxlUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8VGl0bGVFbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8VGl0bGVFbGVtZW50PjsgfTtcclxuZXhwb3J0IHR5cGUgVXNlTW9kYWxCb2R5PEJvZHlFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gPSAoKSA9PiB7IHVzZU1vZGFsQm9keVByb3BzOiAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEJvZHlFbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8Qm9keUVsZW1lbnQ+OyB9O1xyXG5leHBvcnQgdHlwZSBVc2VNb2RhbEJhY2tkcm9wPEJhY2tkcm9wRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+ID0gKCkgPT4geyB1c2VNb2RhbEJhY2tkcm9wUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8QmFja2Ryb3BFbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8QmFja2Ryb3BFbGVtZW50PjsgfTtcclxuXHJcbi8qKlxyXG4gKiBBIGdlbmVyaWMgbW9kYWwgaG9vaywgdXNlZCBieSBtb2RhbCBkaWFsb2dzLCBidXQgY2FuIGFsc29cclxuICogYmUgdXNlZCBieSBhbnl0aGluZyB0aGF0J3MgbW9kYWwgd2l0aCBhIGJhY2tkcm9wLlxyXG4gKiBAcGFyYW0gcGFyYW0wIFxyXG4gKiBAcmV0dXJucyBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VNb2RhbDxGb2N1c0NvbnRhaW5lckVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCwgTW9kYWxFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQsIFRpdGxlRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50LCBCb2R5RWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50LCBCYWNrZHJvcEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudD4oeyBtb2RhbDogeyBib2R5SXNPbmx5U2VtYW50aWM6IGRlc2NyaXB0aXZlLCBmb2N1c1NlbGYgfSwgc29mdERpc21pc3M6IHsgb25DbG9zZSwgb3BlbiB9LCBhY3RpdmVFbGVtZW50IH06IFVzZU1vZGFsUGFyYW1ldGVyczxuZXZlciwgbmV2ZXI+KTogVXNlTW9kYWxSZXR1cm5UeXBlV2l0aEhvb2tzPEZvY3VzQ29udGFpbmVyRWxlbWVudCwgTW9kYWxFbGVtZW50LCBUaXRsZUVsZW1lbnQsIEJvZHlFbGVtZW50LCBCYWNrZHJvcEVsZW1lbnQ+IHtcclxuXHJcbiAgICBjb25zdCB7IHVzZVJlZkVsZW1lbnRQcm9wczogdXNlVGl0bGVSZWZFbGVtZW50UHJvcHMsIGdldEVsZW1lbnQ6IGdldFRpdGxlRWxlbWVudCB9ID0gdXNlUmVmRWxlbWVudDxUaXRsZUVsZW1lbnQ+KHt9KTtcclxuICAgIGNvbnN0IHsgdXNlUmVmRWxlbWVudFByb3BzOiB1c2VCb2R5UmVmRWxlbWVudFByb3BzLCBnZXRFbGVtZW50OiBnZXRCb2R5RWxlbWVudCB9ID0gdXNlUmVmRWxlbWVudDxCb2R5RWxlbWVudD4oe30pO1xyXG4gICAgZm9jdXNTZWxmID8/PSAoKCkgPT4ge1xyXG4gICAgICAgIGlmIChkZXNjcmlwdGl2ZSkge1xyXG4gICAgICAgICAgICBnZXRCb2R5RWxlbWVudCgpPy5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB0aXRsZUVsZW1lbnQgPSBnZXRUaXRsZUVsZW1lbnQoKTtcclxuICAgICAgICAgICAgaWYgKHRpdGxlRWxlbWVudClcclxuICAgICAgICAgICAgICAgIHRpdGxlRWxlbWVudC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICAvL2NvbnN0IGVsZW1lbnRUb0ZvY3VzID0gZ2V0VGl0bGVFbGVtZW50KCkgPz8gZ2V0Qm9keUVsZW1lbnQoKVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBzdGFibGVPbkNsb3NlID0gdXNlU3RhYmxlQ2FsbGJhY2sob25DbG9zZSk7XHJcbiAgICBjb25zdCBzdGFibGVGb2N1c1NlbGYgPSB1c2VTdGFibGVDYWxsYmFjayhmb2N1c1NlbGYpO1xyXG5cclxuICAgIC8vY29uc3QgW21vZGFsRGVzY3JpYmVkQnlCb2R5LCBzZXRNb2RhbERlc2NyaWJlZEJ5Qm9keV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICB1c2VIaWRlU2Nyb2xsKG9wZW4pO1xyXG5cclxuICAgIGNvbnN0IHsgdXNlUmFuZG9tSWRTb3VyY2VFbGVtZW50OiB1c2VNb2RhbElkQXNTb3VyY2UsIHVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnQ6IHVzZU1vZGFsSWRBc1JlZmVyZW5jZXJFbGVtZW50IH0gPSB1c2VSYW5kb21JZDxNb2RhbEVsZW1lbnQ+KHsgcmFuZG9tSWQ6IHsgcHJlZml4OiBcImFyaWEtbW9kYWwtXCIgfSwgbWFuYWdlZENoaWxkcmVuOiB7IG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdDogbnVsbCwgb25DaGlsZHJlbk1vdW50Q2hhbmdlOiBudWxsIH0gfSk7XHJcbiAgICBjb25zdCB7IHVzZVJhbmRvbUlkU291cmNlRWxlbWVudDogdXNlQm9keUlkQXNTb3VyY2UsIHVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnQ6IHVzZUJvZHlJZFJlZmVyZW5jZXJFbGVtZW50IH0gPSB1c2VSYW5kb21JZDxCb2R5RWxlbWVudD4oeyByYW5kb21JZDogeyBwcmVmaXg6IFwiYXJpYS1tb2RhbC1ib2R5LVwiIH0sIG1hbmFnZWRDaGlsZHJlbjogeyBvbkFmdGVyQ2hpbGRMYXlvdXRFZmZlY3Q6IG51bGwsIG9uQ2hpbGRyZW5Nb3VudENoYW5nZTogbnVsbCB9IH0pO1xyXG4gICAgY29uc3QgeyB1c2VSYW5kb21JZFNvdXJjZUVsZW1lbnQ6IHVzZVRpdGxlSWRBc1NvdXJjZSwgdXNlUmFuZG9tSWRSZWZlcmVuY2VyRWxlbWVudDogdXNlVGl0bGVJZFJlZmVyZW5jZXJFbGVtZW50IH0gPSB1c2VSYW5kb21JZDxUaXRsZUVsZW1lbnQ+KHsgcmFuZG9tSWQ6IHsgcHJlZml4OiBcImFyaWEtbW9kYWwtdGl0bGUtXCIgfSwgbWFuYWdlZENoaWxkcmVuOiB7IG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdDogbnVsbCwgb25DaGlsZHJlbk1vdW50Q2hhbmdlOiBudWxsIH0gfSk7XHJcblxyXG5cclxuICAgIGNvbnN0IHsgdXNlUmVmRWxlbWVudFByb3BzOiB1c2VNb2RhbFJlZkVsZW1lbnQsIGdldEVsZW1lbnQ6IGdldE1vZGFsRWxlbWVudCB9ID0gdXNlUmVmRWxlbWVudDxNb2RhbEVsZW1lbnQ+KHt9KVxyXG4gICAgY29uc3QgeyBzb2Z0RGlzbWlzczogeyBvbkJhY2tkcm9wQ2xpY2sgfSwgdXNlU29mdERpc21pc3NQcm9wcyB9ID0gdXNlU29mdERpc21pc3M8TW9kYWxFbGVtZW50Pih7IHNvZnREaXNtaXNzOiB7IG9uQ2xvc2U6IHN0YWJsZU9uQ2xvc2UsIGdldEVsZW1lbnRzOiBnZXRNb2RhbEVsZW1lbnQsIG9wZW46ICEhb3BlbiB9LCBhY3RpdmVFbGVtZW50IH0pO1xyXG5cclxuICAgIGNvbnN0IHVzZU1vZGFsQmFja2Ryb3AgPSB1c2VDYWxsYmFjazxVc2VNb2RhbEJhY2tkcm9wPEJhY2tkcm9wRWxlbWVudD4+KGZ1bmN0aW9uIHVzZU1vZGFsQmFja2Ryb3AoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gdXNlTW9kYWxCYWNrZHJvcFByb3BzKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxCYWNrZHJvcEVsZW1lbnQ+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8QmFja2Ryb3BFbGVtZW50PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRQcm9wczxCYWNrZHJvcEVsZW1lbnQ+KHsgb25Qb2ludGVyVXA6IG9uQmFja2Ryb3BDbGljayB9LCBwcm9wcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4geyB1c2VNb2RhbEJhY2tkcm9wUHJvcHMgfVxyXG4gICAgfSwgW10pXHJcblxyXG4gICAgY29uc3QgdXNlTW9kYWxGb2N1c0NvbnRhaW5lclByb3BzID0gZnVuY3Rpb24gKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxGb2N1c0NvbnRhaW5lckVsZW1lbnQ+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8Rm9jdXNDb250YWluZXJFbGVtZW50PiB7XHJcbiAgICAgICAgY29uc3QgeyB1c2VGb2N1c1RyYXBQcm9wcyB9ID0gdXNlRm9jdXNUcmFwPEZvY3VzQ29udGFpbmVyRWxlbWVudD4oeyB0cmFwQWN0aXZlOiBvcGVuIH0pO1xyXG4gICAgICAgIHJldHVybiB1c2VGb2N1c1RyYXBQcm9wcyhwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdXNlTW9kYWxQcm9wcyA9IGZ1bmN0aW9uICh7IFwiYXJpYS1tb2RhbFwiOiBhcmlhTW9kYWwsIHJvbGUsIC4uLnAwIH06IGguSlNYLkhUTUxBdHRyaWJ1dGVzPE1vZGFsRWxlbWVudD4pOiBoLkpTWC5IVE1MQXR0cmlidXRlczxNb2RhbEVsZW1lbnQ+IHtcclxuICAgICAgICBjb25zdCB7IHVzZVJhbmRvbUlkU291cmNlRWxlbWVudFByb3BzOiB1c2VNb2RhbElkQXNTb3VyY2VQcm9wcyB9ID0gdXNlTW9kYWxJZEFzU291cmNlKCk7XHJcbiAgICAgICAgY29uc3QgeyB1c2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50UHJvcHM6IHVzZVRpdGxlSWRSZWZlcmVuY2VyRWxlbWVudFByb3BzIH0gPSB1c2VUaXRsZUlkUmVmZXJlbmNlckVsZW1lbnQ8TW9kYWxFbGVtZW50PihcImFyaWEtbGFiZWxsZWRieVwiIGFzIG5ldmVyKTtcclxuICAgICAgICBjb25zdCB7IHVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnRQcm9wczogdXNlQm9keUlkUmVmZXJlbmNlckVsZW1lbnRQcm9wcyB9ID0gdXNlQm9keUlkUmVmZXJlbmNlckVsZW1lbnQ8TW9kYWxFbGVtZW50PihcImFyaWEtZGVzY3JpYmVkYnlcIiBhcyBuZXZlcik7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQoIWFyaWFNb2RhbCk7XHJcbiAgICAgICAgY29uc3QgeyB1c2VGb2N1c1RyYXBQcm9wcyB9ID0gdXNlRm9jdXNUcmFwPE1vZGFsRWxlbWVudD4oeyB0cmFwQWN0aXZlOiBvcGVuIH0pO1xyXG4gICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChvcGVuKVxyXG4gICAgICAgICAgICAgICAgc3RhYmxlRm9jdXNTZWxmKCk7XHJcbiAgICAgICAgfSwgW29wZW5dKVxyXG4gICAgICAgIGNvbnN0IHAxID0gdXNlQm9keUlkUmVmZXJlbmNlckVsZW1lbnRQcm9wcyhwMCk7XHJcbiAgICAgICAgY29uc3QgcDIgPSB1c2VNb2RhbElkQXNTb3VyY2VQcm9wcyhwMSk7XHJcbiAgICAgICAgY29uc3QgcEZpbmFsID0gdXNlVGl0bGVJZFJlZmVyZW5jZXJFbGVtZW50UHJvcHMocDIpO1xyXG4gICAgICAgIHJldHVybiB1c2VGb2N1c1RyYXBQcm9wcyh1c2VTb2Z0RGlzbWlzc1Byb3BzKHVzZU1lcmdlZFByb3BzPE1vZGFsRWxlbWVudD4odXNlTW9kYWxSZWZFbGVtZW50KHsgcm9sZTogcm9sZSB8fCBcImRpYWxvZ1wiIH0pLCBkZXNjcmlwdGl2ZSA/IHBGaW5hbCA6IHAyKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHVzZU1vZGFsVGl0bGUgPSB1c2VDYWxsYmFjazxVc2VNb2RhbFRpdGxlPFRpdGxlRWxlbWVudD4+KGZ1bmN0aW9uIHVzZU1vZGFsVGl0bGUoKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgdXNlUmFuZG9tSWRTb3VyY2VFbGVtZW50UHJvcHM6IHVzZVRpdGxlSWRBc1NvdXJjZVByb3BzIH0gPSB1c2VUaXRsZUlkQXNTb3VyY2UoKTtcclxuICAgICAgICBjb25zdCB1c2VNb2RhbFRpdGxlUHJvcHMgPSBmdW5jdGlvbiAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFRpdGxlRWxlbWVudD4pOiBoLkpTWC5IVE1MQXR0cmlidXRlczxUaXRsZUVsZW1lbnQ+IHtcclxuICAgICAgICAgICAgcHJvcHMudGFiSW5kZXggPz89IC0xO1xyXG4gICAgICAgICAgICByZXR1cm4gdXNlVGl0bGVSZWZFbGVtZW50UHJvcHModXNlVGl0bGVJZEFzU291cmNlUHJvcHMocHJvcHMpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7IHVzZU1vZGFsVGl0bGVQcm9wcyB9O1xyXG4gICAgfSwgW10pXHJcblxyXG4gICAgY29uc3QgdXNlTW9kYWxCb2R5ID0gdXNlQ2FsbGJhY2s8VXNlTW9kYWxCb2R5PEJvZHlFbGVtZW50Pj4oZnVuY3Rpb24gdXNlTW9kYWxCb2R5KCkge1xyXG4gICAgICAgIGNvbnN0IHsgdXNlUmFuZG9tSWRTb3VyY2VFbGVtZW50UHJvcHM6IHVzZUJvZHlJZEFzU291cmNlUHJvcHMgfSA9IHVzZUJvZHlJZEFzU291cmNlKCk7XHJcbiAgICAgICAgY29uc3QgeyB1c2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50UHJvcHM6IHVzZU1vZGFsSWRBc1JlZmVyZW5jZXJFbGVtZW50UHJvcHMgfSA9IHVzZU1vZGFsSWRBc1JlZmVyZW5jZXJFbGVtZW50PEJvZHlFbGVtZW50PihcImRhdGEtbW9kYWwtaWRcIiBhcyBuZXZlcik7XHJcblxyXG4gICAgICAgIGNvbnN0IHVzZU1vZGFsQm9keVByb3BzID0gZnVuY3Rpb24gKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxCb2R5RWxlbWVudD4pOiBoLkpTWC5IVE1MQXR0cmlidXRlczxCb2R5RWxlbWVudD4ge1xyXG4gICAgICAgICAgICBwcm9wcy50YWJJbmRleCA/Pz0gLTE7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VCb2R5UmVmRWxlbWVudFByb3BzKHVzZUJvZHlJZEFzU291cmNlUHJvcHModXNlTW9kYWxJZEFzUmVmZXJlbmNlckVsZW1lbnRQcm9wcyhwcm9wcykpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7IHVzZU1vZGFsQm9keVByb3BzIH07XHJcbiAgICB9LCBbXSlcclxuXHJcblxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlTW9kYWxQcm9wcyxcclxuICAgICAgICB1c2VNb2RhbFRpdGxlLFxyXG4gICAgICAgIHVzZU1vZGFsQm9keSxcclxuICAgICAgICB1c2VNb2RhbEJhY2tkcm9wLFxyXG4gICAgICAgIHVzZU1vZGFsRm9jdXNDb250YWluZXJQcm9wcyxcclxuICAgICAgICBzb2Z0RGlzbWlzczogeyBvbkJhY2tkcm9wQ2xpY2sgfVxyXG4gICAgfTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBBbGxvd3MgZm9yIGhpZGluZyB0aGUgc2Nyb2xsIGJhciBvZiB0aGUgcm9vdCBIVE1MIGVsZW1lbnRcclxuICogd2l0aG91dCBzaGlmdGluZyB0aGUgbGF5b3V0IG9mIHRoZSBwYWdlIG1vcmUgdGhhbiBhZGRpbmcgYSBmb3cgcGl4ZWxzXHJcbiAqIG9mIHBhZGRpbmcgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBuZWNlc3NhcnkuXHJcbiAqIEBwYXJhbSBoaWRlU2Nyb2xsIFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUhpZGVTY3JvbGwoaGlkZVNjcm9sbDogYm9vbGVhbikge1xyXG4gICAgY29uc3QgW2dldFNjcm9sbGJhcldpZHRoLCBzZXRTY3JvbGxiYXJXaWR0aF0gPSB1c2VQYXNzaXZlU3RhdGU8bnVtYmVyIHwgbnVsbD4obnVsbCk7XHJcbiAgICBjb25zdCBbZ2V0U2Nyb2xsYmFySGVpZ2h0LCBzZXRTY3JvbGxiYXJIZWlnaHRdID0gdXNlUGFzc2l2ZVN0YXRlPG51bWJlciB8IG51bGw+KG51bGwpO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKGhpZGVTY3JvbGwpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIFdoZW4gc2Nyb2xsaW5nIGlzIHJlc3VtZWQsIHdlJ2xsIG5lZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgc2Nyb2xsIHBvc2l0aW9uc1xyXG4gICAgICAgICAgICAvLyBzbyB3ZSBuZWVkIHRvIGtlZXAgdGhpcyBpbmZvcm1hdGlvbiBhcm91bmRcclxuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxTY3JvbGxUb3AgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbFNjcm9sbExlZnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdDtcclxuXHJcbiAgICAgICAgICAgIC8vIE1lYXN1cmUgdGhlIHdpZHRoIG9mIHRoZSBwYWdlIChtaW51cyB0aGUgc2Nyb2xsYmFyKVxyXG4gICAgICAgICAgICBjb25zdCB3aWR0aFdpdGhTY3JvbGxCYXIgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsV2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodFdpdGhTY3JvbGxCYXIgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgLy8gQXBwbHkgYSBjbGFzcyB0aGF0IGhpZGVzIHRoZSBzY3JvbGxiYXIuXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZG9jdW1lbnQtc2Nyb2xsLWhpZGRlblwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEluIGNhc2UgbXVsdGlwbGUgdGhpbmdzIGFyZSBsb2NraW5nIHNjcm9sbCwga2VlcCB0cmFjayBvZiBob3cgbWFueSBhcmUgZG9pbmcgdGhhdFxyXG4gICAgICAgICAgICAvLyAoanVzdCBhZGQgMSBvbiBlbmFibGUsIHN1YnRyYWN0IDEgb24gZGlzYWJsZSlcclxuICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRhdGFzZXRbXCJzY3JvbGxIaWRlcnNcIl0gPSAoKyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZGF0YXNldFtcInNjcm9sbEhpZGVyc1wiXSB8fCBcIjBcIikgKyAxKS50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgLy8gTWVhc3VyZSB0aGUgbmV3IHdpZHRoIHdpdGhvdXQgYSBzY3JvbGxiYXIgXHJcbiAgICAgICAgICAgIC8vIHNvIHdlIGNhbiB0YWtlIHRoZSBkaWZmZXJlbmNlIGFzIHRoZSBzY3JvbGxiYXIgd2lkdGguXHJcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoV2l0aG91dFNjcm9sbEJhciA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aDtcclxuICAgICAgICAgICAgY29uc3QgaGVpZ2h0V2l0aG91dFNjcm9sbEJhciA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQ7XHJcbiAgICAgICAgICAgIGxldCBzY3JvbGxiYXJXaWR0aCA9ICh3aWR0aFdpdGhvdXRTY3JvbGxCYXIgLSB3aWR0aFdpdGhTY3JvbGxCYXIpO1xyXG4gICAgICAgICAgICBsZXQgc2Nyb2xsYmFySGVpZ2h0ID0gKGhlaWdodFdpdGhvdXRTY3JvbGxCYXIgLSBoZWlnaHRXaXRoU2Nyb2xsQmFyKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEZhaWxzYWZlIC0tIGlmIHRoaXMgbWVhc3VyaW5nIHRyaWNrIGRvZXMgc29tZXRoaW5nIHVuZXhwZWN0ZWQsIGp1c3QgaWdub3JlIGl0XHJcbiAgICAgICAgICAgIGlmIChzY3JvbGxiYXJXaWR0aCA+IDgwKVxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsYmFyV2lkdGggPSAwO1xyXG4gICAgICAgICAgICBpZiAoc2Nyb2xsYmFySGVpZ2h0ID4gODApXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxiYXJIZWlnaHQgPSAwO1xyXG5cclxuICAgICAgICAgICAgLy8gTWFrZSBvdXIgbWVhc3VyZW1lbnRzIGF2YWlsYWJsZSBhcyBDU1MgcHJvcGVydGllcyBmb3IgZ2VuZXJhbCB1c2VcclxuICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KFwiLS1yb290LXNjcm9sbGJhci13aWR0aFwiLCBgJHtzY3JvbGxiYXJXaWR0aH1weGApO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXCItLXJvb3Qtc2Nyb2xsYmFyLWhlaWdodFwiLCBgJHtzY3JvbGxiYXJIZWlnaHR9cHhgKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KFwiLS1yb290LXNjcm9sbHN0b3AtdG9wXCIsIGAke29yaWdpbmFsU2Nyb2xsVG9wfXB4YCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tcm9vdC1zY3JvbGxzdG9wLWxlZnRcIiwgYCR7b3JpZ2luYWxTY3JvbGxMZWZ0fXB4YCk7XHJcblxyXG4gICAgICAgICAgICBzZXRTY3JvbGxiYXJXaWR0aChzY3JvbGxiYXJXaWR0aCk7XHJcbiAgICAgICAgICAgIHNldFNjcm9sbGJhckhlaWdodChzY3JvbGxiYXJIZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFVuZG8gYWxsIHRoZSB0aGluZ3Mgd2UganVzdCBkaWRcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kYXRhc2V0W1wic2Nyb2xsSGlkZXJzXCJdID0gKCsoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRhdGFzZXRbXCJzY3JvbGxIaWRlcnNcIl0gfHwgXCIwXCIpIC0gMSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZGF0YXNldFtcInNjcm9sbEhpZGVyc1wiXSA9PSBcIjBcIikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSB3ZXJlIHRoZSBsYXN0IHNjcm9sbC1sb2NraW5nIHRoaW5nIHRvIHN0b3AsIHRoZW4gcmVtb3ZlIHRoZSBjbGFzcyB0aGF0IHN0b3BzIHNjcm9sbGluZy5cclxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1zY3JvbGwtaGlkZXJzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZG9jdW1lbnQtc2Nyb2xsLWhpZGRlblwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQWxzbywgcmVzdG9yZSB0aGUgb3JpZ2luYWwgc2Nyb2xsIHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZG8gdGhpcyBieSBmb3JjaW5nIHRoZSBzY3JvbGwgYmVoYXZpb3IgdG8gbm90IGJlIHNtb290aFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIChpdCdzIGluc3RhbnQgaWYgbm90aGluZyBpcyBzZXQgdG8gc21vb3RoLCBodHRwczovL3d3dy53My5vcmcvVFIvY3Nzb20tdmlldy8jc2Nyb2xsaW5nKSxcclxuICAgICAgICAgICAgICAgICAgICAvLyBzY3JvbGxpbmcsIHRoZW4gcmVzdG9yaW5nIHRoZSBvcmlnaW5hbCBzY3JvbGwgYmVoYXZpb3IgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gKHdoaWNoIHdhcyBwcm9iYWJseSBhbHJlYWR5IGF1dG8gYW55d2F5LCBidXQganVzdCB0byBiZSBzYWZlKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsU2Nyb2xsQmVoYXZpb3IgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2Nyb2xsQmVoYXZpb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gXCJhdXRvXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvKHsgdG9wOiBvcmlnaW5hbFNjcm9sbFRvcCwgbGVmdDogb3JpZ2luYWxTY3JvbGxMZWZ0LCBiZWhhdmlvcjogXCJhdXRvXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNjcm9sbEJlaGF2aW9yID0gb3JpZ2luYWxTY3JvbGxCZWhhdmlvcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICB9LCBbaGlkZVNjcm9sbF0pO1xyXG5cclxuICAgIHJldHVybiB7IGdldFNjcm9sbGJhcldpZHRoLCBnZXRTY3JvbGxiYXJIZWlnaHQgfTtcclxufVxyXG5cclxuIiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IGRlYnVnTG9nIH0gZnJvbSBcIi4vcHJvcHNcIjtcclxuaW1wb3J0IHsgdXNlTW9kYWwsIFVzZU1vZGFsUGFyYW1ldGVycywgVXNlU29mdERpc21pc3NSZXR1cm5UeXBlSW5mbyB9IGZyb20gXCIuL3VzZS1tb2RhbFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VEcmF3ZXJSZXR1cm5UeXBlSW5mbyBleHRlbmRzIFVzZVNvZnREaXNtaXNzUmV0dXJuVHlwZUluZm8ge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VEcmF3ZXJSZXR1cm5UeXBlV2l0aEhvb2tzPEZvY3VzQ29udGFpbmVyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIE1vZGFsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIFRpdGxlRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEJvZHlFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgQmFja2Ryb3BFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VEcmF3ZXJSZXR1cm5UeXBlSW5mbyB7XHJcbiAgICB1c2VEcmF3ZXJQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxNb2RhbEVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxNb2RhbEVsZW1lbnQ+O1xyXG4gICAgdXNlRHJhd2VyVGl0bGU6IFVzZURyYXdlclRpdGxlPFRpdGxlRWxlbWVudD47XHJcbiAgICB1c2VEcmF3ZXJCb2R5OiBVc2VEcmF3ZXJCb2R5PEJvZHlFbGVtZW50PlxyXG4gICAgdXNlRHJhd2VyQmFja2Ryb3A6IFVzZURyYXdlckJhY2tkcm9wPEJhY2tkcm9wRWxlbWVudD47XHJcbiAgICB1c2VEcmF3ZXJGb2N1c0NvbnRhaW5lclByb3BzKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxGb2N1c0NvbnRhaW5lckVsZW1lbnQ+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8Rm9jdXNDb250YWluZXJFbGVtZW50PjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgVXNlRHJhd2VyVGl0bGU8VGl0bGVFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gPSAoKSA9PiB7IHVzZURyYXdlclRpdGxlUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8VGl0bGVFbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8VGl0bGVFbGVtZW50PjsgfTtcclxuZXhwb3J0IHR5cGUgVXNlRHJhd2VyQm9keTxCb2R5RWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+ID0gKCkgPT4geyB1c2VEcmF3ZXJCb2R5UHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8Qm9keUVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxCb2R5RWxlbWVudD47IH07XHJcbmV4cG9ydCB0eXBlIFVzZURyYXdlckJhY2tkcm9wPEJhY2tkcm9wRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+ID0gKCkgPT4geyB1c2VEcmF3ZXJCYWNrZHJvcFByb3BzOiAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEJhY2tkcm9wRWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEJhY2tkcm9wRWxlbWVudD47IH07XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VEcmF3ZXJQYXJhbWV0ZXJzIGV4dGVuZHMgVXNlTW9kYWxQYXJhbWV0ZXJzPG5ldmVyLCBuZXZlcj4ge1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlRHJhd2VyPEZvY3VzQ29udGFpbmVyRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50LCBEcmF3ZXJFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQsIFRpdGxlRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50LCBCb2R5RWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50LCBCYWNrZHJvcEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudD4oeyBzb2Z0RGlzbWlzczogeyBvcGVuLCBvbkNsb3NlIH0sIGFjdGl2ZUVsZW1lbnQsIG1vZGFsOiB7IGJvZHlJc09ubHlTZW1hbnRpYywgZm9jdXNTZWxmIH0gfTogVXNlRHJhd2VyUGFyYW1ldGVycyk6IFVzZURyYXdlclJldHVyblR5cGVXaXRoSG9va3M8Rm9jdXNDb250YWluZXJFbGVtZW50LCBEcmF3ZXJFbGVtZW50LCBUaXRsZUVsZW1lbnQsIEJvZHlFbGVtZW50LCBCYWNrZHJvcEVsZW1lbnQ+IHtcclxuXHJcbiAgICBkZWJ1Z0xvZyhcInVzZURyYXdlclwiKTtcclxuXHJcbiAgICAvLyBUT0RPOiBEcmF3ZXJzIGFyZSBub3QgYWx3YXlzIG1vZGFsLlxyXG5cclxuICAgIGNvbnN0IHtcclxuICAgICAgICB1c2VNb2RhbEJhY2tkcm9wLFxyXG4gICAgICAgIHVzZU1vZGFsQm9keSxcclxuICAgICAgICB1c2VNb2RhbFByb3BzLFxyXG4gICAgICAgIHVzZU1vZGFsVGl0bGUsXHJcbiAgICAgICAgdXNlTW9kYWxGb2N1c0NvbnRhaW5lclByb3BzLFxyXG4gICAgICAgIHNvZnREaXNtaXNzOiB7IG9uQmFja2Ryb3BDbGljayB9XHJcbiAgICB9ID0gdXNlTW9kYWw8Rm9jdXNDb250YWluZXJFbGVtZW50LCBEcmF3ZXJFbGVtZW50LCBUaXRsZUVsZW1lbnQsIEJvZHlFbGVtZW50LCBCYWNrZHJvcEVsZW1lbnQ+KHsgbW9kYWw6IHsgYm9keUlzT25seVNlbWFudGljOiAoYm9keUlzT25seVNlbWFudGljID8/IGZhbHNlKSwgZm9jdXNTZWxmIH0sIHNvZnREaXNtaXNzOiB7IG9uQ2xvc2UsIG9wZW4gfSwgYWN0aXZlRWxlbWVudCB9KTtcclxuXHJcbiAgICBjb25zdCB1c2VEcmF3ZXJCYWNrZHJvcCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgICAgICBjb25zdCB7IHVzZU1vZGFsQmFja2Ryb3BQcm9wcyB9ID0gdXNlTW9kYWxCYWNrZHJvcCgpO1xyXG4gICAgICAgIHJldHVybiB7IHVzZURyYXdlckJhY2tkcm9wUHJvcHM6IHVzZU1vZGFsQmFja2Ryb3BQcm9wcyB9O1xyXG4gICAgfSwgW3VzZU1vZGFsQmFja2Ryb3BdKTtcclxuXHJcbiAgICBjb25zdCB1c2VEcmF3ZXJCb2R5ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgdXNlTW9kYWxCb2R5UHJvcHMgfSA9IHVzZU1vZGFsQm9keSgpO1xyXG4gICAgICAgIHJldHVybiB7IHVzZURyYXdlckJvZHlQcm9wczogdXNlTW9kYWxCb2R5UHJvcHMgfTtcclxuICAgIH0sIFt1c2VNb2RhbEJhY2tkcm9wXSk7XHJcbiAgICBjb25zdCB1c2VEcmF3ZXJQcm9wcyA9IHVzZU1vZGFsUHJvcHM7XHJcblxyXG4gICAgY29uc3QgdXNlRHJhd2VyVGl0bGUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyB1c2VNb2RhbFRpdGxlUHJvcHMgfSA9IHVzZU1vZGFsVGl0bGUoKTtcclxuICAgICAgICByZXR1cm4geyB1c2VEcmF3ZXJUaXRsZVByb3BzOiB1c2VNb2RhbFRpdGxlUHJvcHMgfTtcclxuICAgIH0sIFt1c2VNb2RhbFRpdGxlXSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VEcmF3ZXJQcm9wcyxcclxuICAgICAgICB1c2VEcmF3ZXJUaXRsZSxcclxuICAgICAgICB1c2VEcmF3ZXJCb2R5LFxyXG4gICAgICAgIHVzZURyYXdlckJhY2tkcm9wLFxyXG4gICAgICAgIHVzZURyYXdlckZvY3VzQ29udGFpbmVyUHJvcHM6IHVzZU1vZGFsRm9jdXNDb250YWluZXJQcm9wcyxcclxuICAgICAgICBzb2Z0RGlzbWlzczogeyBvbkJhY2tkcm9wQ2xpY2sgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgVXNlSGFzRm9jdXNQYXJhbWV0ZXJzLCB1c2VSYW5kb21JZCwgdXNlU3RhYmxlQ2FsbGJhY2sgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVyc1wiO1xyXG5pbXBvcnQgeyB1c2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbiwgVXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZFBhcmFtZXRlcnMsIFVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uQ2hpbGRSZXR1cm5UeXBlSW5mbywgVXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25QYXJhbWV0ZXJzLCBVc2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvblJldHVyblR5cGVJbmZvIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLWxpc3QtbmF2aWdhdGlvblwiO1xyXG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgZGVidWdMb2csIEVsZW1lbnRUb1RhZywgZW5oYW5jZUV2ZW50LCBFdmVudERldGFpbCwgd2Fybk9uT3ZlcndyaXRlIH0gZnJvbSBcIi4vcHJvcHNcIjtcclxuaW1wb3J0IHsgdXNlTGFiZWwsIFVzZUxhYmVsUmV0dXJuVHlwZUluZm8gfSBmcm9tIFwiLi91c2UtbGFiZWxcIjtcclxuXHJcbmV4cG9ydCB0eXBlIExpc3Rib3hTaW5nbGVTZWxlY3RFdmVudDxFIGV4dGVuZHMgRXZlbnRUYXJnZXQ+ID0geyBbRXZlbnREZXRhaWxdOiB7IHNlbGVjdGVkSW5kZXg6IG51bWJlciB9IH0gJiBQaWNrPGguSlNYLlRhcmdldGVkRXZlbnQ8RT4sIFwidGFyZ2V0XCIgfCBcImN1cnJlbnRUYXJnZXRcIj47XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxpc3Rib3hTaW5nbGVQYXJhbWV0ZXJzPExhYmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIExpc3RFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvblBhcmFtZXRlcnM8bmV2ZXIgfCBcIm9uU2VsZWN0ZWRJbmRleENoYW5nZVwiLCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXI+IHtcclxuICAgIGxpc3Rib3hTaW5nbGU6IHtcclxuICAgICAgICAvL3NlbGVjdGlvbk1vZGU6IFwiZm9jdXNcIiB8IFwiYWN0aXZhdGVcIjtcclxuICAgICAgICBvblNlbGVjdD8oZXZlbnQ6IExpc3Rib3hTaW5nbGVTZWxlY3RFdmVudDxFbGVtZW50Pik6IHZvaWQ7XHJcbiAgICAgICAgdGFnTGFiZWw6IEVsZW1lbnRUb1RhZzxMYWJlbEVsZW1lbnQ+O1xyXG4gICAgICAgIHRhZ0xpc3Q6IEVsZW1lbnRUb1RhZzxMaXN0RWxlbWVudD47XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlTGlzdGJveFNpbmdsZUl0ZW1QYXJhbWV0ZXJzPEUgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIE9taXQ8VXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZFBhcmFtZXRlcnM8RSwge30sIG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlcj4sIFwic3ViSW5mb1wiPiB7XHJcbiAgICBsaXN0Ym94U2luZ2xlSXRlbTogeyBkaXNhYmxlZD86IGJvb2xlYW47IH1cclxuICAgIGhhc0ZvY3VzOiBVc2VIYXNGb2N1c1BhcmFtZXRlcnM8RT47XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IHR5cGUgVXNlTGlzdGJveFNpbmdsZUl0ZW08TGlzdEl0ZW1FbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gPSAoaW5mbzogVXNlTGlzdGJveFNpbmdsZUl0ZW1QYXJhbWV0ZXJzPExpc3RJdGVtRWxlbWVudD4pID0+IFVzZUxpc3Rib3hTaW5nbGVJdGVtUmV0dXJuVHlwZVdpdGhIb29rczxMaXN0SXRlbUVsZW1lbnQ+O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VMaXN0Ym94U2luZ2xlSXRlbVJldHVyblR5cGVJbmZvPExpc3RJdGVtRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZFJldHVyblR5cGVJbmZvPExpc3RJdGVtRWxlbWVudD4ge1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxpc3Rib3hTaW5nbGVJdGVtUmV0dXJuVHlwZVdpdGhIb29rczxMaXN0SXRlbUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZUxpc3Rib3hTaW5nbGVJdGVtUmV0dXJuVHlwZUluZm88TGlzdEl0ZW1FbGVtZW50PiB7XHJcbiAgICB1c2VMaXN0Ym94U2luZ2xlSXRlbVByb3BzOiAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExpc3RJdGVtRWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExpc3RJdGVtRWxlbWVudD47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlTGlzdGJveFNpbmdsZVJldHVyblR5cGVJbmZvPExpc3RJdGVtRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25SZXR1cm5UeXBlSW5mbzxMaXN0SXRlbUVsZW1lbnQsIHt9LCBuZXZlcj4sIFVzZUxhYmVsUmV0dXJuVHlwZUluZm8ge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VMaXN0Ym94U2luZ2xlUmV0dXJuVHlwZVdpdGhIb29rczxMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMaXN0RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIExpc3RJdGVtRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlTGlzdGJveFNpbmdsZVJldHVyblR5cGVJbmZvPExpc3RJdGVtRWxlbWVudD4ge1xyXG4gICAgdXNlTGlzdGJveFNpbmdsZUl0ZW06IFVzZUxpc3Rib3hTaW5nbGVJdGVtPExpc3RJdGVtRWxlbWVudD47XHJcbiAgICB1c2VMaXN0Ym94U2luZ2xlUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGlzdEVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxMaXN0RWxlbWVudD47XHJcbiAgICB1c2VMaXN0Ym94U2luZ2xlTGFiZWw6ICgpID0+IHsgdXNlTGlzdGJveFNpbmdsZUxhYmVsUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGFiZWxFbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGFiZWxFbGVtZW50PjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlTGlzdGJveFNpbmdsZTxMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMaXN0RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIExpc3RJdGVtRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KHtcclxuICAgIGxpc3Rib3hTaW5nbGU6IHsgdGFnTGFiZWwsIHRhZ0xpc3QsIG9uU2VsZWN0LCAuLi5fbGJzIH0sXHJcbiAgICBzaW5nbGVTZWxlY3Rpb246IHsgc2VsZWN0ZWRJbmRleCwgLi4uc3MgfSxcclxuICAgIGxpbmVhck5hdmlnYXRpb246IHsgLi4ubG4gfSxcclxuICAgIGxpc3ROYXZpZ2F0aW9uOiB7IC4uLmxzIH0sXHJcbiAgICBtYW5hZ2VkQ2hpbGRyZW46IHsgLi4ubWMgfSxcclxuICAgIHJvdmluZ1RhYkluZGV4OiB7IC4uLnJ0aSB9LFxyXG4gICAgdHlwZWFoZWFkTmF2aWdhdGlvbjogeyAuLi50biB9LFxyXG4gICAgY2hpbGRyZW5IYXZlRm9jdXM6IHsgLi4uY2hmIH1cclxufTogVXNlTGlzdGJveFNpbmdsZVBhcmFtZXRlcnM8TGFiZWxFbGVtZW50LCBMaXN0RWxlbWVudD4pOiBVc2VMaXN0Ym94U2luZ2xlUmV0dXJuVHlwZVdpdGhIb29rczxMYWJlbEVsZW1lbnQsIExpc3RFbGVtZW50LCBMaXN0SXRlbUVsZW1lbnQ+IHtcclxuICAgIGRlYnVnTG9nKFwidXNlTGlzdGJveFNpbmdsZVwiLCBzZWxlY3RlZEluZGV4KTtcclxuXHJcbiAgICBjb25zdCB7IHVzZUxhYmVsSW5wdXQsIHVzZUxhYmVsTGFiZWwsIC4uLmxhYmVsUmV0dXJuVHlwZSB9ID0gdXNlTGFiZWw8TGlzdEVsZW1lbnQsIExhYmVsRWxlbWVudD4oe1xyXG4gICAgICAgIGxhYmVsOiB7XHJcbiAgICAgICAgICAgIHByZWZpeExhYmVsOiBcImFyaWEtbGlzdGJveC1sYWJlbC1cIixcclxuICAgICAgICAgICAgcHJlZml4SW5wdXQ6IFwiYXJpYS1saXN0Ym94LVwiLFxyXG4gICAgICAgICAgICB0YWdJbnB1dDogdGFnTGlzdCxcclxuICAgICAgICAgICAgdGFnTGFiZWw6IHRhZ0xhYmVsXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3Qgb25TZWxlY3RlZEluZGV4Q2hhbmdlID0gdXNlU3RhYmxlQ2FsbGJhY2soKGV2ZW50OiBFdmVudCwgbmV3SW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHN0YWJsZU9uU2VsZWN0KGVuaGFuY2VFdmVudDxMaXN0SXRlbUVsZW1lbnQsIEV2ZW50LCB7IHNlbGVjdGVkSW5kZXg6IG51bWJlciB9PihldmVudCwgeyBzZWxlY3RlZEluZGV4OiBuZXdJbmRleCB9KSlcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHsgdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZCwgdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25Qcm9wcywgLi4ubGlzdFJldHVyblR5cGUgfSA9IHVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uPExpc3RFbGVtZW50LCBMaXN0SXRlbUVsZW1lbnQsIHt9LCBuZXZlcj4oe1xyXG4gICAgICAgIGNoaWxkcmVuSGF2ZUZvY3VzOiB7IC4uLmNoZiB9LFxyXG4gICAgICAgIGxpbmVhck5hdmlnYXRpb246IHsgLi4ubG4gfSxcclxuICAgICAgICBsaXN0TmF2aWdhdGlvbjogeyAuLi5scyB9LFxyXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbjogeyAuLi5tYyB9LFxyXG4gICAgICAgIHJvdmluZ1RhYkluZGV4OiB7XHJcbiAgICAgICAgICAgIC4uLnJ0aVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2luZ2xlU2VsZWN0aW9uOiB7IC4uLnNzLCBvblNlbGVjdGVkSW5kZXhDaGFuZ2UsIHNlbGVjdGVkSW5kZXggfSxcclxuICAgICAgICB0eXBlYWhlYWROYXZpZ2F0aW9uOiB0blxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgdXNlTGFiZWxJbnB1dFByb3BzIH0gPSB1c2VMYWJlbElucHV0KCk7XHJcbiAgICBjb25zdCBzdGFibGVPblNlbGVjdCA9IHVzZVN0YWJsZUNhbGxiYWNrKG9uU2VsZWN0ID8/ICgoKSA9PiB7IH0pKTtcclxuXHJcblxyXG4gICAgY29uc3QgdXNlTGlzdGJveFNpbmdsZUl0ZW0gPSB1c2VDYWxsYmFjazxVc2VMaXN0Ym94U2luZ2xlSXRlbTxMaXN0SXRlbUVsZW1lbnQ+PigoeyBsaXN0Ym94U2luZ2xlSXRlbTogeyBkaXNhYmxlZCB9LCBsaXN0TmF2aWdhdGlvbiwgbWFuYWdlZENoaWxkLCByb3ZpbmdUYWJJbmRleCwgaGFzRm9jdXMgfSkgPT4ge1xyXG4gICAgICAgIGRlYnVnTG9nKFwidXNlTGlzdGJveFNpbmdsZUl0ZW1cIiwgbWFuYWdlZENoaWxkLmluZGV4KTtcclxuICAgICAgICBjb25zdCB7IHJvdmluZ1RhYkluZGV4OiBydGlfcmV0LCBzaW5nbGVTZWxlY3Rpb246IHNzX3JldCwgdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZFByb3BzIH0gPSB1c2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkKHtcclxuICAgICAgICAgICAgbWFuYWdlZENoaWxkLFxyXG4gICAgICAgICAgICBsaXN0TmF2aWdhdGlvbixcclxuICAgICAgICAgICAgcm92aW5nVGFiSW5kZXgsXHJcbiAgICAgICAgICAgIGhhc0ZvY3VzLFxyXG4gICAgICAgICAgICBzdWJJbmZvOiB7fVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vY29uc3QgaW5kZXggPSBtYW5hZ2VkQ2hpbGQuaW5kZXg7XHJcblxyXG4gICAgICAgIC8qdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHJ0aV9yZXQuZ2V0RWxlbWVudCgpO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudCAmJiBydGlfcmV0LnRhYmJhYmxlICYmIHNlbGVjdGlvbk1vZGUgPT0gXCJmb2N1c1wiKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFibGVPblNlbGVjdD8uKHsgdGFyZ2V0OiBlbGVtZW50LCBjdXJyZW50VGFyZ2V0OiBlbGVtZW50LCBbRXZlbnREZXRhaWxdOiB7IHNlbGVjdGVkSW5kZXg6IGluZGV4IH0gfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBbcnRpX3JldC50YWJiYWJsZSwgc2VsZWN0aW9uTW9kZSwgaW5kZXhdKTsqL1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB1c2VMaXN0Ym94U2luZ2xlSXRlbVByb3BzLFxyXG4gICAgICAgICAgICByb3ZpbmdUYWJJbmRleDogcnRpX3JldCxcclxuICAgICAgICAgICAgc2luZ2xlU2VsZWN0aW9uOiBzc19yZXRcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB1c2VMaXN0Ym94U2luZ2xlSXRlbVByb3BzPFAgZXh0ZW5kcyBoLkpTWC5IVE1MQXR0cmlidXRlczxMaXN0SXRlbUVsZW1lbnQ+Pihwcm9wczogUCkge1xyXG5cclxuICAgICAgICAgICAgcHJvcHMucm9sZSA9IFwib3B0aW9uXCI7XHJcbiAgICAgICAgICAgIC8vcHJvcHNbXCJhcmlhLXNldHNpemVcIl0gPSAoY2hpbGRyZW4uZ2V0SGlnaGVzdEluZGV4KCkgKyAxKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAvL3Byb3BzW1wiYXJpYS1wb3NpbnNldFwiXSA9IChpbmZvLmluZGV4ICsgMSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgcHJvcHNbXCJhcmlhLXNlbGVjdGVkXCJdID0gKHNzX3JldC5zZWxlY3RlZCA/PyBmYWxzZSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgaWYgKGRpc2FibGVkKVxyXG4gICAgICAgICAgICAgICAgcHJvcHNbXCJhcmlhLWRpc2FibGVkXCJdID0gXCJ0cnVlXCI7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZFByb3BzKHByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZF0pO1xyXG5cclxuXHJcbiAgICBjb25zdCB1c2VMaXN0Ym94U2luZ2xlTGFiZWwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiB1c2VMaXN0Ym94U2luZ2xlTGFiZWwoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gdXNlTGlzdGJveFNpbmdsZUxhYmVsUHJvcHMocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExhYmVsRWxlbWVudD4pIHtcclxuICAgICAgICAgICAgY29uc3QgeyB1c2VMYWJlbExhYmVsUHJvcHMgfSA9IHVzZUxhYmVsTGFiZWwoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZUxhYmVsTGFiZWxQcm9wcyhwcm9wcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4geyB1c2VMaXN0Ym94U2luZ2xlTGFiZWxQcm9wcyB9O1xyXG4gICAgfSwgW3VzZUxhYmVsTGFiZWxdKTtcclxuXHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VMaXN0Ym94U2luZ2xlSXRlbSxcclxuICAgICAgICB1c2VMaXN0Ym94U2luZ2xlUHJvcHMsXHJcbiAgICAgICAgdXNlTGlzdGJveFNpbmdsZUxhYmVsLFxyXG4gICAgICAgIC4uLmxpc3RSZXR1cm5UeXBlLFxyXG4gICAgICAgIC4uLmxhYmVsUmV0dXJuVHlwZVxyXG4gICAgICAgIC8qbGFiZWw6IGxhYmVsUmV0dXJuVHlwZS5sYWJlbCxcclxuICAgICAgICBsaW5lYXJOYXZpZ2F0aW9uOiBsaXN0UmV0dXJuVHlwZS5saW5lYXJOYXZpZ2F0aW9uLFxyXG4gICAgICAgIGxpc3ROYXZpZ2F0aW9uOiBsaXN0UmV0dXJuVHlwZS5saXN0TmF2aWdhdGlvbixcclxuICAgICAgICBtYW5hZ2VkQ2hpbGRyZW46IGxpc3RSZXR1cm5UeXBlLm1hbmFnZWRDaGlsZHJlbixcclxuICAgICAgICByb3ZpbmdUYWJJbmRleDogbGlzdFJldHVyblR5cGUucm92aW5nVGFiSW5kZXgsXHJcbiAgICAgICAgdHlwZWFoZWFkTmF2aWdhdGlvbjogbGlzdFJldHVyblR5cGUudHlwZWFoZWFkTmF2aWdhdGlvbiovXHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiB1c2VMaXN0Ym94U2luZ2xlUHJvcHMocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExpc3RFbGVtZW50Pikge1xyXG4gICAgICAgIHByb3BzLnJvbGUgPSBcImxpc3Rib3hcIjtcclxuICAgICAgICByZXR1cm4gdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25Qcm9wcyh1c2VMYWJlbElucHV0UHJvcHMocHJvcHMpKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlTGlzdGJveEdyb3VwPENvbnRhaW5lckVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBIZWFkaW5nRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KCkge1xyXG4gICAgY29uc3QgeyB1c2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50LCB1c2VSYW5kb21JZFNvdXJjZUVsZW1lbnQgfSA9IHVzZVJhbmRvbUlkPEhlYWRpbmdFbGVtZW50Pih7IHJhbmRvbUlkOiB7IHByZWZpeDogXCJsaXN0Ym94LW11bHRpLWdyb3VwXCIgfSwgbWFuYWdlZENoaWxkcmVuOiB7fSB9KTtcclxuICAgIGNvbnN0IHsgdXNlUmFuZG9tSWRTb3VyY2VFbGVtZW50UHJvcHMgfSA9IHVzZVJhbmRvbUlkU291cmNlRWxlbWVudCgpO1xyXG4gICAgY29uc3QgeyB1c2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50UHJvcHMgfSA9IHVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnQ8Q29udGFpbmVyRWxlbWVudD4oXCJhcmlhLWxhYmVsbGVkYnlcIik7XHJcbiAgICBjb25zdCB1c2VMaXN0Ym94R3JvdXBIZWFkaW5nUHJvcHMgPSAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEhlYWRpbmdFbGVtZW50Pik6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEhlYWRpbmdFbGVtZW50PiA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHVzZVJhbmRvbUlkU291cmNlRWxlbWVudFByb3BzKHByb3BzKTtcclxuICAgIH07XHJcbiAgICBjb25zdCB1c2VMaXN0Ym94R3JvdXBDb250YWluZXJQcm9wcyA9ICh7IHJvbGUsIC4uLnByb3BzIH06IGguSlNYLkhUTUxBdHRyaWJ1dGVzPENvbnRhaW5lckVsZW1lbnQ+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8Q29udGFpbmVyRWxlbWVudD4gPT4ge1xyXG4gICAgICAgIHJldHVybiB1c2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50UHJvcHMoe1xyXG4gICAgICAgICAgICByb2xlOiB3YXJuT25PdmVyd3JpdGUoXCJ1c2VMaXN0Ym94TXVsdGlHcm91cFByb3BzXCIsIFwicm9sZVwiLCByb2xlLCBcImdyb3VwXCIpLFxyXG4gICAgICAgICAgICAuLi5wcm9wc1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VMaXN0Ym94R3JvdXBDb250YWluZXJQcm9wcyxcclxuICAgICAgICB1c2VMaXN0Ym94R3JvdXBIZWFkaW5nUHJvcHMsXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgT25UYWJiYWJsZUluZGV4Q2hhbmdlLCByZXR1cm5GYWxzZSwgVXNlSGFzRm9jdXNQYXJhbWV0ZXJzLCB1c2VMaXN0TmF2aWdhdGlvbiwgVXNlTGlzdE5hdmlnYXRpb25DaGlsZFBhcmFtZXRlcnMsIFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRSZXR1cm5UeXBlSW5mbywgVXNlTGlzdE5hdmlnYXRpb25QYXJhbWV0ZXJzLCBVc2VMaXN0TmF2aWdhdGlvblJldHVyblR5cGVJbmZvLCB1c2VNZXJnZWRQcm9wcywgdXNlUGFzc2l2ZVN0YXRlLCB1c2VQcmVzcywgdXNlUmVmRWxlbWVudCwgdXNlU3RhYmxlQ2FsbGJhY2ssIHVzZVN0YWJsZUdldHRlciB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IGRlYnVnTG9nLCBFbGVtZW50VG9UYWcsIEV2ZW50RGV0YWlsIH0gZnJvbSBcIi4vcHJvcHNcIjtcclxuaW1wb3J0IHsgdXNlTGFiZWwgfSBmcm9tIFwiLi91c2UtbGFiZWxcIjtcclxuXHJcbmV4cG9ydCB0eXBlIExpc3Rib3hNdWx0aVNlbGVjdEV2ZW50PEUgZXh0ZW5kcyBFdmVudFRhcmdldD4gPSB7IFtFdmVudERldGFpbF06IHsgc2VsZWN0ZWQ6IGJvb2xlYW4gfSB9ICYgUGljazxoLkpTWC5UYXJnZXRlZEV2ZW50PEU+LCBcInRhcmdldFwiIHwgXCJjdXJyZW50VGFyZ2V0XCI+O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VMaXN0Ym94TXVsdGlQYXJhbWV0ZXJzPExhYmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIExpc3RFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VMaXN0TmF2aWdhdGlvblBhcmFtZXRlcnM8bmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyPiB7XHJcbiAgICBsaXN0Ym94TXVsdGk6IHtcclxuICAgICAgICB0YWdMYWJlbDogRWxlbWVudFRvVGFnPExhYmVsRWxlbWVudD47XHJcbiAgICAgICAgdGFnTGlzdDogRWxlbWVudFRvVGFnPExpc3RFbGVtZW50PlxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxpc3Rib3hNdWx0aUl0ZW1QYXJhbWV0ZXJzPEUgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIE9taXQ8VXNlTGlzdE5hdmlnYXRpb25DaGlsZFBhcmFtZXRlcnM8SW5mbywgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyPiwgXCJzdWJJbmZvXCI+IHtcclxuICAgIGxpc3Rib3hNdWx0aUl0ZW06IHtcclxuICAgICAgICBkaXNhYmxlZD86IGJvb2xlYW47XHJcbiAgICAgICAgc2VsZWN0ZWQ6IGJvb2xlYW47XHJcbiAgICAgICAgb25TZWxlY3RlZENoYW5nZT8oZXZlbnQ6IChMaXN0Ym94TXVsdGlTZWxlY3RFdmVudDxFPikpOiB2b2lkO1xyXG4gICAgfTtcclxuICAgIGhhc0ZvY3VzOiBVc2VIYXNGb2N1c1BhcmFtZXRlcnM8RT47XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IHR5cGUgVXNlTGlzdGJveE11bHRpSXRlbTxFIGV4dGVuZHMgRWxlbWVudD4gPSAoaW5mbzogVXNlTGlzdGJveE11bHRpSXRlbVBhcmFtZXRlcnM8RT4pID0+IFVzZUxpc3Rib3hNdWx0aUl0ZW1SZXR1cm5UeXBlV2l0aEhvb2tzPEU+O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VMaXN0Ym94TXVsdGlJdGVtUmV0dXJuVHlwZUluZm88RSBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlTGlzdE5hdmlnYXRpb25DaGlsZFJldHVyblR5cGVJbmZvPEU+IHtcclxuICAgIGxpc3Rib3hNdWx0aUl0ZW06IHtcclxuICAgICAgICB0YWJiYWJsZTogYm9vbGVhbjtcclxuICAgIH1cclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxpc3Rib3hNdWx0aUl0ZW1SZXR1cm5UeXBlV2l0aEhvb2tzPEUgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZUxpc3Rib3hNdWx0aUl0ZW1SZXR1cm5UeXBlSW5mbzxFPiB7XHJcbiAgICB1c2VMaXN0Ym94TXVsdGlJdGVtUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxpc3Rib3hNdWx0aVJldHVyblR5cGVJbmZvPExpc3RJdGVtRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlTGlzdE5hdmlnYXRpb25SZXR1cm5UeXBlSW5mbzxMaXN0SXRlbUVsZW1lbnQsIEluZm8sIG5ldmVyPiB7XHJcblxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxpc3Rib3hNdWx0aVJldHVyblR5cGVXaXRoSG9va3M8TGFiZWxFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTGlzdEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMaXN0SXRlbUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZUxpc3Rib3hNdWx0aVJldHVyblR5cGVJbmZvPExpc3RJdGVtRWxlbWVudD4ge1xyXG4gICAgdXNlTGlzdGJveE11bHRpSXRlbTogVXNlTGlzdGJveE11bHRpSXRlbTxMaXN0SXRlbUVsZW1lbnQ+O1xyXG4gICAgdXNlTGlzdGJveE11bHRpUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGlzdEVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxMaXN0RWxlbWVudD47XHJcbiAgICB1c2VMaXN0Ym94TXVsdGlMYWJlbDogKCkgPT4geyB1c2VMaXN0Ym94TXVsdGlMYWJlbFByb3BzOiAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExhYmVsRWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExhYmVsRWxlbWVudD47IH1cclxufVxyXG5cclxuXHJcbmludGVyZmFjZSBJbmZvIHtcclxuICAgIHNlbGVjdGVkOiBib29sZWFuO1xyXG4gICAgb25TZWxlY3Q/KGV2ZW50OiAoTGlzdGJveE11bHRpU2VsZWN0RXZlbnQ8RWxlbWVudD4pKTogdm9pZDtcclxufVxyXG5cclxuXHJcbi8qZXhwb3J0IGludGVyZmFjZSBVc2VMaXN0Ym94TXVsdGlSZXR1cm5UeXBlPExhYmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIExpc3RFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTGlzdEl0ZW1FbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBPbWl0PFVzZUxpc3ROYXZpZ2F0aW9uUmV0dXJuVHlwZTxMaXN0RWxlbWVudCwgTGlzdEl0ZW1FbGVtZW50LCB7fSwgbmV2ZXI+LCBcInVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRcIiB8IFwidXNlTGlzdE5hdmlnYXRpb25Qcm9wc1wiPiB7XHJcbiAgICB1c2VMaXN0Ym94TXVsdGlJdGVtOiBVc2VMaXN0Ym94TXVsdGlJdGVtPExpc3RJdGVtRWxlbWVudD47XHJcbiAgICB1c2VMaXN0Ym94TXVsdGlQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxMaXN0RWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExpc3RFbGVtZW50PjtcclxuICAgIHVzZUxpc3Rib3hNdWx0aUxhYmVsOiAoKSA9PiB7IHVzZUxpc3Rib3hNdWx0aUxhYmVsUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGFiZWxFbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGFiZWxFbGVtZW50PjsgfVxyXG59Ki9cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlTGlzdGJveE11bHRpPExhYmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIExpc3RFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTGlzdEl0ZW1FbGVtZW50IGV4dGVuZHMgRWxlbWVudD4oe1xyXG4gICAgbGlzdGJveE11bHRpOiB7IHRhZ0xhYmVsLCB0YWdMaXN0IH0sXHJcbiAgICBsaW5lYXJOYXZpZ2F0aW9uOiB7IC4uLmxuIH0sXHJcbiAgICBsaXN0TmF2aWdhdGlvbjogeyAuLi5scyB9LFxyXG4gICAgbWFuYWdlZENoaWxkcmVuOiB7IC4uLm1jIH0sXHJcbiAgICByb3ZpbmdUYWJJbmRleDogeyBvblRhYmJhYmxlSW5kZXhDaGFuZ2UsIC4uLnJ0aSB9LFxyXG4gICAgdHlwZWFoZWFkTmF2aWdhdGlvbjogeyAuLi50biB9XHJcbn06IFVzZUxpc3Rib3hNdWx0aVBhcmFtZXRlcnM8TGFiZWxFbGVtZW50LCBMaXN0RWxlbWVudD4pOiBVc2VMaXN0Ym94TXVsdGlSZXR1cm5UeXBlV2l0aEhvb2tzPExhYmVsRWxlbWVudCwgTGlzdEVsZW1lbnQsIExpc3RJdGVtRWxlbWVudD4ge1xyXG5cclxuICAgIGRlYnVnTG9nKFwidXNlTGlzdGJveE11bHRpXCIpO1xyXG5cclxuICAgIC8vY29uc3QgeyB1c2VIYXNGb2N1c1Byb3BzLCBnZXRGb2N1c2VkSW5uZXIgfSA9IHVzZUhhc0ZvY3VzPExpc3RFbGVtZW50Pih7fSk7XHJcblxyXG4gICAgY29uc3QgeyB1c2VMYWJlbElucHV0LCB1c2VMYWJlbExhYmVsIH0gPSB1c2VMYWJlbDxMaXN0RWxlbWVudCwgTGFiZWxFbGVtZW50Pih7XHJcbiAgICAgICAgbGFiZWw6IHtcclxuICAgICAgICAgICAgcHJlZml4TGFiZWw6IFwiYXJpYS1saXN0Ym94LWxhYmVsLVwiLFxyXG4gICAgICAgICAgICBwcmVmaXhJbnB1dDogXCJhcmlhLWxpc3Rib3gtXCIsXHJcbiAgICAgICAgICAgIHRhZ0xhYmVsOiB0YWdMYWJlbCxcclxuICAgICAgICAgICAgdGFnSW5wdXQ6IHRhZ0xpc3RcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBsaXN0UmV0dXJuVHlwZSA9IHVzZUxpc3ROYXZpZ2F0aW9uPExpc3RFbGVtZW50LCBMaXN0SXRlbUVsZW1lbnQsIEluZm8sIG5ldmVyPih7XHJcblxyXG4gICAgICAgIGxpbmVhck5hdmlnYXRpb246IHsgLi4ubG4gfSxcclxuICAgICAgICBsaXN0TmF2aWdhdGlvbjogeyAuLi5scyB9LFxyXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbjogeyAuLi5tYyB9LFxyXG4gICAgICAgIHJvdmluZ1RhYkluZGV4OiB7XHJcbiAgICAgICAgICAgIC4uLnJ0aSxcclxuICAgICAgICAgICAgb25UYWJiYWJsZUluZGV4Q2hhbmdlOiB1c2VTdGFibGVDYWxsYmFjazxPblRhYmJhYmxlSW5kZXhDaGFuZ2U+KChpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBvblRhYmJhYmxlSW5kZXhDaGFuZ2U/LihpKTtcclxuICAgICAgICAgICAgICAgIC8qaWYgKHNlbGVjdGlvbk1vZGUgPT0gXCJmb2N1c1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gKGNoaWxkcmVuLmdldEF0KGkhKT8uc3ViSW5mby5nZXRFbGVtZW50KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0Py4oeyB0YXJnZXQsIGN1cnJlbnRUYXJnZXQ6IHRhcmdldCwgW0V2ZW50RGV0YWlsXTogeyBzZWxlY3RlZEluZGV4OiBpISB9IH0pO1xyXG4gICAgICAgICAgICAgICAgfSovXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdHlwZWFoZWFkTmF2aWdhdGlvbjogdG5cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHtcclxuICAgICAgICB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkLFxyXG4gICAgICAgIHVzZUxpc3ROYXZpZ2F0aW9uUHJvcHMsXHJcbiAgICAgICAgcm92aW5nVGFiSW5kZXg6IHsgc2V0VGFiYmFibGVJbmRleCB9XHJcbiAgICB9ID0gbGlzdFJldHVyblR5cGVcclxuXHJcbiAgICBjb25zdCB7IHVzZUxhYmVsSW5wdXRQcm9wcyB9ID0gdXNlTGFiZWxJbnB1dCgpO1xyXG5cclxuICAgIGNvbnN0IFtnZXRTaGlmdEhlbGQsIHNldFNoaWZ0SGVsZF0gPSB1c2VQYXNzaXZlU3RhdGUobnVsbCwgcmV0dXJuRmFsc2UpO1xyXG5cclxuXHJcbiAgICBjb25zdCB1c2VMaXN0Ym94TXVsdGlJdGVtID0gdXNlQ2FsbGJhY2s8VXNlTGlzdGJveE11bHRpSXRlbTxMaXN0SXRlbUVsZW1lbnQ+PigoeyBsaXN0Ym94TXVsdGlJdGVtOiB7IHNlbGVjdGVkLCBkaXNhYmxlZCwgb25TZWxlY3RlZENoYW5nZSB9LCBtYW5hZ2VkQ2hpbGQsIGxpc3ROYXZpZ2F0aW9uOiBscywgcm92aW5nVGFiSW5kZXg6IHJ0aSwgaGFzRm9jdXMgfSkgPT4ge1xyXG4gICAgICAgIGRlYnVnTG9nKFwidXNlTGlzdGJveE11bHRpSXRlbVwiLCBtYW5hZ2VkQ2hpbGQuaW5kZXgsIHNlbGVjdGVkKTtcclxuICAgICAgICB0eXBlIEUgPSBMaXN0SXRlbUVsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgZ2V0U2VsZWN0ZWQgPSB1c2VTdGFibGVHZXR0ZXIoc2VsZWN0ZWQpO1xyXG4gICAgICAgIGNvbnN0IHsgdXNlUmVmRWxlbWVudFByb3BzLCBnZXRFbGVtZW50IH0gPSB1c2VSZWZFbGVtZW50PEU+KHt9KTtcclxuICAgICAgICBjb25zdCBzdGFibGVPblNlbGVjdCA9IHVzZVN0YWJsZUNhbGxiYWNrKG9uU2VsZWN0ZWRDaGFuZ2UgPz8gKCgpID0+IHsgfSkpO1xyXG5cclxuICAgICAgICBjb25zdCB7IHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQcm9wcywgcm92aW5nVGFiSW5kZXg6IHJ0aTJfcmV0IH0gPSB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkKHsgbGlzdE5hdmlnYXRpb246IGxzLCBtYW5hZ2VkQ2hpbGQsIHJvdmluZ1RhYkluZGV4OiBydGksIHN1YkluZm86IHsgc2VsZWN0ZWQsIG9uU2VsZWN0OiBzdGFibGVPblNlbGVjdCB9IH0pO1xyXG5cclxuICAgICAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZ2V0RWxlbWVudCgpO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudCAmJiBnZXRTaGlmdEhlbGQoKSkge1xyXG4gICAgICAgICAgICAgICAgc3RhYmxlT25TZWxlY3Q/Lih7IHRhcmdldDogZWxlbWVudCwgY3VycmVudFRhcmdldDogZWxlbWVudCwgW0V2ZW50RGV0YWlsXTogeyBzZWxlY3RlZDogdHJ1ZSB9IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgW3J0aTJfcmV0LnRhYmJhYmxlXSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7IHVzZUxpc3Rib3hNdWx0aUl0ZW1Qcm9wcywgbGlzdGJveE11bHRpSXRlbTogeyBnZXRTZWxlY3RlZCwgdGFiYmFibGU6IHJ0aTJfcmV0LnRhYmJhYmxlIH0sIHJvdmluZ1RhYkluZGV4OiBydGkyX3JldCB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB1c2VMaXN0Ym94TXVsdGlJdGVtUHJvcHMocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4ge1xyXG4gICAgICAgICAgICBjb25zdCB1c2VQcmVzc1Byb3BzID0gdXNlUHJlc3M8RT4oe1xyXG4gICAgICAgICAgICAgICAgb25DbGlja1N5bmM6IGRpc2FibGVkID8gbnVsbCA6IChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGFiYmFibGVJbmRleChtYW5hZ2VkQ2hpbGQuaW5kZXgsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBzdGFibGVPblNlbGVjdD8uKHsgLi4uZSwgW0V2ZW50RGV0YWlsXTogeyBzZWxlY3RlZDogIWdldFNlbGVjdGVkKCkgfSB9KTtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9LCBcclxuICAgICAgICAgICAgICAgIGV4Y2x1ZGU6IHt9LFxyXG4gICAgICAgICAgICAgICAgaGFzRm9jdXNcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBwcm9wcy5yb2xlID0gXCJvcHRpb25cIjtcclxuICAgICAgICAgICAgLy9wcm9wc1tcImFyaWEtc2V0c2l6ZVwiXSA9IChjaGlsZENvdW50KS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAvL3Byb3BzW1wiYXJpYS1wb3NpbnNldFwiXSA9IChpbmZvLmluZGV4ICsgMSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgcHJvcHNbXCJhcmlhLXNlbGVjdGVkXCJdID0gKHJ0aTJfcmV0LnRhYmJhYmxlID8/IGZhbHNlKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBpZiAoZGlzYWJsZWQpXHJcbiAgICAgICAgICAgICAgICBwcm9wc1tcImFyaWEtZGlzYWJsZWRcIl0gPSBcInRydWVcIjtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB1c2VSZWZFbGVtZW50UHJvcHModXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzKHVzZVByZXNzUHJvcHMocHJvcHMpKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0sIFt1c2VMaXN0TmF2aWdhdGlvbkNoaWxkXSk7XHJcblxyXG4gICAgY29uc3QgdXNlTGlzdGJveE11bHRpTGFiZWwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiB1c2VMaXN0Ym94TXVsdGlMYWJlbCgpIHtcclxuICAgICAgICBmdW5jdGlvbiB1c2VMaXN0Ym94TXVsdGlMYWJlbFByb3BzKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxMYWJlbEVsZW1lbnQ+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGFiZWxFbGVtZW50PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgdXNlTGFiZWxMYWJlbFByb3BzIH0gPSB1c2VMYWJlbExhYmVsKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VMYWJlbExhYmVsUHJvcHMocHJvcHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHsgdXNlTGlzdGJveE11bHRpTGFiZWxQcm9wcyB9O1xyXG4gICAgfSwgW3VzZUxhYmVsTGFiZWxdKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVzZUxpc3Rib3hNdWx0aUl0ZW0sXHJcbiAgICAgICAgdXNlTGlzdGJveE11bHRpUHJvcHMsXHJcbiAgICAgICAgdXNlTGlzdGJveE11bHRpTGFiZWwsXHJcbiAgICAgICAgbGluZWFyTmF2aWdhdGlvbjogbGlzdFJldHVyblR5cGUubGluZWFyTmF2aWdhdGlvbixcclxuICAgICAgICBsaXN0TmF2aWdhdGlvbjogbGlzdFJldHVyblR5cGUubGlzdE5hdmlnYXRpb24sXHJcbiAgICAgICAgcm92aW5nVGFiSW5kZXg6IGxpc3RSZXR1cm5UeXBlLnJvdmluZ1RhYkluZGV4LFxyXG4gICAgICAgIHR5cGVhaGVhZE5hdmlnYXRpb246IGxpc3RSZXR1cm5UeXBlLnR5cGVhaGVhZE5hdmlnYXRpb24sXHJcbiAgICAgICAgbWFuYWdlZENoaWxkcmVuOiBsaXN0UmV0dXJuVHlwZS5tYW5hZ2VkQ2hpbGRyZW5cclxuICAgIH07XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIHVzZUxpc3Rib3hNdWx0aVByb3BzKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxMaXN0RWxlbWVudD4pOiBoLkpTWC5IVE1MQXR0cmlidXRlczxMaXN0RWxlbWVudD4ge1xyXG4gICAgICAgIHByb3BzLnJvbGUgPSBcImxpc3Rib3hcIjtcclxuICAgICAgICBwcm9wc1tcImFyaWEtbXVsdGlzZWxlY3RhYmxlXCJdID0gXCJ0cnVlXCI7XHJcbiAgICAgICAgcmV0dXJuIHVzZUxpc3ROYXZpZ2F0aW9uUHJvcHModXNlTGFiZWxJbnB1dFByb3BzKHVzZU1lcmdlZFByb3BzPExpc3RFbGVtZW50Pih7IG9uS2V5RG93biwgb25LZXlVcCwgb25mb2N1c291dDogb25Gb2N1c091dCB9LCBwcm9wcykpKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIG9uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KSB7IGlmIChlLmtleSA9PSBcIlNoaWZ0XCIpIHNldFNoaWZ0SGVsZCh0cnVlKTsgfVxyXG4gICAgZnVuY3Rpb24gb25LZXlVcChlOiBLZXlib2FyZEV2ZW50KSB7IGlmIChlLmtleSA9PSBcIlNoaWZ0XCIpIHNldFNoaWZ0SGVsZChmYWxzZSk7IH1cclxuICAgIGZ1bmN0aW9uIG9uRm9jdXNPdXQoXzogRm9jdXNFdmVudCkgeyBzZXRTaGlmdEhlbGQoZmFsc2UpOyB9XHJcblxyXG59IiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgVXNlSGFzRm9jdXNQYXJhbWV0ZXJzLCB1c2VMaXN0TmF2aWdhdGlvbiwgVXNlTGlzdE5hdmlnYXRpb25QYXJhbWV0ZXJzLCB1c2VNZXJnZWRQcm9wcywgdXNlUHJlc3MsIHVzZVJhbmRvbUlkLCB1c2VSZWZFbGVtZW50LCB1c2VTdGFibGVDYWxsYmFjaywgdXNlU3RhYmxlR2V0dGVyLCB1c2VTdGF0ZSwgdXNlVGltZW91dCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQYXJhbWV0ZXJzLCBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkUmV0dXJuVHlwZUluZm8sIFVzZUxpc3ROYXZpZ2F0aW9uUmV0dXJuVHlwZUluZm8gfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtbGlzdC1uYXZpZ2F0aW9uXCI7XHJcbmltcG9ydCB7IHJldHVybkZhbHNlLCB1c2VFbnN1cmVTdGFiaWxpdHksIHVzZVBhc3NpdmVTdGF0ZSB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1wYXNzaXZlLXN0YXRlXCI7XHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgZGVidWdMb2csIHdhcm5Pbk92ZXJ3cml0ZSB9IGZyb20gXCIuL3Byb3BzXCI7XHJcbmltcG9ydCB7IHVzZVNvZnREaXNtaXNzLCBVc2VTb2Z0RGlzbWlzc1BhcmFtZXRlcnMsIFVzZVNvZnREaXNtaXNzUmV0dXJuVHlwZUluZm8gfSBmcm9tIFwiLi91c2UtbW9kYWxcIjtcclxuXHJcbmludGVyZmFjZSBNU1Age1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaGF0IHJvbGUgdGhlIHN1cmZhY2UgZnVsZmlsbHMuXHJcbiAgICAgKiBcclxuICAgICAqIEdlbmVyYWwgbWVudXMgc2hvdWxkIHVzZSBcIm1lbnVcIi4gXCJkaWFsb2dcIiBjYW4gYmUgdXNlZCBmb3IgZ2VuZXJpYyBwb3AtdXAgdGhpbmdzLlxyXG4gICAgICovXHJcbiAgICByb2xlOiBcImRpYWxvZ1wiIHwgXCJtZW51XCIgfCBcInRyZWVcIiB8IFwiZ3JpZFwiIHwgXCJsaXN0Ym94XCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIHRoaXMgbWVudSBzdXJmYWNlIGlzIG9wZW5lZCwgYXQgbGVhc3Qgb25lIGVsZW1lbnQgaW4gaXQgbXVzdCBiZSBmb2N1c2VkLlxyXG4gICAgICogXHJcbiAgICAgKiBUaGlzIGNvbnRyb2xzIHdoYXQgaXMgZm9jdXNlZCAoZS5nLiB0aGUgZmlyc3QgbWVudSBpdGVtLCB0aGUgd2hvbGUgc3VyZmFjZSBpdHNlbGYsIGV0Yy4pXHJcbiAgICAgKi9cclxuICAgIHNlbmRGb2N1c1RvTWVudSgpOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBNZW51U3VyZmFjZU9taXRzID0ga2V5b2YgTVNQO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VNZW51U3VyZmFjZVBhcmFtZXRlcnM8X1MgZXh0ZW5kcyBFbGVtZW50LCBfQiBleHRlbmRzIEVsZW1lbnQsIE1TTyBleHRlbmRzIE1lbnVTdXJmYWNlT21pdHM+IGV4dGVuZHMgVXNlU29mdERpc21pc3NQYXJhbWV0ZXJzPFwiZ2V0RWxlbWVudHNcIj4ge1xyXG4gICAgbWVudVN1cmZhY2U6IE9taXQ8TVNQLCBNU08+O1xyXG4gICAgLy9oYXNGb2N1c0J1dHRvbjogVXNlSGFzRm9jdXNQYXJhbWV0ZXJzPEI+O1xyXG4gICAgLy9oYXNGb2N1c1N1cmZhY2U6IFVzZUhhc0ZvY3VzUGFyYW1ldGVyczxTPjtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZU1lbnVQYXJhbWV0ZXJzPFMgZXh0ZW5kcyBFbGVtZW50LCBCIGV4dGVuZHMgRWxlbWVudCwgTVNPIGV4dGVuZHMgTWVudVN1cmZhY2VPbWl0cz4gZXh0ZW5kcyBVc2VNZW51U3VyZmFjZVBhcmFtZXRlcnM8UywgQiwgTVNPIHwgXCJyb2xlXCIgfCBcInNlbmRGb2N1c1RvTWVudVwiPiwgVXNlTGlzdE5hdmlnYXRpb25QYXJhbWV0ZXJzPG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlcj4ge1xyXG4gICAgbWVudToge1xyXG4gICAgICAgIG9uT3BlbigpOiB2b2lkO1xyXG5cclxuICAgICAgICAvLyBDb3JyZXNwb25kcyB0byB3aGF0IGFycm93IGtleSBjYW4gb3BlbiB0aGlzIG1lbnVcclxuICAgICAgICBvcGVuRGlyZWN0aW9uOiBcImRvd25cIiB8IFwidXBcIiB8IFwibGVmdFwiIHwgXCJyaWdodFwiIHwgbnVsbDtcclxuICAgIH1cclxuICAgIG1lbnVCdXR0b25IYXNGb2N1czogVXNlSGFzRm9jdXNQYXJhbWV0ZXJzPEI+O1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlTWVudUJ1dHRvblBhcmFtZXRlcnMgZXh0ZW5kcyBVc2VMaXN0TmF2aWdhdGlvbkNoaWxkUGFyYW1ldGVyczxuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyPiB7IH1cclxuZXhwb3J0IGludGVyZmFjZSBVc2VNZW51SXRlbVBhcmFtZXRlcnMgZXh0ZW5kcyBPbWl0PFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQYXJhbWV0ZXJzPHt9LCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXI+LCBcInN1YkluZm9cIj4geyB9XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZU1lbnVTdXJmYWNlUmV0dXJuVHlwZUluZm88X01lbnVQYXJlbnRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgX01lbnVCdXR0b25FbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VTb2Z0RGlzbWlzc1JldHVyblR5cGVJbmZvIHtcclxuICAgIG1lbnVTdXJmYWNlOiB7XHJcbiAgICAgICAgLypnZXRCdXR0b25Gb2N1c2VkKCk6IGJvb2xlYW47XHJcbiAgICAgICAgZ2V0QnV0dG9uRm9jdXNlZElubmVyKCk6IGJvb2xlYW47XHJcbiAgICAgICAgZ2V0QnV0dG9uTGFzdEZvY3VzZWQoKTogYm9vbGVhbjtcclxuICAgICAgICBnZXRCdXR0b25MYXN0Rm9jdXNlZElubmVyKCk6IGJvb2xlYW47XHJcbiAgICAgICAgZ2V0QnV0dG9uRWxlbWVudDogKCkgPT4gTWVudUJ1dHRvbkVsZW1lbnQgfCBudWxsO1xyXG4gICAgICAgIGdldFN1cmZhY2VGb2N1c2VkKCk6IGJvb2xlYW47XHJcbiAgICAgICAgZ2V0U3VyZmFjZUZvY3VzZWRJbm5lcigpOiBib29sZWFuO1xyXG4gICAgICAgIGdldFN1cmZhY2VMYXN0Rm9jdXNlZCgpOiBib29sZWFuO1xyXG4gICAgICAgIGdldFN1cmZhY2VMYXN0Rm9jdXNlZElubmVyKCk6IGJvb2xlYW47XHJcbiAgICAgICAgZ2V0U3VyZmFjZUVsZW1lbnQ6ICgpID0+IE1lbnVQYXJlbnRFbGVtZW50IHwgbnVsbDtcclxuICAgICAgICBnZXRBY3RpdmVFbGVtZW50OiAoKSA9PiBFbGVtZW50IHwgbnVsbDtcclxuICAgICAgICBnZXRMYXN0QWN0aXZlRWxlbWVudDogKCkgPT4gRWxlbWVudDtcclxuICAgICAgICBnZXRXaW5kb3dGb2N1c2VkOiAoKSA9PiBib29sZWFuOyovXHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBVc2VNZW51UmV0dXJuVHlwZUluZm88TWVudVN1cmZhY2VFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgX01lbnVQYXJlbnRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTWVudUl0ZW1FbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTWVudUJ1dHRvbkVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZU1lbnVTdXJmYWNlUmV0dXJuVHlwZUluZm88TWVudVN1cmZhY2VFbGVtZW50LCBNZW51QnV0dG9uRWxlbWVudD4sIFVzZUxpc3ROYXZpZ2F0aW9uUmV0dXJuVHlwZUluZm88TWVudUl0ZW1FbGVtZW50LCB7fSwgbmV2ZXI+IHsgfVxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZU1lbnVCdXR0b25SZXR1cm5UeXBlSW5mbyBleHRlbmRzIFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRSZXR1cm5UeXBlSW5mbzxuZXZlcj4geyB9XHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlTWVudUl0ZW1SZXR1cm5UeXBlSW5mbzxNZW51SXRlbUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRSZXR1cm5UeXBlSW5mbzxNZW51SXRlbUVsZW1lbnQ+IHsgfVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VNZW51U3VyZmFjZVJldHVyblR5cGVXaXRoSG9va3M8TWVudVN1cmZhY2VFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTWVudVBhcmVudEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBNZW51QnV0dG9uRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlTWVudVN1cmZhY2VSZXR1cm5UeXBlSW5mbzxNZW51U3VyZmFjZUVsZW1lbnQsIE1lbnVCdXR0b25FbGVtZW50PiB7XHJcbiAgICB1c2VNZW51U3VyZmFjZVNlbnRpbmVsOiA8RSBleHRlbmRzIEVsZW1lbnQ+KCkgPT4geyB1c2VNZW51U2VudGluZWxQcm9wczogKHA6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxFPjsgfTtcclxuICAgIHVzZU1lbnVTdXJmYWNlUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TWVudVN1cmZhY2VFbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8TWVudVN1cmZhY2VFbGVtZW50PjtcclxuICAgIHVzZU1lbnVTdXJmYWNlQ2hpbGRQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxNZW51UGFyZW50RWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPE1lbnVQYXJlbnRFbGVtZW50PjsgIC8vIE5PVCBhIG1lbnUgaXRlbSEgVGhpcyBpcyB0aGUgbWVudSwgZGlhbG9nLCBwb3B1cCwgd2hhdGV2ZXIgYWN0dWFsbHkgZ2V0cyB0aGUgcm9sZSwgYXMgb3Bwb3NlZCB0byB0aGUgc3VyZmFjZSB0aGF0IGxpc3RlbnMgdG8gbW91c2UgYW5kIGtleWJvYXJkIGV2ZW50c1xyXG4gICAgdXNlTWVudVN1cmZhY2VCdXR0b25Qcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxNZW51QnV0dG9uRWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPGFueT47XHJcblxyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlTWVudVJldHVyblR5cGVXaXRoSG9va3M8TWVudVN1cmZhY2VFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTWVudVBhcmVudEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBNZW51SXRlbUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBNZW51QnV0dG9uRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlTWVudVJldHVyblR5cGVJbmZvPE1lbnVTdXJmYWNlRWxlbWVudCwgTWVudVBhcmVudEVsZW1lbnQsIE1lbnVJdGVtRWxlbWVudCwgTWVudUJ1dHRvbkVsZW1lbnQ+IHtcclxuICAgIHVzZU1lbnVTZW50aW5lbDogPEUgZXh0ZW5kcyBFbGVtZW50PigpID0+IHsgdXNlTWVudVNlbnRpbmVsUHJvcHM6IChwOiBoLkpTWC5IVE1MQXR0cmlidXRlczxFPikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT47IH07XHJcbiAgICB1c2VNZW51UHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TWVudVBhcmVudEVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxNZW51UGFyZW50RWxlbWVudD47XHJcbiAgICB1c2VNZW51U3VyZmFjZVByb3BzOiAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPE1lbnVTdXJmYWNlRWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPE1lbnVTdXJmYWNlRWxlbWVudD47XHJcbiAgICB1c2VNZW51QnV0dG9uUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TWVudUJ1dHRvbkVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxNZW51QnV0dG9uRWxlbWVudD47XHJcbiAgICB1c2VNZW51SXRlbTogVXNlTWVudUl0ZW08TWVudUl0ZW1FbGVtZW50PjtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZU1lbnVCdXR0b25SZXR1cm5UeXBlV2l0aEhvb2tzIGV4dGVuZHMgVXNlTWVudUJ1dHRvblJldHVyblR5cGVJbmZvIHsgfVxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZU1lbnVJdGVtUmV0dXJuVHlwZVdpdGhIb29rczxNZW51SXRlbUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZU1lbnVJdGVtUmV0dXJuVHlwZUluZm88TWVudUl0ZW1FbGVtZW50PiB7IH1cclxuXHJcbi8vZXhwb3J0IGludGVyZmFjZSBVc2VNZW51SXRlbVJldHVyblR5cGVJbmZvPE1lbnVJdGVtRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlTGlzdE5hdmlnYXRpb25DaGlsZFJldHVyblR5cGVJbmZvPE1lbnVJdGVtRWxlbWVudD4ge31cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlTWVudUl0ZW1SZXR1cm5UeXBlV2l0aEhvb2tzPE1lbnVJdGVtRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlTWVudUl0ZW1SZXR1cm5UeXBlSW5mbzxNZW51SXRlbUVsZW1lbnQ+IHtcclxuICAgIHVzZU1lbnVJdGVtUHJvcHM6IFVzZU1lbnVJdGVtUHJvcHM8TWVudUl0ZW1FbGVtZW50PjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgVXNlTWVudUl0ZW1Qcm9wczxNZW51SXRlbUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiA9IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TWVudUl0ZW1FbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8TWVudUl0ZW1FbGVtZW50PjtcclxuXHJcbmV4cG9ydCB0eXBlIFVzZU1lbnVJdGVtPE1lbnVJdGVtRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+ID0gKGFyZ3M6IFVzZU1lbnVJdGVtUGFyYW1ldGVycykgPT4gVXNlTWVudUl0ZW1SZXR1cm5UeXBlV2l0aEhvb2tzPE1lbnVJdGVtRWxlbWVudD47XHJcblxyXG4vL2V4cG9ydCBpbnRlcmZhY2UgVXNlTWVudUNoaWxkSW5mb0Jhc2U8SyBleHRlbmRzIHN0cmluZz4gZXh0ZW5kcyBMaXN0TmF2aWdhdGlvbkNoaWxkSW5mb0Jhc2U8Sz4ge31cclxuXHJcbi8vZXhwb3J0IHR5cGUgVXNlTWVudUNoaWxkUGFyYW1ldGVyczxJIGV4dGVuZHMgVXNlTWVudUNoaWxkSW5mbz4gPSBJO1xyXG5cclxuLyoqXHJcbiAqIEEgbWVudSBpcyBhIHBvcHVwIGNvbnRyb2wgdGhhdCBjb250YWlucyBhIGxpc3Qgb2YgbWVudSBpdGVtcywgYW5kIHRoYXQncyBpdC5cclxuICogSXQgaGFzIHZlcnkgd2VsbC1kZWZpbmVkIGxvZ2ljIGZvciBtYW5hZ2luZyB0aG9zZSBpdGVtcyBhcyB0aGUgbWVudSdzIHN0YXRlIGNoYW5nZXMuXHJcbiAqIFxyXG4gKiBBIE1lbnVCYXNlIGlzIGp1c3QgdGhlIFwicG9wdXBcIiBwYXJ0IHdpdGhvdXQgdGhlIFwibGlzdCBvZiBtZW51IGl0ZW1zXCIgcGFydC4gSXQgY2FuXHJcbiAqIChyZWFsbHksIG11c3QpIGhhdmUgaW50ZXJhY3RpdmUgY29udHJvbHMsIGJ1dCB0aGVzZSBjb250cm9scyBhcmUgYWxsb3dlZCB0byBiZSBtb3JlXHJcbiAqIGZyZWUtZm9ybS4gVGhpcyBtZWFucyB0aGF0LCBsaWtlIGEgZGlhbG9nLCB5b3UgbXVzdCB0ZWxsIHRoaXMgaG9va1xyXG4gKiB3aGVyZSB3aXRoaW4gdGhlIHBvcHVwIHRvIHNlbmQgZm9jdXMgd2hlbiBvcGVuZWQgKGZvciBhIG1lbnUgaXQncyBqdXN0IHRoZSBmaXJzdFxyXG4gKiBtZW51IGl0ZW0sIGJ1dCB3aXRoIGN1c3RvbSBjb250ZW50IHlvdSdsbCBuZWVkIHRvIHByb3ZpZGUgdGhpcykuXHJcbiAqIFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZU1lbnVTdXJmYWNlPE1lbnVTdXJmYWNlRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIE1lbnVQYXJlbnRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTWVudUJ1dHRvbkVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50Pih7IHNvZnREaXNtaXNzLCBtZW51U3VyZmFjZTogeyBzZW5kRm9jdXNUb01lbnUsIHJvbGUgfSwgYWN0aXZlRWxlbWVudCB9OiBVc2VNZW51U3VyZmFjZVBhcmFtZXRlcnM8TWVudVN1cmZhY2VFbGVtZW50LCBNZW51QnV0dG9uRWxlbWVudCwgbmV2ZXI+KTogVXNlTWVudVN1cmZhY2VSZXR1cm5UeXBlV2l0aEhvb2tzPE1lbnVTdXJmYWNlRWxlbWVudCwgTWVudVBhcmVudEVsZW1lbnQsIE1lbnVCdXR0b25FbGVtZW50PiB7XHJcbiAgICBkZWJ1Z0xvZyhcInVzZU1lbnVTdXJmYWNlXCIpO1xyXG4gICAgLy9jb25zdCBzZW5kRm9jdXNXaXRoaW5NZW51ID0gdXNlU3RhYmxlQ2FsbGJhY2soc2VuZEZvY3VzVG9NZW51KTtcclxuICAgIC8vY29uc3QgW2ZvY3VzVHJhcEFjdGl2ZSwgc2V0Rm9jdXNUcmFwQWN0aXZlXSA9IHVzZVN0YXRlPG51bGwgfCBib29sZWFuPihudWxsKTtcclxuICAgIGNvbnN0IHsgb3Blbiwgb25DbG9zZTogdXNlck9uQ2xvc2UgfSA9IHNvZnREaXNtaXNzO1xyXG4gICAgY29uc3Qgb25DbG9zZSA9IHVzZVN0YWJsZUNhbGxiYWNrPHR5cGVvZiB1c2VyT25DbG9zZT4oKHJlYXNvbikgPT4ge1xyXG4gICAgICAgIGlmIChyZWFzb24gIT0gXCJsb3N0LWZvY3VzXCIpIHtcclxuICAgICAgICAgICAgY29uc3Qgb3BlbmVyID0gKGdldE9wZW5lckVsZW1lbnQoKSBhcyBIVE1MRWxlbWVudCB8IG51bGwpO1xyXG4gICAgICAgICAgICBpZiAob3BlbmVyICYmIFwiZm9jdXNcIiBpbiBvcGVuZXIpXHJcbiAgICAgICAgICAgICAgICBvcGVuZXIuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdXNlck9uQ2xvc2UocmVhc29uKTtcclxuICAgIH0pXHJcbiAgICB1c2VFbnN1cmVTdGFiaWxpdHkoXCJ1c2VNZW51U3VyZmFjZVwiLCBvbkNsb3NlLCByb2xlLCBzZW5kRm9jdXNUb01lbnUpO1xyXG4gICAgY29uc3QgZ2V0SXNPcGVuID0gdXNlU3RhYmxlR2V0dGVyKG9wZW4pO1xyXG4gICAgY29uc3QgaW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSB1c2VSZWY8SW50ZXJzZWN0aW9uT2JzZXJ2ZXI+KG51bGwhKTtcclxuICAgIGNvbnN0IFtnZXRTdXJmYWNlRnVsbHlWaXNpYmxlLCBzZXRTdXJmYWNlRnVsbHlWaXNpYmxlXSA9IHVzZVBhc3NpdmVTdGF0ZShudWxsLCByZXR1cm5GYWxzZSk7XHJcbiAgICBpbnRlcnNlY3Rpb25PYnNlcnZlci5jdXJyZW50ID8/PSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMsIF9vYnNlcnZlcikgPT4ge1xyXG4gICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xyXG4gICAgICAgICAgICBzZXRTdXJmYWNlRnVsbHlWaXNpYmxlKGVudHJ5LmludGVyc2VjdGlvblJhdGlvID49IDEpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIHsgcm9vdDogbnVsbCwgdGhyZXNob2xkOiBbMCwgMV0gfSk7XHJcblxyXG4gICAgY29uc3QgWywgc2V0T3BlbmVyRWxlbWVudCwgZ2V0T3BlbmVyRWxlbWVudF0gPSB1c2VTdGF0ZTxNZW51QnV0dG9uRWxlbWVudCB8IG51bGw+KG51bGwpO1xyXG5cclxuICAgIC8vY29uc3QgeyB1c2VIYXNGb2N1c1Byb3BzOiB1c2VNZW51QmFzZUhhc0ZvY3VzUHJvcHMsIC4uLnN1cmZhY2VIYXNGb2N1cyB9ID0gdXNlSGFzRm9jdXM8TWVudVN1cmZhY2VFbGVtZW50Pih7IC4uLmhhc0ZvY3VzU3VyZmFjZSB9KTtcclxuICAgIC8vY29uc3QgeyB1c2VIYXNGb2N1c1Byb3BzOiB1c2VCdXR0b25IYXNGb2N1c1Byb3BzLCAuLi5idXR0b25IYXNGb2N1cyB9ID0gdXNlSGFzRm9jdXM8TWVudUJ1dHRvbkVsZW1lbnQ+KHsgLi4uaGFzRm9jdXNCdXR0b24gfSk7XHJcblxyXG4gICAgLy9jb25zdCB7IGdldExhc3RGb2N1c2VkSW5uZXI6IGdldE1lbnVCYXNlTGFzdEZvY3VzZWRJbm5lciB9ID0gc3VyZmFjZUhhc0ZvY3VzO1xyXG5cclxuICAgIGNvbnN0IHsgdXNlUmFuZG9tSWRTb3VyY2VFbGVtZW50LCB1c2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50IH0gPSB1c2VSYW5kb21JZDxNZW51UGFyZW50RWxlbWVudD4oeyByYW5kb21JZDogeyBwcmVmaXg6IFwiYXJpYS1tZW51LVwiIH0sIG1hbmFnZWRDaGlsZHJlbjoge30gfSk7XHJcbiAgICBjb25zdCB7IHVzZVJhbmRvbUlkU291cmNlRWxlbWVudFByb3BzIH0gPSB1c2VSYW5kb21JZFNvdXJjZUVsZW1lbnQoKTtcclxuICAgIGNvbnN0IHsgdXNlUmFuZG9tSWRSZWZlcmVuY2VyRWxlbWVudFByb3BzIH0gPSB1c2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50PE1lbnVCdXR0b25FbGVtZW50PihcImFyaWEtY29udHJvbHNcIiBhcyBuZXZlcik7XHJcblxyXG4gICAgY29uc3QgeyBnZXRFbGVtZW50OiBnZXRCdXR0b25FbGVtZW50LCB1c2VSZWZFbGVtZW50UHJvcHM6IHVzZUJ1dHRvblJlZkVsZW1lbnRQcm9wcyB9ID0gdXNlUmVmRWxlbWVudDxNZW51QnV0dG9uRWxlbWVudD4oeyBvbkVsZW1lbnRDaGFuZ2U6IHNldE9wZW5lckVsZW1lbnQgfSk7XHJcblxyXG4gICAgY29uc3QgeyBnZXRFbGVtZW50OiBnZXRNZW51RWxlbWVudCwgdXNlUmVmRWxlbWVudFByb3BzOiB1c2VNZW51QmFzZVJlZkVsZW1lbnRQcm9wcyB9ID0gdXNlUmVmRWxlbWVudDxNZW51U3VyZmFjZUVsZW1lbnQ+KHt9KTtcclxuICAgIGNvbnN0IHsgdXNlU29mdERpc21pc3NQcm9wcywgLi4uc29mdERpc21pc3NSZXR1cm4gfSA9IHVzZVNvZnREaXNtaXNzPGFueT4oe1xyXG4gICAgICAgIHNvZnREaXNtaXNzOiB7XHJcbiAgICAgICAgICAgIC4uLnNvZnREaXNtaXNzLFxyXG4gICAgICAgICAgICBnZXRFbGVtZW50czogKCkgPT4gKFtnZXRCdXR0b25FbGVtZW50KCksIGdldE1lbnVFbGVtZW50KCldKSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFjdGl2ZUVsZW1lbnRcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICBjb25zdCB1c2VNZW51U3VyZmFjZVByb3BzID0gKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxNZW51U3VyZmFjZUVsZW1lbnQ+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TWVudVN1cmZhY2VFbGVtZW50PiA9PiB7XHJcbiAgICAgICAgZnVuY3Rpb24gb25LZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICAgICAgY29uc3Qgb3BlbiA9IGdldElzT3BlbigpO1xyXG4gICAgICAgICAgICBpZiAoZS5rZXkgPT0gXCJFc2NhcGVcIiAmJiBvcGVuKSB7XHJcbiAgICAgICAgICAgICAgICBvbkNsb3NlKFwiZXNjYXBlXCIpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB1c2VTb2Z0RGlzbWlzc1Byb3BzKCh1c2VNZW51QmFzZVJlZkVsZW1lbnRQcm9wcygodXNlTWVyZ2VkUHJvcHM8TWVudVN1cmZhY2VFbGVtZW50Pih7IG9uS2V5RG93biB9LCAocHJvcHMpKSkpKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHVzZU1lbnVTdXJmYWNlQnV0dG9uUHJvcHMgPSAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPE1lbnVCdXR0b25FbGVtZW50Pik6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPE1lbnVCdXR0b25FbGVtZW50PiA9PiB7XHJcbiAgICAgICAgcHJvcHNbXCJhcmlhLWV4cGFuZGVkXCJdID0gd2Fybk9uT3ZlcndyaXRlKFwidXNlTWVudVN1cmZhY2VCdXR0b25Qcm9wc1wiLCBcImFyaWEtZXhwYW5kZWRcIiwgb3Blbiwgb3Blbi50b1N0cmluZygpKTtcclxuICAgICAgICBwcm9wc1tcImFyaWEtaGFzcG9wdXBcIl0gPSB3YXJuT25PdmVyd3JpdGUoXCJ1c2VNZW51U3VyZmFjZUJ1dHRvblByb3BzXCIsIFwiYXJpYS1oYXNwb3B1cFwiLCByb2xlLCByb2xlKTtcclxuICAgICAgICByZXR1cm4gdXNlQnV0dG9uUmVmRWxlbWVudFByb3BzKCh1c2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50UHJvcHMocHJvcHMpKSk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG5cclxuICAgICAgICBpZiAob3BlbiA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBzZW5kRm9jdXNUb01lbnU/LigpO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghZ2V0U3VyZmFjZUZ1bGx5VmlzaWJsZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0TWVudUVsZW1lbnQoKT8uc2Nyb2xsSW50b1ZpZXcoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9LCBbb3Blbl0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHVzZU1lbnVTdXJmYWNlQ2hpbGRQcm9wcyhwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TWVudVBhcmVudEVsZW1lbnQ+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TWVudVBhcmVudEVsZW1lbnQ+IHtcclxuICAgICAgICBwcm9wcy5yb2xlID0gcm9sZTtcclxuICAgICAgICByZXR1cm4gdXNlUmFuZG9tSWRTb3VyY2VFbGVtZW50UHJvcHMocHJvcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlTWVudVN1cmZhY2VDaGlsZFByb3BzLFxyXG4gICAgICAgIHVzZU1lbnVTdXJmYWNlU2VudGluZWw6IHVzZUNhbGxiYWNrKDxFIGV4dGVuZHMgRWxlbWVudD4oKSA9PiB7XHJcbiAgICAgICAgICAgIGRlYnVnTG9nKFwidXNlTWVudVN1cmZhY2VTZW50aW5lbFwiKTtcclxuICAgICAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgICAgICAgdXNlU2VudGluZWxQcm9wczogdXNlTWVudVNlbnRpbmVsUHJvcHMsXHJcbiAgICAgICAgICAgICAgICAuLi5yZXN0XHJcbiAgICAgICAgICAgIH0gPSB1c2VGb2N1c1NlbnRpbmVsPEU+KHtcclxuICAgICAgICAgICAgICAgIGZvY3VzU2VudGluZWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBvcGVuOiBvcGVuID09PSB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xvc2U6ICgpID0+IG9uQ2xvc2UoXCJlc2NhcGVcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgc2VuZEZvY3VzVG9NZW51XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4geyB1c2VNZW51U2VudGluZWxQcm9wcywgLi4ucmVzdCB9O1xyXG4gICAgICAgIH0sIFtvcGVuLCBvbkNsb3NlXSksXHJcbiAgICAgICAgdXNlTWVudVN1cmZhY2VQcm9wcyxcclxuICAgICAgICB1c2VNZW51U3VyZmFjZUJ1dHRvblByb3BzLFxyXG4gICAgICAgIG1lbnVTdXJmYWNlOiB7XHJcbiAgICAgICAgICAgIC8qZ2V0QWN0aXZlRWxlbWVudDogYnV0dG9uSGFzRm9jdXMuZ2V0QWN0aXZlRWxlbWVudCxcclxuICAgICAgICAgICAgZ2V0TGFzdEFjdGl2ZUVsZW1lbnQ6IGJ1dHRvbkhhc0ZvY3VzLmdldExhc3RBY3RpdmVFbGVtZW50LFxyXG4gICAgICAgICAgICBnZXRCdXR0b25FbGVtZW50OiBidXR0b25IYXNGb2N1cy5nZXRFbGVtZW50LFxyXG4gICAgICAgICAgICBnZXRCdXR0b25Gb2N1c2VkOiBidXR0b25IYXNGb2N1cy5nZXRGb2N1c2VkLFxyXG4gICAgICAgICAgICBnZXRCdXR0b25Gb2N1c2VkSW5uZXI6IGJ1dHRvbkhhc0ZvY3VzLmdldEZvY3VzZWRJbm5lcixcclxuICAgICAgICAgICAgZ2V0QnV0dG9uTGFzdEZvY3VzZWQ6IGJ1dHRvbkhhc0ZvY3VzLmdldExhc3RGb2N1c2VkLFxyXG4gICAgICAgICAgICBnZXRCdXR0b25MYXN0Rm9jdXNlZElubmVyOiBidXR0b25IYXNGb2N1cy5nZXRMYXN0Rm9jdXNlZElubmVyLFxyXG4gICAgICAgICAgICBnZXRTdXJmYWNlRWxlbWVudDogc3VyZmFjZUhhc0ZvY3VzLmdldEVsZW1lbnQsXHJcbiAgICAgICAgICAgIGdldFN1cmZhY2VGb2N1c2VkOiBzdXJmYWNlSGFzRm9jdXMuZ2V0Rm9jdXNlZCxcclxuICAgICAgICAgICAgZ2V0U3VyZmFjZUZvY3VzZWRJbm5lcjogc3VyZmFjZUhhc0ZvY3VzLmdldEZvY3VzZWRJbm5lcixcclxuICAgICAgICAgICAgZ2V0U3VyZmFjZUxhc3RGb2N1c2VkOiBzdXJmYWNlSGFzRm9jdXMuZ2V0TGFzdEZvY3VzZWQsXHJcbiAgICAgICAgICAgIGdldFN1cmZhY2VMYXN0Rm9jdXNlZElubmVyOiBzdXJmYWNlSGFzRm9jdXMuZ2V0TGFzdEZvY3VzZWRJbm5lcixcclxuICAgICAgICAgICAgZ2V0V2luZG93Rm9jdXNlZDogYnV0dG9uSGFzRm9jdXMuZ2V0V2luZG93Rm9jdXNlZCwqL1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLi4uc29mdERpc21pc3NSZXR1cm5cclxuXHJcbiAgICAgICAgLy9nZXRNZW51QmFzZUxhc3RGb2N1c2VkSW5uZXIsXHJcbiAgICAgICAgLy9nZXRNZW51QmFzZUJ1dHRvbkxhc3RGb2N1c2VkSW5uZXIsXHJcbiAgICAgICAgLy9vcGVuLFxyXG4gICAgICAgIC8vb25PcGVuLFxyXG4gICAgICAgIC8vb25DbG9zZVxyXG4gICAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgRlNQIGV4dGVuZHMgTVNQIHtcclxuICAgIG9wZW46IGJvb2xlYW47XHJcbiAgICBvbkNsb3NlKCk6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEZvY3VzU2VudGluZWxPbWl0cyA9IGtleW9mIEZTUDtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlRm9jdXNTZW50aW5lbFBhcmFtZXRlcnMge1xyXG4gICAgZm9jdXNTZW50aW5lbDogeyBzZW5kRm9jdXNUb01lbnU6IE1TUFtcInNlbmRGb2N1c1RvTWVudVwiXTsgb3BlbjogYm9vbGVhbjsgb25DbG9zZSgpOiB2b2lkOyB9O1xyXG59XHJcblxyXG5cclxuLy8gQSBmb2N1cyBzZW50aW5hbCBpcyBhIGhpZGRlbiBidXQgZm9jdXNhYmxlIGVsZW1lbnQgdGhhdCBjb21lcyBhdCB0aGUgc3RhcnQgb3IgZW5kIFxyXG4vLyBvZiB0aGUgb3V0LW9mLXBsYWNlLWZvY3VzYWJsZSBjb21wb25lbnQgdGhhdCwgd2hlbiBhY3RpdmF0ZWQgb3IgZm9jdXNlZCBvdmVyLCBjbG9zZXMgdGhlIGNvbXBvbmVudFxyXG4vLyAoaWYgZm9jdXNlZCB3aXRoaW4gMTAwbXMgb2YgdGhlIG9wZW4gcHJvcCBjaGFuZ2luZywgaW5zdGVhZCBvZlxyXG4vLyBjbG9zaW5nLCBmb2N1c2luZyB0aGUgc2VudGluZWwgaW1tZWRpYXRlbHkgYXNrcyBpdCB0byBmb2N1cyBpdHNlbGYpLlxyXG4vLyBUaGlzIGV4aXN0cyBmb3IgdGhpbmdzIGxpa2UgbWVudXMgd2hpY2ggY2FuIGhhdmUgZm9jdXMgYnV0IGFsc28gbmVlZCBhIHdheSB0byByZXR1cm5cclxuLy8gdG8gd2hhdGV2ZXIgb3V0LW9mLXBsYWNlIHBhcmVudCB0aGV5IGNhbWUgZnJvbSB3aGVuIG5hdHVyYWxseSB0YWJiZWQgb3V0IG9mIChhcyBvcHBvc2VkXHJcbi8vIHRvIGRpYWxvZ3Mgd2hpY2ggbG9vcCBiYWNrIGFyb3VuZCB3aGVuIHRhYmJlZCBvdXQgb2YpLiBXaGlsZSBtb3VzZSB1c2VycyBjYW4gY2xpY2sgb3V0IG9mIGEgbWVudVxyXG4vLyBhbmQga2V5Ym9hcmQgdXNlcnMgY2FuIGVzY2FwZSB0byBjbG9zZSBhIG1lbnUsIHNjcmVlbiByZWFkZXJzIGFuZCBvdGhlciBpbnB1dCBtZXRob2RzIFxyXG4vLyB0aGF0IGRvbid0IHVzZSB0aG9zZSB0d28gd291bGQgYmVjb21lIHN0dWNrLlxyXG5leHBvcnQgZnVuY3Rpb24gdXNlRm9jdXNTZW50aW5lbDxFIGV4dGVuZHMgRWxlbWVudD4oeyBmb2N1c1NlbnRpbmVsOiB7IG9wZW4sIG9uQ2xvc2UsIHNlbmRGb2N1c1RvTWVudSB9IH06IFVzZUZvY3VzU2VudGluZWxQYXJhbWV0ZXJzKSB7XHJcbiAgICBkZWJ1Z0xvZyhcInVzZUZvY3VzU2VudGluZWxcIik7XHJcbiAgICBjb25zdCBnZXRTZW5kRm9jdXNXaXRoaW5NZW51ID0gdXNlU3RhYmxlR2V0dGVyKHNlbmRGb2N1c1RvTWVudSk7XHJcbiAgICBjb25zdCBzdGFibGVPbkNsb3NlID0gdXNlU3RhYmxlQ2FsbGJhY2sob25DbG9zZSk7XHJcblxyXG4gICAgY29uc3QgW2ZpcnN0U2VudGluZWxJc0FjdGl2ZSwgc2V0Rmlyc3RTZW50aW5lbElzQWN0aXZlXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIHVzZVRpbWVvdXQoeyBjYWxsYmFjazogKCkgPT4geyBzZXRGaXJzdFNlbnRpbmVsSXNBY3RpdmUob3Blbik7IH0sIHRpbWVvdXQ6IDEwMCwgdHJpZ2dlckluZGV4OiBgJHtvcGVufS0ke2ZpcnN0U2VudGluZWxJc0FjdGl2ZX1gIH0pO1xyXG5cclxuXHJcbiAgICBjb25zdCBvbkZvY3VzID0gZmlyc3RTZW50aW5lbElzQWN0aXZlID8gKCgpID0+IHN0YWJsZU9uQ2xvc2UoKSkgOiAoKCkgPT4gZ2V0U2VuZEZvY3VzV2l0aGluTWVudSgpPy4oKSk7XHJcbiAgICBjb25zdCBvbkNsaWNrID0gKCkgPT4gc3RhYmxlT25DbG9zZSgpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlU2VudGluZWxQcm9wczogZnVuY3Rpb24gKHsgdGFiSW5kZXgsIC4uLnAgfTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8RT4pOiBoLkpTWC5IVE1MQXR0cmlidXRlczxFPiB7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRQcm9wczxFPih7IG9uRm9jdXMsIG9uQ2xpY2ssIHRhYkluZGV4OiB3YXJuT25PdmVyd3JpdGUoXCJ1c2VGb2N1c1NlbnRpbmVsXCIsIFwidGFiSW5kZXhcIiwgdGFiSW5kZXgsIDApIH0sIHApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZU1lbnU8TWVudVN1cmZhY2VFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTWVudVBhcmVudEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBNZW51SXRlbUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBNZW51QnV0dG9uRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KHsgbWVudUJ1dHRvbkhhc0ZvY3VzLCBsaW5lYXJOYXZpZ2F0aW9uLCBsaXN0TmF2aWdhdGlvbiwgbWFuYWdlZENoaWxkcmVuLCBtZW51U3VyZmFjZSwgcm92aW5nVGFiSW5kZXgsIHNvZnREaXNtaXNzLCB0eXBlYWhlYWROYXZpZ2F0aW9uLCBtZW51LCBhY3RpdmVFbGVtZW50IH06IFVzZU1lbnVQYXJhbWV0ZXJzPE1lbnVTdXJmYWNlRWxlbWVudCwgTWVudUJ1dHRvbkVsZW1lbnQsIG5ldmVyPik6IFVzZU1lbnVSZXR1cm5UeXBlV2l0aEhvb2tzPE1lbnVTdXJmYWNlRWxlbWVudCwgTWVudVBhcmVudEVsZW1lbnQsIE1lbnVJdGVtRWxlbWVudCwgTWVudUJ1dHRvbkVsZW1lbnQ+IHtcclxuXHJcbiAgICBkZWJ1Z0xvZyhcInVzZU1lbnVcIik7XHJcbiAgICBjb25zdCB7IG9uT3BlbiB9ID0gbWVudTtcclxuICAgIGNvbnN0IHsgb3Blbiwgb25DbG9zZSB9ID0gc29mdERpc21pc3M7XHJcblxyXG4gICAgY29uc3Qge1xyXG4gICAgICAgIHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGQsXHJcbiAgICAgICAgdXNlTGlzdE5hdmlnYXRpb25Qcm9wcyxcclxuICAgICAgICAuLi51c2VMaXN0TmF2UmV0dXJuXHJcbiAgICB9ID0gdXNlTGlzdE5hdmlnYXRpb248TWVudVBhcmVudEVsZW1lbnQsIE1lbnVJdGVtRWxlbWVudCwge30sIHN0cmluZz4oe1xyXG4gICAgICAgIGxpbmVhck5hdmlnYXRpb24sXHJcbiAgICAgICAgbGlzdE5hdmlnYXRpb24sXHJcbiAgICAgICAgbWFuYWdlZENoaWxkcmVuLFxyXG4gICAgICAgIHJvdmluZ1RhYkluZGV4LFxyXG4gICAgICAgIHR5cGVhaGVhZE5hdmlnYXRpb25cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHsgbWFuYWdlZENoaWxkcmVuOiB7IGNoaWxkcmVuIH0gfSA9IHVzZUxpc3ROYXZSZXR1cm47XHJcblxyXG5cclxuICAgIGNvbnN0IHtcclxuICAgICAgICAvKnVzZU1lbnVTZW50aW5lbCxcclxuICAgICAgICB1c2VNZW51QmFzZUJ1dHRvblByb3BzLFxyXG4gICAgICAgIHVzZU1lbnVCYXNlUHJvcHMsXHJcbiAgICAgICAgb3BlbixcclxuICAgICAgICBvbk9wZW4sXHJcbiAgICAgICAgb25DbG9zZTogX29uQ2xvc2UsKi9cclxuICAgICAgICB1c2VNZW51U3VyZmFjZUJ1dHRvblByb3BzLFxyXG4gICAgICAgIHVzZU1lbnVTdXJmYWNlUHJvcHMsXHJcbiAgICAgICAgdXNlTWVudVN1cmZhY2VTZW50aW5lbCxcclxuICAgICAgICB1c2VNZW51U3VyZmFjZUNoaWxkUHJvcHMsXHJcbiAgICAgICAgLi4ubWVudVJlc3RcclxuICAgIH0gPSB1c2VNZW51U3VyZmFjZTxNZW51U3VyZmFjZUVsZW1lbnQsIE1lbnVQYXJlbnRFbGVtZW50LCBNZW51QnV0dG9uRWxlbWVudD4oe1xyXG4gICAgICAgIG1lbnVTdXJmYWNlOiB7XHJcbiAgICAgICAgICAgIC4uLm1lbnVTdXJmYWNlLFxyXG4gICAgICAgICAgICByb2xlOiBcIm1lbnVcIixcclxuICAgICAgICAgICAgc2VuZEZvY3VzVG9NZW51OiB1c2VDYWxsYmFjaygoKSA9PiBjaGlsZHJlbi5nZXRBdCgwKT8uc3ViSW5mby5mb2N1c1NlbGYoKSwgW10pXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzb2Z0RGlzbWlzcyxcclxuICAgICAgICAvL2hhc0ZvY3VzQnV0dG9uLFxyXG4gICAgICAgIC8vaGFzRm9jdXNTdXJmYWNlLFxyXG4gICAgICAgIGFjdGl2ZUVsZW1lbnRcclxuICAgICAgICAvL3NlbmRGb2N1c1dpdGhpbk1lbnU6IGZvY3VzTWVudSA/PyAoKCkgPT4geyB9KVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgdXNlTWVudUJ1dHRvblByb3BzID0gKChwOiBoLkpTWC5IVE1MQXR0cmlidXRlczxNZW51QnV0dG9uRWxlbWVudD4pID0+IHtcclxuICAgICAgICBjb25zdCB1c2VQcmVzc1Byb3BzID0gdXNlUHJlc3M8TWVudUJ1dHRvbkVsZW1lbnQ+KHtcclxuICAgICAgICAgICAgb25DbGlja1N5bmM6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChvcGVuKVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xvc2U/LihcImVzY2FwZVwiKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBvbk9wZW4/LigpO1xyXG4gICAgICAgICAgICB9LCBcclxuICAgICAgICAgICAgZXhjbHVkZToge30sXHJcbiAgICAgICAgICAgIGhhc0ZvY3VzOiBtZW51QnV0dG9uSGFzRm9jdXNcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBwcm9wcyA9IHVzZU1lbnVTdXJmYWNlQnV0dG9uUHJvcHMocCk7XHJcbiAgICAgICAgcmV0dXJuIHVzZVByZXNzUHJvcHMocHJvcHMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgdXNlTWVudUl0ZW0gPSB1c2VDYWxsYmFjazxVc2VNZW51SXRlbTxNZW51SXRlbUVsZW1lbnQ+PigoeyBsaXN0TmF2aWdhdGlvbiwgbWFuYWdlZENoaWxkLCByb3ZpbmdUYWJJbmRleCB9KSA9PiB7XHJcbiAgICAgICAgZGVidWdMb2coXCJ1c2VNZW51SXRlbVwiLCBtYW5hZ2VkQ2hpbGQuaW5kZXgpO1xyXG5cclxuICAgICAgICB0eXBlIEUgPSBNZW51SXRlbUVsZW1lbnQ7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgdXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzLCAuLi5saXN0TmF2UmV0IH0gPSB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkKHsgbGlzdE5hdmlnYXRpb24sIG1hbmFnZWRDaGlsZCwgcm92aW5nVGFiSW5kZXgsIHN1YkluZm86IHt9IH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB1c2VNZW51SXRlbVByb3BzPFAgZXh0ZW5kcyBoLkpTWC5IVE1MQXR0cmlidXRlczxFPj4oeyAuLi5wcm9wcyB9OiBQKSB7XHJcbiAgICAgICAgICAgIHByb3BzLnJvbGUgPSBcIm1lbnVpdGVtXCI7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRQcm9wczxFPih7fSwgdXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzKHByb3BzKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4geyB1c2VNZW51SXRlbVByb3BzLCAuLi5saXN0TmF2UmV0IH07XHJcbiAgICB9LCBbXSk7XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIHVzZU1lbnVQcm9wcyhwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TWVudVBhcmVudEVsZW1lbnQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIHVzZUxpc3ROYXZpZ2F0aW9uUHJvcHModXNlTWVudVN1cmZhY2VDaGlsZFByb3BzKHByb3BzKSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlTWVudVByb3BzLFxyXG4gICAgICAgIHVzZU1lbnVTdXJmYWNlUHJvcHMsXHJcblxyXG4gICAgICAgIHVzZU1lbnVCdXR0b25Qcm9wcyxcclxuXHJcbiAgICAgICAgdXNlTWVudUl0ZW0sXHJcbiAgICAgICAgdXNlTWVudVNlbnRpbmVsOiB1c2VNZW51U3VyZmFjZVNlbnRpbmVsLFxyXG4gICAgICAgIC8vdXNlTWVudVN1Ym1lbnVJdGVtLFxyXG4gICAgICAgIC4uLnVzZUxpc3ROYXZSZXR1cm4sXHJcbiAgICAgICAgLi4ubWVudVJlc3RcclxuXHJcbiAgICAgICAgLypmb2N1c01lbnUsXHJcblxyXG4gICAgICAgIGN1cnJlbnRUeXBlYWhlYWQsXHJcbiAgICAgICAgaW52YWxpZFR5cGVhaGVhZCxcclxuXHJcbiAgICAgICAgbWFuYWdlZENoaWxkcmVuLCovXHJcblxyXG5cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyBnZW5lcmF0ZVJhbmRvbUlkLCByZXR1cm5UcnVlLCB1c2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbiwgdXNlTWFuYWdlZENoaWxkcmVuLCB1c2VNZXJnZWRQcm9wcywgdXNlUHJlc3MsIHVzZVN0YWJsZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IENoaWxkRmxhZ09wZXJhdGlvbnMsIE9uQ2hpbGRyZW5Nb3VudENoYW5nZSwgdXNlQ2hpbGRyZW5GbGFnLCBVc2VNYW5hZ2VkQ2hpbGRQYXJhbWV0ZXJzLCBVc2VNYW5hZ2VkQ2hpbGRyZW5QYXJhbWV0ZXJzLCBVc2VNYW5hZ2VkQ2hpbGRyZW5SZXR1cm5UeXBlSW5mbyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1jaGlsZC1tYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uQ2hpbGRQYXJhbWV0ZXJzLCBVc2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkUmV0dXJuVHlwZUluZm8sIFVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uUGFyYW1ldGVycywgVXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25SZXR1cm5UeXBlSW5mbyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1saXN0LW5hdmlnYXRpb25cIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyB1c2VMYWJlbCB9IGZyb20gXCIuL3VzZS1sYWJlbFwiO1xyXG5pbXBvcnQgeyBkZWJ1Z0xvZywgRW5oYW5jZWRFdmVudCwgZW5oYW5jZUV2ZW50LCBFdmVudERldGFpbCwgd2Fybk9uT3ZlcndyaXRlIH0gZnJvbSBcIi4vcHJvcHNcIjtcclxuaW1wb3J0IHsgVXNlQ2hpbGRyZW5IYXZlRm9jdXNQYXJhbWV0ZXJzLCBVc2VIYXNGb2N1c1BhcmFtZXRlcnMgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtaGFzLWZvY3VzXCI7XHJcblxyXG5cclxuZXhwb3J0IHR5cGUgVGFic0NoYW5nZUV2ZW50PEUgZXh0ZW5kcyBFbGVtZW50PiA9IHsgW0V2ZW50RGV0YWlsXTogeyBzZWxlY3RlZEluZGV4OiBudW1iZXIgfSB9ICYgUGljazxoLkpTWC5UYXJnZXRlZEV2ZW50PEU+LCBcInRhcmdldFwiIHwgXCJjdXJyZW50VGFyZ2V0XCI+O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VUYWJzUGFyYW1ldGVycyB7XHJcbiAgICB0YWJQYW5lbHM6IFVzZU1hbmFnZWRDaGlsZHJlblBhcmFtZXRlcnM8bnVtYmVyLCBuZXZlcj47XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBVc2VUYWJQYXJhbWV0ZXJzPEUgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIE9taXQ8VXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZFBhcmFtZXRlcnM8RSwgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlcj4sIFwic3ViSW5mb1wiPiB7XHJcbiAgICBoYXNGb2N1czogVXNlSGFzRm9jdXNQYXJhbWV0ZXJzPEU+O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVRhYlBhbmVsUGFyYW1ldGVycyBleHRlbmRzIFVzZU1hbmFnZWRDaGlsZFBhcmFtZXRlcnM8bnVtYmVyLCB7fSwgXCJ2aXNpYmxlXCIsIFwic3ViSW5mb1wiPiB7IH1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlVGFiUmV0dXJuVHlwZUluZm88VGFiRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZFJldHVyblR5cGVJbmZvPFRhYkVsZW1lbnQ+IHsgfVxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVRhYlJldHVyblR5cGVXaXRoSG9va3M8VGFiRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlVGFiUmV0dXJuVHlwZUluZm88VGFiRWxlbWVudD4ge1xyXG4gICAgdXNlVGFiUHJvcHMocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFRhYkVsZW1lbnQ+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8VGFiRWxlbWVudD47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlVGFiTGFiZWxQYXJhbWV0ZXJzIHsgfVxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVRhYkxpc3RQYXJhbWV0ZXJzPFRhYkVsZW1lbnQgZXh0ZW5kcyBFdmVudFRhcmdldD4gZXh0ZW5kcyBVc2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvblBhcmFtZXRlcnM8bmV2ZXIgfCBcIm9uU2VsZWN0ZWRJbmRleENoYW5nZVwiLCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXI+IHtcclxuICAgIHRhYnM6IHsgb25TZWxlY3RlZEluZGV4Q2hhbmdlKGU6IEVuaGFuY2VkRXZlbnQ8VGFiRWxlbWVudCwgRXZlbnQsIHsgc2VsZWN0ZWRJbmRleDogbnVtYmVyIH0+KTogdm9pZDsgfTtcclxuICAgIGNoaWxkcmVuSGF2ZUZvY3VzOiBVc2VDaGlsZHJlbkhhdmVGb2N1c1BhcmFtZXRlcnNbXCJjaGlsZHJlbkhhdmVGb2N1c1wiXTtcclxuXHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBVc2VUYWJMaXN0UmV0dXJuVHlwZUluZm88VGFiRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IHtcclxuICAgIHRhYkxpc3Q6IFVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uUmV0dXJuVHlwZUluZm88VGFiRWxlbWVudCwgVGFiSW5mbywgbmV2ZXI+O1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlVGFiTGlzdFJldHVyblR5cGVXaXRoSG9va3M8VGFiQ29udGFpbmVyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIFRhYkVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZVRhYkxpc3RSZXR1cm5UeXBlSW5mbzxUYWJFbGVtZW50PiB7XHJcbiAgICB1c2VUYWJMaXN0UHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8VGFiQ29udGFpbmVyRWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFRhYkNvbnRhaW5lckVsZW1lbnQ+O1xyXG4gICAgdXNlVGFiOiAoeyBsaXN0TmF2aWdhdGlvbiwgbWFuYWdlZENoaWxkLCByb3ZpbmdUYWJJbmRleCB9OiBVc2VUYWJQYXJhbWV0ZXJzPFRhYkVsZW1lbnQ+KSA9PiBVc2VUYWJSZXR1cm5UeXBlV2l0aEhvb2tzPFRhYkVsZW1lbnQ+XHJcbn1cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVRhYlBhbmVsUmV0dXJuVHlwZUluZm8ge1xyXG4gICAgdGFiUGFuZWw6IHsgdmlzaWJsZTogYm9vbGVhbjsgZ2V0VmlzaWJsZTogKCkgPT4gYm9vbGVhbjsgfTtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVRhYlBhbmVsUmV0dXJuVHlwZVdpdGhIb29rczxMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZVRhYlBhbmVsUmV0dXJuVHlwZUluZm8ge1xyXG4gICAgdXNlVGFiUGFuZWxQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxMYWJlbEVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxMYWJlbEVsZW1lbnQ+O1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VUYWJMaXN0TGFiZWxSZXR1cm5UeXBlSW5mbyB7IH1cclxuZXhwb3J0IGludGVyZmFjZSBVc2VUYWJMYWJlbFJldHVyblR5cGVXaXRoSG9va3M8TGFiZWxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VUYWJMaXN0TGFiZWxSZXR1cm5UeXBlSW5mbyB7XHJcbiAgICB1c2VUYWJMaXN0TGFiZWxQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxMYWJlbEVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxMYWJlbEVsZW1lbnQ+O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVRhYnNSZXR1cm5UeXBlSW5mbyB7XHJcbiAgICB0YWJQYW5lbHM6IFVzZU1hbmFnZWRDaGlsZHJlblJldHVyblR5cGVJbmZvPG51bWJlciwgVGFiUGFuZWxJbmZvLCBuZXZlcj47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlVGFic1JldHVyblR5cGVXaXRoSG9va3M8VGFiQ29udGFpbmVyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIFRhYkVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBQYW5lbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZVRhYnNSZXR1cm5UeXBlSW5mbyB7XHJcbiAgICB1c2VUYWJMaXN0OiBVc2VUYWJMaXN0PFRhYkNvbnRhaW5lckVsZW1lbnQsIFRhYkVsZW1lbnQ+O1xyXG4gICAgdXNlVGFiUGFuZWw6IFVzZVRhYlBhbmVsPFBhbmVsRWxlbWVudD47XHJcbiAgICB1c2VUYWJMaXN0TGFiZWw6IFVzZVRhYkxpc3RMYWJlbDxMYWJlbEVsZW1lbnQ+O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBVc2VUYWI8VGFiRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+ID0gKGFyZ3M6IFVzZVRhYlBhcmFtZXRlcnM8VGFiRWxlbWVudD4pID0+IFVzZVRhYlJldHVyblR5cGVXaXRoSG9va3M8VGFiRWxlbWVudD47XHJcbmV4cG9ydCB0eXBlIFVzZVRhYkxpc3Q8VGFiQ29udGFpbmVyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIFRhYkVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiA9IChhcmdzOiBVc2VUYWJMaXN0UGFyYW1ldGVyczxUYWJFbGVtZW50PikgPT4gVXNlVGFiTGlzdFJldHVyblR5cGVXaXRoSG9va3M8VGFiQ29udGFpbmVyRWxlbWVudCwgVGFiRWxlbWVudD47XHJcbmV4cG9ydCB0eXBlIFVzZVRhYlBhbmVsPFBhbmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+ID0gKGFyZ3M6IFVzZVRhYlBhbmVsUGFyYW1ldGVycykgPT4gVXNlVGFiUGFuZWxSZXR1cm5UeXBlV2l0aEhvb2tzPFBhbmVsRWxlbWVudD47XHJcbmV4cG9ydCB0eXBlIFVzZVRhYkxpc3RMYWJlbDxMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiA9IChhcmdzOiBVc2VUYWJMYWJlbFBhcmFtZXRlcnMpID0+IFVzZVRhYkxhYmVsUmV0dXJuVHlwZVdpdGhIb29rczxMYWJlbEVsZW1lbnQ+O1xyXG4vKlxyXG5leHBvcnQgZnVuY3Rpb24gdXNlVGFiczxUYWJMaXN0RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIFRhYkVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBQYW5lbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50Pih7IHRhYlBhbmVsczogeyBtYW5hZ2VkQ2hpbGRyZW46IHsgb25DaGlsZHJlbk1vdW50Q2hhbmdlOiBvY21jLCAuLi50YWJQYW5lbHNNYW5hZ2VkQ2hpbGRyZW4gfSB9IH06IFVzZVRhYnNQYXJhbWV0ZXJzKTogVXNlVGFic1JldHVyblR5cGVXaXRoSG9va3M8VGFiTGlzdEVsZW1lbnQsIFRhYkVsZW1lbnQsIFBhbmVsRWxlbWVudCwgTGFiZWxFbGVtZW50PiB7XHJcbiAgICBjb25zdCB7IFxyXG4gICAgICAgIHVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uQ2hpbGQsIFxyXG4gICAgICAgIHVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uUHJvcHMgXHJcbiAgICB9ID0gdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb248VGFiTGlzdEVsZW1lbnQsIFRhYkVsZW1lbnQsIFRhYkluZm8sIG5ldmVyPih7IFxyXG4gICAgICAgIGNoaWxkcmVuSGF2ZUZvY3VzOiB7fSwgXHJcbiAgICAgICAgbGluZWFyTmF2aWdhdGlvbjoge30sIFxyXG4gICAgICAgIGxpc3ROYXZpZ2F0aW9uOiB7fSwgXHJcbiAgICAgICAgbWFuYWdlZENoaWxkcmVuOiB7fSwgXHJcbiAgICAgICAgcm92aW5nVGFiSW5kZXg6IHt9LCBcclxuICAgICAgICBzaW5nbGVTZWxlY3Rpb246IHt9LCBcclxuICAgICAgICB0eXBlYWhlYWROYXZpZ2F0aW9uOiB7fVxyXG4gICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHVzZVRhYiA9IHVzZUNhbGxiYWNrKCgpID0+IHt9LCBbXSk7XHJcbiAgICBjb25zdCB1c2VUYWJQYW5lbCA9IHVzZUNhbGxiYWNrKCgpID0+IHt9KTtcclxuICAgIGZ1bmN0aW9uIHVzZVRhYkxpc3RQcm9wcyhwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8VGFiTGlzdEVsZW1lbnQ+KSB7IHJldHVybiB1c2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvblByb3BzKHByb3BzKTsgfVxyXG4gICAgZnVuY3Rpb24gdXNlVGFiTGFiZWxQcm9wcygpIHt9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuXHJcbiAgICB9XHJcbiAgICBcclxufSovXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlVGFiczxUYWJMaXN0RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIFRhYkVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBQYW5lbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50Pih7IHRhYlBhbmVsczogeyBtYW5hZ2VkQ2hpbGRyZW46IHsgb25DaGlsZHJlbk1vdW50Q2hhbmdlOiBvY21jLCAuLi50YWJQYW5lbHNNYW5hZ2VkQ2hpbGRyZW4gfSB9IH06IFVzZVRhYnNQYXJhbWV0ZXJzKTogVXNlVGFic1JldHVyblR5cGVXaXRoSG9va3M8VGFiTGlzdEVsZW1lbnQsIFRhYkVsZW1lbnQsIFBhbmVsRWxlbWVudCwgTGFiZWxFbGVtZW50PiB7XHJcblxyXG4gICAgZGVidWdMb2coXCJ1c2VUYWJzXCIpO1xyXG5cclxuXHJcbiAgICBjb25zdCBiYXNlSWQgPSBnZW5lcmF0ZVJhbmRvbUlkKFwiYXJpYS10YWJzLVwiKTtcclxuICAgIC8vY29uc3QgZ2V0VGFiTGlzdElkID0gdXNlQ2FsbGJhY2soKCkgPT4geyByZXR1cm4gYmFzZUlkICsgXCItdGFiLWxpc3RcIjsgfSwgW10pO1xyXG4gICAgY29uc3QgZ2V0VGFiSWQgPSB1c2VDYWxsYmFjaygoaW5kZXg6IG51bWJlcikgPT4geyByZXR1cm4gYmFzZUlkICsgXCItdGFiLVwiICsgaW5kZXg7IH0sIFtdKTtcclxuICAgIGNvbnN0IGdldFBhbmVsSWQgPSB1c2VDYWxsYmFjaygoaW5kZXg6IG51bWJlcikgPT4geyByZXR1cm4gYmFzZUlkICsgXCItcGFuZWwtXCIgKyBpbmRleDsgfSwgW10pO1xyXG5cclxuICAgIC8vIFVzZWQgZm9yIHRoZSBwYW5lbHMsIG5vdCB0aGUgdGFicyBpbiB0aGUgdGFibGlzdC5cclxuICAgIC8vIFRob3NlIGFyZSBpbiB1c2VUYWJMaXN0IGl0c2VsZi5cclxuICAgIGNvbnN0IHsgdXNlTWFuYWdlZENoaWxkLCAuLi5tYW5hZ2VkQ2hpbGRyZW5SZXQgfSA9IHVzZU1hbmFnZWRDaGlsZHJlbjxudW1iZXIsIFRhYlBhbmVsSW5mbywgXCJ2aXNpYmxlXCI+KHsgbWFuYWdlZENoaWxkcmVuOiB7IC4uLnRhYlBhbmVsc01hbmFnZWRDaGlsZHJlbiwgb25DaGlsZHJlbk1vdW50Q2hhbmdlOiB1c2VTdGFibGVDYWxsYmFjazxPbkNoaWxkcmVuTW91bnRDaGFuZ2U8bnVtYmVyPj4oKG0sIHUpID0+IHsgb2NtYz8uKG0sIHUpOyByZWV2YWx1YXRlQ2xvc2VzdEZpdCgpOyB9KSB9IH0pO1xyXG4gICAgY29uc3QgeyBjaGFuZ2VJbmRleDogY2hhbmdlVmlzaWJsZVBhbmVsLCBnZXRDdXJyZW50SW5kZXg6IGdldFZpc2libGVJbmRleCwgcmVldmFsdWF0ZUNsb3Nlc3RGaXQgfSA9IHVzZUNoaWxkcmVuRmxhZyh7IGNoaWxkcmVuOiBtYW5hZ2VkQ2hpbGRyZW5SZXQubWFuYWdlZENoaWxkcmVuLmNoaWxkcmVuLCBjbG9zZXN0Rml0OiBmYWxzZSwgaW5pdGlhbEluZGV4OiBudWxsLCBrZXk6IFwidmlzaWJsZVwiIH0pO1xyXG5cclxuICAgIC8vY29uc3QgeyB1c2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50LCB1c2VSYW5kb21JZFNvdXJjZUVsZW1lbnQgfSA9IHVzZVJhbmRvbUlkKHsgcmFuZG9tSWQ6IHsgcHJlZml4OiBcImFyaWEtdGFicy1cIiB9LCBtYW5hZ2VkQ2hpbGRyZW46IHsgb25BZnRlckNoaWxkTGF5b3V0RWZmZWN0OiBudWxsLCBvbkNoaWxkcmVuTW91bnRDaGFuZ2U6IG51bGwgfSB9KTtcclxuXHJcbiAgICBjb25zdCB7IHVzZUxhYmVsSW5wdXQsIHVzZUxhYmVsTGFiZWwgfSA9IHVzZUxhYmVsPFRhYkxpc3RFbGVtZW50LCBMYWJlbEVsZW1lbnQ+KHsgbGFiZWw6IHsgcHJlZml4SW5wdXQ6IFwiXCIsIHByZWZpeExhYmVsOiBcIlwiLCB0YWdJbnB1dDogXCJkaXZcIiBhcyBhbnksIHRhZ0xhYmVsOiBcImRpdlwiIGFzIGFueSB9IH0pO1xyXG5cclxuXHJcbiAgICBjb25zdCB1c2VUYWJMaXN0TGFiZWwgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyB1c2VMYWJlbExhYmVsUHJvcHMgfSA9IHVzZUxhYmVsTGFiZWwoKTtcclxuICAgICAgICBmdW5jdGlvbiB1c2VUYWJMaXN0TGFiZWxQcm9wcyhwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGFiZWxFbGVtZW50PikgeyByZXR1cm4gdXNlTGFiZWxMYWJlbFByb3BzKHByb3BzKTsgfVxyXG4gICAgICAgIHJldHVybiB7IHVzZVRhYkxpc3RMYWJlbFByb3BzIH07XHJcbiAgICB9LCBbdXNlTGFiZWxMYWJlbF0pO1xyXG5cclxuICAgIGNvbnN0IHVzZVRhYkxpc3QgPSB1c2VDYWxsYmFjazxVc2VUYWJMaXN0PFRhYkxpc3RFbGVtZW50LCBUYWJFbGVtZW50Pj4oKHsgY2hpbGRyZW5IYXZlRm9jdXMsIHRhYnM6IHsgb25TZWxlY3RlZEluZGV4Q2hhbmdlIH0sIGxpbmVhck5hdmlnYXRpb24sIGxpc3ROYXZpZ2F0aW9uLCBtYW5hZ2VkQ2hpbGRyZW46IHRhYkxpc3RNYW5hZ2VkQ2hpbGRyZW4sIHJvdmluZ1RhYkluZGV4LCBzaW5nbGVTZWxlY3Rpb24sIHR5cGVhaGVhZE5hdmlnYXRpb24gfSkgPT4ge1xyXG4gICAgICAgIGRlYnVnTG9nKFwidXNlVGFiTGlzdFwiKTtcclxuICAgICAgICBjb25zdCBzdGFibGVPblNlbGVjdGVkSW5kZXhDaGFuZ2UgPSB1c2VTdGFibGVDYWxsYmFjayhvblNlbGVjdGVkSW5kZXhDaGFuZ2UpO1xyXG5cclxuICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICAgIHVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uQ2hpbGQsXHJcbiAgICAgICAgICAgIHVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uUHJvcHMsXHJcbiAgICAgICAgICAgIC4uLmxpc3ROYXZSZXQxXHJcbiAgICAgICAgfSA9IHVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uPFRhYkxpc3RFbGVtZW50LCBUYWJFbGVtZW50LCBUYWJJbmZvLCBuZXZlcj4oe1xyXG4gICAgICAgICAgICBsaW5lYXJOYXZpZ2F0aW9uLFxyXG4gICAgICAgICAgICBsaXN0TmF2aWdhdGlvbixcclxuICAgICAgICAgICAgbWFuYWdlZENoaWxkcmVuOiB0YWJMaXN0TWFuYWdlZENoaWxkcmVuLFxyXG4gICAgICAgICAgICByb3ZpbmdUYWJJbmRleCxcclxuICAgICAgICAgICAgc2luZ2xlU2VsZWN0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAuLi5zaW5nbGVTZWxlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICBvblNlbGVjdGVkSW5kZXhDaGFuZ2U6IHVzZUNhbGxiYWNrKChldmVudDogRXZlbnQsIGluZGV4OiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBvblNlbGVjdGVkSW5kZXhDaGFuZ2U/LihlbmhhbmNlRXZlbnQ8VGFiRWxlbWVudCwgRXZlbnQsIHsgc2VsZWN0ZWRJbmRleDogbnVtYmVyIH0+KGV2ZW50LCB7IHNlbGVjdGVkSW5kZXg6IGluZGV4IH0pKVxyXG4gICAgICAgICAgICAgICAgfSwgW10pXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHR5cGVhaGVhZE5hdmlnYXRpb24sXHJcbiAgICAgICAgICAgIGNoaWxkcmVuSGF2ZUZvY3VzXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNoYW5nZVZpc2libGVQYW5lbChzaW5nbGVTZWxlY3Rpb24uc2VsZWN0ZWRJbmRleCk7XHJcbiAgICAgICAgfSwgW3NpbmdsZVNlbGVjdGlvbi5zZWxlY3RlZEluZGV4XSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgdXNlTGFiZWxJbnB1dFByb3BzIH0gPSB1c2VMYWJlbElucHV0KClcclxuXHJcbiAgICAgICAgY29uc3QgdXNlVGFiID0gdXNlQ2FsbGJhY2s8VXNlVGFiPFRhYkVsZW1lbnQ+PigoeyBsaXN0TmF2aWdhdGlvbiwgbWFuYWdlZENoaWxkLCByb3ZpbmdUYWJJbmRleCwgaGFzRm9jdXMgfTogVXNlVGFiUGFyYW1ldGVyczxUYWJFbGVtZW50Pik6IFVzZVRhYlJldHVyblR5cGVXaXRoSG9va3M8VGFiRWxlbWVudD4gPT4ge1xyXG4gICAgICAgICAgICBkZWJ1Z0xvZyhcInVzZVRhYlwiLCBtYW5hZ2VkQ2hpbGQuaW5kZXgpO1xyXG4gICAgICAgICAgICBjb25zdCB7IHVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uQ2hpbGRQcm9wcywgLi4ubGlzdE5hdlJldDIgfSA9IHVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uQ2hpbGQoeyBsaXN0TmF2aWdhdGlvbiwgbWFuYWdlZENoaWxkLCByb3ZpbmdUYWJJbmRleCwgc3ViSW5mbzoge30sIGhhc0ZvY3VzIH0pO1xyXG4gICAgICAgICAgICBjb25zdCB7IHNpbmdsZVNlbGVjdGlvbjogeyBzZWxlY3RlZCB9LCByb3ZpbmdUYWJJbmRleDogeyB0YWJiYWJsZSB9IH0gPSBsaXN0TmF2UmV0MjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHVzZVRhYlByb3BzID0gKHsgcm9sZSwgXCJhcmlhLWNvbnRyb2xzXCI6IGFyaWFDb250cm9scywgXCJhcmlhLXNlbGVjdGVkXCI6IGFyaWFTZWxlY3RlZCwgLi4ucHJvcHMgfTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8VGFiRWxlbWVudD4pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhbmVsSWQgPSBnZXRQYW5lbElkKG1hbmFnZWRDaGlsZC5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJJZCA9IGdldFRhYklkKG1hbmFnZWRDaGlsZC5pbmRleCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgdXNlUHJlc3NQcm9wcyA9IHVzZVByZXNzPFRhYkVsZW1lbnQ+KHtcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrU3luYzogKGUpID0+IHsgc3RhYmxlT25TZWxlY3RlZEluZGV4Q2hhbmdlKGVuaGFuY2VFdmVudChlLCB7IHNlbGVjdGVkSW5kZXg6IG1hbmFnZWRDaGlsZC5pbmRleCB9KSkgfSxcclxuICAgICAgICAgICAgICAgICAgICBleGNsdWRlOiB7fSxcclxuICAgICAgICAgICAgICAgICAgICBoYXNGb2N1c1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uQ2hpbGRQcm9wcyh1c2VNZXJnZWRQcm9wcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogd2Fybk9uT3ZlcndyaXRlKFwidXNlVGFiXCIsIFwicm9sZVwiLCByb2xlLCBcInRhYlwiKSxcclxuICAgICAgICAgICAgICAgICAgICBcImFyaWEtY29udHJvbHNcIjogd2Fybk9uT3ZlcndyaXRlKFwidXNlVGFiXCIsIFwiYXJpYUNvbnRyb2xzXCIsIGFyaWFDb250cm9scywgcGFuZWxJZCksXHJcbiAgICAgICAgICAgICAgICAgICAgXCJhcmlhLXNlbGVjdGVkXCI6IHdhcm5Pbk92ZXJ3cml0ZShcInVzZVRhYlwiLCBcImFyaWFTZWxlY3RlZFwiLCBhcmlhU2VsZWN0ZWQsIHNlbGVjdGVkID8gXCJ0cnVlXCIgOiB1bmRlZmluZWQpLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiZGF0YS10YWJiYWJsZVwiOiB0YWJiYWJsZS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB0YWJJZFxyXG4gICAgICAgICAgICAgICAgfSBhcyB7fSwgdXNlUHJlc3NQcm9wcyhwcm9wcykpKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHVzZVRhYlByb3BzLFxyXG4gICAgICAgICAgICAgICAgLi4ubGlzdE5hdlJldDJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIFt1c2VMYWJlbElucHV0LCB1c2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkXSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVzZVRhYkxpc3RQcm9wcyA9ICh7IHJvbGUsIFwiYXJpYS1vcmllbnRhdGlvblwiOiBhcmlhT3JpZW50YXRpb24sIC4uLnByb3BzIH06IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFRhYkxpc3RFbGVtZW50PikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25Qcm9wcyh1c2VMYWJlbElucHV0UHJvcHModXNlTWVyZ2VkUHJvcHMoe1xyXG4gICAgICAgICAgICAgICAgcm9sZTogd2Fybk9uT3ZlcndyaXRlKFwidXNlVGFiTGlzdFwiLCBcInJvbGVcIiwgcm9sZSwgXCJ0YWJsaXN0XCIpLFxyXG4gICAgICAgICAgICAgICAgXCJhcmlhLW9yaWVudGF0aW9uXCI6IGFyaWFPcmllbnRhdGlvbiA/PyBcImhvcml6b250YWxcIixcclxuICAgICAgICAgICAgfSBhcyB7fSxcclxuICAgICAgICAgICAgICAgIHByb3BzKSkpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdGFiTGlzdDogbGlzdE5hdlJldDEsXHJcbiAgICAgICAgICAgIHVzZVRhYkxpc3RQcm9wcyxcclxuICAgICAgICAgICAgdXNlVGFiXHJcbiAgICAgICAgfVxyXG4gICAgfSwgW3VzZUxhYmVsSW5wdXRdKTtcclxuXHJcbiAgICBjb25zdCB1c2VUYWJQYW5lbCA9IHVzZUNhbGxiYWNrKCh7IG1hbmFnZWRDaGlsZDogeyBmbGFncywgLi4ubWFuYWdlZENoaWxkIH0gfTogVXNlVGFiUGFuZWxQYXJhbWV0ZXJzKSA9PiB7XHJcbiAgICAgICAgZGVidWdMb2coXCJ1c2VUYWJQYW5lbFwiLCBtYW5hZ2VkQ2hpbGQuaW5kZXgpO1xyXG4gICAgICAgIC8vY29uc3QgW2NvcnJlc3BvbmRpbmdUYWJJZCwgc2V0Q29ycmVzcG9uZGluZ1RhYklkXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xyXG4gICAgICAgIGNvbnN0IFtpc1Zpc2libGUsIHNldElzVmlzaWJsZSwgZ2V0SXNWaXNpYmxlXSA9IHVzZVN0YXRlKGdldFZpc2libGVJbmRleCgpID09IG1hbmFnZWRDaGlsZC5pbmRleCk7XHJcbiAgICAgICAgY29uc3QgdmlzaWJsZVJlZiA9IHVzZVJlZjxDaGlsZEZsYWdPcGVyYXRpb25zPih7IGdldDogZ2V0SXNWaXNpYmxlLCBzZXQ6IHNldElzVmlzaWJsZSwgaXNWYWxpZDogcmV0dXJuVHJ1ZSB9KTtcclxuICAgICAgICB1c2VNYW5hZ2VkQ2hpbGQoeyBtYW5hZ2VkQ2hpbGQ6IHsgLi4ubWFuYWdlZENoaWxkLCBmbGFnczogeyB2aXNpYmxlOiB2aXNpYmxlUmVmLmN1cnJlbnQsIC4uLmZsYWdzIH0sIHN1YkluZm86IHt9IH0gfSk7XHJcbiAgICAgICAgY29uc3QgcGFuZWxJZCA9IGdldFBhbmVsSWQobWFuYWdlZENoaWxkLmluZGV4KTtcclxuICAgICAgICBjb25zdCB0YWJJZCA9IGdldFRhYklkKG1hbmFnZWRDaGlsZC5pbmRleCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVzZVRhYlBhbmVsUHJvcHMgPSAoeyByb2xlLCBcImFyaWEtbGFiZWxsZWRieVwiOiBhcmlhTGFiZWxsZWRCeSwgaWQsIC4uLnByb3BzIH06IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFBhbmVsRWxlbWVudD4pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKHtcclxuICAgICAgICAgICAgICAgIHJvbGU6IHdhcm5Pbk92ZXJ3cml0ZShcInVzZVRhYlBhbmVsUHJvcHNcIiwgXCJyb2xlXCIsIHJvbGUsIFwidGFicGFuZWxcIiksXHJcbiAgICAgICAgICAgICAgICBcImFyaWEtbGFiZWxsZWRieVwiOiB3YXJuT25PdmVyd3JpdGUoXCJ1c2VUYWJQYW5lbFByb3BzXCIsIFwiYXJpYS1sYWJlbGxlZGJ5XCIsIGFyaWFMYWJlbGxlZEJ5LCB0YWJJZCksXHJcbiAgICAgICAgICAgICAgICBpZDogd2Fybk9uT3ZlcndyaXRlKFwidXNlVGFiUGFuZWxQcm9wc1wiLCBcImlkXCIsIGlkLCBwYW5lbElkKVxyXG4gICAgICAgICAgICB9IGFzIHt9LCBwcm9wcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB1c2VUYWJQYW5lbFByb3BzLFxyXG4gICAgICAgICAgICB0YWJQYW5lbDoge1xyXG4gICAgICAgICAgICAgICAgdmlzaWJsZTogaXNWaXNpYmxlLFxyXG4gICAgICAgICAgICAgICAgZ2V0VmlzaWJsZTogZ2V0SXNWaXNpYmxlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VUYWJMaXN0TGFiZWwsXHJcbiAgICAgICAgdXNlVGFiTGlzdCxcclxuICAgICAgICB1c2VUYWJQYW5lbCxcclxuICAgICAgICB0YWJQYW5lbHM6IG1hbmFnZWRDaGlsZHJlblJldFxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuaW50ZXJmYWNlIFRhYlBhbmVsSW5mbyB7XHJcbiAgICAvL3NldENvcnJlc3BvbmRpbmdUYWJJZCh0YWJJZDogc3RyaW5nKTogdm9pZDtcclxufVxyXG5cclxuaW50ZXJmYWNlIFRhYkluZm8ge1xyXG4gICAgLy9zZXRDb3JyZXNwb25kaW5nUGFuZWxJZCh0YWJJZDogc3RyaW5nKTogdm9pZDtcclxufVxyXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VHbG9iYWxIYW5kbGVyLCB1c2VIYXNGb2N1cywgVXNlSGFzRm9jdXNQYXJhbWV0ZXJzLCB1c2VNZXJnZWRQcm9wcywgdXNlUGFzc2l2ZVN0YXRlLCB1c2VSYW5kb21JZCwgdXNlU3RhYmxlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgZGVidWdMb2cgfSBmcm9tIFwiLi9wcm9wc1wiO1xyXG5cclxuZXhwb3J0IHR5cGUgVXNlVG9vbHRpcFRyaWdnZXI8VHJpZ2dlclR5cGUgZXh0ZW5kcyBFbGVtZW50PiA9IChhcmdzOiB7IGhhc0ZvY3VzOiBVc2VIYXNGb2N1c1BhcmFtZXRlcnM8VHJpZ2dlclR5cGU+IH0pID0+IHsgdXNlVG9vbHRpcFRyaWdnZXJQcm9wczogKHsgLi4ucHJvcHMgfTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8VHJpZ2dlclR5cGU+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxUcmlnZ2VyVHlwZT4gfTtcclxuZXhwb3J0IGludGVyZmFjZSBVc2VUb29sdGlwUGFyYW1ldGVycyB7IG1vdXNlb3ZlckRlbGF5PzogbnVtYmVyLCBtb3VzZW91dERlbGF5PzogbnVtYmVyLCBmb2N1c0RlbGF5PzogbnVtYmVyIH1cclxuZXhwb3J0IHR5cGUgVXNlVG9vbHRpcDxUcmlnZ2VyVHlwZSBleHRlbmRzIEhUTUxFbGVtZW50IHwgU1ZHRWxlbWVudCwgVG9vbHRpcFR5cGUgZXh0ZW5kcyBFbGVtZW50PiA9IChhcmdzOiBVc2VUb29sdGlwUGFyYW1ldGVycykgPT4gVXNlVG9vbHRpcFJldHVyblR5cGVXaXRoSG9va3M8VHJpZ2dlclR5cGUsIFRvb2x0aXBUeXBlPjtcclxuZXhwb3J0IGludGVyZmFjZSBVc2VUb29sdGlwUmV0dXJuVHlwZUluZm8ge1xyXG4gICAgaXNPcGVuOiBib29sZWFuO1xyXG4gICAgZ2V0SXNPcGVuOiAoKSA9PiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVRvb2x0aXBSZXR1cm5UeXBlV2l0aEhvb2tzPFRyaWdnZXJUeXBlIGV4dGVuZHMgRWxlbWVudCwgUG9wdXBUeXBlIGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VUb29sdGlwUmV0dXJuVHlwZUluZm8ge1xyXG4gICAgdXNlVG9vbHRpcFBvcHVwOiAoYXJnczogeyBoYXNGb2N1czogVXNlSGFzRm9jdXNQYXJhbWV0ZXJzPFBvcHVwVHlwZT4gfSkgPT4ge1xyXG4gICAgICAgIHVzZVRvb2x0aXBQb3B1cFByb3BzOiAoeyAuLi5wcm9wcyB9OiBoLkpTWC5IVE1MQXR0cmlidXRlczxQb3B1cFR5cGU+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxQb3B1cFR5cGU+O1xyXG4gICAgfTtcclxuICAgIHVzZVRvb2x0aXBUcmlnZ2VyOiBVc2VUb29sdGlwVHJpZ2dlcjxUcmlnZ2VyVHlwZT47XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkgeyByZXR1cm4gZmFsc2U7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VUb29sdGlwPFRyaWdnZXJUeXBlIGV4dGVuZHMgRWxlbWVudCwgUG9wdXBUeXBlIGV4dGVuZHMgRWxlbWVudD4oeyBtb3VzZW92ZXJEZWxheSwgbW91c2VvdXREZWxheSwgZm9jdXNEZWxheSB9OiBVc2VUb29sdGlwUGFyYW1ldGVycyk6IFVzZVRvb2x0aXBSZXR1cm5UeXBlV2l0aEhvb2tzPFRyaWdnZXJUeXBlLCBQb3B1cFR5cGU+IHtcclxuICAgIGRlYnVnTG9nKFwidXNlVG9vbHRpcFwiKTtcclxuXHJcbiAgICBtb3VzZW92ZXJEZWxheSA/Pz0gNDAwO1xyXG4gICAgbW91c2VvdXREZWxheSA/Pz0gNDA7XHJcbiAgICBmb2N1c0RlbGF5ID8/PSAxO1xyXG5cclxuICAgIC8vIFRoZSBlc2NhcGUga2V5IHNob3VsZCBjbG9zZSB0b29sdGlwcywgYnV0IGRvIG5vdGhpbmcgZWxzZS5cclxuICAgIC8vIChpLmUuIGNsb3NpbmcgYSB0b29sdGlwIGluIGEgZGlhbG9nIE1VU1QgTk9UIGNsb3NlIHRoZSBkaWFsb2cgdG9vKVxyXG4gICAgLy8gVE9ETzogVG9vbHRpcHMgYXJlLCBlZmZlY3RpdmVseSwgYWx3YXlzIHRoZSB0b3Btb3N0IGNvbXBvbmVudCxcclxuICAgIC8vIHNvIHdlIGNhbiBqdXN0IGhhdmUgdGhlbSBsaXN0ZW4gdG8gYW5kIHN3YWxsb3cgYWxsIFwiRXNjYXBlXCJcclxuICAgIC8vIGtleSBwcmVzc2VzIGJlZm9yZSBhbnlvbmUgZWxzZS4gRm9yIGEgbW9yZSBnZW5lcmFsIHBvcHVwLFxyXG4gICAgLy8gb3IgYSB0b29sdGlwIGluIGEgdG9vbHRpcCAoISEpIGEgZGlmZmVyZW50IHNvbHV0aW9uIHdvdWxkIGJlIG5lZWRlZC5cclxuICAgIHVzZUdsb2JhbEhhbmRsZXIoZG9jdW1lbnQsIFwia2V5ZG93blwiLCAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG4gICAgICAgIGlmIChnZXRPcGVuKCkgJiYgZS5rZXkgPT09IFwiRXNjYXBlXCIgJiYgIWUuZGVmYXVsdFByZXZlbnRlZCkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIHNldE9wZW4oZmFsc2UpO1xyXG4gICAgICAgICAgICBzZXRUcmlnZ2VySG92ZXJEZWxheUNvcnJlY3RlZChmYWxzZSk7XHJcbiAgICAgICAgICAgIHNldFRvb2x0aXBIb3ZlckRlbGF5Q29ycmVjdGVkKGZhbHNlKTtcclxuICAgICAgICAgICAgc2V0VHJpZ2dlckZvY3VzZWREZWxheUNvcnJlY3RlZChmYWxzZSk7XHJcbiAgICAgICAgICAgIHNldFRvb2x0aXBGb2N1c2VkRGVsYXlDb3JyZWN0ZWQoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIHsgY2FwdHVyZTogdHJ1ZSB9KTtcclxuXHJcbiAgICBjb25zdCBbb3Blbiwgc2V0T3BlbiwgZ2V0T3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG4gICAgY29uc3Qge1xyXG4gICAgICAgIHVzZVJhbmRvbUlkU291cmNlRWxlbWVudCwvLzogdXNlVG9vbHRpcElkUHJvcHMsIFxyXG4gICAgICAgIHVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnQsLy86IHVzZVRvb2x0aXBJZFJlZmVyZW5jaW5nUHJvcHMgXHJcbiAgICB9ID0gdXNlUmFuZG9tSWQ8UG9wdXBUeXBlPih7IHJhbmRvbUlkOiB7IHByZWZpeDogXCJhcmlhLXRvb2x0aXAtXCIgfSwgbWFuYWdlZENoaWxkcmVuOiB7IG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdDogbnVsbCwgb25DaGlsZHJlbk1vdW50Q2hhbmdlOiBudWxsIH0gfSk7XHJcblxyXG4gICAgY29uc3QgWywgc2V0VHJpZ2dlckZvY3VzZWRdID0gdXNlUGFzc2l2ZVN0YXRlKHVzZVN0YWJsZUNhbGxiYWNrKChmb2N1c2VkOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGVsYXkgPSBmb2N1c2VkID8gZm9jdXNEZWxheSA6IDE7XHJcbiAgICAgICAgaWYgKGRlbGF5ICE9IG51bGwgJiYgaXNGaW5pdGUoZGVsYXkpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZSA9IHNldFRpbWVvdXQoKCkgPT4gc2V0VHJpZ2dlckZvY3VzZWREZWxheUNvcnJlY3RlZChmb2N1c2VkKSwgZm9jdXNlZCA/IGZvY3VzRGVsYXkgOiAxKTtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dChoYW5kbGUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pLCByZXR1cm5GYWxzZSk7XHJcbiAgICBjb25zdCBbLCBzZXRUb29sdGlwRm9jdXNlZF0gPSB1c2VQYXNzaXZlU3RhdGUodXNlU3RhYmxlQ2FsbGJhY2soKGZvY3VzZWQ6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBjb25zdCBkZWxheSA9IGZvY3VzZWQgPyBmb2N1c0RlbGF5IDogMTtcclxuICAgICAgICBpZiAoZGVsYXkgIT0gbnVsbCAmJiBpc0Zpbml0ZShkZWxheSkpIHtcclxuICAgICAgICAgICAgY29uc3QgaGFuZGxlID0gc2V0VGltZW91dCgoKSA9PiBzZXRUb29sdGlwRm9jdXNlZERlbGF5Q29ycmVjdGVkKGZvY3VzZWQpLCBkZWxheSk7XHJcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQoaGFuZGxlKTtcclxuICAgICAgICB9XHJcbiAgICB9KSwgcmV0dXJuRmFsc2UpO1xyXG4gICAgY29uc3QgWywgc2V0VHJpZ2dlckhvdmVyXSA9IHVzZVBhc3NpdmVTdGF0ZSh1c2VTdGFibGVDYWxsYmFjaygoaG92ZXJpbmc6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBjb25zdCBkZWxheSA9IGhvdmVyaW5nID8gbW91c2VvdmVyRGVsYXkgOiBtb3VzZW91dERlbGF5O1xyXG4gICAgICAgIGlmIChkZWxheSAhPSBudWxsICYmIGlzRmluaXRlKGRlbGF5KSkge1xyXG4gICAgICAgICAgICBjb25zdCBoYW5kbGUgPSBzZXRUaW1lb3V0KCgpID0+IHNldFRyaWdnZXJIb3ZlckRlbGF5Q29ycmVjdGVkKGhvdmVyaW5nKSwgZGVsYXkpO1xyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KGhhbmRsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSksIHJldHVybkZhbHNlKTtcclxuICAgIGNvbnN0IFssIHNldFRvb2x0aXBIb3Zlcl0gPSB1c2VQYXNzaXZlU3RhdGUodXNlU3RhYmxlQ2FsbGJhY2soKGhvdmVyaW5nOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGVsYXkgPSBob3ZlcmluZyA/IG1vdXNlb3ZlckRlbGF5IDogbW91c2VvdXREZWxheTtcclxuICAgICAgICBpZiAoZGVsYXkgIT0gbnVsbCAmJiBpc0Zpbml0ZShkZWxheSkpIHtcclxuICAgICAgICAgICAgY29uc3QgaGFuZGxlID0gc2V0VGltZW91dCgoKSA9PiBzZXRUb29sdGlwSG92ZXJEZWxheUNvcnJlY3RlZChob3ZlcmluZyksIGRlbGF5KTtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dChoYW5kbGUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pLCByZXR1cm5GYWxzZSk7XHJcbiAgICBjb25zdCBbdHJpZ2dlckZvY3VzZWREZWxheUNvcnJlY3RlZCwgc2V0VHJpZ2dlckZvY3VzZWREZWxheUNvcnJlY3RlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBjb25zdCBbdHJpZ2dlckhvdmVyRGVsYXlDb3JyZWN0ZWQsIHNldFRyaWdnZXJIb3ZlckRlbGF5Q29ycmVjdGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFt0b29sdGlwRm9jdXNlZERlbGF5Q29ycmVjdGVkLCBzZXRUb29sdGlwRm9jdXNlZERlbGF5Q29ycmVjdGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFt0b29sdGlwSG92ZXJEZWxheUNvcnJlY3RlZCwgc2V0VG9vbHRpcEhvdmVyRGVsYXlDb3JyZWN0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgc2V0T3Blbih0cmlnZ2VyRm9jdXNlZERlbGF5Q29ycmVjdGVkIHx8IHRyaWdnZXJIb3ZlckRlbGF5Q29ycmVjdGVkIHx8IHRvb2x0aXBGb2N1c2VkRGVsYXlDb3JyZWN0ZWQgfHwgdG9vbHRpcEhvdmVyRGVsYXlDb3JyZWN0ZWQpO1xyXG4gICAgfSwgW3RyaWdnZXJGb2N1c2VkRGVsYXlDb3JyZWN0ZWQgfHwgdHJpZ2dlckhvdmVyRGVsYXlDb3JyZWN0ZWQgfHwgdG9vbHRpcEZvY3VzZWREZWxheUNvcnJlY3RlZCB8fCB0b29sdGlwSG92ZXJEZWxheUNvcnJlY3RlZF0pXHJcblxyXG4gICAgY29uc3QgdXNlVG9vbHRpcFRyaWdnZXI6IFVzZVRvb2x0aXBUcmlnZ2VyPFRyaWdnZXJUeXBlPiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHVzZVRvb2x0aXBUcmlnZ2VyKHsgaGFzRm9jdXM6IHsgb25Gb2N1c2VkSW5uZXJDaGFuZ2VkLCAuLi5oYXNGb2N1cyB9IH06IHsgaGFzRm9jdXM6IFVzZUhhc0ZvY3VzUGFyYW1ldGVyczxUcmlnZ2VyVHlwZT4gfSkge1xyXG4gICAgICAgIGRlYnVnTG9nKFwidXNlVG9vbHRpcFRyaWdnZXJcIik7XHJcblxyXG4gICAgICAgIHVzZUdsb2JhbEhhbmRsZXIoZG9jdW1lbnQsIFwicG9pbnRlcm1vdmVcIiwgZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IChlLnRhcmdldCBhcyBIVE1MRWxlbWVudCk7XHJcbiAgICAgICAgICAgIHNldFRyaWdnZXJIb3Zlcih0YXJnZXQgPT0gZ2V0RWxlbWVudCgpIGFzIE5vZGUgfHwgISFnZXRFbGVtZW50KCk/LmNvbnRhaW5zKHRhcmdldCkpO1xyXG4gICAgICAgIH0sIHsgY2FwdHVyZTogdHJ1ZSB9KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb25Ub3VjaEVuZChlOiBUb3VjaEV2ZW50KSB7XHJcbiAgICAgICAgICAgIChlLnRhcmdldCBhcyBhbnkpLmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB7IHVzZUhhc0ZvY3VzUHJvcHMsIGdldEVsZW1lbnQgfSA9IHVzZUhhc0ZvY3VzPFRyaWdnZXJUeXBlPih7XHJcbiAgICAgICAgICAgIC4uLmhhc0ZvY3VzLFxyXG4gICAgICAgICAgICBvbkZvY3VzZWRJbm5lckNoYW5nZWQ6IHVzZVN0YWJsZUNhbGxiYWNrKChmb2N1c2VkOiBib29sZWFuLCBwcmV2OiBib29sZWFuIHwgdW5kZWZpbmVkKSA9PiB7IG9uRm9jdXNlZElubmVyQ2hhbmdlZD8uKGZvY3VzZWQsIHByZXYpOyBzZXRUcmlnZ2VyRm9jdXNlZChmb2N1c2VkKSB9KVxyXG4gICAgICAgIH0pXHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiB1c2VUb29sdGlwVHJpZ2dlclByb3BzKHsgLi4ucHJvcHMgfTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8VHJpZ2dlclR5cGU+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8VHJpZ2dlclR5cGU+IHtcclxuICAgICAgICAgICAgY29uc3QgeyB1c2VSYW5kb21JZFJlZmVyZW5jZXJFbGVtZW50UHJvcHMgfSA9IHVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnQ8VHJpZ2dlclR5cGU+KFwiYXJpYS1kZXNjcmliZWRieVwiIGFzIG5ldmVyKTtcclxuICAgICAgICAgICAgLy8gTm90ZTogVGhvdWdoIGl0J3MgaW1wb3J0YW50IHRvIG1ha2Ugc3VyZSB0aGF0IGZvY3VzaW5nIGFjdGl2YXRlcyBhIHRvb2x0aXAsXHJcbiAgICAgICAgICAgIC8vIGl0J3MgcGVyZmVjdGx5IHJlYXNvbmFibGUgdGhhdCBhIGNoaWxkIGVsZW1lbnQgd2lsbCBiZSB0aGUgb25lIHRoYXQncyBmb2N1c2VkLFxyXG4gICAgICAgICAgICAvLyBub3QgdGhpcyBvbmUsIHNvIHdlIGRvbid0IHNldCB0YWJJbmRleD0wXHJcbiAgICAgICAgICAgIHByb3BzLnRhYkluZGV4ID8/PSAtMTtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnRQcm9wcyhcclxuICAgICAgICAgICAgICAgIHVzZUhhc0ZvY3VzUHJvcHMoXHJcbiAgICAgICAgICAgICAgICAgICAgdXNlTWVyZ2VkUHJvcHM8VHJpZ2dlclR5cGU+KHsgb25Ub3VjaEVuZCB9LCAocHJvcHMgYXMgYW55KSBhcyB1bmtub3duIGFzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPFRyaWdnZXJUeXBlPilcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7IHVzZVRvb2x0aXBUcmlnZ2VyUHJvcHMgfTtcclxuXHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgY29uc3QgdXNlVG9vbHRpcFBvcHVwID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlVG9vbHRpcCh7IGhhc0ZvY3VzOiB7IG9uRm9jdXNlZElubmVyQ2hhbmdlZCwgLi4uaGFzRm9jdXMgfSB9OiB7IGhhc0ZvY3VzOiBVc2VIYXNGb2N1c1BhcmFtZXRlcnM8UG9wdXBUeXBlPiB9KSB7XHJcbiAgICAgICAgZGVidWdMb2coXCJ1c2VUb29sdGlwVG9vbHRpcFwiKTtcclxuICAgICAgICBjb25zdCB7IHVzZVJhbmRvbUlkU291cmNlRWxlbWVudFByb3BzIH0gPSB1c2VSYW5kb21JZFNvdXJjZUVsZW1lbnQoKTtcclxuICAgICAgICBjb25zdCB7IHVzZUhhc0ZvY3VzUHJvcHMsIGdldEVsZW1lbnQgfSA9IHVzZUhhc0ZvY3VzPFBvcHVwVHlwZT4oeyBvbkZvY3VzZWRJbm5lckNoYW5nZWQ6IHVzZVN0YWJsZUNhbGxiYWNrKChmb2N1c2VkOiBib29sZWFuLCBwcmV2OiBib29sZWFuIHwgdW5kZWZpbmVkKSA9PiB7IG9uRm9jdXNlZElubmVyQ2hhbmdlZD8uKGZvY3VzZWQsIHByZXYpOyBzZXRUb29sdGlwRm9jdXNlZChmb2N1c2VkKTsgfSksIC4uLmhhc0ZvY3VzIH0pXHJcblxyXG4gICAgICAgIHVzZUdsb2JhbEhhbmRsZXIoZG9jdW1lbnQsIFwicG9pbnRlcm1vdmVcIiwgZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IChlLnRhcmdldCBhcyBIVE1MRWxlbWVudCk7XHJcbiAgICAgICAgICAgIHNldFRvb2x0aXBIb3Zlcih0YXJnZXQgPT0gZ2V0RWxlbWVudCgpIGFzIE5vZGUgfHwgISFnZXRFbGVtZW50KCk/LmNvbnRhaW5zKHRhcmdldCkpO1xyXG4gICAgICAgIH0sIHsgY2FwdHVyZTogdHJ1ZSB9KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdXNlVG9vbHRpcFBvcHVwUHJvcHMoeyAuLi5wcm9wcyB9OiBoLkpTWC5IVE1MQXR0cmlidXRlczxQb3B1cFR5cGU+KTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8UG9wdXBUeXBlPiB7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VSYW5kb21JZFNvdXJjZUVsZW1lbnRQcm9wcyh1c2VIYXNGb2N1c1Byb3BzKHVzZU1lcmdlZFByb3BzPFBvcHVwVHlwZT4oe30sIHByb3BzKSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHsgdXNlVG9vbHRpcFBvcHVwUHJvcHMgfTtcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVzZVRvb2x0aXBQb3B1cCxcclxuICAgICAgICB1c2VUb29sdGlwVHJpZ2dlcixcclxuICAgICAgICBpc09wZW46IG9wZW4sXHJcbiAgICAgICAgZ2V0SXNPcGVuOiBnZXRPcGVuXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgVXNlTGlzdE5hdmlnYXRpb25DaGlsZFBhcmFtZXRlcnMsIHVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uLCBVc2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkUmV0dXJuVHlwZUluZm8sIFVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uUGFyYW1ldGVycywgVXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25SZXR1cm5UeXBlSW5mbywgdXNlTWVyZ2VkUHJvcHMsIHVzZVJlZkVsZW1lbnQsIHVzZVN0YWJsZUNhbGxiYWNrLCB1c2VTdGFibGVHZXR0ZXIsIHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgVXNlQ2hpbGRyZW5IYXZlRm9jdXNQYXJhbWV0ZXJzLCBVc2VIYXNGb2N1c1BhcmFtZXRlcnMgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtaGFzLWZvY3VzXCI7XHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyBkZWJ1Z0xvZywgRWxlbWVudFRvVGFnLCBFbmhhbmNlZEV2ZW50LCBlbmhhbmNlRXZlbnQsIFRhZ1NlbnNpdGl2ZVByb3BzIH0gZnJvbSBcIi4vcHJvcHNcIjtcclxuaW1wb3J0IHsgdXNlQ2hlY2tib3hMaWtlLCB1c2VMYWJlbCB9IGZyb20gXCIuL3VzZS1sYWJlbFwiO1xyXG5cclxuLy90eXBlIE9taXQ8VCwgSyBleHRlbmRzIGtleW9mIFQ+ID0gUGljazxULCBFeGNsdWRlPGtleW9mIFQsIEs+PjtcclxuZXhwb3J0IHR5cGUgUmFkaW9DaGFuZ2VFdmVudDxFIGV4dGVuZHMgRXZlbnRUYXJnZXQsIFYgZXh0ZW5kcyBudW1iZXIgfCBzdHJpbmc+ID0gRW5oYW5jZWRFdmVudDxFLCBFdmVudCwgeyBzZWxlY3RlZFZhbHVlOiBWIHwgdW5kZWZpbmVkIH0+O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VSYWRpb0dyb3VwUGFyYW1ldGVyczxWIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyLCBHcm91cEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBHcm91cExhYmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIElucHV0RWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25QYXJhbWV0ZXJzPFwic2VsZWN0ZWRJbmRleFwiIHwgXCJvblNlbGVjdGVkSW5kZXhDaGFuZ2VcIiwgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyPiB7XHJcbiAgICByYWRpb0dyb3VwOiB7XHJcbiAgICAgICAgbmFtZTogc3RyaW5nO1xyXG5cclxuICAgICAgICBzZWxlY3RlZFZhbHVlOiBWIHwgbnVsbDtcclxuICAgICAgICBvblNlbGVjdGVkVmFsdWVDaGFuZ2UoZXZlbnQ6IFJhZGlvQ2hhbmdlRXZlbnQ8SW5wdXRFbGVtZW50LCBWPik6IHZvaWQ7XHJcbiAgICAgICAgLy9vbklucHV0KGV2ZW50OiBSYWRpb0NoYW5nZUV2ZW50PGguSlNYLlRhcmdldGVkRXZlbnQ8TGFiZWxFbGVtZW50PiwgVj4pOiB2b2lkO1xyXG4gICAgICAgIHRhZ0dyb3VwOiBFbGVtZW50VG9UYWc8R3JvdXBFbGVtZW50PjtcclxuICAgICAgICB0YWdHcm91cExhYmVsOiBFbGVtZW50VG9UYWc8R3JvdXBMYWJlbEVsZW1lbnQ+O1xyXG4gICAgfVxyXG4gICAgY2hpbGRyZW5IYXZlRm9jdXM6IFVzZUNoaWxkcmVuSGF2ZUZvY3VzUGFyYW1ldGVyc1tcImNoaWxkcmVuSGF2ZUZvY3VzXCJdO1xyXG59XHJcblxyXG4vKmV4cG9ydCBpbnRlcmZhY2UgVXNlUmFkaW9JbmZvQmFzZSBleHRlbmRzIExpc3ROYXZpZ2F0aW9uQ2hpbGRJbmZvQmFzZTxcInRhYmJhYmxlXCIgfCBcInNlbGVjdGVkXCI+IHtcclxuICAgIHNldENoZWNrZWQoY2hlY2tlZDogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICBnZXRDaGVja2VkKCk6IGJvb2xlYW4gfCBudWxsO1xyXG59Ki9cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlUmFkaW9QYXJhbWV0ZXJzPFYgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXIsIEkgZXh0ZW5kcyBFbGVtZW50LCBJTCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgT21pdDxVc2VMaXN0TmF2aWdhdGlvbkNoaWxkUGFyYW1ldGVyczx7fSwgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyPiwgXCJzdWJJbmZvXCI+IHtcclxuICAgIHJhZGlvOiB7XHJcbiAgICAgICAgbGFiZWxQb3NpdGlvbjogXCJ3cmFwcGluZ1wiIHwgXCJzZXBhcmF0ZVwiO1xyXG4gICAgICAgIHZhbHVlOiBWO1xyXG4gICAgICAgIGRpc2FibGVkOiBib29sZWFuO1xyXG4gICAgICAgIHRhZ0lucHV0OiBFbGVtZW50VG9UYWc8ST47XHJcbiAgICAgICAgdGFnTGFiZWw6IEVsZW1lbnRUb1RhZzxJTD47XHJcbiAgICB9XHJcbiAgICBoYXNGb2N1c0lucHV0OiBVc2VIYXNGb2N1c1BhcmFtZXRlcnM8ST47XHJcbiAgICBoYXNGb2N1c0xhYmVsOiBVc2VIYXNGb2N1c1BhcmFtZXRlcnM8SUw+O1xyXG4gICAgLypPbWl0PFVzZUNoZWNrYm94TGlrZVBhcmFtZXRlcnM8SSwgSUw+LCBcIm9uSW5wdXRcIiB8IFwicm9sZVwiIHwgXCJjaGVja2VkXCI+ICYge1xyXG4gICAgICAgIGluZm86IE9taXQ8SW5mbywgXCJzZXRDaGVja2VkXCIgfCBcImdldENoZWNrZWRcIiB8IFwiYmx1clNlbGZcIiB8IFwiZ2V0RWxlbWVudFwiIHwgXCJmb2N1c1NlbGZcIj47XHJcbiAgICAgICAgXHJcbiAgICB9Ki9cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VSYWRpb0dyb3VwUmV0dXJuVHlwZUluZm88ViBleHRlbmRzIHN0cmluZyB8IG51bWJlciwgSSBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25SZXR1cm5UeXBlSW5mbzxJLCB7fSwgbmV2ZXI+IHtcclxuICAgIHJhZGlvR3JvdXA6IHtcclxuICAgICAgICBzZWxlY3RlZEluZGV4OiBudW1iZXIgfCBudWxsO1xyXG4gICAgICAgIHNlbGVjdGVkVmFsdWU6IFYgfCBudWxsO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVJhZGlvR3JvdXBSZXR1cm5UeXBlV2l0aEhvb2tzPFYgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXIsIEcgZXh0ZW5kcyBFbGVtZW50LCBHTCBleHRlbmRzIEVsZW1lbnQsIEkgZXh0ZW5kcyBFbGVtZW50LCBJTCBleHRlbmRzIEhUTUxFbGVtZW50PiBleHRlbmRzIFVzZVJhZGlvR3JvdXBSZXR1cm5UeXBlSW5mbzxWLCBJPiB7XHJcbiAgICB1c2VSYWRpb0dyb3VwTGFiZWxQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxHTD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEdMPjtcclxuICAgIHVzZVJhZGlvR3JvdXBQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxHPikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8Rz47XHJcbiAgICB1c2VSYWRpbzogVXNlUmFkaW88ViwgSSwgSUw+O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlUmFkaW9Hcm91cDxWIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyLCBHIGV4dGVuZHMgRWxlbWVudCwgR0wgZXh0ZW5kcyBFbGVtZW50LCBJIGV4dGVuZHMgRWxlbWVudCwgSUwgZXh0ZW5kcyBIVE1MRWxlbWVudD4oe1xyXG4gICAgbGluZWFyTmF2aWdhdGlvbixcclxuICAgIGxpc3ROYXZpZ2F0aW9uLFxyXG4gICAgbWFuYWdlZENoaWxkcmVuLFxyXG4gICAgcmFkaW9Hcm91cDogeyBuYW1lLCBvblNlbGVjdGVkVmFsdWVDaGFuZ2UsIHNlbGVjdGVkVmFsdWUsIHRhZ0dyb3VwLCB0YWdHcm91cExhYmVsIH0sXHJcbiAgICByb3ZpbmdUYWJJbmRleCxcclxuICAgIHR5cGVhaGVhZE5hdmlnYXRpb24sXHJcbiAgICBjaGlsZHJlbkhhdmVGb2N1cyxcclxuICAgIHNpbmdsZVNlbGVjdGlvbjogeyBzZWxlY3Rpb25Nb2RlIH1cclxufTogVXNlUmFkaW9Hcm91cFBhcmFtZXRlcnM8ViwgRywgR0wsIEk+KTogVXNlUmFkaW9Hcm91cFJldHVyblR5cGVXaXRoSG9va3M8ViwgRywgR0wsIEksIElMPiB7XHJcbiAgICBkZWJ1Z0xvZyhcInVzZVJhZGlvR3JvdXBcIiwgc2VsZWN0ZWRWYWx1ZSk7XHJcbiAgICBjb25zdCB7IGdldEVsZW1lbnQ6IF9nZXRSYWRpb0dyb3VwUGFyZW50RWxlbWVudCwgdXNlUmVmRWxlbWVudFByb3BzIH0gPSB1c2VSZWZFbGVtZW50PEc+KHt9KTtcclxuXHJcbiAgICAvL2NvbnN0IGdldFNlbGVjdGVkSW5kZXggPSB1c2VDYWxsYmFjaygoc2VsZWN0ZWRWYWx1ZTogVikgPT4geyByZXR1cm4gYnlOYW1lLmN1cnJlbnQuZ2V0KHNlbGVjdGVkVmFsdWUpID8/IDAgfSwgW10pXHJcblxyXG4gICAgY29uc3QgW3NlbGVjdGVkSW5kZXgsIHNldFNlbGVjdGVkSW5kZXhdID0gdXNlU3RhdGU8bnVtYmVyIHwgbnVsbD4oMCk7XHJcbiAgICBjb25zdCBieU5hbWUgPSB1c2VSZWYobmV3IE1hcDxWLCBhbnk+KCkpO1xyXG4gICAgLy9jb25zdCBzdGFibGVPbklucHV0ID0gdXNlU3RhYmxlQ2FsbGJhY2sob25TZWxlY3RlZFZhbHVlQ2hhbmdlKTtcclxuXHJcbiAgICAvL2NvbnN0IFthbnlSYWRpb3NGb2N1c2VkLCBzZXRBbnlSYWRpb3NGb2N1c2VkLCBnZXRBbnlSYWRpb3NGb2N1c2VkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgICBjb25zdCB7IHVzZUxhYmVsSW5wdXQ6IHVzZUdyb3VwTGFiZWxJbnB1dCwgdXNlTGFiZWxMYWJlbDogdXNlR3JvdXBMYWJlbExhYmVsIH0gPSB1c2VMYWJlbDxHLCBHTD4oeyBsYWJlbDogeyBwcmVmaXhMYWJlbDogXCJhcmlhLXJhZGlvLWdyb3VwLWxhYmVsLVwiLCB0YWdJbnB1dDogdGFnR3JvdXAgYXMgbmV2ZXIsIHRhZ0xhYmVsOiB0YWdHcm91cExhYmVsIGFzIG5ldmVyLCBwcmVmaXhJbnB1dDogXCJhcmlhLXJhZGlvLWdyb3VwLVwiIH0gfSlcclxuICAgIGNvbnN0IHsgdXNlTGFiZWxJbnB1dFByb3BzOiB1c2VHcm91cExhYmVsSW5wdXRQcm9wcyB9ID0gdXNlR3JvdXBMYWJlbElucHV0KCk7XHJcbiAgICBjb25zdCB7IHVzZUxhYmVsTGFiZWxQcm9wczogdXNlR3JvdXBMYWJlbExhYmVsUHJvcHMgfSA9IHVzZUdyb3VwTGFiZWxMYWJlbCgpO1xyXG5cclxuICAgIGNvbnN0IG9uU2VsZWN0ZWRJbmRleENoYW5nZSA9IHVzZVN0YWJsZUNhbGxiYWNrKChlOiBFdmVudCwgbmV3SW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIG9uU2VsZWN0ZWRWYWx1ZUNoYW5nZShlbmhhbmNlRXZlbnQ8SSwgRXZlbnQsIHsgc2VsZWN0ZWRWYWx1ZTogViB8IHVuZGVmaW5lZCB9PihlLCB7IHNlbGVjdGVkVmFsdWU6IGxpc3ROYXZSZXQubWFuYWdlZENoaWxkcmVuLmNoaWxkcmVuLmdldEF0KG5ld0luZGV4KT8uc3ViSW5mby5zdWJJbmZvLnN1YkluZm8uZ2V0VmFsdWUoKSB9KSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB7XHJcbiAgICAgICAgdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZCxcclxuICAgICAgICB1c2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvblByb3BzLFxyXG4gICAgICAgIC4uLmxpc3ROYXZSZXRcclxuICAgIH0gPSB1c2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbjxHLCBJLCB7IGdldFZhbHVlKCk6IFYgfSwgbmV2ZXI+KHtcclxuICAgICAgICBsaW5lYXJOYXZpZ2F0aW9uLFxyXG4gICAgICAgIGxpc3ROYXZpZ2F0aW9uLFxyXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbixcclxuICAgICAgICByb3ZpbmdUYWJJbmRleCxcclxuICAgICAgICBzaW5nbGVTZWxlY3Rpb246IHsgc2VsZWN0ZWRJbmRleCwgb25TZWxlY3RlZEluZGV4Q2hhbmdlLCBzZWxlY3Rpb25Nb2RlIH0sXHJcbiAgICAgICAgdHlwZWFoZWFkTmF2aWdhdGlvbixcclxuICAgICAgICBjaGlsZHJlbkhhdmVGb2N1c1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gVHJhY2sgd2hldGhlciB0aGUgY3VycmVudGx5IGZvY3VzZWQgZWxlbWVudCBpcyBhIGNoaWxkIG9mIHRoZSByYWRpbyBncm91cCBwYXJlbnQgZWxlbWVudC5cclxuICAgIC8vIFdoZW4gaXQncyBub3QsIHdlIHJlc2V0IHRoZSB0YWJiYWJsZSBpbmRleCBiYWNrIHRvIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgZWxlbWVudC5cclxuICAgIC8vY29uc3QgeyB1c2VBY3RpdmVFbGVtZW50UHJvcHMgfSA9IHVzZUFjdGl2ZUVsZW1lbnQ8Rz4oeyBvbkFjdGl2ZUVsZW1lbnRDaGFuZ2U6IHVzZUNhbGxiYWNrKChhY3RpdmVFbGVtZW50OiBOb2RlIHwgbnVsbCkgPT4gc2V0QW55UmFkaW9zRm9jdXNlZCghIShnZXRSYWRpb0dyb3VwUGFyZW50RWxlbWVudCgpPy5jb250YWlucyhhY3RpdmVFbGVtZW50KSkpLCBbXSkgfSk7XHJcbiAgICAvKnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKCFhbnlSYWRpb3NGb2N1c2VkKVxyXG4gICAgICAgICAgICBuYXZpZ2F0ZVRvSW5kZXgoc2VsZWN0ZWRJbmRleCA/PyAwKTtcclxuICAgIH0sIFthbnlSYWRpb3NGb2N1c2VkLCBzZWxlY3RlZEluZGV4LCBuYXZpZ2F0ZVRvSW5kZXhdKTsqL1xyXG5cclxuXHJcbiAgICBjb25zdCB1c2VSYWRpb0dyb3VwUHJvcHMgPSB1c2VDYWxsYmFjaygoeyAuLi5wcm9wcyB9OiBoLkpTWC5IVE1MQXR0cmlidXRlczxHPik6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEc+ID0+IHtcclxuICAgICAgICBwcm9wcy5yb2xlID0gXCJyYWRpb2dyb3VwXCI7XHJcbiAgICAgICAgcmV0dXJuIHVzZUdyb3VwTGFiZWxJbnB1dFByb3BzKHVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uUHJvcHModXNlUmVmRWxlbWVudFByb3BzKHByb3BzKSkpO1xyXG4gICAgfSwgW3VzZVJlZkVsZW1lbnRQcm9wc10pXHJcblxyXG4gICAgY29uc3QgdXNlUmFkaW9Hcm91cExhYmVsUHJvcHMgPSB1c2VDYWxsYmFjaygocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEdMPik6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEdMPiA9PiB7IHJldHVybiB1c2VHcm91cExhYmVsTGFiZWxQcm9wcyhwcm9wcyk7IH0sIFt1c2VHcm91cExhYmVsTGFiZWxQcm9wc10pO1xyXG5cclxuICAgIC8vY29uc3QgY29ycmVjdGVkSW5kZXggPSAoc2VsZWN0ZWRJbmRleCA9PSBudWxsIHx8IHNlbGVjdGVkSW5kZXggPCAwIHx8IHNlbGVjdGVkSW5kZXggPj0gbWFuYWdlZENoaWxkcmVuLmxlbmd0aCkgPyBudWxsIDogc2VsZWN0ZWRJbmRleDtcclxuICAgIC8qY29uc3QgeyBvbkNoaWxkcmVuTW91bnRDaGFuZ2UgfSA9IHVzZUNoaWxkcmVuRmxhZyh7XHJcbiAgICAgICAgaW5pdGlhbEluZGV4OiAwLFxyXG4gICAgICAgIGNoaWxkcmVuLFxyXG4gICAgICAgIGtleTogXCJzZWxlY3RlZFwiXHJcbiAgICAgICAgLy9zZXRDaGlsZEZsYWc6IChpLCBjaGVja2VkKSA9PiBtYW5hZ2VkQ2hpbGRyZW5baV0/LnNldENoZWNrZWQoY2hlY2tlZCksXHJcbiAgICAgICAgLy9nZXRDaGlsZEZsYWc6ICgoaSkgPT4gbWFuYWdlZENoaWxkcmVuW2ldPy5nZXRDaGVja2VkKCkgPz8gZmFsc2UpXHJcbiAgICB9KTsqL1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKHNlbGVjdGVkVmFsdWUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzZXRTZWxlY3RlZEluZGV4KG51bGwpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gYnlOYW1lLmN1cnJlbnQuZ2V0KHNlbGVjdGVkVmFsdWUpO1xyXG4gICAgICAgICAgICBzZXRTZWxlY3RlZEluZGV4KHNlbGVjdGVkSW5kZXggPz8gbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW2J5TmFtZSwgc2VsZWN0ZWRWYWx1ZV0pO1xyXG5cclxuXHJcblxyXG4gICAgY29uc3QgdXNlUmFkaW8gPSB1c2VDYWxsYmFjazxVc2VSYWRpbzxWLCBJLCBJTD4+KGZ1bmN0aW9uIHVzZVJhZGlvKHtcclxuICAgICAgICBsaXN0TmF2aWdhdGlvbixcclxuICAgICAgICBtYW5hZ2VkQ2hpbGQsXHJcbiAgICAgICAgcm92aW5nVGFiSW5kZXgsXHJcbiAgICAgICAgaGFzRm9jdXNJbnB1dCxcclxuICAgICAgICBoYXNGb2N1c0xhYmVsLFxyXG4gICAgICAgIHJhZGlvOiB7IGRpc2FibGVkLCBsYWJlbFBvc2l0aW9uLCB0YWdJbnB1dCwgdGFnTGFiZWwsIHZhbHVlIH1cclxuICAgIH0pIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IG1hbmFnZWRDaGlsZC5pbmRleDtcclxuICAgICAgICBkZWJ1Z0xvZyhcInVzZVJhZGlvXCIsIGluZGV4KTtcclxuICAgICAgICAvL2NvbnN0IFtjaGVja2VkLCBzZXRDaGVja2VkLCBnZXRDaGVja2VkXSA9IHVzZVN0YXRlPGJvb2xlYW4gfCBudWxsPihudWxsKTtcclxuXHJcbiAgICAgICAgY29uc3Qgb25JbnB1dCA9IHVzZVN0YWJsZUNhbGxiYWNrKChlOiBoLkpTWC5UYXJnZXRlZEV2ZW50PEk+KSA9PiB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgb25TZWxlY3RlZEluZGV4Q2hhbmdlKGUsIGluZGV4KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgZ2V0VmFsdWUgPSB1c2VTdGFibGVHZXR0ZXIodmFsdWUpO1xyXG4gICAgICAgIGNvbnN0IHsgdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZFByb3BzLCAuLi5saXN0TmF2UmV0IH0gPSB1c2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkKHtcclxuICAgICAgICAgICAgbGlzdE5hdmlnYXRpb24sXHJcbiAgICAgICAgICAgIHJvdmluZ1RhYkluZGV4LFxyXG4gICAgICAgICAgICBtYW5hZ2VkQ2hpbGQsXHJcbiAgICAgICAgICAgIGhhc0ZvY3VzOiBoYXNGb2N1c0lucHV0LFxyXG4gICAgICAgICAgICBzdWJJbmZvOiB7IGdldFZhbHVlIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgeyBzaW5nbGVTZWxlY3Rpb246IHsgc2VsZWN0ZWQ6IGNoZWNrZWQgfSB9ID0gbGlzdE5hdlJldDtcclxuXHJcbiAgICAgICAgY29uc3QgeyB1c2VDaGVja2JveExpa2VJbnB1dEVsZW1lbnQsIHVzZUNoZWNrYm94TGlrZUxhYmVsRWxlbWVudCB9ID0gdXNlQ2hlY2tib3hMaWtlPEksIElMPih7XHJcbiAgICAgICAgICAgIGNoZWNrYm94TGlrZToge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tlZDogKGNoZWNrZWQgPz8gZmFsc2UpLFxyXG4gICAgICAgICAgICAgICAgbGFiZWxQb3NpdGlvbixcclxuICAgICAgICAgICAgICAgIGRpc2FibGVkLFxyXG4gICAgICAgICAgICAgICAgb25DaGVja2VkQ2hhbmdlOiBvbklucHV0LFxyXG4gICAgICAgICAgICAgICAgcm9sZTogXCJyYWRpb1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxhYmVsOiB7XHJcbiAgICAgICAgICAgICAgICB0YWdJbnB1dDogdGFnSW5wdXQgYXMgbmV2ZXIsXHJcbiAgICAgICAgICAgICAgICB0YWdMYWJlbDogdGFnTGFiZWwgYXMgbmV2ZXJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGFzRm9jdXNJbnB1dCxcclxuICAgICAgICAgICAgaGFzRm9jdXNMYWJlbFxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgYnlOYW1lLmN1cnJlbnQuc2V0KHZhbHVlLCBpbmRleCk7XHJcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7IGJ5TmFtZS5jdXJyZW50LmRlbGV0ZSh2YWx1ZSk7IH1cclxuICAgICAgICB9LCBbYnlOYW1lLCB2YWx1ZSwgaW5kZXhdKTtcclxuXHJcbiAgICAgICAgY29uc3QgdXNlUmFkaW9JbnB1dDogVXNlUmFkaW9JbnB1dDxJPiA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdGFnID0gdGFnSW5wdXQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZVJhZGlvSW5wdXRQcm9wcyA9IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8ST4pOiBoLkpTWC5IVE1MQXR0cmlidXRlczxJPiA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFnID09IFwiaW5wdXRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLmNoZWNrZWQgPSAoY2hlY2tlZCA/PyBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMudHlwZSA9IFwicmFkaW9cIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzW1wiYXJpYS1jaGVja2VkXCJdID0gKGNoZWNrZWQgPz8gZmFsc2UpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcHNJZklucHV0SGFuZGxlc0ZvY3VzID0gdXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb25DaGlsZFByb3BzKHByb3BzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHVzZUNoZWNrYm94TGlrZUlucHV0RWxlbWVudFByb3BzIH0gPSB1c2VDaGVja2JveExpa2VJbnB1dEVsZW1lbnQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAodXNlTWVyZ2VkUHJvcHM8ST4oKHVzZUNoZWNrYm94TGlrZUlucHV0RWxlbWVudFByb3BzKHt9KSksIGxhYmVsUG9zaXRpb24gPT0gXCJzZXBhcmF0ZVwiID8gcHJvcHNJZklucHV0SGFuZGxlc0ZvY3VzIDogcHJvcHMpKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB1c2VSYWRpb0lucHV0UHJvcHNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHVzZVJhZGlvTGFiZWw6IFVzZVJhZGlvTGFiZWw8SUw+ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAvL2NvbnN0IHRhZyA9IHRhZ0xhYmVsO1xyXG4gICAgICAgICAgICBjb25zdCB1c2VSYWRpb0xhYmVsUHJvcHMgPSAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPElMPik6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPElMPiA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHVzZUNoZWNrYm94TGlrZUxhYmVsRWxlbWVudFByb3BzIH0gPSB1c2VDaGVja2JveExpa2VMYWJlbEVsZW1lbnQoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BzSWZMYWJlbEhhbmRsZXNGb2N1cyA9IHVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uQ2hpbGRQcm9wcyhwcm9wcyBhcyBhbnkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZUNoZWNrYm94TGlrZUxhYmVsRWxlbWVudFByb3BzKHVzZU1lcmdlZFByb3BzPElMPih7fSBhcyBhbnksIGxhYmVsUG9zaXRpb24gPT0gXCJ3cmFwcGluZ1wiID8gcHJvcHNJZkxhYmVsSGFuZGxlc0ZvY3VzIGFzIGFueSA6IHByb3BzIGFzIGFueSkpXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdXNlUmFkaW9MYWJlbFByb3BzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBbdXNlQ2hlY2tib3hMaWtlTGFiZWxFbGVtZW50XSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVzZVJhZGlvSW5wdXQsXHJcbiAgICAgICAgICAgIHVzZVJhZGlvTGFiZWwsXHJcbiAgICAgICAgICAgIC4uLmxpc3ROYXZSZXRcclxuICAgICAgICAgICAgLy9jaGVja2VkOiBjaGVja2VkID8/IGZhbHNlLFxyXG4gICAgICAgICAgICAvL3RhYmJhYmxlOiB0YWJiYWJsZSA/PyBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9LCBbYnlOYW1lLCB1c2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkXSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VSYWRpbyxcclxuICAgICAgICB1c2VSYWRpb0dyb3VwUHJvcHMsXHJcbiAgICAgICAgdXNlUmFkaW9Hcm91cExhYmVsUHJvcHMsXHJcbiAgICAgICAgcmFkaW9Hcm91cDoge1xyXG4gICAgICAgICAgICBzZWxlY3RlZEluZGV4LFxyXG4gICAgICAgICAgICBzZWxlY3RlZFZhbHVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICAuLi5saXN0TmF2UmV0XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlUmFkaW9SZXR1cm5UeXBlSW5mbzxJIGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkUmV0dXJuVHlwZUluZm88ST4geyB9XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVJhZGlvUmV0dXJuVHlwZVdpdGhIb29rczxJIGV4dGVuZHMgRWxlbWVudCwgTCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlUmFkaW9SZXR1cm5UeXBlSW5mbzxJPiB7XHJcbiAgICB1c2VSYWRpb0lucHV0OiBVc2VSYWRpb0lucHV0PEk+O1xyXG4gICAgdXNlUmFkaW9MYWJlbDogVXNlUmFkaW9MYWJlbDxMPjtcclxufVxyXG5cclxudHlwZSBVc2VSYWRpb0lucHV0PEkgZXh0ZW5kcyBFbGVtZW50PiA9ICh7IHRhZyB9OiBUYWdTZW5zaXRpdmVQcm9wczxJPikgPT4geyB1c2VSYWRpb0lucHV0UHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8ST4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEk+OyB9XHJcbnR5cGUgVXNlUmFkaW9MYWJlbDxMIGV4dGVuZHMgRWxlbWVudD4gPSAoeyB0YWcgfTogVGFnU2Vuc2l0aXZlUHJvcHM8TD4pID0+IHsgdXNlUmFkaW9MYWJlbFByb3BzOiAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEw+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxMPjsgfVxyXG5cclxuZXhwb3J0IHR5cGUgVXNlUmFkaW88ViBleHRlbmRzIHN0cmluZyB8IG51bWJlciwgSSBleHRlbmRzIEVsZW1lbnQsIEwgZXh0ZW5kcyBFbGVtZW50PiA9IChhOiBVc2VSYWRpb1BhcmFtZXRlcnM8ViwgSSwgTD4pID0+IFVzZVJhZGlvUmV0dXJuVHlwZVdpdGhIb29rczxJLCBMPlxyXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyBmaW5kRmlyc3RGb2N1c2FibGUsIHJldHVyblRydWUsIHVzZUNoaWxkcmVuRmxhZywgdXNlR2xvYmFsSGFuZGxlciwgdXNlTWFuYWdlZENoaWxkcmVuLCB1c2VNZXJnZWRQcm9wcywgdXNlUmVmRWxlbWVudCwgdXNlU3RhYmxlQ2FsbGJhY2ssIHVzZVN0YXRlLCB1c2VUaW1lb3V0IH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgQ2hpbGRGbGFnT3BlcmF0aW9ucywgT25DaGlsZHJlbk1vdW50Q2hhbmdlLCBVc2VNYW5hZ2VkQ2hpbGRQYXJhbWV0ZXJzLCBVc2VNYW5hZ2VkQ2hpbGRyZW5QYXJhbWV0ZXJzLCBVc2VNYW5hZ2VkQ2hpbGRyZW5SZXR1cm5UeXBlSW5mbyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1jaGlsZC1tYW5hZ2VyXCI7XHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyBkZWJ1Z0xvZyB9IGZyb20gXCIuL3Byb3BzXCI7XHJcblxyXG5cclxuXHJcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1pbnRlcmZhY2UgKi9cclxuZXhwb3J0IGludGVyZmFjZSBVc2VUb2FzdHNQYXJhbWV0ZXJzIGV4dGVuZHMgVXNlTWFuYWdlZENoaWxkcmVuUGFyYW1ldGVyczxudW1iZXIsIG5ldmVyPiB7IH1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlVG9hc3RQYXJhbWV0ZXJzIGV4dGVuZHMgVXNlTWFuYWdlZENoaWxkUGFyYW1ldGVyczxudW1iZXIsIFRvYXN0SW5mbywgXCJzaG93aW5nXCIsIG5ldmVyPiB7XHJcbiAgICAvL2luZm86IE9taXQ8VG9hc3RJbmZvQmFzZSwgXCJkaXNtaXNzZWRcIiB8IFwiZ2V0U3RhdHVzXCIgfCBcInNldFN0YXR1c1wiIHwgXCJmb2N1c1wiIHwgXCJmbGFnc1wiPjtcclxuICAgIHRvYXN0OiB7XHJcbiAgICAgICAgcG9saXRlbmVzcz86IFwicG9saXRlXCIgfCBcImFzc2VydGl2ZVwiO1xyXG4gICAgICAgIHRpbWVvdXQ6IG51bWJlciB8IG51bGw7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVG9hc3RJbmZvIHtcclxuICAgIC8vZGlzbWlzc2VkOiBib29sZWFuO1xyXG4gICAgZm9jdXMoKTogdm9pZDtcclxuICAgIC8vc2V0U3RhdHVzOiBTdGF0ZVVwZGF0ZXI8XCJwZW5kaW5nXCIgfCBcImFjdGl2ZVwiIHwgXCJkaXNtaXNzZWRcIj47XHJcbiAgICAvL2dldFN0YXR1cygpOiBudWxsIHwgXCJwZW5kaW5nXCIgfCBcImFjdGl2ZVwiIHwgXCJkaXNtaXNzZWRcIjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgVXNlVG9hc3QgPSAoYXJnczogVXNlVG9hc3RQYXJhbWV0ZXJzKSA9PiBVc2VUb2FzdFJldHVyblR5cGVJbmZvO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VUb2FzdFJldHVyblR5cGVJbmZvIHtcclxuICAgIHRvYXN0OiB7XHJcbiAgICAgICAgZGlzbWlzczogKCkgPT4gdm9pZDtcclxuICAgICAgICBzaG93aW5nOiBib29sZWFuO1xyXG4gICAgICAgIHJlc2V0RGlzbWlzc1RpbWVyOiAoKSA9PiB2b2lkO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVRvYXN0c1JldHVyblR5cGVJbmZvIGV4dGVuZHMgVXNlTWFuYWdlZENoaWxkcmVuUmV0dXJuVHlwZUluZm88bnVtYmVyLCBUb2FzdEluZm8sIFwic2hvd2luZ1wiPiB7XHJcblxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVRvYXN0UmV0dXJuVHlwZVdpdGhIb29rcyBleHRlbmRzIFVzZVRvYXN0UmV0dXJuVHlwZUluZm8ge31cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlVG9hc3RzUmV0dXJuVHlwZVdpdGhIb29rczxDb250YWluZXJUeXBlIGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VUb2FzdHNSZXR1cm5UeXBlSW5mbyB7XHJcbiAgICB1c2VUb2FzdDogVXNlVG9hc3Q7XHJcbiAgICB1c2VUb2FzdENvbnRhaW5lclByb3BzKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxDb250YWluZXJUeXBlPik6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPENvbnRhaW5lclR5cGU+O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlVG9hc3RzPENvbnRhaW5lclR5cGUgZXh0ZW5kcyBFbGVtZW50Pih7IG1hbmFnZWRDaGlsZHJlbjogeyBvbkNoaWxkcmVuTW91bnRDaGFuZ2U6IG9jbXUsIG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdCB9IH06IFVzZVRvYXN0c1BhcmFtZXRlcnMpOiBVc2VUb2FzdHNSZXR1cm5UeXBlV2l0aEhvb2tzPENvbnRhaW5lclR5cGU+IHtcclxuICAgIGRlYnVnTG9nKFwidXNlVG9hc3RzXCIpO1xyXG5cclxuICAgIC8vIFwiUG9pbnRlclwiIHRvIHdoYXRldmVyIGluZGV4IHRvYXN0IGlzIGN1cnJlbnRseSBiZWluZyBzaG93bi5cclxuICAgIC8vIEUuZy4gaXQncyAwIHdoZW4gdGhlIGZpcnN0IHRvYXN0IGlzIHNob3duLCB0aGVuIHdoZW4gZGlzbWlzc2VkLCBpdCBiZWNvbWVzIDEuXHJcbiAgICAvLyBXaGVuIHRoZSBzZWNvbmQgdG9hc3QgaXMgc2hvd24sIGl0IHN0YXlzIGF0IDEgdW50aWwgZGlzbWlzc2VkLCB3aGVuIGl0IHRoZW4gYmVjb21lcyAyLCBldGMuXHJcbiAgICAvLyBCZWNhdXNlIHRvYXN0cyBjYW4gcG90ZW50aWFsbHkgYmUgZGlzbWlzc2VkIG91dCBvZiBvcmRlciwgdGhpcyByZXByZXNlbnRzIHRoZSBcIm9sZGVzdFwiIHRvYXN0IHRoYXQgc3RpbGwgaGFzbid0IGJlZW4gZGlzbWlzc2VkLFxyXG4gICAgLy8gZXZlbiBpZiBcInlvdW5nZXJcIiBvbmVzIGhhdmUuXHJcbiAgICBjb25zdCBbYWN0aXZlVG9hc3RJbmRleCwgc2V0QWN0aXZlVG9hc3RJbmRleCwgZ2V0QWN0aXZlVG9hc3RJbmRleF0gPSB1c2VTdGF0ZSgtMSk7XHJcblxyXG4gICAgY29uc3QgW3BvbGl0ZW5lc3MsIHNldFBvbGl0ZW5lc3NdID0gdXNlU3RhdGU8XCJwb2xpdGVcIiB8IFwiYXNzZXJ0aXZlXCI+KFwicG9saXRlXCIpO1xyXG5cclxuICAgIGNvbnN0IHsgZ2V0RWxlbWVudCwgdXNlUmVmRWxlbWVudFByb3BzIH0gPSB1c2VSZWZFbGVtZW50PENvbnRhaW5lclR5cGU+KHt9KTtcclxuICAgIGNvbnN0IHsgdXNlTWFuYWdlZENoaWxkLCAuLi5jaGlsZEluZm8gfSA9IHVzZU1hbmFnZWRDaGlsZHJlbjxudW1iZXIsIFRvYXN0SW5mbywgXCJzaG93aW5nXCI+KHsgbWFuYWdlZENoaWxkcmVuOiB7IG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdCwgb25DaGlsZHJlbk1vdW50Q2hhbmdlOiB1c2VTdGFibGVDYWxsYmFjazxPbkNoaWxkcmVuTW91bnRDaGFuZ2U8bnVtYmVyPj4oKG0sIHUpID0+IHsgcmVldmFsdWF0ZUNsb3Nlc3RGaXQoKTsgb2NtdT8uKG0sIHUpIH0pIH0gfSk7XHJcblxyXG4gICAgY29uc3QgeyBtYW5hZ2VkQ2hpbGRyZW46IHsgY2hpbGRyZW46IHRvYXN0UXVldWUgfSB9ID0gY2hpbGRJbmZvO1xyXG5cclxuICAgIC8vIEFueSB0aW1lIGEgbmV3IHRvYXN0IG1vdW50cywgdXBkYXRlIG91ciBib3R0b21tb3N0VG9hc3RJbmRleCB0byBwb2ludCB0byBpdCBpZiBuZWNlc3NhcnlcclxuICAgIC8vIChcIm5lY2Vzc2FyeVwiIGp1c3QgbWVhbmluZyBpZiBpdCdzIHRoZSBmaXJzdCB0b2FzdCBldmVyIG9yIGFsbCBwcmlvciB0b2FzdHMgaGF2ZSBiZWVuIGRpc21pc3NlZClcclxuICAgIGNvbnN0IG9uQW55VG9hc3RNb3VudGVkID0gdXNlQ2FsbGJhY2soKF9pbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgbGV0IGJvdHRvbSA9IGdldEFjdGl2ZVRvYXN0SW5kZXgoKTtcclxuICAgICAgICB3aGlsZSAoYm90dG9tIDw9IHRvYXN0UXVldWUuZ2V0SGlnaGVzdEluZGV4KCkgJiYgKGJvdHRvbSA8IDAgfHwgdG9hc3RRdWV1ZS5nZXRBdChib3R0b20pPy5mbGFncz8uc2hvd2luZykpIHtcclxuICAgICAgICAgICAgKytib3R0b207XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldEFjdGl2ZVRvYXN0SW5kZXgoYm90dG9tKTtcclxuICAgIH0sIFtzZXRBY3RpdmVUb2FzdEluZGV4XSk7XHJcblxyXG4gICAgLy8gQW55IHRpbWUgYSB0b2FzdCBpcyBkaXNtaXNzZWQsIHVwZGF0ZSBvdXIgYm90dG9tbW9zdFRvYXN0SW5kZXggdG8gcG9pbnQgdG8gdGhlIG5leHQgdG9hc3QgaW4gdGhlIHF1ZXVlLCBpZiBvbmUgZXhpc3RzLlxyXG4gICAgY29uc3Qgb25BbnlUb2FzdERpc21pc3NlZCA9IHVzZUNhbGxiYWNrKChpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgbGV0IGJvdHRvbSA9IGdldEFjdGl2ZVRvYXN0SW5kZXgoKTtcclxuICAgICAgICB3aGlsZSAoYm90dG9tIDw9IHRvYXN0UXVldWUuZ2V0SGlnaGVzdEluZGV4KCkgJiYgKGJvdHRvbSA8IDAgfHwgYm90dG9tID09PSBpbmRleCB8fCB0b2FzdFF1ZXVlLmdldEF0KGJvdHRvbSk/LmZsYWdzKSkge1xyXG4gICAgICAgICAgICArK2JvdHRvbTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0QWN0aXZlVG9hc3RJbmRleChib3R0b20pO1xyXG5cclxuICAgICAgICBpZiAoZ2V0RWxlbWVudCgpPy5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSlcclxuICAgICAgICAgICAgdG9hc3RRdWV1ZS5nZXRBdChib3R0b20pPy5zdWJJbmZvLmZvY3VzKCk7XHJcbiAgICB9LCBbc2V0QWN0aXZlVG9hc3RJbmRleF0pO1xyXG5cclxuICAgIC8vIEFueSB0aW1lIHRoZSBpbmRleCBwb2ludGluZyB0byB0aGUgY3VycmVudGx5LXNob3dpbmcgdG9hc3QgY2hhbmdlcyxcclxuICAgIC8vIHVwZGF0ZSB0aGUgcmVsZXZhbnQgY2hpbGRyZW4gYW5kIGxldCB0aGVtIGtub3cgdGhhdCB0aGV5J3JlIG5vdyBlaXRoZXIgYWN0aXZlIG9yIGRpc21pc3NlZC5cclxuICAgIGNvbnN0IHsgY2hhbmdlSW5kZXgsIHJlZXZhbHVhdGVDbG9zZXN0Rml0IH0gPSB1c2VDaGlsZHJlbkZsYWc8VG9hc3RJbmZvLCBcInNob3dpbmdcIj4oe1xyXG4gICAgICAgIGluaXRpYWxJbmRleDogYWN0aXZlVG9hc3RJbmRleCxcclxuICAgICAgICBjaGlsZHJlbjogdG9hc3RRdWV1ZSxcclxuICAgICAgICBrZXk6IFwic2hvd2luZ1wiLFxyXG4gICAgICAgIGNsb3Nlc3RGaXQ6IGZhbHNlLFxyXG4gICAgICAgIC8qIHNldENoaWxkRmxhZzogKChpLCBzZXQpID0+IHtcclxuICAgICAgICAgICAgIGlmIChzZXQpXHJcbiAgICAgICAgICAgICAgICAgY29uc29sZS5hc3NlcnQoaSA8PSBnZXRBY3RpdmVUb2FzdEluZGV4KCkpO1xyXG4gXHJcbiAgICAgICAgICAgICB0b2FzdFF1ZXVlW2ldPy5zZXRTdGF0dXMocHJldiA9PiBwcmV2ID09PSBcImRpc21pc3NlZFwiID8gXCJkaXNtaXNzZWRcIiA6IHNldCA/IFwiYWN0aXZlXCIgOiAoaSA8IGdldEFjdGl2ZVRvYXN0SW5kZXgoKSA/IFwiZGlzbWlzc2VkXCIgOiBcInBlbmRpbmdcIikpO1xyXG4gICAgICAgICB9KSwqL1xyXG4gICAgICAgIC8vZ2V0Q2hpbGRGbGFnOiBpID0+IHRvYXN0UXVldWVbaV0/LmdldFN0YXR1cygpID09PSBcImFjdGl2ZVwiXHJcbiAgICB9KTtcclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY2hhbmdlSW5kZXgoYWN0aXZlVG9hc3RJbmRleCk7XHJcbiAgICB9LCBbYWN0aXZlVG9hc3RJbmRleF0pO1xyXG5cclxuICAgIGNvbnN0IHVzZVRvYXN0OiBVc2VUb2FzdCA9IHVzZUNhbGxiYWNrKCh7IHRvYXN0OiB7IHBvbGl0ZW5lc3MsIHRpbWVvdXQgfSwgbWFuYWdlZENoaWxkOiB7IGluZGV4IH0gfTogVXNlVG9hc3RQYXJhbWV0ZXJzKTogVXNlVG9hc3RSZXR1cm5UeXBlV2l0aEhvb2tzID0+IHtcclxuICAgICAgICBkZWJ1Z0xvZyhcInVzZVRvYXN0XCIsIGluZGV4KTtcclxuICAgICAgICAvL2NvbnN0IFtzdGF0dXMsIHNldFN0YXR1cywgZ2V0U3RhdHVzXSA9IHVzZVN0YXRlPFwicGVuZGluZ1wiIHwgXCJhY3RpdmVcIiB8IFwiZGlzbWlzc2VkXCI+KFwicGVuZGluZ1wiKTtcclxuICAgICAgICAvL2NvbnN0IGRpc21pc3NlZCA9IChzdGF0dXMgPT09IFwiZGlzbWlzc2VkXCIpO1xyXG4gICAgICAgIGNvbnN0IGRpc21pc3MgPSB1c2VDYWxsYmFjaygoKSA9PiB7IHNldFNob3dpbmcoZmFsc2UpOyB9LCBbXSk7XHJcblxyXG4gICAgICAgIGNvbnN0IFttb3VzZU92ZXIsIHNldE1vdXNlT3Zlcl0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG4gICAgICAgIHVzZUdsb2JhbEhhbmRsZXIoZG9jdW1lbnQsIFwicG9pbnRlcm1vdmVcIiwgZSA9PiB7XHJcbiAgICAgICAgICAgIHNldE1vdXNlT3ZlcigoZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLmNvbnRhaW5zKGdldEVsZW1lbnQoKSkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvL2NvbnN0IHRvYXN0SWQgPSBnZW5lcmF0ZVJhbmRvbUlkKFwidG9hc3QtXCIpO1xyXG4gICAgICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7IHNldFBvbGl0ZW5lc3MocG9saXRlbmVzcyA/PyBcInBvbGl0ZVwiKTsgfSwgW3BvbGl0ZW5lc3NdKTtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IGZvY3VzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZ2V0RWxlbWVudCgpO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3RGb2N1c2FibGUgPSBmaW5kRmlyc3RGb2N1c2FibGUoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBmaXJzdEZvY3VzYWJsZT8uZm9jdXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIFtdKTtcclxuXHJcbiAgICAgICAgY29uc3QgW3Nob3dpbmcsIHNldFNob3dpbmcsIGdldFNob3dpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgICAgIGNvbnN0IHNob3dpbmdSZWYgPSB1c2VSZWY8Q2hpbGRGbGFnT3BlcmF0aW9ucz4oeyBnZXQ6IGdldFNob3dpbmcsIHNldDogc2V0U2hvd2luZywgaXNWYWxpZDogcmV0dXJuVHJ1ZSB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgX186IHZvaWQgPSB1c2VNYW5hZ2VkQ2hpbGQoeyBtYW5hZ2VkQ2hpbGQ6IHsgaW5kZXgsIGZsYWdzOiB7IHNob3dpbmc6IHNob3dpbmdSZWYuY3VycmVudCB9LCBzdWJJbmZvOiB7IGZvY3VzIH0gfSB9KTtcclxuXHJcbiAgICAgICAgLy9jb25zdCBpc0FjdGl2ZSA9IChzdGF0dXMgPT09IFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIGNvbnN0IFt0cmlnZ2VySW5kZXgsIHNldFRyaWdnZXJJbmRleF0gPSB1c2VTdGF0ZSgxKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzZXREaXNtaXNzVGltZXIgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgICAgICAgIHNldFRyaWdnZXJJbmRleChpID0+ICsraSk7XHJcbiAgICAgICAgfSwgW10pXHJcblxyXG4gICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIG9uQW55VG9hc3RNb3VudGVkKGluZGV4KTtcclxuICAgICAgICB9LCBbXSk7XHJcblxyXG4gICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChzaG93aW5nKVxyXG4gICAgICAgICAgICAgICAgb25BbnlUb2FzdERpc21pc3NlZChpbmRleClcclxuICAgICAgICB9LCBbc2hvd2luZ10pO1xyXG5cclxuICAgICAgICB1c2VUaW1lb3V0KHtcclxuICAgICAgICAgICAgdGltZW91dDogdGltZW91dCA9PSBudWxsIHx8IG1vdXNlT3ZlciA/IG51bGwgOiBpc0Zpbml0ZSh0aW1lb3V0KSA/IHRpbWVvdXQgOiB0aW1lb3V0ID4gMCA/IG51bGwgOiAwLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNob3dpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0U2hvd2luZyhmYWxzZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRyaWdnZXJJbmRleDogc2hvd2luZyA/IHRyaWdnZXJJbmRleCA6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0b2FzdDoge1xyXG4gICAgICAgICAgICAgICAgc2hvd2luZyxcclxuICAgICAgICAgICAgICAgIGRpc21pc3MsXHJcbiAgICAgICAgICAgICAgICByZXNldERpc21pc3NUaW1lclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHVzZVRvYXN0Q29udGFpbmVyUHJvcHMoeyByb2xlLCBcImFyaWEtbGl2ZVwiOiBhcmlhTGl2ZSwgXCJhcmlhLXJlbGV2YW50XCI6IGFyaWFSZWxldmFudCwgLi4ucHJvcHMgfTogaC5KU1guSFRNTEF0dHJpYnV0ZXM8Q29udGFpbmVyVHlwZT4pOiBoLkpTWC5IVE1MQXR0cmlidXRlczxDb250YWluZXJUeXBlPiB7XHJcbiAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzPENvbnRhaW5lclR5cGU+KHVzZVJlZkVsZW1lbnRQcm9wcyh7IGNsYXNzOiBcInRvYXN0cy1jb250YWluZXJcIiwgcm9sZTogcm9sZSB8fCBcInN0YXR1c1wiLCBcImFyaWEtbGl2ZVwiOiBwb2xpdGVuZXNzID8/IGFyaWFMaXZlID8/IFwicG9saXRlXCIsIFwiYXJpYS1yZWxldmFudFwiOiBhcmlhUmVsZXZhbnQgPz8gXCJhZGRpdGlvbnNcIiB9IGFzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPENvbnRhaW5lclR5cGU+KSwgcHJvcHMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZXR1cm4geyBcclxuICAgICAgICB1c2VUb2FzdCwgXHJcbiAgICAgICAgdXNlVG9hc3RDb250YWluZXJQcm9wcywgXHJcbiAgICAgICAgLi4uY2hpbGRJbmZvIFxyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyBNYW5hZ2VkQ2hpbGRyZW4sIHJldHVybk51bGwsIHVzZUdyaWROYXZpZ2F0aW9uLCBVc2VHcmlkTmF2aWdhdGlvblBhcmFtZXRlcnMsIFVzZUhhc0ZvY3VzUGFyYW1ldGVycywgVXNlTGlzdE5hdmlnYXRpb25SZXR1cm5UeXBlSW5mbywgVXNlTGlzdE5hdmlnYXRpb25TdWJJbmZvLCB1c2VQYXNzaXZlU3RhdGUsIFVzZVJvdmluZ1RhYkluZGV4U3ViSW5mbywgdXNlU29ydGFibGVDaGlsZHJlbiwgdXNlU3RhYmxlQ2FsbGJhY2sgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVyc1wiO1xyXG5pbXBvcnQgeyBVc2VHcmlkTmF2aWdhdGlvbkNlbGxQYXJhbWV0ZXJzLCBVc2VHcmlkTmF2aWdhdGlvbkNlbGxSZXR1cm5UeXBlSW5mbywgVXNlR3JpZE5hdmlnYXRpb25Sb3dQYXJhbWV0ZXJzLCBVc2VHcmlkTmF2aWdhdGlvblJvd1JldHVyblR5cGVJbmZvIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLWdyaWQtbmF2aWdhdGlvblwiO1xyXG5pbXBvcnQgeyBDb21wYXJlLCBHZXRJbmRleCwgR2V0VmFsdWUsIFVzZVNvcnRhYmxlQ2hpbGRyZW5SZXR1cm5UeXBlSW5mbyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1zb3J0YWJsZS1jaGlsZHJlblwiO1xyXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTGF5b3V0RWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IGRlYnVnTG9nIH0gZnJvbSBcIi4vcHJvcHNcIjtcclxuXHJcbmV4cG9ydCB0eXBlIFRhYmxlVmFsdWVUeXBlID0gc3RyaW5nIHwgbnVtYmVyIHwgbnVsbCB8IGJvb2xlYW4gfCBEYXRlO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VUYWJsZVBhcmFtZXRlcnMgZXh0ZW5kcyBVc2VHcmlkTmF2aWdhdGlvblBhcmFtZXRlcnM8XCJpbmRleE1hbmdsZXJcIiB8IFwiaW5kZXhEZW1hbmdsZXJcIiwgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXI+IHsgfVxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVRhYmxlQm9keVBhcmFtZXRlcnMgeyB9XHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlVGFibGVSb3dQYXJhbWV0ZXJzPENlbGxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBPbWl0PFVzZUdyaWROYXZpZ2F0aW9uUm93UGFyYW1ldGVyczxVc2VUYWJsZVJvd1N1YkluZm88Q2VsbEVsZW1lbnQ+LCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBuZXZlciwgbmV2ZXIsIG5ldmVyLCBcInN1YkluZm9cIiwgXCJzdWJJbmZvXCIsIFwic3ViSW5mb1wiLCB7fT4sIFwic3ViSW5mb1wiPiB7XHJcbiAgICB0YWJsZVJvdzogUGljazxVc2VUYWJsZVJvd1N1YkluZm88Q2VsbEVsZW1lbnQ+LCBcImxvY2F0aW9uXCI+O1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlVGFibGVDZWxsUGFyYW1ldGVyczxDZWxsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlR3JpZE5hdmlnYXRpb25DZWxsUGFyYW1ldGVyczxDZWxsRWxlbWVudCwgVXNlVGFibGVDZWxsU3ViSW5mbywgbmV2ZXIsIFwic3ViSW5mb1wiLCBcInN1YkluZm9cIiwgXCJzdWJJbmZvXCIsIFVzZVRhYmxlQ2VsbFN1YkluZm8+IHtcclxuICAgIGhhc0ZvY3VzOiBVc2VIYXNGb2N1c1BhcmFtZXRlcnM8Q2VsbEVsZW1lbnQ+O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVRhYmxlUm93U3ViSW5mbzxDZWxsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IHtcclxuICAgIGxvY2F0aW9uOiBcImhlYWRcIiB8IFwiYm9keVwiIHwgXCJmb290XCI7XHJcbiAgICBnZXRDZWxscygpOiBNYW5hZ2VkQ2hpbGRyZW48bnVtYmVyLCBVc2VSb3ZpbmdUYWJJbmRleFN1YkluZm88Q2VsbEVsZW1lbnQsIFVzZUxpc3ROYXZpZ2F0aW9uU3ViSW5mbzxVc2VUYWJsZUNlbGxTdWJJbmZvPj4sIFwidGFiYmFibGVcIj47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlVGFibGVDZWxsU3ViSW5mbyB7XHJcbiAgICBsb2NhdGlvbjogXCJoZWFkXCIgfCBcImJvZHlcIiB8IFwiZm9vdFwiO1xyXG4gICAgdmFsdWU6IFRhYmxlVmFsdWVUeXBlO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVRhYmxlQ2VsbFJldHVyblR5cGVJbmZvPENlbGxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VHcmlkTmF2aWdhdGlvbkNlbGxSZXR1cm5UeXBlSW5mbzxDZWxsRWxlbWVudD4geyB0YWJsZUhlYWRlckNlbGw6IHsgc29ydCgpOiB2b2lkIH0gfVxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZVRhYmxlUm93UmV0dXJuVHlwZUluZm88Um93RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIENlbGxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VHcmlkTmF2aWdhdGlvblJvd1JldHVyblR5cGVJbmZvPFJvd0VsZW1lbnQsIENlbGxFbGVtZW50LCBVc2VUYWJsZUNlbGxTdWJJbmZvLCBuZXZlcj4geyB9XHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlVGFibGVCb2R5UmV0dXJuVHlwZUluZm88Um93RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIENlbGxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VTb3J0YWJsZUNoaWxkcmVuUmV0dXJuVHlwZUluZm88VXNlUm92aW5nVGFiSW5kZXhTdWJJbmZvPFJvd0VsZW1lbnQsIFVzZUxpc3ROYXZpZ2F0aW9uU3ViSW5mbzxVc2VUYWJsZVJvd1N1YkluZm88Q2VsbEVsZW1lbnQ+Pj4sIG5ldmVyLCBbXT4geyB9XHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlVGFibGVSZXR1cm5UeXBlSW5mbzxSb3dFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgQ2VsbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIFVzZUxpc3ROYXZpZ2F0aW9uUmV0dXJuVHlwZUluZm88Um93RWxlbWVudCwgVXNlVGFibGVSb3dTdWJJbmZvPENlbGxFbGVtZW50PiwgbmV2ZXI+IHsgfVxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlVGFibGVDZWxsUmV0dXJuVHlwZVdpdGhIb29rczxDZWxsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlVGFibGVDZWxsUmV0dXJuVHlwZUluZm88Q2VsbEVsZW1lbnQ+IHsgdXNlVGFibGVDZWxsUHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8Q2VsbEVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxDZWxsRWxlbWVudD47IH1cclxuZXhwb3J0IGludGVyZmFjZSBVc2VUYWJsZVJvd1JldHVyblR5cGVXaXRoSG9va3M8Um93RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIENlbGxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VUYWJsZVJvd1JldHVyblR5cGVJbmZvPFJvd0VsZW1lbnQsIENlbGxFbGVtZW50PiB7IHVzZVRhYmxlQ2VsbDogVXNlVGFibGVDZWxsPENlbGxFbGVtZW50PjsgdXNlVGFibGVSb3dQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxSb3dFbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8Um93RWxlbWVudD47IH1cclxuZXhwb3J0IGludGVyZmFjZSBVc2VUYWJsZUJvZHlSZXR1cm5UeXBlV2l0aEhvb2tzPEJvZHlTZWN0aW9uRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIFJvd0VsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDZWxsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlVGFibGVCb2R5UmV0dXJuVHlwZUluZm88Um93RWxlbWVudCwgQ2VsbEVsZW1lbnQ+IHsgdXNlVGFibGVCb2R5UHJvcHM6IChwcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8Qm9keVNlY3Rpb25FbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8Qm9keVNlY3Rpb25FbGVtZW50PiB9XHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlVGFibGVSZXR1cm5UeXBlV2l0aEhvb2tzPFRhYmxlRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEJvZHlTZWN0aW9uRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIFJvd0VsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDZWxsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlVGFibGVSZXR1cm5UeXBlSW5mbzxSb3dFbGVtZW50LCBDZWxsRWxlbWVudD4ge1xyXG4gICAgdXNlVGFibGVSb3c6IFVzZVRhYmxlUm93PFJvd0VsZW1lbnQsIENlbGxFbGVtZW50PjtcclxuICAgIHVzZVRhYmxlQm9keTogVXNlVGFibGVCb2R5PEJvZHlTZWN0aW9uRWxlbWVudCwgUm93RWxlbWVudCwgQ2VsbEVsZW1lbnQ+O1xyXG4gICAgdXNlVGFibGVQcm9wczogKHByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxUYWJsZUVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxUYWJsZUVsZW1lbnQ+O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBVc2VUYWJsZUNlbGw8Q2VsbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiA9IChwOiBVc2VUYWJsZUNlbGxQYXJhbWV0ZXJzPENlbGxFbGVtZW50PikgPT4gVXNlVGFibGVDZWxsUmV0dXJuVHlwZVdpdGhIb29rczxDZWxsRWxlbWVudD47XHJcbmV4cG9ydCB0eXBlIFVzZVRhYmxlUm93PFJvd0VsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDZWxsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+ID0gKHA6IFVzZVRhYmxlUm93UGFyYW1ldGVyczxDZWxsRWxlbWVudD4pID0+IFVzZVRhYmxlUm93UmV0dXJuVHlwZVdpdGhIb29rczxSb3dFbGVtZW50LCBDZWxsRWxlbWVudD47XHJcbmV4cG9ydCB0eXBlIFVzZVRhYmxlQm9keTxCb2R5U2VjdGlvbkVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBSb3dFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgQ2VsbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiA9IChwOiBVc2VUYWJsZUJvZHlQYXJhbWV0ZXJzKSA9PiBVc2VUYWJsZUJvZHlSZXR1cm5UeXBlV2l0aEhvb2tzPEJvZHlTZWN0aW9uRWxlbWVudCwgUm93RWxlbWVudCwgQ2VsbEVsZW1lbnQ+O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRhYmxlPFxyXG4gICAgVGFibGVFbGVtZW50IGV4dGVuZHMgRWxlbWVudCxcclxuICAgIEJvZHlTZWN0aW9uRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsXHJcbiAgICBSb3dFbGVtZW50IGV4dGVuZHMgRWxlbWVudCxcclxuICAgIENlbGxFbGVtZW50IGV4dGVuZHMgRWxlbWVudFxyXG4+KHsgbGluZWFyTmF2aWdhdGlvbiwgbGlzdE5hdmlnYXRpb24sIG1hbmFnZWRDaGlsZHJlbiwgcm92aW5nVGFiSW5kZXgsIHR5cGVhaGVhZE5hdmlnYXRpb24gfTogVXNlVGFibGVQYXJhbWV0ZXJzKTogVXNlVGFibGVSZXR1cm5UeXBlV2l0aEhvb2tzPFRhYmxlRWxlbWVudCwgQm9keVNlY3Rpb25FbGVtZW50LCBSb3dFbGVtZW50LCBDZWxsRWxlbWVudD4ge1xyXG4gICAgZGVidWdMb2coXCJ1c2VUYWJsZVwiKTtcclxuXHJcbiAgICBjb25zdCBbZ2V0Q3VycmVudFNvcnRDb2x1bW4sIHNldEN1cnJlbnRTb3J0Q29sdW1uXSA9IHVzZVBhc3NpdmVTdGF0ZTx7IGluZGV4OiBudW1iZXIsIGRpcmVjdGlvbjogXCJhc2NlbmRpbmdcIiB8IFwiZGVzY2VuZGluZ1wiIH0gfCBudWxsPihudWxsLCByZXR1cm5OdWxsKTtcclxuICAgIGNvbnN0IGJvZHlTb3J0ID0gdXNlUmVmPG51bGwgfCAoKCkgPT4gdm9pZCk+KG51bGwpO1xyXG5cclxuICAgIGNvbnN0IHtcclxuICAgICAgICB1c2VHcmlkTmF2aWdhdGlvblByb3BzLFxyXG4gICAgICAgIHVzZUdyaWROYXZpZ2F0aW9uUm93LFxyXG4gICAgICAgIC4uLmdyaWROYXZSZXQxXHJcbiAgICB9ID0gdXNlR3JpZE5hdmlnYXRpb248VGFibGVFbGVtZW50LCBSb3dFbGVtZW50LCBDZWxsRWxlbWVudCwgVXNlVGFibGVSb3dTdWJJbmZvPENlbGxFbGVtZW50PiwgVXNlVGFibGVDZWxsU3ViSW5mbywgbmV2ZXIsIG5ldmVyPih7XHJcbiAgICAgICAgbGluZWFyTmF2aWdhdGlvbixcclxuICAgICAgICBsaXN0TmF2aWdhdGlvbixcclxuICAgICAgICBtYW5hZ2VkQ2hpbGRyZW4sXHJcbiAgICAgICAgcm92aW5nVGFiSW5kZXgsXHJcbiAgICAgICAgdHlwZWFoZWFkTmF2aWdhdGlvblxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgeyBtYW5hZ2VkQ2hpbGRyZW46IHsgY2hpbGRyZW46IHJvd3MgfSB9ID0gZ3JpZE5hdlJldDE7XHJcblxyXG4gICAgY29uc3QgdXNlVGFibGVSb3cgPSB1c2VDYWxsYmFjazxVc2VUYWJsZVJvdzxSb3dFbGVtZW50LCBDZWxsRWxlbWVudD4+KCh7IGFzQ2hpbGRSb3dPZlNlY3Rpb24sIGFzUGFyZW50Um93T2ZDZWxscywgdGFibGVSb3c6IHsgbG9jYXRpb24gfSB9OiBVc2VUYWJsZVJvd1BhcmFtZXRlcnM8Q2VsbEVsZW1lbnQ+KTogVXNlVGFibGVSb3dSZXR1cm5UeXBlV2l0aEhvb2tzPFJvd0VsZW1lbnQsIENlbGxFbGVtZW50PiA9PiB7XHJcbiAgICAgICAgZGVidWdMb2coXCJ1c2VUYWJsZVJvd1wiLCBhc0NoaWxkUm93T2ZTZWN0aW9uLm1hbmFnZWRDaGlsZC5pbmRleCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGdldENlbGxzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gY2VsbHM7XHJcbiAgICAgICAgfSwgW10pXHJcblxyXG4gICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgICAgdXNlR3JpZE5hdmlnYXRpb25DZWxsLFxyXG4gICAgICAgICAgICB1c2VHcmlkTmF2aWdhdGlvblJvd1Byb3BzLFxyXG4gICAgICAgICAgICAuLi5ncmlkTmF2UmV0MlxyXG4gICAgICAgIH0gPSB1c2VHcmlkTmF2aWdhdGlvblJvdyh7IGFzQ2hpbGRSb3dPZlNlY3Rpb246IHsgLi4uYXNDaGlsZFJvd09mU2VjdGlvbiwgc3ViSW5mbzogeyBnZXRDZWxscywgbG9jYXRpb24gfSB9LCBhc1BhcmVudFJvd09mQ2VsbHMgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgYXNQYXJlbnRPZkNlbGxzOiB7IG1hbmFnZWRDaGlsZHJlbjogeyBjaGlsZHJlbjogY2VsbHMgfSB9IH0gPSBncmlkTmF2UmV0MjtcclxuXHJcbiAgICAgICAgY29uc3QgdXNlVGFibGVDZWxsID0gdXNlQ2FsbGJhY2s8VXNlVGFibGVDZWxsPENlbGxFbGVtZW50Pj4oKHsgbGlzdE5hdmlnYXRpb24sIG1hbmFnZWRDaGlsZCwgcm92aW5nVGFiSW5kZXgsIHN1YkluZm8sIGhhc0ZvY3VzIH0pID0+IHtcclxuICAgICAgICAgICAgZGVidWdMb2coXCJ1c2VUYWJsZUNlbGxcIiwgbWFuYWdlZENoaWxkLmluZGV4KTtcclxuICAgICAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgICAgICAgdXNlR3JpZE5hdmlnYXRpb25DZWxsUHJvcHMsXHJcbiAgICAgICAgICAgICAgICAuLi5ncmlkTmF2UmV0M1xyXG4gICAgICAgICAgICB9ID0gdXNlR3JpZE5hdmlnYXRpb25DZWxsKHsgbGlzdE5hdmlnYXRpb24sIG1hbmFnZWRDaGlsZCwgcm92aW5nVGFiSW5kZXgsIHN1YkluZm8sIGhhc0ZvY3VzIH0pO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc29ydCA9IHVzZVN0YWJsZUNhbGxiYWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNvcnRJbmZvID0gZ2V0Q3VycmVudFNvcnRDb2x1bW4oKSA/PyB7IGluZGV4OiAtMSwgZGlyZWN0aW9uOiAnYXNjZW5kaW5nJyB9O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbEluZGV4ID0gbWFuYWdlZENoaWxkLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgaWYgKHNvcnRJbmZvLmluZGV4ICE9IGNlbGxJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3J0SW5mby5kaXJlY3Rpb25bMF0gPT0gJ2EnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3J0SW5mby5kaXJlY3Rpb24gPSAnZGVzY2VuZGluZyc7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3J0SW5mby5kaXJlY3Rpb24gPSAnYXNjZW5kaW5nJztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzb3J0SW5mby5pbmRleCA9IG1hbmFnZWRDaGlsZC5pbmRleDtcclxuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRTb3J0Q29sdW1uKHNvcnRJbmZvKTtcclxuXHJcbiAgICAgICAgICAgICAgICBib2R5U29ydC5jdXJyZW50ISgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHVzZVRhYmxlQ2VsbFByb3BzOiB0eXBlb2YgdXNlR3JpZE5hdmlnYXRpb25DZWxsUHJvcHMgPSAocHJvcHMpID0+IHByb3BzO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdGFibGVIZWFkZXJDZWxsOiB7IHNvcnQgfSxcclxuICAgICAgICAgICAgICAgIHVzZVRhYmxlQ2VsbFByb3BzLFxyXG4gICAgICAgICAgICAgICAgLi4uZ3JpZE5hdlJldDNcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LCBbXSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVzZVRhYmxlUm93UHJvcHM6IHR5cGVvZiB1c2VHcmlkTmF2aWdhdGlvblJvd1Byb3BzID0gKHByb3BzKSA9PiBwcm9wcztcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXNlVGFibGVDZWxsLFxyXG4gICAgICAgICAgICB1c2VUYWJsZVJvd1Byb3BzLFxyXG4gICAgICAgICAgICAuLi5ncmlkTmF2UmV0MlxyXG4gICAgICAgIH1cclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICBjb25zdCB1c2VUYWJsZUJvZHkgPSB1c2VDYWxsYmFjazxVc2VUYWJsZUJvZHk8Qm9keVNlY3Rpb25FbGVtZW50LCBSb3dFbGVtZW50LCBDZWxsRWxlbWVudD4+KCgpID0+IHtcclxuICAgICAgICBkZWJ1Z0xvZyhcInVzZVRhYmxlQm9keVwiKTtcclxuICAgICAgICB0eXBlIEMgPSBVc2VSb3ZpbmdUYWJJbmRleFN1YkluZm88Um93RWxlbWVudCwgVXNlTGlzdE5hdmlnYXRpb25TdWJJbmZvPFVzZVRhYmxlUm93U3ViSW5mbzxDZWxsRWxlbWVudD4+PjtcclxuICAgICAgICB0eXBlIFYgPSB7IGxvY2F0aW9uOiBcImhlYWRcIiB8IFwiYm9keVwiIHwgXCJmb290XCIsIHZhbHVlOiBUYWJsZVZhbHVlVHlwZSB9O1xyXG4gICAgICAgIGNvbnN0IGdldEluZGV4ID0gdXNlQ2FsbGJhY2s8R2V0SW5kZXg8QywgbmV2ZXI+PigoaSkgPT4gaS5pbmRleCwgW10pO1xyXG4gICAgICAgIGNvbnN0IGdldFZhbHVlID0gdXNlQ2FsbGJhY2s8R2V0VmFsdWU8QywgbmV2ZXIsIFtdLCBWPj4oKGkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2VsbHMgPSBpLnN1YkluZm8uc3ViSW5mby5zdWJJbmZvLmdldENlbGxzKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBjZWxscy5nZXRBdChnZXRDdXJyZW50U29ydENvbHVtbigpPy5pbmRleCA/PyAwKTtcclxuICAgICAgICAgICAgcmV0dXJuICh7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjogY2VsbD8uc3ViSW5mby5zdWJJbmZvLnN1YkluZm8ubG9jYXRpb24gPz8gXCJoZWFkXCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogY2VsbD8uc3ViSW5mby5zdWJJbmZvLnN1YkluZm8udmFsdWUgPz8gLTFcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vcmV0dXJuIGNlbGxzLmdldEF0KGdldEN1cnJlbnRTb3J0Q29sdW1uKCk/LmluZGV4ID8/IDApPy5zdWJJbmZvLnN1YkluZm8uc3ViSW5mby52YWx1ZSA/PyBudWxsO1xyXG4gICAgICAgIH0sIFtdKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29tcGFyZTogQ29tcGFyZTxWPiA9IChsaHMsIHJocykgPT4ge1xyXG4gICAgICAgICAgICBpZiAobGhzLmxvY2F0aW9uID09PSByaHMubG9jYXRpb24pXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKyhsaHMudmFsdWUgPz8gLUluZmluaXR5KSAtICsocmhzLnZhbHVlID8/IC1JbmZpbml0eSk7XHJcbiAgICAgICAgICAgIGlmIChsaHMubG9jYXRpb24gPT0gJ2hlYWQnKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICBpZiAobGhzLmxvY2F0aW9uID09ICdib2R5JylcclxuICAgICAgICAgICAgICAgIHJldHVybiByaHMubG9jYXRpb24gPT0gJ2hlYWQnID8gLTEgOiAxO1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgICAgdXNlU29ydGFibGVQcm9wcyxcclxuICAgICAgICAgICAgLi4uc29ydGFibGVSZXRcclxuICAgICAgICB9ID0gdXNlU29ydGFibGVDaGlsZHJlbjxCb2R5U2VjdGlvbkVsZW1lbnQsIFVzZVJvdmluZ1RhYkluZGV4U3ViSW5mbzxSb3dFbGVtZW50LCBVc2VMaXN0TmF2aWdhdGlvblN1YkluZm88VXNlVGFibGVSb3dTdWJJbmZvPENlbGxFbGVtZW50Pj4+LCBuZXZlciwgW10sIFY+KHtcclxuICAgICAgICAgICAgcmVhcnJhbmdlYWJsZUNoaWxkcmVuOiB7XHJcbiAgICAgICAgICAgICAgICBnZXRJbmRleFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzb3J0YWJsZUNoaWxkcmVuOiB7XHJcbiAgICAgICAgICAgICAgICBjb21wYXJlLFxyXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCB7IHNvcnRhYmxlQ2hpbGRyZW46IHsgc29ydCB9IH0gPSBzb3J0YWJsZVJldDtcclxuICAgICAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICBib2R5U29ydC5jdXJyZW50ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc29ydChyb3dzLCBnZXRDdXJyZW50U29ydENvbHVtbigpPy5kaXJlY3Rpb24gPz8gJ2FzY2VuZGluZycpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sIFtzb3J0XSlcclxuXHJcbiAgICAgICAgY29uc3QgdXNlVGFibGVCb2R5UHJvcHMgPSAocHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEJvZHlTZWN0aW9uRWxlbWVudD4pID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5hc3NlcnQocHJvcHMuY2hpbGRyZW4gIT0gbnVsbCk7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VTb3J0YWJsZVByb3BzKHByb3BzIGFzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPEJvZHlTZWN0aW9uRWxlbWVudD4gJiB7IGNoaWxkcmVuOiBhbnkgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB1c2VUYWJsZUJvZHlQcm9wcyxcclxuICAgICAgICAgICAgLi4uc29ydGFibGVSZXRcclxuICAgICAgICB9XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgY29uc3QgdXNlVGFibGVQcm9wczogdHlwZW9mIHVzZUdyaWROYXZpZ2F0aW9uUHJvcHMgPSB1c2VHcmlkTmF2aWdhdGlvblByb3BzO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlVGFibGVQcm9wcyxcclxuICAgICAgICB1c2VUYWJsZUJvZHksXHJcbiAgICAgICAgdXNlVGFibGVSb3csXHJcbiAgICAgICAgLi4uZ3JpZE5hdlJldDFcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0LCBjcmVhdGVFbGVtZW50LCBoLCBWTm9kZSB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgVXNlSGFzRm9jdXNQYXJhbWV0ZXJzIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlRWZmZWN0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyBFbGVtZW50VG9UYWcsIFByb3BNb2RpZmllciB9IGZyb20gXCJwcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VBY2NvcmRpb24sIFVzZUFjY29yZGlvblBhcmFtZXRlcnMsIFVzZUFjY29yZGlvblJldHVyblR5cGVJbmZvLCBVc2VBY2NvcmRpb25TZWN0aW9uLCBVc2VBY2NvcmRpb25TZWN0aW9uUGFyYW1ldGVycywgVXNlQWNjb3JkaW9uU2VjdGlvblJldHVyblR5cGVJbmZvIH0gZnJvbSBcIi4uL3VzZS1hY2NvcmRpb25cIjtcclxuaW1wb3J0IHsgSGVhZGluZyB9IGZyb20gXCIuL2hlYWRpbmdcIjtcclxuaW1wb3J0IHsgbWVtbyB9IGZyb20gXCJwcmVhY3QvY29tcGF0XCI7XHJcblxyXG50eXBlIEdldDxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSBUW0tdO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBY2NvcmRpb25Qcm9wcyBleHRlbmRzXHJcbiAgICBHZXQ8VXNlQWNjb3JkaW9uUGFyYW1ldGVycywgXCJhY2NvcmRpb25cIj4sXHJcbiAgICBHZXQ8VXNlQWNjb3JkaW9uUGFyYW1ldGVycywgXCJsaW5lYXJOYXZpZ2F0aW9uXCI+LFxyXG4gICAgR2V0PFVzZUFjY29yZGlvblBhcmFtZXRlcnMsIFwibWFuYWdlZENoaWxkcmVuXCI+IHtcclxuICAgIGV4cGFuZGVkSW5kZXg/OiBudW1iZXIgfCB1bmRlZmluZWQgfCBudWxsO1xyXG4gICAgcmVuZGVyKGluZm86IFVzZUFjY29yZGlvblJldHVyblR5cGVJbmZvKTogVk5vZGU8YW55PjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBY2NvcmRpb25TZWN0aW9uUHJvcHM8SGVhZGVyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEJvZHlFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kc1xyXG4gICAgR2V0PFVzZUFjY29yZGlvblNlY3Rpb25QYXJhbWV0ZXJzPEhlYWRlckVsZW1lbnQ+LCBcImFjY29yZGlvblNlY3Rpb25cIj4sXHJcbiAgICBHZXQ8VXNlQWNjb3JkaW9uU2VjdGlvblBhcmFtZXRlcnM8SGVhZGVyRWxlbWVudD4sIFwibWFuYWdlZENoaWxkcmVuXCI+LFxyXG4gICAgVXNlSGFzRm9jdXNQYXJhbWV0ZXJzPEhlYWRlckVsZW1lbnQ+LFxyXG4gICAgR2V0PFVzZUFjY29yZGlvblNlY3Rpb25QYXJhbWV0ZXJzPEhlYWRlckVsZW1lbnQ+LCBcImJ1dHRvblwiPiB7XHJcbiAgICByZW5kZXIoaW5mbzogVXNlQWNjb3JkaW9uU2VjdGlvblJldHVyblR5cGVJbmZvLCBtYWtlSGVhZGVyUHJvcHM6IFByb3BNb2RpZmllcjxIZWFkZXJFbGVtZW50PiwgbWFrZUJvZHlQcm9wczogUHJvcE1vZGlmaWVyPEJvZHlFbGVtZW50Pik6IFZOb2RlPGFueT47XHJcbn1cclxuXHJcblxyXG5jb25zdCBBY2NvcmRpb25TZWN0aW9uQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8VXNlQWNjb3JkaW9uU2VjdGlvbjxhbnksIGFueT4+KG51bGwhKTtcclxuZXhwb3J0IGNvbnN0IEFjY29yZGlvbiA9IG1lbW8oZnVuY3Rpb24gQWNjb3JkaW9uKHsgZGlzYWJsZUFycm93S2V5cywgZGlzYWJsZUhvbWVFbmRLZXlzLCBleHBhbmRlZEluZGV4LCBpbml0aWFsSW5kZXgsIG5hdmlnYXRpb25EaXJlY3Rpb24sIG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdCwgb25DaGlsZHJlbk1vdW50Q2hhbmdlLCByZW5kZXIgfTogQWNjb3JkaW9uUHJvcHMpIHtcclxuICAgIGNvbnN0IHsgdXNlQWNjb3JkaW9uU2VjdGlvbiwgLi4ucHJvdmlkZXIgfSA9IHVzZUFjY29yZGlvbih7XHJcbiAgICAgICAgYWNjb3JkaW9uOiB7IGluaXRpYWxJbmRleCB9LFxyXG4gICAgICAgIGxpbmVhck5hdmlnYXRpb246IHsgZGlzYWJsZUFycm93S2V5cywgZGlzYWJsZUhvbWVFbmRLZXlzLCBuYXZpZ2F0aW9uRGlyZWN0aW9uIH0sXHJcbiAgICAgICAgbWFuYWdlZENoaWxkcmVuOiB7IG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdCwgb25DaGlsZHJlbk1vdW50Q2hhbmdlIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7IHByb3ZpZGVyLmFjY29yZGlvbi5jaGFuZ2VFeHBhbmRlZEluZGV4KGV4cGFuZGVkSW5kZXghID8/IG51bGwpOyB9LCBbZXhwYW5kZWRJbmRleF0pO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPEFjY29yZGlvblNlY3Rpb25Db250ZXh0LlByb3ZpZGVyIHZhbHVlPXt1c2VBY2NvcmRpb25TZWN0aW9ufT57cmVuZGVyKHByb3ZpZGVyKX08L0FjY29yZGlvblNlY3Rpb25Db250ZXh0LlByb3ZpZGVyPlxyXG4gICAgKVxyXG59KVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRSZW5kZXJBY2NvcmRpb25TZWN0aW9uPEhlYWRlckVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCwgQm9keUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudD4oeyBtYWtlUHJvcHNIZWFkaW5nLCBtYWtlUHJvcHNCb2R5LCB0YWdCb2R5LCB0YWdIZWFkaW5nIH06IHsgdGFnSGVhZGluZzogRWxlbWVudFRvVGFnPEhlYWRlckVsZW1lbnQ+OyB0YWdCb2R5OiBFbGVtZW50VG9UYWc8Qm9keUVsZW1lbnQ+OyBtYWtlUHJvcHNIZWFkaW5nKGluZm86IFVzZUFjY29yZGlvblNlY3Rpb25SZXR1cm5UeXBlSW5mbyk6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEhlYWRlckVsZW1lbnQ+LCBtYWtlUHJvcHNCb2R5KGluZm86IFVzZUFjY29yZGlvblNlY3Rpb25SZXR1cm5UeXBlSW5mbyk6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEJvZHlFbGVtZW50PiB9KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGluZm86IFVzZUFjY29yZGlvblNlY3Rpb25SZXR1cm5UeXBlSW5mbywgbW9kaWZ5SGVhZGluZ1Byb3BzOiBQcm9wTW9kaWZpZXI8SGVhZGVyRWxlbWVudD4sIG1vZGlmeUJvZHlQcm9wczogUHJvcE1vZGlmaWVyPEJvZHlFbGVtZW50Pik6IFZOb2RlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICA8SGVhZGluZyBoZWFkaW5nPXtjcmVhdGVFbGVtZW50KHRhZ0hlYWRpbmcgYXMgbmV2ZXIsIG1vZGlmeUhlYWRpbmdQcm9wcyh7IC4uLm1ha2VQcm9wc0hlYWRpbmcoaW5mbykgfSkpfT5cclxuICAgICAgICAgICAgICAgICAgICB7Y3JlYXRlRWxlbWVudCh0YWdCb2R5IGFzIG5ldmVyLCBtb2RpZnlCb2R5UHJvcHMobWFrZVByb3BzQm9keShpbmZvKSkpfVxyXG4gICAgICAgICAgICAgICAgPC9IZWFkaW5nPlxyXG4gICAgICAgICAgICA8Lz5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBBY2NvcmRpb25TZWN0aW9uID0gbWVtbyhmdW5jdGlvbiBBY2NvcmRpb25TZWN0aW9uPEhlYWRlckVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBCb2R5RWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KHtcclxuICAgIG9wZW4sXHJcbiAgICBpbmRleCxcclxuICAgIHRhZ0J1dHRvbixcclxuICAgIGRpc2FibGVkLFxyXG4gICAgcmVuZGVyLFxyXG4gICAgZ2V0RG9jdW1lbnQsXHJcbiAgICBnZXRXaW5kb3csXHJcbiAgICBvbkFjdGl2ZUVsZW1lbnRDaGFuZ2UsXHJcbiAgICBvbkVsZW1lbnRDaGFuZ2UsXHJcbiAgICBvbkZvY3VzZWRDaGFuZ2VkLFxyXG4gICAgb25Gb2N1c2VkSW5uZXJDaGFuZ2VkLFxyXG4gICAgb25MYXN0QWN0aXZlRWxlbWVudENoYW5nZSxcclxuICAgIG9uTGFzdEZvY3VzZWRDaGFuZ2VkLFxyXG4gICAgb25MYXN0Rm9jdXNlZElubmVyQ2hhbmdlZCxcclxuICAgIG9uTW91bnQsXHJcbiAgICBvblVubW91bnQsXHJcbiAgICBvbldpbmRvd0ZvY3VzZWRDaGFuZ2VcclxufTogQWNjb3JkaW9uU2VjdGlvblByb3BzPEhlYWRlckVsZW1lbnQsIEJvZHlFbGVtZW50Pikge1xyXG4gICAgY29uc3QgdXNlQWNjb3JkaW9uU2VjdGlvbiA9IHVzZUNvbnRleHQoQWNjb3JkaW9uU2VjdGlvbkNvbnRleHQpO1xyXG4gICAgY29uc3QgeyB1c2VBY2NvcmRpb25TZWN0aW9uQm9keVByb3BzLCB1c2VBY2NvcmRpb25TZWN0aW9uSGVhZGVyUHJvcHMsIC4uLnNlY3Rpb25JbmZvIH0gPSB1c2VBY2NvcmRpb25TZWN0aW9uKHtcclxuICAgICAgICBidXR0b246IHsgZGlzYWJsZWQsIHRhZ0J1dHRvbiB9LFxyXG4gICAgICAgIGFjY29yZGlvblNlY3Rpb246IHsgb3BlbiB9LFxyXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbjogeyBpbmRleCB9LFxyXG4gICAgICAgIGhhc0ZvY3VzOiB7IGdldERvY3VtZW50LCBnZXRXaW5kb3csIG9uQWN0aXZlRWxlbWVudENoYW5nZSwgb25FbGVtZW50Q2hhbmdlLCBvbkZvY3VzZWRDaGFuZ2VkLCBvbkZvY3VzZWRJbm5lckNoYW5nZWQsIG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uTGFzdEZvY3VzZWRDaGFuZ2VkLCBvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkLCBvbk1vdW50LCBvblVubW91bnQsIG9uV2luZG93Rm9jdXNlZENoYW5nZSB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVuZGVyKHNlY3Rpb25JbmZvLCB1c2VBY2NvcmRpb25TZWN0aW9uSGVhZGVyUHJvcHMsIHVzZUFjY29yZGlvblNlY3Rpb25Cb2R5UHJvcHMpO1xyXG59KVxyXG5cclxuXHJcbiIsImltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIGgsIFZOb2RlIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyBtZW1vIH0gZnJvbSBcInByZWFjdC9jb21wYXRcIjtcclxuaW1wb3J0IHsgRWxlbWVudFRvVGFnLCBQcm9wTW9kaWZpZXIgfSBmcm9tIFwicHJvcHNcIjtcclxuaW1wb3J0IHsgdXNlQ2hlY2tib3gsIFVzZUNoZWNrYm94UGFyYW1ldGVycywgVXNlQ2hlY2tib3hSZXR1cm5UeXBlSW5mbyB9IGZyb20gXCIuLi91c2UtY2hlY2tib3hcIjtcclxuXHJcbnR5cGUgR2V0PFQsIEsgZXh0ZW5kcyBrZXlvZiBUPiA9IFRbS107XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENoZWNrYm94UHJvcHM8SSBleHRlbmRzIEhUTUxFbGVtZW50LCBMIGV4dGVuZHMgSFRNTEVsZW1lbnQ+IGV4dGVuZHNcclxuICAgIEdldDxVc2VDaGVja2JveFBhcmFtZXRlcnM8SSwgTD4sIFwiY2hlY2tib3hMaWtlXCI+LFxyXG4gICAgR2V0PFVzZUNoZWNrYm94UGFyYW1ldGVyczxJLCBMPiwgXCJjaGVja2JveFwiPixcclxuICAgIEdldDxVc2VDaGVja2JveFBhcmFtZXRlcnM8SSwgTD4sIFwibGFiZWxcIj4sXHJcbiAgICBHZXQ8VXNlQ2hlY2tib3hQYXJhbWV0ZXJzPEksIEw+LCBcImhhc0ZvY3VzSW5wdXRcIj4ge1xyXG4gICAgcmVuZGVyKGluZm86IFVzZUNoZWNrYm94UmV0dXJuVHlwZUluZm88SSwgTD4sIG1vZGlmeUlucHV0UHJvcHM6IFByb3BNb2RpZmllcjxJPiwgbW9kaWZ5TGFiZWxQcm9wczogUHJvcE1vZGlmaWVyPEw+KTogVk5vZGU8YW55PjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRSZW5kZXJDaGVja2JveExpa2U8SSBleHRlbmRzIEhUTUxFbGVtZW50LCBMIGV4dGVuZHMgSFRNTEVsZW1lbnQsIEluZm9UeXBlPih7IGxhYmVsUG9zaXRpb24sIHRhZ0lucHV0LCB0YWdMYWJlbCwgbWFrZUlucHV0UHJvcHMsIG1ha2VMYWJlbFByb3BzIH06IERlZmF1bHRSZW5kZXJDaGVja2JveExpa2VQYXJhbWV0ZXJzPEksIEwsIEluZm9UeXBlPikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpbmZvOiBJbmZvVHlwZSwgbW9kaWZ5SW5wdXRQcm9wczogUHJvcE1vZGlmaWVyPEk+LCBtb2RpZnlMYWJlbFByb3BzOiBQcm9wTW9kaWZpZXI8TD4pOiBWTm9kZTxhbnk+IHtcclxuXHJcbiAgICAgICAgaWYgKGxhYmVsUG9zaXRpb24gPT0gXCJ3cmFwcGluZ1wiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlucHV0UHJvcHNCYXNlID0gbWFrZUlucHV0UHJvcHMoaW5mbyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsUHJvcHNCYXNlID0gbWFrZUxhYmVsUHJvcHMoaW5mbyk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpbnB1dFByb3BzID0gbW9kaWZ5SW5wdXRQcm9wcyhpbnB1dFByb3BzQmFzZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgY2hpbGRyZW4sIC4uLmxhYmVsUHJvcHMgfSA9IG1vZGlmeUxhYmVsUHJvcHMobGFiZWxQcm9wc0Jhc2UpO1xyXG4gICAgICAgICAgICBjb25zdCBpbnB1dCA9IGNyZWF0ZUVsZW1lbnQodGFnSW5wdXQgYXMgbmV2ZXIsIGlucHV0UHJvcHMpO1xyXG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IGNyZWF0ZUVsZW1lbnQodGFnTGFiZWwgYXMgbmV2ZXIsIHsgLi4ubGFiZWxQcm9wcywgY2hpbGRyZW46IDw+e2lucHV0fXtjaGlsZHJlbn08Lz4gfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgICAgICB7bGFiZWx9XHJcbiAgICAgICAgICAgICAgICA8Lz5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsYWJlbFBvc2l0aW9uID09IFwic2VwYXJhdGVcIikge1xyXG4gICAgICAgICAgICBjb25zdCBpbnB1dFByb3BzID0gbW9kaWZ5SW5wdXRQcm9wcyhtYWtlSW5wdXRQcm9wcyhpbmZvKSlcclxuICAgICAgICAgICAgY29uc3QgbGFiZWxQcm9wcyA9IG1vZGlmeUxhYmVsUHJvcHMobWFrZUxhYmVsUHJvcHMoaW5mbykpXHJcblxyXG4gICAgICAgICAgICBjb25zdCBpbnB1dCA9IGNyZWF0ZUVsZW1lbnQodGFnSW5wdXQgYXMgbmV2ZXIsIGlucHV0UHJvcHMpO1xyXG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IGNyZWF0ZUVsZW1lbnQodGFnTGFiZWwgYXMgbmV2ZXIsIGxhYmVsUHJvcHMpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICAgICAge2lucHV0fVxyXG4gICAgICAgICAgICAgICAgICAgIHtsYWJlbH1cclxuICAgICAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB1c2VyUHJvcHMgPSBtYWtlSW5wdXRQcm9wcyhpbmZvKTtcclxuICAgICAgICAgICAgY29uc29sZS5hc3NlcnQoISF1c2VyUHJvcHNbXCJhcmlhLWxhYmVsXCJdKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodGFnSW5wdXQgYXMgbmV2ZXIsIG1vZGlmeUlucHV0UHJvcHModXNlclByb3BzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERlZmF1bHRSZW5kZXJDaGVja2JveExpa2VQYXJhbWV0ZXJzPEkgZXh0ZW5kcyBIVE1MRWxlbWVudCwgTCBleHRlbmRzIEhUTUxFbGVtZW50LCBJbmZvVHlwZT4ge1xyXG4gICAgbGFiZWxQb3NpdGlvbjogXCJ3cmFwcGluZ1wiIHwgXCJzZXBhcmF0ZVwiIHwgXCJoaWRkZW5cIixcclxuICAgIHRhZ0lucHV0OiBFbGVtZW50VG9UYWc8ST4sXHJcbiAgICB0YWdMYWJlbDogRWxlbWVudFRvVGFnPEw+LFxyXG4gICAgbWFrZUlucHV0UHJvcHM6IChpbmZvOiBJbmZvVHlwZSkgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8ST4sXHJcbiAgICBtYWtlTGFiZWxQcm9wczogKGluZm86IEluZm9UeXBlKSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxMPlxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERlZmF1bHRSZW5kZXJDaGVja2JveFBhcmFtZXRlcnM8SSBleHRlbmRzIEhUTUxFbGVtZW50LCBMIGV4dGVuZHMgSFRNTEVsZW1lbnQ+IGV4dGVuZHMgRGVmYXVsdFJlbmRlckNoZWNrYm94TGlrZVBhcmFtZXRlcnM8SSwgTCwgVXNlQ2hlY2tib3hSZXR1cm5UeXBlSW5mbzxJLCBMPj4geyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFJlbmRlckNoZWNrYm94PEkgZXh0ZW5kcyBIVE1MRWxlbWVudCwgTCBleHRlbmRzIEhUTUxFbGVtZW50Pih7IGxhYmVsUG9zaXRpb24sIHRhZ0lucHV0LCB0YWdMYWJlbCwgbWFrZUlucHV0UHJvcHMsIG1ha2VMYWJlbFByb3BzIH06IERlZmF1bHRSZW5kZXJDaGVja2JveFBhcmFtZXRlcnM8SSwgTD4pIHtcclxuICAgIHJldHVybiBkZWZhdWx0UmVuZGVyQ2hlY2tib3hMaWtlPEksIEwsIFVzZUNoZWNrYm94UmV0dXJuVHlwZUluZm88SSwgTD4+KHsgbGFiZWxQb3NpdGlvbiwgdGFnSW5wdXQsIHRhZ0xhYmVsLCBtYWtlSW5wdXRQcm9wcywgbWFrZUxhYmVsUHJvcHMgfSk7XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IENoZWNrYm94ID0gbWVtbyhmdW5jdGlvbiBDaGVja2JveDxJIGV4dGVuZHMgSFRNTEVsZW1lbnQsIEwgZXh0ZW5kcyBIVE1MRWxlbWVudD4oeyBjaGVja2VkLCBkaXNhYmxlZCwgdGFnTGFiZWwsIGxhYmVsUG9zaXRpb24sIHRhZ0lucHV0LCBvbkNoZWNrZWRDaGFuZ2UsIHJlbmRlciwgZ2V0RG9jdW1lbnQsIGdldFdpbmRvdywgb25BY3RpdmVFbGVtZW50Q2hhbmdlLCBvbkVsZW1lbnRDaGFuZ2UsIG9uRm9jdXNlZENoYW5nZWQsIG9uRm9jdXNlZElubmVyQ2hhbmdlZCwgb25MYXN0QWN0aXZlRWxlbWVudENoYW5nZSwgb25MYXN0Rm9jdXNlZENoYW5nZWQsIG9uTGFzdEZvY3VzZWRJbm5lckNoYW5nZWQsIG9uTW91bnQsIG9uVW5tb3VudCwgb25XaW5kb3dGb2N1c2VkQ2hhbmdlIH06IENoZWNrYm94UHJvcHM8SSwgTD4pIHtcclxuICAgIGNvbnN0IHsgdXNlQ2hlY2tib3hJbnB1dEVsZW1lbnQsIHVzZUNoZWNrYm94TGFiZWxFbGVtZW50LCAuLi5jaGVja2JveEluZm8gfSA9IHVzZUNoZWNrYm94PEksIEw+KHtcclxuICAgICAgICBjaGVja2JveDogeyBvbkNoZWNrZWRDaGFuZ2UgfSxcclxuICAgICAgICBjaGVja2JveExpa2U6IHsgY2hlY2tlZCwgZGlzYWJsZWQsIGxhYmVsUG9zaXRpb24gfSxcclxuICAgICAgICBsYWJlbDogeyB0YWdJbnB1dCwgdGFnTGFiZWwgfSxcclxuICAgICAgICBoYXNGb2N1c0lucHV0OiB7IGdldERvY3VtZW50LCBnZXRXaW5kb3csIG9uQWN0aXZlRWxlbWVudENoYW5nZSwgb25FbGVtZW50Q2hhbmdlLCBvbkZvY3VzZWRDaGFuZ2VkLCBvbkZvY3VzZWRJbm5lckNoYW5nZWQsIG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uTGFzdEZvY3VzZWRDaGFuZ2VkLCBvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkLCBvbk1vdW50LCBvblVubW91bnQsIG9uV2luZG93Rm9jdXNlZENoYW5nZSB9LFxyXG4gICAgICAgIGhhc0ZvY3VzTGFiZWw6IHsgZ2V0RG9jdW1lbnQsIGdldFdpbmRvdywgb25BY3RpdmVFbGVtZW50Q2hhbmdlLCBvbkVsZW1lbnRDaGFuZ2U6IG9uRWxlbWVudENoYW5nZSBhcyBhbnksIG9uRm9jdXNlZENoYW5nZWQsIG9uRm9jdXNlZElubmVyQ2hhbmdlZCwgb25MYXN0QWN0aXZlRWxlbWVudENoYW5nZSwgb25MYXN0Rm9jdXNlZENoYW5nZWQsIG9uTGFzdEZvY3VzZWRJbm5lckNoYW5nZWQsIG9uTW91bnQ6IG9uTW91bnQgYXMgYW55LCBvblVubW91bnQ6IG9uVW5tb3VudCBhcyBhbnksIG9uV2luZG93Rm9jdXNlZENoYW5nZSB9XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHsgdXNlQ2hlY2tib3hJbnB1dEVsZW1lbnRQcm9wcyB9ID0gdXNlQ2hlY2tib3hJbnB1dEVsZW1lbnQoKTtcclxuICAgIGNvbnN0IHsgdXNlQ2hlY2tib3hMYWJlbEVsZW1lbnRQcm9wcyB9ID0gdXNlQ2hlY2tib3hMYWJlbEVsZW1lbnQoKTtcclxuXHJcblxyXG4gICAgcmV0dXJuIHJlbmRlcihjaGVja2JveEluZm8sIHVzZUNoZWNrYm94SW5wdXRFbGVtZW50UHJvcHMsIHVzZUNoZWNrYm94TGFiZWxFbGVtZW50UHJvcHMpO1xyXG59KVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnRDaGlsZHJlbiwgY3JlYXRlQ29udGV4dCwgaCwgUmVuZGVyYWJsZVByb3BzLCBWTm9kZSB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgVXNlSGFzRm9jdXNQYXJhbWV0ZXJzIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgbWVtbyB9IGZyb20gXCJwcmVhY3QvY29tcGF0XCI7XHJcbmltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IFByb3BNb2RpZmllciB9IGZyb20gXCJwcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VDaGVja2JveEdyb3VwLCBVc2VDaGVja2JveEdyb3VwQ2hpbGQsIFVzZUNoZWNrYm94R3JvdXBDaGlsZFBhcmFtZXRlcnMsIFVzZUNoZWNrYm94R3JvdXBDaGlsZFJldHVyblR5cGVJbmZvLCBVc2VDaGVja2JveEdyb3VwUGFyYW1ldGVycywgVXNlQ2hlY2tib3hHcm91cFBhcmVudFBhcmFtZXRlcnMsIFVzZUNoZWNrYm94R3JvdXBSZXR1cm5UeXBlSW5mbyB9IGZyb20gXCIuLi91c2UtY2hlY2tib3gtZ3JvdXBcIjtcclxuaW1wb3J0IHsgZGVmYXVsdFJlbmRlckNoZWNrYm94TGlrZSwgRGVmYXVsdFJlbmRlckNoZWNrYm94TGlrZVBhcmFtZXRlcnMgfSBmcm9tIFwiLi9jaGVja2JveFwiO1xyXG5cclxudHlwZSBHZXQ8VCwgSyBleHRlbmRzIGtleW9mIFQ+ID0gVFtLXTtcclxudHlwZSBHZXQyPFQsIEsgZXh0ZW5kcyBrZXlvZiBULCBLMiBleHRlbmRzIGtleW9mIFRbS10+ID0gVFtLXVtLMl07XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENoZWNrYm94R3JvdXBQcm9wczxJbnB1dEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzXHJcbiAgICBSZW5kZXJhYmxlUHJvcHM8e30+LFxyXG4gICAgR2V0PFVzZUNoZWNrYm94R3JvdXBQYXJhbWV0ZXJzLCBcImxpbmVhck5hdmlnYXRpb25cIj4sXHJcbiAgICBHZXQ8VXNlQ2hlY2tib3hHcm91cFBhcmFtZXRlcnMsIFwibGlzdE5hdmlnYXRpb25cIj4sXHJcbiAgICBHZXQ8VXNlQ2hlY2tib3hHcm91cFBhcmFtZXRlcnMsIFwibWFuYWdlZENoaWxkcmVuXCI+LFxyXG4gICAgR2V0PFVzZUNoZWNrYm94R3JvdXBQYXJhbWV0ZXJzLCBcInJvdmluZ1RhYkluZGV4XCI+LFxyXG4gICAgR2V0PFVzZUNoZWNrYm94R3JvdXBQYXJhbWV0ZXJzLCBcInR5cGVhaGVhZE5hdmlnYXRpb25cIj4sXHJcbiAgICBHZXQ8VXNlQ2hlY2tib3hHcm91cFBhcmVudFBhcmFtZXRlcnM8SW5wdXRFbGVtZW50LCBMYWJlbEVsZW1lbnQ+LCBcImNoZWNrYm94XCI+LFxyXG4gICAgR2V0PFVzZUNoZWNrYm94R3JvdXBQYXJlbnRQYXJhbWV0ZXJzPElucHV0RWxlbWVudCwgTGFiZWxFbGVtZW50PiwgXCJjaGVja2JveExpa2VcIj4sXHJcbiAgICBHZXQ8VXNlQ2hlY2tib3hHcm91cFBhcmVudFBhcmFtZXRlcnM8SW5wdXRFbGVtZW50LCBMYWJlbEVsZW1lbnQ+LCBcImxhYmVsXCI+IHtcclxuICAgIGdldERvY3VtZW50OiBVc2VIYXNGb2N1c1BhcmFtZXRlcnM8SW5wdXRFbGVtZW50PltcImdldERvY3VtZW50XCJdO1xyXG4gICAgZ2V0V2luZG93PzogVXNlSGFzRm9jdXNQYXJhbWV0ZXJzPElucHV0RWxlbWVudD5bXCJnZXRXaW5kb3dcIl07XHJcbiAgICByZW5kZXIoaW5mbzogVXNlQ2hlY2tib3hHcm91cFJldHVyblR5cGVJbmZvPElucHV0RWxlbWVudCwgTGFiZWxFbGVtZW50PiwgbW9kaWZ5SW5wdXRQcm9wczogUHJvcE1vZGlmaWVyPElucHV0RWxlbWVudD4sIGxhYmVsOiBQcm9wTW9kaWZpZXI8TGFiZWxFbGVtZW50Pik6IFZOb2RlPGFueT47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2hlY2tib3hHcm91cENoZWNrYm94UHJvcHM8SW5wdXRUeXBlIGV4dGVuZHMgRWxlbWVudCwgTGFiZWxUeXBlIGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kc1xyXG4gICAgR2V0MjxVc2VDaGVja2JveEdyb3VwQ2hpbGRQYXJhbWV0ZXJzPElucHV0VHlwZSwgTGFiZWxUeXBlPiwgXCJhc0NoZWNrYm94XCIsIFwiY2hlY2tib3hcIj4sXHJcbiAgICBHZXQyPFVzZUNoZWNrYm94R3JvdXBDaGlsZFBhcmFtZXRlcnM8SW5wdXRUeXBlLCBMYWJlbFR5cGU+LCBcImFzQ2hlY2tib3hcIiwgXCJsYWJlbFwiPixcclxuICAgIEdldDI8VXNlQ2hlY2tib3hHcm91cENoaWxkUGFyYW1ldGVyczxJbnB1dFR5cGUsIExhYmVsVHlwZT4sIFwiYXNDaGVja2JveFwiLCBcImNoZWNrYm94TGlrZVwiPixcclxuICAgIEdldDI8VXNlQ2hlY2tib3hHcm91cENoaWxkUGFyYW1ldGVyczxJbnB1dFR5cGUsIExhYmVsVHlwZT4sIFwiYXNDaGVja2JveEdyb3VwQ2hpbGRcIiwgXCJsaXN0TmF2aWdhdGlvblwiPixcclxuICAgIEdldDI8VXNlQ2hlY2tib3hHcm91cENoaWxkUGFyYW1ldGVyczxJbnB1dFR5cGUsIExhYmVsVHlwZT4sIFwiYXNDaGVja2JveEdyb3VwQ2hpbGRcIiwgXCJyb3ZpbmdUYWJJbmRleFwiPixcclxuICAgIEdldDI8VXNlQ2hlY2tib3hHcm91cENoaWxkUGFyYW1ldGVyczxJbnB1dFR5cGUsIExhYmVsVHlwZT4sIFwiYXNDaGVja2JveEdyb3VwQ2hpbGRcIiwgXCJtYW5hZ2VkQ2hpbGRcIj4ge1xyXG4gICAgZ2V0RG9jdW1lbnQ6IFVzZUhhc0ZvY3VzUGFyYW1ldGVyczxJbnB1dFR5cGU+W1wiZ2V0RG9jdW1lbnRcIl07XHJcbiAgICBnZXRXaW5kb3c/OiBVc2VIYXNGb2N1c1BhcmFtZXRlcnM8SW5wdXRUeXBlPltcImdldFdpbmRvd1wiXTtcclxuICAgIHJlbmRlcihpbmZvOiBVc2VDaGVja2JveEdyb3VwQ2hpbGRSZXR1cm5UeXBlSW5mbzxJbnB1dFR5cGUsIExhYmVsVHlwZT4sIG1vZGlmeUlucHV0UHJvcHM6IFByb3BNb2RpZmllcjxJbnB1dFR5cGU+LCBsYWJlbDogUHJvcE1vZGlmaWVyPExhYmVsVHlwZT4pOiBWTm9kZTxhbnk+O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERlZmF1bHRSZW5kZXJDaGVja2JveEdyb3VwQ2hpbGRQYXJhbWV0ZXJzPElucHV0VHlwZSBleHRlbmRzIEhUTUxFbGVtZW50LCBMYWJlbFR5cGUgZXh0ZW5kcyBIVE1MRWxlbWVudD4gZXh0ZW5kcyBEZWZhdWx0UmVuZGVyQ2hlY2tib3hMaWtlUGFyYW1ldGVyczxJbnB1dFR5cGUsIExhYmVsVHlwZSwgVXNlQ2hlY2tib3hHcm91cENoaWxkUmV0dXJuVHlwZUluZm88SW5wdXRUeXBlLCBMYWJlbFR5cGU+PiB7IH1cclxuZXhwb3J0IGludGVyZmFjZSBEZWZhdWx0UmVuZGVyQ2hlY2tib3hHcm91cFBhcmFtZXRlcnM8SW5wdXRUeXBlIGV4dGVuZHMgSFRNTEVsZW1lbnQsIExhYmVsVHlwZSBleHRlbmRzIEhUTUxFbGVtZW50PiBleHRlbmRzIERlZmF1bHRSZW5kZXJDaGVja2JveExpa2VQYXJhbWV0ZXJzPElucHV0VHlwZSwgTGFiZWxUeXBlLCBVc2VDaGVja2JveEdyb3VwUmV0dXJuVHlwZUluZm88SW5wdXRUeXBlLCBMYWJlbFR5cGU+PiB7XHJcbiAgICBjaGlsZHJlbjogQ29tcG9uZW50Q2hpbGRyZW47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0UmVuZGVyQ2hlY2tib3hHcm91cENoaWxkPElucHV0VHlwZSBleHRlbmRzIEhUTUxFbGVtZW50LCBMYWJlbFR5cGUgZXh0ZW5kcyBIVE1MRWxlbWVudD4oeyB0YWdJbnB1dCwgdGFnTGFiZWwsIGxhYmVsUG9zaXRpb24sIG1ha2VJbnB1dFByb3BzLCBtYWtlTGFiZWxQcm9wcyB9OiBEZWZhdWx0UmVuZGVyQ2hlY2tib3hHcm91cENoaWxkUGFyYW1ldGVyczxJbnB1dFR5cGUsIExhYmVsVHlwZT4pIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoaW5mbzogVXNlQ2hlY2tib3hHcm91cENoaWxkUmV0dXJuVHlwZUluZm88SW5wdXRUeXBlLCBMYWJlbFR5cGU+LCBtb2RpZnlJbnB1dFByb3BzOiBQcm9wTW9kaWZpZXI8SW5wdXRUeXBlPiwgbW9kaWZ5TGFiZWxQcm9wczogUHJvcE1vZGlmaWVyPExhYmVsVHlwZT4pOiBWTm9kZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gZGVmYXVsdFJlbmRlckNoZWNrYm94TGlrZSh7IGxhYmVsUG9zaXRpb24sIHRhZ0lucHV0LCB0YWdMYWJlbCwgbWFrZUlucHV0UHJvcHMsIG1ha2VMYWJlbFByb3BzIH0pKGluZm8sIG1vZGlmeUlucHV0UHJvcHMsIG1vZGlmeUxhYmVsUHJvcHMpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFJlbmRlckNoZWNrYm94R3JvdXA8SW5wdXRUeXBlIGV4dGVuZHMgSFRNTEVsZW1lbnQsIExhYmVsVHlwZSBleHRlbmRzIEhUTUxFbGVtZW50Pih7IGNoaWxkcmVuLCBsYWJlbFBvc2l0aW9uLCBtYWtlSW5wdXRQcm9wcywgbWFrZUxhYmVsUHJvcHMsIHRhZ0lucHV0LCB0YWdMYWJlbCB9OiBEZWZhdWx0UmVuZGVyQ2hlY2tib3hHcm91cFBhcmFtZXRlcnM8SW5wdXRUeXBlLCBMYWJlbFR5cGU+KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGluZm86IFVzZUNoZWNrYm94R3JvdXBSZXR1cm5UeXBlSW5mbzxhbnksIGFueT4sIG1vZGlmeUlucHV0UHJvcHM6IFByb3BNb2RpZmllcjxJbnB1dFR5cGU+LCBtb2RpZnlMYWJlbFByb3BzOiBQcm9wTW9kaWZpZXI8TGFiZWxUeXBlPik6IFZOb2RlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICB7ZGVmYXVsdFJlbmRlckNoZWNrYm94TGlrZSh7IGxhYmVsUG9zaXRpb24sIG1ha2VJbnB1dFByb3BzLCBtYWtlTGFiZWxQcm9wcywgdGFnSW5wdXQsIHRhZ0xhYmVsIH0pKGluZm8sIG1vZGlmeUlucHV0UHJvcHMsIG1vZGlmeUxhYmVsUHJvcHMpfVxyXG4gICAgICAgICAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICAgICAgICA8Lz5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IFVzZUNoZWNrYm94R3JvdXBDaGlsZENvbnRleHQgPSBjcmVhdGVDb250ZXh0PFVzZUNoZWNrYm94R3JvdXBDaGlsZDxhbnksIGFueT4+KG51bGwhKTtcclxuZXhwb3J0IGNvbnN0IENoZWNrYm94R3JvdXAgPSBtZW1vKGZ1bmN0aW9uIENoZWNrYm94R3JvdXA8SW5wdXRUeXBlIGV4dGVuZHMgSFRNTEVsZW1lbnQsIExhYmVsVHlwZSBleHRlbmRzIEhUTUxFbGVtZW50Pih7XHJcbiAgICBkaXNhYmxlZDogcGFyZW50RGlzYWJsZWQsXHJcbiAgICB0YWdJbnB1dCxcclxuICAgIHRhZ0xhYmVsLFxyXG4gICAgcmVuZGVyLFxyXG4gICAgZ2V0RG9jdW1lbnQsXHJcbiAgICBnZXRXaW5kb3csXHJcbiAgICBsYWJlbFBvc2l0aW9uLFxyXG4gICAgaW5pdGlhbEluZGV4LFxyXG4gICAgY29sbGF0b3IsXHJcbiAgICBkaXNhYmxlQXJyb3dLZXlzLFxyXG4gICAgZGlzYWJsZUhvbWVFbmRLZXlzLFxyXG4gICAgbmF2aWdhdGlvbkRpcmVjdGlvbixcclxuICAgIG5vVHlwZWFoZWFkLFxyXG4gICAgdHlwZWFoZWFkVGltZW91dCxcclxuICAgIGluZGV4RGVtYW5nbGVyLFxyXG4gICAgaW5kZXhNYW5nbGVyLFxyXG4gICAgb25BZnRlckNoaWxkTGF5b3V0RWZmZWN0LFxyXG4gICAgb25DaGlsZHJlbk1vdW50Q2hhbmdlLFxyXG4gICAgb25UYWJiYWJsZUluZGV4Q2hhbmdlLFxyXG4gICAgb25UYWJiYWJsZVJlbmRlclxyXG59OiBDaGVja2JveEdyb3VwUHJvcHM8SW5wdXRUeXBlLCBMYWJlbFR5cGU+KSB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgICAgdXNlQ2hlY2tib3hHcm91cENoaWxkLFxyXG4gICAgICAgIHVzZUNoZWNrYm94R3JvdXBQYXJlbnRJbnB1dCxcclxuICAgICAgICAuLi5jaGVja2JveEdyb3VwUGFyZW50SW5mb1xyXG4gICAgfSA9IHVzZUNoZWNrYm94R3JvdXA8SW5wdXRUeXBlLCBMYWJlbFR5cGU+KHtcclxuICAgICAgICBsaW5lYXJOYXZpZ2F0aW9uOiB7IGRpc2FibGVBcnJvd0tleXMsIGRpc2FibGVIb21lRW5kS2V5cywgbmF2aWdhdGlvbkRpcmVjdGlvbiB9LFxyXG4gICAgICAgIGxpc3ROYXZpZ2F0aW9uOiB7IGluZGV4RGVtYW5nbGVyLCBpbmRleE1hbmdsZXIgfSxcclxuICAgICAgICBtYW5hZ2VkQ2hpbGRyZW46IHsgb25BZnRlckNoaWxkTGF5b3V0RWZmZWN0LCBvbkNoaWxkcmVuTW91bnRDaGFuZ2UgfSxcclxuICAgICAgICByb3ZpbmdUYWJJbmRleDogeyBpbml0aWFsSW5kZXgsIG9uVGFiYmFibGVJbmRleENoYW5nZSwgb25UYWJiYWJsZVJlbmRlciB9LFxyXG4gICAgICAgIHR5cGVhaGVhZE5hdmlnYXRpb246IHsgY29sbGF0b3IsIG5vVHlwZWFoZWFkLCB0eXBlYWhlYWRUaW1lb3V0IH1cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICBjb25zdCB7IHVzZUNoZWNrYm94R3JvdXBQYXJlbnRJbnB1dFByb3BzLCB1c2VDaGVja2JveEdyb3VwUGFyZW50TGFiZWxQcm9wcyB9ID0gdXNlQ2hlY2tib3hHcm91cFBhcmVudElucHV0KHsgY2hlY2tib3g6IHt9LCBjaGVja2JveExpa2U6IHsgZGlzYWJsZWQ6IHBhcmVudERpc2FibGVkLCBsYWJlbFBvc2l0aW9uIH0sIGxhYmVsOiB7IHRhZ0lucHV0LCB0YWdMYWJlbCB9LCBoYXNGb2N1c0lucHV0OiB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSwgaGFzRm9jdXNMYWJlbDogeyBnZXRXaW5kb3csIGdldERvY3VtZW50IH0gfSk7XHJcblxyXG5cclxuICAgIGxldCB3cmFwcGluZzogVk5vZGU8YW55PjtcclxuICAgIGlmIChsYWJlbFBvc2l0aW9uID09IFwic2VwYXJhdGVcIikge1xyXG4gICAgICAgIHdyYXBwaW5nID0gcmVuZGVyKGNoZWNrYm94R3JvdXBQYXJlbnRJbmZvLCB1c2VDaGVja2JveEdyb3VwUGFyZW50SW5wdXRQcm9wcywgdXNlQ2hlY2tib3hHcm91cFBhcmVudExhYmVsUHJvcHMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgd3JhcHBpbmcgPSByZW5kZXIoY2hlY2tib3hHcm91cFBhcmVudEluZm8sIHVzZUNoZWNrYm94R3JvdXBQYXJlbnRJbnB1dFByb3BzLCB1c2VDaGVja2JveEdyb3VwUGFyZW50TGFiZWxQcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8VXNlQ2hlY2tib3hHcm91cENoaWxkQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17dXNlQ2hlY2tib3hHcm91cENoaWxkfT57d3JhcHBpbmd9PC9Vc2VDaGVja2JveEdyb3VwQ2hpbGRDb250ZXh0LlByb3ZpZGVyPlxyXG4gICAgKVxyXG59KVxyXG5cclxuZXhwb3J0IGNvbnN0IENoZWNrYm94R3JvdXBDaGVja2JveCA9IG1lbW8oZnVuY3Rpb24gQ2hlY2tib3hHcm91cENoZWNrYm94PElucHV0VHlwZSBleHRlbmRzIEhUTUxFbGVtZW50LCBMYWJlbFR5cGUgZXh0ZW5kcyBIVE1MRWxlbWVudD4oe1xyXG4gICAgY2hlY2tlZCxcclxuICAgIGRpc2FibGVkLFxyXG4gICAgaW5kZXgsXHJcbiAgICBsYWJlbFBvc2l0aW9uLFxyXG4gICAgdGFnSW5wdXQsXHJcbiAgICB0YWdMYWJlbCxcclxuICAgIHRleHQsXHJcbiAgICBnZXRXaW5kb3csXHJcbiAgICBnZXREb2N1bWVudCxcclxuICAgIGZsYWdzLFxyXG4gICAgZm9jdXNTZWxmLFxyXG4gICAgaGlkZGVuLFxyXG4gICAgb25DaGVja2VkQ2hhbmdlLFxyXG4gICAgcmVuZGVyXHJcbn06IENoZWNrYm94R3JvdXBDaGVja2JveFByb3BzPElucHV0VHlwZSwgTGFiZWxUeXBlPikge1xyXG4gICAgY29uc3QgeyB1c2VDaGVja2JveEdyb3VwQ2hpbGRJbnB1dFByb3BzLCB1c2VDaGVja2JveEdyb3VwQ2hpbGRMYWJlbFByb3BzLCAuLi5jaGVja2JveEdyb3VwQ2hpbGRJbmZvIH0gPSB1c2VDb250ZXh0KFVzZUNoZWNrYm94R3JvdXBDaGlsZENvbnRleHQpKHtcclxuICAgICAgICBhc0NoZWNrYm94OiB7XHJcbiAgICAgICAgICAgIGNoZWNrYm94OiB7IG9uQ2hlY2tlZENoYW5nZSB9LFxyXG4gICAgICAgICAgICBjaGVja2JveExpa2U6IHsgY2hlY2tlZCwgZGlzYWJsZWQsIGxhYmVsUG9zaXRpb24gfSxcclxuICAgICAgICAgICAgbGFiZWw6IHsgdGFnSW5wdXQsIHRhZ0xhYmVsIH0sXHJcbiAgICAgICAgICAgIGhhc0ZvY3VzSW5wdXQ6IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9LFxyXG4gICAgICAgICAgICBoYXNGb2N1c0xhYmVsOiB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXNDaGVja2JveEdyb3VwQ2hpbGQ6IHtcclxuICAgICAgICAgICAgbGlzdE5hdmlnYXRpb246IHtcclxuICAgICAgICAgICAgICAgIHRleHRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWFuYWdlZENoaWxkOiB7XHJcbiAgICAgICAgICAgICAgICBpbmRleCxcclxuICAgICAgICAgICAgICAgIGZsYWdzXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJvdmluZ1RhYkluZGV4OiB7XHJcbiAgICAgICAgICAgICAgICBmb2N1c1NlbGYsXHJcbiAgICAgICAgICAgICAgICBoaWRkZW5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChsYWJlbFBvc2l0aW9uID09IFwic2VwYXJhdGVcIikge1xyXG4gICAgICAgIHJldHVybiByZW5kZXIoY2hlY2tib3hHcm91cENoaWxkSW5mbywgdXNlQ2hlY2tib3hHcm91cENoaWxkSW5wdXRQcm9wcywgdXNlQ2hlY2tib3hHcm91cENoaWxkTGFiZWxQcm9wcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gcmVuZGVyKGNoZWNrYm94R3JvdXBDaGlsZEluZm8sIHVzZUNoZWNrYm94R3JvdXBDaGlsZElucHV0UHJvcHMsIHVzZUNoZWNrYm94R3JvdXBDaGlsZExhYmVsUHJvcHMpO1xyXG4gICAgfVxyXG59KTtcclxuIiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgaCwgVk5vZGUgfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IFVzZUFjdGl2ZUVsZW1lbnRQYXJhbWV0ZXJzIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgY3JlYXRlUG9ydGFsLCBtZW1vIH0gZnJvbSBcInByZWFjdC9jb21wYXRcIjtcclxuaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyBFbGVtZW50VG9UYWcsIFByb3BNb2RpZmllciB9IGZyb20gXCJwcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VEaWFsb2csIFVzZURpYWxvZ1BhcmFtZXRlcnMsIFVzZURpYWxvZ1JldHVyblR5cGVJbmZvIH0gZnJvbSBcIi4uL3VzZS1kaWFsb2dcIjtcclxuXHJcbnR5cGUgR2V0PFQsIEsgZXh0ZW5kcyBrZXlvZiBUPiA9IFRbS107XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERpYWxvZ1Byb3BzPEZvY3VzQ29udGFpbmVyRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50LCBEaWFsb2dFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQsIFRpdGxlRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50LCBCb2R5RWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50LCBCYWNrZHJvcEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudD4gZXh0ZW5kc1xyXG4gICAgR2V0PFVzZURpYWxvZ1BhcmFtZXRlcnMsIFwic29mdERpc21pc3NcIj4sXHJcbiAgICBHZXQ8VXNlRGlhbG9nUGFyYW1ldGVycywgXCJtb2RhbFwiPixcclxuICAgIFVzZUFjdGl2ZUVsZW1lbnRQYXJhbWV0ZXJzLFxyXG4gICAgR2V0PFVzZURpYWxvZ1BhcmFtZXRlcnMsIFwiZGlhbG9nXCI+IHtcclxuXHJcbiAgICByZW5kZXIoZGlhbG9nSW5mbzogVXNlRGlhbG9nUmV0dXJuVHlwZUluZm8sIG1vZGlmeUZvY3VzQ29udGFpbmVyUHJvcHM6IFByb3BNb2RpZmllcjxGb2N1c0NvbnRhaW5lckVsZW1lbnQ+LCBtb2RpZnlEaWFsb2dQcm9wczogUHJvcE1vZGlmaWVyPERpYWxvZ0VsZW1lbnQ+LCBtb2RpZnlUaXRsZVByb3BzOiBQcm9wTW9kaWZpZXI8VGl0bGVFbGVtZW50PiwgbW9kaWZ5Qm9keVByb3BzOiBQcm9wTW9kaWZpZXI8Qm9keUVsZW1lbnQ+LCBtb2RpZnlCYWNrZHJvcFByb3BzOiBQcm9wTW9kaWZpZXI8QmFja2Ryb3BFbGVtZW50Pik6IFZOb2RlPGFueT47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0UmVuZGVyUG9ydGFsKHsgcG9ydGFsSWQsIGNoaWxkcmVuIH06IHsgcG9ydGFsSWQ6IHN0cmluZywgY2hpbGRyZW46IFZOb2RlIH0pIHtcclxuICAgIGNvbnN0IHBvcnRhbFJlZiA9IHVzZVJlZjxIVE1MRWxlbWVudD4obnVsbCEpO1xyXG4gICAgcG9ydGFsUmVmLmN1cnJlbnQgPz89IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBvcnRhbElkKSE7XHJcbiAgICBpZiAocG9ydGFsUmVmLmN1cnJlbnQpXHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVBvcnRhbChjaGlsZHJlbiwgcG9ydGFsUmVmLmN1cnJlbnQpO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiBjaGlsZHJlbjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRSZW5kZXJNb2RhbDxGb2N1c0NvbnRhaW5lckVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCwgRGlhbG9nRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50LCBUaXRsZUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCwgQm9keUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCwgQmFja2Ryb3BFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQsIEluZm9UeXBlPih7IHBvcnRhbElkLCB0YWdGb2N1c0NvbnRhaW5lciwgdGFnQmFja2Ryb3AsIHRhZ0JvZHksIHRhZ0RpYWxvZywgdGFnVGl0bGUsIG1ha2VQcm9wc0ZvY3VzQ29udGFpbmVyLCBtYWtlUHJvcHNCYWNrZHJvcCwgbWFrZVByb3BzQm9keSwgbWFrZVByb3BzRGlhbG9nLCBtYWtlUHJvcHNUaXRsZSB9OiB7IHBvcnRhbElkOiBzdHJpbmcsIHRhZ0ZvY3VzQ29udGFpbmVyOiBFbGVtZW50VG9UYWc8Rm9jdXNDb250YWluZXJFbGVtZW50PiwgdGFnRGlhbG9nOiBFbGVtZW50VG9UYWc8RGlhbG9nRWxlbWVudD47IHRhZ1RpdGxlOiBFbGVtZW50VG9UYWc8VGl0bGVFbGVtZW50PjsgdGFnQm9keTogRWxlbWVudFRvVGFnPEJvZHlFbGVtZW50PjsgdGFnQmFja2Ryb3A6IEVsZW1lbnRUb1RhZzxCYWNrZHJvcEVsZW1lbnQ+LCBtYWtlUHJvcHNGb2N1c0NvbnRhaW5lcjogKGluZm86IEluZm9UeXBlKSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxGb2N1c0NvbnRhaW5lckVsZW1lbnQ+LCBtYWtlUHJvcHNEaWFsb2c6IChpbmZvOiBJbmZvVHlwZSkgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8RGlhbG9nRWxlbWVudD4sIG1ha2VQcm9wc0JvZHk6IChpbmZvOiBJbmZvVHlwZSkgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8Qm9keUVsZW1lbnQ+LCBtYWtlUHJvcHNUaXRsZTogKGluZm86IEluZm9UeXBlKSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxUaXRsZUVsZW1lbnQ+LCBtYWtlUHJvcHNCYWNrZHJvcDogKGluZm86IEluZm9UeXBlKSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxCYWNrZHJvcEVsZW1lbnQ+IH0pIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZGlhbG9nSW5mbzogSW5mb1R5cGUsIG1vZGlmeUZvY3VzQ29udGFpbmVyUHJvcHM6IFByb3BNb2RpZmllcjxGb2N1c0NvbnRhaW5lckVsZW1lbnQ+LCBtb2RpZnlEaWFsb2dQcm9wczogUHJvcE1vZGlmaWVyPERpYWxvZ0VsZW1lbnQ+LCBtb2RpZnlUaXRsZVByb3BzOiBQcm9wTW9kaWZpZXI8VGl0bGVFbGVtZW50PiwgbW9kaWZ5Qm9keVByb3BzOiBQcm9wTW9kaWZpZXI8Qm9keUVsZW1lbnQ+LCBtb2RpZnlCYWNrZHJvcFByb3BzOiBQcm9wTW9kaWZpZXI8QmFja2Ryb3BFbGVtZW50Pik6IFZOb2RlPGFueT4ge1xyXG5cclxuICAgICAgICBjb25zdCB7IGNoaWxkcmVuOiB0aXRsZUNoaWxkcmVuLCAuLi50aXRsZVByb3BzIH0gPSBtb2RpZnlUaXRsZVByb3BzKG1ha2VQcm9wc1RpdGxlKGRpYWxvZ0luZm8pKTtcclxuICAgICAgICBjb25zdCB7IGNoaWxkcmVuOiBib2R5Q2hpbGRyZW4sIC4uLmJvZHlQcm9wcyB9ID0gbW9kaWZ5Qm9keVByb3BzKG1ha2VQcm9wc0JvZHkoZGlhbG9nSW5mbykpO1xyXG4gICAgICAgIGNvbnN0IHsgY2hpbGRyZW46IGRpYWxvZ0NoaWxkcmVuLCAuLi5kaWFsb2dQcm9wcyB9ID0gbW9kaWZ5RGlhbG9nUHJvcHMobWFrZVByb3BzRGlhbG9nKGRpYWxvZ0luZm8pKTtcclxuICAgICAgICBjb25zdCB7IGNoaWxkcmVuOiBiYWNrZHJvcENoaWxkcmVuLCAuLi5iYWNrZHJvcFByb3BzIH0gPSBtb2RpZnlCYWNrZHJvcFByb3BzKG1ha2VQcm9wc0JhY2tkcm9wKGRpYWxvZ0luZm8pKTtcclxuICAgICAgICBjb25zdCB7IGNoaWxkcmVuOiBmb2N1c0NvbnRhaW5lckNoaWxkcmVuLCAuLi5mb2N1c0NvbnRhaW5lclByb3BzIH0gPSBtb2RpZnlGb2N1c0NvbnRhaW5lclByb3BzKG1ha2VQcm9wc0ZvY3VzQ29udGFpbmVyKGRpYWxvZ0luZm8pKTtcclxuXHJcbiAgICAgICAgY29uc3QgdGl0bGUgPSBjcmVhdGVFbGVtZW50KHRhZ1RpdGxlIGFzIG5ldmVyLCB0aXRsZVByb3BzLCB0aXRsZUNoaWxkcmVuKTtcclxuICAgICAgICBjb25zdCBib2R5ID0gY3JlYXRlRWxlbWVudCh0YWdCb2R5IGFzIG5ldmVyLCBib2R5UHJvcHMsIGJvZHlDaGlsZHJlbik7XHJcbiAgICAgICAgY29uc3QgZGlhbG9nID0gY3JlYXRlRWxlbWVudCh0YWdEaWFsb2cgYXMgbmV2ZXIsIHsgLi4uZGlhbG9nUHJvcHMsIGNoaWxkcmVuOiA8PntkaWFsb2dDaGlsZHJlbn17dGl0bGV9e2JvZHl9PC8+IH0pO1xyXG4gICAgICAgIGNvbnN0IGJhY2tkcm9wID0gY3JlYXRlRWxlbWVudCh0YWdCYWNrZHJvcCBhcyBuZXZlciwgYmFja2Ryb3BQcm9wcywgYmFja2Ryb3BDaGlsZHJlbik7XHJcbiAgICAgICAgY29uc3QgZm9jdXNDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KHRhZ0ZvY3VzQ29udGFpbmVyIGFzIG5ldmVyLCBmb2N1c0NvbnRhaW5lclByb3BzLCA8Pntmb2N1c0NvbnRhaW5lckNoaWxkcmVufXtkaWFsb2d9e2JhY2tkcm9wfTwvPilcclxuICAgICAgICByZXR1cm4gZGVmYXVsdFJlbmRlclBvcnRhbCh7XHJcbiAgICAgICAgICAgIHBvcnRhbElkLFxyXG4gICAgICAgICAgICBjaGlsZHJlbjogZm9jdXNDb250YWluZXJcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFJlbmRlckRpYWxvZzxGb2N1c0NvbnRhaW5lckVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCwgRGlhbG9nRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50LCBUaXRsZUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCwgQm9keUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCwgQmFja2Ryb3BFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQ+KHsgcG9ydGFsSWQsIHRhZ0ZvY3VzQ29udGFpbmVyLCB0YWdCYWNrZHJvcCwgdGFnQm9keSwgdGFnRGlhbG9nLCB0YWdUaXRsZSwgbWFrZVByb3BzRm9jdXNDb250YWluZXIsIG1ha2VQcm9wc0JhY2tkcm9wLCBtYWtlUHJvcHNCb2R5LCBtYWtlUHJvcHNEaWFsb2csIG1ha2VQcm9wc1RpdGxlIH06IHsgcG9ydGFsSWQ6IHN0cmluZywgdGFnRm9jdXNDb250YWluZXI6IEVsZW1lbnRUb1RhZzxGb2N1c0NvbnRhaW5lckVsZW1lbnQ+LCB0YWdEaWFsb2c6IEVsZW1lbnRUb1RhZzxEaWFsb2dFbGVtZW50PjsgdGFnVGl0bGU6IEVsZW1lbnRUb1RhZzxUaXRsZUVsZW1lbnQ+OyB0YWdCb2R5OiBFbGVtZW50VG9UYWc8Qm9keUVsZW1lbnQ+OyB0YWdCYWNrZHJvcDogRWxlbWVudFRvVGFnPEJhY2tkcm9wRWxlbWVudD4sIG1ha2VQcm9wc0ZvY3VzQ29udGFpbmVyOiAoaW5mbzogVXNlRGlhbG9nUmV0dXJuVHlwZUluZm8pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEZvY3VzQ29udGFpbmVyRWxlbWVudD4sIG1ha2VQcm9wc0RpYWxvZzogKGluZm86IFVzZURpYWxvZ1JldHVyblR5cGVJbmZvKSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxEaWFsb2dFbGVtZW50PiwgbWFrZVByb3BzQm9keTogKGluZm86IFVzZURpYWxvZ1JldHVyblR5cGVJbmZvKSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxCb2R5RWxlbWVudD4sIG1ha2VQcm9wc1RpdGxlOiAoaW5mbzogVXNlRGlhbG9nUmV0dXJuVHlwZUluZm8pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFRpdGxlRWxlbWVudD4sIG1ha2VQcm9wc0JhY2tkcm9wOiAoaW5mbzogVXNlRGlhbG9nUmV0dXJuVHlwZUluZm8pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEJhY2tkcm9wRWxlbWVudD4gfSkge1xyXG4gICAgcmV0dXJuIGRlZmF1bHRSZW5kZXJNb2RhbDxGb2N1c0NvbnRhaW5lckVsZW1lbnQsIERpYWxvZ0VsZW1lbnQsIFRpdGxlRWxlbWVudCwgQm9keUVsZW1lbnQsIEJhY2tkcm9wRWxlbWVudCwgVXNlRGlhbG9nUmV0dXJuVHlwZUluZm8+KHsgcG9ydGFsSWQsIHRhZ0ZvY3VzQ29udGFpbmVyLCB0YWdCYWNrZHJvcCwgdGFnQm9keSwgdGFnRGlhbG9nLCB0YWdUaXRsZSwgbWFrZVByb3BzRm9jdXNDb250YWluZXIsIG1ha2VQcm9wc0JhY2tkcm9wLCBtYWtlUHJvcHNCb2R5LCBtYWtlUHJvcHNEaWFsb2csIG1ha2VQcm9wc1RpdGxlIH0pO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgRGlhbG9nID0gbWVtbyhmdW5jdGlvbiBEaWFsb2c8Rm9jdXNDb250YWluZXJFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQsIERpYWxvZ0VsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCwgVGl0bGVFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQsIEJvZHlFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQsIEJhY2tkcm9wRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50Pih7XHJcbiAgICBvbkNsb3NlLFxyXG4gICAgb3BlbixcclxuICAgIGJvZHlJc09ubHlTZW1hbnRpYyxcclxuICAgIGdldERvY3VtZW50LFxyXG4gICAgZ2V0V2luZG93LFxyXG4gICAgb25BY3RpdmVFbGVtZW50Q2hhbmdlLFxyXG4gICAgb25MYXN0QWN0aXZlRWxlbWVudENoYW5nZSxcclxuICAgIG9uV2luZG93Rm9jdXNlZENoYW5nZSxcclxuICAgIGZvY3VzU2VsZixcclxuICAgIHJlbmRlclxyXG59OiBEaWFsb2dQcm9wczxGb2N1c0NvbnRhaW5lckVsZW1lbnQsIERpYWxvZ0VsZW1lbnQsIFRpdGxlRWxlbWVudCwgQm9keUVsZW1lbnQsIEJhY2tkcm9wRWxlbWVudD4pIHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgICB1c2VEaWFsb2dCYWNrZHJvcCxcclxuICAgICAgICB1c2VEaWFsb2dCb2R5LFxyXG4gICAgICAgIHVzZURpYWxvZ1Byb3BzLFxyXG4gICAgICAgIHVzZURpYWxvZ1RpdGxlLFxyXG4gICAgICAgIHVzZURpYWxvZ0ZvY3VzQ29udGFpbmVyUHJvcHMsXHJcbiAgICAgICAgLi4uclxyXG4gICAgfSA9IHVzZURpYWxvZzxGb2N1c0NvbnRhaW5lckVsZW1lbnQsIERpYWxvZ0VsZW1lbnQsIFRpdGxlRWxlbWVudCwgQm9keUVsZW1lbnQsIEJhY2tkcm9wRWxlbWVudD4oeyBkaWFsb2c6IHsgb25DbG9zZSB9LCBtb2RhbDogeyBib2R5SXNPbmx5U2VtYW50aWMsIGZvY3VzU2VsZiB9LCBzb2Z0RGlzbWlzczogeyBvcGVuIH0sIGFjdGl2ZUVsZW1lbnQ6IHsgZ2V0RG9jdW1lbnQsIGdldFdpbmRvdywgb25BY3RpdmVFbGVtZW50Q2hhbmdlLCBvbkxhc3RBY3RpdmVFbGVtZW50Q2hhbmdlLCBvbldpbmRvd0ZvY3VzZWRDaGFuZ2UgfSB9KTtcclxuXHJcbiAgICBjb25zdCB7IHVzZURpYWxvZ1RpdGxlUHJvcHMgfSA9IHVzZURpYWxvZ1RpdGxlKCk7XHJcbiAgICBjb25zdCB7IHVzZURpYWxvZ0JvZHlQcm9wcyB9ID0gdXNlRGlhbG9nQm9keSgpO1xyXG4gICAgY29uc3QgeyB1c2VEaWFsb2dCYWNrZHJvcFByb3BzIH0gPSB1c2VEaWFsb2dCYWNrZHJvcCgpO1xyXG5cclxuICAgIHJldHVybiByZW5kZXIociwgdXNlRGlhbG9nRm9jdXNDb250YWluZXJQcm9wcywgdXNlRGlhbG9nUHJvcHMsIHVzZURpYWxvZ1RpdGxlUHJvcHMsIHVzZURpYWxvZ0JvZHlQcm9wcywgdXNlRGlhbG9nQmFja2Ryb3BQcm9wcyk7XHJcblxyXG59KTtcclxuIiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgY3JlYXRlRWxlbWVudCwgaCwgVk5vZGUgfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tIFwicHJlYWN0L2NvbXBhdFwiO1xyXG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyBFbGVtZW50VG9UYWcsIFByb3BNb2RpZmllciB9IGZyb20gXCJwcm9wc1wiO1xyXG4vL2ltcG9ydCB7IEVsZW1lbnRUb1RhZyB9IGZyb20gXCIuLi9wcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VMaXN0Ym94U2luZ2xlLCB1c2VMaXN0Ym94R3JvdXAsIFVzZUxpc3Rib3hTaW5nbGVJdGVtLCBVc2VMaXN0Ym94U2luZ2xlSXRlbVBhcmFtZXRlcnMsIFVzZUxpc3Rib3hTaW5nbGVJdGVtUmV0dXJuVHlwZUluZm8sIFVzZUxpc3Rib3hTaW5nbGVQYXJhbWV0ZXJzLCBVc2VMaXN0Ym94U2luZ2xlUmV0dXJuVHlwZUluZm8gfSBmcm9tIFwiLi4vdXNlLWxpc3Rib3gtc2luZ2xlXCI7XHJcblxyXG50eXBlIEdldDxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSBUW0tdO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMaXN0Ym94U2luZ2xlUHJvcHM8TGFiZWxFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTGlzdEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMaXN0SXRlbUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzXHJcbiAgICBHZXQ8VXNlTGlzdGJveFNpbmdsZVBhcmFtZXRlcnM8TGFiZWxFbGVtZW50LCBMaXN0RWxlbWVudD4sIFwic2luZ2xlU2VsZWN0aW9uXCI+LFxyXG4gICAgR2V0PFVzZUxpc3Rib3hTaW5nbGVQYXJhbWV0ZXJzPExhYmVsRWxlbWVudCwgTGlzdEVsZW1lbnQ+LCBcImxpbmVhck5hdmlnYXRpb25cIj4sXHJcbiAgICBHZXQ8VXNlTGlzdGJveFNpbmdsZVBhcmFtZXRlcnM8TGFiZWxFbGVtZW50LCBMaXN0RWxlbWVudD4sIFwibGlzdE5hdmlnYXRpb25cIj4sXHJcbiAgICBHZXQ8VXNlTGlzdGJveFNpbmdsZVBhcmFtZXRlcnM8TGFiZWxFbGVtZW50LCBMaXN0RWxlbWVudD4sIFwicm92aW5nVGFiSW5kZXhcIj4sXHJcbiAgICBHZXQ8VXNlTGlzdGJveFNpbmdsZVBhcmFtZXRlcnM8TGFiZWxFbGVtZW50LCBMaXN0RWxlbWVudD4sIFwidHlwZWFoZWFkTmF2aWdhdGlvblwiPixcclxuICAgIEdldDxVc2VMaXN0Ym94U2luZ2xlUGFyYW1ldGVyczxMYWJlbEVsZW1lbnQsIExpc3RFbGVtZW50PiwgXCJtYW5hZ2VkQ2hpbGRyZW5cIj4sXHJcbiAgICBHZXQ8VXNlTGlzdGJveFNpbmdsZVBhcmFtZXRlcnM8TGFiZWxFbGVtZW50LCBMaXN0RWxlbWVudD4sIFwiY2hpbGRyZW5IYXZlRm9jdXNcIj4sXHJcbiAgICBHZXQ8VXNlTGlzdGJveFNpbmdsZVBhcmFtZXRlcnM8TGFiZWxFbGVtZW50LCBMaXN0RWxlbWVudD4sIFwibGlzdGJveFNpbmdsZVwiPiB7XHJcbiAgICAvL3RhZ0xhYmVsOiBFbGVtZW50VG9UYWc8TGFiZWxFbGVtZW50PjtcclxuICAgIHJlbmRlcihpbmZvOiBVc2VMaXN0Ym94U2luZ2xlUmV0dXJuVHlwZUluZm88TGlzdEl0ZW1FbGVtZW50PiwgbW9kaWZ5UHJvcHNMYWJlbDogUHJvcE1vZGlmaWVyPExhYmVsRWxlbWVudD4sIG1vZGlmeVByb3BzTGlzdDogUHJvcE1vZGlmaWVyPExpc3RFbGVtZW50Pik6IFZOb2RlPGFueT47XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMaXN0Ym94U2luZ2xlSXRlbVByb3BzPExpc3Rib3hJdGVtRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHNcclxuICAgIEdldDxVc2VMaXN0Ym94U2luZ2xlSXRlbVBhcmFtZXRlcnM8TGlzdGJveEl0ZW1FbGVtZW50PiwgXCJtYW5hZ2VkQ2hpbGRcIj4sXHJcbiAgICBPbWl0PEdldDxVc2VMaXN0Ym94U2luZ2xlSXRlbVBhcmFtZXRlcnM8TGlzdGJveEl0ZW1FbGVtZW50PiwgXCJsaXN0TmF2aWdhdGlvblwiPiwgXCJzdWJJbmZvXCI+LFxyXG4gICAgR2V0PFVzZUxpc3Rib3hTaW5nbGVJdGVtUGFyYW1ldGVyczxMaXN0Ym94SXRlbUVsZW1lbnQ+LCBcInJvdmluZ1RhYkluZGV4XCI+LFxyXG4gICAgR2V0PFVzZUxpc3Rib3hTaW5nbGVJdGVtUGFyYW1ldGVyczxMaXN0Ym94SXRlbUVsZW1lbnQ+LCBcImhhc0ZvY3VzXCI+LFxyXG4gICAgR2V0PFVzZUxpc3Rib3hTaW5nbGVJdGVtUGFyYW1ldGVyczxMaXN0Ym94SXRlbUVsZW1lbnQ+LCBcImxpc3Rib3hTaW5nbGVJdGVtXCI+IHtcclxuICAgIC8vdGFnTGlzdEl0ZW06IEVsZW1lbnRUb1RhZzxMaXN0Ym94SXRlbUVsZW1lbnQ+O1xyXG4gICAgcmVuZGVyKGluZm86IFVzZUxpc3Rib3hTaW5nbGVJdGVtUmV0dXJuVHlwZUluZm88TGlzdGJveEl0ZW1FbGVtZW50PiwgbW9kaWZ5TGlzdEl0ZW1Qcm9wczogUHJvcE1vZGlmaWVyPExpc3Rib3hJdGVtRWxlbWVudD4pOiBWTm9kZTxhbnk+O1xyXG59XHJcblxyXG5jb25zdCBMaXN0Ym94U2luZ2xlQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8VXNlTGlzdGJveFNpbmdsZUl0ZW08YW55Pj4obnVsbCEpO1xyXG5cclxuZnVuY3Rpb24gTGlzdGJveFNpbmdsZVU8TGFiZWxFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTGlzdEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCwgTGlzdEl0ZW1FbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQ+KHtcclxuICAgIHJlbmRlcixcclxuXHJcbiAgICBzZWxlY3RlZEluZGV4LFxyXG4gICAgdGFnTGFiZWwsXHJcbiAgICBjb2xsYXRvcixcclxuICAgIGRpc2FibGVBcnJvd0tleXMsXHJcbiAgICBkaXNhYmxlSG9tZUVuZEtleXMsXHJcbiAgICBpbmRleERlbWFuZ2xlcixcclxuICAgIGluZGV4TWFuZ2xlcixcclxuICAgIG5hdmlnYXRpb25EaXJlY3Rpb24sXHJcbiAgICBub1R5cGVhaGVhZCxcclxuICAgIG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdCxcclxuICAgIG9uQ2hpbGRyZW5Nb3VudENoYW5nZSxcclxuICAgIG9uVGFiYmFibGVJbmRleENoYW5nZSxcclxuICAgIG9uVGFiYmFibGVSZW5kZXIsXHJcbiAgICB0eXBlYWhlYWRUaW1lb3V0LFxyXG4gICAgb25BbGxMb3N0Rm9jdXMsXHJcbiAgICBvbkFueUdhaW5lZEZvY3VzLFxyXG4gICAgc2VsZWN0aW9uTW9kZSxcclxuICAgIHRhZ0xpc3QsXHJcbiAgICBvblNlbGVjdFxyXG59OiBMaXN0Ym94U2luZ2xlUHJvcHM8TGFiZWxFbGVtZW50LCBMaXN0RWxlbWVudCwgTGlzdEl0ZW1FbGVtZW50Pikge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICAgIHVzZUxpc3Rib3hTaW5nbGVJdGVtLFxyXG4gICAgICAgIHVzZUxpc3Rib3hTaW5nbGVMYWJlbCxcclxuICAgICAgICB1c2VMaXN0Ym94U2luZ2xlUHJvcHMsXHJcbiAgICAgICAgLi4ubGlzdGJveFJldHVyblR5cGVcclxuICAgIH0gPSB1c2VMaXN0Ym94U2luZ2xlPExhYmVsRWxlbWVudCwgTGlzdEVsZW1lbnQsIExpc3RJdGVtRWxlbWVudD4oe1xyXG4gICAgICAgIGxpbmVhck5hdmlnYXRpb246IHsgZGlzYWJsZUFycm93S2V5cywgZGlzYWJsZUhvbWVFbmRLZXlzLCBuYXZpZ2F0aW9uRGlyZWN0aW9uIH0sXHJcbiAgICAgICAgbGlzdGJveFNpbmdsZTogeyB0YWdMYWJlbCwgdGFnTGlzdCwgb25TZWxlY3QgfSxcclxuICAgICAgICBsaXN0TmF2aWdhdGlvbjogeyBpbmRleERlbWFuZ2xlciwgaW5kZXhNYW5nbGVyIH0sXHJcbiAgICAgICAgbWFuYWdlZENoaWxkcmVuOiB7IG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdCwgb25DaGlsZHJlbk1vdW50Q2hhbmdlIH0sXHJcbiAgICAgICAgcm92aW5nVGFiSW5kZXg6IHsgb25UYWJiYWJsZUluZGV4Q2hhbmdlLCBvblRhYmJhYmxlUmVuZGVyIH0sXHJcbiAgICAgICAgc2luZ2xlU2VsZWN0aW9uOiB7IHNlbGVjdGVkSW5kZXgsIHNlbGVjdGlvbk1vZGUgfSxcclxuICAgICAgICB0eXBlYWhlYWROYXZpZ2F0aW9uOiB7IGNvbGxhdG9yLCBub1R5cGVhaGVhZCwgdHlwZWFoZWFkVGltZW91dCB9LFxyXG4gICAgICAgIGNoaWxkcmVuSGF2ZUZvY3VzOiB7IG9uQWxsTG9zdEZvY3VzLCBvbkFueUdhaW5lZEZvY3VzIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHsgdXNlTGlzdGJveFNpbmdsZUxhYmVsUHJvcHMgfSA9IHVzZUxpc3Rib3hTaW5nbGVMYWJlbCgpO1xyXG4gICAgLy9jb25zdCBsYWJlbCA9IGNyZWF0ZUVsZW1lbnQodGFnTGFiZWwsIHVzZUxpc3Rib3hTaW5nbGVMYWJlbFByb3BzKHt9KSBhcyBhbnkpO1xyXG4gICAgLy9jb25zdCBsaXN0ID0gY3JlYXRlRWxlbWVudCh0YWdMaXN0LCB1c2VMaXN0Ym94U2luZ2xlUHJvcHMoeyBjaGlsZHJlbjogdm5vZGVDaGlsZHJlbiwgcmVmIH0pIGFzIGFueSk7XHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPExpc3Rib3hTaW5nbGVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt1c2VMaXN0Ym94U2luZ2xlSXRlbX0+XHJcbiAgICAgICAgICAgIHtyZW5kZXIoeyAuLi5saXN0Ym94UmV0dXJuVHlwZSB9LCB1c2VMaXN0Ym94U2luZ2xlTGFiZWxQcm9wcywgdXNlTGlzdGJveFNpbmdsZVByb3BzKX1cclxuICAgICAgICA8L0xpc3Rib3hTaW5nbGVDb250ZXh0LlByb3ZpZGVyPlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFJlbmRlckxpc3Rib3hTaW5nbGU8TGFiZWxFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTGlzdEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCwgTGlzdEl0ZW1FbGVtZW50IGV4dGVuZHMgRWxlbWVudD4oeyBtYWtlUHJvcHNMaXN0LCBtYWtlUHJvcHNMYWJlbCwgdGFnTGFiZWwsIHRhZ0xpc3QgfTogeyB0YWdMYWJlbDogRWxlbWVudFRvVGFnPExhYmVsRWxlbWVudD4sIHRhZ0xpc3Q6IEVsZW1lbnRUb1RhZzxMaXN0RWxlbWVudD4sIG1ha2VQcm9wc0xhYmVsOiAoaW5mbzogVXNlTGlzdGJveFNpbmdsZVJldHVyblR5cGVJbmZvPExpc3RJdGVtRWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExhYmVsRWxlbWVudD4sIG1ha2VQcm9wc0xpc3Q6IChpbmZvOiBVc2VMaXN0Ym94U2luZ2xlUmV0dXJuVHlwZUluZm88TGlzdEl0ZW1FbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGlzdEVsZW1lbnQ+IH0pIHtcclxuICAgIHJldHVybiBkZWZhdWx0UmVuZGVyTGlzdDxMYWJlbEVsZW1lbnQsIExpc3RFbGVtZW50LCBVc2VMaXN0Ym94U2luZ2xlUmV0dXJuVHlwZUluZm88TGlzdEl0ZW1FbGVtZW50Pj4oeyBtYWtlUHJvcHNMYWJlbCwgbWFrZVByb3BzTGlzdCwgdGFnTGFiZWwsIHRhZ0xpc3QgfSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRSZW5kZXJMaXN0Ym94U2luZ2xlSXRlbTxMaXN0SXRlbUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudD4oeyBtYWtlUHJvcHNMaXN0SXRlbSwgdGFnTGlzdEl0ZW0gfTogeyB0YWdMaXN0SXRlbTogRWxlbWVudFRvVGFnPExpc3RJdGVtRWxlbWVudD4sIG1ha2VQcm9wc0xpc3RJdGVtOiAoaW5mbzogVXNlTGlzdGJveFNpbmdsZUl0ZW1SZXR1cm5UeXBlSW5mbzxMaXN0SXRlbUVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxMaXN0SXRlbUVsZW1lbnQ+IH0pIHtcclxuICAgIHJldHVybiBkZWZhdWx0UmVuZGVyTGlzdEl0ZW08TGlzdEl0ZW1FbGVtZW50LCBVc2VMaXN0Ym94U2luZ2xlSXRlbVJldHVyblR5cGVJbmZvPExpc3RJdGVtRWxlbWVudD4+KHsgbWFrZVByb3BzTGlzdEl0ZW0sIHRhZ0xpc3RJdGVtIH0pO1xyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIExpc3Rib3hTaW5nbGVJdGVtVTxMaXN0SXRlbUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50Pih7IGluZGV4LCBkaXNhYmxlZCwgZmxhZ3MsIGZvY3VzU2VsZiwgZ2V0RG9jdW1lbnQsIGdldFdpbmRvdywgb25BY3RpdmVFbGVtZW50Q2hhbmdlLCBvbkVsZW1lbnRDaGFuZ2UsIG9uRm9jdXNlZENoYW5nZWQsIG9uRm9jdXNlZElubmVyQ2hhbmdlZCwgb25MYXN0QWN0aXZlRWxlbWVudENoYW5nZSwgb25MYXN0Rm9jdXNlZENoYW5nZWQsIG9uTGFzdEZvY3VzZWRJbm5lckNoYW5nZWQsIG9uTW91bnQsIG9uVW5tb3VudCwgb25XaW5kb3dGb2N1c2VkQ2hhbmdlLCByZW5kZXIsIHRleHQsIGhpZGRlbiB9OiBMaXN0Ym94U2luZ2xlSXRlbVByb3BzPExpc3RJdGVtRWxlbWVudD4pIHtcclxuICAgIGNvbnN0IHsgdXNlTGlzdGJveFNpbmdsZUl0ZW1Qcm9wcywgcm92aW5nVGFiSW5kZXgsIHNpbmdsZVNlbGVjdGlvbiB9ID0gdXNlQ29udGV4dChMaXN0Ym94U2luZ2xlQ29udGV4dCkoe1xyXG4gICAgICAgIG1hbmFnZWRDaGlsZDogeyBpbmRleCwgZmxhZ3MgfSxcclxuICAgICAgICByb3ZpbmdUYWJJbmRleDogeyBmb2N1c1NlbGYsIGhpZGRlbiB9LFxyXG4gICAgICAgIGxpc3ROYXZpZ2F0aW9uOiB7IHRleHQgfSxcclxuICAgICAgICBsaXN0Ym94U2luZ2xlSXRlbTogeyBkaXNhYmxlZCB9LFxyXG4gICAgICAgIGhhc0ZvY3VzOiB7IGdldERvY3VtZW50LCBnZXRXaW5kb3csIG9uQWN0aXZlRWxlbWVudENoYW5nZSwgb25FbGVtZW50Q2hhbmdlLCBvbkZvY3VzZWRDaGFuZ2VkLCBvbkZvY3VzZWRJbm5lckNoYW5nZWQsIG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uTGFzdEZvY3VzZWRDaGFuZ2VkLCBvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkLCBvbk1vdW50LCBvblVubW91bnQsIG9uV2luZG93Rm9jdXNlZENoYW5nZSB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+e3JlbmRlcih7IHJvdmluZ1RhYkluZGV4LCBzaW5nbGVTZWxlY3Rpb24gfSwgdXNlTGlzdGJveFNpbmdsZUl0ZW1Qcm9wcyl9PC8+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBMaXN0Ym94U2luZ2xlID0gbWVtbyhMaXN0Ym94U2luZ2xlVSkgYXMgdHlwZW9mIExpc3Rib3hTaW5nbGVVO1xyXG5leHBvcnQgY29uc3QgTGlzdGJveFNpbmdsZUl0ZW0gPSBtZW1vKExpc3Rib3hTaW5nbGVJdGVtVSkgYXMgdHlwZW9mIExpc3Rib3hTaW5nbGVJdGVtVTtcclxuZXhwb3J0IGNvbnN0IExpc3Rib3hHcm91cCA9IG1lbW8oTGlzdGJveEdyb3VwVSkgYXMgdHlwZW9mIExpc3Rib3hHcm91cFU7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExpc3Rib3hHcm91cFByb3BzPENvbnRhaW5lckVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiB7XHJcbiAgICByZW5kZXIobW9kaWZ5Q29udGFpbmVyUHJvcHM6IFByb3BNb2RpZmllcjxDb250YWluZXJFbGVtZW50PiwgbW9kaWZ5TGFiZWxQcm9wczogUHJvcE1vZGlmaWVyPExhYmVsRWxlbWVudD4pOiBWTm9kZTtcclxufVxyXG5cclxuZnVuY3Rpb24gTGlzdGJveEdyb3VwVTxDb250YWluZXJFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTGFiZWxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4oeyByZW5kZXIgfTogTGlzdGJveEdyb3VwUHJvcHM8Q29udGFpbmVyRWxlbWVudCwgTGFiZWxFbGVtZW50Pikge1xyXG4gICAgY29uc3QgeyB1c2VMaXN0Ym94R3JvdXBIZWFkaW5nUHJvcHMsIHVzZUxpc3Rib3hHcm91cENvbnRhaW5lclByb3BzIH0gPSB1c2VMaXN0Ym94R3JvdXA8Q29udGFpbmVyRWxlbWVudCwgTGFiZWxFbGVtZW50PigpO1xyXG4gICAgcmV0dXJuIChyZW5kZXIodXNlTGlzdGJveEdyb3VwQ29udGFpbmVyUHJvcHMsIHVzZUxpc3Rib3hHcm91cEhlYWRpbmdQcm9wcykpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TGlzdGJveEdyb3VwUmVuZGVyPENvbnRhaW5lckVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50Pih7IHRhZ0NvbnRhaW5lciwgdGFnTGFiZWwsIG1ha2VQcm9wc0NvbnRhaW5lciwgbWFrZVByb3BzTGFiZWwgfTogeyB0YWdDb250YWluZXI6IEVsZW1lbnRUb1RhZzxDb250YWluZXJFbGVtZW50PiwgdGFnTGFiZWw6IEVsZW1lbnRUb1RhZzxMYWJlbEVsZW1lbnQ+LCBtYWtlUHJvcHNDb250YWluZXI6ICgpID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPENvbnRhaW5lckVsZW1lbnQ+LCBtYWtlUHJvcHNMYWJlbDogKCkgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGFiZWxFbGVtZW50PiB9KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1vZGlmeUNvbnRhaW5lclByb3BzOiBQcm9wTW9kaWZpZXI8Q29udGFpbmVyRWxlbWVudD4sIG1vZGlmeUxhYmVsUHJvcHM6IFByb3BNb2RpZmllcjxMYWJlbEVsZW1lbnQ+KSB7XHJcbiAgICAgICAgY29uc3QgeyBjaGlsZHJlbiwgLi4ucHJvcHNDb250YWluZXIgfSA9IG1vZGlmeUNvbnRhaW5lclByb3BzKG1ha2VQcm9wc0NvbnRhaW5lcigpKTtcclxuICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCh0YWdDb250YWluZXIgYXMgbmV2ZXIsIHByb3BzQ29udGFpbmVyLCA8PlxyXG4gICAgICAgICAgICB7Y3JlYXRlRWxlbWVudCh0YWdMYWJlbCBhcyBuZXZlciwgbW9kaWZ5TGFiZWxQcm9wcyhtYWtlUHJvcHNMYWJlbCgpKSl9XHJcbiAgICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICA8Lz4pXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRSZW5kZXJMaXN0PExhYmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIExpc3RFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQsIEluZm9UeXBlPih7IG1ha2VQcm9wc0xpc3QsIG1ha2VQcm9wc0xhYmVsLCB0YWdMYWJlbCwgdGFnTGlzdCB9OiB7IHRhZ0xhYmVsOiBFbGVtZW50VG9UYWc8TGFiZWxFbGVtZW50PiwgdGFnTGlzdDogRWxlbWVudFRvVGFnPExpc3RFbGVtZW50PiwgbWFrZVByb3BzTGFiZWw6IChpbmZvOiBJbmZvVHlwZSkgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGFiZWxFbGVtZW50PiwgbWFrZVByb3BzTGlzdDogKGluZm86IEluZm9UeXBlKSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxMaXN0RWxlbWVudD4gfSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpbmZvOiBJbmZvVHlwZSwgbW9kaWZ5UHJvcHNMYWJlbDogUHJvcE1vZGlmaWVyPExhYmVsRWxlbWVudD4sIG1vZGlmeVByb3BzTGlzdDogUHJvcE1vZGlmaWVyPExpc3RFbGVtZW50Pik6IFZOb2RlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IGxhYmVsID0gY3JlYXRlRWxlbWVudCh0YWdMYWJlbCBhcyBuZXZlciwgbW9kaWZ5UHJvcHNMYWJlbChtYWtlUHJvcHNMYWJlbChpbmZvKSkpO1xyXG4gICAgICAgIGNvbnN0IGxpc3QgPSBjcmVhdGVFbGVtZW50KHRhZ0xpc3QgYXMgbmV2ZXIsIG1vZGlmeVByb3BzTGlzdChtYWtlUHJvcHNMaXN0KGluZm8pKSk7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgIHtsYWJlbH1cclxuICAgICAgICAgICAgICAgIHtsaXN0fVxyXG4gICAgICAgICAgICA8Lz5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0UmVuZGVyTGlzdEl0ZW08TGlzdEl0ZW1FbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQsIEluZm9UeXBlPih7IG1ha2VQcm9wc0xpc3RJdGVtLCB0YWdMaXN0SXRlbSB9OiB7IHRhZ0xpc3RJdGVtOiBFbGVtZW50VG9UYWc8TGlzdEl0ZW1FbGVtZW50PiwgbWFrZVByb3BzTGlzdEl0ZW06IChpbmZvOiBJbmZvVHlwZSkgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8TGlzdEl0ZW1FbGVtZW50PiB9KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGluZm86IEluZm9UeXBlLCBtb2RpZnlQcm9wc0xpc3RJdGVtOiBQcm9wTW9kaWZpZXI8TGlzdEl0ZW1FbGVtZW50Pik6IFZOb2RlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KHRhZ0xpc3RJdGVtIGFzIG5ldmVyLCBtb2RpZnlQcm9wc0xpc3RJdGVtKG1ha2VQcm9wc0xpc3RJdGVtKGluZm8pKSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0LCBjcmVhdGVFbGVtZW50LCBoLCBWTm9kZSB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgVXNlQWN0aXZlRWxlbWVudFBhcmFtZXRlcnMsIHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgbWVtbyB9IGZyb20gXCJwcmVhY3QvY29tcGF0XCI7XHJcbmltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IEVsZW1lbnRUb1RhZywgUHJvcE1vZGlmaWVyIH0gZnJvbSBcInByb3BzXCI7XHJcbmltcG9ydCB7IHVzZU1lbnUsIFVzZU1lbnVJdGVtUGFyYW1ldGVycywgVXNlTWVudUl0ZW1SZXR1cm5UeXBlSW5mbywgVXNlTWVudVBhcmFtZXRlcnMsIFVzZU1lbnVSZXR1cm5UeXBlSW5mbywgVXNlTWVudUl0ZW0gfSBmcm9tIFwiLi4vdXNlLW1lbnVcIjtcclxuaW1wb3J0IHsgZGVmYXVsdFJlbmRlclBvcnRhbCB9IGZyb20gXCIuL2RpYWxvZ1wiO1xyXG5cclxudHlwZSBHZXQ8VCwgSyBleHRlbmRzIGtleW9mIFQ+ID0gVFtLXTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWVudVByb3BzPFN1cmZhY2VFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTWVudUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBTZW50aW5lbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBNZW51SXRlbUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBCdXR0b25FbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyAvL09taXQ8VXNlTWVudVBhcmFtZXRlcnM8RSwgSywgST4sIFwiaW5kZXhNYW5nbGVyXCIgfCBcImluZGV4RGVtYW5nbGVyXCIgfCBcIm9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdFwiIHwgXCJvbkNoaWxkcmVuTW91bnRDaGFuZ2VcIiB8IFwib25UYWJiYWJsZUluZGV4Q2hhbmdlXCIgfCBcIm9uVGFiYmFibGVSZW5kZXJcIiB8IFwib25UYWJiZWRJblRvXCIgfCBcIm9uVGFiYmVkT3V0T2ZcIj4gJiB7XHJcbiAgICBHZXQ8VXNlTWVudVBhcmFtZXRlcnM8U3VyZmFjZUVsZW1lbnQsIEJ1dHRvbkVsZW1lbnQsIG5ldmVyPiwgXCJtZW51XCI+LFxyXG4gICAgR2V0PFVzZU1lbnVQYXJhbWV0ZXJzPFN1cmZhY2VFbGVtZW50LCBCdXR0b25FbGVtZW50LCBuZXZlcj4sIFwibWVudVN1cmZhY2VcIj4sXHJcbiAgICBHZXQ8VXNlTWVudVBhcmFtZXRlcnM8U3VyZmFjZUVsZW1lbnQsIEJ1dHRvbkVsZW1lbnQsIG5ldmVyPiwgXCJzb2Z0RGlzbWlzc1wiPixcclxuICAgIEdldDxVc2VNZW51UGFyYW1ldGVyczxTdXJmYWNlRWxlbWVudCwgQnV0dG9uRWxlbWVudCwgbmV2ZXI+LCBcImxpbmVhck5hdmlnYXRpb25cIj4sXHJcbiAgICBHZXQ8VXNlTWVudVBhcmFtZXRlcnM8U3VyZmFjZUVsZW1lbnQsIEJ1dHRvbkVsZW1lbnQsIG5ldmVyPiwgXCJsaXN0TmF2aWdhdGlvblwiPixcclxuICAgIEdldDxVc2VNZW51UGFyYW1ldGVyczxTdXJmYWNlRWxlbWVudCwgQnV0dG9uRWxlbWVudCwgbmV2ZXI+LCBcInJvdmluZ1RhYkluZGV4XCI+LFxyXG4gICAgR2V0PFVzZU1lbnVQYXJhbWV0ZXJzPFN1cmZhY2VFbGVtZW50LCBCdXR0b25FbGVtZW50LCBuZXZlcj4sIFwidHlwZWFoZWFkTmF2aWdhdGlvblwiPixcclxuXHJcbiAgICBHZXQ8VXNlTWVudVBhcmFtZXRlcnM8U3VyZmFjZUVsZW1lbnQsIEJ1dHRvbkVsZW1lbnQsIG5ldmVyPiwgXCJtYW5hZ2VkQ2hpbGRyZW5cIj4ge1xyXG4gICAgLy9wcm9wc01lbnVCdXR0b246ICgpID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPGFueT47XHJcbiAgICAvL3Byb3BzTWVudVNlbnRpbmVsOiAod2hpY2g6IFwidG9wXCIgfCBcImJvdHRvbVwiKSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxhbnk+O1xyXG4gICAgLy9wcm9wc01lbnU6ICgpID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPGFueT47XHJcblxyXG4gICAgLy90YWdNZW51QnV0dG9uOiBhbnk7XHJcbiAgICAvL3RhZ01lbnU6IGFueTtcclxuICAgIC8vdGFnU2VudGluZWw6IGFueTtcclxuXHJcbiAgICBnZXREb2N1bWVudDogVXNlQWN0aXZlRWxlbWVudFBhcmFtZXRlcnNbXCJnZXREb2N1bWVudFwiXTtcclxuICAgIGdldFdpbmRvdz86IFVzZUFjdGl2ZUVsZW1lbnRQYXJhbWV0ZXJzW1wiZ2V0V2luZG93XCJdO1xyXG5cclxuICAgIHJlbmRlcihtZW51SW5mbzogVXNlTWVudVJldHVyblR5cGVJbmZvPFN1cmZhY2VFbGVtZW50LCBNZW51RWxlbWVudCwgTWVudUl0ZW1FbGVtZW50LCBCdXR0b25FbGVtZW50PiwgbW9kaWZ5TWVudUJ1dHRvblByb3BzOiBQcm9wTW9kaWZpZXI8QnV0dG9uRWxlbWVudD4sIG1vZGlmeU1lbnVTdXJmYWNlUHJvcHM6IFByb3BNb2RpZmllcjxTdXJmYWNlRWxlbWVudD4sIG1vZGlmeU1lbnVQcm9wczogUHJvcE1vZGlmaWVyPE1lbnVFbGVtZW50PiwgbW9kaWZ5Rmlyc3RTZW50aW5lbFByb3BzOiBQcm9wTW9kaWZpZXI8U2VudGluZWxFbGVtZW50PiwgbW9kaWZ5TGFzdFNlbnRpbmVsUHJvcHM6IFByb3BNb2RpZmllcjxTZW50aW5lbEVsZW1lbnQ+KTogVk5vZGU7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWVudUl0ZW1Qcm9wczxNZW51SXRlbUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzXHJcbiAgICBHZXQ8VXNlTWVudUl0ZW1QYXJhbWV0ZXJzLCBcIm1hbmFnZWRDaGlsZFwiPixcclxuICAgIEdldDxVc2VNZW51SXRlbVBhcmFtZXRlcnMsIFwibGlzdE5hdmlnYXRpb25cIj4sXHJcbiAgICBHZXQ8VXNlTWVudUl0ZW1QYXJhbWV0ZXJzLCBcInJvdmluZ1RhYkluZGV4XCI+IHtcclxuICAgIHJlbmRlcihpbmZvOiBVc2VNZW51SXRlbVJldHVyblR5cGVJbmZvPE1lbnVJdGVtRWxlbWVudD4sIG1vZGlmeUxpc3RJdGVtUHJvcHM6IFByb3BNb2RpZmllcjxNZW51SXRlbUVsZW1lbnQ+KTogVk5vZGU7XHJcbiAgICAvL3RhZ01lbnVJdGVtOiBhbnk7XHJcbiAgICAvL3Byb3BzTWVudUl0ZW06ICgpID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPGFueT5cclxufVxyXG5cclxuY29uc3QgTWVudUl0ZW1Db250ZXh0ID0gY3JlYXRlQ29udGV4dDxVc2VNZW51SXRlbTxhbnk+PihudWxsISk7XHJcblxyXG5leHBvcnQgY29uc3QgTWVudSA9IG1lbW8oZnVuY3Rpb24gTWVudTxTdXJmYWNlRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIFBhcmVudEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBTZW50aW5lbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDaGlsZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBCdXR0b25FbGVtZW50IGV4dGVuZHMgRWxlbWVudD4oe1xyXG4gICAgaW5pdGlhbEluZGV4LFxyXG4gICAgY29sbGF0b3IsXHJcbiAgICBkaXNhYmxlQXJyb3dLZXlzLFxyXG4gICAgZGlzYWJsZUhvbWVFbmRLZXlzLFxyXG4gICAgbmF2aWdhdGlvbkRpcmVjdGlvbixcclxuICAgIG5vVHlwZWFoZWFkLFxyXG4gICAgdHlwZWFoZWFkVGltZW91dCxcclxuICAgIG9uT3BlbixcclxuICAgIG9uQ2xvc2UsXHJcbiAgICBvcGVuLFxyXG5cclxuICAgIG9wZW5EaXJlY3Rpb24sXHJcbiAgICBpbmRleERlbWFuZ2xlcixcclxuICAgIGluZGV4TWFuZ2xlcixcclxuICAgIG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdCxcclxuICAgIG9uQ2hpbGRyZW5Nb3VudENoYW5nZSxcclxuICAgIG9uVGFiYmFibGVJbmRleENoYW5nZSxcclxuICAgIG9uVGFiYmFibGVSZW5kZXIsXHJcblxyXG4gICAgZ2V0RG9jdW1lbnQsXHJcbiAgICBnZXRXaW5kb3csXHJcblxyXG4gICAgcmVuZGVyXHJcblxyXG59OiBNZW51UHJvcHM8U3VyZmFjZUVsZW1lbnQsIFBhcmVudEVsZW1lbnQsIFNlbnRpbmVsRWxlbWVudCwgQ2hpbGRFbGVtZW50LCBCdXR0b25FbGVtZW50Pikge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICAgIHVzZU1lbnVCdXR0b25Qcm9wcyxcclxuICAgICAgICB1c2VNZW51SXRlbSxcclxuICAgICAgICB1c2VNZW51UHJvcHMsXHJcbiAgICAgICAgdXNlTWVudVNlbnRpbmVsLFxyXG4gICAgICAgIHVzZU1lbnVTdXJmYWNlUHJvcHMsXHJcbiAgICAgICAgLi4ubWVudVJldHVyblxyXG4gICAgfSA9IHVzZU1lbnU8U3VyZmFjZUVsZW1lbnQsIFBhcmVudEVsZW1lbnQsIENoaWxkRWxlbWVudCwgQnV0dG9uRWxlbWVudD4oe1xyXG4gICAgICAgIGxpbmVhck5hdmlnYXRpb246IHsgZGlzYWJsZUFycm93S2V5cywgZGlzYWJsZUhvbWVFbmRLZXlzLCBuYXZpZ2F0aW9uRGlyZWN0aW9uIH0sXHJcbiAgICAgICAgbGlzdE5hdmlnYXRpb246IHsgaW5kZXhEZW1hbmdsZXIsIGluZGV4TWFuZ2xlciB9LFxyXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbjogeyBvbkFmdGVyQ2hpbGRMYXlvdXRFZmZlY3QsIG9uQ2hpbGRyZW5Nb3VudENoYW5nZSB9LFxyXG4gICAgICAgIG1lbnU6IHsgb25PcGVuOiB1c2VTdGFibGVDYWxsYmFjayhvbk9wZW4pLCBvcGVuRGlyZWN0aW9uIH0sXHJcbiAgICAgICAgbWVudVN1cmZhY2U6IHt9LFxyXG4gICAgICAgIHJvdmluZ1RhYkluZGV4OiB7IGluaXRpYWxJbmRleCwgb25UYWJiYWJsZUluZGV4Q2hhbmdlLCBvblRhYmJhYmxlUmVuZGVyIH0sXHJcbiAgICAgICAgc29mdERpc21pc3M6IHsgb25DbG9zZTogdXNlU3RhYmxlQ2FsbGJhY2sob25DbG9zZSksIG9wZW4gfSxcclxuICAgICAgICB0eXBlYWhlYWROYXZpZ2F0aW9uOiB7IGNvbGxhdG9yLCBub1R5cGVhaGVhZCwgdHlwZWFoZWFkVGltZW91dCB9LFxyXG4gICAgICAgIGFjdGl2ZUVsZW1lbnQ6IHsgZ2V0RG9jdW1lbnQsIGdldFdpbmRvdyB9LFxyXG4gICAgICAgIG1lbnVCdXR0b25IYXNGb2N1czogeyBnZXREb2N1bWVudCwgZ2V0V2luZG93IH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHsgdXNlTWVudVNlbnRpbmVsUHJvcHM6IHVzZUZpcnN0U2VudGluZWxQcm9wcyB9ID0gdXNlTWVudVNlbnRpbmVsPFNlbnRpbmVsRWxlbWVudD4oKTtcclxuICAgIGNvbnN0IHsgdXNlTWVudVNlbnRpbmVsUHJvcHM6IHVzZUxhc3RTZW50aW5lbFByb3BzIH0gPSB1c2VNZW51U2VudGluZWw8U2VudGluZWxFbGVtZW50PigpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8TWVudUl0ZW1Db250ZXh0LlByb3ZpZGVyIHZhbHVlPXt1c2VNZW51SXRlbX0+XHJcbiAgICAgICAgICAgIHtyZW5kZXIobWVudVJldHVybiwgdXNlTWVudUJ1dHRvblByb3BzLCB1c2VNZW51U3VyZmFjZVByb3BzLCB1c2VNZW51UHJvcHMsIHVzZUZpcnN0U2VudGluZWxQcm9wcywgdXNlTGFzdFNlbnRpbmVsUHJvcHMpfVxyXG4gICAgICAgIDwvTWVudUl0ZW1Db250ZXh0LlByb3ZpZGVyPlxyXG4gICAgKVxyXG5cclxufSlcclxuXHJcbmV4cG9ydCBjb25zdCBNZW51SXRlbSA9IG1lbW8oZnVuY3Rpb24gTWVudUl0ZW08TWVudUl0ZW1FbGVtZW50IGV4dGVuZHMgRWxlbWVudD4oeyByZW5kZXIsIGluZGV4LCB0ZXh0LCBoaWRkZW4sIGZsYWdzLCBmb2N1c1NlbGYgfTogTWVudUl0ZW1Qcm9wczxNZW51SXRlbUVsZW1lbnQ+KSB7XHJcbiAgICBjb25zdCB7IHVzZU1lbnVJdGVtUHJvcHMsIC4uLnJlc3QgfSA9IHVzZUNvbnRleHQoTWVudUl0ZW1Db250ZXh0KSh7XHJcbiAgICAgICAgbGlzdE5hdmlnYXRpb246IHsgdGV4dCB9LFxyXG4gICAgICAgIG1hbmFnZWRDaGlsZDogeyBpbmRleCwgZmxhZ3MgfSxcclxuICAgICAgICByb3ZpbmdUYWJJbmRleDogeyBmb2N1c1NlbGYsIGhpZGRlbiB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZW5kZXIocmVzdCwgdXNlTWVudUl0ZW1Qcm9wcyk7XHJcbn0pXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFJlbmRlck1lbnU8U3VyZmFjZUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBNZW51RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIE1lbnVJdGVtRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIFNlbnRpbmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIEJ1dHRvbkVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50Pih7IHBvcnRhbElkLCB0YWdCdXR0b24sIHRhZ01lbnUsIHRhZ1N1cmZhY2UsIHRhZ1NlbnRpbmVsLCBtYWtlUHJvcHNCdXR0b24sIG1ha2VQcm9wc01lbnUsIG1ha2VQcm9wc1N1cmZhY2UsIG1ha2VQcm9wc1NlbnRpbmVsIH06IHsgcG9ydGFsSWQ6IHN0cmluZywgdGFnU3VyZmFjZTogRWxlbWVudFRvVGFnPFN1cmZhY2VFbGVtZW50PiwgdGFnTWVudTogRWxlbWVudFRvVGFnPE1lbnVFbGVtZW50PiwgdGFnQnV0dG9uOiBFbGVtZW50VG9UYWc8QnV0dG9uRWxlbWVudD4sIHRhZ1NlbnRpbmVsOiBFbGVtZW50VG9UYWc8U2VudGluZWxFbGVtZW50PiwgbWFrZVByb3BzU3VyZmFjZTogKGluZm86IFVzZU1lbnVSZXR1cm5UeXBlSW5mbzxTdXJmYWNlRWxlbWVudCwgTWVudUVsZW1lbnQsIE1lbnVJdGVtRWxlbWVudCwgQnV0dG9uRWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFN1cmZhY2VFbGVtZW50PiwgbWFrZVByb3BzTWVudTogKGluZm86IFVzZU1lbnVSZXR1cm5UeXBlSW5mbzxTdXJmYWNlRWxlbWVudCwgTWVudUVsZW1lbnQsIE1lbnVJdGVtRWxlbWVudCwgQnV0dG9uRWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPE1lbnVFbGVtZW50PiwgbWFrZVByb3BzQnV0dG9uOiAoaW5mbzogVXNlTWVudVJldHVyblR5cGVJbmZvPFN1cmZhY2VFbGVtZW50LCBNZW51RWxlbWVudCwgTWVudUl0ZW1FbGVtZW50LCBCdXR0b25FbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8QnV0dG9uRWxlbWVudD4sIG1ha2VQcm9wc1NlbnRpbmVsOiAoaW5mbzogVXNlTWVudVJldHVyblR5cGVJbmZvPFN1cmZhY2VFbGVtZW50LCBNZW51RWxlbWVudCwgTWVudUl0ZW1FbGVtZW50LCBCdXR0b25FbGVtZW50PikgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8U2VudGluZWxFbGVtZW50PiB9KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1lbnVJbmZvOiBVc2VNZW51UmV0dXJuVHlwZUluZm88U3VyZmFjZUVsZW1lbnQsIE1lbnVFbGVtZW50LCBNZW51SXRlbUVsZW1lbnQsIEJ1dHRvbkVsZW1lbnQ+LCBtb2RpZnlNZW51QnV0dG9uUHJvcHM6IFByb3BNb2RpZmllcjxCdXR0b25FbGVtZW50PiwgbW9kaWZ5TWVudVN1cmZhY2VQcm9wczogUHJvcE1vZGlmaWVyPFN1cmZhY2VFbGVtZW50PiwgbW9kaWZ5TWVudVByb3BzOiBQcm9wTW9kaWZpZXI8TWVudUVsZW1lbnQ+LCBtb2RpZnlGaXJzdFNlbnRpbmVsUHJvcHM6IFByb3BNb2RpZmllcjxTZW50aW5lbEVsZW1lbnQ+LCBtb2RpZnlMYXN0U2VudGluZWxQcm9wczogUHJvcE1vZGlmaWVyPFNlbnRpbmVsRWxlbWVudD4pIHtcclxuXHJcbiAgICAgICAgY29uc3QgeyBjaGlsZHJlbjogc3VyZmFjZUNoaWxkcmVuLCAuLi5zdXJmYWNlUHJvcHMgfSA9IG1vZGlmeU1lbnVTdXJmYWNlUHJvcHMobWFrZVByb3BzU3VyZmFjZShtZW51SW5mbykpO1xyXG4gICAgICAgIGNvbnN0IHsgY2hpbGRyZW46IG1lbnVDaGlsZHJlbiwgLi4ubWVudVByb3BzIH0gPSBtb2RpZnlNZW51UHJvcHMobWFrZVByb3BzTWVudShtZW51SW5mbykpO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICB7Y3JlYXRlRWxlbWVudCh0YWdCdXR0b24gYXMgbmV2ZXIsIG1vZGlmeU1lbnVCdXR0b25Qcm9wcyhtYWtlUHJvcHNCdXR0b24obWVudUluZm8pKSl9XHJcbiAgICAgICAgICAgICAgICB7ZGVmYXVsdFJlbmRlclBvcnRhbCh7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9ydGFsSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IGNyZWF0ZUVsZW1lbnQodGFnU3VyZmFjZSBhcyBuZXZlciwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5zdXJmYWNlUHJvcHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiAoPD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjcmVhdGVFbGVtZW50KHRhZ1NlbnRpbmVsIGFzIG5ldmVyLCBtb2RpZnlGaXJzdFNlbnRpbmVsUHJvcHMobWFrZVByb3BzU2VudGluZWwobWVudUluZm8pKSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c3VyZmFjZUNoaWxkcmVufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2NyZWF0ZUVsZW1lbnQodGFnTWVudSBhcyBuZXZlciwgeyAuLi5tZW51UHJvcHMsIGNoaWxkcmVuOiA8PnttZW51Q2hpbGRyZW59PC8+IH0pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2NyZWF0ZUVsZW1lbnQodGFnU2VudGluZWwgYXMgbmV2ZXIsIG1vZGlmeUxhc3RTZW50aW5lbFByb3BzKG1ha2VQcm9wc1NlbnRpbmVsKG1lbnVJbmZvKSkpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Lz4pXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICA8Lz5cclxuICAgICAgICApXHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRSZW5kZXJNZW51SXRlbTxNZW51SXRlbUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50Pih7IG1ha2VQcm9wc01lbnVJdGVtOiBtYWtlUHJvcHNNZW51SXRlbSwgdGFnTWVudUl0ZW0gfTogeyB0YWdNZW51SXRlbTogRWxlbWVudFRvVGFnPE1lbnVJdGVtRWxlbWVudD4sIG1ha2VQcm9wc01lbnVJdGVtOiAoaW5mbzogVXNlTWVudUl0ZW1SZXR1cm5UeXBlSW5mbzxNZW51SXRlbUVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxNZW51SXRlbUVsZW1lbnQ+IH0pIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoaW5mbzogVXNlTWVudUl0ZW1SZXR1cm5UeXBlSW5mbzxNZW51SXRlbUVsZW1lbnQ+LCBtb2RpZnlNZW51SXRlbVByb3BzOiBQcm9wTW9kaWZpZXI8TWVudUl0ZW1FbGVtZW50Pikge1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KHRhZ01lbnVJdGVtIGFzIG5ldmVyLCBtb2RpZnlNZW51SXRlbVByb3BzKG1ha2VQcm9wc01lbnVJdGVtKGluZm8pKSlcclxuICAgIH1cclxufSIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIGNyZWF0ZUVsZW1lbnQsIGgsIFZOb2RlIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyBVc2VIYXNGb2N1c1BhcmFtZXRlcnMgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVyc1wiO1xyXG5pbXBvcnQgeyBtZW1vIH0gZnJvbSBcInByZWFjdC9jb21wYXRcIjtcclxuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgRWxlbWVudFRvVGFnLCBQcm9wTW9kaWZpZXIgfSBmcm9tIFwicHJvcHNcIjtcclxuaW1wb3J0IHsgdXNlUmFkaW9Hcm91cCwgVXNlUmFkaW9Hcm91cFBhcmFtZXRlcnMsIFVzZVJhZGlvR3JvdXBSZXR1cm5UeXBlSW5mbywgVXNlUmFkaW9QYXJhbWV0ZXJzLCBVc2VSYWRpbywgVXNlUmFkaW9SZXR1cm5UeXBlSW5mbyB9IGZyb20gXCIuLi91c2UtcmFkaW8tZ3JvdXBcIjtcclxuaW1wb3J0IHsgZGVmYXVsdFJlbmRlckNoZWNrYm94TGlrZSwgRGVmYXVsdFJlbmRlckNoZWNrYm94TGlrZVBhcmFtZXRlcnMgfSBmcm9tIFwiLi9jaGVja2JveFwiXHJcblxyXG50eXBlIEdldDxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSBUW0tdO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSYWRpb0dyb3VwUHJvcHM8ViBleHRlbmRzIHN0cmluZyB8IG51bWJlciwgR3JvdXBFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgR3JvdXBMYWJlbEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCwgSW5wdXRFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kc1xyXG4gICAgR2V0PFVzZVJhZGlvR3JvdXBQYXJhbWV0ZXJzPFYsIEdyb3VwRWxlbWVudCwgR3JvdXBMYWJlbEVsZW1lbnQsIElucHV0RWxlbWVudD4sIFwicmFkaW9Hcm91cFwiPixcclxuICAgIEdldDxVc2VSYWRpb0dyb3VwUGFyYW1ldGVyczxWLCBHcm91cEVsZW1lbnQsIEdyb3VwTGFiZWxFbGVtZW50LCBJbnB1dEVsZW1lbnQ+LCBcImxpbmVhck5hdmlnYXRpb25cIj4sXHJcbiAgICBHZXQ8VXNlUmFkaW9Hcm91cFBhcmFtZXRlcnM8ViwgR3JvdXBFbGVtZW50LCBHcm91cExhYmVsRWxlbWVudCwgSW5wdXRFbGVtZW50PiwgXCJsaXN0TmF2aWdhdGlvblwiPixcclxuICAgIEdldDxVc2VSYWRpb0dyb3VwUGFyYW1ldGVyczxWLCBHcm91cEVsZW1lbnQsIEdyb3VwTGFiZWxFbGVtZW50LCBJbnB1dEVsZW1lbnQ+LCBcIm1hbmFnZWRDaGlsZHJlblwiPixcclxuICAgIEdldDxVc2VSYWRpb0dyb3VwUGFyYW1ldGVyczxWLCBHcm91cEVsZW1lbnQsIEdyb3VwTGFiZWxFbGVtZW50LCBJbnB1dEVsZW1lbnQ+LCBcInJvdmluZ1RhYkluZGV4XCI+LFxyXG4gICAgR2V0PFVzZVJhZGlvR3JvdXBQYXJhbWV0ZXJzPFYsIEdyb3VwRWxlbWVudCwgR3JvdXBMYWJlbEVsZW1lbnQsIElucHV0RWxlbWVudD4sIFwiY2hpbGRyZW5IYXZlRm9jdXNcIj4sXHJcbiAgICBHZXQ8VXNlUmFkaW9Hcm91cFBhcmFtZXRlcnM8ViwgR3JvdXBFbGVtZW50LCBHcm91cExhYmVsRWxlbWVudCwgSW5wdXRFbGVtZW50PiwgXCJ0eXBlYWhlYWROYXZpZ2F0aW9uXCI+IHtcclxuICAgIC8vcHJvcHNHcm91cExhYmVsOiAoKSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxHcm91cExhYmVsRWxlbWVudD47XHJcbiAgICAvL3Byb3BzR3JvdXA6ICgpID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEdyb3VwRWxlbWVudD47XHJcbiAgICByZW5kZXIoaW5mbzogVXNlUmFkaW9Hcm91cFJldHVyblR5cGVJbmZvPFYsIElucHV0RWxlbWVudD4sIG1vZGlmeUxhYmVsUHJvcHM6IFByb3BNb2RpZmllcjxHcm91cExhYmVsRWxlbWVudD4sIG1vZGlmeUdyb3VwUHJvcHM6IFByb3BNb2RpZmllcjxHcm91cEVsZW1lbnQ+KTogVk5vZGU8YW55PjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSYWRpb1Byb3BzPFYgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXIsIElucHV0RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIExhYmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHNcclxuICAgIEdldDxVc2VSYWRpb1BhcmFtZXRlcnM8ViwgSW5wdXRFbGVtZW50LCBMYWJlbEVsZW1lbnQ+LCBcInJhZGlvXCI+LFxyXG4gICAgR2V0PFVzZVJhZGlvUGFyYW1ldGVyczxWLCBJbnB1dEVsZW1lbnQsIExhYmVsRWxlbWVudD4sIFwibGlzdE5hdmlnYXRpb25cIj4sXHJcbiAgICBHZXQ8VXNlUmFkaW9QYXJhbWV0ZXJzPFYsIElucHV0RWxlbWVudCwgTGFiZWxFbGVtZW50PiwgXCJyb3ZpbmdUYWJJbmRleFwiPixcclxuICAgIEdldDxVc2VSYWRpb1BhcmFtZXRlcnM8ViwgSW5wdXRFbGVtZW50LCBMYWJlbEVsZW1lbnQ+LCBcIm1hbmFnZWRDaGlsZFwiPixcclxuICAgIEdldDxVc2VSYWRpb1BhcmFtZXRlcnM8ViwgSW5wdXRFbGVtZW50LCBMYWJlbEVsZW1lbnQ+LCBcImhhc0ZvY3VzSW5wdXRcIj4sXHJcbiAgICBVc2VIYXNGb2N1c1BhcmFtZXRlcnM8SW5wdXRFbGVtZW50PixcclxuICAgIEdldDxVc2VSYWRpb1BhcmFtZXRlcnM8ViwgSW5wdXRFbGVtZW50LCBMYWJlbEVsZW1lbnQ+LCBcInJhZGlvXCI+IHtcclxuICAgIHJlbmRlcihpbmZvOiBVc2VSYWRpb1JldHVyblR5cGVJbmZvPElucHV0RWxlbWVudD4sIG1vZGlmeUlucHV0UHJvcHM6IFByb3BNb2RpZmllcjxJbnB1dEVsZW1lbnQ+LCBtb2RpZnlMYWJlbFByb3BzOiBQcm9wTW9kaWZpZXI8TGFiZWxFbGVtZW50Pik6IFZOb2RlPGFueT47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0UmVuZGVyUmFkaW9Hcm91cDxWIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyLCBJbnB1dEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50Pih7IHRhZ0dyb3VwLCB0YWdMYWJlbCwgbWFrZVByb3BzR3JvdXAsIG1ha2VQcm9wc0xhYmVsIH06IHsgdGFnTGFiZWw6IEVsZW1lbnRUb1RhZzxMYWJlbEVsZW1lbnQ+LCB0YWdHcm91cDogRWxlbWVudFRvVGFnPElucHV0RWxlbWVudD4sIG1ha2VQcm9wc0xhYmVsOiAoaW5mbzogVXNlUmFkaW9Hcm91cFJldHVyblR5cGVJbmZvPFYsIElucHV0RWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExhYmVsRWxlbWVudD4sIG1ha2VQcm9wc0dyb3VwOiAoaW5mbzogVXNlUmFkaW9Hcm91cFJldHVyblR5cGVJbmZvPFYsIElucHV0RWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPElucHV0RWxlbWVudD4gfSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpbmZvOiBVc2VSYWRpb0dyb3VwUmV0dXJuVHlwZUluZm88ViwgSW5wdXRFbGVtZW50PiwgbW9kaWZ5TGFiZWxQcm9wczogUHJvcE1vZGlmaWVyPExhYmVsRWxlbWVudD4sIG1vZGlmeUdyb3VwUHJvcHM6IFByb3BNb2RpZmllcjxJbnB1dEVsZW1lbnQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgIHtjcmVhdGVFbGVtZW50KHRhZ0xhYmVsIGFzIG5ldmVyLCBtb2RpZnlMYWJlbFByb3BzKG1ha2VQcm9wc0xhYmVsKGluZm8pKSl9XHJcbiAgICAgICAgICAgICAgICB7Y3JlYXRlRWxlbWVudCh0YWdHcm91cCBhcyBuZXZlciwgbW9kaWZ5R3JvdXBQcm9wcyhtYWtlUHJvcHNHcm91cChpbmZvKSkpfVxyXG4gICAgICAgICAgICA8Lz5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IFJhZGlvQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8VXNlUmFkaW88YW55LCBhbnksIGFueT4+KG51bGwhKTtcclxuZXhwb3J0IGNvbnN0IFJhZGlvR3JvdXAgPSBtZW1vKGZ1bmN0aW9uIFJhZGlvR3JvdXA8ViBleHRlbmRzIHN0cmluZyB8IG51bWJlciwgR3JvdXBFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQsIEdyb3VwTGFiZWxFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQsIElucHV0RWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50LCBMYWJlbEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudD4oe1xyXG4gICAgcmVuZGVyLFxyXG4gICAgdGFnR3JvdXAsXHJcbiAgICB0YWdHcm91cExhYmVsLFxyXG4gICAgbmFtZSxcclxuICAgIG9uU2VsZWN0ZWRWYWx1ZUNoYW5nZSxcclxuICAgIHNlbGVjdGVkVmFsdWUsXHJcbiAgICBjb2xsYXRvcixcclxuICAgIGRpc2FibGVBcnJvd0tleXMsXHJcbiAgICBkaXNhYmxlSG9tZUVuZEtleXMsXHJcbiAgICBuYXZpZ2F0aW9uRGlyZWN0aW9uLFxyXG4gICAgbm9UeXBlYWhlYWQsXHJcbiAgICB0eXBlYWhlYWRUaW1lb3V0LFxyXG4gICAgaW5kZXhEZW1hbmdsZXIsXHJcbiAgICBpbmRleE1hbmdsZXIsXHJcbiAgICBvbkFsbExvc3RGb2N1cyxcclxuICAgIG9uQW55R2FpbmVkRm9jdXMsXHJcbiAgICBvbkFmdGVyQ2hpbGRMYXlvdXRFZmZlY3QsXHJcbiAgICBvbkNoaWxkcmVuTW91bnRDaGFuZ2UsXHJcbiAgICBvblRhYmJhYmxlSW5kZXhDaGFuZ2UsXHJcbiAgICBvblRhYmJhYmxlUmVuZGVyLFxyXG59OiBSYWRpb0dyb3VwUHJvcHM8ViwgR3JvdXBFbGVtZW50LCBHcm91cExhYmVsRWxlbWVudCwgSW5wdXRFbGVtZW50Pikge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICAgIHVzZVJhZGlvLFxyXG4gICAgICAgIHVzZVJhZGlvR3JvdXBMYWJlbFByb3BzLFxyXG4gICAgICAgIHVzZVJhZGlvR3JvdXBQcm9wcyxcclxuICAgICAgICAuLi5yYWRpb0dyb3VwUmV0dXJuXHJcbiAgICB9ID0gdXNlUmFkaW9Hcm91cDxWLCBHcm91cEVsZW1lbnQsIEdyb3VwTGFiZWxFbGVtZW50LCBJbnB1dEVsZW1lbnQsIExhYmVsRWxlbWVudD4oe1xyXG4gICAgICAgIGxpbmVhck5hdmlnYXRpb246IHsgZGlzYWJsZUFycm93S2V5cywgZGlzYWJsZUhvbWVFbmRLZXlzLCBuYXZpZ2F0aW9uRGlyZWN0aW9uIH0sXHJcbiAgICAgICAgbGlzdE5hdmlnYXRpb246IHsgaW5kZXhEZW1hbmdsZXIsIGluZGV4TWFuZ2xlciB9LFxyXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbjogeyBvbkFmdGVyQ2hpbGRMYXlvdXRFZmZlY3QsIG9uQ2hpbGRyZW5Nb3VudENoYW5nZSB9LFxyXG4gICAgICAgIHJhZGlvR3JvdXA6IHsgbmFtZSwgb25TZWxlY3RlZFZhbHVlQ2hhbmdlLCBzZWxlY3RlZFZhbHVlLCB0YWdHcm91cCwgdGFnR3JvdXBMYWJlbCB9LFxyXG4gICAgICAgIHJvdmluZ1RhYkluZGV4OiB7IG9uVGFiYmFibGVJbmRleENoYW5nZSwgb25UYWJiYWJsZVJlbmRlciB9LFxyXG4gICAgICAgIHR5cGVhaGVhZE5hdmlnYXRpb246IHsgY29sbGF0b3IsIG5vVHlwZWFoZWFkLCB0eXBlYWhlYWRUaW1lb3V0IH0sXHJcbiAgICAgICAgY2hpbGRyZW5IYXZlRm9jdXM6IHsgb25BbGxMb3N0Rm9jdXMsIG9uQW55R2FpbmVkRm9jdXMgfSxcclxuICAgICAgICBzaW5nbGVTZWxlY3Rpb246IHsgc2VsZWN0aW9uTW9kZTogXCJmb2N1c1wiIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFJhZGlvQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17dXNlUmFkaW99PlxyXG4gICAgICAgICAgICB7cmVuZGVyKHJhZGlvR3JvdXBSZXR1cm4sIHVzZVJhZGlvR3JvdXBMYWJlbFByb3BzLCB1c2VSYWRpb0dyb3VwUHJvcHMpfVxyXG4gICAgICAgIDwvUmFkaW9Db250ZXh0LlByb3ZpZGVyPlxyXG4gICAgKVxyXG59KVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEZWZhdWx0UmVuZGVyUmFkaW9QYXJhbWV0ZXJzPEkgZXh0ZW5kcyBIVE1MRWxlbWVudCwgTCBleHRlbmRzIEhUTUxFbGVtZW50PiBleHRlbmRzIERlZmF1bHRSZW5kZXJDaGVja2JveExpa2VQYXJhbWV0ZXJzPEksIEwsIFVzZVJhZGlvUmV0dXJuVHlwZUluZm88ST4+IHtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0UmVuZGVyUmFkaW88SSBleHRlbmRzIEhUTUxFbGVtZW50LCBMIGV4dGVuZHMgSFRNTEVsZW1lbnQ+KHsgdGFnSW5wdXQsIHRhZ0xhYmVsLCBtYWtlSW5wdXRQcm9wcywgbWFrZUxhYmVsUHJvcHMsIGxhYmVsUG9zaXRpb24gfTogRGVmYXVsdFJlbmRlclJhZGlvUGFyYW1ldGVyczxJLCBMPikge1xyXG4gICAgcmV0dXJuIGRlZmF1bHRSZW5kZXJDaGVja2JveExpa2U8SSwgTCwgVXNlUmFkaW9SZXR1cm5UeXBlSW5mbzxJPj4oeyBsYWJlbFBvc2l0aW9uLCB0YWdJbnB1dCwgdGFnTGFiZWwsIG1ha2VJbnB1dFByb3BzLCBtYWtlTGFiZWxQcm9wcyB9KTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFJhZGlvID0gbWVtbyhmdW5jdGlvbiBSYWRpbzxWIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyLCBJbnB1dEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50Pih7IGRpc2FibGVkLCBpbmRleCwgdGV4dCwgaGlkZGVuLCB0YWdJbnB1dCwgbGFiZWxQb3NpdGlvbiwgdGFnTGFiZWwsIHZhbHVlLCByZW5kZXIsIGZsYWdzLCBmb2N1c1NlbGYsIGdldERvY3VtZW50LCBnZXRXaW5kb3csIG9uQWN0aXZlRWxlbWVudENoYW5nZSwgb25FbGVtZW50Q2hhbmdlLCBvbkZvY3VzZWRDaGFuZ2VkLCBvbkZvY3VzZWRJbm5lckNoYW5nZWQsIG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uTGFzdEZvY3VzZWRDaGFuZ2VkLCBvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkLCBvbk1vdW50LCBvblVubW91bnQsIG9uV2luZG93Rm9jdXNlZENoYW5nZSB9OiBSYWRpb1Byb3BzPFYsIElucHV0RWxlbWVudCwgTGFiZWxFbGVtZW50Pikge1xyXG4gICAgY29uc3QgeyB1c2VSYWRpb0lucHV0LCB1c2VSYWRpb0xhYmVsLCAuLi5yYWRpb1JldHVybiB9ID0gdXNlQ29udGV4dChSYWRpb0NvbnRleHQpKHtcclxuICAgICAgICBsaXN0TmF2aWdhdGlvbjogeyB0ZXh0IH0sXHJcbiAgICAgICAgbWFuYWdlZENoaWxkOiB7IGluZGV4LCBmbGFncyB9LFxyXG4gICAgICAgIHJhZGlvOiB7IGRpc2FibGVkLCBsYWJlbFBvc2l0aW9uLCB0YWdJbnB1dCwgdGFnTGFiZWwsIHZhbHVlIH0sXHJcbiAgICAgICAgcm92aW5nVGFiSW5kZXg6IHsgaGlkZGVuLCBmb2N1c1NlbGYgfSxcclxuICAgICAgICBoYXNGb2N1c0lucHV0OiB7IGdldERvY3VtZW50LCBnZXRXaW5kb3csIG9uQWN0aXZlRWxlbWVudENoYW5nZSwgb25FbGVtZW50Q2hhbmdlLCBvbkZvY3VzZWRDaGFuZ2VkLCBvbkZvY3VzZWRJbm5lckNoYW5nZWQsIG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uTGFzdEZvY3VzZWRDaGFuZ2VkLCBvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkLCBvbk1vdW50LCBvblVubW91bnQsIG9uV2luZG93Rm9jdXNlZENoYW5nZSB9LFxyXG4gICAgICAgIGhhc0ZvY3VzTGFiZWw6IHsgZ2V0RG9jdW1lbnQsIGdldFdpbmRvdywgb25BY3RpdmVFbGVtZW50Q2hhbmdlLCBvbkVsZW1lbnRDaGFuZ2UsIG9uRm9jdXNlZENoYW5nZWQsIG9uRm9jdXNlZElubmVyQ2hhbmdlZCwgb25MYXN0QWN0aXZlRWxlbWVudENoYW5nZSwgb25MYXN0Rm9jdXNlZENoYW5nZWQsIG9uTGFzdEZvY3VzZWRJbm5lckNoYW5nZWQsIG9uTW91bnQsIG9uVW5tb3VudCwgb25XaW5kb3dGb2N1c2VkQ2hhbmdlIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHsgdXNlUmFkaW9JbnB1dFByb3BzIH0gPSB1c2VSYWRpb0lucHV0KHsgdGFnOiB0YWdJbnB1dCB9KTtcclxuICAgIGNvbnN0IHsgdXNlUmFkaW9MYWJlbFByb3BzIH0gPSB1c2VSYWRpb0xhYmVsKHsgdGFnOiB0YWdMYWJlbCB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVuZGVyKHJhZGlvUmV0dXJuLCB1c2VSYWRpb0lucHV0UHJvcHMsIHVzZVJhZGlvTGFiZWxQcm9wcyk7XHJcbn0pXHJcbiIsImltcG9ydCB7IENvbXBvbmVudENoaWxkcmVuLCBjcmVhdGVDb250ZXh0LCBjcmVhdGVFbGVtZW50LCBoLCBWTm9kZSB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgbWVtbyB9IGZyb20gXCJwcmVhY3QvY29tcGF0XCI7XHJcbmltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IEVsZW1lbnRUb1RhZywgUHJvcE1vZGlmaWVyIH0gZnJvbSBcInByb3BzXCI7XHJcbmltcG9ydCB7IHVzZVNsaWRlciwgVXNlU2xpZGVyUGFyYW1ldGVycywgVXNlU2xpZGVyVGh1bWIsIFVzZVNsaWRlclRodW1iUGFyYW1ldGVycywgVXNlU2xpZGVyVGh1bWJSZXR1cm5UeXBlSW5mbyB9IGZyb20gXCIuLi91c2Utc2xpZGVyXCI7XHJcblxyXG50eXBlIEdldDxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSBUW0tdO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTbGlkZXJQcm9wcyBleHRlbmRzIEdldDxVc2VTbGlkZXJQYXJhbWV0ZXJzLCBcIm1hbmFnZWRDaGlsZHJlblwiPiwgR2V0PFVzZVNsaWRlclBhcmFtZXRlcnMsIFwic2xpZGVyXCI+IHtcclxuICAgIGNoaWxkcmVuOiBDb21wb25lbnRDaGlsZHJlbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTbGlkZXJUaHVtYlByb3BzPFRodW1iRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgR2V0PFVzZVNsaWRlclRodW1iUGFyYW1ldGVyczxUaHVtYkVsZW1lbnQ+LCBcIm1hbmFnZWRDaGlsZFwiPiwgR2V0PFVzZVNsaWRlclRodW1iUGFyYW1ldGVyczxUaHVtYkVsZW1lbnQ+LCBcInNsaWRlclRodW1iXCI+IHtcclxuICAgIHJlbmRlcihpbmZvOiBVc2VTbGlkZXJUaHVtYlJldHVyblR5cGVJbmZvLCBtb2RpZnlUaHVtYlByb3BzOiBQcm9wTW9kaWZpZXI8VGh1bWJFbGVtZW50Pik6IFZOb2RlO1xyXG59XHJcblxyXG5jb25zdCBTbGlkZXJUaHVtYkNvbnRleHQgPSBjcmVhdGVDb250ZXh0PFVzZVNsaWRlclRodW1iPGFueT4+KG51bGwhKTtcclxuXHJcbmV4cG9ydCBjb25zdCBTbGlkZXIgPSBtZW1vKCBmdW5jdGlvbiBTbGlkZXIoeyBtYXgsIG1pbiwgb25BZnRlckNoaWxkTGF5b3V0RWZmZWN0LCBvbkNoaWxkcmVuTW91bnRDaGFuZ2UsIGNoaWxkcmVuIH06IFNsaWRlclByb3BzKSB7XHJcbiAgICBjb25zdCB7IHVzZVNsaWRlclRodW1iLCAuLi5fc2xpZGVySW5mbyB9ID0gdXNlU2xpZGVyKHtcclxuICAgICAgICBtYW5hZ2VkQ2hpbGRyZW46IHsgb25BZnRlckNoaWxkTGF5b3V0RWZmZWN0LCBvbkNoaWxkcmVuTW91bnRDaGFuZ2UgfSxcclxuICAgICAgICBzbGlkZXI6IHsgbWF4LCBtaW4gfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8U2xpZGVyVGh1bWJDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt1c2VTbGlkZXJUaHVtYn0+e2NoaWxkcmVufTwvU2xpZGVyVGh1bWJDb250ZXh0LlByb3ZpZGVyPlxyXG4gICAgKTtcclxufSlcclxuXHJcbmV4cG9ydCBjb25zdCBTbGlkZXJUaHVtYiA9IG1lbW8oZnVuY3Rpb24gU2xpZGVyVGh1bWJVPFRodW1iRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KHsgbGFiZWwsIHRhZywgdmFsdWUsIG1heCwgbWluLCBvblZhbHVlQ2hhbmdlLCBpbmRleCwgZmxhZ3MsIHJlbmRlciwgdmFsdWVUZXh0IH06IFNsaWRlclRodW1iUHJvcHM8VGh1bWJFbGVtZW50Pikge1xyXG4gICAgY29uc3QgeyB1c2VTbGlkZXJUaHVtYlByb3BzLCAuLi5zbGlkZXJJbmZvIH0gPSB1c2VDb250ZXh0KFNsaWRlclRodW1iQ29udGV4dCkoeyBtYW5hZ2VkQ2hpbGQ6IHsgaW5kZXgsIGZsYWdzIH0sIHNsaWRlclRodW1iOiB7IGxhYmVsLCB0YWcsIHZhbHVlLCBtYXgsIG1pbiwgb25WYWx1ZUNoYW5nZSwgdmFsdWVUZXh0IH0gfSk7XHJcblxyXG4gICAgcmV0dXJuIHJlbmRlcihzbGlkZXJJbmZvLCB1c2VTbGlkZXJUaHVtYlByb3BzKVxyXG59KVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRSZW5kZXJTbGlkZXJUaHVtYjxFIGV4dGVuZHMgRWxlbWVudD4oeyB0YWdUaHVtYiwgbWFrZVByb3BzVGh1bWIgfTogeyB0YWdUaHVtYjogRWxlbWVudFRvVGFnPEU+LCBtYWtlUHJvcHNUaHVtYjogKGluZm86IFVzZVNsaWRlclRodW1iUmV0dXJuVHlwZUluZm8pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPEU+IH0pIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoaW5mbzogVXNlU2xpZGVyVGh1bWJSZXR1cm5UeXBlSW5mbywgbW9kaWZ5VGh1bWJQcm9wczogUHJvcE1vZGlmaWVyPEU+KSB7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodGFnVGh1bWIgYXMgbmV2ZXIsIG1vZGlmeVRodW1iUHJvcHMobWFrZVByb3BzVGh1bWIoaW5mbykpKVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIGNyZWF0ZUVsZW1lbnQsIGgsIFJlZiwgVk5vZGUgfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IFVzZUhhc0ZvY3VzUGFyYW1ldGVycyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tIFwicHJlYWN0L2NvbXBhdFwiO1xyXG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyBFbGVtZW50VG9UYWcsIFByb3BNb2RpZmllciB9IGZyb20gXCJwcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VUYWJsZSwgVXNlVGFibGVCb2R5LCBVc2VUYWJsZUJvZHlQYXJhbWV0ZXJzLCBVc2VUYWJsZUJvZHlSZXR1cm5UeXBlSW5mbywgVXNlVGFibGVDZWxsLCBVc2VUYWJsZUNlbGxQYXJhbWV0ZXJzLCBVc2VUYWJsZUNlbGxSZXR1cm5UeXBlSW5mbywgVXNlVGFibGVQYXJhbWV0ZXJzLCBVc2VUYWJsZVJldHVyblR5cGVJbmZvLCBVc2VUYWJsZVJvdywgVXNlVGFibGVSb3dQYXJhbWV0ZXJzLCBVc2VUYWJsZVJvd1JldHVyblR5cGVJbmZvIH0gZnJvbSBcIi4uL3VzZS10YWJsZVwiO1xyXG5cclxudHlwZSBHZXQ8VCwgSyBleHRlbmRzIGtleW9mIFQ+ID0gVFtLXTtcclxudHlwZSBHZXQyPFQsIEsgZXh0ZW5kcyBrZXlvZiBULCBLMiBleHRlbmRzIGtleW9mIFRbS10+ID0gVFtLXVtLMl07XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlUHJvcHM8VGFibGVFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgUm93RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIENlbGxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kc1xyXG4gICAgR2V0PFVzZVRhYmxlUGFyYW1ldGVycywgXCJsaW5lYXJOYXZpZ2F0aW9uXCI+LFxyXG4gICAgR2V0PFVzZVRhYmxlUGFyYW1ldGVycywgXCJsaXN0TmF2aWdhdGlvblwiPixcclxuICAgIEdldDxVc2VUYWJsZVBhcmFtZXRlcnMsIFwibWFuYWdlZENoaWxkcmVuXCI+LFxyXG4gICAgR2V0PFVzZVRhYmxlUGFyYW1ldGVycywgXCJyb3ZpbmdUYWJJbmRleFwiPixcclxuICAgIEdldDxVc2VUYWJsZVBhcmFtZXRlcnMsIFwidHlwZWFoZWFkTmF2aWdhdGlvblwiPiB7XHJcbiAgICAvL3RhZ1RhYmxlOiBFbGVtZW50VG9UYWc8VGFibGVFbGVtZW50PjtcclxuICAgIC8vcHJvcHNUYWJsZSgpOiBoLkpTWC5IVE1MQXR0cmlidXRlczxUYWJsZUVsZW1lbnQ+O1xyXG4gICAgcmVuZGVyKGluZm86IFVzZVRhYmxlUmV0dXJuVHlwZUluZm88Um93RWxlbWVudCwgQ2VsbEVsZW1lbnQ+LCBtb2RpZnlUYWJsZVByb3BzOiBQcm9wTW9kaWZpZXI8VGFibGVFbGVtZW50Pik6IFZOb2RlO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlQm9keVByb3BzPFNlY3Rpb25FbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgUm93RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIENlbGxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kcyBVc2VUYWJsZUJvZHlQYXJhbWV0ZXJzIHtcclxuICAgIHJlbmRlcihpbmZvOiBVc2VUYWJsZUJvZHlSZXR1cm5UeXBlSW5mbzxSb3dFbGVtZW50LCBDZWxsRWxlbWVudD4sIG1vZGlmeVRhYmxlQm9keVByb3BzOiBQcm9wTW9kaWZpZXI8U2VjdGlvbkVsZW1lbnQ+KTogVk5vZGU7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBUYWJsZUhlYWRQcm9wcyB7XHJcbiAgICByZW5kZXIoKTogVk5vZGU7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBUYWJsZUZvb3RQcm9wcyB7XHJcbiAgICByZW5kZXIoKTogVk5vZGU7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGFibGVSb3dQcm9wczxSb3dFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgQ2VsbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzXHJcbiAgICBHZXQyPFVzZVRhYmxlUm93UGFyYW1ldGVyczxDZWxsRWxlbWVudD4sIFwiYXNDaGlsZFJvd09mU2VjdGlvblwiLCBcImxpc3ROYXZpZ2F0aW9uXCI+LFxyXG4gICAgR2V0MjxVc2VUYWJsZVJvd1BhcmFtZXRlcnM8Q2VsbEVsZW1lbnQ+LCBcImFzQ2hpbGRSb3dPZlNlY3Rpb25cIiwgXCJtYW5hZ2VkQ2hpbGRcIj4sXHJcbiAgICBHZXQyPFVzZVRhYmxlUm93UGFyYW1ldGVyczxDZWxsRWxlbWVudD4sIFwiYXNDaGlsZFJvd09mU2VjdGlvblwiLCBcInJvdmluZ1RhYkluZGV4XCI+LFxyXG4gICAgR2V0MjxVc2VUYWJsZVJvd1BhcmFtZXRlcnM8Q2VsbEVsZW1lbnQ+LCBcImFzUGFyZW50Um93T2ZDZWxsc1wiLCBcImxpbmVhck5hdmlnYXRpb25cIj4sXHJcbiAgICBHZXQyPFVzZVRhYmxlUm93UGFyYW1ldGVyczxDZWxsRWxlbWVudD4sIFwiYXNQYXJlbnRSb3dPZkNlbGxzXCIsIFwibGlzdE5hdmlnYXRpb25cIj4sXHJcbiAgICBHZXQyPFVzZVRhYmxlUm93UGFyYW1ldGVyczxDZWxsRWxlbWVudD4sIFwiYXNQYXJlbnRSb3dPZkNlbGxzXCIsIFwibWFuYWdlZENoaWxkcmVuXCI+LFxyXG4gICAgR2V0MjxVc2VUYWJsZVJvd1BhcmFtZXRlcnM8Q2VsbEVsZW1lbnQ+LCBcImFzUGFyZW50Um93T2ZDZWxsc1wiLCBcInJvdmluZ1RhYkluZGV4XCI+LFxyXG4gICAgR2V0MjxVc2VUYWJsZVJvd1BhcmFtZXRlcnM8Q2VsbEVsZW1lbnQ+LCBcImFzUGFyZW50Um93T2ZDZWxsc1wiLCBcInR5cGVhaGVhZE5hdmlnYXRpb25cIj4ge1xyXG4gICAgcmVuZGVyKGluZm86IFVzZVRhYmxlUm93UmV0dXJuVHlwZUluZm88Um93RWxlbWVudCwgQ2VsbEVsZW1lbnQ+LCB0YWJsZVJvd1Byb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxSb3dFbGVtZW50Pik6IFZOb2RlO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlQ2VsbFByb3BzPENlbGxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4gZXh0ZW5kc1xyXG4gICAgR2V0PFVzZVRhYmxlQ2VsbFBhcmFtZXRlcnM8Q2VsbEVsZW1lbnQ+LCBcImxpc3ROYXZpZ2F0aW9uXCI+LFxyXG4gICAgR2V0PFVzZVRhYmxlQ2VsbFBhcmFtZXRlcnM8Q2VsbEVsZW1lbnQ+LCBcIm1hbmFnZWRDaGlsZFwiPixcclxuICAgIEdldDxVc2VUYWJsZUNlbGxQYXJhbWV0ZXJzPENlbGxFbGVtZW50PiwgXCJyb3ZpbmdUYWJJbmRleFwiPixcclxuICAgIEdldDxVc2VUYWJsZUNlbGxQYXJhbWV0ZXJzPENlbGxFbGVtZW50PiwgXCJsaXN0TmF2aWdhdGlvblwiPixcclxuICAgIEdldDxVc2VUYWJsZUNlbGxQYXJhbWV0ZXJzPENlbGxFbGVtZW50PiwgXCJyb3ZpbmdUYWJJbmRleFwiPixcclxuICAgIFVzZUhhc0ZvY3VzUGFyYW1ldGVyczxDZWxsRWxlbWVudD4sXHJcbiAgICBPbWl0PEdldDxVc2VUYWJsZUNlbGxQYXJhbWV0ZXJzPENlbGxFbGVtZW50PiwgXCJzdWJJbmZvXCI+LCBcImxvY2F0aW9uXCI+IHtcclxuICAgIHJlbmRlcihpbmZvOiBVc2VUYWJsZUNlbGxSZXR1cm5UeXBlSW5mbzxDZWxsRWxlbWVudD4sIHRhYmxlUm93UHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPENlbGxFbGVtZW50Pik6IFZOb2RlO1xyXG59XHJcblxyXG5jb25zdCBMb2NhdGlvbkNvbnRleHQgPSBjcmVhdGVDb250ZXh0PFwiaGVhZFwiIHwgXCJib2R5XCIgfCBcImZvb3RcIj4obnVsbCEpO1xyXG5cclxuY29uc3QgVGFibGVCb2R5Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8VXNlVGFibGVCb2R5PGFueSwgYW55LCBhbnk+PihudWxsISk7XHJcbmNvbnN0IFRhYmxlUm93Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8VXNlVGFibGVSb3c8YW55LCBhbnk+PihudWxsISk7XHJcbmNvbnN0IFRhYmxlQ2VsbENvbnRleHQgPSBjcmVhdGVDb250ZXh0PFVzZVRhYmxlQ2VsbDxhbnk+PihudWxsISk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFJlbmRlclRhYmxlPFRhYmxlRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIFJvd0VsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDZWxsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KHsgdGFnVGFibGUsIG1ha2VQcm9wc1RhYmxlIH06IHsgdGFnVGFibGU6IEVsZW1lbnRUb1RhZzxUYWJsZUVsZW1lbnQ+LCBtYWtlUHJvcHNUYWJsZTogKGluZm86IFVzZVRhYmxlUmV0dXJuVHlwZUluZm88Um93RWxlbWVudCwgQ2VsbEVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxUYWJsZUVsZW1lbnQ+IH0pIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoaW5mbzogVXNlVGFibGVSZXR1cm5UeXBlSW5mbzxSb3dFbGVtZW50LCBDZWxsRWxlbWVudD4sIG1vZGlmeVByb3BzVGFibGU6IFByb3BNb2RpZmllcjxUYWJsZUVsZW1lbnQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodGFnVGFibGUgYXMgbmV2ZXIsIG1vZGlmeVByb3BzVGFibGUobWFrZVByb3BzVGFibGUoaW5mbykpKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRSZW5kZXJUYWJsZUJvZHk8VGFibGVCb2R5RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIFJvd0VsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBDZWxsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KHsgdGFnVGFibGVCb2R5LCBtYWtlUHJvcHNUYWJsZUJvZHkgfTogeyB0YWdUYWJsZUJvZHk6IEVsZW1lbnRUb1RhZzxUYWJsZUJvZHlFbGVtZW50PiwgbWFrZVByb3BzVGFibGVCb2R5OiAoaW5mbzogVXNlVGFibGVCb2R5UmV0dXJuVHlwZUluZm88Um93RWxlbWVudCwgQ2VsbEVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxUYWJsZUJvZHlFbGVtZW50PiB9KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGluZm86IFVzZVRhYmxlQm9keVJldHVyblR5cGVJbmZvPFJvd0VsZW1lbnQsIENlbGxFbGVtZW50PiwgbW9kaWZ5UHJvcHNUYWJsZUJvZHk6IFByb3BNb2RpZmllcjxUYWJsZUJvZHlFbGVtZW50Pikge1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KHRhZ1RhYmxlQm9keSBhcyBuZXZlciwgbW9kaWZ5UHJvcHNUYWJsZUJvZHkobWFrZVByb3BzVGFibGVCb2R5KGluZm8pKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0UmVuZGVyVGFibGVIZWFkPFRhYmxlSGVhZEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50Pih7IHRhZ1RhYmxlSGVhZCwgbWFrZVByb3BzVGFibGVIZWFkIH06IHsgdGFnVGFibGVIZWFkOiBFbGVtZW50VG9UYWc8VGFibGVIZWFkRWxlbWVudD4sIG1ha2VQcm9wc1RhYmxlSGVhZDogKCkgPT4gaC5KU1guSFRNTEF0dHJpYnV0ZXM8VGFibGVIZWFkRWxlbWVudD4gfSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCh0YWdUYWJsZUhlYWQgYXMgbmV2ZXIsIChtYWtlUHJvcHNUYWJsZUhlYWQoKSkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFJlbmRlclRhYmxlRm9vdDxUYWJsZUZvb3RFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4oeyB0YWdUYWJsZUZvb3QsIG1ha2VQcm9wc1RhYmxlRm9vdCB9OiB7IHRhZ1RhYmxlRm9vdDogRWxlbWVudFRvVGFnPFRhYmxlRm9vdEVsZW1lbnQ+LCBtYWtlUHJvcHNUYWJsZUZvb3Q6ICgpID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFRhYmxlRm9vdEVsZW1lbnQ+IH0pIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodGFnVGFibGVGb290IGFzIG5ldmVyLCAobWFrZVByb3BzVGFibGVGb290KCkpKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRSZW5kZXJUYWJsZVJvdzxSb3dFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgQ2VsbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50Pih7IHRhZ1RhYmxlUm93LCBtYWtlUHJvcHNUYWJsZVJvdyB9OiB7IHRhZ1RhYmxlUm93OiBFbGVtZW50VG9UYWc8Um93RWxlbWVudD4sIG1ha2VQcm9wc1RhYmxlUm93OiAoaW5mbzogVXNlVGFibGVSb3dSZXR1cm5UeXBlSW5mbzxSb3dFbGVtZW50LCBDZWxsRWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFJvd0VsZW1lbnQ+IH0pIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoaW5mbzogVXNlVGFibGVSb3dSZXR1cm5UeXBlSW5mbzxSb3dFbGVtZW50LCBDZWxsRWxlbWVudD4sIG1vZGlmeVByb3BzVGFibGVSb3c6IFByb3BNb2RpZmllcjxSb3dFbGVtZW50Pikge1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KHRhZ1RhYmxlUm93IGFzIG5ldmVyLCBtb2RpZnlQcm9wc1RhYmxlUm93KG1ha2VQcm9wc1RhYmxlUm93KGluZm8pKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0UmVuZGVyVGFibGVDZWxsPENlbGxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4oeyB0YWdUYWJsZUNlbGwsIG1ha2VQcm9wc1RhYmxlQ2VsbCB9OiB7IHRhZ1RhYmxlQ2VsbDogRWxlbWVudFRvVGFnPENlbGxFbGVtZW50PiwgbWFrZVByb3BzVGFibGVDZWxsOiAoaW5mbzogVXNlVGFibGVDZWxsUmV0dXJuVHlwZUluZm88Q2VsbEVsZW1lbnQ+KSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxDZWxsRWxlbWVudD4gfSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpbmZvOiBVc2VUYWJsZUNlbGxSZXR1cm5UeXBlSW5mbzxDZWxsRWxlbWVudD4sIG1vZGlmeVByb3BzVGFibGVDZWxsOiBQcm9wTW9kaWZpZXI8Q2VsbEVsZW1lbnQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodGFnVGFibGVDZWxsIGFzIG5ldmVyLCBtb2RpZnlQcm9wc1RhYmxlQ2VsbChtYWtlUHJvcHNUYWJsZUNlbGwoaW5mbykpKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFRhYmxlID0gbWVtbyhmdW5jdGlvbiBUYWJsZVU8VGFibGVFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgU2VjdGlvbkVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBSb3dFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgQ2VsbGVtZW50IGV4dGVuZHMgRWxlbWVudD4oe1xyXG4gICAgY29sbGF0b3IsXHJcbiAgICBkaXNhYmxlQXJyb3dLZXlzLFxyXG4gICAgZGlzYWJsZUhvbWVFbmRLZXlzLFxyXG4gICAgaW5pdGlhbEluZGV4LFxyXG4gICAgbm9UeXBlYWhlYWQsXHJcbiAgICBvbkFmdGVyQ2hpbGRMYXlvdXRFZmZlY3QsXHJcbiAgICBvbkNoaWxkcmVuTW91bnRDaGFuZ2UsXHJcbiAgICBvblRhYmJhYmxlSW5kZXhDaGFuZ2UsXHJcbiAgICBvblRhYmJhYmxlUmVuZGVyLFxyXG4gICAgdHlwZWFoZWFkVGltZW91dCxcclxuICAgIHJlbmRlclxyXG59OiBUYWJsZVByb3BzPFRhYmxlRWxlbWVudCwgUm93RWxlbWVudCwgQ2VsbGVtZW50Pikge1xyXG4gICAgY29uc3QgeyB1c2VUYWJsZUJvZHksIHVzZVRhYmxlUHJvcHMsIHVzZVRhYmxlUm93LCAuLi50YWJsZUluZm8gfSA9IHVzZVRhYmxlPFRhYmxlRWxlbWVudCwgU2VjdGlvbkVsZW1lbnQsIFJvd0VsZW1lbnQsIENlbGxlbWVudD4oe1xyXG4gICAgICAgIGxpbmVhck5hdmlnYXRpb246IHsgZGlzYWJsZUFycm93S2V5cywgZGlzYWJsZUhvbWVFbmRLZXlzIH0sXHJcbiAgICAgICAgbGlzdE5hdmlnYXRpb246IHt9LFxyXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbjogeyBvbkFmdGVyQ2hpbGRMYXlvdXRFZmZlY3QsIG9uQ2hpbGRyZW5Nb3VudENoYW5nZSB9LFxyXG4gICAgICAgIHJvdmluZ1RhYkluZGV4OiB7IGluaXRpYWxJbmRleCwgb25UYWJiYWJsZUluZGV4Q2hhbmdlLCBvblRhYmJhYmxlUmVuZGVyIH0sXHJcbiAgICAgICAgdHlwZWFoZWFkTmF2aWdhdGlvbjogeyBjb2xsYXRvciwgbm9UeXBlYWhlYWQsIHR5cGVhaGVhZFRpbWVvdXQgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8VGFibGVCb2R5Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17dXNlVGFibGVCb2R5fT5cclxuICAgICAgICAgICAgPFRhYmxlUm93Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17dXNlVGFibGVSb3d9PlxyXG4gICAgICAgICAgICAgICAgeyhyZW5kZXIgPz8gZGVmYXVsdFJlbmRlclRhYmxlKSh0YWJsZUluZm8sIHVzZVRhYmxlUHJvcHMpfVxyXG4gICAgICAgICAgICA8L1RhYmxlUm93Q29udGV4dC5Qcm92aWRlcj5cclxuICAgICAgICA8L1RhYmxlQm9keUNvbnRleHQuUHJvdmlkZXI+XHJcbiAgICApXHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3QgVGFibGVCb2R5ID0gbWVtbyhmdW5jdGlvbiBUYWJsZUJvZHlVPFNlY3Rpb25FbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgUm93RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIENlbGxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KHsgcmVuZGVyIH06IFRhYmxlQm9keVByb3BzPFNlY3Rpb25FbGVtZW50LCBSb3dFbGVtZW50LCBDZWxsZW1lbnQ+KSB7XHJcbiAgICBjb25zdCB7IHVzZVRhYmxlQm9keVByb3BzLCAuLi5zZWN0aW9uSW5mbyB9ID0gdXNlQ29udGV4dChUYWJsZUJvZHlDb250ZXh0KSh7fSk7XHJcbiAgICByZXR1cm4gPExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciB2YWx1ZT1cImJvZHlcIj57cmVuZGVyKHNlY3Rpb25JbmZvLCB1c2VUYWJsZUJvZHlQcm9wcyl9PC9Mb2NhdGlvbkNvbnRleHQuUHJvdmlkZXI+XHJcbn0pXHJcblxyXG5leHBvcnQgY29uc3QgVGFibGVIZWFkID0gbWVtbyhmdW5jdGlvbiBUYWJsZUhlYWRVKHsgcmVuZGVyIH06IFRhYmxlSGVhZFByb3BzKSB7XHJcbiAgICByZXR1cm4gPExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciB2YWx1ZT1cImhlYWRcIj57KHJlbmRlcigpKX08L0xvY2F0aW9uQ29udGV4dC5Qcm92aWRlcj5cclxufSlcclxuXHJcbmV4cG9ydCBjb25zdCBUYWJsZUZvb3QgPSBtZW1vKGZ1bmN0aW9uIFRhYmxlRm9vdFUoeyByZW5kZXIgfTogVGFibGVGb290UHJvcHMpIHtcclxuICAgIHJldHVybiA8TG9jYXRpb25Db250ZXh0LlByb3ZpZGVyIHZhbHVlPVwiZm9vdFwiPnsocmVuZGVyKCkpfTwvTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyPlxyXG59KVxyXG5cclxuZXhwb3J0IGNvbnN0IFRhYmxlUm93ID0gbWVtbyhmdW5jdGlvbiBUYWJsZVJvd1U8Um93RWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIENlbGxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KHtcclxuICAgIGluZGV4LFxyXG4gICAgdGV4dCxcclxuICAgIGNvbGxhdG9yLFxyXG4gICAgZGlzYWJsZUFycm93S2V5cyxcclxuICAgIGRpc2FibGVIb21lRW5kS2V5cyxcclxuICAgIGZsYWdzLFxyXG4gICAgZm9jdXNTZWxmLFxyXG4gICAgaGlkZGVuLFxyXG4gICAgaW5kZXhEZW1hbmdsZXIsXHJcbiAgICBpbmRleE1hbmdsZXIsXHJcbiAgICBpbml0aWFsSW5kZXgsXHJcbiAgICBub1R5cGVhaGVhZCxcclxuICAgIG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdCxcclxuICAgIG9uQ2hpbGRyZW5Nb3VudENoYW5nZSxcclxuICAgIG9uVGFiYmFibGVJbmRleENoYW5nZSxcclxuICAgIG9uVGFiYmFibGVSZW5kZXIsXHJcbiAgICB0eXBlYWhlYWRUaW1lb3V0LFxyXG4gICAgcmVuZGVyXHJcbn06IFRhYmxlUm93UHJvcHM8Um93RWxlbWVudCwgQ2VsbGVtZW50PiwgcmVmOiBSZWY8Um93RWxlbWVudD4pIHtcclxuICAgIGNvbnN0IHsgdXNlVGFibGVDZWxsLCB1c2VUYWJsZVJvd1Byb3BzLCAuLi5yb3dJbmZvIH0gPSB1c2VDb250ZXh0KFRhYmxlUm93Q29udGV4dCkoe1xyXG4gICAgICAgIGFzQ2hpbGRSb3dPZlNlY3Rpb246IHtcclxuICAgICAgICAgICAgbGlzdE5hdmlnYXRpb246IHsgdGV4dCB9LFxyXG4gICAgICAgICAgICBtYW5hZ2VkQ2hpbGQ6IHsgaW5kZXgsIGZsYWdzIH0sXHJcbiAgICAgICAgICAgIHJvdmluZ1RhYkluZGV4OiB7IGZvY3VzU2VsZiwgaGlkZGVuIH0sXHJcbiAgICAgICAgICAgIHN1YkluZm86IHt9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhc1BhcmVudFJvd09mQ2VsbHM6IHtcclxuICAgICAgICAgICAgbGluZWFyTmF2aWdhdGlvbjogeyBkaXNhYmxlQXJyb3dLZXlzLCBkaXNhYmxlSG9tZUVuZEtleXMgfSxcclxuICAgICAgICAgICAgbGlzdE5hdmlnYXRpb246IHsgaW5kZXhEZW1hbmdsZXIsIGluZGV4TWFuZ2xlciB9LFxyXG4gICAgICAgICAgICBtYW5hZ2VkQ2hpbGRyZW46IHsgb25BZnRlckNoaWxkTGF5b3V0RWZmZWN0LCBvbkNoaWxkcmVuTW91bnRDaGFuZ2UgfSxcclxuICAgICAgICAgICAgcm92aW5nVGFiSW5kZXg6IHsgaW5pdGlhbEluZGV4LCBvblRhYmJhYmxlSW5kZXhDaGFuZ2UsIG9uVGFiYmFibGVSZW5kZXIgfSxcclxuICAgICAgICAgICAgdHlwZWFoZWFkTmF2aWdhdGlvbjogeyBjb2xsYXRvciwgbm9UeXBlYWhlYWQsIHR5cGVhaGVhZFRpbWVvdXQgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGFibGVSb3c6IHsgbG9jYXRpb246IHVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KSB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiA8VGFibGVDZWxsQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17dXNlVGFibGVDZWxsfT57KHJlbmRlciA/PyBkZWZhdWx0UmVuZGVyVGFibGVSb3cpKHJvd0luZm8sIHVzZVRhYmxlUm93UHJvcHMoeyByZWYgfSkpfTwvVGFibGVDZWxsQ29udGV4dC5Qcm92aWRlcj5cclxufSlcclxuXHJcbmV4cG9ydCBjb25zdCBUYWJsZUNlbGwgPSBtZW1vKGZ1bmN0aW9uIFRhYmxlQ2VsbDxDZWxsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KHsgaW5kZXgsIHRleHQsIGZsYWdzLCBmb2N1c1NlbGYsIGhpZGRlbiwgdmFsdWUsIGdldERvY3VtZW50LCBnZXRXaW5kb3csIG9uQWN0aXZlRWxlbWVudENoYW5nZSwgb25FbGVtZW50Q2hhbmdlLCBvbkZvY3VzZWRDaGFuZ2VkLCBvbkZvY3VzZWRJbm5lckNoYW5nZWQsIG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uTGFzdEZvY3VzZWRDaGFuZ2VkLCBvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkLCBvbk1vdW50LCBvblVubW91bnQsIG9uV2luZG93Rm9jdXNlZENoYW5nZSwgcmVuZGVyIH06IFRhYmxlQ2VsbFByb3BzPENlbGxFbGVtZW50PiwgcmVmOiBSZWY8Q2VsbEVsZW1lbnQ+KSB7XHJcbiAgICBjb25zdCB7IHVzZVRhYmxlQ2VsbFByb3BzLCAuLi5jZWxsSW5mbyB9ID0gdXNlQ29udGV4dChUYWJsZUNlbGxDb250ZXh0KSh7XHJcbiAgICAgICAgbGlzdE5hdmlnYXRpb246IHsgdGV4dCB9LFxyXG4gICAgICAgIG1hbmFnZWRDaGlsZDogeyBpbmRleCwgZmxhZ3MgfSxcclxuICAgICAgICByb3ZpbmdUYWJJbmRleDogeyBmb2N1c1NlbGYsIGhpZGRlbiB9LFxyXG4gICAgICAgIGhhc0ZvY3VzOiB7IGdldERvY3VtZW50LCBnZXRXaW5kb3csIG9uQWN0aXZlRWxlbWVudENoYW5nZSwgb25FbGVtZW50Q2hhbmdlLCBvbkZvY3VzZWRDaGFuZ2VkLCBvbkZvY3VzZWRJbm5lckNoYW5nZWQsIG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uTGFzdEZvY3VzZWRDaGFuZ2VkLCBvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkLCBvbk1vdW50LCBvblVubW91bnQsIG9uV2luZG93Rm9jdXNlZENoYW5nZSB9LFxyXG4gICAgICAgIHN1YkluZm86IHtcclxuICAgICAgICAgICAgbG9jYXRpb246IHVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KSxcclxuICAgICAgICAgICAgdmFsdWVcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gKHJlbmRlciA/PyBkZWZhdWx0UmVuZGVyVGFibGVDZWxsKShjZWxsSW5mbywgdXNlVGFibGVDZWxsUHJvcHMoeyByZWYgfSkpO1xyXG59KVxyXG5cclxuIiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgY3JlYXRlRWxlbWVudCwgaCwgVk5vZGUgfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IFVzZUhhc0ZvY3VzUGFyYW1ldGVycyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tIFwicHJlYWN0L2NvbXBhdFwiO1xyXG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyBFbGVtZW50VG9UYWcsIFByb3BNb2RpZmllciB9IGZyb20gXCJwcm9wc1wiO1xyXG5pbXBvcnQgeyBVc2VUYWIsIFVzZVRhYkxpc3RQYXJhbWV0ZXJzLCBVc2VUYWJMaXN0UmV0dXJuVHlwZUluZm8sIFVzZVRhYlBhbmVsLCBVc2VUYWJQYW5lbFBhcmFtZXRlcnMsIFVzZVRhYlBhbmVsUmV0dXJuVHlwZUluZm8sIFVzZVRhYlBhcmFtZXRlcnMsIFVzZVRhYlJldHVyblR5cGVJbmZvLCB1c2VUYWJzLCBVc2VUYWJzUGFyYW1ldGVycywgVXNlVGFic1JldHVyblR5cGVJbmZvIH0gZnJvbSBcIi4uL3VzZS10YWJzXCI7XHJcblxyXG50eXBlIEdldDxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSBUW0tdO1xyXG50eXBlIEdldDI8VCwgSyBleHRlbmRzIGtleW9mIFQsIEsyIGV4dGVuZHMga2V5b2YgVFtLXT4gPSBUW0tdW0syXTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGFic1Byb3BzPExhYmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQsIExpc3RFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgVGFiRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHNcclxuICAgIEdldDxVc2VUYWJMaXN0UGFyYW1ldGVyczxUYWJFbGVtZW50PiwgXCJsaW5lYXJOYXZpZ2F0aW9uXCI+LFxyXG4gICAgR2V0PFVzZVRhYkxpc3RQYXJhbWV0ZXJzPFRhYkVsZW1lbnQ+LCBcImxpc3ROYXZpZ2F0aW9uXCI+LFxyXG4gICAgR2V0PFVzZVRhYkxpc3RQYXJhbWV0ZXJzPFRhYkVsZW1lbnQ+LCBcIm1hbmFnZWRDaGlsZHJlblwiPixcclxuICAgIEdldDxVc2VUYWJMaXN0UGFyYW1ldGVyczxUYWJFbGVtZW50PiwgXCJyb3ZpbmdUYWJJbmRleFwiPixcclxuICAgIEdldDxVc2VUYWJMaXN0UGFyYW1ldGVyczxUYWJFbGVtZW50PiwgXCJzaW5nbGVTZWxlY3Rpb25cIj4sXHJcbiAgICBHZXQ8VXNlVGFiTGlzdFBhcmFtZXRlcnM8VGFiRWxlbWVudD4sIFwidHlwZWFoZWFkTmF2aWdhdGlvblwiPixcclxuICAgIEdldDxVc2VUYWJMaXN0UGFyYW1ldGVyczxUYWJFbGVtZW50PiwgXCJjaGlsZHJlbkhhdmVGb2N1c1wiPixcclxuICAgIEdldDxVc2VUYWJMaXN0UGFyYW1ldGVyczxUYWJFbGVtZW50PiwgXCJ0YWJzXCI+LFxyXG4gICAgR2V0MjxVc2VUYWJzUGFyYW1ldGVycywgXCJ0YWJQYW5lbHNcIiwgXCJtYW5hZ2VkQ2hpbGRyZW5cIj4ge1xyXG4gICAgcmVuZGVyKHRhYnNJbmZvOiBVc2VUYWJzUmV0dXJuVHlwZUluZm8gJiBVc2VUYWJMaXN0UmV0dXJuVHlwZUluZm88VGFiRWxlbWVudD4sIG1vZGlmeUxhYmVsUHJvcHM6IFByb3BNb2RpZmllcjxMYWJlbEVsZW1lbnQ+LCBtb2RpZnlUYWJMaXN0UHJvcHM6IFByb3BNb2RpZmllcjxMaXN0RWxlbWVudD4pOiBWTm9kZTxhbnk+O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRhYlByb3BzPFRhYkVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50PiBleHRlbmRzIEdldDxVc2VUYWJQYXJhbWV0ZXJzPFRhYkVsZW1lbnQ+LCBcImxpc3ROYXZpZ2F0aW9uXCI+LFxyXG4gICAgR2V0PFVzZVRhYlBhcmFtZXRlcnM8VGFiRWxlbWVudD4sIFwibWFuYWdlZENoaWxkXCI+LFxyXG4gICAgVXNlSGFzRm9jdXNQYXJhbWV0ZXJzPFRhYkVsZW1lbnQ+LFxyXG4gICAgR2V0PFVzZVRhYlBhcmFtZXRlcnM8VGFiRWxlbWVudD4sIFwicm92aW5nVGFiSW5kZXhcIj4ge1xyXG4gICAgLy8gdGFnTGlzdEl0ZW06IEVsZW1lbnRUb1RhZzxMaXN0Ym94SXRlbUVsZW1lbnQ+O1xyXG4gICAgLy8gcHJvcHNMaXN0SXRlbTogKGFyZ3M6IExpc3Rib3hTaW5nbGVQcm9wc0Rlcml2ZWRGcm9tKSA9PiBoLkpTWC5IVE1MQXR0cmlidXRlczxMaXN0Ym94SXRlbUVsZW1lbnQ+O1xyXG4gICAgcmVuZGVyKGluZm86IFVzZVRhYlJldHVyblR5cGVJbmZvPFRhYkVsZW1lbnQ+LCBtb2RpZnlMaXN0SXRlbTogUHJvcE1vZGlmaWVyPFRhYkVsZW1lbnQ+KTogVk5vZGU8YW55PjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUYWJQYW5lbFByb3BzPFRhYlBhbmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgR2V0PFVzZVRhYlBhbmVsUGFyYW1ldGVycywgXCJtYW5hZ2VkQ2hpbGRcIj4ge1xyXG4gICAgcmVuZGVyKGluZm86IFVzZVRhYlBhbmVsUmV0dXJuVHlwZUluZm8sIG1vZGlmeVRhYlBhbmVsUHJvcHM6IFByb3BNb2RpZmllcjxUYWJQYW5lbEVsZW1lbnQ+KTogVk5vZGU7XHJcbn1cclxuXHJcbmNvbnN0IFRhYkNvbnRleHQgPSBjcmVhdGVDb250ZXh0PFVzZVRhYjxhbnk+PihudWxsISk7XHJcbmNvbnN0IFRhYlBhbmVsQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8VXNlVGFiUGFuZWw8YW55Pj4obnVsbCEpO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRhYnMgPSBtZW1vKGZ1bmN0aW9uIFRhYnM8TGFiZWxFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgTGlzdEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBUYWJFbGVtZW50IGV4dGVuZHMgRWxlbWVudCwgVGFiUGFuZWxFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4oe1xyXG4gICAgc2VsZWN0ZWRJbmRleCxcclxuICAgIHNlbGVjdGlvbk1vZGUsXHJcbiAgICBjb2xsYXRvcixcclxuICAgIGRpc2FibGVBcnJvd0tleXMsXHJcbiAgICBkaXNhYmxlSG9tZUVuZEtleXMsXHJcbiAgICBpbmRleERlbWFuZ2xlcixcclxuICAgIGluZGV4TWFuZ2xlcixcclxuICAgIG5hdmlnYXRpb25EaXJlY3Rpb24sXHJcbiAgICBub1R5cGVhaGVhZCxcclxuICAgIG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdCxcclxuICAgIG9uQ2hpbGRyZW5Nb3VudENoYW5nZSxcclxuICAgIG9uVGFiYmFibGVJbmRleENoYW5nZSxcclxuICAgIG9uVGFiYmFibGVSZW5kZXIsXHJcbiAgICB0eXBlYWhlYWRUaW1lb3V0LFxyXG4gICAgb25BbGxMb3N0Rm9jdXMsXHJcbiAgICBvbkFueUdhaW5lZEZvY3VzLFxyXG4gICAgb25TZWxlY3RlZEluZGV4Q2hhbmdlLFxyXG4gICAgcmVuZGVyXHJcbn06IFRhYnNQcm9wczxMYWJlbEVsZW1lbnQsIExpc3RFbGVtZW50LCBUYWJFbGVtZW50Pikge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICAgIHVzZVRhYkxpc3QsXHJcbiAgICAgICAgdXNlVGFiTGlzdExhYmVsLFxyXG4gICAgICAgIHVzZVRhYlBhbmVsLFxyXG4gICAgICAgIC4uLnRhYnNJbmZvXHJcbiAgICB9ID0gdXNlVGFiczxMaXN0RWxlbWVudCwgVGFiRWxlbWVudCwgVGFiUGFuZWxFbGVtZW50LCBMYWJlbEVsZW1lbnQ+KHtcclxuICAgICAgICB0YWJQYW5lbHM6IHtcclxuICAgICAgICAgICAgbWFuYWdlZENoaWxkcmVuOiB7IG9uQWZ0ZXJDaGlsZExheW91dEVmZmVjdCwgb25DaGlsZHJlbk1vdW50Q2hhbmdlIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB7IHVzZVRhYiwgdXNlVGFiTGlzdFByb3BzLCAuLi50YWJsaXN0SW5mbyB9ID0gdXNlVGFiTGlzdCh7XHJcbiAgICAgICAgY2hpbGRyZW5IYXZlRm9jdXM6IHsgb25BbGxMb3N0Rm9jdXMsIG9uQW55R2FpbmVkRm9jdXMgfSxcclxuICAgICAgICB0YWJzOiB7IG9uU2VsZWN0ZWRJbmRleENoYW5nZSB9LFxyXG4gICAgICAgIGxpbmVhck5hdmlnYXRpb246IHsgZGlzYWJsZUFycm93S2V5cywgZGlzYWJsZUhvbWVFbmRLZXlzLCBuYXZpZ2F0aW9uRGlyZWN0aW9uIH0sXHJcbiAgICAgICAgbGlzdE5hdmlnYXRpb246IHsgaW5kZXhEZW1hbmdsZXIsIGluZGV4TWFuZ2xlciB9LFxyXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbjogeyBvbkFmdGVyQ2hpbGRMYXlvdXRFZmZlY3QsIG9uQ2hpbGRyZW5Nb3VudENoYW5nZSB9LFxyXG4gICAgICAgIHJvdmluZ1RhYkluZGV4OiB7IG9uVGFiYmFibGVJbmRleENoYW5nZSwgb25UYWJiYWJsZVJlbmRlciB9LFxyXG4gICAgICAgIHNpbmdsZVNlbGVjdGlvbjogeyBzZWxlY3RlZEluZGV4LCBzZWxlY3Rpb25Nb2RlIH0sXHJcbiAgICAgICAgdHlwZWFoZWFkTmF2aWdhdGlvbjogeyBjb2xsYXRvciwgbm9UeXBlYWhlYWQsIHR5cGVhaGVhZFRpbWVvdXQgfVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCB7IHVzZVRhYkxpc3RMYWJlbFByb3BzIH0gPSB1c2VUYWJMaXN0TGFiZWwoe30pO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFRhYkNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3VzZVRhYn0+XHJcbiAgICAgICAgICAgIDxUYWJQYW5lbENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3VzZVRhYlBhbmVsfT5cclxuICAgICAgICAgICAgICAgIHtyZW5kZXIoeyAuLi50YWJzSW5mbywgLi4udGFibGlzdEluZm8gfSwgdXNlVGFiTGlzdExhYmVsUHJvcHMsIHVzZVRhYkxpc3RQcm9wcyl9XHJcbiAgICAgICAgICAgIDwvVGFiUGFuZWxDb250ZXh0LlByb3ZpZGVyPlxyXG4gICAgICAgIDwvVGFiQ29udGV4dC5Qcm92aWRlcj5cclxuICAgIClcclxufSlcclxuXHJcbmV4cG9ydCBjb25zdCBUYWIgPSBtZW1vKGZ1bmN0aW9uIFRhYjxUYWJFbGVtZW50IGV4dGVuZHMgRWxlbWVudD4oeyBpbmRleCwgdGV4dCwgZmxhZ3MsIGZvY3VzU2VsZiwgaGlkZGVuLCBnZXREb2N1bWVudCwgZ2V0V2luZG93LCBvbkFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uRWxlbWVudENoYW5nZSwgb25Gb2N1c2VkQ2hhbmdlZCwgb25Gb2N1c2VkSW5uZXJDaGFuZ2VkLCBvbkxhc3RBY3RpdmVFbGVtZW50Q2hhbmdlLCBvbkxhc3RGb2N1c2VkQ2hhbmdlZCwgb25MYXN0Rm9jdXNlZElubmVyQ2hhbmdlZCwgb25Nb3VudCwgb25Vbm1vdW50LCBvbldpbmRvd0ZvY3VzZWRDaGFuZ2UsIHJlbmRlciB9OiBUYWJQcm9wczxUYWJFbGVtZW50Pikge1xyXG4gICAgY29uc3QgeyB1c2VUYWJQcm9wcywgLi4udGFiSW5mbyB9ID0gdXNlQ29udGV4dChUYWJDb250ZXh0KSh7XHJcbiAgICAgICAgbGlzdE5hdmlnYXRpb246IHsgdGV4dCB9LFxyXG4gICAgICAgIG1hbmFnZWRDaGlsZDogeyBpbmRleCwgZmxhZ3MgfSxcclxuICAgICAgICByb3ZpbmdUYWJJbmRleDogeyBmb2N1c1NlbGYsIGhpZGRlbiB9LFxyXG4gICAgICAgIGhhc0ZvY3VzOiB7IGdldERvY3VtZW50LCBnZXRXaW5kb3csIG9uQWN0aXZlRWxlbWVudENoYW5nZSwgb25FbGVtZW50Q2hhbmdlLCBvbkZvY3VzZWRDaGFuZ2VkLCBvbkZvY3VzZWRJbm5lckNoYW5nZWQsIG9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UsIG9uTGFzdEZvY3VzZWRDaGFuZ2VkLCBvbkxhc3RGb2N1c2VkSW5uZXJDaGFuZ2VkLCBvbk1vdW50LCBvblVubW91bnQsIG9uV2luZG93Rm9jdXNlZENoYW5nZSB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVuZGVyKHRhYkluZm8sIHVzZVRhYlByb3BzKVxyXG59KVxyXG5cclxuZXhwb3J0IGNvbnN0IFRhYlBhbmVsID0gbWVtbyhmdW5jdGlvbiBUYWJQYW5lbDxUYWJQYW5lbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50Pih7IGluZGV4LCBmbGFncywgcmVuZGVyIH06IFRhYlBhbmVsUHJvcHM8VGFiUGFuZWxFbGVtZW50Pikge1xyXG4gICAgY29uc3QgeyB1c2VUYWJQYW5lbFByb3BzLCAuLi50YWJQYW5lbEluZm8gfSA9IHVzZUNvbnRleHQoVGFiUGFuZWxDb250ZXh0KSh7IG1hbmFnZWRDaGlsZDogeyBpbmRleCwgZmxhZ3MgfSB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVuZGVyKHRhYlBhbmVsSW5mbywgdXNlVGFiUGFuZWxQcm9wcylcclxufSlcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0UmVuZGVyVGFiczxMYWJlbEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50LCBMaXN0RWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KHsgdGFnTGFiZWwsIHRhZ0xpc3QsIG1ha2VQcm9wc0xhYmVsLCBtYWtlUHJvcHNMaXN0LCBwYW5lbHMgfTogeyBwYW5lbHM6IFZOb2RlW10sIHRhZ0xhYmVsOiBFbGVtZW50VG9UYWc8TGFiZWxFbGVtZW50PiwgdGFnTGlzdDogRWxlbWVudFRvVGFnPExpc3RFbGVtZW50PiwgbWFrZVByb3BzTGFiZWw6IChpbmZvOiBVc2VUYWJzUmV0dXJuVHlwZUluZm8pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExhYmVsRWxlbWVudD4sIG1ha2VQcm9wc0xpc3Q6IChpbmZvOiBVc2VUYWJzUmV0dXJuVHlwZUluZm8pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPExpc3RFbGVtZW50PiB9KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhYnNJbmZvOiBVc2VUYWJzUmV0dXJuVHlwZUluZm8gJiBVc2VUYWJMaXN0UmV0dXJuVHlwZUluZm88YW55PiwgbW9kaWZ5TGFiZWxQcm9wczogUHJvcE1vZGlmaWVyPExhYmVsRWxlbWVudD4sIG1vZGlmeUxpc3RQcm9wczogUHJvcE1vZGlmaWVyPExpc3RFbGVtZW50Pikge1xyXG4gICAgICAgIGNvbnN0IGxhYmVsID0gY3JlYXRlRWxlbWVudCh0YWdMYWJlbCBhcyBuZXZlciwgbW9kaWZ5TGFiZWxQcm9wcyhtYWtlUHJvcHNMYWJlbCh0YWJzSW5mbykpKVxyXG4gICAgICAgIGNvbnN0IGxpc3QgPSBjcmVhdGVFbGVtZW50KHRhZ0xpc3QgYXMgbmV2ZXIsIG1vZGlmeUxpc3RQcm9wcyhtYWtlUHJvcHNMaXN0KHRhYnNJbmZvKSkpO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICB7bGFiZWx9XHJcbiAgICAgICAgICAgICAgICB7bGlzdH1cclxuICAgICAgICAgICAgICAgIHtwYW5lbHN9XHJcbiAgICAgICAgICAgIDwvPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRSZW5kZXJUYWI8VGFiRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KHsgbWFrZVByb3BzVGFiLCB0YWdUYWIgfTogeyB0YWdUYWI6IEVsZW1lbnRUb1RhZzxUYWJFbGVtZW50PiwgbWFrZVByb3BzVGFiOiAoaW5mbzogVXNlVGFiUmV0dXJuVHlwZUluZm88VGFiRWxlbWVudD4pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFRhYkVsZW1lbnQ+IH0pIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFiSW5mbzogVXNlVGFiUmV0dXJuVHlwZUluZm88VGFiRWxlbWVudD4sIG1vZGlmeVRhYlByb3BzOiBQcm9wTW9kaWZpZXI8VGFiRWxlbWVudD4pIHtcclxuICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCh0YWdUYWIgYXMgbmV2ZXIsIG1vZGlmeVRhYlByb3BzKG1ha2VQcm9wc1RhYih0YWJJbmZvKSkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFJlbmRlclRhYlBhbmVsPFRhYlBhbmVsRWxlbWVudCBleHRlbmRzIEVsZW1lbnQ+KHsgbWFrZVByb3BzVGFiUGFuZWwsIHRhZ1RhYlBhbmVsIH06IHsgdGFnVGFiUGFuZWw6IEVsZW1lbnRUb1RhZzxUYWJQYW5lbEVsZW1lbnQ+LCBtYWtlUHJvcHNUYWJQYW5lbDogKGluZm86IFVzZVRhYlBhbmVsUmV0dXJuVHlwZUluZm8pID0+IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFRhYlBhbmVsRWxlbWVudD4gfSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YWJQYW5lbEluZm86IFVzZVRhYlBhbmVsUmV0dXJuVHlwZUluZm8sIG1vZGlmeVRhYlBhbmVsUHJvcHM6IFByb3BNb2RpZmllcjxUYWJQYW5lbEVsZW1lbnQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodGFnVGFiUGFuZWwgYXMgbmV2ZXIsIG1vZGlmeVRhYlBhbmVsUHJvcHMobWFrZVByb3BzVGFiUGFuZWwodGFiUGFuZWxJbmZvKSkpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGgsIFZOb2RlIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyBVc2VBY3RpdmVFbGVtZW50UGFyYW1ldGVycyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tIFwicHJlYWN0L2NvbXBhdFwiO1xyXG5pbXBvcnQgeyB1c2VUb29sdGlwLCBVc2VUb29sdGlwUGFyYW1ldGVycywgVXNlVG9vbHRpcFJldHVyblR5cGVJbmZvIH0gZnJvbSBcIi4uL3VzZS10b29sdGlwXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRvb2x0aXBQcm9wczxUVCBleHRlbmRzIEVsZW1lbnQsIFRUVCBleHRlbmRzIEVsZW1lbnQ+IGV4dGVuZHMgVXNlVG9vbHRpcFBhcmFtZXRlcnMge1xyXG4gICAgZ2V0RG9jdW1lbnQ6IFVzZUFjdGl2ZUVsZW1lbnRQYXJhbWV0ZXJzW1wiZ2V0RG9jdW1lbnRcIl07XHJcbiAgICBnZXRXaW5kb3c/OiBVc2VBY3RpdmVFbGVtZW50UGFyYW1ldGVyc1tcImdldFdpbmRvd1wiXTtcclxuICAgIHJlbmRlcj86IChpbmZvOiBVc2VUb29sdGlwUmV0dXJuVHlwZUluZm8sIHRyaWdnZXJQcm9wczogaC5KU1guSFRNTEF0dHJpYnV0ZXM8VFQ+LCB0b29sdGlwUHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPFRUVD4pID0+IFZOb2RlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZWZhdWx0UmVuZGVyKGluZm86IFVzZVRvb2x0aXBSZXR1cm5UeXBlSW5mbywgdHJpZ2dlclByb3BzOiBoLkpTWC5IVE1MQXR0cmlidXRlczxhbnk+LCB0b29sdGlwUHJvcHM6IGguSlNYLkhUTUxBdHRyaWJ1dGVzPGFueT4pIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPGRpdiB7Li4udHJpZ2dlclByb3BzfSAvPlxyXG4gICAgICAgICAgICA8ZGl2IHsuLi50b29sdGlwUHJvcHN9IC8+XHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBUb29sdGlwID0gbWVtbyhmdW5jdGlvbiBUb29sdGlwVTxUVCBleHRlbmRzIEVsZW1lbnQsIFRUVCBleHRlbmRzIEVsZW1lbnQ+KHsgZm9jdXNEZWxheSwgbW91c2VvdXREZWxheSwgbW91c2VvdmVyRGVsYXksIGdldERvY3VtZW50LCBnZXRXaW5kb3csIHJlbmRlciB9OiBUb29sdGlwUHJvcHM8VFQsIFRUVD4pIHtcclxuICAgIGNvbnN0IHsgdXNlVG9vbHRpcFBvcHVwLCB1c2VUb29sdGlwVHJpZ2dlciwgLi4uaW5mbyB9ID0gdXNlVG9vbHRpcDxUVCwgVFRUPih7IGZvY3VzRGVsYXksIG1vdXNlb3V0RGVsYXksIG1vdXNlb3ZlckRlbGF5IH0pO1xyXG4gICAgY29uc3QgeyB1c2VUb29sdGlwVHJpZ2dlclByb3BzIH0gPSB1c2VUb29sdGlwVHJpZ2dlcih7IGhhc0ZvY3VzOiB7IGdldERvY3VtZW50LCBnZXRXaW5kb3cgfSB9KTtcclxuICAgIGNvbnN0IHsgdXNlVG9vbHRpcFBvcHVwUHJvcHMgfSA9IHVzZVRvb2x0aXBQb3B1cCh7IGhhc0ZvY3VzOiB7IGdldERvY3VtZW50LCBnZXRXaW5kb3cgfSB9KTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgeyhyZW5kZXIgPz8gZGVmYXVsdFJlbmRlcikoaW5mbywgdXNlVG9vbHRpcFRyaWdnZXJQcm9wcyh7fSksIHVzZVRvb2x0aXBQb3B1cFByb3BzKHt9KSBhcyBhbnkpfVxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59KVxyXG5cclxuIiwiXHJcbmltcG9ydCB7IENvbXBvbmVudENoaWxkcmVuLCBoLCBSZW5kZXJhYmxlUHJvcHMgfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tIFwicHJlYWN0L2NvbXBhdFwiO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgQWNjb3JkaW9uLCBBY2NvcmRpb25TZWN0aW9uLCBkZWZhdWx0UmVuZGVyQWNjb3JkaW9uU2VjdGlvbiB9IGZyb20gXCIuLi8uLi9pbmRleFwiO1xyXG5cclxuZnVuY3Rpb24gRGVtb0FjY29yZGlvbih7IGNoaWxkcmVuLCAuLi5wcm9wcyB9OiBSZW5kZXJhYmxlUHJvcHM8e30+KSB7XHJcbiAgICByZXR1cm4gPEFjY29yZGlvbiB7Li4ucHJvcHN9IHJlbmRlcj17KF9pbmZvKSA9PiB7IHJldHVybiA8ZGl2IGlkPVwiYWNjb3JkaW9uLWRlbW9cIj57Y2hpbGRyZW59PC9kaXY+IH19IC8+XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xyXG4gICAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudDtcclxufVxyXG5cclxuY29uc3QgRGVtb0FjY29yZGlvblNlY3Rpb24gPSBtZW1vKGZ1bmN0aW9uIERlbW9BY2NvcmRpb25TZWN0aW9uKHsgaW5kZXgsIGJvZHksIGhlYWRpbmcsIGRpc2FibGVkLCBvcGVuIH06IHsgb3Blbj86IGJvb2xlYW4sIGRpc2FibGVkOiBib29sZWFuLCBpbmRleDogbnVtYmVyLCBoZWFkaW5nOiBDb21wb25lbnRDaGlsZHJlbiwgYm9keTogQ29tcG9uZW50Q2hpbGRyZW4gfSkge1xyXG4gICAgcmV0dXJuIDxBY2NvcmRpb25TZWN0aW9uPEhUTUxCdXR0b25FbGVtZW50LCBIVE1MRGl2RWxlbWVudD4gaW5kZXg9e2luZGV4fSB0YWdCdXR0b249XCJidXR0b25cIiBvcGVuPXtvcGVufSBkaXNhYmxlZD17ZGlzYWJsZWR9IGdldERvY3VtZW50PXtnZXREb2N1bWVudH0gcmVuZGVyPXtkZWZhdWx0UmVuZGVyQWNjb3JkaW9uU2VjdGlvbih7XHJcbiAgICAgICAgbWFrZVByb3BzQm9keTogKGluZm8pID0+IHsgcmV0dXJuIHsgaGlkZGVuOiAhaW5mby5hY2NvcmRpb25TZWN0aW9uLmV4cGFuZGVkLCBjaGlsZHJlbjogYm9keSB9IH0sXHJcbiAgICAgICAgbWFrZVByb3BzSGVhZGluZzogKCkgPT4geyByZXR1cm4geyBjaGlsZHJlbjogaGVhZGluZyB9IH0sXHJcbiAgICAgICAgdGFnQm9keTogXCJkaXZcIixcclxuICAgICAgICB0YWdIZWFkaW5nOiBcImJ1dHRvblwiXHJcbiAgICB9KX0gLz5cclxufSlcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBCbHVyYigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPHA+PGEgaHJlZj1cImh0dHBzOi8vd3d3LnczLm9yZy9XQUkvQVJJQS9hcGcvcGF0dGVybnMvYWNjb3JkaW9uL1wiPkluIGFjY29yZGFuY2Ugd2l0aCB0aGUgQVJJQSBndWlkZWxpbmVzIGZvciBBY2NvcmRpb24gcGF0dGVybnMsPC9hPiB0aGlzIHdpZGdldCBzdXBwb3J0cyB0aGUgZm9sbG93aW5nOjwvcD5cclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgPGxpPkVhY2ggc2VjdGlvbidzIGhlYWRlciBhbmQgYm9keSBhcmUgbGlua2VkIHZpYSBJRDsgdGhlIGJvZHkgaXMgPGNvZGU+bGFiZWxsZWQtYnk8L2NvZGU+IHRoZSBoZWFkZXIgYW5kIHRoZSBoZWFkZXIgPGNvZGU+Y29udHJvbDwvY29kZT5zIHRoZSBib2R5LjwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGk+VGhlIGhlYWRlciBpcyBhIGJ1dHRvbiBhbmQgcmVzcG9uZHMgdG8ga2V5Ym9hcmQsIG1vdXNlLCB0b3VjaCwgZXRjLiBldmVudHMsIHJlZ2FyZGxlc3Mgb2YgdGhlIGVsZW1lbnQgdXNlZC48L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPklmIHRoZSBoZWFkZXIgZWxlbWVudCBpcyBub3QgYSA8Y29kZT4mbHQ7YnV0dG9uJmd0OzwvY29kZT4gZWxlbWVudCwgaXQgaXMgZ2l2ZW4gdGhhdCA8Y29kZT5yb2xlPC9jb2RlPi48L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPlVwL2Rvd24gJmFtcDsgSG9tZS9FbmQga2V5cyBuYXZpZ2F0ZSB0aHJvdWdoIHRoZSBsaXN0LCBhcyBkb2VzIFRhYiBhbmQgU2hpZnQrVGFiPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaT48L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8cD48c3Ryb25nPlRoaW5ncyA8ZW0+bm90PC9lbT4gaGFuZGxlZDo8L3N0cm9uZz48L3A+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgIDxsaT5UaGUgPGNvZGU+cmVuZGVyPC9jb2RlPiBwcm9wIGVhY2ggPGNvZGU+QWNjb3JkaW9uU2VjdGlvbjwvY29kZT4gdGFrZXMgbXVzdCB3cmFwIHRoZSBoZWFkZXIgYnV0dG9uIHdpdGggYSA8YSBocmVmPVwiaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2FyaWEvI2hlYWRpbmdcIj5oZWFkaW5nPC9hPiAoZS5nLiA8Y29kZT5oMzwvY29kZT4sIG9yIDxjb2RlPiZsdDtIZWFkaW5nJmd0OzwvY29kZT4pLiBTZWUgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZm9yIGFuIGV4YW1wbGUuPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIENvZGUoKSB7XHJcbiAgICByZXR1cm4gKDxjb2RlPntgPEFjY29yZGlvbiByZW5kZXI9ey4uLn0+XHJcbiAgICA8QWNjb3JkaW9uU2VjdGlvbiBpbmRleD17MH0gcmVuZGVyPXsuLi59IC8+XHJcbiAgICA8QWNjb3JkaW9uU2VjdGlvbiBpbmRleD17MX0gcmVuZGVyPXsuLi59IC8+XHJcbiAgICA8QWNjb3JkaW9uU2VjdGlvbiBpbmRleD17Mn0gcmVuZGVyPXsuLi59IC8+XHJcbjwvQWNjb3JkaW9uPmB9PC9jb2RlPilcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIERlbW8oKSB7XHJcbiAgICBjb25zdCBbY291bnQsIHNldENvdW50XSA9IHVzZVN0YXRlKDUpO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPEJsdXJiIC8+XHJcbiAgICAgICAgICAgIDxDb2RlIC8+XHJcbiAgICAgICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cIm51bWJlclwiIG1pbj17MH0gdmFsdWU9e2NvdW50fSBvbklucHV0PXtlID0+IHNldENvdW50KGUuY3VycmVudFRhcmdldC52YWx1ZUFzTnVtYmVyKX0gLz4gIyBvZiBhY2NvcmRpb24gc2VjdGlvbnM8L2xhYmVsPlxyXG4gICAgICAgICAgICA8RGVtb0FjY29yZGlvbj5cclxuICAgICAgICAgICAgICAgIDw+e0FycmF5LmZyb20oKGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgPERlbW9BY2NvcmRpb25TZWN0aW9uIGluZGV4PXswfSBoZWFkaW5nPVwiQWNjb3JkaW9uIHNlY3Rpb24gIzBcIiBib2R5PVwiQm9keSBjb250ZW50ICMwXCIgZGlzYWJsZWQ9e2ZhbHNlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIDxEZW1vQWNjb3JkaW9uU2VjdGlvbiBpbmRleD17MX0gaGVhZGluZz1cIkFjY29yZGlvbiBzZWN0aW9uICMxXCIgYm9keT1cIkJvZHkgY29udGVudCAjMVwiIGRpc2FibGVkPXtmYWxzZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICB5aWVsZCA8RGVtb0FjY29yZGlvblNlY3Rpb24gaW5kZXg9ezJ9IGhlYWRpbmc9XCJBY2NvcmRpb24gc2VjdGlvbiAjMiAoZGlzYWJsZWQpXCIgYm9keT1cIkJvZHkgY29udGVudCAjMlwiIGRpc2FibGVkPXt0cnVlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIDxEZW1vQWNjb3JkaW9uU2VjdGlvbiBpbmRleD17M30gaGVhZGluZz1cIkFjY29yZGlvbiBzZWN0aW9uICMzIChmb3JjZWQgb3BlbilcIiBib2R5PVwiQm9keSBjb250ZW50ICMzXCIgZGlzYWJsZWQ9e2ZhbHNlfSBvcGVuPXt0cnVlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIDxEZW1vQWNjb3JkaW9uU2VjdGlvbiBpbmRleD17NH0gaGVhZGluZz1cIkFjY29yZGlvbiBzZWN0aW9uICM0IChmb3JjZWQgY2xvc2VkKVwiIGJvZHk9XCJCb2R5IGNvbnRlbnQgIzRcIiBkaXNhYmxlZD17ZmFsc2V9IG9wZW49e2ZhbHNlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSA1OyBpIDwgY291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCA8RGVtb0FjY29yZGlvblNlY3Rpb24gaW5kZXg9e2l9IGhlYWRpbmc9e2BBY2NvcmRpb24gc2VjdGlvbiAjJHtpfWB9IGJvZHk9e2BCb2R5Q29udGVudCAjJHtpfWB9IGRpc2FibGVkPXtmYWxzZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KSgpKS5zbGljZSgwLCBjb3VudCl9PC8+XHJcbiAgICAgICAgICAgIDwvRGVtb0FjY29yZGlvbj5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufSIsIlxyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IEJ1dHRvbiwgZGVmYXVsdFJlbmRlckJ1dHRvbiwgRXZlbnREZXRhaWwgfSBmcm9tIFwiLi4vLi4vaW5kZXhcIjtcclxuXHJcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xyXG4gICAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEJsdXJiKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8cD48YSBocmVmPVwiaHR0cHM6Ly93d3cudzMub3JnL1dBSS9BUklBL2FwZy9wYXR0ZXJucy9idXR0b24vXCI+SW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBBUklBIGd1aWRlbGluZXMgZm9yIEJ1dHRvbiBwYXR0ZXJucyw8L2E+IHRoaXMgd2lkZ2V0IHN1cHBvcnRzIHRoZSBmb2xsb3dpbmc6PC9wPlxyXG4gICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICA8bGk+V2hldGhlciB1c2luZyBhbiBhY3R1YWwgPGNvZGU+Jmx0O2J1dHRvbiZndDs8L2NvZGU+LCBvciBzb21ldGhpbmcgZWxzZSBsaWtlIGEgPGNvZGU+Jmx0O2RpdiZndDs8L2NvZGU+LCB0aGUgcHJvcGVyIHJvbGVzIGFuZCBldmVudCBoYW5kbGVycyB3aWxsIGJlIGFwcGxpZWQuPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaT5CdXR0b25zIGNhbiBiZSB0b2dnbGVkIChwcmVzc2VkIG9yIHVucHJlc3NlZCkuPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaT5UaGUgYnV0dG9uIHJlc3BvbmRzIHRvIGtleWJvYXJkLCBtb3VzZSwgdG91Y2gsIGV0Yy4gZXZlbnRzLCByZWdhcmRsZXNzIG9mIHRoZSBlbGVtZW50IHVzZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG91YmxlLWNsaWNrcyBkbyBub3Qgc2VsZWN0IHRleHQsIGJ1dCB0ZXh0IGlzIHN0aWxsIHNlbGVjdGFibGUgd2l0aG91dCBpdCBjb3VudGluZyBhcyBhIHByZXNzL2NsaWNrPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPldoZW4gRW50ZXIgaXMgcHJlc3NlZCwgdGhlIGJ1dHRvbiBpcyBpbW1lZGlhdGVseSBhY3RpdmF0ZWQ8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+V2hlbiBTcGFjZSBpcyBwcmVzc2VkLCB0aGUgYnV0dG9uIGlzIGFjdGl2YXRlZCBvbmNlIHJlbGVhc2VkPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmlPUyBTYWZhcmkgcHJvcGVybHkgZm9jdXNlcyB0aGUgYnV0dG9uPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgPHA+PHN0cm9uZz5UaGluZ3MgPGVtPm5vdDwvZW0+IGhhbmRsZWQ6PC9zdHJvbmc+PC9wPlxyXG4gICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICA8bGk+SWYgeW91ciBidXR0b24gY29udGFpbnMgb25seSBhbiBpY29uIChvciBvdGhlciBub24tZGVzY3JpcHRpdmUgY29udGVudCwgZXRjLiksIHlvdSBtdXN0IHByb3ZpZGUgYW4gPGNvZGU+YXJpYS1sYWJlbDwvY29kZT4gbWFudWFsbHkgc3RhdGluZyB3aGF0IGhhcHBlbnMgd2hlbiB0aGUgYnV0dG9uIGlzIHByZXNzZWQuPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIENvZGUoKSB7XHJcbiAgICByZXR1cm4gKDxjb2RlPntgPEJ1dHRvbiB0YWc9XCJidXR0b25cIj5CdXR0b248L0J1dHRvbj5cclxuICAgIDxCdXR0b24gdGFnPVwiZGl2XCI+RGl2PC9CdXR0b24+YH08L2NvZGU+KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gRGVtbygpIHtcclxuICAgIGNvbnN0IFtwcmVzc2VkLCBzZXRQcmVzc2VkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxCbHVyYiAvPlxyXG4gICAgICAgICAgICA8Q29kZSAvPlxyXG4gICAgICAgICAgICA8RGVtb0J1dHRvbiBkaXNhYmxlZD17ZmFsc2V9IHRhZz1cImJ1dHRvblwiIC8+XHJcbiAgICAgICAgICAgIDxEZW1vQnV0dG9uIGRpc2FibGVkPVwic29mdFwiIHRhZz1cImJ1dHRvblwiIC8+XHJcbiAgICAgICAgICAgIDxEZW1vQnV0dG9uIGRpc2FibGVkPVwiaGFyZFwiIHRhZz1cImJ1dHRvblwiIC8+XHJcbiAgICAgICAgICAgIDxEZW1vQnV0dG9uIGRpc2FibGVkPXtmYWxzZX0gdGFnPVwiZGl2XCIgLz5cclxuICAgICAgICAgICAgPERlbW9CdXR0b24gZGlzYWJsZWQ9XCJzb2Z0XCIgdGFnPVwiZGl2XCIgLz5cclxuICAgICAgICAgICAgPERlbW9CdXR0b24gZGlzYWJsZWQ9XCJoYXJkXCIgdGFnPVwiZGl2XCIgLz5cclxuICAgICAgICAgICAgPEJ1dHRvbiBnZXREb2N1bWVudD17Z2V0RG9jdW1lbnR9IGRpc2FibGVkPXtmYWxzZX0gdGFnQnV0dG9uPVwiYnV0dG9uXCIgcHJlc3NlZD17cHJlc3NlZH0gb25QcmVzcz17ZSA9PiBzZXRQcmVzc2VkKGVbRXZlbnREZXRhaWxdLnByZXNzZWQgPz8gZmFsc2UpfSByZW5kZXI9e2RlZmF1bHRSZW5kZXJCdXR0b24oXCJidXR0b25cIiwgKCkgPT4gKHsgY2hpbGRyZW46IGBUb2dnbGUgYnV0dG9uICgke3ByZXNzZWQ/IFwicHJlc3NlZFwiIDogXCJ1bnByZXNzZWRcIn0pYH0pKX0gLz5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5cclxuZnVuY3Rpb24gRGVtb0J1dHRvbih7IHRhZywgZGlzYWJsZWR9OiB7IHRhZzogc3RyaW5nLCBkaXNhYmxlZDogYm9vbGVhbiB8IFwic29mdFwiIHwgXCJoYXJkXCIgfSkge1xyXG4gICAgY29uc3Qgb25QcmVzcyA9ICgpID0+IHsgYWxlcnQoXCJCdXR0b24gY2xpY2tlZFwiKSB9XHJcblxyXG4gICAgcmV0dXJuICggXHJcbiAgICAgICAgPEJ1dHRvbiBnZXREb2N1bWVudD17Z2V0RG9jdW1lbnR9IHRhZ0J1dHRvbj17dGFnIGFzIGFueX0gb25QcmVzcz17b25QcmVzc30gcmVuZGVyPXtkZWZhdWx0UmVuZGVyQnV0dG9uKHRhZywgKCkgPT4gKHsgY2xhc3M6IFwiYnRuXCIsIGNoaWxkcmVuOiBgJHt0YWd9ICR7ZGlzYWJsZWQ/IGAgZGlzYWJsZWQgKCR7ZGlzYWJsZWQgPT0gXCJzb2Z0XCI/IFwic29mdFwiIDogXCJoYXJkXCJ9KWAgOiBcIlwifWAgfSkpfSAgLz5cclxuICAgIClcclxufSIsIlxyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IFN0YXRlVXBkYXRlciB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgQnV0dG9uLCBDaGVja2JveCwgZGVmYXVsdFJlbmRlckJ1dHRvbiwgZGVmYXVsdFJlbmRlckNoZWNrYm94LCBFdmVudERldGFpbCB9IGZyb20gXCIuLi8uLi9pbmRleFwiO1xyXG5cclxuLypmdW5jdGlvbiBEZW1vQnV0dG9uKHsgdGFnLCAuLi5wcm9wcyB9OiB7IHRhZzogc3RyaW5nIH0gJiBSZW5kZXJhYmxlUHJvcHM8e30+KSB7XHJcbiAgICByZXR1cm4gPEJ1dHRvbiBkaXNhYmxlZD17ZGlzYWJsZWR9IG9uUHJlc3M9e29uUHJlc3N9IHByZXNzZWQ9e30gey4uLnByb3BzfSB0YWc9e3RhZyBhcyBhbnl9ICAgLz5cclxufSovXHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBCbHVyYigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPHA+PGEgaHJlZj1cImh0dHBzOi8vd3d3LnczLm9yZy9XQUkvQVJJQS9hcGcvcGF0dGVybnMvY2hlY2tib3gvXCI+SW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBBUklBIGd1aWRlbGluZXMgZm9yIENoZWNrYm94IHBhdHRlcm5zLDwvYT4gdGhpcyB3aWRnZXQgc3VwcG9ydHMgdGhlIGZvbGxvd2luZzo8L3A+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgIDxsaT5Ub2dnbGVzIGJldHdlZW4gY2hlY2tlZCBhbmQgdW5jaGVja2VkIHdoZW4gcHJlc3NlZCAoY2xpY2tlZCwgRW50ZXIgcHJlc3NlZCwgU3BhY2UgcmVsZWFzZWQsIGV0Yy4pPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaT5DYW4gYmUgPGNvZGU+bWl4ZWQ8L2NvZGU+IGluc3RlYWQsIHRob3VnaCA8Y29kZT5vbklucHV0PC9jb2RlPiB3aWxsIG9ubHkgZXZlciBiZSBjYWxsZWQgd2l0aCA8Y29kZT50cnVlPC9jb2RlPiBvciA8Y29kZT5mYWxzZTwvY29kZT48L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPlN1cHBvcnRzIHVzaW5nIDxjb2RlPiZsdDtpbnB1dCZndDs8L2NvZGU+cyBhbmQgPGNvZGU+Jmx0O2xhYmVsJmd0OzwvY29kZT5zLCBhcyB3ZWxsIGFzIGp1c3QgcGxhaW4gb2wnIDxjb2RlPiZsdDtkaXYmZ3Q7PC9jb2RlPnMgb24gZWl0aGVyL2JvdGg8L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPlRoZSBjaGVja2JveCBhbmQgbGFiZWwgY2FuIGJlIHNpYmxpbmcgZWxlbWVudHMsIGxpa2Ugbm9ybWFsLCBvciB0aGUgbGFiZWwgY2FuIHdyYXAgdGhlIGlucHV0IGZvciBhIGxhcmdlciBoaXQgYXJlYS4gSW4gYWxsIGNhc2VzLCB0aGUgYXBwcm9wcmlhdGUgcm9sZXMvZXZlbnQgaGFuZGxlcnMgd2lsbCBiZSBhcHBsaWVkIHRvIGVhY2ggZWxlbWVudC48L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPldoZW4gc2VsZWN0aW5nIHRoZSB0ZXh0IG9mIGEgY2hlY2tib3gncyBsYWJlbCwgdGhpcyBkb2VzIG5vdCBjaGFuZ2UgdGhlIGNoZWNrYm94J3Mgc3RhdGU8L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPkRvdWJsZS1jbGlja2luZyB0aGUgbGFiZWwgY2hlY2tzICZhbXA7IHVuLWNoZWNrcyB0aGUgY2hlY2tib3ggaW5zdGVhZCBvZiBzZWxlY3RpbmcgdGhlIGxhYmVsJ3MgdGV4dDwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGk+Q2hlY2tib3ggZ3JvdXBzICh3aXRoIGEgdHJpLXN0YXRlIHBhcmVudCkgYXJlIGEgc2VwYXJhdGUgY29tcG9uZW50L2hvb2s8L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8cD48c3Ryb25nPlRoaW5ncyA8ZW0+bm90PC9lbT4gaGFuZGxlZDo8L3N0cm9uZz48L3A+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgIDxsaT5JZiB5b3VyIGNoZWNrYm94IGRvZXMgbm90IGhhdmUgYSB2aXNpYmxlIGxhYmVsIChhY2hpZXZhYmxlIGJ5IGJ5IG92ZXJyaWRpbmcgdGhlIDxjb2RlPnJlbmRlcjwvY29kZT4gcHJvcCBhbmQgc2V0dGluZyA8Y29kZT5sYWJlbFBvc2l0aW9uPC9jb2RlPiB0byBiZSBcInNlcGFyYXRlXCIpLCB5b3UgbXVzdCBwYXNzIDxjb2RlPmFyaWEtbGFiZWw8L2NvZGU+IGFzIGEgcHJvcCB0byB0aGUgY2hlY2tib3ggbWFudWFsbHkuIE5vdCBwcm92aWRpbmcgb25lIHdpbGwgcHJpbnQgYW4gZXJyb3IgdG8gdGhlIGNvbnNvbGUsIGJ1dCBpdCBpdCBub3QgcmVxdWlyZWQgYnkgdGhlIHR5cGUgc3lzdGVtLjwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDb2RlKCkge1xyXG4gICAgcmV0dXJuICg8Y29kZT57YDxDaGVja2JveCBjaGVja2VkPXt0cnVlfSBsYWJlbFBvc2l0aW9uPVwic2VwYXJhdGVcIiB0YWdJbnB1dD1cImlucHV0XCIgdGFnTGFiZWw9XCJsYWJlbFwiPkxhYmVsIHRleHQ8L0NoZWNrYm94PmB9PC9jb2RlPilcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIERlbW8oKSB7XHJcblxyXG4gICAgY29uc3QgW2NoZWNrZWQsIHNldENoZWNrZWRdID0gdXNlU3RhdGUoZmFsc2UgYXMgYm9vbGVhbiB8IFwibWl4ZWRcIik7XHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPEJsdXJiIC8+XHJcbiAgICAgICAgICAgIDxDb2RlIC8+XHJcbiAgICAgICAgICAgIDxCdXR0b24gdGFnQnV0dG9uPVwiYnV0dG9uXCIgZ2V0RG9jdW1lbnQ9e2dldERvY3VtZW50fSBvblByZXNzPXsoKSA9PiB7IHNldENoZWNrZWQoXCJtaXhlZFwiIGFzIGFueSk7IH19IHJlbmRlcj17ZGVmYXVsdFJlbmRlckJ1dHRvbihcImJ1dHRvblwiLCAoKSA9PiAoeyBjaGlsZHJlbjogXCJDaGFuZ2UgdG8gbWl4ZWRcIiB9KSl9IC8+XHJcbiAgICAgICAgICAgIDxEZW1vQ2hlY2tib3ggY2hlY2tlZD17Y2hlY2tlZH0gc2V0Q2hlY2tlZD17c2V0Q2hlY2tlZH0gbGFiZWxQb3NpdGlvbj1cInNlcGFyYXRlXCIgZGlzYWJsZWQ9e2ZhbHNlfSB0YWdJbnB1dD1cImlucHV0XCIgdGFnTGFiZWw9XCJsYWJlbFwiIC8+XHJcbiAgICAgICAgICAgIDxEZW1vQ2hlY2tib3ggY2hlY2tlZD17Y2hlY2tlZH0gc2V0Q2hlY2tlZD17c2V0Q2hlY2tlZH0gbGFiZWxQb3NpdGlvbj1cIndyYXBwaW5nXCIgZGlzYWJsZWQ9e2ZhbHNlfSB0YWdJbnB1dD1cImlucHV0XCIgdGFnTGFiZWw9XCJsYWJlbFwiIC8+XHJcbiAgICAgICAgICAgIDxEZW1vQ2hlY2tib3ggY2hlY2tlZD17Y2hlY2tlZH0gc2V0Q2hlY2tlZD17c2V0Q2hlY2tlZH0gbGFiZWxQb3NpdGlvbj1cInNlcGFyYXRlXCIgZGlzYWJsZWQ9e2ZhbHNlfSB0YWdJbnB1dD1cImRpdlwiIHRhZ0xhYmVsPVwibGFiZWxcIiAvPlxyXG4gICAgICAgICAgICA8RGVtb0NoZWNrYm94IGNoZWNrZWQ9e2NoZWNrZWR9IHNldENoZWNrZWQ9e3NldENoZWNrZWR9IGxhYmVsUG9zaXRpb249XCJ3cmFwcGluZ1wiIGRpc2FibGVkPXtmYWxzZX0gdGFnSW5wdXQ9XCJkaXZcIiB0YWdMYWJlbD1cImxhYmVsXCIgLz5cclxuICAgICAgICAgICAgPERlbW9DaGVja2JveCBjaGVja2VkPXtjaGVja2VkfSBzZXRDaGVja2VkPXtzZXRDaGVja2VkfSBsYWJlbFBvc2l0aW9uPVwic2VwYXJhdGVcIiBkaXNhYmxlZD17ZmFsc2V9IHRhZ0lucHV0PVwiaW5wdXRcIiB0YWdMYWJlbD1cImRpdlwiIC8+XHJcbiAgICAgICAgICAgIDxEZW1vQ2hlY2tib3ggY2hlY2tlZD17Y2hlY2tlZH0gc2V0Q2hlY2tlZD17c2V0Q2hlY2tlZH0gbGFiZWxQb3NpdGlvbj1cIndyYXBwaW5nXCIgZGlzYWJsZWQ9e2ZhbHNlfSB0YWdJbnB1dD1cImlucHV0XCIgdGFnTGFiZWw9XCJkaXZcIiAvPlxyXG4gICAgICAgICAgICA8RGVtb0NoZWNrYm94IGNoZWNrZWQ9e2NoZWNrZWR9IHNldENoZWNrZWQ9e3NldENoZWNrZWR9IGxhYmVsUG9zaXRpb249XCJzZXBhcmF0ZVwiIGRpc2FibGVkPXtmYWxzZX0gdGFnSW5wdXQ9XCJkaXZcIiB0YWdMYWJlbD1cImRpdlwiIC8+XHJcbiAgICAgICAgICAgIDxEZW1vQ2hlY2tib3ggY2hlY2tlZD17Y2hlY2tlZH0gc2V0Q2hlY2tlZD17c2V0Q2hlY2tlZH0gbGFiZWxQb3NpdGlvbj1cIndyYXBwaW5nXCIgZGlzYWJsZWQ9e2ZhbHNlfSB0YWdJbnB1dD1cImRpdlwiIHRhZ0xhYmVsPVwiZGl2XCIgLz5cclxuICAgICAgICAgICAgPERlbW9DaGVja2JveCBjaGVja2VkPXtjaGVja2VkfSBzZXRDaGVja2VkPXtzZXRDaGVja2VkfSBsYWJlbFBvc2l0aW9uPVwiaGlkZGVuXCIgZGlzYWJsZWQ9e2ZhbHNlfSB0YWdJbnB1dD1cImlucHV0XCIgdGFnTGFiZWw9XCJsYWJlbFwiIC8+XHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn1cclxuXHJcbmZ1bmN0aW9uIERlbW9DaGVja2JveCh7IGxhYmVsUG9zaXRpb24sIHRhZ0lucHV0LCB0YWdMYWJlbCwgZGlzYWJsZWQsIGNoZWNrZWQsIHNldENoZWNrZWQgfTogeyBkaXNhYmxlZDogYm9vbGVhbiwgbGFiZWxQb3NpdGlvbjogXCJzZXBhcmF0ZVwiIHwgXCJ3cmFwcGluZ1wiIHwgXCJoaWRkZW5cIiwgdGFnSW5wdXQ6IHN0cmluZywgdGFnTGFiZWw6IHN0cmluZywgY2hlY2tlZDogYm9vbGVhbiB8IFwibWl4ZWRcIiwgc2V0Q2hlY2tlZDogU3RhdGVVcGRhdGVyPGJvb2xlYW4gfCBcIm1peGVkXCI+IH0pIHtcclxuICAgIC8vY29uc3QgW2NoZWNrZWQsIHNldENoZWNrZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGJvcmRlcjogXCIxcHggc29saWQgYmxhY2tcIiB9fT5cclxuICAgICAgICAgICAgPENoZWNrYm94XHJcbiAgICAgICAgICAgIGdldERvY3VtZW50PXtnZXREb2N1bWVudH1cclxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cclxuICAgICAgICAgICAgICAgIGNoZWNrZWQ9e2NoZWNrZWR9XHJcbiAgICAgICAgICAgICAgICBvbkNoZWNrZWRDaGFuZ2U9e2UgPT4gc2V0Q2hlY2tlZChlW0V2ZW50RGV0YWlsXS5jaGVja2VkKX1cclxuICAgICAgICAgICAgICAgIGxhYmVsUG9zaXRpb249e2xhYmVsUG9zaXRpb24gPT0gXCJoaWRkZW5cIiA/IFwic2VwYXJhdGVcIiA6IGxhYmVsUG9zaXRpb259XHJcbiAgICAgICAgICAgICAgICB0YWdJbnB1dD17dGFnSW5wdXQgYXMgbmV2ZXJ9XHJcbiAgICAgICAgICAgICAgICB0YWdMYWJlbD17dGFnTGFiZWwgYXMgbmV2ZXJ9XHJcbiAgICAgICAgICAgICAgICByZW5kZXI9e2RlZmF1bHRSZW5kZXJDaGVja2JveCh7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxQb3NpdGlvbixcclxuICAgICAgICAgICAgICAgICAgICB0YWdJbnB1dCxcclxuICAgICAgICAgICAgICAgICAgICB0YWdMYWJlbCxcclxuICAgICAgICAgICAgICAgICAgICBtYWtlSW5wdXRQcm9wczogKCkgPT4gKHsgXCJhcmlhLWxhYmVsXCI6IGxhYmVsUG9zaXRpb24gPT0gXCJoaWRkZW5cIiA/IGBIaWRkZW4gbGFiZWwgKHRlY2huaWNhbGx5IHNlcGFyYXRlKSwgJHt0YWdJbnB1dH0gYW5kICR7dGFnTGFiZWx9ICR7Y2hlY2tlZCA/IFwiY2hlY2tlZFwiIDogXCJub3QgY2hlY2tlZFwifWAgOiB1bmRlZmluZWQsIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ha2VMYWJlbFByb3BzOiAoKSA9PiAoeyBjaGlsZHJlbjogYCR7bGFiZWxQb3NpdGlvbn0sICR7dGFnSW5wdXR9IGFuZCAke3RhZ0xhYmVsfSwgJHtjaGVja2VkID8gXCJjaGVja2VkXCIgOiBcIm5vdCBjaGVja2VkXCJ9YCB9KVxyXG4gICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIHtsYWJlbFBvc2l0aW9uID09IFwiaGlkZGVuXCIgJiYgPGRpdj4oVGhpcyBpcyBub3QgYSBsYWJlbCAtLSB0aGUgYWN0dWFsIGxhYmVsIGlzIHZpYSB0aGUgPGNvZGU+YXJpYS1sYWJlbDwvY29kZT4gcHJvcCk8L2Rpdj59XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcclxuICAgIHJldHVybiB3aW5kb3cuZG9jdW1lbnQ7XHJcbn1cclxuIiwiXHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgQ2hlY2tib3hHcm91cCwgQ2hlY2tib3hHcm91cENoZWNrYm94LCBkZWZhdWx0UmVuZGVyQ2hlY2tib3hHcm91cCwgZGVmYXVsdFJlbmRlckNoZWNrYm94R3JvdXBDaGlsZCwgRXZlbnREZXRhaWwgfSBmcm9tIFwiLi4vLi4vaW5kZXhcIjtcclxuXHJcblxyXG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcclxuICAgIHJldHVybiB3aW5kb3cuZG9jdW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIERlbW9DaGVja2JveCh7IGluZGV4IH06IHsgaW5kZXg6IG51bWJlciB9KSB7XHJcbiAgICBjb25zdCBbY2hlY2tlZCwgc2V0Q2hlY2tlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBjb25zdCBsYWJlbFRleHQgPSBgQ2hlY2tib3ggIyR7aW5kZXh9YFxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8Q2hlY2tib3hHcm91cENoZWNrYm94IHJlbmRlcj17ZGVmYXVsdFJlbmRlckNoZWNrYm94R3JvdXBDaGlsZCh7XHJcbiAgICAgICAgICAgIGxhYmVsUG9zaXRpb246IFwic2VwYXJhdGVcIixcclxuICAgICAgICAgICAgdGFnSW5wdXQ6IFwiaW5wdXRcIixcclxuICAgICAgICAgICAgdGFnTGFiZWw6IFwibGFiZWxcIixcclxuICAgICAgICAgICAgbWFrZUlucHV0UHJvcHM6ICgpID0+ICh7fSksXHJcbiAgICAgICAgICAgIG1ha2VMYWJlbFByb3BzOiAoKSA9PiAoeyBjaGlsZHJlbjogbGFiZWxUZXh0IH0pXHJcbiAgICAgICAgfSl9XHJcbiAgICAgICAgICAgIGdldERvY3VtZW50PXtnZXREb2N1bWVudH1cclxuICAgICAgICAgICAgY2hlY2tlZD17Y2hlY2tlZH1cclxuICAgICAgICAgICAgaW5kZXg9e2luZGV4fVxyXG4gICAgICAgICAgICBkaXNhYmxlZD17ZmFsc2V9XHJcbiAgICAgICAgICAgIGxhYmVsUG9zaXRpb249XCJzZXBhcmF0ZVwiXHJcbiAgICAgICAgICAgIHRleHQ9e2xhYmVsVGV4dH1cclxuICAgICAgICAgICAgdGFnSW5wdXQ9XCJpbnB1dFwiXHJcbiAgICAgICAgICAgIHRhZ0xhYmVsPVwibGFiZWxcIlxyXG4gICAgICAgICAgICBvbkNoZWNrZWRDaGFuZ2U9e2UgPT4gc2V0Q2hlY2tlZChlW0V2ZW50RGV0YWlsXS5jaGVja2VkKX0gLz5cclxuICAgIClcclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQmx1cmIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxwPkNoZWNrYm94IGdyb3VwcyBhcmUgYW4gYWx0ZXJuYXRpdmUgdG8gbXVsdGktc2VsZWN0IGxpc3RzLiBUaGVyZSBpcyBubyByb2xlIG9mIDxjb2RlPmNoZWNrYm94Z3JvdXA8L2NvZGU+LCBidXQgdGhpcyBhaW1zIHRvIGJlIGFuIEFSSUEtY29tcGxpYW50IGltcGxlbWVudGF0aW9uIG9mIGEgY2hlY2tib3ggZ3JvdXAuPC9wPlxyXG4gICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICA8bGk+QWxsIG5vcm1hbCA8Y29kZT5DaGVja2JveDwvY29kZT4gZnVuY3Rpb25hbGl0eSBpcyBzdXBwb3J0ZWQgb24gZWFjaCBpbmRpdmlkdWFsIGNoZWNrYm94LjwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGk+VGhlIHBhcmVudCBjaGVja2JveCBzd2l0Y2hlcyBiZXR3ZWVuIDMgc3RhdGVzLCByZW1lbWJlcmluZyB0aGUgbGFzdCBzdGF0ZSB0aGF0IGNhdXNlZCBpdCB0byBiZSBcIm1peGVkXCIuPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaT5UaGUgcGFyZW50IGNoZWNrYm94IHJlYWN0cyB0byBlYWNoIGNoaWxkJ3MgPGNvZGU+Y2hlY2tlZDwvY29kZT4gcHJvcCBhbmQgdXBkYXRlcyBpdHMgb3duIGludGVybmFsIDxjb2RlPmNoZWNrZWQ8L2NvZGU+IGF0dHJpYnV0ZSAoYmUgYXdhcmUgb2YgdGhpcyBpZiB0aGV5J3JlIGFzeW5jcm9ub3VzLCBhcyB5b3UnbGwgd2FudCB0byBlbnN1cmUgdGhleSBhbGwgcmVzb2x2ZSBvbiB0aGUgc2FtZSB0aWNrIHdpdGggPGNvZGU+UHJvbWlzZS5hbGw8L2NvZGU+IHRvIG5vdCBjbG9iYmVyIHRoZSB1c2VyJ3MgaW5wdXRzKS48L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPlRoZSBjaGlsZHJlbiBhcmUgdHJlYXRlZCBhcyBhIGNvbXBvc2l0ZSBjb21wb25lbnQgd2l0aCBsaXN0IG5hdmlnYXRpb247IHNlZSA8Y29kZT5BaXJhU2luZ2xlU2VsZWN0TGlzdDwvY29kZT4gZm9yIG1vcmUgaW5mb3JtYXRpb248L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8cD48c3Ryb25nPlRoaW5ncyA8ZW0+bm90PC9lbT4gaGFuZGxlZDo8L3N0cm9uZz48L3A+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgIDxsaT5JdCBpcyBhc3N1bWVkIHRoYXQgdGhlIHBhcmVudCBjaGVja2JveCBwcm92aWRlcyBzdWZmaWNpZW50IGxhYmVsbGluZyBmb3IgYWxsIHRoZSBjaGlsZHJlbiwgd2hpY2ggaG93IHRoZSBkZW1vIGV4YW1wbGUgaWRlbnRpZmllcyB0aGVzZSBlbGVtZW50cy4gSWYgeW91IGhhdmUgYSBzZXBhcmF0ZSBsYWJlbCwgeW91IHdpbGwgbmVlZCB0byB3cmFwIHRoZSBjaGlsZHJlbiBpbiBhIDxjb2RlPnJvbGU9Z3JvdXA8L2NvZGU+IHRoYXQgcmVmZXJlbmNlcyB0aGF0IGxhYmVsIGJ5IG92ZXJyaWRpbmcgPGNvZGU+cmVuZGVyPC9jb2RlPi48L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPlNlZSB0aGUgY2F2ZWF0IGFib3ZlIGZvciB3aGVuIGVhY2ggY2hpbGQncyA8Y29kZT5vbklucHV0PC9jb2RlPiB0YWtlcyBhIHZhcmlhYmxlIGFtb3VudCBvZiB0aW1lIHRvIGFjdHVhbGx5IHVwZGF0ZSB0aGUgPGNvZGU+Y2hlY2tlZDwvY29kZT4gcHJvcCwgYXMgaXQgY2FuIGNsb2JiZXIgdGhlIHVzZXIncyBsYXN0IGlucHV0IHdoZW4gY2xpY2tpbmcgb24gdGhlIHBhcmVudDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDb2RlKCkge1xyXG4gICAgcmV0dXJuICg8Y29kZT57YGB9PC9jb2RlPilcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIERlbW8oKSB7XHJcbiAgICBjb25zdCBbY291bnQsIHNldENvdW50XSA9IHVzZVN0YXRlKDUpO1xyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxCbHVyYiAvPlxyXG4gICAgICAgICAgICA8Q29kZSAvPlxyXG4gICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJudW1iZXJcIiBtaW49ezB9IHZhbHVlPXtjb3VudH0gb25JbnB1dD17ZSA9PiBzZXRDb3VudChlLmN1cnJlbnRUYXJnZXQudmFsdWVBc051bWJlcil9IC8+ICMgb2YgY2hlY2tib3hlczwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8Q2hlY2tib3hHcm91cCBnZXREb2N1bWVudD17Z2V0RG9jdW1lbnR9IGRpc2FibGVkPXtmYWxzZX0gbGFiZWxQb3NpdGlvbj1cInNlcGFyYXRlXCIgdGFnSW5wdXQ9XCJpbnB1dFwiIHRhZ0xhYmVsPVwibGFiZWxcIiByZW5kZXI9e1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRSZW5kZXJDaGVja2JveEdyb3VwKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxQb3NpdGlvbjogXCJzZXBhcmF0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdJbnB1dDogXCJpbnB1dFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdMYWJlbDogXCJsYWJlbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWtlSW5wdXRQcm9wczogKCkgPT4gKHt9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFrZUxhYmVsUHJvcHM6ICgpID0+ICh7IGNoaWxkcmVuOiBcIkdyb3VwIGNoZWNrYm94IHBhcmVudFwiIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogQXJyYXkuZnJvbSgoZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIDxkaXY+PERlbW9DaGVja2JveCBpbmRleD17aX0ga2V5PXtpfSAvPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSgpKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pfSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufSIsIlxyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tIFwicHJlYWN0L2NvbXBhdFwiO1xyXG5pbXBvcnQgeyBMaXN0Ym94TXVsdGlJdGVtIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudC9saXN0Ym94LW11bHRpXCI7XHJcbmltcG9ydCB7IEV2ZW50RGV0YWlsLCBMaXN0Ym94TXVsdGksIGRlZmF1bHRSZW5kZXJMaXN0Ym94TXVsdGksIGRlZmF1bHRSZW5kZXJMaXN0Ym94TXVsdGlJdGVtIH0gZnJvbSBcIi4uLy4uL2luZGV4XCI7XHJcblxyXG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcclxuICAgIHJldHVybiB3aW5kb3cuZG9jdW1lbnQ7XHJcbn1cclxuXHJcbmNvbnN0IERlbW9MaXN0SXRlbSA9IG1lbW8oZnVuY3Rpb24gRGVtb0xpc3RJdGVtKHsgaW5kZXggfTogeyBpbmRleDogbnVtYmVyIH0pIHtcclxuICAgIGNvbnN0IFtzZWxlY3RlZCwgc2V0U2VsZWN0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgY29uc3QgbGFiZWxUZXh0ID0gYExpc3QgaXRlbSAjJHtpbmRleH0ke3NlbGVjdGVkID8gXCIgKHNlbGVjdGVkKVwiIDogXCJcIn1gXHJcblxyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxMaXN0Ym94TXVsdGlJdGVtXHJcbiAgICAgICAgZ2V0RG9jdW1lbnQ9e2dldERvY3VtZW50fSBcclxuICAgICAgICAgICAgc2VsZWN0ZWQ9e3NlbGVjdGVkfVxyXG4gICAgICAgICAgICBpbmRleD17aW5kZXh9XHJcbiAgICAgICAgICAgIGRpc2FibGVkPXtmYWxzZX1cclxuICAgICAgICAgICAgdGV4dD17bGFiZWxUZXh0fVxyXG4gICAgICAgICAgICBvblNlbGVjdGVkQ2hhbmdlPXtlID0+IHsgc2V0U2VsZWN0ZWQoZVtFdmVudERldGFpbF0uc2VsZWN0ZWQpIH19XHJcbiAgICAgICAgICAgIHJlbmRlcj17ZGVmYXVsdFJlbmRlckxpc3Rib3hNdWx0aUl0ZW0oeyB0YWdMaXN0SXRlbTogXCJsaVwiLCBtYWtlUHJvcHNMaXN0SXRlbTogKCkgPT4gKHsgY2hpbGRyZW46IGxhYmVsVGV4dCB9KSB9KX1cclxuICAgICAgICAvPlxyXG4gICAgKVxyXG59KVxyXG5cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQmx1cmIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxwPjxhIGhyZWY9XCJodHRwczovL3d3dy53My5vcmcvV0FJL0FSSUEvYXBnL3BhdHRlcm5zL2xpc3Rib3gvXCI+SW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBBUklBIGd1aWRlbGluZXMgZm9yIExpc3Rib3ggcGF0dGVybnMsPC9hPiB0aGlzIHdpZGdldCBzdXBwb3J0cyB0aGUgZm9sbG93aW5nOjwvcD5cclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgPGxpPlRoZSBjaGlsZHJlbiBhcmUgdHJlYXRlZCBhcyBhIGNvbXBvc2l0ZSBjb21wb25lbnQgd2l0aCBsaXN0IG5hdmlnYXRpb247IHNlZSA8Y29kZT5BaXJhU2luZ2xlU2VsZWN0TGlzdDwvY29kZT4gZm9yIG1vcmUgaW5mb3JtYXRpb248L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPlRoZSBwYXJlbnQgY2hlY2tib3ggc3dpdGNoZXMgYmV0d2VlbiAzIHN0YXRlcywgcmVtZW1iZXJpbmcgdGhlIGxhc3Qgc3RhdGUgdGhhdCBjYXVzZWQgaXQgdG8gYmUgXCJtaXhlZFwiLjwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGk+VGhlIHBhcmVudCBjaGVja2JveCByZWFjdHMgdG8gZWFjaCBjaGlsZCdzIDxjb2RlPmNoZWNrZWQ8L2NvZGU+IHByb3AgYW5kIHVwZGF0ZXMgaXRzIG93biBpbnRlcm5hbCA8Y29kZT5jaGVja2VkPC9jb2RlPiBhdHRyaWJ1dGUgKGJlIGF3YXJlIG9mIHRoaXMgaWYgdGhleSdyZSBhc3luY3Jvbm91cywgYXMgeW91J2xsIHdhbnQgdG8gZW5zdXJlIHRoZXkgYWxsIHJlc29sdmUgb24gdGhlIHNhbWUgdGljayB3aXRoIDxjb2RlPlByb21pc2UuYWxsPC9jb2RlPiB0byBub3QgY2xvYmJlciB0aGUgdXNlcidzIGlucHV0cykuPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaT5UaGUgY2hpbGRyZW4gYXJlIHRyZWF0ZWQgYXMgYSBjb21wb3NpdGUgY29tcG9uZW50IHdpdGggbGlzdCBuYXZpZ2F0aW9uOyBzZWUgPGNvZGU+QWlyYVNpbmdsZVNlbGVjdExpc3Q8L2NvZGU+IGZvciBtb3JlIGluZm9ybWF0aW9uPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaT5Hcm91cGluZyBpcyBzdXBwb3J0ZWQ8L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPlNvcnRpbmcvcmVvcmRlcmluZyBpcyBzdXBwb3J0ZWQsIHRob3VnaCBub3QgcHJvdmlkZWQgYnkgZGVmYXVsdCwgYXMgaXQncyBtdXR1YWxseSBleGNsdXNpdmUgd2l0aCBncm91cGluZy48L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8cD48c3Ryb25nPlRoaW5ncyA8ZW0+bm90PC9lbT4gaGFuZGxlZDo8L3N0cm9uZz48L3A+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgIDxsaT5JdCBpcyBhc3N1bWVkIHRoYXQgdGhlIHBhcmVudCBjaGVja2JveCBwcm92aWRlcyBzdWZmaWNpZW50IGxhYmVsbGluZyBmb3IgYWxsIHRoZSBjaGlsZHJlbiwgd2hpY2ggaG93IHRoZSBkZW1vIGV4YW1wbGUgaWRlbnRpZmllcyB0aGVzZSBlbGVtZW50cy4gSWYgeW91IGhhdmUgYSBzZXBhcmF0ZSBsYWJlbCwgeW91IHdpbGwgbmVlZCB0byB3cmFwIHRoZSBjaGlsZHJlbiBpbiBhIDxjb2RlPnJvbGU9Z3JvdXA8L2NvZGU+IHRoYXQgcmVmZXJlbmNlcyB0aGF0IGxhYmVsIGJ5IG92ZXJyaWRpbmcgPGNvZGU+cmVuZGVyPC9jb2RlPi48L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPlNlZSB0aGUgY2F2ZWF0IGFib3ZlIGZvciB3aGVuIGVhY2ggY2hpbGQncyA8Y29kZT5vbklucHV0PC9jb2RlPiB0YWtlcyBhIHZhcmlhYmxlIGFtb3VudCBvZiB0aW1lIHRvIGFjdHVhbGx5IHVwZGF0ZSB0aGUgPGNvZGU+Y2hlY2tlZDwvY29kZT4gcHJvcCwgYXMgaXQgY2FuIGNsb2JiZXIgdGhlIHVzZXIncyBsYXN0IGlucHV0IHdoZW4gY2xpY2tpbmcgb24gdGhlIHBhcmVudDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDb2RlKCkge1xyXG4gICAgcmV0dXJuICg8Y29kZT57YGB9PC9jb2RlPilcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIERlbW8oKSB7XHJcbiAgICBjb25zdCBbY291bnQsIHNldENvdW50XSA9IHVzZVN0YXRlKDUpO1xyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxCbHVyYiAvPlxyXG4gICAgICAgICAgICA8Q29kZSAvPlxyXG4gICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJudW1iZXJcIiBtaW49ezB9IHZhbHVlPXtjb3VudH0gb25JbnB1dD17ZSA9PiBzZXRDb3VudChlLmN1cnJlbnRUYXJnZXQudmFsdWVBc051bWJlcil9IC8+ICMgb2YgbGlzdCBpdGVtczwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8TGlzdGJveE11bHRpIHRhZ0xhYmVsPVwibGFiZWxcIiB0YWdMaXN0PVwidWxcIiByZW5kZXI9e2RlZmF1bHRSZW5kZXJMaXN0Ym94TXVsdGkoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhZ0xhYmVsOiBcImxhYmVsXCIsIHRhZ0xpc3Q6IFwidWxcIiwgbWFrZVByb3BzTGFiZWw6ICgpID0+ICh7fSksIG1ha2VQcm9wc0xpc3Q6ICgpID0+ICh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBBcnJheS5mcm9tKChmdW5jdGlvbiogKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgPERlbW9MaXN0SXRlbSBpbmRleD17aX0ga2V5PXtpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSgpKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9KX0gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn0iLCJcclxuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVyc1wiO1xyXG5pbXBvcnQgeyBtZW1vIH0gZnJvbSBcInByZWFjdC9jb21wYXRcIjtcclxuaW1wb3J0IHsgZGVmYXVsdFJlbmRlckxpc3Rib3hTaW5nbGVJdGVtLCBMaXN0Ym94U2luZ2xlSXRlbSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnQvbGlzdGJveC1zaW5nbGVcIjtcclxuaW1wb3J0IHsgRXZlbnREZXRhaWwsIExpc3Rib3hTaW5nbGUsIGRlZmF1bHRSZW5kZXJMaXN0Ym94U2luZ2xlIH0gZnJvbSBcIi4uLy4uL2luZGV4XCI7XHJcblxyXG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHsgcmV0dXJuIHdpbmRvdy5kb2N1bWVudDsgfVxyXG5cclxuY29uc3QgRGVtb0xpc3RJdGVtID0gbWVtbyhmdW5jdGlvbiBEZW1vTGlzdEl0ZW0oeyBpbmRleCB9OiB7IGluZGV4OiBudW1iZXIgfSkge1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPExpc3Rib3hTaW5nbGVJdGVtPEhUTUxMSUVsZW1lbnQ+IGluZGV4PXtpbmRleH0gZ2V0RG9jdW1lbnQ9e2dldERvY3VtZW50fSBkaXNhYmxlZD17ZmFsc2V9IHRleHQ9e2BMaXN0IGl0ZW0gIyR7aW5kZXh9YH0gcmVuZGVyPXtkZWZhdWx0UmVuZGVyTGlzdGJveFNpbmdsZUl0ZW0oeyB0YWdMaXN0SXRlbTogXCJsaVwiLCBtYWtlUHJvcHNMaXN0SXRlbTogKHsgc2luZ2xlU2VsZWN0aW9uOiB7IHNlbGVjdGVkIH0gfSkgPT4gKHsgY2hpbGRyZW46IGBMaXN0IGl0ZW0gIyR7aW5kZXh9JHtzZWxlY3RlZCA/IFwiIChzZWxlY3RlZClcIiA6IFwiXCJ9YCB9KSB9KX0gLz5cclxuICAgIClcclxufSlcclxuXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEJsdXJiKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8cD48YSBocmVmPVwiaHR0cHM6Ly93d3cudzMub3JnL1dBSS9BUklBL2FwZy9wYXR0ZXJucy9saXN0Ym94L1wiPkluIGFjY29yZGFuY2Ugd2l0aCB0aGUgQVJJQSBndWlkZWxpbmVzIGZvciBMaXN0Ym94IHBhdHRlcm5zLDwvYT4gdGhpcyB3aWRnZXQgc3VwcG9ydHMgdGhlIGZvbGxvd2luZzo8L3A+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgIDxsaT5JbiB0ZXJtcyBvZiBrZXlib2FyZCBuYXZpZ2F0aW9uIGFuZCB0YWJiaW5nIHRocm91Z2ggZWxlbWVudHMsIGEgTGlzdGJveCBpcyBjb25zaWRlcmVkIGEgPHN0cm9uZz5zaW5nbGU8L3N0cm9uZz4gdGFiIHN0b3A7IGluIG90aGVyIHdvcmRzLCBubyBtYXR0ZXIgaG93IG1hbnkgbGlzdCBpdGVtcyB0aGVyZSBhcmUgaW4gYSBMaXN0Ym94LCBpdCBvbmx5IHRha2VzIG9uZSBwcmVzcyBvZiB0aGUgVGFiIGJ1dHRvbiB0byBnbyB0aHJvdWdoIGl0LlxyXG4gICAgICAgICAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPldoZW4gYSBMaXN0Ym94IGlzIHRhYmJlZCBpbnRvLCB0aGUgbW9zdCByZWNlbnRseSBzZWxlY3RlZCBpdGVtIGlzIGdpdmVuIGZvY3VzPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlByZXNzaW5nIFRhYiBhZ2FpbiBuYXZpZ2F0ZXMgb3V0IG9mIHRoZSBsaXN0Ym94OyBubyBvdGhlciBsaXN0IGl0ZW1zIGFyZSB0YWJiYWJsZSBvdGhlciB0aGFuIHRoZSBvbmUgY3VycmVudGx5IGRlc2lnbmF0ZWQuPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlByZXNzaW5nIHRoZSBhcnJvdyBrZXlzIG5hdmlnYXRlcyB0aHJvdWdoIHRoZSBMaXN0Ym94IG9uZSBpdGVtIGF0IGEgdGltZTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QcmVzc2luZyB0aGUgSG9tZS9FbmQga2V5cyBtb3ZlIGZvY3VzIHRvIHRoZSBmaXJzdC9sYXN0IGl0ZW1zIHJlc3BlY3RpdmVseTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UeXBpbmcgYW55IHNlcXVlbmNlIG9mIHRleHQgc3RhcnRzIHR5cGVhaGVhZCB0aGF0IG5hdmlnYXRlcyB0byB0aGUgbmV4dCBpdGVtIHRoYXQgbWF0Y2hlcyB3aGF0J3MgYmVpbmcgdHlwZWQ8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+Rm9jdXMgJmFtcDsgc2VsZWN0aW9uIG1hbmFnZW1lbnQgaXMgYXMgb3B0aW1pemVkIGFzIHBvc3NpYmxlOyBvbmx5IHR3byBjaGlsZHJlbiByZS1yZW5kZXIgYXQgYSB0aW1lIHdoZW4gZm9jdXMgb3Igc2VsZWN0aW9uIGNoYW5nZXM8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhlc2UgYXBwbHkgZ2VuZXJhbGx5IHRvIGFsbCBjb21wb3NpdGUgY29tcG9uZW50cyB3aXRoIGEgdmFyaWFibGUgbnVtYmVyIG9mIGNoaWxkcmVuIChUYWIgTGlzdHMsIFJhZGlvIEdyb3VwcywgTXVsdGktU2VsZWN0IExpc3Rib3hlcyBldGMuKTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGk+UmF0aGVyIHRoYW4gZWFjaCBpbmRpdmlkdWFsIGxpc3QgaXRlbSBrbm93aW5nIHdoZXRoZXIgaXQgaXMgc2VsZWN0ZWQgb3Igbm90IChhcyB3aXRoIG11bHRpLXNlbGVjdCBsaXN0cyksIGhlcmUgdGhlIHBhcmVudCBrbm93cyB0aGUgPGNvZGU+c2VsZWN0ZWRJbmRleDwvY29kZT4gYW5kIHNpbXBseSBub3RpZmllcyB0aGUgKG1heCB0d28pIHJlbGV2YW50IGNoaWxkcmVuIGFueSB0aW1lIGl0IGNoYW5nZXMuPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaT5Hcm91cGluZyBpcyBzdXBwb3J0ZWQ8L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPlNvcnRpbmcvcmVvcmRlcmluZyBpcyBzdXBwb3J0ZWQsIHRob3VnaCBub3QgcHJvdmlkZWQgYnkgZGVmYXVsdCwgYXMgaXQncyBtdXR1YWxseSBleGNsdXNpdmUgd2l0aCBncm91cGluZy48L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8cD48c3Ryb25nPlRoaW5ncyA8ZW0+bm90PC9lbT4gaGFuZGxlZDo8L3N0cm9uZz48L3A+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgIDxsaT5MaXN0Ym94ZXMgZG8gbm90IHN1cHBvcnQgaW50ZXJhY3RpdmUgY29udGVudCB3aXRoaW4gdGhlbSAoZS5nLiBhIGRyb3Bkb3duIG1lbnUpLCBhcyBBUklBIHNwZWNpZmllcyB0aGF0IHRoaXMgaXMgYSBkaWZmZXJlbnQgcGF0dGVybi48L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ29kZSgpIHtcclxuICAgIHJldHVybiAoPGNvZGU+e2BgfTwvY29kZT4pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBEZW1vKCkge1xyXG4gICAgY29uc3QgW3NlbGVjdGVkSW5kZXgsIHNldFNlbGVjdGVkSW5kZXhdID0gdXNlU3RhdGU8bnVsbCB8IG51bWJlcj4obnVsbCk7XHJcbiAgICBjb25zdCBbY291bnQsIHNldENvdW50XSA9IHVzZVN0YXRlKDUpO1xyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxCbHVyYiAvPlxyXG4gICAgICAgICAgICA8Q29kZSAvPlxyXG4gICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJudW1iZXJcIiBtaW49ezB9IHZhbHVlPXtjb3VudH0gb25JbnB1dD17ZSA9PiBzZXRDb3VudChlLmN1cnJlbnRUYXJnZXQudmFsdWVBc051bWJlcil9IC8+ICMgb2YgbGlzdCBpdGVtczwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8TGlzdGJveFNpbmdsZVxyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcj17ZGVmYXVsdFJlbmRlckxpc3Rib3hTaW5nbGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdMYWJlbDogXCJsYWJlbFwiLCB0YWdMaXN0OiBcIm9sXCIsIG1ha2VQcm9wc0xhYmVsOiAoKSA9PiAoe30pLCBtYWtlUHJvcHNMaXN0OiAoKSA9PiAoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IDw+e0FycmF5LmZyb20oKGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIDxEZW1vTGlzdEl0ZW0gaW5kZXg9e2l9IGtleT17aX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSgpKX08Lz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25Nb2RlPVwiYWN0aXZhdGlvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgdGFnTGFiZWw9XCJsYWJlbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgdGFnTGlzdD1cIm9sXCJcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEluZGV4PXtzZWxlY3RlZEluZGV4fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0PXtlID0+IHNldFNlbGVjdGVkSW5kZXgoZVtFdmVudERldGFpbF0uc2VsZWN0ZWRJbmRleCl9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59IiwiXHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgZGVmYXVsdFJlbmRlck1lbnUsIGRlZmF1bHRSZW5kZXJNZW51SXRlbSwgTWVudSwgTWVudUl0ZW0gfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50L21lbnVcIjtcclxuXHJcbmZ1bmN0aW9uIERlbW9MaXN0SXRlbSh7IGluZGV4IH06IHsgaW5kZXg6IG51bWJlciB9KSB7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8TWVudUl0ZW08SFRNTExJRWxlbWVudD4gaW5kZXg9e2luZGV4fSB0ZXh0PXtgTGlzdCBpdGVtICMke2luZGV4fWB9IHJlbmRlcj17ZGVmYXVsdFJlbmRlck1lbnVJdGVtKHsgdGFnTWVudUl0ZW06IFwibGlcIiwgbWFrZVByb3BzTWVudUl0ZW06ICgpID0+ICh7IGNoaWxkcmVuOiBgTWVudSBpdGVtICMke2luZGV4fWAgfSkgfSl9IC8+XHJcbiAgICApXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkgeyByZXR1cm4gd2luZG93LmRvY3VtZW50OyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQmx1cmIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxwPjxhIGhyZWY9XCJodHRwczovL3d3dy53My5vcmcvV0FJL0FSSUEvYXBnL3BhdHRlcm5zL2xpc3Rib3gvXCI+SW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBBUklBIGd1aWRlbGluZXMgZm9yIExpc3Rib3ggcGF0dGVybnMsPC9hPiB0aGlzIHdpZGdldCBzdXBwb3J0cyB0aGUgZm9sbG93aW5nOjwvcD5cclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgPGxpPlRoZSBjaGlsZHJlbiBhcmUgdHJlYXRlZCBhcyBhIGNvbXBvc2l0ZSBjb21wb25lbnQgd2l0aCBsaXN0IG5hdmlnYXRpb247IHNlZSA8Y29kZT5BaXJhU2luZ2xlU2VsZWN0TGlzdDwvY29kZT4gZm9yIG1vcmUgaW5mb3JtYXRpb248L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPldoZW4gb3BlbmVkLCB0aGUgbWVudSB3aWxsIGZvY3VzIHRoZSBmaXJzdCBlbGVtZW50IHdpdGhpbiBpdC4gV2hlbiBjbG9zZWQgKGJ5IHByZXNzaW5nIGVzY2FwZSwgcHJlc3NpbmcgdGhlIGJ1dHRvbiBhZ2Fpbiwgb3IgdGFiYmluZyBvdXQgb2YgdGhlIG1lbnUpLCB0aGUgYnV0dG9uIHRoYXQgb3BlbmVkIGl0IHdpbGwgaGF2ZSBmb2N1cyByZXN0b3JlZCB0byBpdC48L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPldoZW4gdGhlIG1lbnUgaXMgY2xvc2VkIGJlY2F1c2UgYW5vdGhlciBlbGVtZW50IG9uIHRoZSBwYWdlIHdhcyBmb2N1c2VkIGluc3RlYWQsIGZvY3VzIHdpbGwgbm90IGJlIG1vZGlmaWVkLjwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDxwPjxzdHJvbmc+VGhpbmdzIDxlbT5ub3Q8L2VtPiBoYW5kbGVkOjwvc3Ryb25nPjwvcD5cclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgPGxpPlRPRE88L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ29kZSgpIHtcclxuICAgIHJldHVybiAoPGNvZGU+e2BgfTwvY29kZT4pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBEZW1vKCkge1xyXG4gICAgY29uc3QgW2NvdW50LCBzZXRDb3VudF0gPSB1c2VTdGF0ZSg1KTtcclxuICAgIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8Qmx1cmIgLz5cclxuICAgICAgICAgICAgPENvZGUgLz5cclxuICAgICAgICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbWluPXswfSB2YWx1ZT17Y291bnR9IG9uSW5wdXQ9e2UgPT4gc2V0Q291bnQoZS5jdXJyZW50VGFyZ2V0LnZhbHVlQXNOdW1iZXIpfSAvPiAjIG9mIG1lbnUgaXRlbXM8L2xhYmVsPlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPE1lbnU8SFRNTERpdkVsZW1lbnQsIEhUTUxVTGlzdEVsZW1lbnQsIEhUTUxEaXZFbGVtZW50LCBIVE1MTElFbGVtZW50LCBIVE1MQnV0dG9uRWxlbWVudD5cclxuICAgICAgICAgICAgICAgICAgICBnZXREb2N1bWVudD17Z2V0RG9jdW1lbnR9XHJcbiAgICAgICAgICAgICAgICAgICAgb25PcGVuPXsoKSA9PiBzZXRPcGVuKHRydWUpfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xvc2U9eygpID0+IHNldE9wZW4oZmFsc2UpfVxyXG4gICAgICAgICAgICAgICAgICAgIG9wZW49e29wZW59XHJcbiAgICAgICAgICAgICAgICAgICAgb3BlbkRpcmVjdGlvbj1cImRvd25cIlxyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcj17ZGVmYXVsdFJlbmRlck1lbnUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdCdXR0b246IFwiYnV0dG9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ01lbnU6IFwidWxcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnU2VudGluZWw6IFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ1N1cmZhY2U6IFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcnRhbElkOiBcInBvcnRhbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWtlUHJvcHNCdXR0b246ICgpID0+ICh7IGNoaWxkcmVuOiBcIk9wZW4gbWVudVwiICsgKG9wZW4/IFwiIChvcGVuKVwiIDogXCIgKGNsb3NlZClcIikgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VQcm9wc01lbnU6ICgpID0+ICh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogPD57QXJyYXkuZnJvbSgoZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgPGRpdj48RGVtb0xpc3RJdGVtIGluZGV4PXtpfSBrZXk9e2l9IC8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkoKSl9PC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWtlUHJvcHNTdXJmYWNlOiAoKSA9PiAoeyBzdHlsZTogeyBkaXNwbGF5OiAhb3Blbj8gXCJub25lXCIgOiB1bmRlZmluZWQgfSB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVByb3BzU2VudGluZWw6ICgpID0+ICh7fSksXHJcbiAgICAgICAgICAgICAgICAgICAgfSl9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59IiwiXHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgbWVtbyB9IGZyb20gXCJwcmVhY3QvY29tcGF0XCI7XHJcbmltcG9ydCB7IGRlZmF1bHRSZW5kZXJSYWRpbywgUmFkaW8sIFJhZGlvR3JvdXAgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50L3JhZGlvLWdyb3VwXCI7XHJcbmltcG9ydCB7IEV2ZW50RGV0YWlsLCBkZWZhdWx0UmVuZGVyUmFkaW9Hcm91cCB9IGZyb20gXCIuLi8uLi9pbmRleFwiO1xyXG5cclxuZnVuY3Rpb24gZ2V0RG9jdW1lbnQoKSB7XHJcbiAgICByZXR1cm4gd2luZG93LmRvY3VtZW50O1xyXG59XHJcblxyXG5jb25zdCBEZW1vUmFkaW9CdXR0b24gPSBtZW1vKGZ1bmN0aW9uIERlbW9SYWRpb0J1dHRvbih7IGluZGV4IH06IHsgaW5kZXg6IG51bWJlciB9KSB7XHJcblxyXG4gICAgY29uc3QgdmFsdWUgPSBgUmFkaW8gYnV0dG9uICMke2luZGV4fWA7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8UmFkaW88bnVtYmVyLCBIVE1MSW5wdXRFbGVtZW50LCBIVE1MTGFiZWxFbGVtZW50PlxyXG4gICAgICAgICAgICBpbmRleD17aW5kZXh9XHJcbiAgICAgICAgICAgIGdldERvY3VtZW50PXtnZXREb2N1bWVudH1cclxuICAgICAgICAgICAgZGlzYWJsZWQ9e2ZhbHNlfVxyXG4gICAgICAgICAgICBsYWJlbFBvc2l0aW9uPVwic2VwYXJhdGVcIlxyXG4gICAgICAgICAgICB0ZXh0PXt2YWx1ZX1cclxuICAgICAgICAgICAgdmFsdWU9e2luZGV4fVxyXG4gICAgICAgICAgICB0YWdJbnB1dD1cImlucHV0XCJcclxuICAgICAgICAgICAgdGFnTGFiZWw9XCJsYWJlbFwiXHJcbiAgICAgICAgICAgIHJlbmRlcj17ZGVmYXVsdFJlbmRlclJhZGlvKHtcclxuICAgICAgICAgICAgICAgIGxhYmVsUG9zaXRpb246IFwic2VwYXJhdGVcIixcclxuICAgICAgICAgICAgICAgIHRhZ0lucHV0OiBcImlucHV0XCIsXHJcbiAgICAgICAgICAgICAgICB0YWdMYWJlbDogXCJsYWJlbFwiLFxyXG4gICAgICAgICAgICAgICAgbWFrZUlucHV0UHJvcHM6ICgpID0+ICh7IG5hbWU6IFwicmFkaW8tZGVtb1wiIH0pLFxyXG4gICAgICAgICAgICAgICAgbWFrZUxhYmVsUHJvcHM6ICgpID0+ICh7IGNoaWxkcmVuOiB2YWx1ZSB9KVxyXG4gICAgICAgICAgICB9KX0gLz5cclxuICAgIClcclxufSlcclxuXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEJsdXJiKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8cD48YSBocmVmPVwiaHR0cHM6Ly93d3cudzMub3JnL1dBSS9BUklBL2FwZy9wYXR0ZXJucy9yYWRpb2J1dHRvbi9cIj5JbiBhY2NvcmRhbmNlIHdpdGggdGhlIEFSSUEgZ3VpZGVsaW5lcyBmb3IgUmFkaW8gQnV0dG9uIHBhdHRlcm5zLDwvYT4gdGhpcyB3aWRnZXQgc3VwcG9ydHMgdGhlIGZvbGxvd2luZzo8L3A+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgIDxsaT5UaGUgY2hpbGRyZW4gYXJlIHRyZWF0ZWQgYXMgYSBjb21wb3NpdGUgY29tcG9uZW50IHdpdGggbGlzdCBuYXZpZ2F0aW9uOyBzZWUgPGNvZGU+QWlyYVNpbmdsZVNlbGVjdExpc3Q8L2NvZGU+IGZvciBtb3JlIGluZm9ybWF0aW9uPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaT5UaGUgaW5wdXQgJmFtcDsgbGFiZWwgc3VwcG9ydCB0aGUgc2FtZSB0ZXh0LXNlbGVjdGlvbiBhZmZvcmRhbmNlcyBhcyBDaGVja2JveGVzIChsYWJlbHMgY2FuIGJlIHNlbGVjdGVkLCBidXQgZG91YmxlLWNsaWNraW5nIGRvZXNuJ3Qgc2VsZWN0IHRoZSB0ZXh0IGFuZCBzZWxlY3RpbmcgdGV4dCBkb2Vzbid0IGNvdW50IGFzIGFuIGlucHV0KTwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGk+U2VsZWN0aW9uIHN0YXRlIGlzIGhhbmRsZWQgYnkgdGhlIHBhcmVudDsgaW5zdGVhZCBvZiBzcGVjaWZ5aW5nIHdoZXRoZXIgYW55IGdpdmVuIHJhZGlvIGJ1dHRvbiBpcyBjaGVja2VkIG9yIG5vdCwgdGhlIHBhcmVudCBub3RpZmllcyBlYWNoIGNoaWxkIG9mIHRoZSBuZWNlc3NhcnkgY2hhbmdlcy48L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8cD48c3Ryb25nPlRoaW5ncyA8ZW0+bm90PC9lbT4gaGFuZGxlZDo8L3N0cm9uZz48L3A+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgIDxsaT5JZiB5b3VyIGNoZWNrYm94IGRvZXMgbm90IGhhdmUgYSB2aXNpYmxlIGxhYmVsIChhY2hpZXZhYmxlIGJ5IGJ5IG92ZXJyaWRpbmcgdGhlIDxjb2RlPnJlbmRlcjwvY29kZT4gcHJvcCBhbmQgc2V0dGluZyA8Y29kZT5sYWJlbFBvc2l0aW9uPC9jb2RlPiB0byBiZSBcInNlcGFyYXRlXCIpLCB5b3UgbXVzdCBwYXNzIDxjb2RlPmFyaWEtbGFiZWw8L2NvZGU+IGFzIGEgcHJvcCB0byB0aGUgY2hlY2tib3ggbWFudWFsbHkuIE5vdCBwcm92aWRpbmcgb25lIHdpbGwgcHJpbnQgYW4gZXJyb3IgdG8gdGhlIGNvbnNvbGUsIGJ1dCBpdCBpdCBub3QgcmVxdWlyZWQgYnkgdGhlIHR5cGUgc3lzdGVtLjwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGk+VGhlIGFib3ZlIGFsc28gYXBwbGllcyB0byB0aGUgcmFkaW8gZ3JvdXAgYXMgYSB3aG9sZTsgQVJJQSByZXF1aXJlcyB0aGF0IGFsbCBSYWRpbyBCdXR0b25zIGJlIGNvbnRhaW5lZCB3aXRoaW4gYW4gZWxlbWVudCB3aXRoIGEgc3BlY2lmaWMgcm9sZSB3aGljaCBpcyBsYWJlbGxlZCBlaXRoZXIgYnkgYW4gZWxlbWVudCAoaGFuZGxlZCBmb3IgeW91KSBvciA8Y29kZT5hcmlhLWxhYmVsPC9jb2RlPiAoc3BlY2lmaWVkIGJ5IHlvdSBtYW51YWxseSBvbiB0aGUgaW5wdXQpLjwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDb2RlKCkge1xyXG4gICAgcmV0dXJuICg8Y29kZT57YGB9PC9jb2RlPilcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIERlbW8oKSB7XHJcbiAgICBjb25zdCBbc2VsZWN0ZWRJbmRleCwgc2V0U2VsZWN0ZWRJbmRleF0gPSB1c2VTdGF0ZTxudWxsIHwgbnVtYmVyPihudWxsKTtcclxuICAgIGNvbnN0IFtjb3VudCwgc2V0Q291bnRdID0gdXNlU3RhdGUoNSk7XHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPEJsdXJiIC8+XHJcbiAgICAgICAgICAgIDxDb2RlIC8+XHJcbiAgICAgICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cIm51bWJlclwiIG1pbj17MH0gdmFsdWU9e2NvdW50fSBvbklucHV0PXtlID0+IHNldENvdW50KGUuY3VycmVudFRhcmdldC52YWx1ZUFzTnVtYmVyKX0gLz4gIyBvZiByYWRpbyBidXR0b25zPC9sYWJlbD5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxSYWRpb0dyb3VwPG51bWJlciwgSFRNTERpdkVsZW1lbnQsIEhUTUxMYWJlbEVsZW1lbnQsIEhUTUxJbnB1dEVsZW1lbnQsIEhUTUxMYWJlbEVsZW1lbnQ+XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZT1cInJhZGlvLWRlbW9cIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0ZWRWYWx1ZUNoYW5nZT17ZSA9PiBzZXRTZWxlY3RlZEluZGV4KGVbRXZlbnREZXRhaWxdLnNlbGVjdGVkVmFsdWUgPz8gMCl9XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRWYWx1ZT17c2VsZWN0ZWRJbmRleH1cclxuICAgICAgICAgICAgICAgICAgICB0YWdHcm91cExhYmVsPVwibGFiZWxcIlxyXG4gICAgICAgICAgICAgICAgICAgIHRhZ0dyb3VwPVwiZGl2XCJcclxuICAgICAgICAgICAgICAgICAgICByZW5kZXI9e2RlZmF1bHRSZW5kZXJSYWRpb0dyb3VwKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnR3JvdXA6IFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0xhYmVsOiBcImxhYmVsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VQcm9wc0dyb3VwOiAoKSA9PiAoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge0FycmF5LmZyb20oKGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCA8RGVtb1JhZGlvQnV0dG9uIGluZGV4PXtpfSBrZXk9e2l9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKCkpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVByb3BzTGFiZWw6IChpbmZvKSA9PiAoeyBjaGlsZHJlbjogXCJSYWRpbyBncm91cCBleGFtcGxlIFwiICsgXCIoXCIgKyBpbmZvLnJhZGlvR3JvdXAuc2VsZWN0ZWRJbmRleD8udG9TdHJpbmcoKSArIFwiKVwiIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSl9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59IiwiXHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgRXZlbnREZXRhaWwsIExpc3Rib3hTaW5nbGUgfSBmcm9tIFwiLi4vLi4vaW5kZXhcIjtcclxuaW1wb3J0IHsgZGVmYXVsdFJlbmRlclNsaWRlclRodW1iLCBTbGlkZXJUaHVtYiwgU2xpZGVyIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudC9zbGlkZXJcIlxyXG5cclxuZnVuY3Rpb24gRGVtb1NsaWRlclRodW1iKHsgaW5kZXggfTogeyBpbmRleDogbnVtYmVyIH0pIHtcclxuICAgIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGUoMCk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8U2xpZGVyVGh1bWI8SFRNTElucHV0RWxlbWVudD5cclxuICAgICAgICAgICAgaW5kZXg9e2luZGV4fVxyXG4gICAgICAgICAgICB0YWc9XCJpbnB1dFwiXHJcbiAgICAgICAgICAgIGxhYmVsPXtgU2xpZGVyIHRodW1iICMke2luZGV4fWB9XHJcbiAgICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cclxuICAgICAgICAgICAgb25WYWx1ZUNoYW5nZT17ZSA9PiBzZXRWYWx1ZShlW0V2ZW50RGV0YWlsXS52YWx1ZSl9XHJcbiAgICAgICAgICAgIG1pbj17MH1cclxuICAgICAgICAgICAgbWF4PXsxMH1cclxuICAgICAgICAgICAgcmVuZGVyPXtkZWZhdWx0UmVuZGVyU2xpZGVyVGh1bWIoeyB0YWdUaHVtYjogXCJpbnB1dFwiLCBtYWtlUHJvcHNUaHVtYjogKCkgPT4gKHt9KSB9KX0gLz5cclxuICAgIClcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RG9jdW1lbnQoKSB7IHJldHVybiB3aW5kb3cuZG9jdW1lbnQ7IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBCbHVyYigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPHA+PGEgaHJlZj1cImh0dHBzOi8vd3d3LnczLm9yZy9XQUkvQVJJQS9hcGcvcGF0dGVybnMvbGlzdGJveC9cIj5JbiBhY2NvcmRhbmNlIHdpdGggdGhlIEFSSUEgZ3VpZGVsaW5lcyBmb3IgTGlzdGJveCBwYXR0ZXJucyw8L2E+IHRoaXMgd2lkZ2V0IHN1cHBvcnRzIHRoZSBmb2xsb3dpbmc6PC9wPlxyXG4gICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICA8bGk+VGhlIGNoaWxkcmVuIGFyZSB0cmVhdGVkIGFzIGEgY29tcG9zaXRlIGNvbXBvbmVudCB3aXRoIGxpc3QgbmF2aWdhdGlvbjsgc2VlIDxjb2RlPkFpcmFTaW5nbGVTZWxlY3RMaXN0PC9jb2RlPiBmb3IgbW9yZSBpbmZvcm1hdGlvbjwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGk+V2hlbiBvcGVuZWQsIHRoZSBtZW51IHdpbGwgZm9jdXMgdGhlIGZpcnN0IGVsZW1lbnQgd2l0aGluIGl0LiBXaGVuIGNsb3NlZCAoYnkgcHJlc3NpbmcgZXNjYXBlLCBwcmVzc2luZyB0aGUgYnV0dG9uIGFnYWluLCBvciB0YWJiaW5nIG91dCBvZiB0aGUgbWVudSksIHRoZSBidXR0b24gdGhhdCBvcGVuZWQgaXQgd2lsbCBoYXZlIGZvY3VzIHJlc3RvcmVkIHRvIGl0LjwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGk+V2hlbiB0aGUgbWVudSBpcyBjbG9zZWQgYmVjYXVzZSBhbm90aGVyIGVsZW1lbnQgb24gdGhlIHBhZ2Ugd2FzIGZvY3VzZWQgaW5zdGVhZCwgZm9jdXMgd2lsbCBub3QgYmUgbW9kaWZpZWQuPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgPHA+PHN0cm9uZz5UaGluZ3MgPGVtPm5vdDwvZW0+IGhhbmRsZWQ6PC9zdHJvbmc+PC9wPlxyXG4gICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICA8bGk+VE9ETzwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDb2RlKCkge1xyXG4gICAgcmV0dXJuICg8Y29kZT57YGB9PC9jb2RlPilcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIERlbW8oKSB7XHJcbiAgICBjb25zdCBbY291bnQsIHNldENvdW50XSA9IHVzZVN0YXRlKDUpO1xyXG4gICAgY29uc3QgW29wZW4sIHNldE9wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxCbHVyYiAvPlxyXG4gICAgICAgICAgICA8Q29kZSAvPlxyXG4gICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJudW1iZXJcIiBtaW49ezB9IHZhbHVlPXtjb3VudH0gb25JbnB1dD17ZSA9PiBzZXRDb3VudChlLmN1cnJlbnRUYXJnZXQudmFsdWVBc051bWJlcil9IC8+ICMgb2Ygc2xpZGVyIHRodW1iczwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8U2xpZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgbWluPXswfVxyXG4gICAgICAgICAgICAgICAgICAgIG1heD17MTB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW49ezw+e0FycmF5LmZyb20oKGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgPGRpdj48RGVtb1NsaWRlclRodW1iIGluZGV4PXtpfSBrZXk9e2l9IC8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KSgpKX1cclxuICAgICAgICAgICAgICAgICAgICA8Lz59IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59IiwiXHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgZGVmYXVsdFJlbmRlckRpYWxvZywgRGlhbG9nIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudC9kaWFsb2dcIjtcclxuaW1wb3J0IHsgQnV0dG9uLCBkZWZhdWx0UmVuZGVyQnV0dG9uIH0gZnJvbSBcIi4uLy4uL2luZGV4XCI7XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkgeyByZXR1cm4gd2luZG93LmRvY3VtZW50OyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQmx1cmIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxwPjxhIGhyZWY9XCJodHRwczovL3d3dy53My5vcmcvV0FJL0FSSUEvYXBnL3BhdHRlcm5zL2RpYWxvZ21vZGFsL1wiPkluIGFjY29yZGFuY2Ugd2l0aCB0aGUgQVJJQSBndWlkZWxpbmVzIGZvciBNb2RhbCBEaWFsb2cgcGF0dGVybnMsPC9hPiB0aGlzIHdpZGdldCBzdXBwb3J0cyB0aGUgZm9sbG93aW5nOjwvcD5cclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgPGxpPkRpYWxvZ3MgYmxvY2sgYWxsIG90aGVyIGVsZW1lbnRzIG9uIHRoZSBwYWdlIGZyb20gcmVjZWl2aW5nIGZvY3VzL2ludGVyYWN0aW9uIGFuZCBiZWluZyBwZXJjZWl2YWJsZSB0byBzY3JlZW4gcmVhZGVycy48L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPkRpYWxvZ3MgY2FuIGJlIGRpc21pc3NlZCBieSBwcmVzc2luZyBFc2NhcGUgb3IgY2xpY2tpbmcgdGhlIGVsZW1lbnQgZGVzaWduYXRlZCBhcyB0aGUgYmFja2Ryb3AsIGJvdGggb2Ygd2hpY2ggY2FuIGJlIGNhbmNlbGxlZC9pZ25vcmVkIGlmIHlvdSBuZWVkPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaT5XaGVuIG9wZW5lZCwgdGhlIGRpYWxvZyB3aWxsIGZvY3VzIGl0cyB0aXRsZSBvciBib2R5IGNvbnRlbnQgYXMgYXBwcm9wcmlhdGUsIGhvd2V2ZXIgcmVhZCBiZWxvdyB1bmRlciBUaGluZ3MgTm90IEhhbmRsZWQgZm9yIGNhdmVhdHMuPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaT5XaGVuIGNsb3NlZCBmb3IgYW55IHJlYXNvbiwgdGhlIGVsZW1lbnQgdGhhdCB3YXMgcmVzcG9uc2libGUgZm9yIG9wZW5pbmcgdGhlIGRpYWxvZyB3aWxsIGJlIGZvY3VzZWQuPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgPHA+PHN0cm9uZz5UaGluZ3MgPGVtPm5vdDwvZW0+IGhhbmRsZWQ6PC9zdHJvbmc+PC9wPlxyXG4gICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICA8bGk+QnkgZGVmYXVsdCwgd2hlbiBvcGVuZWQsIGEgZGlhbG9nIHdpbGwgZm9jdXMgaXRzIGJvZHkgY29udGVudCBvciB0aXRsZSBjb250ZW50IGRlcGVuZGluZyBvbiA8Y29kZT5ib2R5SXNPbmx5U2VtYW50aWM8L2NvZGU+LCB3aGljaCBpbmRpY2F0ZXMgdGhhdCB0aGUgZGlhbG9nJ3MgYm9keSBjb250YWlucyBubyBpbnRlcmFjdGl2ZSBlbGVtZW50cy4gVGhpcyBtYXkgbm90IGJlIHN1aXRhYmxlIGZvciBhbGwgc2l0dWF0aW9ucy48L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpPkl0IGlzIDxlbT5oaWdodGx5PC9lbT4gcmVjb21tZW5kZWQgdG8gb3ZlcnJpZGUgPGNvZGU+Zm9jdXNTZWxmPC9jb2RlPiBmb3IgYWxsIGRpYWxvZ3MgeW91IGNyZWF0ZSwgYW5kIGhhdmUgaXQgZm9jdXMgd2hhdGV2ZXIgZWxlbWVudCBtYWtlcyB0aGUgbW9zdCBzZW5zZSBmb3IgeW91ciBwYXJ0aWN1bGFyIGRpYWxvZy5cclxuICAgICAgICAgICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EaWFsb2dzIHRoYXQgYWN0IGxpa2UgYSBmb3JtIHNob3VsZCBmb2N1cyB0aGUgZmlyc3QgaW50ZXJhY3RpdmUgZWxlbWVudDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EaWFsb2dzIHRoYXQgcGVyZm9ybSBkZXN0cnVjdGl2ZSBhY3Rpb25zIHNob3VsZCBmb2N1cyB0aGUgXCJDYW5jZWxcIiBidXR0b248L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+SW4gc29tZSBjYXNlcywgaXQncyBiZXN0IHRvIGZvY3VzIHRoZSBmaXJzdCBwYXJhZ3JhcGggb2YgdGhlIGJvZHkuPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgICAgIEluIGFsbCBjYXNlcywgY29uc2lkZXIgdGhhdCB0aGUgZmlyc3QgZm9jdXNlZCBlbGVtZW50IHdpbGwgYm90aCBiZSBob3cga2V5Ym9hcmQgdXNlcnMgaW50ZXJhY3Qgd2l0aCB0aGUgZGlhbG9nLCBidXQgYWxzbyB0aGUgZmlyc3QgdGhpbmcgYSBzY3JlZW4gcmVhZGVyIHdpbGwgcmVhZCBhbG91ZC5cclxuICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDb2RlKCkge1xyXG4gICAgcmV0dXJuICg8Y29kZT57YGB9PC9jb2RlPilcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIERlbW8oKSB7XHJcbiAgICBjb25zdCBbb3Blbiwgc2V0T3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPEJsdXJiIC8+XHJcbiAgICAgICAgICAgIDxDb2RlIC8+XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uIHRhZ0J1dHRvbj1cImJ1dHRvblwiIGdldERvY3VtZW50PXtnZXREb2N1bWVudH0gb25QcmVzcz17KCkgPT4gc2V0T3Blbih0cnVlKX0gcmVuZGVyPXtkZWZhdWx0UmVuZGVyQnV0dG9uKFwiYnV0dG9uXCIsICgpID0+ICh7IGNoaWxkcmVuOiBcIk9wZW4gZGlhbG9nIFwiICsgKG9wZW4gPyBcIihvcGVuKVwiIDogXCIoY2xvc2VkKVwiKSB9KSl9IC8+XHJcbiAgICAgICAgICAgICAgICA8RGlhbG9nXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0RG9jdW1lbnQ9e2dldERvY3VtZW50fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xvc2U9eygpID0+IHNldE9wZW4oZmFsc2UpfVxyXG4gICAgICAgICAgICAgICAgICAgIG9wZW49e29wZW59XHJcbiAgICAgICAgICAgICAgICAgICAgYm9keUlzT25seVNlbWFudGljPXt0cnVlfVxyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcj17ZGVmYXVsdFJlbmRlckRpYWxvZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcnRhbElkOiBcInBvcnRhbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWtlUHJvcHNCYWNrZHJvcDogKCkgPT4gKHt9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVByb3BzRm9jdXNDb250YWluZXI6ICgpID0+ICh7fSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VQcm9wc0JvZHk6ICgpID0+ICh7IGNoaWxkcmVuOiBcIkRpYWxvZyBib2R5XCIgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VQcm9wc0RpYWxvZzogKCkgPT4gKHsgc3R5bGU6IHsgZGlzcGxheTogIW9wZW4gPyBcIm5vbmVcIiA6IHVuZGVmaW5lZCB9IH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWtlUHJvcHNUaXRsZTogKCkgPT4gKHsgY2hpbGRyZW46IFwiRGlhbG9nIHRpdGxlXCIgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0JhY2tkcm9wOiBcImRpdlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdCb2R5OiBcImRpdlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdEaWFsb2c6IFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ1RpdGxlOiBcImRpdlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdGb2N1c0NvbnRhaW5lcjogXCJkaXZcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC8+XHJcbiAgICApXHJcbn1cclxuIiwiXHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgbWVtbyB9IGZyb20gXCJwcmVhY3QvY29tcGF0XCI7XHJcbmltcG9ydCB7IGRlZmF1bHRSZW5kZXJUYWIsIGRlZmF1bHRSZW5kZXJUYWJQYW5lbCwgZGVmYXVsdFJlbmRlclRhYnMsIFRhYnMgfSBmcm9tIFwiLi4vLi4vXCI7XHJcbmltcG9ydCB7IFRhYiwgVGFiUGFuZWwgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50L3RhYnNcIjtcclxuaW1wb3J0IHsgRXZlbnREZXRhaWwgfSBmcm9tIFwiLi4vLi4vaW5kZXhcIjtcclxuXHJcblxyXG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHsgcmV0dXJuIHdpbmRvdy5kb2N1bWVudDsgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEJsdXJiKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8cD48YSBocmVmPVwiaHR0cHM6Ly93d3cudzMub3JnL1dBSS9BUklBL2FwZy9wYXR0ZXJucy90YWJwYW5lbC9cIj5JbiBhY2NvcmRhbmNlIHdpdGggdGhlIEFSSUEgZ3VpZGVsaW5lcyBmb3IgVGFiIGFuZCBUYWIgUGFuZWwgcGF0dGVybnMsPC9hPiB0aGlzIHdpZGdldCBzdXBwb3J0cyB0aGUgZm9sbG93aW5nOjwvcD5cclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgPGxpPlRoZSB0YWJzIGFyZSB0cmVhdGVkIGFzIGEgY29tcG9zaXRlIGNvbXBvbmVudCB3aXRoIGxpc3QgbmF2aWdhdGlvbjsgc2VlIDxjb2RlPkFpcmFTaW5nbGVTZWxlY3RMaXN0PC9jb2RlPiBmb3IgbW9yZSBpbmZvcm1hdGlvbjwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDxwPjxzdHJvbmc+VGhpbmdzIDxlbT5ub3Q8L2VtPiBoYW5kbGVkOjwvc3Ryb25nPjwvcD5cclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgPGxpPlRPRE88L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ29kZSgpIHtcclxuICAgIHJldHVybiAoPGNvZGU+e2BgfTwvY29kZT4pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBEZW1vKCkge1xyXG4gICAgY29uc3QgW2NvdW50LCBzZXRDb3VudF0gPSB1c2VTdGF0ZSg1KTtcclxuICAgIGNvbnN0IFtzZWxlY3RlZEluZGV4LCBzZXRTZWxlY3RlZEluZGV4XSA9IHVzZVN0YXRlKDApO1xyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxCbHVyYiAvPlxyXG4gICAgICAgICAgICA8Q29kZSAvPlxyXG4gICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJudW1iZXJcIiBtaW49ezB9IHZhbHVlPXtjb3VudH0gb25JbnB1dD17ZSA9PiBzZXRDb3VudChlLmN1cnJlbnRUYXJnZXQudmFsdWVBc051bWJlcil9IC8+ICMgb2YgdGFiczwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8VGFic1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSW5kZXg9e3NlbGVjdGVkSW5kZXh9XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uTW9kZT1cImZvY3VzXCJcclxuICAgICAgICAgICAgICAgICAgICBvblNlbGVjdGVkSW5kZXhDaGFuZ2U9e2UgPT4gc2V0U2VsZWN0ZWRJbmRleChlW0V2ZW50RGV0YWlsXS5zZWxlY3RlZEluZGV4KX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyPXtkZWZhdWx0UmVuZGVyVGFicyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhbmVsczogQXJyYXkuZnJvbSgoZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIDxEZW1vVGFiUGFuZWwgaT17aX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkoKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0xhYmVsOiBcImxhYmVsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ0xpc3Q6IFwidWxcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVByb3BzTGFiZWw6ICgpID0+ICh7IGNoaWxkcmVuOiBcIlRhYnMgZXhhbXBsZVwiIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWtlUHJvcHNMaXN0OiAoKSA9PiAoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IDw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge0FycmF5LmZyb20oKGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgPERlbW9UYWIgaT17aX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKCkpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSl9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvPlxyXG4gICAgKVxyXG59XHJcblxyXG5jb25zdCBEZW1vVGFiID0gbWVtbyhmdW5jdGlvbiBEZW1vVGFiKHsgaSB9OiB7IGk6IG51bWJlciB9KSB7XHJcbiAgICBjb25zdCBsYWJlbCA9IGBUYWIgIyR7aX1gO1xyXG4gICAgcmV0dXJuIDxUYWIga2V5PXtpfSBpbmRleD17aX0gZ2V0RG9jdW1lbnQ9e2dldERvY3VtZW50fSByZW5kZXI9e2RlZmF1bHRSZW5kZXJUYWIoeyB0YWdUYWI6IFwibGlcIiwgbWFrZVByb3BzVGFiOiAoKSA9PiAoeyBjaGlsZHJlbjogbGFiZWwgfSkgfSl9IHRleHQ9e2xhYmVsfSAvPlxyXG59KVxyXG5cclxuY29uc3QgRGVtb1RhYlBhbmVsID0gbWVtbyhmdW5jdGlvbiBEZW1vVGFiUGFuZWwoeyBpIH06IHsgaTogbnVtYmVyIH0pIHtcclxuICAgIGNvbnN0IGxhYmVsID0gYFRhYiBwYW5lbCAjJHtpfWA7XHJcbiAgICByZXR1cm4gPFRhYlBhbmVsIGluZGV4PXtpfSBrZXk9e2l9IHJlbmRlcj17ZGVmYXVsdFJlbmRlclRhYlBhbmVsKHsgdGFnVGFiUGFuZWw6IFwiZGl2XCIsIG1ha2VQcm9wc1RhYlBhbmVsOiAoeyB0YWJQYW5lbDogeyB2aXNpYmxlIH0gfSkgPT4gKHsgaGlkZGVuOiAhdmlzaWJsZSwgY2hpbGRyZW46IGxhYmVsIH0pIH0pfSAvPlxyXG59KVxyXG5cclxuIiwiXHJcbmltcG9ydCB7IHJlbmRlciwgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgSGVhZGluZyB9IGZyb20gXCIuLi9jb21wb25lbnQvaGVhZGluZ1wiO1xyXG5pbXBvcnQgKiBhcyBBY2NvcmRpb24gZnJvbSBcIi4vZGVtb3MvYWNjb3JkaW9uXCJcclxuaW1wb3J0ICogYXMgQnV0dG9uIGZyb20gXCIuL2RlbW9zL2J1dHRvblwiXHJcbmltcG9ydCAqIGFzIENoZWNrYm94IGZyb20gXCIuL2RlbW9zL2NoZWNrYm94XCJcclxuaW1wb3J0ICogYXMgQ2hlY2tib3hHcm91cCBmcm9tIFwiLi9kZW1vcy9jaGVja2JveC1ncm91cFwiXHJcbmltcG9ydCAqIGFzIExpc3Rib3hNdWx0aSBmcm9tIFwiLi9kZW1vcy9saXN0Ym94LW11bHRpXCJcclxuaW1wb3J0ICogYXMgTGlzdGJveFNpbmdsZSBmcm9tIFwiLi9kZW1vcy9saXN0Ym94LXNpbmdsZVwiXHJcbmltcG9ydCAqIGFzIE1lbnUgZnJvbSBcIi4vZGVtb3MvbWVudVwiXHJcbmltcG9ydCAqIGFzIFJhZGlvIGZyb20gXCIuL2RlbW9zL3JhZGlvXCJcclxuaW1wb3J0ICogYXMgU2xpZGVyIGZyb20gXCIuL2RlbW9zL3NsaWRlclwiXHJcbmltcG9ydCAqIGFzIERpYWxvZyBmcm9tIFwiLi9kZW1vcy9kaWFsb2dcIlxyXG5pbXBvcnQgKiBhcyBUYWJzIGZyb20gXCIuL2RlbW9zL3RhYnNcIlxyXG5cclxuLy9pbXBvcnQgeyBvcHRpb25zIH0gZnJvbSBcInByZWFjdFwiO1xyXG4vL29wdGlvbnMuZGVib3VuY2VSZW5kZXJpbmcgPSBxdWV1ZU1pY3JvdGFzaztcclxuXHJcbi8vY29uc3QgUmFuZG9tV29yZHMgPSBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0cnVkIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxhYm9yaXMgbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LiBEdWlzIGF1dGUgaXJ1cmUgZG9sb3IgaW4gcmVwcmVoZW5kZXJpdCBpbiB2b2x1cHRhdGUgdmVsaXQgZXNzZSBjaWxsdW0gZG9sb3JlIGV1IGZ1Z2lhdCBudWxsYSBwYXJpYXR1ci4gRXhjZXB0ZXVyIHNpbnQgb2NjYWVjYXQgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bS5cIi5zcGxpdChcIiBcIik7XHJcblxyXG5cclxuY29uc3QgQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8SGVhZGluZyBoZWFkaW5nPVwiRGVtb3NcIj5cclxuICAgICAgICAgICAgPEhlYWRpbmcgaGVhZGluZz1cIlRhYnNcIj48VGFicy5EZW1vIC8+PC9IZWFkaW5nPlxyXG4gICAgICAgICAgICA8SGVhZGluZyBoZWFkaW5nPVwiRGlhbG9nXCI+PERpYWxvZy5EZW1vIC8+PC9IZWFkaW5nPlxyXG4gICAgICAgICAgICA8SGVhZGluZyBoZWFkaW5nPVwiU2xpZGVyXCI+PFNsaWRlci5EZW1vIC8+PC9IZWFkaW5nPlxyXG4gICAgICAgICAgICA8SGVhZGluZyBoZWFkaW5nPVwiU2luZ2xlLXNlbGVjdCBMaXN0Ym94XCI+PExpc3Rib3hTaW5nbGUuRGVtbyAvPjwvSGVhZGluZz5cclxuICAgICAgICAgICAgPEhlYWRpbmcgaGVhZGluZz1cIkFjY29yZGlvblwiPjxBY2NvcmRpb24uRGVtbyAvPjwvSGVhZGluZz5cclxuICAgICAgICAgICAgPEhlYWRpbmcgaGVhZGluZz1cIkJ1dHRvblwiPjxCdXR0b24uRGVtbyAvPjwvSGVhZGluZz5cclxuICAgICAgICAgICAgPEhlYWRpbmcgaGVhZGluZz1cIkNoZWNrYm94XCI+PENoZWNrYm94LkRlbW8gLz48L0hlYWRpbmc+XHJcbiAgICAgICAgICAgIDxIZWFkaW5nIGhlYWRpbmc9XCJDaGVja2JveCBHcm91cFwiPjxDaGVja2JveEdyb3VwLkRlbW8gLz48L0hlYWRpbmc+XHJcbiAgICAgICAgICAgIDxIZWFkaW5nIGhlYWRpbmc9XCJNdWx0aS1zZWxlY3QgTGlzdGJveFwiPjxMaXN0Ym94TXVsdGkuRGVtbyAvPjwvSGVhZGluZz5cclxuICAgICAgICAgICAgPEhlYWRpbmcgaGVhZGluZz1cIk1lbnVcIj48TWVudS5EZW1vIC8+PC9IZWFkaW5nPlxyXG4gICAgICAgICAgICA8SGVhZGluZyBoZWFkaW5nPVwiUmFkaW9cIj48UmFkaW8uRGVtbyAvPjwvSGVhZGluZz5cclxuICAgICAgICAgICAgey8qXHJcbiAgICAgICBcclxuICAgICAgICA8RGVtb1RhYmxlIC8+XHJcblxyXG5cclxuICAgICAgICA8RGVtb1VzZUZvY3VzVHJhcCAvPlxyXG4gICAgICAgIDxEZW1vVXNlRHJvcHBhYmxlIC8+XHJcbiAgICAgICAgPERlbW9Vc2VEcmFnZ2FibGUgLz5cclxuICAgICAgICA8aW5wdXQgLz4qL31cclxuICAgICAgICA8L0hlYWRpbmc+KVxyXG59XHJcblxyXG5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgcmVuZGVyKDxDb21wb25lbnQgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSEpO1xyXG59KVxyXG4iXSwibmFtZXMiOlsiRXZlbnREZXRhaWwiLCJTeW1ib2wiLCJIZWFkaW5nTGV2ZWxDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIkhlYWRpbmciLCJjaGlsZHJlbiIsImhlYWRpbmciLCJwcm9wcyIsImhlYWRpbmdMZXZlbEJlZm9yZVVzIiwidXNlQ29udGV4dCIsInRhZyIsIm5ld0hlYWRpbmdMZXZlbCIsIndhcm5Pbk92ZXJ3cml0ZSIsIl9qc3giLCJfanN4cyIsIkhlYWRpbmdSZXNldCIsIm5ld0xldmVsIiwidXNlRW5zdXJlU3RhYmlsaXR5IiwicGFyZW50SG9va05hbWUiLCJ2YWx1ZXMiLCJsZW5ndGgiLCJmb3JFYWNoIiwidmFsdWUiLCJpbmRleCIsImhlbHBlclRvRW5zdXJlU3RhYmlsaXR5IiwidXNlUmVmIiwic2hvd25FcnJvciIsImN1cnJlbnQiLCJjb25zb2xlIiwiZXJyb3IiLCJ1c2VQYXNzaXZlU3RhdGUiLCJvbkNoYW5nZSIsImdldEluaXRpYWxWYWx1ZSIsImN1c3RvbURlYm91bmNlUmVuZGVyaW5nIiwidmFsdWVSZWYiLCJVbnNldCIsIndhcm5pbmdSZWYiLCJjbGVhbnVwQ2FsbGJhY2tSZWYiLCJ1bmRlZmluZWQiLCJvblNob3VsZENsZWFuVXAiLCJ1c2VDYWxsYmFjayIsImNsZWFudXBDYWxsYmFjayIsInRyeUVuc3VyZVZhbHVlIiwiaW5pdGlhbFZhbHVlIiwiZXgiLCJnZXRWYWx1ZSIsIndhcm4iLCJ1c2VMYXlvdXRFZmZlY3QiLCJyIiwicHJldkRlcCIsInNldFZhbHVlIiwiYXJnIiwibmV4dFZhbHVlIiwiRnVuY3Rpb24iLCJkZWJvdW5jZVJlbmRlcmluZyIsIm5leHREZXAiLCJhY3RpdmVFbGVtZW50VXBkYXRlcnMiLCJNYXAiLCJsYXN0QWN0aXZlRWxlbWVudFVwZGF0ZXJzIiwid2luZG93Rm9jdXNlZFVwZGF0ZXJzIiwiZm9yRWFjaFVwZGF0ZXIiLCJ3aW5kb3ciLCJtYXAiLCJnZXQiLCJ1cGRhdGVycyIsInVwZGF0ZXIiLCJsYXN0U2VudCIsInNlbmQiLCJmb2N1c291dCIsImUiLCJ0YXJnZXQiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJyZWxhdGVkVGFyZ2V0Iiwid2luZG93Qmx1ciIsIldpbmRvdyIsImN1cnJlbnRUYXJnZXQiLCJ3aW5kb3dzRm9jdXNlZFVwZGF0ZXJzIiwic2V0IiwiVGFibGUiLCJiYXNlNjQiLCJyYW5kb202Qml0cyIsImdlbmVyYXRlUmFuZG9tSWQiLCJwcmVmaXgiLCJyYW5kb202NEJpdHMiLCJuIiwiam9pbiIsInByZXZpb3VzSW5wdXRzIiwidG9SdW4iLCJjb21taXROYW1lIiwib3JpZ2luYWxDb21taXQiLCJvcHRpb25zIiwibmV3Q29tbWl0IiwiaWQiLCJlZmZlY3RJbmZvIiwiY2xlYXIiLCJhcmdzIiwiZWZmZWN0IiwiaW5wdXRzIiwidXNlU3RhYmxlR2V0dGVyIiwicmVmIiwidXNlQmVmb3JlTGF5b3V0RWZmZWN0IiwiRXJyb3IiLCJmbiIsImN1cnJlbnRDYWxsYmFja0dldHRlciIsImlzT2JqZWN0IiwidHlwZSIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJPYmplY3QiLCJmcmVlU2VsZiIsInNlbGYiLCJyb290Iiwib2JqZWN0UHJvdG8iLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwidG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiZ2V0UmF3VGFnIiwiaXNPd24iLCJjYWxsIiwidW5tYXNrZWQiLCJyZXN1bHQiLCJvYmplY3RUb1N0cmluZyIsIm51bGxUYWciLCJ1bmRlZmluZWRUYWciLCJiYXNlR2V0VGFnIiwiaXNPYmplY3RMaWtlIiwidXNlU3RhdGUiLCJpbml0aWFsU3RhdGUiLCJzdGF0ZSIsInNldFN0YXRlUCIsInVzZVN0YXRlUCIsInNldFN0YXRlIiwiY2FsbGJhY2siLCJwcmV2VmFsdWUiLCJ1c2VNYW5hZ2VkQ2hpbGRyZW4iLCJwYXJlbnRQYXJhbWV0ZXJzIiwibWFuYWdlZENoaWxkcmVuIiwib25BZnRlckNoaWxkTGF5b3V0RWZmZWN0Iiwib25DaGlsZHJlbk1vdW50Q2hhbmdlIiwiZ2V0SGlnaGVzdEluZGV4IiwibWFuYWdlZENoaWxkcmVuQXJyYXkiLCJoaWdoZXN0SW5kZXgiLCJhcnIiLCJyZWMiLCJsb3dlc3RJbmRleCIsImYiLCJjaGlsZCIsImZpZWxkIiwiaGFzUmVtb3RlVUxFQ2hpbGRNb3VudGVkIiwiU2V0IiwicmVtb3RlVUxFQ2hpbGRDaGFuZ2VkIiwicmVtb3RlVUxFQ2hpbGRDaGFuZ2VkQ2F1c2VycyIsInNpemUiLCJhZGQiLCJtb3VudGVkIiwibW91bnRzIiwidW5tb3VudHMiLCJNYXRoIiwibWF4Iiwic2hhdmUiLCJzcGxpY2UiLCJ1c2VNYW5hZ2VkQ2hpbGQiLCJtYW5hZ2VkQ2hpbGQiLCJpbmZvIiwiZmxhZ3MiLCJzdWJJbmZvIiwiZW50cmllcyIsImZsYXQiLCJyZW1vdGVVTEVDaGlsZE1vdW50ZWQiLCJ0IiwiQXJyYXkiLCJpc0FycmF5IiwiY2xzeCIsImFyZ3VtZW50cyIsImdldERvY3VtZW50IiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2xvYmFsVGhpcyIsInVzZU1lcmdlZENoaWxkcmVuIiwibGhzIiwicmhzIiwiY3JlYXRlRWxlbWVudCIsIkZyYWdtZW50IiwidXNlTWVyZ2VkQ2xhc3NlcyIsImNsYXNzIiwibGhzQ2xhc3MiLCJjbGFzc05hbWUiLCJsaHNDbGFzc05hbWUiLCJyaHNDbGFzcyIsInJoc0NsYXNzTmFtZSIsImxoc0NsYXNzZXMiLCJzcGxpdCIsInJoc0NsYXNzZXMiLCJhbGxDbGFzc2VzIiwiZnJvbSIsInByb2Nlc3NSZWYiLCJpbnN0YW5jZSIsImFzc2VydCIsImNvbWJpbmVkIiwic3R5bGVTdHJpbmdUb09iamVjdCIsInN0eWxlIiwiZnJvbUVudHJpZXMiLCJzdGF0ZW1lbnQiLCJ1c2VNZXJnZWRTdHlsZXMiLCJsb2ciLCJ1c2VNZXJnZWRQcm9wcyIsImxoc0FsbCIsInJoc0FsbCIsIl9saHNDaGlsZHJlbiIsIl9saHNDbGFzc05hbWUiLCJfbGhzU3R5bGUiLCJfbGhzUmVmIiwibGhzTWlzYyIsIl9yaHNDaGlsZHJlbiIsIl9yaHNDbGFzcyIsIl9yaHNDbGFzc05hbWUiLCJfcmhzU3R5bGUiLCJfcmhzUmVmIiwicmhzTWlzYyIsInJldCIsInVzZU1lcmdlZFJlZnMiLCJyaHNFbnRyaWVzIiwicmhzS2V5VSIsInJoc1ZhbHVlIiwicmhzS2V5IiwibGhzVmFsdWUiLCJtZXJnZWQiLCJtZXJnZUZ1bmN0aW9ucyIsInVzZVJlZkVsZW1lbnQiLCJvbkVsZW1lbnRDaGFuZ2UiLCJvbk1vdW50Iiwib25Vbm1vdW50IiwiaGFuZGxlciIsImNsZWFudXAiLCJjYW5kaWRhdGVTZWxlY3RvcnMiLCJjYW5kaWRhdGVTZWxlY3RvciIsIm1hdGNoZXMiLCJOb0VsZW1lbnQiLCJFbGVtZW50IiwiZ2V0Q2FuZGlkYXRlcyIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiaW5jbHVkZUNvbnRhaW5lciIsImNhbmRpZGF0ZXMiLCJ1bnNoaWZ0IiwiZWwiLCJnZXRSb290Tm9kZSIsImlzSW5wdXQiLCJub2RlIiwiaXNIaWRkZW5JbnB1dCIsInJhZGlvU2V0IiwiZXNjYXBlIiwidGFnTmFtZSIsInNsaWNlIiwiYXBwbHkiLCJzb21lIiwid2lkdGgiLCJpc0hpZGRlbiIsIm5vZGVVbmRlckRldGFpbHMiLCJob3N0Iiwibm9kZVJvb3RIb3N0IiwiY29udGFpbnMiLCJhdHRhY2hlZCIsIm9yaWdpbmFsTm9kZSIsImlzWmVyb0FyZWEiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJoZWlnaHQiLCJfcmVmIiwiZ2V0U2hhZG93Um9vdCIsImdldENvbXB1dGVkU3R5bGUiLCJ2aXNpYmlsaXR5IiwiaXNEaXJlY3RTdW1tYXJ5IiwiZGlzcGxheUNoZWNrIiwiaXNOb2RlQXR0YWNoZWQiLCJwYXJlbnRFbGVtZW50Iiwicm9vdE5vZGUiLCJzaGFkb3dSb290IiwiYXNzaWduZWRTbG90IiwiZ2V0Q2xpZW50UmVjdHMiLCJwYXJlbnROb2RlIiwiaXNOb2RlTWF0Y2hpbmdTZWxlY3RvckZvY3VzYWJsZSIsImlzRGlzYWJsZWRGcm9tRmllbGRzZXQiLCJpc05vZGVNYXRjaGluZ1NlbGVjdG9yVGFiYmFibGUiLCJkaXNhYmxlZCIsImkiLCJpdGVtIiwidGFiSW5kZXgiLCJpc1Njb3BlIiwiaXNEZXRhaWxzV2l0aFN1bW1hcnkiLCJjYW5kaWRhdGVUYWJpbmRleCIsInJlZ3VsYXJUYWJiYWJsZXMiLCJkb2N1bWVudE9yZGVyIiwiZmFjdG9yeSIsInRoaXMiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfY2xhc3NDYWxsQ2hlY2siLCJUeXBlRXJyb3IiLCJfZm9jdXNhYmxlRWxlbWVudHNTdHJpbmciLCJJbmVydFJvb3QiLCJyb290RWxlbWVudCIsImluZXJ0TWFuYWdlciIsIl9pbmVydE1hbmFnZXIiLCJfcm9vdEVsZW1lbnQiLCJfbWFuYWdlZE5vZGVzIiwiaGFzQXR0cmlidXRlIiwiX3NhdmVkQXJpYUhpZGRlbiIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIl9tYWtlU3VidHJlZVVuZm9jdXNhYmxlIiwiX29ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIl9vbk11dGF0aW9uIiwiYmluZCIsIm9ic2VydmUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImRlc3RydWN0b3IiLCJkaXNjb25uZWN0IiwicmVtb3ZlQXR0cmlidXRlIiwiaW5lcnROb2RlIiwiX3VubWFuYWdlTm9kZSIsInN0YXJ0Tm9kZSIsIl90aGlzMiIsImNvbXBvc2VkVHJlZVdhbGsiLCJfdmlzaXROb2RlIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJub2RlVHlwZSIsIk5vZGUiLCJET0NVTUVOVF9GUkFHTUVOVF9OT0RFIiwiYmx1ciIsImZvY3VzIiwiRUxFTUVOVF9OT0RFIiwiX2Fkb3B0SW5lcnRSb290IiwiX21hbmFnZU5vZGUiLCJyZWdpc3RlciIsImRlcmVnaXN0ZXIiLCJfdW5tYW5hZ2VTdWJ0cmVlIiwiX3RoaXMzIiwiaW5lcnRTdWJyb290IiwiZ2V0SW5lcnRSb290Iiwic2V0SW5lcnQiLCJtYW5hZ2VkTm9kZXMiLCJzYXZlZEluZXJ0Tm9kZSIsInJlY29yZHMiLCJyZWNvcmQiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwiYXR0cmlidXRlTmFtZSIsIm1hbmFnZWROb2RlIiwiYXJpYUhpZGRlbiIsIkluZXJ0Tm9kZSIsImluZXJ0Um9vdCIsIl9ub2RlIiwiX292ZXJyb2RlRm9jdXNNZXRob2QiLCJfaW5lcnRSb290cyIsIl9zYXZlZFRhYkluZGV4IiwiX2Rlc3Ryb3llZCIsImVuc3VyZVVudGFiYmFibGUiLCJfdGhyb3dJZkRlc3Ryb3llZCIsImRlc3Ryb3llZCIsImhhc1NhdmVkVGFiSW5kZXgiLCJhZGRJbmVydFJvb3QiLCJyZW1vdmVJbmVydFJvb3QiLCJJbmVydE1hbmFnZXIiLCJfZG9jdW1lbnQiLCJfd2F0Y2hGb3JJbmVydCIsImFkZEluZXJ0U3R5bGUiLCJoZWFkIiwiZG9jdW1lbnRFbGVtZW50IiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJfb25Eb2N1bWVudExvYWRlZCIsImluZXJ0IiwiaGFzIiwicGFyZW50IiwiX2luZXJ0Um9vdCIsImluZXJ0RWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5lcnRFbGVtZW50IiwiX3RoaXMiLCJzaGFkb3dSb290QW5jZXN0b3IiLCJsb2NhbE5hbWUiLCJjb250ZW50IiwiZGlzdHJpYnV0ZWROb2RlcyIsImdldERpc3RyaWJ1dGVkTm9kZXMiLCJzbG90IiwiX2Rpc3RyaWJ1dGVkTm9kZXMiLCJhc3NpZ25lZE5vZGVzIiwiZmxhdHRlbiIsIl9pIiwiZmlyc3RDaGlsZCIsIm5leHRTaWJsaW5nIiwicXVlcnlTZWxlY3RvciIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJIVE1MRWxlbWVudCIsIl9ibG9ja2luZ0VsZW1lbnRzIiwiX2FscmVhZHlJbmVydEVsZW1lbnRzIiwiX3RvcEVsUGFyZW50cyIsIl9zaWJsaW5nc1RvUmVzdG9yZSIsIl9pbmVydFNpYmxpbmdzIiwiX2dldFBhcmVudHMiLCJfZ2V0RGlzdHJpYnV0ZWRDaGlsZHJlbiIsIl9oYW5kbGVNdXRhdGlvbnMiLCJudWxsYWJsZSIsInRvcCIsImVsZW1zIiwicHVzaCIsImluZGV4T2YiLCJfdG9wQ2hhbmdlZCIsInBvcCIsInJlbW92ZSIsIl9hIiwiX2IiLCJfYyIsIm5ld1RvcCIsInRvS2VlcEluZXJ0Iiwib2xkUGFyZW50cyIsIl9yZXN0b3JlSW5lcnRlZFNpYmxpbmdzIiwibmV3UGFyZW50cyIsInRvU2tpcCIsImoiLCJfc3dhcEluZXJ0ZWRTaWJsaW5nIiwib2xkSW5lcnQiLCJuZXdJbmVydCIsInNpYmxpbmdzVG9SZXN0b3JlIiwiZGVsZXRlIiwiX3BhcmVudE1PIiwiZWxlbWVudHMiLCJtbyIsInNpYmxpbmdzIiwic2libGluZyIsImluZXJ0ZWRTaWJsaW5ncyIsIl9pc0luZXJ0YWJsZSIsInBhcmVudFRvT2JzZXJ2ZSIsIm1heWJlU2hhZHlSb290IiwiX19zaGFkeSIsIm11dGF0aW9ucyIsInBhcmVudHMiLCJtdXRhdGlvbiIsImlkeCIsImluZXJ0ZWRDaGlsZCIsInVzZUJsb2NraW5nRWxlbWVudCIsImVuYWJsZWQiLCJnZXRUYXJnZXQiLCJzdGFibGVHZXRUYXJnZXQiLCJ1c2VTdGFibGVDYWxsYmFjayIsImJsb2NraW5nRWxlbWVudHMiLCJ1c2VGb2N1c1RyYXAiLCJ0cmFwQWN0aXZlIiwiaGFuZGxlQWN0aXZlQ2hhbmdlIiwicmFmSGFuZGxlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicXVldWVNaWNyb3Rhc2siLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImdldFRvcEVsZW1lbnQiLCJlbGVtZW50c1RvUmVzdG9yZUZvY3VzVG8iLCJnZXRMYXN0QWN0aXZlRWxlbWVudCIsImdldEVsZW1lbnQiLCJ1c2VGb3JjZVVwZGF0ZSIsInVzZUhhc0ZvY3VzIiwib25Gb2N1c2VkQ2hhbmdlZCIsIm9uRm9jdXNlZElubmVyQ2hhbmdlZCIsIm9uTGFzdEZvY3VzZWRDaGFuZ2VkIiwib25MYXN0Rm9jdXNlZElubmVyQ2hhbmdlZCIsIm9uTGFzdEFjdGl2ZUVsZW1lbnRDaGFuZ2UiLCJvbkFjdGl2ZUVsZW1lbnRDaGFuZ2UiLCJvbldpbmRvd0ZvY3VzZWRDaGFuZ2UiLCJnZXRXaW5kb3ciLCJnZXRGb2N1c2VkIiwicmV0dXJuRmFsc2UiLCJzZXRGb2N1c2VkSW5uZXIiLCJzZXRMYXN0Rm9jdXNlZCIsInNldExhc3RGb2N1c2VkSW5uZXIiLCJ1c2VSZWZFbGVtZW50UHJvcHMiLCJnZXRBY3RpdmVFbGVtZW50IiwiZ2V0V2luZG93Rm9jdXNlZCIsInVzZUFjdGl2ZUVsZW1lbnQiLCJwcmV2QWN0aXZlRWxlbWVudCIsInNlbGZFbGVtZW50IiwiZm9jdXNlZCIsImZvY3VzZWRJbm5lciIsInNldEZvY3VzZWQiLCJsYXN0QWN0aXZlRWxlbWVudCIsInByZXZMYXN0QWN0aXZlRWxlbWVudCIsInVzZUhhc0ZvY3VzUHJvcHMiLCJnZXRMYXN0Rm9jdXNlZCIsImdldExhc3RGb2N1c2VkSW5uZXIiLCJ1c2VQcmVzcyIsImV4Y2x1ZGUiLCJoYXNGb2N1cyIsIm9uQ2xpY2tTeW5jIiwiYWN0aXZlIiwic2V0QWN0aXZlIiwiZ2V0QWN0aXZlIiwiZm9yY2VVcGRhdGUiLCJwIiwidGV4dFNlbGVjdGVkRHVyaW5nQWN0aXZhdGlvblN0YXJ0VGltZSIsInNldFRleHRTZWxlY3RlZER1cmluZ0FjdGl2YXRpb25TdGFydFRpbWUiLCJwc2V1ZG9BY3RpdmUiLCJ1c2VHbG9iYWxIYW5kbGVyIiwiXyIsInByZXYiLCJub2RlU2VsZWN0ZWRUZXh0TGVuZ3RoIiwiRGF0ZSIsIm9uQWN0aXZlU3RhcnQiLCJhIiwib25BY3RpdmVTdG9wIiwidGltZURpZmZlcmVuY2UiLCJjdXJyZW50VGltZSIsImNoYXJhY3RlcnNTZWxlY3RlZCIsInByZXZlbnREZWZhdWx0IiwiaGFuZGxlUHJlc3MiLCJwdWxzZSIsImV4Y2x1ZGVzIiwiZGV0YWlsIiwiYnV0dG9uIiwib25Nb3VzZVVwIiwib25Nb3VzZUxlYXZlIiwib25DbGljayIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInN0b3BQcm9wYWdhdGlvbiIsInVzZVByZXNzUHJvcHMiLCJvbktleURvd24iLCJjdXJzb3IiLCJ1c2VMb2dpY2FsRGlyZWN0aW9uIiwib25Mb2dpY2FsRGlyZWN0aW9uQ2hhbmdlIiwiZ2V0Q29tcHV0ZWRTdHlsZXMiLCJzZXRDb21wdXRlZFN0eWxlcyIsInJldHVybk51bGwiLCJ1c2VFbGVtZW50U2l6ZVByb3BzIiwidXNlRWxlbWVudFNpemUiLCJvblNpemVDaGFuZ2UiLCJnZXRMb2dpY2FsRGlyZWN0aW9uSW5mbyIsImNvbXB1dGVkU3R5bGVzIiwidyIsIndyaXRpbmdNb2RlIiwiZCIsImRpcmVjdGlvbiIsInRleHRPcmllbnRhdGlvbiIsIldyaXRpbmdNb2RlcyIsImNvbnZlcnRUb0xvZ2ljYWxPcmllbnRhdGlvbiIsImVsZW1lbnRPcmllbnRhdGlvbiIsImNvbnZlcnRUb1BoeXNpY2FsU2lkZSIsInNpZGUiLCJNIiwiYmxvY2tEaXJlY3Rpb24iLCJpbmxpbmVEaXJlY3Rpb24iLCJpbmxpbmVPcmllbnRhdGlvbiIsImNvbnZlcnRUb1BoeXNpY2FsT3JpZW50YXRpb24iLCJibG9ja09yaWVudGF0aW9uIiwiY29udmVydEVsZW1lbnRTaXplIiwiZWxlbWVudFNpemUiLCJpbmxpbmVTaXplIiwiYmxvY2tTaXplIiwiY2FwaXRhbGl6ZSIsImNsaWVudEJsb2NrU2l6ZSIsIm9mZnNldElubGluZVNpemUiLCJvZmZzZXRCbG9ja1NpemUiLCJzY3JvbGxJbmxpbmVTaXplIiwic2Nyb2xsQmxvY2tTaXplIiwiZjEiLCJnZXRQaHlzaWNhbExlZnRUb3AiLCJmMiIsImdldFBoeXNpY2FsUmlnaHRCb3R0b20iLCJmMyIsImY0IiwiY2xpZW50SW5saW5lSW5zZXQiLCJzY3JvbGxJbmxpbmVJbnNldCIsIm9mZnNldElubGluZUluc2V0Iiwic2Nyb2xsQmxvY2tJbnNldCIsIm9mZnNldEJsb2NrSW5zZXQiLCJjbGllbnRCbG9ja0luc2V0IiwiZGlyIiwiYiIsImwiLCJ1c2VUaW1lb3V0IiwidGltZW91dCIsInRyaWdnZXJJbmRleCIsInN0YWJsZUNhbGxiYWNrIiwic3RhcnRUaW1lUmVmIiwiZ2V0VGltZW91dCIsInRpbWVvdXRJc051bGwiLCJ1c2VMaW5lYXJOYXZpZ2F0aW9uIiwibGluZWFyTmF2aWdhdGlvbiIsIm5hdmlnYXRlVG9GaXJzdCIsIm50ZiIsIm5hdmlnYXRlVG9MYXN0IiwibnRsIiwibmF2aWdhdGVUb05leHQiLCJudG4iLCJuYXZpZ2F0ZVRvUHJldiIsIm50cCIsIm5hdmlnYXRpb25EaXJlY3Rpb24iLCJuZCIsImRpc2FibGVBcnJvd0tleXMiLCJkYWsiLCJkaXNhYmxlSG9tZUVuZEtleXMiLCJkaGVrIiwidXNlTG9naWNhbERpcmVjdGlvblByb3BzIiwiZ2V0RGlzYWJsZUhvbWVFbmRLZXlzIiwidXNlTGluZWFyTmF2aWdhdGlvblByb3BzIiwiY3RybEtleSIsIm1ldGFLZXkiLCJnZXROYXZpZ2F0aW9uRGlyZWN0aW9uIiwiZ2V0RGlzYWJsZUFycm93S2V5cyIsImFsbG93c0lubGluZU5hdmlnYXRpb24iLCJwcm9wTmFtZSIsImRpcmVjdGlvbkFsbG93ZWQiLCJhbGxvd3NCbG9ja05hdmlnYXRpb24iLCJ1c2VUeXBlYWhlYWROYXZpZ2F0aW9uIiwidHlwZWFoZWFkTmF2aWdhdGlvbiIsImNvbGxhdG9yIiwiZ2V0SW5kZXgiLCJ0eXBlYWhlYWRUaW1lb3V0Iiwic2V0SW5kZXgiLCJub1R5cGVhaGVhZCIsImN1cnJlbnRUeXBlYWhlYWQiLCJnZXRDdXJyZW50VHlwZWFoZWFkIiwic2V0Q3VycmVudFR5cGVhaGVhZCIsInNldEludmFsaWRUeXBlYWhlYWQiLCJpbnZhbGlkVHlwZWFoZWFkIiwic2V0SW1lQWN0aXZlIiwiZ2V0SW1lQWN0aXZlIiwibmV4dFR5cGVhaGVhZENoYXIiLCJzZXROZXh0VHlwZWFoZWFkQ2hhciIsInR5cGVhaGVhZCIsInNhZmVMaHMiLCJjb21wYXJlIiwibm9ybWFsaXplIiwic2FmZVJocyIsInRvTG93ZXJDYXNlIiwibG9jYWxlQ29tcGFyZSIsImluc2VydGluZ0NvbXBhcmF0b3IiLCJ0ZXh0IiwiY29tcGFyYXRvclNoYXJlZCIsInN1YnN0cmluZyIsInVzZVR5cGVhaGVhZE5hdmlnYXRpb25Qcm9wcyIsIm9uQ29tcG9zaXRpb25TdGFydCIsIl9lIiwiaW1lQWN0aXZlIiwicmV2ZXJzZSIsInVzZVJvdmluZ1RhYkluZGV4IiwiaW5pdGlhbEluZGV4Iiwib25UYWJiYWJsZUluZGV4Q2hhbmdlIiwib25UYWJiYWJsZVJlbmRlciIsInNldFRhYmJhYmxlSW5kZXgyIiwic2V0VGFiYmFibGVJbmRleCIsImZyb21Vc2VySW50ZXJhY3Rpb24iLCJwcmV2SW5kZXgiLCJuZXh0SW5kZXgiLCJjaGFuZ2VJbmRleCIsIm5leHRDaGlsZCIsInBhcmVudFJldHVyblR5cGUiLCJnZXRBdCIsImZvY3VzU2VsZiIsImNvcHlBcnJheSIsInNvdXJjZSIsImFycmF5IiwibmF0aXZlRmxvb3IiLCJmbG9vciIsIm5hdGl2ZVJhbmRvbSIsInJhbmRvbSIsImJhc2VSYW5kb20iLCJsb3dlciIsInVwcGVyIiwic2h1ZmZsZVNlbGYiLCJsYXN0SW5kZXgiLCJyYW5kIiwiYXJyYXlTaHVmZmxlIiwiYXJyYXlNYXAiLCJpdGVyYXRlZSIsImJhc2VWYWx1ZXMiLCJvYmplY3QiLCJiYXNlVGltZXMiLCJhcmdzVGFnIiwiYmFzZUlzQXJndW1lbnRzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJpc0FyZ3VtZW50cyIsInN0dWJGYWxzZSIsImZyZWVFeHBvcnRzIiwiZXhwb3J0cyIsImZyZWVNb2R1bGUiLCJtb2R1bGUiLCJtb2R1bGVFeHBvcnRzIiwiQnVmZmVyIiwibmF0aXZlSXNCdWZmZXIiLCJpc0J1ZmZlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJyZUlzVWludCIsImlzSW5kZXgiLCJ0ZXN0IiwiaXNMZW5ndGgiLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwid2Vha01hcFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJ0eXBlZEFycmF5VGFncyIsImJhc2VJc1R5cGVkQXJyYXkiLCJiYXNlVW5hcnkiLCJmdW5jIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwibm9kZVV0aWwiLCJ0eXBlcyIsInJlcXVpcmUiLCJiaW5kaW5nIiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJTdHJpbmciLCJpc1Byb3RvdHlwZSIsIkN0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvIiwib3ZlckFyZyIsInRyYW5zZm9ybSIsIm5hdGl2ZUtleXMiLCJrZXlzIiwiYmFzZUtleXMiLCJhc3luY1RhZyIsImdlblRhZyIsInByb3h5VGFnIiwiaXNGdW5jdGlvbiIsImlzQXJyYXlMaWtlIiwiYmFzZVNodWZmbGUiLCJjb2xsZWN0aW9uIiwic2h1ZmZsZSIsInNldEZvcmNlVXBkYXRlIiwicmVhcnJhbmdlIiwic29ydGVkUm93cyIsImluZGV4QXNTb3J0ZWQiLCJpbmRleEFzVW5zb3J0ZWQiLCJtYW5nbGVNYXAiLCJkZW1hbmdsZU1hcCIsInVzZVJlYXJyYW5nZWFibGVQcm9wcyIsIl9wcmV2IiwibWFuZ2xlZEluZGV4IiwiaW5kZXhNYW5nbGVyIiwiZGVtYW5nbGVkSW5kZXgiLCJzb3J0IiwiaCIsInJlYXJyYW5nZWFibGVDaGlsZHJlbiIsImluZGV4RGVtYW5nbGVyIiwidXNlU29ydGFibGVDaGlsZHJlbiIsInNvcnRhYmxlQ2hpbGRyZW4iLCJ1c2VyQ29tcGFyZSIsImRlZmF1bHRDb21wYXJlIiwidXNlU29ydGFibGVQcm9wcyIsInJlYXJyYW5nZWFibGVDaGlsZHJlblJldHVyblR5cGUiLCJ1c2VSZWFycmFuZ2VhYmxlQ2hpbGRyZW4iLCJ1c2VMaXN0TmF2aWdhdGlvbiIsIm1jIiwicm92aW5nVGFiSW5kZXgiLCJsaXN0TmF2aWdhdGlvbiIsImlkZW50aXR5IiwibSIsInUiLCJ1c2VSb3ZpbmdUYWJJbmRleENoaWxkIiwiZ2V0VGFiYmFibGVJbmRleCIsIm5hdmlnYXRlVG9JbmRleCIsInRyeU5hdmlnYXRlVG9JbmRleCIsImRlZmF1bHQiLCJzZWFyY2hEaXJlY3Rpb24iLCJ1c2VUeXBlYWhlYWROYXZpZ2F0aW9uQ2hpbGQiLCJjIiwidXNlTGlzdE5hdmlnYXRpb25Qcm9wcyIsInVzZUVmZmVjdCIsInVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQcm9wcyIsInRhYmJhYmxlIiwiZ2V0VGFiYmFibGUiLCJoaWRkZW4iLCJ1c2VMaXN0TmF2aWdhdGlvbkNoaWxkUHJvcHMiLCJ1c2VMaXN0TmF2aWdhdGlvbkNoaWxkIiwidXNlR3JpZE5hdmlnYXRpb24iLCJydGkiLCJscyIsImxuIiwidG4iLCJzZXRDdXJyZW50Q29sdW1uIiwidXNlTGlzdE5hdmlnYXRpb25DaGlsZEFzR3JpZFJvdyIsInVzZUxpc3ROYXZpZ2F0aW9uUHJvcHNBc0dyaWRQYXJlbnQiLCJwYXJlbnRMc1JldHVyblR5cGUiLCJ1c2VHcmlkTmF2aWdhdGlvblJvdyIsImFzQ2hpbGRSb3dPZlNlY3Rpb24iLCJhc0NoaWxkIiwiYXNQYXJlbnRSb3dPZkNlbGxzIiwiYXNQYXJlbnQiLCJjMiIsImdldEN1cnJlbnRDb2x1bW4iLCJ1c2VSYW5kb21JZCIsInJhbmRvbUlkIiwiYmFja3VwUmFuZG9tSWQiLCJnZXRCYWNrdXBSYW5kb21JZCIsInVzZWRJZCIsInNldFVzZWRJZCIsImdldFVzZWRJZCIsIm1pc21hdGNoRXJyb3JSZWYiLCJ1c2VCdXR0b24iLCJ0YWdCdXR0b24iLCJvblByZXNzIiwicHJlc3NlZCIsInVzZUFjY29yZGlvbiIsImFjY29yZGlvbiIsIl9jdXJyZW50Rm9jdXNlZEluZGV4Iiwic2V0Q3VycmVudEZvY3VzZWRJbmRleCIsImdldEN1cnJlbnRGb2N1c2VkSW5kZXgiLCJtY1JldHVyblR5cGUiLCJvY21jMiIsImNoYW5nZVRhYmJlZEluZGV4IiwibGluZWFyUmV0dXJuVHlwZSIsImNoYW5nZUV4cGFuZGVkSW5kZXgiLCJnZXRDdXJyZW50SW5kZXgiLCJfZ2V0Q3VycmVudEV4cGFuZGVkSW5kZXgiLCJ1c2VDaGlsZHJlbkZsYWciLCJfZ2V0VGFiYmVkSW5kZXgiLCJyZWV2YWx1YXRlQ2xvc2VzdEZpdCIsIm9uSW5kZXhDaGFuZ2UiLCJkZWJ1Z0xvZyIsIm9wZW5Gcm9tUGFyZW50Iiwic2V0T3BlbkZyb21QYXJlbnQiLCJnZXRPcGVuRnJvbVBhcmVudCIsInVzZUJvZHlBc1NvdXJjZUlkIiwidXNlUmFuZG9tSWRSZWZlcmVuY2VyRWxlbWVudCIsInVzZUhlYWRlckFzUmVmZXJlbmNlcklkIiwiYm9keUlkIiwiZ2V0Qm9keUlkIiwidXNlUmFuZG9tSWRTb3VyY2VFbGVtZW50IiwidXNlSGVhZGVyQXNTb3VyY2VJZCIsInVzZUJvZHlBc1JlZmVyZW5jZXJJZCIsImhlYWRlcklkIiwiZ2V0SGVhZGVySWQiLCJ1c2VSYW5kb21JZFNvdXJjZUVsZW1lbnRQcm9wcyIsInVzZUJvZHlBc1NvdXJjZUlkUHJvcHMiLCJ1c2VCb2R5QXNSZWZlcmVuY2VySWRQcm9wcyIsInVzZUhlYWRlckFzU291cmNlSWRQcm9wcyIsInVzZVJhbmRvbUlkUmVmZXJlbmNlckVsZW1lbnRQcm9wcyIsInVzZUhlYWRlckFzUmVmZXJlbmNlcklkUHJvcHMiLCJvcGVuIiwib3BlbkZyb21Vc2VyIiwiZ2V0SGVhZGVyRWxlbWVudCIsInVzZUhlYWRlclJlZkVsZW1lbnRQcm9wcyIsImdldEJvZHlFbGVtZW50IiwidXNlQm9keVJlZkVsZW1lbnRQcm9wcyIsIm9wZW5SZWYiLCJib2R5RWxlbWVudCIsImlzVmFsaWQiLCJyZXR1cm5UcnVlIiwidGFiYmVkUmVmIiwidXNlTGFiZWwiLCJsYWJlbCIsInByZWZpeElucHV0IiwicHJlZml4TGFiZWwiLCJ0YWdJbnB1dCIsInRhZ0xhYmVsIiwidXNlTGFiZWxBc1NvdXJjZUlkIiwidXNlTGFiZWxBc1JlZmVyZW5jZXJJZCIsImxhYmVsSWQiLCJnZXRMYWJlbElkIiwidXNlSW5wdXRBc1NvdXJjZUlkIiwidXNlSW5wdXRBc1JlZmVyZW5jZXJJZCIsImlucHV0SWQiLCJnZXRJbnB1dElkIiwidXNlTGFiZWxBc1NvdXJjZUlkUHJvcHMiLCJ1c2VJbnB1dEFzU291cmNlSWRQcm9wcyIsInVzZUxhYmVsQXNSZWZlcmVuY2VySWRQcm9wcyIsInVzZUlucHV0QXNSZWZlcmVuY2VySWRQcm9wcyIsImlzU3ludGhldGljTGFiZWwiLCJ1c2VMYWJlbExhYmVsIiwidXNlTGFiZWxMYWJlbFByb3BzIiwicHJvcHNXaXRob3V0Rm9yIiwicHJvcHNXaXRoRm9yIiwidXNlTGFiZWxJbnB1dCIsInByb3BzV2l0aEFyaWFMYWJlbGxlZEJ5IiwicHJvcHNXaXRob3V0QXJpYUxhYmVsbGVkQnkiLCJoYW5kbGVzSW5wdXQiLCJsYWJlbFBvc2l0aW9uIiwid2hpY2giLCJ1c2VDaGVja2JveExpa2UiLCJjaGVja2JveExpa2UiLCJjaGVja2VkIiwicm9sZSIsIm9uQ2hlY2tlZENoYW5nZSIsImhhc0ZvY3VzSW5wdXQiLCJoYXNGb2N1c0xhYmVsIiwic3RhYmxlT25JbnB1dCIsInVzZUlMSW5wdXQiLCJ1c2VJTExhYmVsIiwiZ2V0TGFiZWxFbGVtZW50IiwidXNlTGFiZWxSZWZFbGVtZW50UHJvcHMiLCJsaXN0UmV0dXJuVHlwZSIsImFsbElkcyIsInNldENvbnRyb2xzIiwidXBkYXRlSW5kZXgiLCJzZXRJZFVwZGF0ZUluZGV4IiwiY2hlY2tlZENvdW50Iiwic2V0Q2hlY2tlZENvdW50IiwiZ2V0U2VsZklzQ2hlY2tlZFVuc3RhYmxlIiwicGVyY2VudGFnZSIsInNldFNldFBhcmVudENoZWNrYm94Q2hlY2tlZCIsInNldFBhcmVudENoZWNrYm94Q2hlY2tlZCIsInVzZUNoZWNrYm94R3JvdXBQYXJlbnRJbnB1dCIsImNoZWNrYm94IiwiX3ZvaWQyIiwiX3ZvaWQzIiwic2V0Q2hlY2tlZCIsInVzZUNoZWNrYm94SW5wdXRFbGVtZW50IiwidXNlQ2hlY2tib3hMYWJlbEVsZW1lbnQiLCJ1c2VDaGVja2JveCIsIm9uQ2hlY2tib3hHcm91cFBhcmVudElucHV0MiIsInVzZUNoZWNrYm94SW5wdXRFbGVtZW50UHJvcHMiLCJ1c2VDaGVja2JveExhYmVsRWxlbWVudFByb3BzIiwidXNlQ2hlY2tib3hHcm91cFBhcmVudElucHV0UHJvcHMiLCJhcmlhQ29udHJvbHMiLCJvbklucHV0IiwidXNlQ2hlY2tib3hHcm91cFBhcmVudExhYmVsUHJvcHMiLCJ1c2VTb2Z0RGlzbWlzcyIsIm9uQ2xvc2UiLCJnZXRFbGVtZW50cyIsInN0YWJsZU9uQ2xvc2UiLCJzdGFibGVHZXRFbGVtZW50cyIsImdldE9wZW4iLCJvbkJhY2tkcm9wQ2xpY2siLCJmb3VuZEluc2lkZUNsaWNrIiwibmV3RWxlbWVudCIsInZhbGlkRm9jdXNhYmxlRWxlbWVudHMiLCJmb2N1c2FibGUiLCJtb3VzZURvd24iLCJrZXlEb3duIiwiY2FwdHVyZSIsInRvdWNoU3RhcnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidXNlU29mdERpc21pc3NQcm9wcyIsInNvZnREaXNtaXNzIiwidXNlTW9kYWwiLCJtb2RhbCIsImJvZHlJc09ubHlTZW1hbnRpYyIsImRlc2NyaXB0aXZlIiwidXNlVGl0bGVSZWZFbGVtZW50UHJvcHMiLCJnZXRUaXRsZUVsZW1lbnQiLCJwcmV2ZW50U2Nyb2xsIiwidGl0bGVFbGVtZW50Iiwic3RhYmxlRm9jdXNTZWxmIiwidXNlTW9kYWxJZEFzU291cmNlIiwidXNlTW9kYWxJZEFzUmVmZXJlbmNlckVsZW1lbnQiLCJ1c2VCb2R5SWRBc1NvdXJjZSIsInVzZUJvZHlJZFJlZmVyZW5jZXJFbGVtZW50IiwidXNlVGl0bGVJZEFzU291cmNlIiwidXNlVGl0bGVJZFJlZmVyZW5jZXJFbGVtZW50IiwiZ2V0TW9kYWxFbGVtZW50IiwidXNlTW9kYWxCYWNrZHJvcCIsInVzZU1vZGFsQmFja2Ryb3BQcm9wcyIsIm9uUG9pbnRlclVwIiwidXNlRHJhd2VyIiwic2luZ2xlU2VsZWN0aW9uIiwic2VsZWN0ZWRJbmRleCIsInNzIiwiY2hmIiwibGFiZWxSZXR1cm5UeXBlIiwidGFnTGlzdCIsIm9uU2VsZWN0ZWRJbmRleENoYW5nZSIsImV2ZW50IiwibmV3SW5kZXgiLCJzdGFibGVPblNlbGVjdCIsImVuaGFuY2VFdmVudCIsInVzZUxpc3ROYXZpZ2F0aW9uU2luZ2xlU2VsZWN0aW9uQ2hpbGQiLCJ1c2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvblByb3BzIiwidXNlTGlzdE5hdmlnYXRpb25TaW5nbGVTZWxlY3Rpb24iLCJjaGlsZHJlbkhhdmVGb2N1cyIsInVzZUxhYmVsSW5wdXRQcm9wcyIsIm9uU2VsZWN0IiwidXNlTGlzdGJveFNpbmdsZUl0ZW0iLCJsaXN0Ym94U2luZ2xlSXRlbSIsInJ0aV9yZXQiLCJzc19yZXQiLCJ1c2VMaXN0TmF2aWdhdGlvblNpbmdsZVNlbGVjdGlvbkNoaWxkUHJvcHMiLCJ1c2VMaXN0Ym94U2luZ2xlSXRlbVByb3BzIiwidXNlTGlzdGJveE11bHRpIiwibGlzdGJveE11bHRpIiwib3BlbmVyIiwidXNlck9uQ2xvc2UiLCJyZWFzb24iLCJzZW5kRm9jdXNUb01lbnUiLCJnZXRJc09wZW4iLCJpbnRlcnNlY3Rpb25PYnNlcnZlciIsImdldFN1cmZhY2VGdWxseVZpc2libGUiLCJzZXRTdXJmYWNlRnVsbHlWaXNpYmxlIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJlbnRyeSIsImludGVyc2VjdGlvblJhdGlvIiwidGhyZXNob2xkIiwic2V0T3BlbmVyRWxlbWVudCIsImdldE9wZW5lckVsZW1lbnQiLCJnZXRCdXR0b25FbGVtZW50IiwidXNlQnV0dG9uUmVmRWxlbWVudFByb3BzIiwiZ2V0TWVudUVsZW1lbnQiLCJ1c2VNZW51QmFzZVJlZkVsZW1lbnRQcm9wcyIsInNvZnREaXNtaXNzUmV0dXJuIiwidXNlTWVudVN1cmZhY2VQcm9wcyIsInVzZU1lbnVTdXJmYWNlQnV0dG9uUHJvcHMiLCJzZXRUaW1lb3V0Iiwic2Nyb2xsSW50b1ZpZXciLCJ1c2VNZW51U3VyZmFjZUNoaWxkUHJvcHMiLCJ1c2VNZW51U3VyZmFjZVNlbnRpbmVsIiwidXNlU2VudGluZWxQcm9wcyIsInJlc3QiLCJ1c2VGb2N1c1NlbnRpbmVsIiwiZm9jdXNTZW50aW5lbCIsInVzZU1lbnVTZW50aW5lbFByb3BzIiwibWVudVN1cmZhY2UiLCJ1c2VUYWJzIiwidGFiUGFuZWxzIiwib2NtYyIsInRhYlBhbmVsc01hbmFnZWRDaGlsZHJlbiIsImJhc2VJZCIsIm1hbmFnZWRDaGlsZHJlblJldCIsImNoYW5nZVZpc2libGVQYW5lbCIsImdldFZpc2libGVJbmRleCIsImNsb3Nlc3RGaXQiLCJ1c2VUYWJMaXN0TGFiZWwiLCJ1c2VUYWJMaXN0TGFiZWxQcm9wcyIsInVzZVRhYkxpc3QiLCJ0YWJzIiwidGFiTGlzdE1hbmFnZWRDaGlsZHJlbiIsInN0YWJsZU9uU2VsZWN0ZWRJbmRleENoYW5nZSIsImxpc3ROYXZSZXQxIiwidXNlVG9vbHRpcCIsIm1vdXNlb3ZlckRlbGF5IiwibW91c2VvdXREZWxheSIsImZvY3VzRGVsYXkiLCJkZWZhdWx0UHJldmVudGVkIiwic2V0T3BlbiIsInNldFRyaWdnZXJIb3ZlckRlbGF5Q29ycmVjdGVkIiwic2V0VG9vbHRpcEhvdmVyRGVsYXlDb3JyZWN0ZWQiLCJzZXRUcmlnZ2VyRm9jdXNlZERlbGF5Q29ycmVjdGVkIiwic2V0VG9vbHRpcEZvY3VzZWREZWxheUNvcnJlY3RlZCIsInNldFRyaWdnZXJGb2N1c2VkIiwiZGVsYXkiLCJpc0Zpbml0ZSIsImhhbmRsZSIsImNsZWFyVGltZW91dCIsInNldFRvb2x0aXBGb2N1c2VkIiwic2V0VHJpZ2dlckhvdmVyIiwiaG92ZXJpbmciLCJzZXRUb29sdGlwSG92ZXIiLCJ0cmlnZ2VySG92ZXJEZWxheUNvcnJlY3RlZCIsInRvb2x0aXBGb2N1c2VkRGVsYXlDb3JyZWN0ZWQiLCJ0b29sdGlwSG92ZXJEZWxheUNvcnJlY3RlZCIsInRyaWdnZXJGb2N1c2VkRGVsYXlDb3JyZWN0ZWQiLCJ1c2VUb29sdGlwVHJpZ2dlciIsIm9uVG91Y2hFbmQiLCJyYWRpb0dyb3VwIiwib25TZWxlY3RlZFZhbHVlQ2hhbmdlIiwic2VsZWN0ZWRWYWx1ZSIsInRhZ0dyb3VwIiwidGFnR3JvdXBMYWJlbCIsInNlbGVjdGlvbk1vZGUiLCJfZ2V0UmFkaW9Hcm91cFBhcmVudEVsZW1lbnQiLCJzZXRTZWxlY3RlZEluZGV4IiwidXNlR3JvdXBMYWJlbElucHV0IiwidXNlR3JvdXBMYWJlbExhYmVsIiwidXNlR3JvdXBMYWJlbElucHV0UHJvcHMiLCJ1c2VHcm91cExhYmVsTGFiZWxQcm9wcyIsImxpc3ROYXZSZXQiLCJ1c2VSYWRpb0dyb3VwTGFiZWxQcm9wcyIsImJ5TmFtZSIsInVzZVJhZGlvIiwidXNlVG9hc3RzIiwib2NtdSIsImFjdGl2ZVRvYXN0SW5kZXgiLCJzZXRBY3RpdmVUb2FzdEluZGV4IiwiZ2V0QWN0aXZlVG9hc3RJbmRleCIsInBvbGl0ZW5lc3MiLCJzZXRQb2xpdGVuZXNzIiwiY2hpbGRJbmZvIiwidG9hc3RRdWV1ZSIsIm9uQW55VG9hc3RNb3VudGVkIiwiX2luZGV4IiwiYm90dG9tIiwic2hvd2luZyIsIm9uQW55VG9hc3REaXNtaXNzZWQiLCJ1c2VUb2FzdCIsInRvYXN0IiwiZGlzbWlzcyIsInNldFNob3dpbmciLCJ1c2VUYWJsZSIsImdldEN1cnJlbnRTb3J0Q29sdW1uIiwic2V0Q3VycmVudFNvcnRDb2x1bW4iLCJncmlkTmF2UmV0MSIsInRhYmxlUm93IiwibG9jYXRpb24iLCJjZWxscyIsInVzZUdyaWROYXZpZ2F0aW9uQ2VsbCIsInVzZUdyaWROYXZpZ2F0aW9uUm93UHJvcHMiLCJnZXRDZWxscyIsImFzUGFyZW50T2ZDZWxscyIsImdyaWROYXZSZXQyIiwidXNlVGFibGVDZWxsIiwidXNlR3JpZE5hdmlnYXRpb25DZWxsUHJvcHMiLCJncmlkTmF2UmV0MyIsInNvcnRJbmZvIiwiY2VsbEluZGV4IiwiQWNjb3JkaW9uIiwibWVtbyIsImV4cGFuZGVkSW5kZXgiLCJyZW5kZXIiLCJ1c2VBY2NvcmRpb25TZWN0aW9uIiwiZGVmYXVsdFJlbmRlckNoZWNrYm94TGlrZSIsIm1ha2VJbnB1dFByb3BzIiwibWFrZUxhYmVsUHJvcHMiLCJtb2RpZnlJbnB1dFByb3BzIiwibW9kaWZ5TGFiZWxQcm9wcyIsImlucHV0UHJvcHNCYXNlIiwibGFiZWxQcm9wc0Jhc2UiLCJpbnB1dFByb3BzIiwibGFiZWxQcm9wcyIsImlucHV0IiwiZGVmYXVsdFJlbmRlckNoZWNrYm94R3JvdXBDaGlsZCIsImRlZmF1bHRSZW5kZXJDaGVja2JveEdyb3VwIiwiVXNlQ2hlY2tib3hHcm91cENoaWxkQ29udGV4dCIsIkNoZWNrYm94R3JvdXAiLCJwYXJlbnREaXNhYmxlZCIsImRlZmF1bHRSZW5kZXJQb3J0YWwiLCJwb3J0YWxJZCIsInBvcnRhbFJlZiIsImdldEVsZW1lbnRCeUlkIiwiY3JlYXRlUG9ydGFsIiwiZGVmYXVsdFJlbmRlck1vZGFsIiwidGFnRm9jdXNDb250YWluZXIiLCJ0YWdCYWNrZHJvcCIsInRhZ0JvZHkiLCJ0YWdEaWFsb2ciLCJ0YWdUaXRsZSIsIm1ha2VQcm9wc0ZvY3VzQ29udGFpbmVyIiwibWFrZVByb3BzQmFja2Ryb3AiLCJtYWtlUHJvcHNCb2R5IiwibWFrZVByb3BzRGlhbG9nIiwibWFrZVByb3BzVGl0bGUiLCJkaWFsb2dJbmZvIiwibW9kaWZ5Rm9jdXNDb250YWluZXJQcm9wcyIsIm1vZGlmeURpYWxvZ1Byb3BzIiwibW9kaWZ5VGl0bGVQcm9wcyIsIm1vZGlmeUJvZHlQcm9wcyIsIm1vZGlmeUJhY2tkcm9wUHJvcHMiLCJ0aXRsZUNoaWxkcmVuIiwidGl0bGVQcm9wcyIsImJvZHlDaGlsZHJlbiIsImJvZHlQcm9wcyIsImRpYWxvZ0NoaWxkcmVuIiwiZGlhbG9nUHJvcHMiLCJiYWNrZHJvcENoaWxkcmVuIiwiYmFja2Ryb3BQcm9wcyIsImZvY3VzQ29udGFpbmVyQ2hpbGRyZW4iLCJmb2N1c0NvbnRhaW5lclByb3BzIiwidGl0bGUiLCJkaWFsb2ciLCJiYWNrZHJvcCIsImZvY3VzQ29udGFpbmVyIiwiTGlzdGJveFNpbmdsZUNvbnRleHQiLCJvbkFsbExvc3RGb2N1cyIsIm9uQW55R2FpbmVkRm9jdXMiLCJNZW51IiwiZGVmYXVsdFJlbmRlclJhZGlvR3JvdXAiLCJtYWtlUHJvcHNHcm91cCIsIm1ha2VQcm9wc0xhYmVsIiwibW9kaWZ5R3JvdXBQcm9wcyIsIlNsaWRlclRodW1iQ29udGV4dCIsIlNsaWRlciIsIm1pbiIsInVzZVNsaWRlclRodW1iIiwiX3NsaWRlckluZm8iLCJ1c2VTbGlkZXIiLCJzbGlkZXIiLCJMb2NhdGlvbkNvbnRleHQiLCJUYWJsZUJvZHlDb250ZXh0IiwiVGFibGVSb3dDb250ZXh0IiwiVGFibGVDZWxsQ29udGV4dCIsImRlZmF1bHRSZW5kZXJUYWJsZSIsInRhZ1RhYmxlIiwibWFrZVByb3BzVGFibGUiLCJtb2RpZnlQcm9wc1RhYmxlIiwiZGVmYXVsdFJlbmRlclRhYmxlUm93IiwidGFnVGFibGVSb3ciLCJtYWtlUHJvcHNUYWJsZVJvdyIsIm1vZGlmeVByb3BzVGFibGVSb3ciLCJkZWZhdWx0UmVuZGVyVGFibGVDZWxsIiwidGFnVGFibGVDZWxsIiwibWFrZVByb3BzVGFibGVDZWxsIiwiVGFiQ29udGV4dCIsIlRhYlBhbmVsQ29udGV4dCIsIlRhYnMiLCJkZWZhdWx0UmVuZGVyIiwidHJpZ2dlclByb3BzIiwidG9vbHRpcFByb3BzIiwiQmx1cmIiLCJfRnJhZ21lbnQiLCJDb2RlIiwiRGVtbyIsIkRlbW9DaGVja2JveCIsIkRlbW9MaXN0SXRlbSIsIlRhYnMuRGVtbyIsIkRpYWxvZy5EZW1vIiwiU2xpZGVyLkRlbW8iLCJMaXN0Ym94U2luZ2xlLkRlbW8iLCJBY2NvcmRpb24uRGVtbyIsIkJ1dHRvbi5EZW1vIiwiQ2hlY2tib3guRGVtbyIsIkNoZWNrYm94R3JvdXAuRGVtbyIsIkxpc3Rib3hNdWx0aS5EZW1vIiwiTWVudS5EZW1vIiwiUmFkaW8uRGVtbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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
