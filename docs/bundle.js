var _excluded=["children","heading","tag"],_excluded2=["managedChildrenParameters"],_excluded3=["onClose","open","getWindow","parentDepth"],_excluded4=["getElement"],_excluded5=["getElement"],_excluded6=["refElementPopupReturn","refElementSourceReturn","lostFocusDismiss"],_excluded7=["getElement"],_excluded8=["open","onClose"],_excluded9=["getElement"],_excluded10=["backdropDismissParameters","refElementPopupReturn"],_excluded11=["onElementChange"],_excluded12=["managedChildrenReturn","rovingTabIndexParameters"],_excluded13=["index"],_excluded14=["hidden"],_excluded15=["collator","typeaheadTimeout","noTypeahead","isValid"],_excluded16=["getTabbableIndex","setTabbableIndex"],_excluded17=["typeaheadNavigationParameters","rovingTabIndexReturn"],_excluded18=["index"],_excluded19=["getText","hidden"],_excluded20=["sortedTypeaheadInfo","insertingComparator"],_excluded21=["getElement"],_excluded22=["managedChildParameters","textContentParameters","typeaheadNavigationChildContext","refElementReturn"],_excluded23=["linearNavigationParameters","typeaheadNavigationParameters","rovingTabIndexParameters","managedChildrenReturn"],_excluded24=["rovingTabIndexChildParameters","rovingTabIndexChildContext","typeaheadNavigationChildContext","managedChildParameters","refElementReturn","textContentParameters"],_excluded25=["onTabbableColumnChange"],_excluded26=["onTabbableIndexChange"],_excluded27=["gridNavigationParameters","linearNavigationParameters","rovingTabIndexParameters","managedChildrenReturn","typeaheadNavigationParameters"],_excluded28=["linearNavigationReturn","rovingTabIndexReturn","typeaheadNavigationReturn","managedChildrenParameters","rovingTabIndexChildContext","typeaheadNavigationChildContext"],_excluded29=["gridNavigationRowContext"],_excluded30=["linearNavigationParameters"],_excluded31=["rowAsChildOfGridParameters","rowAsParentOfCellsParameters"],_excluded32=["rovingTabIndexChildContext","typeaheadNavigationChildContext","rovingTabIndexChildParameters","managedChildParameters","refElementReturn","textContentParameters","gridNavigationCellParameters","gridNavigationCellContext"],_excluded33=["hasCurrentFocusParameters","rovingTabIndexChildReturn","textContentReturn"],_excluded34=["gridNavigationParameters","linearNavigationParameters","rovingTabIndexParameters","managedChildrenReturn","typeaheadNavigationParameters","singleSelectionParameters"],_excluded35=["rowAsChildOfGridParameters","rowAsParentOfCellsParameters"],_excluded36=["onCurrentFocusedInnerChanged"],_excluded37=["hasCurrentFocusParameters","gridNavigationRowParameters","rovingTabIndexChildReturn","textContentReturn"],_excluded38=["onCurrentFocusedInnerChanged"],_excluded39=["rearrangeableChildrenParameters","sortableChildrenParameters","linearNavigationParameters"],_excluded40=["linearNavigationParameters","rovingTabIndexParameters","typeaheadNavigationParameters","singleSelectionParameters","managedChildrenReturn"],_excluded41=["index"],_excluded42=["hidden"],_excluded43=["managedChildParameters","rovingTabIndexChildParameters","singleSelectionChildParameters","singleSelectionContext","rovingTabIndexChildContext","typeaheadNavigationChildContext","refElementReturn","textContentParameters"],_excluded44=["hasCurrentFocusParameters"],_excluded45=["onCurrentFocusedInnerChanged"],_excluded46=["hasCurrentFocusParameters"],_excluded47=["onCurrentFocusedInnerChanged"],_excluded48=["childrenHaveFocusParameters","managedChildrenParameters","rovingTabIndexChildContext","singleSelectionContext","typeaheadNavigationChildContext","gridNavigationRowContext","rearrangeableChildrenReturn"],_excluded49=["managedChildParameters","context","completeGridNavigationRowParameters","singleSelectionChildParameters","rovingTabIndexChildParameters","rovingTabIndexChildParameters","textContentParameters"],_excluded50=["linearNavigationParameters","rovingTabIndexParameters","typeaheadNavigationParameters"],_excluded51=["focusSelf"],_excluded52=["linearNavigationParameters","rearrangeableChildrenParameters","sortableChildrenParameters","typeaheadNavigationParameters","rovingTabIndexParameters","singleSelectionParameters","paginatedChildrenParameters","staggeredChildrenParameters"],_excluded53=["indexDemangler","indexMangler"],_excluded54=["onPressSync"],_excluded55=["completeListNavigationChildParameters","singleSelectionChildParameters","rovingTabIndexChildParameters","managedChildParameters","textContentParameters","context","pressParameters","sortableChildParameters"],_excluded56=["onPressSync"],_excluded57=["trapActive"],_excluded58=["asyncHandler","capture"],_excluded59=["refElementReturn"],_excluded60=["refElementReturn"],_excluded61=["getElement","propsStable"],_excluded62=["linearNavigationParameters","toolbarParameters","labelParameters","singleSelectionDeclarativeParameters"],_excluded63=["context","props"],_excluded64=["linearNavigationReturn","childrenHaveFocusReturn","context","propsLabel","propsToolbar","paginatedChildrenReturn","staggeredChildrenReturn","rearrangeableChildrenReturn","sortableChildrenReturn","managedChildrenReturn","rovingTabIndexReturn","toolbarReturn","typeaheadNavigationReturn","randomIdInputReturn","randomIdLabelReturn"],_excluded65=["sliderContext"],_excluded66=["tableCellParameters"],_excluded67=["props"],_excluded68=["onSelectedIndexChange"],_excluded69=["props","context"],_excluded70=["selectionMode"],_excluded71=["props"],_excluded72=["context","managedChildrenReturn"],_excluded73=["index"],_excluded74=["disableArrowKeys","disableHomeEndKeys","initialIndex","navigationDirection","onAfterChildLayoutEffect","onChildrenMountChange","navigatePastEnd","navigatePastStart","pageNavigationSize","localStorageKey","render"],_excluded75=["children"],_excluded76=["render","collator","disableArrowKeys","disableHomeEndKeys","navigationDirection","noTypeahead","typeaheadTimeout","onTabbableIndexChange","compare","staggered","getIndex","untabbable","navigatePastEnd","navigatePastStart","pageNavigationSize"],_excluded77=["render","index","focusSelf","exclude","hidden","getText","onPressSync","getSortValue"],_excluded78=["index","exclude","onPressSync","render","checked","onChangeFromParent","getSortValue","hidden","getText","focusSelf"],_excluded79=["listboxContext"];function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err);}_next(undefined);});};}function _objectDestructuringEmpty(obj){if(obj==null)throw new TypeError("Cannot destructure "+obj);}function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _defineProperty(obj,key,value){key=_toPropertyKey(key);if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _toPropertyKey(arg){var key=_toPrimitive(arg,"string");return typeof key==="symbol"?key:String(key);}function _toPrimitive(input,hint){if(typeof input!=="object"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||"default");if(typeof res!=="object")return res;throw new TypeError("@@toPrimitive must return a primitive value.");}return(hint==="string"?String:Number)(input);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}(function(){'use strict';var n,l$1,u$1,t$1,o$2,r$2,f$1={},e$1=[],c$1=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function s$1(n,l){for(var u in l){n[u]=l[u];}return n;}function a$1(n){var l=n.parentNode;l&&l.removeChild(n);}function h$1(l,u,i){var t,o,r,f={};for(r in u){"key"==r?t=u[r]:"ref"==r?o=u[r]:f[r]=u[r];}if(arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):i),"function"==typeof l&&null!=l.defaultProps)for(r in l.defaultProps){void 0===f[r]&&(f[r]=l.defaultProps[r]);}return v$1(l,f,t,o,null);}function v$1(n,i,t,o,r){var f={type:n,props:i,key:t,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==r?++u$1:r};return null==r&&null!=l$1.vnode&&l$1.vnode(f),f;}function p$1(n){return n.children;}function d$1(n,l){this.props=n,this.context=l;}function _$2(n,l){if(null==l)return n.__?_$2(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++){if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;}return"function"==typeof n.type?_$2(n):null;}function k$2(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++){if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break;}}return k$2(n);}}function b$1(n){(!n.__d&&(n.__d=!0)&&t$1.push(n)&&!g$2.__r++||o$2!==l$1.debounceRendering)&&((o$2=l$1.debounceRendering)||setTimeout)(g$2);}function g$2(){for(var n;g$2.__r=t$1.length;){n=t$1.sort(function(n,l){return n.__v.__b-l.__v.__b;}),t$1=[],n.some(function(n){var l,u,i,t,o,r;n.__d&&(o=(t=(l=n).__v).__e,(r=l.__P)&&(u=[],(i=s$1({},t)).__v=t.__v+1,j$2(r,t,i,l.__n,void 0!==r.ownerSVGElement,null!=t.__h?[o]:null,u,null==o?_$2(t):o,t.__h),z$2(u,t),t.__e!=o&&k$2(t)));});}}function w$2(n,l,u,i,t,o,r,c,s,a){var h,y,d,k,b,g,w,x=i&&i.__k||e$1,C=x.length;for(u.__k=[],h=0;h<l.length;h++){if(null!=(k=u.__k[h]=null==(k=l[h])||"boolean"==typeof k?null:"string"==typeof k||"number"==typeof k||"bigint"==typeof k?v$1(null,k,null,null,k):Array.isArray(k)?v$1(p$1,{children:k},null,null,null):k.__b>0?v$1(k.type,k.props,k.key,k.ref?k.ref:null,k.__v):k)){if(k.__=u,k.__b=u.__b+1,null===(d=x[h])||d&&k.key==d.key&&k.type===d.type)x[h]=void 0;else for(y=0;y<C;y++){if((d=x[y])&&k.key==d.key&&k.type===d.type){x[y]=void 0;break;}d=null;}j$2(n,k,d=d||f$1,t,o,r,c,s,a),b=k.__e,(y=k.ref)&&d.ref!=y&&(w||(w=[]),d.ref&&w.push(d.ref,null,k),w.push(y,k.__c||b,k)),null!=b?(null==g&&(g=b),"function"==typeof k.type&&k.__k===d.__k?k.__d=s=m$1(k,s,n):s=A$1(n,k,d,x,b,s),"function"==typeof u.type&&(u.__d=s)):s&&d.__e==s&&s.parentNode!=n&&(s=_$2(d));}}for(u.__e=g,h=C;h--;){null!=x[h]&&N$1(x[h],x[h]);}if(w)for(h=0;h<w.length;h++){M(w[h],w[++h],w[++h]);}}function m$1(n,l,u){for(var i,t=n.__k,o=0;t&&o<t.length;o++){(i=t[o])&&(i.__=n,l="function"==typeof i.type?m$1(i,l,u):A$1(u,i,i,t,i.__e,l));}return l;}function x$1(n,l){return l=l||[],null==n||"boolean"==typeof n||(Array.isArray(n)?n.some(function(n){x$1(n,l);}):l.push(n)),l;}function A$1(n,l,u,i,t,o){var r,f,e;if(void 0!==l.__d)r=l.__d,l.__d=void 0;else if(null==u||t!=o||null==t.parentNode)n:if(null==o||o.parentNode!==n)n.appendChild(t),r=null;else{for(f=o,e=0;(f=f.nextSibling)&&e<i.length;e+=1){if(f==t)break n;}n.insertBefore(t,o),r=o;}return void 0!==r?r:t.nextSibling;}function C$1(n,l,u,i,t){var o;for(o in u){"children"===o||"key"===o||o in l||H$1(n,o,null,u[o],i);}for(o in l){t&&"function"!=typeof l[o]||"children"===o||"key"===o||"value"===o||"checked"===o||u[o]===l[o]||H$1(n,o,l[o],u[o],i);}}function $$1(n,l,u){"-"===l[0]?n.setProperty(l,u):n[l]=null==u?"":"number"!=typeof u||c$1.test(l)?u:u+"px";}function H$1(n,l,u,i,t){var o;n:if("style"===l){if("string"==typeof u)n.style.cssText=u;else{if("string"==typeof i&&(n.style.cssText=i=""),i)for(l in i){u&&l in u||$$1(n.style,l,"");}if(u)for(l in u){i&&u[l]===i[l]||$$1(n.style,l,u[l]);}}}else if("o"===l[0]&&"n"===l[1])o=l!==(l=l.replace(/Capture$/,"")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+o]=u,u?i||n.addEventListener(l,o?T$2:I$1,o):n.removeEventListener(l,o?T$2:I$1,o);else if("dangerouslySetInnerHTML"!==l){if(t)l=l.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("href"!==l&&"list"!==l&&"form"!==l&&"tabIndex"!==l&&"download"!==l&&l in n)try{n[l]=null==u?"":u;break n;}catch(n){}"function"==typeof u||(null==u||!1===u&&-1==l.indexOf("-")?n.removeAttribute(l):n.setAttribute(l,u));}}function I$1(n){this.l[n.type+!1](l$1.event?l$1.event(n):n);}function T$2(n){this.l[n.type+!0](l$1.event?l$1.event(n):n);}function j$2(n,u,i,t,o,r,f,e,c){var a,h,v,y,_,k,b,g,m,x,A,C,$,H,I,T=u.type;if(void 0!==u.constructor)return null;null!=i.__h&&(c=i.__h,e=u.__e=i.__e,u.__h=null,r=[e]),(a=l$1.__b)&&a(u);try{n:if("function"==typeof T){if(g=u.props,m=(a=T.contextType)&&t[a.__c],x=a?m?m.props.value:a.__:t,i.__c?b=(h=u.__c=i.__c).__=h.__E:("prototype"in T&&T.prototype.render?u.__c=h=new T(g,x):(u.__c=h=new d$1(g,x),h.constructor=T,h.render=O),m&&m.sub(h),h.props=g,h.state||(h.state={}),h.context=x,h.__n=t,v=h.__d=!0,h.__h=[],h._sb=[]),null==h.__s&&(h.__s=h.state),null!=T.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=s$1({},h.__s)),s$1(h.__s,T.getDerivedStateFromProps(g,h.__s))),y=h.props,_=h.state,v)null==T.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else{if(null==T.getDerivedStateFromProps&&g!==y&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(g,x),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(g,h.__s,x)||u.__v===i.__v){for(h.props=g,h.state=h.__s,u.__v!==i.__v&&(h.__d=!1),h.__v=u,u.__e=i.__e,u.__k=i.__k,u.__k.forEach(function(n){n&&(n.__=u);}),A=0;A<h._sb.length;A++){h.__h.push(h._sb[A]);}h._sb=[],h.__h.length&&f.push(h);break n;}null!=h.componentWillUpdate&&h.componentWillUpdate(g,h.__s,x),null!=h.componentDidUpdate&&h.__h.push(function(){h.componentDidUpdate(y,_,k);});}if(h.context=x,h.props=g,h.__v=u,h.__P=n,C=l$1.__r,$=0,"prototype"in T&&T.prototype.render){for(h.state=h.__s,h.__d=!1,C&&C(u),a=h.render(h.props,h.state,h.context),H=0;H<h._sb.length;H++){h.__h.push(h._sb[H]);}h._sb=[];}else do{h.__d=!1,C&&C(u),a=h.render(h.props,h.state,h.context),h.state=h.__s;}while(h.__d&&++$<25);h.state=h.__s,null!=h.getChildContext&&(t=s$1(s$1({},t),h.getChildContext())),v||null==h.getSnapshotBeforeUpdate||(k=h.getSnapshotBeforeUpdate(y,_)),I=null!=a&&a.type===p$1&&null==a.key?a.props.children:a,w$2(n,Array.isArray(I)?I:[I],u,i,t,o,r,f,e,c),h.base=u.__e,u.__h=null,h.__h.length&&f.push(h),b&&(h.__E=h.__=null),h.__e=!1;}else null==r&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=L$1(i.__e,u,i,t,o,r,f,c);(a=l$1.diffed)&&a(u);}catch(n){u.__v=null,(c||null!=r)&&(u.__e=e,u.__h=!!c,r[r.indexOf(e)]=null),l$1.__e(n,u,i);}}function z$2(n,u){l$1.__c&&l$1.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u);});}catch(n){l$1.__e(n,u.__v);}});}function L$1(l,u,i,t,o,r,e,c){var s,h,v,y=i.props,p=u.props,d=u.type,k=0;if("svg"===d&&(o=!0),null!=r)for(;k<r.length;k++){if((s=r[k])&&"setAttribute"in s==!!d&&(d?s.localName===d:3===s.nodeType)){l=s,r[k]=null;break;}}if(null==l){if(null===d)return document.createTextNode(p);l=o?document.createElementNS("http://www.w3.org/2000/svg",d):document.createElement(d,p.is&&p),r=null,c=!1;}if(null===d)y===p||c&&l.data===p||(l.data=p);else{if(r=r&&n.call(l.childNodes),h=(y=i.props||f$1).dangerouslySetInnerHTML,v=p.dangerouslySetInnerHTML,!c){if(null!=r)for(y={},k=0;k<l.attributes.length;k++){y[l.attributes[k].name]=l.attributes[k].value;}(v||h)&&(v&&(h&&v.__html==h.__html||v.__html===l.innerHTML)||(l.innerHTML=v&&v.__html||""));}if(C$1(l,p,y,o,c),v)u.__k=[];else if(k=u.props.children,w$2(l,Array.isArray(k)?k:[k],u,i,t,o&&"foreignObject"!==d,r,e,r?r[0]:i.__k&&_$2(i,0),c),null!=r)for(k=r.length;k--;){null!=r[k]&&a$1(r[k]);}c||("value"in p&&void 0!==(k=p.value)&&(k!==l.value||"progress"===d&&!k||"option"===d&&k!==y.value)&&H$1(l,"value",k,y.value,!1),"checked"in p&&void 0!==(k=p.checked)&&k!==l.checked&&H$1(l,"checked",k,y.checked,!1));}return l;}function M(n,u,i){try{"function"==typeof n?n(u):n.current=u;}catch(n){l$1.__e(n,i);}}function N$1(n,u,i){var t,o;if(l$1.unmount&&l$1.unmount(n),(t=n.ref)&&(t.current&&t.current!==n.__e||M(t,null,u)),null!=(t=n.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount();}catch(n){l$1.__e(n,u);}t.base=t.__P=null,n.__c=void 0;}if(t=n.__k)for(o=0;o<t.length;o++){t[o]&&N$1(t[o],u,i||"function"!=typeof n.type);}i||null==n.__e||a$1(n.__e),n.__=n.__e=n.__d=void 0;}function O(n,l,u){return this.constructor(n,u);}function P$1(u,i,t){var o,r,e;l$1.__&&l$1.__(u,i),r=(o="function"==typeof t)?null:t&&t.__k||i.__k,e=[],j$2(i,u=(!o&&t||i).__k=h$1(p$1,null,[u]),r||f$1,f$1,void 0!==i.ownerSVGElement,!o&&t?[t]:r?null:i.firstChild?n.call(i.childNodes):null,e,!o&&t?t:r?r.__e:i.firstChild,o),z$2(e,u);}function B$2(n,l){var u={__c:l="__cC"+r$2++,__:n,Consumer:function(n,l){return n.children(l);},Provider:function(n){var u,i;return this.getChildContext||(u=[],(i={})[l]=this,this.getChildContext=function(){return i;},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(b$1);},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n);};}),n.children;}};return u.Provider.__=u.Consumer.contextType=u;}n=e$1.slice,l$1={__e:function(n,l,u,i){for(var t,o,r;l=l.__;){if((t=l.__c)&&!t.__)try{if((o=t.constructor)&&null!=o.getDerivedStateFromError&&(t.setState(o.getDerivedStateFromError(n)),r=t.__d),null!=t.componentDidCatch&&(t.componentDidCatch(n,i||{}),r=t.__d),r)return t.__E=t;}catch(l){n=l;}}throw n;}},u$1=0,d$1.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=s$1({},this.state),"function"==typeof n&&(n=n(s$1({},u),this.props)),n&&s$1(u,n),null!=n&&this.__v&&(l&&this._sb.push(l),b$1(this));},d$1.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),b$1(this));},d$1.prototype.render=p$1,t$1=[],g$2.__r=0,r$2=0;var _$1=0;function o$1(o,e,n,t,f){var l,s,u={};for(s in e){"ref"==s?l=e[s]:u[s]=e[s];}var a={type:o,props:u,key:n,ref:l,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--_$1,__source:f,__self:t};if("function"==typeof o&&(l=o.defaultProps))for(s in l){void 0===u[s]&&(u[s]=l[s]);}return l$1.vnode&&l$1.vnode(a),a;}var t,r$1,u,i,o=0,f=[],c=[],e=l$1.__b,a=l$1.__r,v=l$1.diffed,l=l$1.__c,m=l$1.unmount;function d(t,u){l$1.__h&&l$1.__h(r$1,t,o||u),o=0;var i=r$1.__H||(r$1.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({__V:c}),i.__[t];}function p(n){return o=1,y(B$1,n);}function y(n,u,i){var o=d(t++,2);if(o.t=n,!o.__c&&(o.__=[i?i(u):B$1(void 0,u),function(n){var t=o.__N?o.__N[0]:o.__[0],r=o.t(t,n);t!==r&&(o.__N=[r,o.__[1]],o.__c.setState({}));}],o.__c=r$1,!r$1.u)){r$1.u=!0;var f=r$1.shouldComponentUpdate;r$1.shouldComponentUpdate=function(n,t,r){if(!o.__c.__H)return!0;var u=o.__c.__H.__.filter(function(n){return n.__c;});if(u.every(function(n){return!n.__N;}))return!f||f.call(this,n,t,r);var i=!1;return u.forEach(function(n){if(n.__N){var t=n.__[0];n.__=n.__N,n.__N=void 0,t!==n.__[0]&&(i=!0);}}),!(!i&&o.__c.props===n)&&(!f||f.call(this,n,t,r));};}return o.__N||o.__;}function h(u,i){var o=d(t++,3);!l$1.__s&&z$1(o.__H,i)&&(o.__=u,o.i=i,r$1.__H.__h.push(o));}function s(u,i){var o=d(t++,4);!l$1.__s&&z$1(o.__H,i)&&(o.__=u,o.i=i,r$1.__h.push(o));}function _(n){return o=5,F$1(function(){return{current:n};},[]);}function A(n,t,r){o=6,s(function(){return"function"==typeof n?(n(t()),function(){return n(null);}):n?(n.current=t(),function(){return n.current=null;}):void 0;},null==r?r:r.concat(n));}function F$1(n,r){var u=d(t++,7);return z$1(u.__H,r)?(u.__V=n(),u.i=r,u.__h=n,u.__V):u.__;}function T$1(n,t){return o=8,F$1(function(){return n;},t);}function q(n){var u=r$1.context[n.__c],i=d(t++,9);return i.c=n,u?(null==i.__&&(i.__=!0,u.sub(r$1)),u.props.value):n.__;}function V$1(){var n=d(t++,11);if(!n.__){for(var u=r$1.__v;null!==u&&!u.__m&&null!==u.__;){u=u.__;}var i=u.__m||(u.__m=[0,0]);n.__="P"+i[0]+"-"+i[1]++;}return n.__;}function b(){for(var t;t=f.shift();){if(t.__P&&t.__H)try{t.__H.__h.forEach(k$1),t.__H.__h.forEach(w$1),t.__H.__h=[];}catch(r){t.__H.__h=[],l$1.__e(r,t.__v);}}}l$1.__b=function(n){r$1=null,e&&e(n);},l$1.__r=function(n){a&&a(n),t=0;var i=(r$1=n.__c).__H;i&&(u===r$1?(i.__h=[],r$1.__h=[],i.__.forEach(function(n){n.__N&&(n.__=n.__N),n.__V=c,n.__N=n.i=void 0;})):(i.__h.forEach(k$1),i.__h.forEach(w$1),i.__h=[])),u=r$1;},l$1.diffed=function(t){v&&v(t);var o=t.__c;o&&o.__H&&(o.__H.__h.length&&(1!==f.push(o)&&i===l$1.requestAnimationFrame||((i=l$1.requestAnimationFrame)||j$1)(b)),o.__H.__.forEach(function(n){n.i&&(n.__H=n.i),n.__V!==c&&(n.__=n.__V),n.i=void 0,n.__V=c;})),u=r$1=null;},l$1.__c=function(t,r){r.some(function(t){try{t.__h.forEach(k$1),t.__h=t.__h.filter(function(n){return!n.__||w$1(n);});}catch(u){r.some(function(n){n.__h&&(n.__h=[]);}),r=[],l$1.__e(u,t.__v);}}),l&&l(t,r);},l$1.unmount=function(t){m&&m(t);var r,u=t.__c;u&&u.__H&&(u.__H.__.forEach(function(n){try{k$1(n);}catch(n){r=n;}}),u.__H=void 0,r&&l$1.__e(r,u.__v));};var g$1="function"==typeof requestAnimationFrame;function j$1(n){var t,r=function(){clearTimeout(u),g$1&&cancelAnimationFrame(t),setTimeout(n);},u=setTimeout(r,100);g$1&&(t=requestAnimationFrame(r));}function k$1(n){var t=r$1,u=n.__c;"function"==typeof u&&(n.__c=void 0,u()),r$1=t;}function w$1(n){var t=r$1;n.__c=n.__(),r$1=t;}function z$1(n,t){return!n||n.length!==t.length||t.some(function(t,r){return t!==n[r];});}function B$1(n,t){return"function"==typeof t?t(n):t;}function g(n,t){for(var e in t){n[e]=t[e];}return n;}function C(n,t){for(var e in n){if("__source"!==e&&!(e in t))return!0;}for(var r in t){if("__source"!==r&&n[r]!==t[r])return!0;}return!1;}function w(n){this.props=n;}function R(n,e){function r(n){var t=this.props.ref,r=t==n.ref;return!r&&t&&(t.call?t(null):t.current=null),e?!e(this.props,n)||!r:C(this.props,n);}function u(e){return this.shouldComponentUpdate=r,h$1(n,e);}return u.displayName="Memo("+(n.displayName||n.name)+")",u.prototype.isReactComponent=!0,u.__f=!0,u;}(w.prototype=new d$1()).isPureReactComponent=!0,w.prototype.shouldComponentUpdate=function(n,t){return C(this.props,n)||C(this.state,t);};var x=l$1.__b;l$1.__b=function(n){n.type&&n.type.__f&&n.ref&&(n.props.ref=n.ref,n.ref=null),x&&x(n);};var N="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function k(n){function t(t){var e=g({},t);return delete e.ref,n(e,t.ref||null);}return t.$$typeof=N,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(n.displayName||n.name)+")",t;}var T=l$1.__e;l$1.__e=function(n,t,e,r){if(n.then)for(var u,o=t;o=o.__;){if((u=o.__c)&&u.__c)return null==t.__e&&(t.__e=e.__e,t.__k=e.__k),u.__c(n,t);}T(n,t,e,r);};var I=l$1.unmount;function L(n,t,e){return n&&(n.__c&&n.__c.__H&&(n.__c.__H.__.forEach(function(n){"function"==typeof n.__c&&n.__c();}),n.__c.__H=null),null!=(n=g({},n)).__c&&(n.__c.__P===e&&(n.__c.__P=t),n.__c=null),n.__k=n.__k&&n.__k.map(function(n){return L(n,t,e);})),n;}function U(n,t,e){return n&&(n.__v=null,n.__k=n.__k&&n.__k.map(function(n){return U(n,t,e);}),n.__c&&n.__c.__P===t&&(n.__e&&e.insertBefore(n.__e,n.__d),n.__c.__e=!0,n.__c.__P=e)),n;}function D(){this.__u=0,this.t=null,this.__b=null;}function F(n){var t=n.__.__c;return t&&t.__a&&t.__a(n);}function V(){this.u=null,this.o=null;}l$1.unmount=function(n){var t=n.__c;t&&t.__R&&t.__R(),t&&!0===n.__h&&(n.type=null),I&&I(n);},(D.prototype=new d$1()).__c=function(n,t){var e=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(e);var u=F(r.__v),o=!1,i=function(){o||(o=!0,e.__R=null,u?u(l):l());};e.__R=i;var l=function(){if(! --r.__u){if(r.state.__a){var n=r.state.__a;r.__v.__k[0]=U(n,n.__c.__P,n.__c.__O);}var t;for(r.setState({__a:r.__b=null});t=r.t.pop();){t.forceUpdate();}}},c=!0===t.__h;r.__u++||c||r.setState({__a:r.__b=r.__v.__k[0]}),n.then(i,i);},D.prototype.componentWillUnmount=function(){this.t=[];},D.prototype.render=function(n,e){if(this.__b){if(this.__v.__k){var r=document.createElement("div"),o=this.__v.__k[0].__c;this.__v.__k[0]=L(this.__b,r,o.__O=o.__P);}this.__b=null;}var i=e.__a&&h$1(p$1,null,n.fallback);return i&&(i.__h=null),[h$1(p$1,null,e.__a?null:n.children),i];};var W=function(n,t,e){if(++e[1]===e[0]&&n.o.delete(t),n.props.revealOrder&&("t"!==n.props.revealOrder[0]||!n.o.size))for(e=n.u;e;){for(;e.length>3;){e.pop()();}if(e[1]<e[0])break;n.u=e=e[2];}};function P(n){return this.getChildContext=function(){return n.context;},n.children;}function $(n){var e=this,r=n.i;e.componentWillUnmount=function(){P$1(null,e.l),e.l=null,e.i=null;},e.i&&e.i!==r&&e.componentWillUnmount(),n.__v?(e.l||(e.i=r,e.l={nodeType:1,parentNode:r,childNodes:[],appendChild:function(n){this.childNodes.push(n),e.i.appendChild(n);},insertBefore:function(n,t){this.childNodes.push(n),e.i.appendChild(n);},removeChild:function(n){this.childNodes.splice(this.childNodes.indexOf(n)>>>1,1),e.i.removeChild(n);}}),P$1(h$1(P,{context:e.context},n.__v),e.l)):e.l&&e.componentWillUnmount();}function j(n,e){var r=h$1($,{__v:n,i:e});return r.containerInfo=e,r;}(V.prototype=new d$1()).__a=function(n){var t=this,e=F(t.__v),r=t.o.get(n);return r[0]++,function(u){var o=function(){t.props.revealOrder?(r.push(u),W(t,n,r)):u();};e?e(o):o();};},V.prototype.render=function(n){this.u=null,this.o=new Map();var t=x$1(n.children);n.revealOrder&&"b"===n.revealOrder[0]&&t.reverse();for(var e=t.length;e--;){this.o.set(t[e],this.u=[1,0,this.u]);}return n.children;},V.prototype.componentDidUpdate=V.prototype.componentDidMount=function(){var n=this;this.o.forEach(function(t,e){W(n,e,t);});};var z="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,B=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,H="undefined"!=typeof document,Z=function(n){return("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(n);};d$1.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach(function(t){Object.defineProperty(d$1.prototype,t,{configurable:!0,get:function(){return this["UNSAFE_"+t];},set:function(n){Object.defineProperty(this,t,{configurable:!0,writable:!0,value:n});}});});var G=l$1.event;function J(){}function K(){return this.cancelBubble;}function Q(){return this.defaultPrevented;}l$1.event=function(n){return G&&(n=G(n)),n.persist=J,n.isPropagationStopped=K,n.isDefaultPrevented=Q,n.nativeEvent=n;};var nn={configurable:!0,get:function(){return this.class;}},tn=l$1.vnode;l$1.vnode=function(n){var t=n.type,e=n.props,u=e;if("string"==typeof t){var o=-1===t.indexOf("-");for(var i in u={},e){var l=e[i];H&&"children"===i&&"noscript"===t||"value"===i&&"defaultValue"in e&&null==l||("defaultValue"===i&&"value"in e&&null==e.value?i="value":"download"===i&&!0===l?l="":/ondoubleclick/i.test(i)?i="ondblclick":/^onchange(textarea|input)/i.test(i+t)&&!Z(e.type)?i="oninput":/^onfocus$/i.test(i)?i="onfocusin":/^onblur$/i.test(i)?i="onfocusout":/^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(i)?i=i.toLowerCase():o&&B.test(i)?i=i.replace(/[A-Z0-9]/g,"-$&").toLowerCase():null===l&&(l=void 0),/^oninput$/i.test(i)&&(i=i.toLowerCase(),u[i]&&(i="oninputCapture")),u[i]=l);}"select"==t&&u.multiple&&Array.isArray(u.value)&&(u.value=x$1(e.children).forEach(function(n){n.props.selected=-1!=u.value.indexOf(n.props.value);})),"select"==t&&null!=u.defaultValue&&(u.value=x$1(e.children).forEach(function(n){n.props.selected=u.multiple?-1!=u.defaultValue.indexOf(n.props.value):u.defaultValue==n.props.value;})),n.props=u,e.class!=e.className&&(nn.enumerable="className"in e,null!=e.className&&(u.class=e.className),Object.defineProperty(u,"className",nn));}n.$$typeof=z,tn&&tn(n);};var en=l$1.__r;l$1.__r=function(n){en&&en(n),n.__c;};var EventDetail=Symbol("event-detail");function enhanceEvent(e,detail){var event=e;event[EventDetail]=detail;return event;}var alreadyWarned=new Set();function overwriteWithWarning(componentName,props,propName,newValue){//const key = `${componentName};${propName}`;
var oldValue=props[propName];if(oldValue!=null){if(!alreadyWarned.has(String(propName))){alreadyWarned.add(String(propName));console.warn("The ".concat(String(propName)," attribute on ").concat(componentName," was given a value of ").concat(oldValue," but is being overwritten to ").concat(newValue," for conformance. Consider removing it before passing those props to ").concat(componentName,"."));}}props[propName]=newValue;}var debug=false;function setDebugLogging(logging){debug=logging;}function debugLog(who){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}if(debug)console.debug(who+":",...args);}function noop$1(){return;}// (These do not need to be unique)
var Prefices={accordionSectionHeaderButton:"ashb-",accordionSectionBody:"asb-",checkboxLikeInput:"cbli-",checkboxLikeLabel:"cbll-",dialog:"mdl-",dialogTitle:"mdlt-",drawer:"mdw-",drawerTitle:"mdwt-",gridlist:"gl-",gridlistLabel:"gll-",listbox:"lb-",listboxLabel:"lbl-",menu:"menu-",progressIndicator:"pi-",progressLabel:"pl-",radioGroup:"rg-",radioGroupLabel:"rgl-",radio:"rb-",radioLabel:"rbl-",sliderThumb:"st-",table:"tb-",tableLabel:"tbl-",tablist:"tl-",tablistLabel:"tll-",tooltip:"tt-",toolbar:"tlb-",toolbarLabel:"tlbl-"};var HeadingLevelContext=B$2(0);var Heading=R(function Heading(_ref2){var{children,heading,tag}=_ref2,props=_objectWithoutProperties(_ref2,_excluded);var headingLevelBeforeUs=q(HeadingLevelContext);var newHeadingLevel=headingLevelBeforeUs+1;if(tag==null){if(newHeadingLevel<=6){tag="h".concat(newHeadingLevel);}else{tag='div';overwriteWithWarning("Heading",props,"aria-level","".concat(newHeadingLevel));}}return o$1(p$1,{children:o$1(HeadingReset,{newLevel:headingLevelBeforeUs+1,children:[h$1(tag,props,heading),children]})});});var HeadingReset=R(function HeadingReset(_ref3){var{newLevel,children}=_ref3;return o$1(HeadingLevelContext.Provider,{value:newLevel,children:children});});/**
     * Debug hook.
     *
     * Given a value or set of values, emits a console error if any of them change from one render to the next.
     *
     * Eventually, when useEvent lands, we hopefully won't need this.
     */function useEnsureStability(parentHookName){for(var _len2=arguments.length,values=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){values[_key2-1]=arguments[_key2];}var helperToEnsureStability=_([]);var shownError=_([]);useHelper(values.length,-1);values.forEach(useHelper);return;function useHelper(value,i){var index=i+1;// Make sure that the provided functions are perfectly stable across renders
if(helperToEnsureStability.current[index]===undefined)helperToEnsureStability.current[index]=value;if(helperToEnsureStability.current[index]!=value){if(!shownError.current[index]){/* eslint-disable no-debugger */debugger;console.error("The hook ".concat(parentHookName," requires some or all of its arguments remain stable across each render; please check the ").concat(i,"-indexed argument (").concat(i>=0?JSON.stringify(values[i]):"the number of supposedly stable elements",")."));shownError.current[index]=true;}}}}function debounceRendering(f){var _l$1$debounceRenderin;((_l$1$debounceRenderin=l$1.debounceRendering)!==null&&_l$1$debounceRenderin!==void 0?_l$1$debounceRenderin:setTimeout)(f);}/**
     * Similar to `useState`, but for values that aren't "render-important" &ndash; updates don't cause a re-render and so the value shouldn't be used during render (though it certainly can, at least by re-rendering again).
     *
     * To compensate for this, you should pass a `useEffect`-esque callback that is run whenever the value changes.  Just like `useEffect`, this callback can return a cleanup function that's run before the value changes.  If you would like to re-render when the value changes (or, say, when the value meets some criteria), this is where you'll want to put in a call to a `setState` function.
     *
     * To summarize, it's like a `useState`-`useEffect` mashup:
     *
     * 1. It's like `useState`, except this version of `setState` doesn't re-render the whole component
     * 2. It's like `useState`, except you can run a function when the value changes that optionally returns a cleanup function
     * 3. It's like `useEffect`, except you trigger the effect function "remotely" instead of it running after rendering
     * 4. It's like `useEffect`, except the single "dependency" is based on your calls to `setState`
     *
     * Note that while calling `setState` doesn't cause any re-renders, you can do that within your `onChange` function, called whenever the value changes via that `setState`.
     *
     * @param onChange The "effect" function to run when the value changes. Effectively the same as `useEffect`'s "effect" function.  MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.
     * @param getInitialValue If provided, the effect will be invoked once with this value on mount. MUST BE STABLE, either because it has no dependencies, or because it's from useStableCallback, but this will mean you cannot use getState or setState during render.
     * @param customDebounceRendering By default, changes to passive state are delayed by one tick so that we only check for changes in a similar way to Preact. You can override this to, for example, always run immediately instead.
     * @returns
     */function usePassiveState(onChange,getInitialValue,customDebounceRendering){var valueRef=_(Unset$2);var reasonRef=_(Unset$2);var warningRef=_(false);var dependencyToCompareAgainst=_(Unset$2);var cleanupCallbackRef=_(undefined);// Make sure that the provided functions are perfectly stable across renders
useEnsureStability("usePassiveState",onChange,getInitialValue,customDebounceRendering);// Shared between "dependency changed" and "component unmounted".
var onShouldCleanUp=T$1(()=>{var cleanupCallback=cleanupCallbackRef.current;if(cleanupCallback)cleanupCallback();},[]);// There are a couple places where we'd like to use our initial
// value in place of having no value at all yet.
// This is the shared code for that, used on mount and whenever
// getValue is called.
var tryEnsureValue=T$1(()=>{if(valueRef.current===Unset$2&&getInitialValue!=undefined){try{var _onChange;var initialValue=getInitialValue();valueRef.current=initialValue;cleanupCallbackRef.current=(_onChange=onChange===null||onChange===void 0?void 0:onChange(initialValue,undefined,undefined))!==null&&_onChange!==void 0?_onChange:undefined;}catch(ex){// Exceptions are intentional to allow bailout (without exposing the Unset symbol)
}}},[/* getInitialValue and onChange intentionally omitted */]);var getValue=T$1(()=>{if(warningRef.current)console.warn("During onChange, prefer using the (value, prevValue) arguments instead of getValue -- it's ambiguous as to if you're asking for the old or new value at this point in time for this component.");// The first time we call getValue, if we haven't been given a value yet,
// (and we were given an initial value to use)
// return the initial value instead of nothing.
if(valueRef.current===Unset$2)tryEnsureValue();return valueRef.current===Unset$2?undefined:valueRef.current;},[]);s(()=>{// Make sure we've run our effect at least once on mount.
// (If we have an initial value, of course)
tryEnsureValue();},[]);// The actual code the user calls to (possibly) run a new effect.
var setValue=T$1((arg,reason)=>{// Regardless of anything else, figure out what our next value is about to be.
var nextValue=arg instanceof Function?arg(valueRef.current===Unset$2?undefined:valueRef.current):arg;if(dependencyToCompareAgainst.current===Unset$2&&nextValue!==valueRef.current){// This is the first request to change this value.
// Evaluate the request immediately, then queue up the onChange function
// Save our current value so that we can compare against it later
// (if we flip back to this state, then we won't send the onChange function)
dependencyToCompareAgainst.current=valueRef.current;// It's important to update this here (as well as below) in case customDebounceRendering invokes this immediately
valueRef.current=nextValue;reasonRef.current=reason;// Schedule the actual check and invocation of onChange later to let effects settle
(customDebounceRendering!==null&&customDebounceRendering!==void 0?customDebounceRendering:debounceRendering)(()=>{var nextReason=reasonRef.current;var nextDep=valueRef.current;var prevDep=dependencyToCompareAgainst.current;if(dependencyToCompareAgainst.current!=valueRef.current){warningRef.current=true;try{var _onChange2;// Call any registered cleanup function
onShouldCleanUp();cleanupCallbackRef.current=(_onChange2=onChange===null||onChange===void 0?void 0:onChange(nextDep,prevDep===Unset$2?undefined:prevDep,nextReason))!==null&&_onChange2!==void 0?_onChange2:undefined;valueRef.current=nextDep;}finally{// Allow the user to normally call getValue again
warningRef.current=false;}}// We've finished with everything, so mark us as being on a clean slate again.
dependencyToCompareAgainst.current=Unset$2;});}// Update the value immediately.
// This will be checked against prevDep to see if we should actually call onChange
valueRef.current=nextValue;},[]);return[getValue,setValue];}var Unset$2=Symbol();// Easy constants for getInitialValue
function returnTrue(){return true;}function returnFalse(){return false;}function returnNull(){return null;}function returnZero(){return 0;}function identity$2(t){return t;}// Kind of an extra, but it's useful in other places anyway
/**
     * An alternative to use for `customDebounceRendering` that causes `usePassiveState` to run changes without waiting a tick.
     */function runImmediately(f){f();}var Table$1="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";function base64(value){return Table$1[value];}function random6Bits(){return Math.floor(Math.random()*0b1000000);}function random64Bits(){return[random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits(),random6Bits()];}/**
     * Returns a randomly-generated ID with an optional prefix.
     * Note that if the prefix is *explicitly* set to "", then
     * IDs that are not valid under HTML4 may be generated. Oh no.
     *
     *
     * (This is here, in this particular file, to avoid circular dependencies
     * without also making a utilities file.
     * Once we can remove this hook, we can put this function back with useRandomId)
     */function generateRandomId(prefix){return"".concat(prefix!==null&&prefix!==void 0?prefix:"id-").concat(random64Bits().map(n=>base64(n)).join(""));}var previousInputs=new Map();var toRun=new Map();// TODO: Whether this goes in options.diffed or options._commit
// is a post-suspense question.
// Right now, using options._commit has the problem of running
// *after* refs are applied, but we need to come before even that
// so `ref={someStableFunction}` works.
// 
// Also it's private.
//
// ...
// Well, useEvent or whatever is finally, finally 4 years later finally here
// which is cool and means we won't need this at all soon.
// So for now we'll stick with diff to prevent any weirdness with
// commit being private and all.
var commitName="diffed";var originalCommit=l$1[commitName];var newCommit=function(){for(var[id,effectInfo]of toRun){var oldInputs=previousInputs.get(id);if(argsChanged(oldInputs,effectInfo.inputs)){var _effectInfo$cleanup;(_effectInfo$cleanup=effectInfo.cleanup)===null||_effectInfo$cleanup===void 0?void 0:_effectInfo$cleanup.call(effectInfo);effectInfo.cleanup=effectInfo.effect();previousInputs.set(id,effectInfo.inputs);}}toRun.clear();for(var _len3=arguments.length,args=new Array(_len3),_key3=0;_key3<_len3;_key3++){args[_key3]=arguments[_key3];}originalCommit===null||originalCommit===void 0?void 0:originalCommit(...args);};l$1[commitName]=newCommit;/**
     * Semi-private function to allow stable callbacks even within `useLayoutEffect` and ref assignment.
     *
     * Every render, we send the arguments to be evaluated after diffing has completed,
     * which happens before.
     *
     * @param effect
     * @param inputs
     */function useBeforeLayoutEffect(effect,inputs){/*(() => {
            const cleanup = useRef<void | (() => void) | null>(null);
            const prevArgsRef = useRef<Inputs>(null!);
            if (argsChanged(inputs, prevArgsRef.current)) {
                prevArgsRef.current = inputs!;
                if (cleanup.current)
                    cleanup.current();
                cleanup.current = effect();
            }
        })();*/var[id]=p(()=>generateRandomId());if(effect)toRun.set(id,{effect,inputs,cleanup:null});else toRun.delete(id);h(()=>{return()=>{toRun.delete(id);previousInputs.delete(id);};},[id]);}function argsChanged(oldArgs,newArgs){return!!(!oldArgs||oldArgs.length!==(newArgs===null||newArgs===void 0?void 0:newArgs.length)||newArgs!==null&&newArgs!==void 0&&newArgs.some((arg,index)=>arg!==oldArgs[index]));}var Unset$1=Symbol("unset");/**
     * Given an input value, returns a constant getter function that can be used
     * inside of `useEffect` and friends without including it in the dependency array.
     *
     * This uses `options.diffed` in order to run before everything, even
     * ref assignment. This means this getter is safe to use anywhere ***except the render phase***.
     *
     * @param value
     * @returns
     */function useStableGetter(value){var ref=_(Unset$1);useBeforeLayoutEffect(()=>{ref.current=value;},[value]);return T$1(()=>{if(ref.current===Unset$1){throw new Error('Value retrieved from useStableGetter() cannot be called during render.');}return ref.current;},[]);}/**
     * Like `useStableGetter`, but ***requires*** that everything in the object is also stable,
     * and in turn returns an object that itself is stable.
     * @param t
     * @returns
     */function useStableObject(t){var e=Object.entries(t);useEnsureStability("useStableObject",e.length,...e.map(_ref4=>{var[_k,v]=_ref4;return v;}));return _(t).current;}/**
     * We keep track of which callbacks are stable with a WeakMap instead of, say, a symbol because
     * `useCallback` will return a function that's stable across *all* renders, meaning
     * we can't use our funny "`if` only works here because it doesn't break the rules of hooks" trick then.
     */var map=new WeakMap();function isStableGetter(obj){var _map$get;return(_map$get=map.get(obj))!==null&&_map$get!==void 0?_map$get:false;}function setIsStableGetter(obj){map.set(obj,true);return obj;}/**
     * Alternate useCallback() which always returns the same (wrapped) function reference
     * so that it can be excluded from the dependency arrays of `useEffect` and friends.
     *
     * In general, just pass the function you want to be stable (but you can't use it during render,
     * so be careful!).  Alternatively, if you need a stable callback that **can** be used
     * during render, pass an empty dependency array and it'll act like `useCallback` with an
     * empty dependency array, but with the associated stable typing. In this case, you ***must*** ensure that it
     * truly has no dependencies/only stable dependencies!!
     */ //export function useStableCallback<T extends (..._args: any[]) => any>(fn: T, noDeps: []): Stable<T>;
//export function useStableCallback<T extends (..._args: any[]) => any>(fn: T): Stable<T>;
function useStableCallback(fn,noDeps){useEnsureStability("useStableCallback",noDeps==null,noDeps===null||noDeps===void 0?void 0:noDeps.length,isStableGetter(fn));if(isStableGetter(fn))return fn;if(noDeps==null){var currentCallbackGetter=useStableGetter(fn);return setIsStableGetter(T$1(function(){return currentCallbackGetter()(...arguments);},[]));}else{console.assert(noDeps.length===0);return setIsStableGetter(T$1(fn,[]));}}function useMergedChildren(lhs,rhs){if(lhs==null&&rhs==null){return undefined;}else if(lhs==null){return rhs;}else if(rhs==null){return lhs;}else{return h$1(p$1,{},lhs,rhs);}}function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++){e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);}else for(t in e){e[t]&&(n&&(n+=" "),n+=t);}return n;}function clsx(){for(var e,t,f=0,n="";f<arguments.length;){(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);}return n;}/**
     * Given two sets of props, merges their `class` and `className` properties.
     * Duplicate classes are removed (order doesn't matter anyway).
     *
     * @param lhs Classes of the first component
     * @param rhs Classes of the second component
     * @returns A string representing all combined classes from both arguments.
     */function useMergedClasses(lhsClass,lhsClassName,rhsClass,rhsClassName){// Note: For the sake of forward compatibility, this function is labelled as
// a hook, but as it uses no other hooks it technically isn't one.
if(lhsClass||rhsClass||lhsClassName||rhsClassName){var lhsClasses=clsx(lhsClass,lhsClassName).split(" ");var rhsClasses=clsx(rhsClass,rhsClassName).split(" ");var allClasses=new Set([...Array.from(lhsClasses),...Array.from(rhsClasses)]);return Array.from(allClasses).join(" ");}else{return undefined;}}function processRef(instance,ref){if(typeof ref==="function"){ref(instance);}else if(ref!=null){ref.current=instance;}else{/* eslint-disable no-debugger */debugger;console.assert(false,"Unknown ref type found that was neither a RefCallback nor a RefObject");}}/**
     * Combines two refs into one. This allows a component to both use its own ref *and* forward a ref that was given to it.
     * @param lhs
     * @param rhs
     * @returns
     */function useMergedRefs(rhs,lhs){if(lhs==null&&rhs==null){return undefined;}else if(lhs==null){return rhs;}else if(rhs==null){return lhs;}else{return combined;}function combined(current){processRef(current,lhs);processRef(current,rhs);}}function styleStringToObject(style){// TODO: This sucks D:
return Object.fromEntries(style.split(";").map(statement=>statement.split(":")));}/**
     * Merges two style objects, returning the result.
     *
     * @param style The user-given style prop for this component
     * @param obj The CSS properties you want added to the user-given style
     * @returns A CSS object containing the properties of both objects.
     */function useMergedStyles(lhs,rhs){// Easy case, when there are no styles to merge return nothing.
if(!lhs&&!rhs)return undefined;if(typeof lhs!=typeof rhs){// Easy cases, when one is null and the other isn't.
if(lhs&&!rhs)return lhs;if(!lhs&&rhs)return rhs;// They're both non-null but different types.
// Convert the string type to an object bag type and run it again.
if(lhs&&rhs){// (useMergedStyles isn't a true hook -- this isn't a violation)
if(typeof lhs=="string")return useMergedStyles(styleStringToObject(lhs),rhs);if(typeof rhs=="string")return useMergedStyles(lhs,styleStringToObject(rhs));}// Logic???
return undefined;}// They're both strings, just concatenate them.
if(typeof lhs=="string"){return"".concat(lhs,";").concat(rhs!==null&&rhs!==void 0?rhs:"");}// They're both objects, just merge them.
return _objectSpread(_objectSpread({},lhs!==null&&lhs!==void 0?lhs:{}),rhs!==null&&rhs!==void 0?rhs:{});}var log=console.warn;/**
     * Given two sets of props, merges them and returns the result.
     *
     * The hook is aware of and can intelligently merge `className`, `class`, `style`, `ref`, and all event handlers.
     * @param lhs2
     * @param rhs2
     * @returns
     */function useMergedProps(){for(var _len4=arguments.length,allProps=new Array(_len4),_key4=0;_key4<_len4;_key4++){allProps[_key4]=arguments[_key4];}useEnsureStability("useMergedProps",allProps.length);var ret={};for(var nextProps of allProps){ret=useMergedProps2(ret,nextProps);}return ret;}var knowns=new Set(["children","ref","className","class","style"]);function mergeUnknown(key,lhsValue,rhsValue){if(typeof lhsValue==="function"||typeof rhsValue==="function"){// They're both functions that can be merged (or one's a function and the other's null).
// Not an *easy* case, but a well-defined one.
var merged=mergeFunctions(lhsValue,rhsValue);return merged;}else{// Uh...we're here because one of them's null, right?
if(lhsValue==null&&rhsValue==null){if(rhsValue===null&&lhsValue===undefined)return rhsValue;else return lhsValue;}if(lhsValue==null)return rhsValue;else if(rhsValue==null)return lhsValue;else if(rhsValue==lhsValue){// I mean, they're the same value at least
// so we don't need to do anything.
// Not really ideal though.
return rhsValue;}else{// Ugh.
// No good strategies here, just log it if requested
log===null||log===void 0?void 0:log("The prop \"".concat(key,"\" cannot simultaneously be the values ").concat(lhsValue," and ").concat(rhsValue,". One must be chosen outside of useMergedProps."));return rhsValue;}}}/**
     * Helper function.
     *
     * This is one of the most commonly called functions in this and consumer libraries,
     * so it trades a bit of readability for speed (i.e. we don't decompose objects and just do regular property access, iterate with `for...in`, instead of `Object.entries`, etc.)
     */function useMergedProps2(lhsAll,rhsAll){var ret={ref:useMergedRefs(lhsAll.ref,rhsAll.ref),style:useMergedStyles(lhsAll.style,rhsAll.style),className:useMergedClasses(lhsAll["class"],lhsAll.className,rhsAll["class"],rhsAll.className),children:useMergedChildren(lhsAll.children,rhsAll.children)};if(ret.ref===undefined)delete ret.ref;if(ret.style===undefined)delete ret.style;if(ret.className===undefined)delete ret.className;if(ret["class"]===undefined)delete ret["class"];if(ret.children===undefined)delete ret.children;for(var lhsKeyU in lhsAll){var lhsKey=lhsKeyU;if(knowns.has(lhsKey))continue;ret[lhsKey]=lhsAll[lhsKey];}for(var rhsKeyU in rhsAll){var rhsKey=rhsKeyU;if(knowns.has(rhsKey))continue;ret[rhsKey]=mergeUnknown(rhsKey,ret[rhsKey],rhsAll[rhsKey]);}return ret;}function mergeFunctions(lhs,rhs){if(!lhs)return rhs;if(!rhs)return lhs;return function(){var lv=lhs(...arguments);var rv=rhs(...arguments);if(lv instanceof Promise||rv instanceof Promise)return Promise.all([lv,rv]);};}/*
    function test<P extends h.JSX.HTMLAttributes<HTMLInputElement>>(props: P) {

        const id0: GenericGet<{}, "id", string> = "";
        const id3: GenericGet<{ id: undefined }, "id", string> = undefined;
        const id4: GenericGet<{ id: undefined }, "id", string> = undefined;
        const id5: GenericGet<{ id: undefined }, "id", string> = undefined;
        const id6: GenericGet<{ id: undefined }, "id", string> = undefined;
        //const id2: ZipSingle<string | undefined, string | undefined> = undefined;
        const id1: ZipObject<{ id: undefined }, { id: string }> = { id: undefined };

        type M1 = GenericGet<P, "style", string>;
        type M2 = GenericGet<{}, "style", string>;
        const m1: M1 = "";
        const m2: M1 = undefined;
        /// @ts-expect-error    Because number isn't assignable to string
        const m3: M1 = 0;

        const m4: M2 = "";
        const m5: M2 = undefined;
        /// @ts-expect-error    Because number isn't assignable to string
        const m6: M2 = 0;

        const p1: MergedProps<HTMLInputElement, {}, { id: string }> = useMergedProps<HTMLInputElement>()({}, { id: "string" });
        const p2: MergedProps<HTMLInputElement, { id: undefined }, { id: string }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: "string" });
        const p3: MergedProps<HTMLInputElement, { id: undefined }, { id: undefined }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: undefined });
        const p4: MergedProps<HTMLInputElement, {}, {}> = useMergedProps<HTMLInputElement>()({}, {});
        const p5 = useMergedProps<HTMLInputElement>()(props, {});
        const p6 = useMergedProps<HTMLInputElement>()(props, { id: undefined });
        const p7 = useMergedProps<HTMLInputElement>()(props, { id: "string" });


        p1.id?.concat("");
        p2.id?.concat("");
        /// @ts-expect-error    id can't be anything but undefined
        p3.id?.concat("");
        /// @ts-expect-error    id can't be anything but undefined
        p4.id?.concat("");


        p5.id?.concat("");
        p6.id?.concat("");
        p7.id?.concat("");

        /// @ts-expect-error    id must contain undefined
        p5.id.concat("");
        /// @ts-expect-error    id must contain undefined
        p6.id.concat("");
        /// @ts-expect-error    id must contain undefined
        p7.id.concat("");


        if (p5.allowFullScreen === undefined) {}
        else if (p5.allowFullScreen === false) {}
        else if (p5.allowFullScreen === true) {}
        else {
            acceptsNever(p5.allowFullScreen);
        }


        if (p6.allowFullScreen === undefined) {}
        else if (p6.allowFullScreen === false) {}
        else if (p6.allowFullScreen === true) {}
        else {
            acceptsNever(p6.allowFullScreen);
        }


        if (p7.allowFullScreen === undefined) {}
        else if (p7.allowFullScreen === false) {}
        else if (p7.allowFullScreen === true) {}
        else {
            acceptsNever(p7.allowFullScreen);
        }


        // Make sure it works recursively
        const r1a = useMergedProps<HTMLInputElement>()({}, p1);
        const r1b = useMergedProps<HTMLInputElement>()(props, p1);
        const r2a = useMergedProps<HTMLInputElement>()({}, p2);
        const r2b = useMergedProps<HTMLInputElement>()(props, p2);
        const r3a = useMergedProps<HTMLInputElement>()({}, p3);
        const r3b = useMergedProps<HTMLInputElement>()(props, p3);
        const r4a = useMergedProps<HTMLInputElement>()({}, p4);
        const r4b = useMergedProps<HTMLInputElement>()(props, p4);
        const r5a = useMergedProps<HTMLInputElement>()({}, p5);
        const r5b = useMergedProps<HTMLInputElement>()(props, p5);
        const r6a = useMergedProps<HTMLInputElement>()({}, p6);
        const r6b = useMergedProps<HTMLInputElement>()(props, p6);
        const r7a = useMergedProps<HTMLInputElement>()({}, p7);
        const r7b = useMergedProps<HTMLInputElement>()(props, p7);


        r1a.id?.concat("");
        r1b.id?.concat("");
        r2a.id?.concat("");
        r2b.id?.concat("");
        // @ts-expect-error    id can't be anything but undefined
        r3a.id?.concat("");
        r3b.id?.concat("");
        /// @ts-expect-error    id can't be anything but undefined
        r4a.id?.concat("");
        r4b.id?.concat("");


        r5a.id?.concat("");
        r5b.id?.concat("");
        r6a.id?.concat("");
        r6b.id?.concat("");
        r7a.id?.concat("");
        r7b.id?.concat("");

        /// @ts-expect-error    id must contain undefined
        r5a.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r5b.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r6a.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r6b.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r7a.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r7b.id.concat("");


        if (r5a.allowFullScreen === undefined) {}
        else if (r5a.allowFullScreen === false) {}
        else if (r5a.allowFullScreen === true) {}
        else {
            acceptsNever(r5a.allowFullScreen);
        }


        if (r5b.allowFullScreen === undefined) {}
        else if (r5b.allowFullScreen === false) {}
        else if (r5b.allowFullScreen === true) {}
        else {
            acceptsNever(r5b.allowFullScreen);
        }


        if (r6a.allowFullScreen === undefined) {}
        else if (r6a.allowFullScreen === false) {}
        else if (r6a.allowFullScreen === true) {}
        else {
            acceptsNever(r6a.allowFullScreen);
        }


        if (r6b.allowFullScreen === undefined) {}
        else if (r6b.allowFullScreen === false) {}
        else if (r6b.allowFullScreen === true) {}
        else {
            acceptsNever(r6b.allowFullScreen);
        }


        if (r7a.allowFullScreen === undefined) {}
        else if (r7a.allowFullScreen === false) {}
        else if (r7a.allowFullScreen === true) {}
        else {
            acceptsNever(r7a.allowFullScreen);
        }


        if (r7b.allowFullScreen === undefined) {}
        else if (r7b.allowFullScreen === false) {}
        else if (r7b.allowFullScreen === true) {}
        else {
            acceptsNever(r7b.allowFullScreen);
        }

    }
    function acceptsNever(n: never) {}
    */ /**
     * Allows attaching an event handler to any *non-Preact* element, and removing it when the component using the hook unmounts. The callback does not need to be stable across renders.
     *
     * Due to typing limitations, this function must be called like this:
     *
     * `useEventHandler(element, "input")<InputEvent>(e => {})`
     *
     * The type argument is optional, but narrows down the type from "a union of all events" to whatever you specify, and errors if it doesn't exist.
     *
     * There is a separate version that attaches event handlers to a set of props.
     * It takes different event string types (onEvent vs onevent).
     *
     * @param target A *non-Preact* node to attach the event to.
     * @returns
     * *
     */function useGlobalHandler(target,type,handler,options){// Note to self: The typing doesn't improve even if this is split up into a sub-function.
// No matter what, it seems impossible to get the handler's event object typed perfectly.
// It seems like it's guaranteed to always be a union of all available tupes.
// Again, no matter what combination of sub- or sub-sub-functions used.
var stableHandler=useStableCallback(handler!==null&&handler!==void 0?handler:()=>{});if(handler==null)stableHandler=null;h(()=>{if(stableHandler){target.addEventListener(type,stableHandler,options);return()=>target.removeEventListener(type,stableHandler,options);}},[target,type,stableHandler]);}/*
    export function useRefElementProps<E extends Element>(r: UseRefElementReturnType<E>, ...otherProps: h.JSX.HTMLAttributes<E>[]): h.JSX.HTMLAttributes<E>[] {
        return [r.refElementReturn.propsStable, ...otherProps];
    }*/ /**
     * Allows accessing the element a ref references as soon as it does so.
     * *This hook itself returns a hook*--useRefElementProps modifies the props that you were going to pass to an HTMLElement,
     * adding a RefCallback and merging it with any existing ref that existed on the props.
     *
     * Don't forget to provide the Element as the type argument!
     *
     * @returns The element, and the sub-hook that makes it retrievable.
     */function useRefElement(args){var{refElementParameters:{onElementChange,onMount,onUnmount}}=args;useEnsureStability("useRefElement",onElementChange,onMount,onUnmount);// Called (indirectly) by the ref that the element receives.
var handler=T$1((e,prevValue)=>{var cleanup=onElementChange===null||onElementChange===void 0?void 0:onElementChange(e,prevValue);if(prevValue)onUnmount===null||onUnmount===void 0?void 0:onUnmount(prevValue);if(e)onMount===null||onMount===void 0?void 0:onMount(e);return cleanup;},[]);// Let us store the actual (reference to) the element we capture
var[getElement,setElement]=usePassiveState(handler,returnNull,runImmediately);var propsStable=_({ref:setElement});// Return both the element and the hook that modifies 
// the props and allows us to actually find the element
return{refElementReturn:{getElement,propsStable:propsStable.current}};}/*
    const activeElementUpdaters = new Map<Window | null | undefined, Set<undefined | ((e: Node | null) => void)>>();
    const lastActiveElementUpdaters = new Map<Window | null | undefined, Set<undefined | ((e: Node) => void)>>();
    const windowFocusedUpdaters = new Map<Window | null | undefined, Set<undefined | ((focused: boolean) => void)>>();
    const windowsFocusedUpdaters = new Map<Window | null | undefined, boolean>();*/var activeElementUpdaters=new Map();var lastActiveElementUpdaters=new Map();var windowFocusedUpdaters=new Map();var windowsFocusedUpdaters=new Map();//const microtasks = new Map<Set<any>, any>();
// The focusin and focusout events often fire syncronously in the middle of running code.
// E.G. calling element.focus() can cause a focusin event handler to immediately interrupt that code.
// For the purpose of improving stability, we debounce all focus events to the next microtask.
function forEachUpdater(window,map,value,reason){var updaters=map.get(window);if(updaters){//if (!microtasks.has(updatersKey)) {
//debounceRendering(() => {
//const updatersKey = map.get(window)!;
//const value = microtasks.get(updatersKey);
//microtasks.delete(updatersKey);
if(updaters){for(var updater of updaters){var{lastSent,send}=updater;if(value!==lastSent){send(value,reason);updater.lastSent=value;}}}//});
//}
//microtasks.set(updatersKey, value);
}}function focusout(e){var window=e.target.ownerDocument.defaultView;if(e.relatedTarget==null){forEachUpdater(window,activeElementUpdaters,null,e);}}function focusin(e){var window=e.target.ownerDocument.defaultView;var currentlyFocusedElement=e.target;forEachUpdater(window,activeElementUpdaters,currentlyFocusedElement,e);forEachUpdater(window,lastActiveElementUpdaters,currentlyFocusedElement,e);}function windowFocus(e){var window=e.target instanceof Window?e.target:e.currentTarget instanceof Window?e.currentTarget:e.target.ownerDocument.defaultView;windowsFocusedUpdaters.set(window,true);forEachUpdater(window,windowFocusedUpdaters,true,e);}function windowBlur(e){var window=e.target instanceof Window?e.target:e.currentTarget instanceof Window?e.currentTarget:e.target.ownerDocument.defaultView;windowsFocusedUpdaters.set(window,false);forEachUpdater(window,windowFocusedUpdaters,false,e);}/**
     * Allows you to inspect which element in the `document` currently has focus, which was most recently focused if none are currently, and whether or not the window has focus by returning the following functions:
     * * `getActiveElement()`
     * * `getLastActiveElement()`
     * * `getWindowFocused()`
     *
     * (The document's body receiving focus, like it does when you click on an empty area, is counted as no element having focus for all intents and purposes)
     *
     * This is a passive hook, so by default it returns getter functions that report this information but the component will not re-render by default when the active element changes.
     *
     * If you need the component to re-render when the active element changes, use the `on*Change` arguments to set some state on your end.
     */function useActiveElement(_ref5){var{activeElementParameters:{onActiveElementChange,onLastActiveElementChange,onWindowFocusedChange,getDocument,getWindow}}=_ref5;useEnsureStability("useActiveElement",onActiveElementChange,onLastActiveElementChange,onWindowFocusedChange,getDocument,getWindow);h(()=>{var _getWindow,_activeElementUpdater,_activeElementUpdater2,_activeElementUpdater3,_lastActiveElementUpd,_windowFocusedUpdater;var document=getDocument();var window=(_getWindow=getWindow===null||getWindow===void 0?void 0:getWindow(document))!==null&&_getWindow!==void 0?_getWindow:document===null||document===void 0?void 0:document.defaultView;if(((_activeElementUpdater=(_activeElementUpdater2=activeElementUpdaters.get(window))===null||_activeElementUpdater2===void 0?void 0:_activeElementUpdater2.size)!==null&&_activeElementUpdater!==void 0?_activeElementUpdater:0)===0){document===null||document===void 0?void 0:document.addEventListener("focusin",focusin,{passive:true});document===null||document===void 0?void 0:document.addEventListener("focusout",focusout,{passive:true});window===null||window===void 0?void 0:window.addEventListener("focus",windowFocus,{passive:true});window===null||window===void 0?void 0:window.addEventListener("blur",windowBlur,{passive:true});}// Add them even if they're undefined to more easily
// manage the ">0 means don't add handlers" logic.
var localActiveElementUpdaters=(_activeElementUpdater3=activeElementUpdaters.get(window))!==null&&_activeElementUpdater3!==void 0?_activeElementUpdater3:new Set();var localLastActiveElementUpdaters=(_lastActiveElementUpd=lastActiveElementUpdaters.get(window))!==null&&_lastActiveElementUpd!==void 0?_lastActiveElementUpd:new Set();var localWindowFocusedUpdaters=(_windowFocusedUpdater=windowFocusedUpdaters.get(window))!==null&&_windowFocusedUpdater!==void 0?_windowFocusedUpdater:new Set();var laeu={send:setActiveElement,lastSent:undefined};var llaeu={send:setLastActiveElement,lastSent:undefined};var lwfu={send:setWindowFocused,lastSent:undefined};localActiveElementUpdaters.add(laeu);localLastActiveElementUpdaters.add(llaeu);localWindowFocusedUpdaters.add(lwfu);activeElementUpdaters.set(window,localActiveElementUpdaters);lastActiveElementUpdaters.set(window,localLastActiveElementUpdaters);windowFocusedUpdaters.set(window,localWindowFocusedUpdaters);return()=>{activeElementUpdaters.get(window).delete(laeu);lastActiveElementUpdaters.get(window).delete(laeu);windowFocusedUpdaters.get(window).delete(lwfu);if(activeElementUpdaters.size===0){document===null||document===void 0?void 0:document.removeEventListener("focusin",focusin);document===null||document===void 0?void 0:document.removeEventListener("focusout",focusout);window===null||window===void 0?void 0:window.removeEventListener("focus",windowFocus);window===null||window===void 0?void 0:window.removeEventListener("blur",windowBlur);}};},[]);var[getActiveElement,setActiveElement]=usePassiveState(onActiveElementChange,returnNull,runImmediately);var[getLastActiveElement,setLastActiveElement]=usePassiveState(onLastActiveElementChange,returnNull,runImmediately);var[getWindowFocused,setWindowFocused]=usePassiveState(onWindowFocusedChange,returnTrue,runImmediately);return{activeElementReturn:{getActiveElement,getLastActiveElement,getWindowFocused}};}/**
     * Allows a parent component to access information about certain
     * child components once they have rendered.
     *
     * This hook is designed to be lightweight, in that the parent keeps no state
     * and runs no effects.  Each child *does* run an effect, but with no state
     * changes unless you explicitly request them.
     *
     *
     */function useManagedChildren(parentParameters){var{managedChildrenParameters:{onAfterChildLayoutEffect,onChildrenMountChange,onChildCountChange}}=parentParameters,rest=_objectWithoutProperties(parentParameters,_excluded2);useEnsureStability("useManagedChildren",onAfterChildLayoutEffect,onChildrenMountChange,onChildCountChange);usePassiveState(onChildCountChange,returnZero,runImmediately);var getHighestIndex=T$1(()=>{return managedChildrenArray.current.highestIndex;},[]);// All the information we have about our children is stored in this **stable** array.
// Any mutations to this array **DO NOT** trigger any sort of a re-render.
var managedChildrenArray=_({arr:[],rec:{},highestIndex:0,lowestIndex:0});// For indirect access to each child
// Compare getManagedChildInfo
// TODO: The primary use for this is flaggable closest fits
// which needs to search all children for that closest fit.
// It would be nice if there was something better for that.
var forEachChild=T$1(f=>{for(var child of managedChildrenArray.current.arr){if(child)f(child);}for(var field in managedChildrenArray.current.rec){var _child=managedChildrenArray.current.rec[field];if(_child)f(_child);}},[]);// Retrieves the information associated with the child with the given index.
// `undefined` if not child there, or it's unmounted.
var getManagedChildInfo=T$1(index=>{if(typeof index=="number")return managedChildrenArray.current.arr[index];else return managedChildrenArray.current.rec[index];},[]);// tl;dr this is a way to have run useLayoutEffect once after all N children
// have mounted and run *their* useLayoutEffect, but also *without* re-rendering
// ourselves because of having a `childCount` state or anything similar.
//
// When the child count ref updates, we want the parent to also run an effect
// to maybe do something with all these children that just mounted.
// The easiest way would be useEffect(..., [childCount]) but
// that would require us having a childCount state, then calling
// setChildCount and re-rendering every time children mount
// (only one re-render at a time unless children are staggered, but still)
// 
// As an alternate solution, any time a child uses ULE on mount, it queues a microtask
// to emulate running ULE on the parent. Only the first child will actually queue
// the microtask (by checking hasRemoteULE first) so that the "effect" only
// runs once. When it's done, hasRemoteULE is reset so it can run again if
// more children mount/unmount.
var hasRemoteULEChildMounted=_(null);var remoteULEChildChangedCausers=_(new Set());var remoteULEChildChanged=T$1(index=>{if(remoteULEChildChangedCausers.current.size==0){if(!!onAfterChildLayoutEffect){debounceRendering(()=>{onAfterChildLayoutEffect===null||onAfterChildLayoutEffect===void 0?void 0:onAfterChildLayoutEffect(remoteULEChildChangedCausers.current);remoteULEChildChangedCausers.current.clear();});}}remoteULEChildChangedCausers.current.add(index);return()=>{};},[/* Must remain stable */]);var remoteULEChildMounted=T$1((index,mounted)=>{if(!hasRemoteULEChildMounted.current){hasRemoteULEChildMounted.current={mounts:new Set(),unmounts:new Set()};if(onChildCountChange||onChildrenMountChange){debounceRendering(()=>{onChildrenMountChange===null||onChildrenMountChange===void 0?void 0:onChildrenMountChange(hasRemoteULEChildMounted.current.mounts,hasRemoteULEChildMounted.current.unmounts);onChildCountChange===null||onChildCountChange===void 0?void 0:onChildCountChange(getChildren().getHighestIndex()+1);hasRemoteULEChildMounted.current=null;});}}if(mounted){if(typeof index=="number")managedChildrenArray.current.highestIndex=Math.max(managedChildrenArray.current.highestIndex,index);}else{if(typeof index=="number"){delete managedChildrenArray.current.arr[index];var shave=0;while(shave<=managedChildrenArray.current.arr.length&&managedChildrenArray.current.arr[managedChildrenArray.current.arr.length-1-shave]===undefined){++shave;}managedChildrenArray.current.arr.splice(managedChildrenArray.current.arr.length-shave,shave);}else delete managedChildrenArray.current.rec[index];if(typeof index=="number")managedChildrenArray.current.highestIndex=managedChildrenArray.current.arr.length-1;}hasRemoteULEChildMounted.current[mounted?"mounts":"unmounts"].add(index);},[/* Must remain stable */]);var managedChildren=useStableObject(_objectSpread(_objectSpread({},{_:managedChildrenArray.current}),{},{forEach:forEachChild,getAt:getManagedChildInfo,getHighestIndex:getHighestIndex,arraySlice:T$1(()=>{return managedChildrenArray.current.arr.slice();},[])}));var getChildren=T$1(()=>managedChildren,[]);return{context:useStableObject({managedChildContext:useStableObject({managedChildrenArray:managedChildrenArray.current,remoteULEChildMounted,remoteULEChildChanged,getChildren})}),managedChildrenReturn:{getChildren}};}function useManagedChild(info,managedChildParameters){var{context:{managedChildContext:{getChildren,managedChildrenArray,remoteULEChildMounted,remoteULEChildChanged}}}=info;var index=managedChildParameters.index;// Any time our child props change, make that information available
// the parent if they need it.
// The parent can listen for all updates and only act on the ones it cares about,
// and multiple children updating in the same tick will all be sent at once.
s(()=>{// Insert this information in-place
if(typeof index=="number"){managedChildrenArray.arr[index]=_objectSpread({},managedChildParameters);}else{managedChildrenArray.rec[index]=_objectSpread({},managedChildParameters);}return remoteULEChildChanged(index);},[...Object.entries(info).flat(9)]);// 9 is infinity, right? Sure. Unrelated: TODO.
// When we mount, notify the parent via queueMicrotask
// (every child does this, so everything's coordinated to only queue a single microtask per tick)
// Do the same on unmount.
// Note: It's important that this comes AFTER remoteULEChildChanged
// so that remoteULEChildMounted has access to all the info on mount.
s(()=>{remoteULEChildMounted===null||remoteULEChildMounted===void 0?void 0:remoteULEChildMounted(index,true);return()=>remoteULEChildMounted===null||remoteULEChildMounted===void 0?void 0:remoteULEChildMounted(index,false);},[index]);return{managedChildReturn:{getChildren}};}/**
     * An extension to useManagedChildren that handles the following common case:
     * 1. You have a bunch of children
     * 2. At any given time, only 1 of them is "selected", "activated", "focusable", whatever (or 0 of them, that's cool too, just 0 or 1 though).
     * 3. The parent has control over who is "selected" via a numerical index.
     *
     * This hook allows for much easier control over selection management.
     *
     * Note that because you may want to use multiple flags with the same children, this hook *does not* use `useManagedChildren`!
     * You need to pass it the existing children, and you must pass your invocation of `useManagedChildren` the returned `onChildrenMountChange` handler!
     *
     * Also because of that, the types of this function are rather odd.  It's better to start off using a hook that already uses a flag, such as `useRovingTabIndex`, as an example.
     *
     *
     * @param param0
     * @returns
     */function useChildrenFlag(_ref6){var{getChildren,initialIndex,closestFit,onIndexChange,getAt,setAt,isValid}=_ref6;useEnsureStability("useChildrenFlag",onIndexChange,getAt,setAt,isValid);// TODO (maybe?): Even if there is an initial index, it's not set until mount. Is that fine?
var[getCurrentIndex,setCurrentIndex]=usePassiveState(onIndexChange);var[getRequestedIndex,setRequestedIndex]=usePassiveState(null);//    const getFitNullToZero = useStableGetter(fitNullToZero);
// Shared between onChildrenMountChange and changeIndex, not public (but could be I guess)
var getClosestFit=T$1(requestedIndex=>{var children=getChildren();var closestDistance=Infinity;var closestIndex=null;children.forEach(child=>{if(isValid(child)){var newDistance=Math.abs(child.index-requestedIndex);if(newDistance<closestDistance||newDistance==closestDistance&&child.index<requestedIndex){closestDistance=newDistance;closestIndex=child.index;}}});return closestIndex;},[/* Must remain stable! */]);// Any time a child mounts/unmounts, we need to double-check to see if that affects 
// the "currently selected" (or whatever) index.  The two cases we're looking for:
// 1. The currently selected child unmounted
// 2. A child mounted, and it mounts with the index we're looking for
var reevaluateClosestFit=useStableCallback(()=>{var children=getChildren();var requestedIndex=getRequestedIndex();var currentIndex=getCurrentIndex();var currentChild=currentIndex==null?null:children.getAt(currentIndex);if(requestedIndex!=null&&closestFit&&(requestedIndex!=currentIndex||currentChild==null||!isValid(currentChild))){var closestFitIndex=getClosestFit(requestedIndex);setCurrentIndex(closestFitIndex,undefined);if(currentChild)setAt(currentChild,false,closestFitIndex,currentIndex);if(closestFitIndex!=null){var closestFitChild=children.getAt(closestFitIndex);console.assert(closestFitChild!=null,"Internal logic???");setAt(closestFitChild,true,closestFitIndex,currentIndex);}}});var changeIndex=T$1((arg,reason)=>{var children=getChildren();var requestedIndex=arg instanceof Function?arg(getRequestedIndex()):arg;//if (requestedIndex == null && getFitNullToZero())
//    requestedIndex = 0;
setRequestedIndex(requestedIndex,reason);var currentIndex=getCurrentIndex();if(currentIndex==requestedIndex)return requestedIndex;var newMatchingChild=requestedIndex==null?null:children.getAt(requestedIndex);var oldMatchingChild=currentIndex==null?null:children.getAt(currentIndex);if(requestedIndex==null){// Easy case
setCurrentIndex(null,reason);if(oldMatchingChild)setAt(oldMatchingChild,false,requestedIndex,currentIndex);return null;}else{if(newMatchingChild&&isValid(newMatchingChild)){setCurrentIndex(requestedIndex,reason);if(oldMatchingChild)setAt(oldMatchingChild,false,requestedIndex,currentIndex);setAt(newMatchingChild,true,requestedIndex,currentIndex);return requestedIndex;}else{var closestFitIndex=getClosestFit(requestedIndex);setCurrentIndex(closestFitIndex,reason);if(closestFitIndex!=null){newMatchingChild=children.getAt(closestFitIndex);console.assert(newMatchingChild!=null,"Internal logic???");if(oldMatchingChild)setAt(oldMatchingChild,false,closestFitIndex,currentIndex);setAt(newMatchingChild,true,closestFitIndex,currentIndex);return closestFitIndex;}else{if(oldMatchingChild)setAt(oldMatchingChild,false,closestFitIndex,currentIndex);return null;}}}},[]);// Run once, on mount
s(()=>{changeIndex(initialIndex!==null&&initialIndex!==void 0?initialIndex:null,undefined);},[]);return{changeIndex,reevaluateClosestFit,getCurrentIndex};}var MagicWindowKey="__preact-prop-helpers-escape-key-dismiss__";function getElementDepth(element){var depth=0;var parent=element.parentElement;while(parent){depth+=1;parent=parent.parentElement;}return depth;}/**
     * Adds event handlers for a modal-like soft-dismiss interaction.
     *
     * That is, any clicks or taps outside of the given component,
     * or any time the Escape key is pressed within the component,
     * (with various browser oddities regarding clicks on blank or inert areas handled)
     * the component will request to close itself.
     *
     * Of course, if you don't do anything in the `onClose` function,
     * it won't be a soft dismiss anymore.
     *
     * Handles events for pressing the `Escape` key to close the any currently open dialogs, tooltips, menus, popups, etc.
     *
     * One press of the `Escape` key is guaranteed to only call `onClose` for *only one* component, and it is called on the component deepest in the DOM tree, differentiated by passing context information between parent and child.
     *
     * @param param0
     * @returns
     */function useEscapeDismiss(_ref7){var{escapeDismissParameters:{onClose,open,getWindow:unstableGetWindow,parentDepth},refElementPopupReturn:{getElement}}=_ref7,void1=_objectWithoutProperties(_ref7.escapeDismissParameters,_excluded3),void2=_objectWithoutProperties(_ref7.refElementPopupReturn,_excluded4);var stableOnClose=useStableCallback(onClose);var getWindow=useStableCallback(unstableGetWindow);var getDepth=useStableGetter(parentDepth+1);// When this component opens, add an event listener that finds the deepest open soft dismiss element to actually dismiss.
// Only opened components will add event handlers, and will remove them once closed.
// The reason this is so complicated is because:
// 1. We must only close one soft dismiss component at a time.  If there's a tooltip in a popup, the tooltip must be dismissed.
// 2. `keydown` events don't just work on arbitrary elements, for our purposes they must be from the `window`. So we can't rely on normal capturing or bubbling behavior on the element itself.
// 3. Event handlers added to the `window` via `addEventHandler` are called in the order of registration, which is completely at odds with #1.
//
// So all soft dismiss components listen for a keydown of Escape, 
// then the first one to do so will wait for a microtask, 
// then find the deepest element in the document tree to dismiss of all of those components currently open.
h(()=>{var _window$MagicWindowKe;var window=getWindow();(_window$MagicWindowKe=window[MagicWindowKey])!==null&&_window$MagicWindowKe!==void 0?_window$MagicWindowKe:window[MagicWindowKey]={microtaskQueued:false,elementQueue:new Map()};var info=window[MagicWindowKey];if(open){window.addEventListener("keydown",handler,{capture:true});return()=>{var element=getElement();if(element&&info.elementQueue)info.elementQueue.delete(element);window.removeEventListener("keydown",handler,{capture:true});};}function handler(e){if(e.key=="Escape"){// We don't know which of the currently active soft dismisses will actually do something,
// but ONE of them definitely will,
// so we stop propagation to child nodes, but not to everyone on the window (stopImmediatePropagation).
e.preventDefault();e.stopPropagation();// This is what at least one of the elements will call
var onClose2=()=>{stableOnClose("escape");};var element=getElement();if(element){var treeDepth=getElementDepth(element);var depth=getDepth();info.elementQueue.set(element,{depth,onClose:onClose2,treeDepth});}if(!info.microtaskQueued){info.microtaskQueued=true;setTimeout(()=>{var _deepestOnClose;var{elementQueue}=info;info.microtaskQueued=false;info.elementQueue=new Map();var deepestDepth=-Infinity;var deepestTreeDepth=-Infinity;var deepestOnClose=null;for(var[_element,{depth:_depth,onClose:_onClose,treeDepth:_treeDepth}]of elementQueue){var tieBroken=false;if(_depth==deepestDepth){if(_treeDepth>deepestTreeDepth){tieBroken=true;}}if(_depth>deepestDepth||_depth==deepestDepth&&tieBroken){deepestDepth=_depth;deepestTreeDepth=_treeDepth;deepestOnClose=_onClose;}}(_deepestOnClose=deepestOnClose)===null||_deepestOnClose===void 0?void 0:_deepestOnClose();},0);}}}},[open]);}/**
     * Handles events for dismiss events for things like popup menus or transient dialogs -- things where moving focus to a new area of the page means this component should close itself.
     *
     * @param param0
     * @returns
     */function useLostFocusDismiss(_ref8){var{refElementPopupReturn:{getElement:getPopupElement},refElementSourceReturn,lostFocusDismiss:{open,onClose}}=_ref8,void3=_objectWithoutProperties(_ref8.refElementPopupReturn,_excluded5),void1=_objectWithoutProperties(_ref8,_excluded6);var _ref9=refElementSourceReturn!==null&&refElementSourceReturn!==void 0?refElementSourceReturn:{},{getElement:getSourceElement}=_ref9,void2=_objectWithoutProperties(_ref9,_excluded7);var stableOnClose=useStableCallback(onClose);var getOpen=useStableGetter(open);var onLastActiveElementChange=T$1((newElement,_prevElement,_e)=>{var open=getOpen();var sourceElement=getSourceElement===null||getSourceElement===void 0?void 0:getSourceElement();var popupElement=getPopupElement();if(!(sourceElement!==null&&sourceElement!==void 0&&sourceElement.contains(newElement)||popupElement!==null&&popupElement!==void 0&&popupElement.contains(newElement))){if(open)stableOnClose();}},[getSourceElement]);return{activeElementParameters:{onLastActiveElementChange}};}/**
     * Handles events for a backdrop on a modal dialog -- the kind where the user expects the modal to close when they click/tap outside of it.
     *
     * @param param0
     */function useBackdropDismiss(_ref10){var{backdropDismissParameters:{open,onClose:onCloseUnstable},refElementPopupReturn:{getElement}}=_ref10,void1=_objectWithoutProperties(_ref10.backdropDismissParameters,_excluded8),void3=_objectWithoutProperties(_ref10.refElementPopupReturn,_excluded9),void2=_objectWithoutProperties(_ref10,_excluded10);var getOpen=useStableGetter(open);var onClose=useStableCallback(onCloseUnstable);var onBackdropClick=T$1(function onBackdropClick(e){if(!getOpen())return;// Basically, "was this event fired on an element not contained by the modal?"
// There are multiple ways browser react to "interacting with nothing", and this takes care of everything.
var element=getElement();var foundInsideClick=false;if(e.target&&element&&element.contains(e.target)){foundInsideClick=true;}if(!foundInsideClick){onClose();}},[]);useGlobalHandler(window,"mousedown",open?onBackdropClick:null,{capture:true});useGlobalHandler(window,"touchstart",open?onBackdropClick:null,{capture:true});}/**
     * Combines all the methods of dismissing a modal-ish or popup-ish component into one combined hook.
     *
     * This is similar to the "complete" series of list/grid navigation, in that it's the "outermost" hook of its type.
     */function useDismiss(_ref11){var{dismissParameters:{open:globalOpen,onClose:globalOnClose,closeOnBackdrop,closeOnEscape,closeOnLostFocus},escapeDismissParameters:{getWindow,parentDepth}}=_ref11;var{refElementReturn:refElementSourceReturn}=useRefElement({refElementParameters:{}});var{refElementReturn:refElementPopupReturn}=useRefElement({refElementParameters:{}});var onCloseBackdrop=T$1(()=>{return globalOnClose===null||globalOnClose===void 0?void 0:globalOnClose("backdrop");},[globalOnClose]);var onCloseEscape=T$1(()=>{return globalOnClose===null||globalOnClose===void 0?void 0:globalOnClose("escape");},[globalOnClose]);var onCloseFocus=T$1(()=>{return globalOnClose===null||globalOnClose===void 0?void 0:globalOnClose("lost-focus");},[globalOnClose]);useBackdropDismiss({backdropDismissParameters:{onClose:onCloseBackdrop,open:closeOnBackdrop&&globalOpen},refElementPopupReturn});useEscapeDismiss({escapeDismissParameters:{getWindow,onClose:onCloseEscape,open:closeOnEscape&&globalOpen,parentDepth},refElementPopupReturn});var{activeElementParameters}=useLostFocusDismiss({lostFocusDismiss:{onClose:onCloseFocus,open:closeOnLostFocus&&globalOpen},refElementPopupReturn,refElementSourceReturn});var getDocument=T$1(()=>{return getWindow().document;},[getWindow]);useActiveElement({activeElementParameters:_objectSpread(_objectSpread({},activeElementParameters),{},{getWindow,getDocument})});return{refElementSourceReturn,refElementPopupReturn};}/*!
    * tabbable 6.0.1
    * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
    */var candidateSelectors=['input','select','textarea','a[href]','button','[tabindex]:not(slot)','audio[controls]','video[controls]','[contenteditable]:not([contenteditable="false"])','details>summary:first-of-type','details'];var candidateSelector=/* #__PURE__ */candidateSelectors.join(',');var NoElement=typeof Element==='undefined';var matches=NoElement?function(){}:Element.prototype.matches||Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector;var getRootNode=!NoElement&&Element.prototype.getRootNode?function(element){return element.getRootNode();}:function(element){return element.ownerDocument;};var getTabindex=function getTabindex(node,isScope){if(node.tabIndex<0){// in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
// `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
// yet they are still part of the regular tab order; in FF, they get a default
// `tabIndex` of 0; since Chrome still puts those elements in the regular tab
// order, consider their tab index to be 0.
// Also browsers do not return `tabIndex` correctly for contentEditable nodes;
// so if they don't have a tabindex attribute specifically set, assume it's 0.
//
// isScope is positive for custom element with shadow root or slot that by default
// have tabIndex -1, but need to be sorted by document order in order for their
// content to be inserted in the correct position
if((isScope||/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName)||node.isContentEditable)&&isNaN(parseInt(node.getAttribute('tabindex'),10))){return 0;}}return node.tabIndex;};var isInput=function isInput(node){return node.tagName==='INPUT';};var isHiddenInput=function isHiddenInput(node){return isInput(node)&&node.type==='hidden';};var isDetailsWithSummary=function isDetailsWithSummary(node){var r=node.tagName==='DETAILS'&&Array.prototype.slice.apply(node.children).some(function(child){return child.tagName==='SUMMARY';});return r;};var getCheckedRadio=function getCheckedRadio(nodes,form){for(var i=0;i<nodes.length;i++){if(nodes[i].checked&&nodes[i].form===form){return nodes[i];}}};var isTabbableRadio=function isTabbableRadio(node){if(!node.name){return true;}var radioScope=node.form||getRootNode(node);var queryRadios=function queryRadios(name){return radioScope.querySelectorAll('input[type="radio"][name="'+name+'"]');};var radioSet;if(typeof window!=='undefined'&&typeof window.CSS!=='undefined'&&typeof window.CSS.escape==='function'){radioSet=queryRadios(window.CSS.escape(node.name));}else{try{radioSet=queryRadios(node.name);}catch(err){// eslint-disable-next-line no-console
console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s',err.message);return false;}}var checked=getCheckedRadio(radioSet,node.form);return!checked||checked===node;};var isRadio=function isRadio(node){return isInput(node)&&node.type==='radio';};var isNonTabbableRadio=function isNonTabbableRadio(node){return isRadio(node)&&!isTabbableRadio(node);};// determines if a node is ultimately attached to the window's document
var isNodeAttached=function isNodeAttached(node){var _nodeRootHost;// The root node is the shadow root if the node is in a shadow DOM; some document otherwise
//  (but NOT _the_ document; see second 'If' comment below for more).
// If rootNode is shadow root, it'll have a host, which is the element to which the shadow
//  is attached, and the one we need to check if it's in the document or not (because the
//  shadow, and all nodes it contains, is never considered in the document since shadows
//  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,
//  is hidden, or is not in the document itself but is detached, it will affect the shadow's
//  visibility, including all the nodes it contains). The host could be any normal node,
//  or a custom element (i.e. web component). Either way, that's the one that is considered
//  part of the document, not the shadow root, nor any of its children (i.e. the node being
//  tested).
// To further complicate things, we have to look all the way up until we find a shadow HOST
//  that is attached (or find none) because the node might be in nested shadows...
// If rootNode is not a shadow root, it won't have a host, and so rootNode should be the
//  document (per the docs) and while it's a Document-type object, that document does not
//  appear to be the same as the node's `ownerDocument` for some reason, so it's safer
//  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,
//  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when
//  node is actually detached.
var nodeRootHost=getRootNode(node).host;var attached=!!((_nodeRootHost=nodeRootHost)!==null&&_nodeRootHost!==void 0&&_nodeRootHost.ownerDocument.contains(nodeRootHost)||node.ownerDocument.contains(node));while(!attached&&nodeRootHost){var _nodeRootHost2;// since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,
//  which means we need to get the host's host and check if that parent host is contained
//  in (i.e. attached to) the document
nodeRootHost=getRootNode(nodeRootHost).host;attached=!!((_nodeRootHost2=nodeRootHost)!==null&&_nodeRootHost2!==void 0&&_nodeRootHost2.ownerDocument.contains(nodeRootHost));}return attached;};var isZeroArea=function isZeroArea(node){var _node$getBoundingClie=node.getBoundingClientRect(),width=_node$getBoundingClie.width,height=_node$getBoundingClie.height;return width===0&&height===0;};var isHidden=function isHidden(node,_ref){var displayCheck=_ref.displayCheck,getShadowRoot=_ref.getShadowRoot;// NOTE: visibility will be `undefined` if node is detached from the document
//  (see notes about this further down), which means we will consider it visible
//  (this is legacy behavior from a very long way back)
// NOTE: we check this regardless of `displayCheck="none"` because this is a
//  _visibility_ check, not a _display_ check
if(getComputedStyle(node).visibility==='hidden'){return true;}var isDirectSummary=matches.call(node,'details>summary:first-of-type');var nodeUnderDetails=isDirectSummary?node.parentElement:node;if(matches.call(nodeUnderDetails,'details:not([open]) *')){return true;}if(!displayCheck||displayCheck==='full'||displayCheck==='legacy-full'){if(typeof getShadowRoot==='function'){// figure out if we should consider the node to be in an undisclosed shadow and use the
//  'non-zero-area' fallback
var originalNode=node;while(node){var parentElement=node.parentElement;var rootNode=getRootNode(node);if(parentElement&&!parentElement.shadowRoot&&getShadowRoot(parentElement)===true// check if there's an undisclosed shadow
){// node has an undisclosed shadow which means we can only treat it as a black box, so we
//  fall back to a non-zero-area test
return isZeroArea(node);}else if(node.assignedSlot){// iterate up slot
node=node.assignedSlot;}else if(!parentElement&&rootNode!==node.ownerDocument){// cross shadow boundary
node=rootNode.host;}else{// iterate up normal dom
node=parentElement;}}node=originalNode;}// else, `getShadowRoot` might be true, but all that does is enable shadow DOM support
//  (i.e. it does not also presume that all nodes might have undisclosed shadows); or
//  it might be a falsy value, which means shadow DOM support is disabled
// Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)
//  now we can just test to see if it would normally be visible or not, provided it's
//  attached to the main document.
// NOTE: We must consider case where node is inside a shadow DOM and given directly to
//  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.
if(isNodeAttached(node)){// this works wherever the node is: if there's at least one client rect, it's
//  somehow displayed; it also covers the CSS 'display: contents' case where the
//  node itself is hidden in place of its contents; and there's no need to search
//  up the hierarchy either
return!node.getClientRects().length;}// Else, the node isn't attached to the document, which means the `getClientRects()`
//  API will __always__ return zero rects (this can happen, for example, if React
//  is used to render nodes onto a detached tree, as confirmed in this thread:
//  https://github.com/facebook/react/issues/9117#issuecomment-284228870)
//
// It also means that even window.getComputedStyle(node).display will return `undefined`
//  because styles are only computed for nodes that are in the document.
//
// NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable
//  somehow. Though it was never stated officially, anyone who has ever used tabbable
//  APIs on nodes in detached containers has actually implicitly used tabbable in what
//  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck="none"` mode -- essentially
//  considering __everything__ to be visible because of the innability to determine styles.
//
// v6.0.0: As of this major release, the default 'full' option __no longer treats detached
//  nodes as visible with the 'none' fallback.__
if(displayCheck!=='legacy-full'){return true;// hidden
}// else, fallback to 'none' mode and consider the node visible
}else if(displayCheck==='non-zero-area'){// NOTE: Even though this tests that the node's client rect is non-zero to determine
//  whether it's displayed, and that a detached node will __always__ have a zero-area
//  client rect, we don't special-case for whether the node is attached or not. In
//  this mode, we do want to consider nodes that have a zero area to be hidden at all
//  times, and that includes attached or not.
return isZeroArea(node);}// visible, as far as we can tell, or per current `displayCheck=none` mode, we assume
//  it's visible
return false;};// form fields (nested) inside a disabled fieldset are not focusable/tabbable
//  unless they are in the _first_ <legend> element of the top-most disabled
//  fieldset
var isDisabledFromFieldset=function isDisabledFromFieldset(node){if(/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)){var parentNode=node.parentElement;// check if `node` is contained in a disabled <fieldset>
while(parentNode){if(parentNode.tagName==='FIELDSET'&&parentNode.disabled){// look for the first <legend> among the children of the disabled <fieldset>
for(var i=0;i<parentNode.children.length;i++){var child=parentNode.children.item(i);// when the first <legend> (in document order) is found
if(child.tagName==='LEGEND'){// if its parent <fieldset> is not nested in another disabled <fieldset>,
// return whether `node` is a descendant of its first <legend>
return matches.call(parentNode,'fieldset[disabled] *')?true:!child.contains(node);}}// the disabled <fieldset> containing `node` has no <legend>
return true;}parentNode=parentNode.parentElement;}}// else, node's tabbable/focusable state should not be affected by a fieldset's
//  enabled/disabled state
return false;};var isNodeMatchingSelectorFocusable=function isNodeMatchingSelectorFocusable(options,node){if(node.disabled||isHiddenInput(node)||isHidden(node,options)||// For a details element with a summary, the summary element gets the focus
isDetailsWithSummary(node)||isDisabledFromFieldset(node)){return false;}return true;};var isNodeMatchingSelectorTabbable=function isNodeMatchingSelectorTabbable(options,node){if(isNonTabbableRadio(node)||getTabindex(node)<0||!isNodeMatchingSelectorFocusable(options,node)){return false;}return true;};var isTabbable=function isTabbable(node,options){options=options||{};if(!node){throw new Error('No node provided');}if(matches.call(node,candidateSelector)===false){return false;}return isNodeMatchingSelectorTabbable(options,node);};var focusableCandidateSelector=/* #__PURE__ */candidateSelectors.concat('iframe').join(',');var isFocusable=function isFocusable(node,options){options=options||{};if(!node){throw new Error('No node provided');}if(matches.call(node,focusableCandidateSelector)===false){return false;}return isNodeMatchingSelectorFocusable(options,node);};/**
     * @license
     * Copyright 2016 Google Inc. All rights reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */(()=>{var _a,_b,_c;/* Symbols for private properties */var _blockingElements=Symbol();var _alreadyInertElements=Symbol();var _topElParents=Symbol();var _siblingsToRestore=Symbol();var _parentMO=Symbol();/* Symbols for private static methods */var _topChanged=Symbol();var _swapInertedSibling=Symbol();var _inertSiblings=Symbol();var _restoreInertedSiblings=Symbol();var _getParents=Symbol();var _getDistributedChildren=Symbol();var _isInertable=Symbol();var _handleMutations=Symbol();class BlockingElementsImpl{constructor(){/**
                 * The blocking elements.
                 */this[_a]=[];/**
                 * Used to keep track of the parents of the top element, from the element
                 * itself up to body. When top changes, the old top might have been removed
                 * from the document, so we need to memoize the inerted parents' siblings
                 * in order to restore their inerteness when top changes.
                 */this[_b]=[];/**
                 * Elements that are already inert before the first blocking element is
                 * pushed.
                 */this[_c]=new Set();}destructor(){// Restore original inertness.
this[_restoreInertedSiblings](this[_topElParents]);// Note we don't want to make these properties nullable on the class,
// since then we'd need non-null casts in many places. Calling a method on
// a BlockingElements instance after calling destructor will result in an
// exception.
var nullable=this;nullable[_blockingElements]=null;nullable[_topElParents]=null;nullable[_alreadyInertElements]=null;}get top(){var elems=this[_blockingElements];return elems[elems.length-1]||null;}push(element){if(!element||element===this.top){return;}// Remove it from the stack, we'll bring it to the top.
this.remove(element);this[_topChanged](element);this[_blockingElements].push(element);}remove(element){var i=this[_blockingElements].indexOf(element);if(i===-1){return false;}this[_blockingElements].splice(i,1);// Top changed only if the removed element was the top element.
if(i===this[_blockingElements].length){this[_topChanged](this.top);}return true;}pop(){var top=this.top;top&&this.remove(top);return top;}has(element){return this[_blockingElements].indexOf(element)!==-1;}/**
             * Sets `inert` to all document elements except the new top element, its
             * parents, and its distributed content.
             */[(_a=_blockingElements,_b=_topElParents,_c=_alreadyInertElements,_topChanged)](newTop){var toKeepInert=this[_alreadyInertElements];var oldParents=this[_topElParents];// No new top, reset old top if any.
if(!newTop){this[_restoreInertedSiblings](oldParents);toKeepInert.clear();this[_topElParents]=[];return;}var newParents=this[_getParents](newTop);// New top is not contained in the main document!
if(newParents[newParents.length-1].parentNode!==document.body){throw Error('Non-connected element cannot be a blocking element');}// Cast here because we know we'll call _inertSiblings on newParents
// below.
this[_topElParents]=newParents;var toSkip=this[_getDistributedChildren](newTop);// No previous top element.
if(!oldParents.length){this[_inertSiblings](newParents,toSkip,toKeepInert);return;}var i=oldParents.length-1;var j=newParents.length-1;// Find common parent. Index 0 is the element itself (so stop before it).
while(i>0&&j>0&&oldParents[i]===newParents[j]){i--;j--;}// If up the parents tree there are 2 elements that are siblings, swap
// the inerted sibling.
if(oldParents[i]!==newParents[j]){this[_swapInertedSibling](oldParents[i],newParents[j]);}// Restore old parents siblings inertness.
i>0&&this[_restoreInertedSiblings](oldParents.slice(0,i));// Make new parents siblings inert.
j>0&&this[_inertSiblings](newParents.slice(0,j),toSkip,null);}/**
             * Swaps inertness between two sibling elements.
             * Sets the property `inert` over the attribute since the inert spec
             * doesn't specify if it should be reflected.
             * https://html.spec.whatwg.org/multipage/interaction.html#inert
             */[_swapInertedSibling](oldInert,newInert){var siblingsToRestore=oldInert[_siblingsToRestore];// oldInert is not contained in siblings to restore, so we have to check
// if it's inertable and if already inert.
if(this[_isInertable](oldInert)&&!oldInert.inert){oldInert.inert=true;siblingsToRestore.add(oldInert);}// If newInert was already between the siblings to restore, it means it is
// inertable and must be restored.
if(siblingsToRestore.has(newInert)){newInert.inert=false;siblingsToRestore.delete(newInert);}newInert[_parentMO]=oldInert[_parentMO];newInert[_siblingsToRestore]=siblingsToRestore;oldInert[_parentMO]=undefined;oldInert[_siblingsToRestore]=undefined;}/**
             * Restores original inertness to the siblings of the elements.
             * Sets the property `inert` over the attribute since the inert spec
             * doesn't specify if it should be reflected.
             * https://html.spec.whatwg.org/multipage/interaction.html#inert
             */[_restoreInertedSiblings](elements){for(var element of elements){var mo=element[_parentMO];mo.disconnect();element[_parentMO]=undefined;var siblings=element[_siblingsToRestore];for(var sibling of siblings){sibling.inert=false;}element[_siblingsToRestore]=undefined;}}/**
             * Inerts the siblings of the elements except the elements to skip. Stores
             * the inerted siblings into the element's symbol `_siblingsToRestore`.
             * Pass `toKeepInert` to collect the already inert elements.
             * Sets the property `inert` over the attribute since the inert spec
             * doesn't specify if it should be reflected.
             * https://html.spec.whatwg.org/multipage/interaction.html#inert
             */[_inertSiblings](elements,toSkip,toKeepInert){for(var element of elements){// Assume element is not a Document, so it must have a parentNode.
var parent=element.parentNode;var children=parent.children;var inertedSiblings=new Set();for(var _j=0;_j<children.length;_j++){var sibling=children[_j];// Skip the input element, if not inertable or to be skipped.
if(sibling===element||!this[_isInertable](sibling)||toSkip&&toSkip.has(sibling)){continue;}// Should be collected since already inerted.
if(toKeepInert&&sibling.inert){toKeepInert.add(sibling);}else{sibling.inert=true;inertedSiblings.add(sibling);}}// Store the siblings that were inerted.
element[_siblingsToRestore]=inertedSiblings;// Observe only immediate children mutations on the parent.
var mo=new MutationObserver(this[_handleMutations].bind(this));element[_parentMO]=mo;var parentToObserve=parent;// If we're using the ShadyDOM polyfill, then our parent could be a
// shady root, which is an object that acts like a ShadowRoot, but isn't
// actually a node in the real DOM. Observe the real DOM parent instead.
var maybeShadyRoot=parentToObserve;if(maybeShadyRoot.__shady&&maybeShadyRoot.host){parentToObserve=maybeShadyRoot.host;}mo.observe(parentToObserve,{childList:true});}}/**
             * Handles newly added/removed nodes by toggling their inertness.
             * It also checks if the current top Blocking Element has been removed,
             * notifying and removing it.
             */[_handleMutations](mutations){var parents=this[_topElParents];var toKeepInert=this[_alreadyInertElements];for(var mutation of mutations){// If the target is a shadowRoot, get its host as we skip shadowRoots when
// computing _topElParents.
var target=mutation.target.host||mutation.target;var idx=target===document.body?parents.length:parents.indexOf(target);var inertedChild=parents[idx-1];var inertedSiblings=inertedChild[_siblingsToRestore];// To restore.
for(var _i2=0;_i2<mutation.removedNodes.length;_i2++){var sibling=mutation.removedNodes[_i2];if(sibling===inertedChild){console.info('Detected removal of the top Blocking Element.');this.pop();return;}if(inertedSiblings.has(sibling)){sibling.inert=false;inertedSiblings.delete(sibling);}}// To inert.
for(var _i3=0;_i3<mutation.addedNodes.length;_i3++){var _sibling=mutation.addedNodes[_i3];if(!this[_isInertable](_sibling)){continue;}if(toKeepInert&&_sibling.inert){toKeepInert.add(_sibling);}else{_sibling.inert=true;inertedSiblings.add(_sibling);}}}}/**
             * Returns if the element is inertable.
             */[_isInertable](element){return false===/^(style|template|script)$/.test(element.localName);}/**
             * Returns the list of newParents of an element, starting from element
             * (included) up to `document.body` (excluded).
             */[_getParents](element){var parents=[];var current=element;// Stop to body.
while(current&&current!==document.body){// Skip shadow roots.
if(current.nodeType===Node.ELEMENT_NODE){parents.push(current);}// ShadowDom v1
if(current.assignedSlot){// Collect slots from deepest slot to top.
while(current=current.assignedSlot){parents.push(current);}// Continue the search on the top slot.
current=parents.pop();continue;}current=current.parentNode||current.host;}return parents;}/**
             * Returns the distributed children of the element's shadow root.
             * Returns null if the element doesn't have a shadow root.
             */[_getDistributedChildren](element){var shadowRoot=element.shadowRoot;if(!shadowRoot){return null;}var result=new Set();var i;var j;var nodes;var slots=shadowRoot.querySelectorAll('slot');if(slots.length&&slots[0].assignedNodes){for(i=0;i<slots.length;i++){nodes=slots[i].assignedNodes({flatten:true});for(j=0;j<nodes.length;j++){if(nodes[j].nodeType===Node.ELEMENT_NODE){result.add(nodes[j]);}}}// No need to search for <content>.
}return result;}}document.$blockingElements=new BlockingElementsImpl();})();var commonjsGlobal=typeof globalThis!=='undefined'?globalThis:typeof window!=='undefined'?window:typeof global!=='undefined'?global:typeof self!=='undefined'?self:{};(function(module,exports){(function(global,factory){factory();})(commonjsGlobal,function(){var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}/**
    	   * This work is licensed under the W3C Software and Document License
    	   * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).
    	   */(function(){// Return early if we're not running inside of the browser.
if(typeof window==='undefined'){return;}// Convenience function for converting NodeLists.
/** @type {typeof Array.prototype.slice} */var slice=Array.prototype.slice;/**
    	     * IE has a non-standard name for "matches".
    	     * @type {typeof Element.prototype.matches}
    	     */var matches=Element.prototype.matches||Element.prototype.msMatchesSelector;/** @type {string} */var _focusableElementsString=['a[href]','area[href]','input:not([disabled])','select:not([disabled])','textarea:not([disabled])','button:not([disabled])','details','summary','iframe','object','embed','[contenteditable]'].join(',');/**
    	     * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`
    	     * attribute.
    	     *
    	     * Its main functions are:
    	     *
    	     * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the
    	     *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering
    	     *   each focusable node in the subtree with the singleton `InertManager` which manages all known
    	     *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`
    	     *   instance exists for each focusable node which has at least one inert root as an ancestor.
    	     *
    	     * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`
    	     *   attribute is removed from the root node). This is handled in the destructor, which calls the
    	     *   `deregister` method on `InertManager` for each managed inert node.
    	     */var InertRoot=function(){/**
    	       * @param {!HTMLElement} rootElement The HTMLElement at the root of the inert subtree.
    	       * @param {!InertManager} inertManager The global singleton InertManager object.
    	       */function InertRoot(rootElement,inertManager){_classCallCheck(this,InertRoot);/** @type {!InertManager} */this._inertManager=inertManager;/** @type {!HTMLElement} */this._rootElement=rootElement;/**
    	         * @type {!Set<!InertNode>}
    	         * All managed focusable nodes in this InertRoot's subtree.
    	         */this._managedNodes=new Set();// Make the subtree hidden from assistive technology
if(this._rootElement.hasAttribute('aria-hidden')){/** @type {?string} */this._savedAriaHidden=this._rootElement.getAttribute('aria-hidden');}else{this._savedAriaHidden=null;}this._rootElement.setAttribute('aria-hidden','true');// Make all focusable elements in the subtree unfocusable and add them to _managedNodes
this._makeSubtreeUnfocusable(this._rootElement);// Watch for:
// - any additions in the subtree: make them unfocusable too
// - any removals from the subtree: remove them from this inert root's managed nodes
// - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable
//   element, make that node a managed node.
this._observer=new MutationObserver(this._onMutation.bind(this));this._observer.observe(this._rootElement,{attributes:true,childList:true,subtree:true});}/**
    	       * Call this whenever this object is about to become obsolete.  This unwinds all of the state
    	       * stored in this object and updates the state of all of the managed nodes.
    	       */_createClass(InertRoot,[{key:'destructor',value:function destructor(){this._observer.disconnect();if(this._rootElement){if(this._savedAriaHidden!==null){this._rootElement.setAttribute('aria-hidden',this._savedAriaHidden);}else{this._rootElement.removeAttribute('aria-hidden');}}this._managedNodes.forEach(function(inertNode){this._unmanageNode(inertNode.node);},this);// Note we cast the nulls to the ANY type here because:
// 1) We want the class properties to be declared as non-null, or else we
//    need even more casts throughout this code. All bets are off if an
//    instance has been destroyed and a method is called.
// 2) We don't want to cast "this", because we want type-aware optimizations
//    to know which properties we're setting.
this._observer=/** @type {?} */null;this._rootElement=/** @type {?} */null;this._managedNodes=/** @type {?} */null;this._inertManager=/** @type {?} */null;}/**
    	         * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.
    	         */},{key:'_makeSubtreeUnfocusable',/**
    	         * @param {!Node} startNode
    	         */value:function _makeSubtreeUnfocusable(startNode){var _this2=this;composedTreeWalk(startNode,function(node){return _this2._visitNode(node);});var activeElement=document.activeElement;if(!document.body.contains(startNode)){// startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.
var node=startNode;/** @type {!ShadowRoot|undefined} */var root=undefined;while(node){if(node.nodeType===Node.DOCUMENT_FRAGMENT_NODE){root=/** @type {!ShadowRoot} */node;break;}node=node.parentNode;}if(root){activeElement=root.activeElement;}}if(startNode.contains(activeElement)){activeElement.blur();// In IE11, if an element is already focused, and then set to tabindex=-1
// calling blur() will not actually move the focus.
// To work around this we call focus() on the body instead.
if(activeElement===document.activeElement){document.body.focus();}}}/**
    	         * @param {!Node} node
    	         */},{key:'_visitNode',value:function _visitNode(node){if(node.nodeType!==Node.ELEMENT_NODE){return;}var element=/** @type {!HTMLElement} */node;// If a descendant inert root becomes un-inert, its descendants will still be inert because of
// this inert root, so all of its managed nodes need to be adopted by this InertRoot.
if(element!==this._rootElement&&element.hasAttribute('inert')){this._adoptInertRoot(element);}if(matches.call(element,_focusableElementsString)||element.hasAttribute('tabindex')){this._manageNode(element);}}/**
    	         * Register the given node with this InertRoot and with InertManager.
    	         * @param {!Node} node
    	         */},{key:'_manageNode',value:function _manageNode(node){var inertNode=this._inertManager.register(node,this);this._managedNodes.add(inertNode);}/**
    	         * Unregister the given node with this InertRoot and with InertManager.
    	         * @param {!Node} node
    	         */},{key:'_unmanageNode',value:function _unmanageNode(node){var inertNode=this._inertManager.deregister(node,this);if(inertNode){this._managedNodes['delete'](inertNode);}}/**
    	         * Unregister the entire subtree starting at `startNode`.
    	         * @param {!Node} startNode
    	         */},{key:'_unmanageSubtree',value:function _unmanageSubtree(startNode){var _this3=this;composedTreeWalk(startNode,function(node){return _this3._unmanageNode(node);});}/**
    	         * If a descendant node is found with an `inert` attribute, adopt its managed nodes.
    	         * @param {!HTMLElement} node
    	         */},{key:'_adoptInertRoot',value:function _adoptInertRoot(node){var inertSubroot=this._inertManager.getInertRoot(node);// During initialisation this inert root may not have been registered yet,
// so register it now if need be.
if(!inertSubroot){this._inertManager.setInert(node,true);inertSubroot=this._inertManager.getInertRoot(node);}inertSubroot.managedNodes.forEach(function(savedInertNode){this._manageNode(savedInertNode.node);},this);}/**
    	         * Callback used when mutation observer detects subtree additions, removals, or attribute changes.
    	         * @param {!Array<!MutationRecord>} records
    	         * @param {!MutationObserver} self
    	         */},{key:'_onMutation',value:function _onMutation(records,self){records.forEach(function(record){var target=/** @type {!HTMLElement} */record.target;if(record.type==='childList'){// Manage added nodes
slice.call(record.addedNodes).forEach(function(node){this._makeSubtreeUnfocusable(node);},this);// Un-manage removed nodes
slice.call(record.removedNodes).forEach(function(node){this._unmanageSubtree(node);},this);}else if(record.type==='attributes'){if(record.attributeName==='tabindex'){// Re-initialise inert node if tabindex changes
this._manageNode(target);}else if(target!==this._rootElement&&record.attributeName==='inert'&&target.hasAttribute('inert')){// If a new inert root is added, adopt its managed nodes and make sure it knows about the
// already managed nodes from this inert subroot.
this._adoptInertRoot(target);var inertSubroot=this._inertManager.getInertRoot(target);this._managedNodes.forEach(function(managedNode){if(target.contains(managedNode.node)){inertSubroot._manageNode(managedNode.node);}});}}},this);}},{key:'managedNodes',get:function get(){return new Set(this._managedNodes);}/** @return {boolean} */},{key:'hasSavedAriaHidden',get:function get(){return this._savedAriaHidden!==null;}/** @param {?string} ariaHidden */},{key:'savedAriaHidden',set:function set(ariaHidden){this._savedAriaHidden=ariaHidden;}/** @return {?string} */,get:function get(){return this._savedAriaHidden;}}]);return InertRoot;}();/**
    	     * `InertNode` initialises and manages a single inert node.
    	     * A node is inert if it is a descendant of one or more inert root elements.
    	     *
    	     * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and
    	     * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element
    	     * is intrinsically focusable or not.
    	     *
    	     * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an
    	     * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the
    	     * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s
    	     * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,
    	     * or removes the `tabindex` attribute if the element is intrinsically focusable.
    	     */var InertNode=function(){/**
    	       * @param {!Node} node A focusable element to be made inert.
    	       * @param {!InertRoot} inertRoot The inert root element associated with this inert node.
    	       */function InertNode(node,inertRoot){_classCallCheck(this,InertNode);/** @type {!Node} */this._node=node;/** @type {boolean} */this._overrodeFocusMethod=false;/**
    	         * @type {!Set<!InertRoot>} The set of descendant inert roots.
    	         *    If and only if this set becomes empty, this node is no longer inert.
    	         */this._inertRoots=new Set([inertRoot]);/** @type {?number} */this._savedTabIndex=null;/** @type {boolean} */this._destroyed=false;// Save any prior tabindex info and make this node untabbable
this.ensureUntabbable();}/**
    	       * Call this whenever this object is about to become obsolete.
    	       * This makes the managed node focusable again and deletes all of the previously stored state.
    	       */_createClass(InertNode,[{key:'destructor',value:function destructor(){this._throwIfDestroyed();if(this._node&&this._node.nodeType===Node.ELEMENT_NODE){var element=/** @type {!HTMLElement} */this._node;if(this._savedTabIndex!==null){element.setAttribute('tabindex',this._savedTabIndex);}else{element.removeAttribute('tabindex');}// Use `delete` to restore native focus method.
if(this._overrodeFocusMethod){delete element.focus;}}// See note in InertRoot.destructor for why we cast these nulls to ANY.
this._node=/** @type {?} */null;this._inertRoots=/** @type {?} */null;this._destroyed=true;}/**
    	         * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.
    	         * If the object has been destroyed, any attempt to access it will cause an exception.
    	         */},{key:'_throwIfDestroyed',/**
    	         * Throw if user tries to access destroyed InertNode.
    	         */value:function _throwIfDestroyed(){if(this.destroyed){throw new Error('Trying to access destroyed InertNode');}}/** @return {boolean} */},{key:'ensureUntabbable',/** Save the existing tabindex value and make the node untabbable and unfocusable */value:function ensureUntabbable(){if(this.node.nodeType!==Node.ELEMENT_NODE){return;}var element=/** @type {!HTMLElement} */this.node;if(matches.call(element,_focusableElementsString)){if(/** @type {!HTMLElement} */element.tabIndex===-1&&this.hasSavedTabIndex){return;}if(element.hasAttribute('tabindex')){this._savedTabIndex=/** @type {!HTMLElement} */element.tabIndex;}element.setAttribute('tabindex','-1');if(element.nodeType===Node.ELEMENT_NODE){element.focus=function(){};this._overrodeFocusMethod=true;}}else if(element.hasAttribute('tabindex')){this._savedTabIndex=/** @type {!HTMLElement} */element.tabIndex;element.removeAttribute('tabindex');}}/**
    	         * Add another inert root to this inert node's set of managing inert roots.
    	         * @param {!InertRoot} inertRoot
    	         */},{key:'addInertRoot',value:function addInertRoot(inertRoot){this._throwIfDestroyed();this._inertRoots.add(inertRoot);}/**
    	         * Remove the given inert root from this inert node's set of managing inert roots.
    	         * If the set of managing inert roots becomes empty, this node is no longer inert,
    	         * so the object should be destroyed.
    	         * @param {!InertRoot} inertRoot
    	         */},{key:'removeInertRoot',value:function removeInertRoot(inertRoot){this._throwIfDestroyed();this._inertRoots['delete'](inertRoot);if(this._inertRoots.size===0){this.destructor();}}},{key:'destroyed',get:function get(){return(/** @type {!InertNode} */this._destroyed);}},{key:'hasSavedTabIndex',get:function get(){return this._savedTabIndex!==null;}/** @return {!Node} */},{key:'node',get:function get(){this._throwIfDestroyed();return this._node;}/** @param {?number} tabIndex */},{key:'savedTabIndex',set:function set(tabIndex){this._throwIfDestroyed();this._savedTabIndex=tabIndex;}/** @return {?number} */,get:function get(){this._throwIfDestroyed();return this._savedTabIndex;}}]);return InertNode;}();/**
    	     * InertManager is a per-document singleton object which manages all inert roots and nodes.
    	     *
    	     * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`
    	     * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.
    	     * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant
    	     * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance
    	     * is created for each such node, via the `_managedNodes` map.
    	     */var InertManager=function(){/**
    	       * @param {!Document} document
    	       */function InertManager(document){_classCallCheck(this,InertManager);if(!document){throw new Error('Missing required argument; InertManager needs to wrap a document.');}/** @type {!Document} */this._document=document;/**
    	         * All managed nodes known to this InertManager. In a map to allow looking up by Node.
    	         * @type {!Map<!Node, !InertNode>}
    	         */this._managedNodes=new Map();/**
    	         * All inert roots known to this InertManager. In a map to allow looking up by Node.
    	         * @type {!Map<!Node, !InertRoot>}
    	         */this._inertRoots=new Map();/**
    	         * Observer for mutations on `document.body`.
    	         * @type {!MutationObserver}
    	         */this._observer=new MutationObserver(this._watchForInert.bind(this));// Add inert style.
addInertStyle(document.head||document.body||document.documentElement);// Wait for document to be loaded.
if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',this._onDocumentLoaded.bind(this));}else{this._onDocumentLoaded();}}/**
    	       * Set whether the given element should be an inert root or not.
    	       * @param {!HTMLElement} root
    	       * @param {boolean} inert
    	       */_createClass(InertManager,[{key:'setInert',value:function setInert(root,inert){if(inert){if(this._inertRoots.has(root)){// element is already inert
return;}var inertRoot=new InertRoot(root,this);root.setAttribute('inert','');this._inertRoots.set(root,inertRoot);// If not contained in the document, it must be in a shadowRoot.
// Ensure inert styles are added there.
if(!this._document.body.contains(root)){var parent=root.parentNode;while(parent){if(parent.nodeType===11){addInertStyle(parent);}parent=parent.parentNode;}}}else{if(!this._inertRoots.has(root)){// element is already non-inert
return;}var _inertRoot=this._inertRoots.get(root);_inertRoot.destructor();this._inertRoots['delete'](root);root.removeAttribute('inert');}}/**
    	         * Get the InertRoot object corresponding to the given inert root element, if any.
    	         * @param {!Node} element
    	         * @return {!InertRoot|undefined}
    	         */},{key:'getInertRoot',value:function getInertRoot(element){return this._inertRoots.get(element);}/**
    	         * Register the given InertRoot as managing the given node.
    	         * In the case where the node has a previously existing inert root, this inert root will
    	         * be added to its set of inert roots.
    	         * @param {!Node} node
    	         * @param {!InertRoot} inertRoot
    	         * @return {!InertNode} inertNode
    	         */},{key:'register',value:function register(node,inertRoot){var inertNode=this._managedNodes.get(node);if(inertNode!==undefined){// node was already in an inert subtree
inertNode.addInertRoot(inertRoot);}else{inertNode=new InertNode(node,inertRoot);}this._managedNodes.set(node,inertNode);return inertNode;}/**
    	         * De-register the given InertRoot as managing the given inert node.
    	         * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert
    	         * node from the InertManager's set of managed nodes if it is destroyed.
    	         * If the node is not currently managed, this is essentially a no-op.
    	         * @param {!Node} node
    	         * @param {!InertRoot} inertRoot
    	         * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.
    	         */},{key:'deregister',value:function deregister(node,inertRoot){var inertNode=this._managedNodes.get(node);if(!inertNode){return null;}inertNode.removeInertRoot(inertRoot);if(inertNode.destroyed){this._managedNodes['delete'](node);}return inertNode;}/**
    	         * Callback used when document has finished loading.
    	         */},{key:'_onDocumentLoaded',value:function _onDocumentLoaded(){// Find all inert roots in document and make them actually inert.
var inertElements=slice.call(this._document.querySelectorAll('[inert]'));inertElements.forEach(function(inertElement){this.setInert(inertElement,true);},this);// Comment this out to use programmatic API only.
this._observer.observe(this._document.body||this._document.documentElement,{attributes:true,subtree:true,childList:true});}/**
    	         * Callback used when mutation observer detects attribute changes.
    	         * @param {!Array<!MutationRecord>} records
    	         * @param {!MutationObserver} self
    	         */},{key:'_watchForInert',value:function _watchForInert(records,self){var _this=this;records.forEach(function(record){switch(record.type){case'childList':slice.call(record.addedNodes).forEach(function(node){if(node.nodeType!==Node.ELEMENT_NODE){return;}var inertElements=slice.call(node.querySelectorAll('[inert]'));if(matches.call(node,'[inert]')){inertElements.unshift(node);}inertElements.forEach(function(inertElement){this.setInert(inertElement,true);},_this);},_this);break;case'attributes':if(record.attributeName!=='inert'){return;}var target=/** @type {!HTMLElement} */record.target;var inert=target.hasAttribute('inert');_this.setInert(target,inert);break;}},this);}}]);return InertManager;}();/**
    	     * Recursively walk the composed tree from |node|.
    	     * @param {!Node} node
    	     * @param {(function (!HTMLElement))=} callback Callback to be called for each element traversed,
    	     *     before descending into child nodes.
    	     * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.
    	     */function composedTreeWalk(node,callback,shadowRootAncestor){if(node.nodeType==Node.ELEMENT_NODE){var element=/** @type {!HTMLElement} */node;if(callback){callback(element);}// Descend into node:
// If it has a ShadowRoot, ignore all child elements - these will be picked
// up by the <content> or <shadow> elements. Descend straight into the
// ShadowRoot.
var shadowRoot=/** @type {!HTMLElement} */element.shadowRoot;if(shadowRoot){composedTreeWalk(shadowRoot,callback);return;}// If it is a <content> element, descend into distributed elements - these
// are elements from outside the shadow root which are rendered inside the
// shadow DOM.
if(element.localName=='content'){var content=/** @type {!HTMLContentElement} */element;// Verifies if ShadowDom v0 is supported.
var distributedNodes=content.getDistributedNodes?content.getDistributedNodes():[];for(var i=0;i<distributedNodes.length;i++){composedTreeWalk(distributedNodes[i],callback);}return;}// If it is a <slot> element, descend into assigned nodes - these
// are elements from outside the shadow root which are rendered inside the
// shadow DOM.
if(element.localName=='slot'){var slot=/** @type {!HTMLSlotElement} */element;// Verify if ShadowDom v1 is supported.
var _distributedNodes=slot.assignedNodes?slot.assignedNodes({flatten:true}):[];for(var _i=0;_i<_distributedNodes.length;_i++){composedTreeWalk(_distributedNodes[_i],callback);}return;}}// If it is neither the parent of a ShadowRoot, a <content> element, a <slot>
// element, nor a <shadow> element recurse normally.
var child=node.firstChild;while(child!=null){composedTreeWalk(child,callback);child=child.nextSibling;}}/**
    	     * Adds a style element to the node containing the inert specific styles
    	     * @param {!Node} node
    	     */function addInertStyle(node){if(node.querySelector('style#inert-style, link#inert-style')){return;}var style=document.createElement('style');style.setAttribute('id','inert-style');style.textContent='\n'+'[inert] {\n'+'  pointer-events: none;\n'+'  cursor: default;\n'+'}\n'+'\n'+'[inert], [inert] * {\n'+'  -webkit-user-select: none;\n'+'  -moz-user-select: none;\n'+'  -ms-user-select: none;\n'+'  user-select: none;\n'+'}\n';node.appendChild(style);}if(!HTMLElement.prototype.hasOwnProperty('inert')){/** @type {!InertManager} */var inertManager=new InertManager(document);Object.defineProperty(HTMLElement.prototype,'inert',{enumerable:true,/** @this {!HTMLElement} */get:function get(){return this.hasAttribute('inert');},/** @this {!HTMLElement} */set:function set(inert){inertManager.setInert(this,inert);}});}})();});})();function getDocument(element){var _ref12,_ref13,_element$ownerDocumen;return(_ref12=(_ref13=(_element$ownerDocumen=element===null||element===void 0?void 0:element.ownerDocument)!==null&&_element$ownerDocumen!==void 0?_element$ownerDocumen:document)!==null&&_ref13!==void 0?_ref13:window.document)!==null&&_ref12!==void 0?_ref12:globalThis.document;}function blockingElements(){return getDocument().$blockingElements;}/**
     * Allows an element to trap focus by applying the "inert" attribute to all sibling, aunt, and uncle nodes.
     *
     * Automatically handles consecutive calls with a loosely applied stack operation
     * (specifically via `blockingElements`, with a small polyfill because I'm not sure how long
     * it'll take to find its way into the spec, if ever)
     * @param target
     */function useBlockingElement(enabled,getTarget){var stableGetTarget=useStableCallback(getTarget);var getDocument=useStableCallback(()=>{var _getTarget$ownerDocum,_getTarget;return(_getTarget$ownerDocum=(_getTarget=getTarget())===null||_getTarget===void 0?void 0:_getTarget.ownerDocument)!==null&&_getTarget$ownerDocum!==void 0?_getTarget$ownerDocum:globalThis.document;});useActiveElement({activeElementParameters:{getDocument,onLastActiveElementChange:useStableCallback(e=>{if(e){if(enabled)setLastActiveWhenOpen(e);else setLastActiveWhenClosed(e);}})}});var[getTop,setTop]=usePassiveState(null,returnNull);var[getLastActiveWhenClosed,setLastActiveWhenClosed]=usePassiveState(null,returnNull);var[getLastActiveWhenOpen,setLastActiveWhenOpen]=usePassiveState(null,returnNull);/**
         * Push/pop the element from the blockingElements stack.
         */s(()=>{var target=stableGetTarget();if(enabled){// Sometimes blockingElements will fail if, for example,
// the target element isn't connected to document.body.
// This is rare, but it's better to fail silently with weird tabbing behavior
// than to crash the entire application.
try{blockingElements().push(target);setTop(target);return()=>{blockingElements().remove(target);};}catch(ex){// Well, semi-silently.
console.error(ex);}}},[enabled]);return{getTop,getLastActiveWhenClosed,getLastActiveWhenOpen};}//const elementsToRestoreFocusTo = new Map<Element | null, (Node & HTMLOrSVGElement)>();
function useFocusTrap(_ref14){var{focusTrapParameters:{onlyMoveFocus,trapActive,focusPopup:focusSelfUnstable,focusOpener:focusOpenerUnstable},refElementParameters:{onElementChange}}=_ref14,refElementParameters=_objectWithoutProperties(_ref14.refElementParameters,_excluded11);var focusSelf=useStableCallback(focusSelfUnstable);var focusOpener=useStableCallback(focusOpenerUnstable);h(()=>{if(trapActive){var top=getTop();getLastActiveWhenOpen();{var _top;(_top=top)!==null&&_top!==void 0?_top:top=refElementReturn.getElement();console.assert(!!top);if(top)focusSelf(top,()=>findFirstFocusable(top));}}else{var lastActive=getLastActiveWhenClosed();if(lastActive)focusOpener(lastActive);}},[trapActive]);var{refElementReturn}=useRefElement({refElementParameters:_objectSpread({onElementChange},refElementParameters)});var{getElement}=refElementReturn;var{getTop,getLastActiveWhenClosed,getLastActiveWhenOpen}=useBlockingElement(trapActive&&!onlyMoveFocus,getElement);return{refElementReturn,focusTrapReturn:{propsUnstable:{"aria-modal":trapActive?"true":undefined}}};}/**
     * Returns the first focusable element contained within the given node, or null if none are found.
     * @param element
     * @returns
     */function findFirstFocusable(element){return findFirstCondition(element,node=>node instanceof Element&&isFocusable(node));}/**
     * Returns the first tabbable element contained within the given node, or null if none are found.
     * @param element
     * @returns
     */function findFirstTabbable(element){return findFirstCondition(element,node=>node instanceof Element&&isTabbable(node));}function findFirstCondition(element,filter){var _element2;if(element&&filter(element))return element;console.assert(!!element);(_element2=element)!==null&&_element2!==void 0?_element2:element=document.body;var treeWalker=document.createTreeWalker(element,NodeFilter.SHOW_ELEMENT,{acceptNode:node=>filter(node)?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP});var firstFocusable=treeWalker.firstChild();return firstFocusable;}/** Arguments passed to the child 'useLinearNavigationChild` */ //export interface UseLinearNavigationChildInfo { }
/**
     * When used in tandem with `useRovingTabIndex`, allows control of
     * the tabbable index with the arrow keys.
     *
     * @see useListNavigation, which packages everything up together.
     */function useLinearNavigation(_ref15){var{rovingTabIndexReturn,linearNavigationParameters}=_ref15;var{getHighestIndex,indexDemangler,indexMangler,isValid,navigatePastEnd,navigatePastStart}=linearNavigationParameters;var{getTabbableIndex,setTabbableIndex}=rovingTabIndexReturn;var navigateAbsolute=T$1((i,e,fromUserInteraction)=>{var target=indexDemangler(i);var{value}=tryNavigateToIndex({isValid,highestChildIndex:getHighestIndex(),indexDemangler,indexMangler,searchDirection:-1,target});setTabbableIndex(value,e,fromUserInteraction);},[]);var navigateToFirst=useStableCallback((e,fromUserInteraction)=>{navigateAbsolute(0,e,fromUserInteraction);});var navigateToLast=useStableCallback((e,fromUserInteraction)=>{navigateAbsolute(getHighestIndex(),e,fromUserInteraction);});var navigateRelative2=useStableCallback((e,offset,fromUserInteraction,mode)=>{var _getTabbableIndex;var original=(_getTabbableIndex=getTabbableIndex())!==null&&_getTabbableIndex!==void 0?_getTabbableIndex:0;var{status,value}=tryNavigateToIndex({isValid,highestChildIndex:getHighestIndex(),indexDemangler,indexMangler,searchDirection:Math.sign(offset)||1,target:indexDemangler(indexMangler(original)+offset)});if(status=="past-end"){if(navigatePastEnd=="wrap"){if(mode=="single")navigateToFirst(e,fromUserInteraction);else{/* eslint-disable no-constant-condition */ // Uncomment to allow page up/down to wrap after hitting the top/bottom once.
// It works fine, the problem isn't that -- the problem is it just feels wrong. 
// Page Up/Down don't feel like they should wrap, even if normally requested. 
// That's the arrow keys' domain.
navigateToLast(e,fromUserInteraction);}return"stop";}else if(navigatePastEnd=="passthrough"){return"passthrough";}else{navigatePastEnd();return"stop";}}else if(status=="past-start"){if(navigatePastStart=="wrap"){if(mode=="single"){navigateToLast(e,fromUserInteraction);}else{/* eslint-disable no-constant-condition */ // See above. It works fine but just feels wrong to wrap on Page Up/Down.
navigateToFirst(e,fromUserInteraction);}return"stop";}else if(navigatePastStart=="passthrough"){return"passthrough";}else{navigatePastStart();return"stop";}}else{setTabbableIndex(value,e,fromUserInteraction);return"stop";}});var navigateToNext=useStableCallback((e,fromUserInteraction)=>{return navigateRelative2(e,1,fromUserInteraction,"single");// setTabbableIndex(navigateRelative((getTabbableIndex() ?? 0), +1), fromUserInteraction)
});var navigateToPrev=useStableCallback((e,fromUserInteraction)=>{return navigateRelative2(e,-1,fromUserInteraction,"single");// setTabbableIndex(navigateRelative((getTabbableIndex() ?? 0), +1), fromUserInteraction)
});var getDisableArrowKeys=useStableGetter(linearNavigationParameters.disableArrowKeys);var getDisableHomeEndKeys=useStableGetter(linearNavigationParameters.disableHomeEndKeys);var getNavigationDirection=useStableGetter(linearNavigationParameters.navigationDirection);var getPageNavigationSize=useStableGetter(linearNavigationParameters.pageNavigationSize);var stableProps=_({onKeyDown:e=>{// Not handled by typeahead (i.e. assume this is a keyboard shortcut)
if(e.ctrlKey||e.metaKey)return;//const info = getLogicalDirectionInfo();
var navigationDirection=getNavigationDirection();var disableArrowKeys=getDisableArrowKeys();var disableHomeEndKeys=getDisableHomeEndKeys();var pageNavigationSize=getPageNavigationSize();var allowsVerticalNavigation=navigationDirection=="vertical"||navigationDirection=="either";var allowsHorizontalNavigation=navigationDirection=="horizontal"||navigationDirection=="either";var truePageNavigationSize=pageNavigationSize;if(truePageNavigationSize<1){truePageNavigationSize=Math.round(pageNavigationSize*Math.max(100,getHighestIndex()+1));}switch(e.key){case"ArrowUp":{//const propName = (info?.blockOrientation === "vertical" ? "blockDirection" : "inlineDirection");
var directionAllowed=!disableArrowKeys&&allowsVerticalNavigation;if(directionAllowed){var result=navigateToPrev(e,true);if(result!="passthrough"){e.preventDefault();e.stopPropagation();}}break;}case"ArrowDown":{var _directionAllowed=!disableArrowKeys&&allowsVerticalNavigation;if(_directionAllowed){var _result=navigateToNext(e,true);if(_result!="passthrough"){e.preventDefault();e.stopPropagation();}}break;}case"ArrowLeft":{var _directionAllowed2=!disableArrowKeys&&allowsHorizontalNavigation;if(_directionAllowed2){var _result2=navigateToPrev(e,true);if(_result2!="passthrough"){e.preventDefault();e.stopPropagation();}}break;}case"ArrowRight":{var _directionAllowed3=!disableArrowKeys&&allowsHorizontalNavigation;if(_directionAllowed3){var _result3=navigateToNext(e,true);if(_result3!="passthrough"){e.preventDefault();e.stopPropagation();}}break;}case"PageUp":{if(truePageNavigationSize>0){navigateRelative2(e,-truePageNavigationSize,true,"page");e.preventDefault();e.stopPropagation();}break;}case"PageDown":{if(truePageNavigationSize>0){navigateRelative2(e,truePageNavigationSize,true,"page");e.preventDefault();e.stopPropagation();}break;}case"Home":if(!disableHomeEndKeys){navigateToFirst(e,true);e.preventDefault();e.stopPropagation();}break;case"End":if(!disableHomeEndKeys){navigateToLast(e,true);e.preventDefault();e.stopPropagation();}break;}}});return{linearNavigationReturn:{propsStable:stableProps.current}};}function tryNavigateToIndex(_ref16){var{isValid,highestChildIndex,searchDirection,indexDemangler,indexMangler,target}=_ref16;if(searchDirection===-1){var _bestUpResult;var bestUpResult=undefined;bestUpResult=tryNavigateUp({isValid,indexDemangler,indexMangler,target});(_bestUpResult=bestUpResult)!==null&&_bestUpResult!==void 0?_bestUpResult:bestUpResult=tryNavigateDown({isValid,indexDemangler,indexMangler,target,highestChildIndex});return bestUpResult||{value:target,status:"normal"};}else{var _bestDownResult;var bestDownResult=undefined;bestDownResult=tryNavigateDown({isValid,indexDemangler,indexMangler,target,highestChildIndex});(_bestDownResult=bestDownResult)!==null&&_bestDownResult!==void 0?_bestDownResult:bestDownResult=tryNavigateUp({isValid,indexDemangler,indexMangler,target});return bestDownResult||{value:target,status:"normal"};}}function tryNavigateUp(_ref17){var{isValid,indexDemangler,indexMangler,target}=_ref17;var lower=0;while(target>=lower&&!isValid(target)){target=indexDemangler(indexMangler(target)-1);}if(!isValid(target)){return undefined;}if(target<lower){return{value:indexDemangler(lower),status:"past-start"};}else{return{value:target,status:"normal"};}}function tryNavigateDown(_ref18){var{isValid,indexDemangler,indexMangler,target,highestChildIndex:upper}=_ref18;while(target<=upper&&!isValid(target)){target=indexDemangler(indexMangler(target)+1);}if(!isValid(target)){return undefined;}if(target>upper){return{value:indexDemangler(upper),status:"past-end"};}else{return{value:target,status:"normal"};}}/**
     * Slightly enhanced version of `useState` that includes a getter that remains constant
     * (i.e. you can use it in `useEffect` and friends without it being a dependency).
     *
     * @param initialState
     * @returns
     */function useState(initialState){// We keep both, but overrride the `setState` functionality
var[state,setStateP]=p(initialState);var ref=_(state);// Hijack the normal setter function 
// to also set our ref to the new value
var setState=T$1(value=>{if(typeof value==="function"){var callback=value;setStateP(prevValue=>{var nextValue=callback(prevValue);ref.current=nextValue;return nextValue;});}else{ref.current=value;setStateP(value);}},[]);var getState=()=>{return ref.current;};console.assert(ref.current===state||typeof state==="number"&&isNaN(state));return[state,setState,getState];}/**
     * Implements a roving tabindex system where only one "focusable"
     * component in a set is able to receive a tab focus. *Which*
     * of those elements receives focus is determined by you, but it's
     * recommended to offload that logic then to another hook, like
     * `useLinearNavigation`, which lets you change the tabbable
     * element with the arrow keys, `useTypeaheadNavigation`, which
     * lets you change the tabbable index with typeahead, or
     * `useListNavigation` if you just want everything bundled together.
     *
     * Note that the child hook returned by this function must be used
     * by every child that uses this roving tabindex logic.  The
     * prop-modifying hook *that* hook returns should then be used
     * on the child's element, as well as any other elements you'd like
     * to be explicitly made untabbable too.
     *
     * `shouldFocusOnChange` should return true if focus is
     * contained within whatever element contains the roving tab index.
     * Generally as simple as the following:
     * ```
     * const [focusedInner, setFocusedInner] = useState(false);
     * const { useHasFocusProps } = useHasFocus<ParentElement>({ setFocusedInner });
     * const focusOnChange = (focusedInner != false);
     * ```
     * It's not included here because `useRovingTabIndex` doesn't know
     * anything about the container element, only children elements.
     * And just as well! Children should be allowed at the root,
     * regardless of if it's the whole app or just a given component.
     */function useRovingTabIndex(_ref19){var{managedChildrenReturn:{getChildren},rovingTabIndexParameters:{untabbable,initiallyTabbedIndex,onTabbableIndexChange}}=_ref19,_void1=_objectWithoutProperties(_ref19,_excluded12);var getUntabbable=useStableGetter(untabbable);//initiallyTabbedIndex ??= 0;
// Override the actual setter to include some extra logic related to avoiding hidden children, 
// what to do when we're untabbable, what to do when we're tabbable but given `null`, etc.
var setTabbableIndex=useStableCallback((updater,reason,fromUserInteraction)=>{var children=getChildren();// Notify the relevant children that they should become tabbable/untabbable,
// but also handle focus management when we changed due to user interaction
return setTabbableIndex3(f,reason);function f(prevIndex){var nextIndex=typeof updater==="function"?updater(prevIndex!==null&&prevIndex!==void 0?prevIndex:null):updater;var untabbable=getUntabbable();if(nextIndex!=null)setLastNonNullIndex(nextIndex);if(untabbable)return null;if(prevIndex!=nextIndex){var nextChild=nextIndex==null?null:children.getAt(nextIndex);if(nextChild!==null&&nextChild!==void 0&&nextChild.hidden){return prevIndex!==null&&prevIndex!==void 0?prevIndex:untabbable?null:0;}if(nextChild!=null&&fromUserInteraction){var element=nextChild.getElement();if(element){if(document.activeElement==null||!element.contains(document.activeElement))nextChild.focusSelf(element);}}}if(nextIndex!=null)setLastNonNullIndex(nextIndex);return nextIndex!==null&&nextIndex!==void 0?nextIndex:untabbable?null:0;}},[]);// When we switch from tabbable to non/tabbable, we really want to remember the last tabbable child.
// So every time we change the index for any reason, record that change as a back up here that can be restored.
var[getLastNonNullIndex,setLastNonNullIndex]=usePassiveState(null,T$1(()=>initiallyTabbedIndex!==null&&initiallyTabbedIndex!==void 0?initiallyTabbedIndex:0,[]));/*useEffect(() => {
            const t = getTabbableIndex();
            if (!untabbable && t != null) {
                if (t == 0)
                    debugger;
                lastNonNullIndex.current = t;
            }
        });*/ // Any time we switch to being untabbable, set the current tabbable index accordingly.
h(()=>{if(untabbable)setTabbableIndex3(null,undefined);else{setTabbableIndex3(getLastNonNullIndex(),undefined);}},[untabbable]);// Boilerplate related to notifying individual children when they become tabbable/untabbable
var getTabbableAt=T$1(m=>{return m.getTabbable();},[]);var setTabbableAt=T$1((m,t)=>{m.setTabbable(t);},[]);var isTabbableValid=T$1(m=>{return!m.hidden;},[]);var{changeIndex:setTabbableIndex3,getCurrentIndex:getTabbableIndex,reevaluateClosestFit}=useChildrenFlag({initialIndex:initiallyTabbedIndex!==null&&initiallyTabbedIndex!==void 0?initiallyTabbedIndex:untabbable?null:0,onIndexChange:onTabbableIndexChange,getChildren,closestFit:true,getAt:getTabbableAt,isValid:isTabbableValid,setAt:setTabbableAt});var focusSelf=T$1(reason=>{var children=getChildren();var index=getTabbableIndex();if(index!=null){var _children$getAt,_children$getAt2,_children$getAt2$focu;var element=(_children$getAt=children.getAt(index))===null||_children$getAt===void 0?void 0:_children$getAt.getElement();(_children$getAt2=children.getAt(index))===null||_children$getAt2===void 0?void 0:(_children$getAt2$focu=_children$getAt2.focusSelf)===null||_children$getAt2$focu===void 0?void 0:_children$getAt2$focu.call(_children$getAt2,element);}else setTabbableIndex(null,reason,true);},[]);var rovingTabIndexChildContext=useStableObject({setTabbableIndex,getInitiallyTabbedIndex:T$1(()=>{return initiallyTabbedIndex!==null&&initiallyTabbedIndex!==void 0?initiallyTabbedIndex:untabbable?null:0;},[]),reevaluateClosestFit});return{managedChildrenParameters:{onChildrenMountChange:reevaluateClosestFit},rovingTabIndexReturn:{setTabbableIndex,getTabbableIndex,focusSelf},rovingTabIndexChildContext};}function useRovingTabIndexChild(_ref20){var{managedChildParameters:{index},rovingTabIndexChildContext:{reevaluateClosestFit,setTabbableIndex,getInitiallyTabbedIndex},rovingTabIndexChildParameters}=_ref20,_void2=_objectWithoutProperties(_ref20.managedChildParameters,_excluded13);var{hidden}=rovingTabIndexChildParameters,_void1=_objectWithoutProperties(rovingTabIndexChildParameters,_excluded14);var[tabbable,setTabbable,getTabbable]=useState(getInitiallyTabbedIndex()===index);h(()=>{reevaluateClosestFit();},[!!hidden]);return{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:useStableCallback((focused,_prevFocused,e)=>{if(focused){setTabbableIndex(index,e,false);}})},rovingTabIndexChildReturn:{propsUnstable:{tabIndex:tabbable?0:-1},tabbable,getTabbable,setTabbable}};}function useTextContent(_ref21){var{refElementReturn:{getElement},textContentParameters:{getText,onTextContentChange,hidden}}=_ref21;var[getTextContent,setTextContent]=usePassiveState(onTextContentChange,returnNull,runImmediately);h(()=>{if(!hidden){var element=getElement();if(element){var textContent=getText(element);if(textContent){setTextContent(textContent);}}}});return{textContentReturn:{getTextContent}};}/**
     * Allows for the selection of a managed child by typing the given text associated with it.
     *
     * @see useListNavigation, which packages everything up together.
     */function useTypeaheadNavigation(_ref22){var{typeaheadNavigationParameters:{collator,typeaheadTimeout,noTypeahead,isValid},rovingTabIndexReturn:{getTabbableIndex:getIndex,setTabbableIndex:setIndex}}=_ref22,_void3=_objectWithoutProperties(_ref22.typeaheadNavigationParameters,_excluded15),_void1=_objectWithoutProperties(_ref22.rovingTabIndexReturn,_excluded16),_void2=_objectWithoutProperties(_ref22,_excluded17);// For typeahead, keep track of what our current "search" string is (if we have one)
// and also clear it every 1000 ms since the last time it changed.
// Next, keep a mapping of typeahead values to indices for faster searching.
// And, for the user's sake, let them know when their typeahead can't match anything anymore
var[getCurrentTypeahead,setCurrentTypeahead]=usePassiveState(useStableCallback((currentTypeahead,prev,reason)=>{var handle=setTimeout(()=>{setCurrentTypeahead(null,undefined);setTypeaheadStatus("none");},typeaheadTimeout!==null&&typeaheadTimeout!==void 0?typeaheadTimeout:1000);updateBasedOnTypeaheadChange(currentTypeahead,reason);return()=>clearTimeout(handle);}));//useTimeout({ timeout: typeaheadTimeout ?? 1000, callback: () => { setCurrentTypeahead(null); setInvalidTypeahead(null); }, triggerIndex: currentTypeahead });
var sortedTypeaheadInfo=_([]);var[typeaheadStatus,setTypeaheadStatus]=useState("none");// Handle typeahead for input method editors as well
// Essentially, when active, ignore further keys 
// because we're waiting for a CompositionEnd event
var[,setImeActive,getImeActive]=useState(false);// Because composition events fire *after* keydown events 
// (but within the same task, which, TODO, could be browser-dependent),
// we can use this to keep track of which event we're listening for on the first keydown.
var[nextTypeaheadChar,setNextTypeaheadChar]=useState(null);s(()=>{if(nextTypeaheadChar!==null){setCurrentTypeahead(typeahead=>(typeahead!==null&&typeahead!==void 0?typeahead:"")+nextTypeaheadChar,undefined);setNextTypeaheadChar(null);}},[nextTypeaheadChar]);var comparatorShared=useStableCallback((safeLhs,safeRhs)=>{var _safeRhs$toLowerCase;var compare;// For the purposes of typeahead, only compare a string of the same size as our currently typed string.
// By normalizing them first, we ensure this byte-by-byte handling of raw character data works out okay.
safeLhs=safeLhs.normalize("NFD");safeRhs=safeRhs.normalize("NFD");if(collator)compare=collator.compare(safeLhs,safeRhs);else compare=safeLhs.toLowerCase().localeCompare((_safeRhs$toLowerCase=safeRhs.toLowerCase())!==null&&_safeRhs$toLowerCase!==void 0?_safeRhs$toLowerCase:"");return compare;});var insertingComparator=useStableCallback((lhs,rhs)=>{if(typeof lhs==="string"&&typeof rhs.text==="string"){return comparatorShared(lhs,rhs.text);}return lhs-rhs;});var typeaheadComparator=useStableCallback((lhs,rhs)=>{if(typeof lhs==="string"&&typeof rhs.text==="string"){// During typeahead, all strings longer than ours should be truncated
// so that they're all considered equally by that point.
return comparatorShared(lhs,rhs.text.substring(0,lhs.length));}return lhs-rhs;});var isDisabled=useStableGetter(noTypeahead);var propsStable=_({onKeyDown:useStableCallback(e=>{if(isDisabled())return;var imeActive=getImeActive();var key=e.key;// Not handled by typeahead (i.e. assume this is a keyboard shortcut)
if(e.ctrlKey||e.metaKey)return;if(!imeActive&&e.key==="Backspace"){// Remove the last character in a way that doesn't split UTF-16 surrogates.
setCurrentTypeahead(t=>t==null?null:[...t].reverse().slice(1).reverse().join(""),e);e.preventDefault();e.stopPropagation();return;}// The key property represents the typed character OR the "named key attribute" of the key pressed.
// There's no definite way to tell the difference, but for all intents and purposes
// there are no one-character names, and there are no non-ASCII-alpha names.
// Thus, any one-character or non-ASCII value for `key` is *almost certainly* a typed character.
var isCharacterKey=key.length===1||!/^[A-Za-z]/.test(key);if(isCharacterKey){var _getCurrentTypeahead;if(key==" "&&((_getCurrentTypeahead=getCurrentTypeahead())!==null&&_getCurrentTypeahead!==void 0?_getCurrentTypeahead:"").trim().length==0);else{e.preventDefault();e.stopPropagation();// Note: Won't be true for the first keydown
// but will be overwritten before useLayoutEffect is called
// to actually apply the change
if(!imeActive)setNextTypeaheadChar(key);}}}),onCompositionStart:useStableCallback(e=>{setNextTypeaheadChar(e.data);setImeActive(false);}),onCompositionEnd:useStableCallback(_e=>{setImeActive(true);})});// Handle changes in typeahead that cause changes to the tabbable index
/* useEffect(() => {
             
         }, [currentTypeahead]);*/return{typeaheadNavigationChildContext:useStableObject({typeaheadNavigationChildParameters:useStableObject({insertingComparator,sortedTypeaheadInfo:sortedTypeaheadInfo.current})}),typeaheadNavigationReturn:{getCurrentTypeahead,typeaheadStatus,propsStable:propsStable.current}};function updateBasedOnTypeaheadChange(currentTypeahead,reason){if(currentTypeahead&&sortedTypeaheadInfo.current.length){var sortedTypeaheadIndex=binarySearch(sortedTypeaheadInfo.current,currentTypeahead,typeaheadComparator);if(sortedTypeaheadIndex<0){// The user has typed an entry that doesn't exist in the list
// (or more specifically "for which there is no entry that starts with that input")
setTypeaheadStatus("invalid");}else{setTypeaheadStatus("valid");/*
                      We know roughly where, in the sorted array of strings, our next typeahead location is.
                      But roughly isn't good enough if there are multiple matches.
                      To convert our sorted index to the unsorted index we need, we have to find the first
                      element that matches us *and* (if any such exist) is *after* our current selection.
        
                      In other words, the only way typeahead moves backwards relative to our current
                      position is if the only other option is behind us.
        
                      It's not specified in WAI-ARIA what to do in that case.  I suppose wrap back to the start?
                      Though there's also a case for just going upwards to the nearest to prevent jumpiness.
                      But if you're already doing typeahead on an unsorted list, like, jumpiness can't be avoided.
                      I dunno. Going back to the start is the simplist though.
        
                      Basically what this does: Starting from where we found ourselves after our binary search,
                      scan backwards and forwards through all adjacent entries that also compare equally so that
                      we can find the one whose `unsortedIndex` is the lowest amongst all other equal strings
                      (and also the lowest `unsortedIndex` yadda yadda except that it comes after us).
        
                      TODO: The binary search starts this off with a solid O(log n), but one-character
                      searches are, thanks to pigeonhole principal, eventually guaranteed to become
                      O(n*log n). This is annoying but probably not easily solvable? There could be an
                      exception for one-character strings, but that's just kicking the can down
                      the road. Maybe one or two characters would be good enough though.
                    */ // These are used to keep track of the candidates' positions in both our sorted array and the unsorted DOM.
var lowestUnsortedIndexAll=null;var lowestSortedIndexAll=sortedTypeaheadIndex;// These two are only set for elements that are ahead of us, but the principle's the same otherwise
var lowestUnsortedIndexNext=null;var lowestSortedIndexNext=sortedTypeaheadIndex;var updateBestFit=u=>{var _getIndex;if(!isValid(u))return;if(lowestUnsortedIndexAll==null||u<lowestUnsortedIndexAll){lowestUnsortedIndexAll=u;lowestSortedIndexAll=_i4;}if((lowestUnsortedIndexNext==null||u<lowestUnsortedIndexNext)&&u>((_getIndex=getIndex())!==null&&_getIndex!==void 0?_getIndex:-Infinity)){lowestUnsortedIndexNext=u;lowestSortedIndexNext=_i4;}};var _i4=sortedTypeaheadIndex;while(_i4>=0&&typeaheadComparator(currentTypeahead,sortedTypeaheadInfo.current[_i4])==0){updateBestFit(sortedTypeaheadInfo.current[_i4].unsortedIndex);--_i4;}_i4=sortedTypeaheadIndex;while(_i4<sortedTypeaheadInfo.current.length&&typeaheadComparator(currentTypeahead,sortedTypeaheadInfo.current[_i4])==0){updateBestFit(sortedTypeaheadInfo.current[_i4].unsortedIndex);++_i4;}if(lowestUnsortedIndexNext!==null)setIndex(sortedTypeaheadInfo.current[lowestSortedIndexNext].unsortedIndex,reason,true);else if(lowestUnsortedIndexAll!==null)setIndex(sortedTypeaheadInfo.current[lowestSortedIndexAll].unsortedIndex,reason,true);}}}}function useTypeaheadNavigationChild(_ref23){var{managedChildParameters:{index},textContentParameters:{getText,hidden},typeaheadNavigationChildContext:{typeaheadNavigationChildParameters:{sortedTypeaheadInfo,insertingComparator}},refElementReturn:{getElement}}=_ref23,void1=_objectWithoutProperties(_ref23.managedChildParameters,_excluded18),void5=_objectWithoutProperties(_ref23.textContentParameters,_excluded19),void2=_objectWithoutProperties(_ref23.typeaheadNavigationChildContext.typeaheadNavigationChildParameters,_excluded20),void3=_objectWithoutProperties(_ref23.refElementReturn,_excluded21),void4=_objectWithoutProperties(_ref23,_excluded22);var{textContentReturn}=useTextContent({refElementReturn:{getElement},textContentParameters:{getText,hidden,onTextContentChange:T$1(text=>{if(text){// Find where to insert this item.
// Because all index values should be unique, the returned sortedIndex
// should always refer to a new location (i.e. be negative)                
var sortedIndex=binarySearch(sortedTypeaheadInfo,text,insertingComparator);console.assert(sortedIndex<0||insertingComparator(sortedTypeaheadInfo[sortedIndex].text,{unsortedIndex:index,text})==0);if(sortedIndex<0){sortedTypeaheadInfo.splice(-sortedIndex-1,0,{text,unsortedIndex:index});}else{sortedTypeaheadInfo.splice(sortedIndex,0,{text,unsortedIndex:index});}return()=>{// When unmounting, find where we were and remove ourselves.
// Again, we should always find ourselves because there should be no duplicate values if each index is unique.
var sortedIndex=binarySearch(sortedTypeaheadInfo,text,insertingComparator);console.assert(sortedIndex<0||insertingComparator(sortedTypeaheadInfo[sortedIndex].text,{unsortedIndex:index,text})==0);if(sortedIndex>=0){sortedTypeaheadInfo.splice(sortedIndex,1);}};}},[])}});return{textContentReturn};}/**
     * Your usual binary search implementation.
     *
     * It's used here to quickly find a good spot to start searching for our next typeahead candidate.
     * @param array The array to search through
     * @param wanted The value you'd like to find
     * @param comparator Compares `wanted` with the current value in `array`
     * @returns A non-negative value if `wanted` was found, and a negative number if not.
     * The absolute value of this number, minus one, is where `wanted` *would* be found if it *was* in `array`
     */function binarySearch(array,wanted,comparator){var firstIndex=0;var lastIndex=array.length-1;while(firstIndex<=lastIndex){var testIndex=lastIndex+firstIndex>>1;var comparisonResult=comparator(wanted,array[testIndex]);if(comparisonResult>0){firstIndex=testIndex+1;}else if(comparisonResult<0){lastIndex=testIndex-1;}else{return testIndex;}}return-firstIndex-1;}/**
     * Implements proper keyboard navigation for components like listboxes, button groups, menus, etc.
     *
     * In the document order, there will be only one "focused" or "tabbable" element, making it act more like one complete unit in comparison to everything around it.
     * Navigating forwards/backwards can be done with the arrow keys, Home/End keys, or any text for typeahead to focus the next item that matches.
     */function useListNavigation(_ref24){var{linearNavigationParameters,typeaheadNavigationParameters,rovingTabIndexParameters,managedChildrenReturn}=_ref24,_void1=_objectWithoutProperties(_ref24,_excluded23);var rtir=useRovingTabIndex({managedChildrenReturn,rovingTabIndexParameters});var{rovingTabIndexReturn}=rtir;var tnr=useTypeaheadNavigation({rovingTabIndexReturn,typeaheadNavigationParameters});var lnr=useLinearNavigation({rovingTabIndexReturn,linearNavigationParameters});return _objectSpread(_objectSpread(_objectSpread({},lnr),tnr),rtir);}function useListNavigationChild(_ref25){var{rovingTabIndexChildParameters,rovingTabIndexChildContext,typeaheadNavigationChildContext,//typeaheadNavigationChildParameters,
managedChildParameters,refElementReturn,textContentParameters}=_ref25,_void2=_objectWithoutProperties(_ref25,_excluded24);var rticr=useRovingTabIndexChild({rovingTabIndexChildContext,rovingTabIndexChildParameters,managedChildParameters});var{textContentReturn}=useTypeaheadNavigationChild({refElementReturn,typeaheadNavigationChildContext,managedChildParameters,textContentParameters});//    assertEmptyObject(_void5);
return _objectSpread({textContentReturn},rticr);}function useGridNavigation(_ref26){var{gridNavigationParameters:{onTabbableColumnChange},linearNavigationParameters,rovingTabIndexParameters:{onTabbableIndexChange},managedChildrenReturn,typeaheadNavigationParameters}=_ref26,void3=_objectWithoutProperties(_ref26.gridNavigationParameters,_excluded25),rovingTabIndexParameters=_objectWithoutProperties(_ref26.rovingTabIndexParameters,_excluded26),_void2=_objectWithoutProperties(_ref26,_excluded27);var{getChildren}=managedChildrenReturn;var{initiallyTabbedIndex}=rovingTabIndexParameters;var[getCurrentTabbableColumn,setCurrentTabbableColumn]=usePassiveState(onTabbableColumnChange,useStableCallback(()=>{return initiallyTabbedIndex!==null&&initiallyTabbedIndex!==void 0?initiallyTabbedIndex:0;}));var onTabbableIndexChangeOverride=useStableCallback((nextRow,previousRow,reason)=>{var _children$getAt3,_children$getAt4;var children=getChildren();onTabbableIndexChange===null||onTabbableIndexChange===void 0?void 0:onTabbableIndexChange(nextRow,previousRow,reason);var nextColumn=getCurrentTabbableColumn();if(previousRow!=null)(_children$getAt3=children.getAt(previousRow))===null||_children$getAt3===void 0?void 0:_children$getAt3.setTabbableColumnIndex(nextColumn,reason,false);if(nextRow!=null)(_children$getAt4=children.getAt(nextRow))===null||_children$getAt4===void 0?void 0:_children$getAt4.setTabbableColumnIndex(nextColumn,reason,false);});var _useListNavigation=useListNavigation({linearNavigationParameters:_objectSpread({navigationDirection:"vertical"},linearNavigationParameters),rovingTabIndexParameters:_objectSpread({onTabbableIndexChange:onTabbableIndexChangeOverride},rovingTabIndexParameters),managedChildrenReturn,typeaheadNavigationParameters}),{linearNavigationReturn,rovingTabIndexReturn,typeaheadNavigationReturn,managedChildrenParameters,rovingTabIndexChildContext,typeaheadNavigationChildContext}=_useListNavigation,void1=_objectWithoutProperties(_useListNavigation,_excluded28);return{managedChildrenParameters,rovingTabIndexChildContext,typeaheadNavigationChildContext,linearNavigationReturn,rovingTabIndexReturn,typeaheadNavigationReturn,gridNavigationRowContext:useStableObject({gridNavigationRowParameters:useStableObject({setTabbableRow:rovingTabIndexReturn.setTabbableIndex,getCurrentTabbableColumn,setCurrentTabbableColumn})})};}function useGridNavigationRow(_ref27){var{rowAsChildOfGridParameters:{gridNavigationRowContext:{gridNavigationRowParameters:{setTabbableRow,getCurrentTabbableColumn,setCurrentTabbableColumn}}},rowAsParentOfCellsParameters:{linearNavigationParameters}}=_ref27,asChildRowOfTable=_objectWithoutProperties(_ref27.rowAsChildOfGridParameters,_excluded29),rovingTabIndexParameters=_extends({},(_objectDestructuringEmpty(_ref27.rowAsParentOfCellsParameters.rovingTabIndexParameters),_ref27.rowAsParentOfCellsParameters.rovingTabIndexParameters)),asParentRowOfCellsP=_objectWithoutProperties(_ref27.rowAsParentOfCellsParameters,_excluded30),_void1=_objectWithoutProperties(_ref27,_excluded31);var{managedChildrenReturn:{getChildren}}=asChildRowOfTable;var getIndex=useStableCallback(()=>{return asChildRowOfTable.managedChildParameters.index;});var focusSelf=useStableCallback(e=>{var _getCurrentTabbableCo;var index=(_getCurrentTabbableCo=getCurrentTabbableColumn())!==null&&_getCurrentTabbableCo!==void 0?_getCurrentTabbableCo:0;var child=getChildren().getAt(index);var highestIndex=getChildren().getHighestIndex();while((!child||child.hidden)&&index>0){--index;child=getChildren().getAt(index);}while((!child||child.hidden)&&index<=highestIndex){++index;child=getChildren().getAt(index);}if(child){var _e2=child.getElement();child.focusSelf(_e2);}else{var _e$focus;e===null||e===void 0?void 0:(_e$focus=e.focus)===null||_e$focus===void 0?void 0:_e$focus.call(e);}},[]);var lncr=useListNavigationChild(asChildRowOfTable);var untabbable=!lncr.rovingTabIndexChildReturn.tabbable;var lnr=useListNavigation(_objectSpread(_objectSpread({},asParentRowOfCellsP),{},{rovingTabIndexParameters:_objectSpread({untabbable},rovingTabIndexParameters),linearNavigationParameters:_objectSpread({navigationDirection:"horizontal"},linearNavigationParameters)}));var{rovingTabIndexReturn:{setTabbableIndex},rovingTabIndexReturn,linearNavigationReturn,managedChildrenParameters,rovingTabIndexChildContext,typeaheadNavigationChildContext,typeaheadNavigationReturn}=lnr;return{rowAsChildOfGridReturn:_objectSpread({gridNavigationRowParameters:{focusSelf,setTabbableColumnIndex:setTabbableIndex}},lncr),rowAsParentOfCellsReturn:_objectSpread(_objectSpread({},lnr),{},{gridNavigationCellContext:useStableObject({gridNavigationCellParameters:useStableObject({setTabbableRow,getRowIndex:getIndex,getCurrentTabbableColumn,setCurrentTabbableColumn,setTabbableCell:setTabbableIndex})}),linearNavigationReturn,managedChildrenParameters,rovingTabIndexChildContext,rovingTabIndexReturn,typeaheadNavigationChildContext,typeaheadNavigationReturn})};}function useGridNavigationCell(_ref28){var{//    managedChildParameters: { hidden, index, ...void3 },
rovingTabIndexChildContext,typeaheadNavigationChildContext,//typeaheadNavigationChildParameters,
rovingTabIndexChildParameters,managedChildParameters,refElementReturn,textContentParameters,gridNavigationCellParameters:{colSpan},gridNavigationCellContext:{gridNavigationCellParameters:{getRowIndex,setTabbableRow,getCurrentTabbableColumn:_getCurrentColumn,setCurrentTabbableColumn,setTabbableCell}}}=_ref28,_void1=_objectWithoutProperties(_ref28,_excluded32);var{index}=managedChildParameters;var _useListNavigationChi=useListNavigationChild({rovingTabIndexChildParameters,managedChildParameters,rovingTabIndexChildContext,typeaheadNavigationChildContext,textContentParameters,//typeaheadNavigationChildParameters,
refElementReturn}),{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:ocfic1},rovingTabIndexChildReturn,textContentReturn}=_useListNavigationChi,void2=_objectWithoutProperties(_useListNavigationChi,_excluded33);//    assertEmptyObject(void3);
return{rovingTabIndexChildReturn,textContentReturn,hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:useStableCallback((focused,prev,e)=>{ocfic1===null||ocfic1===void 0?void 0:ocfic1(focused,prev,e);if(focused){setTabbableRow(getRowIndex(),e,false);setCurrentTabbableColumn(index,e);setTabbableCell(prev=>{if(prev!=null&&(prev<index||prev>index+colSpan)){return prev;}return index;},e,false);}})}};}/**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */function noop(){// No operation performed.
}//export type UseSingleSelectionChild<E extends Element> = (a: UseSingleSelectionChildParameters<E>) => UseSingleSelectionChildReturnTypeWithHooks<E>;
function useSingleSelection(_ref29){var{managedChildrenReturn:{getChildren},rovingTabIndexReturn:{setTabbableIndex},singleSelectionParameters:{onSelectedIndexChange:onSelectedIndexChange_U,initiallySelectedIndex}}=_ref29;var onSelectedIndexChange=useStableCallback(onSelectedIndexChange_U!==null&&onSelectedIndexChange_U!==void 0?onSelectedIndexChange_U:noop);//useEnsureStability("useSingleSelection", onSelectedIndexChange);
var getSelectedAt=T$1(m=>{return m.getSelected();},[]);var setSelectedAt=T$1((m,t,newSelectedIndex,prevSelectedIndex)=>{if(m.hidden){console.assert(false);}var directionComparison=newSelectedIndex==m.index?prevSelectedIndex:newSelectedIndex;var direction=directionComparison==null?null:m.index-directionComparison;if(newSelectedIndex==null)console.assert(t==false);if(t)console.assert(newSelectedIndex===m.index);m.setLocalSelected(t,direction);},[]);var isSelectedValid=T$1(m=>{return!m.hidden;},[]);var{changeIndex:changeSelectedIndex,getCurrentIndex:getSelectedIndex}=useChildrenFlag({getChildren,onIndexChange:null,initialIndex:initiallySelectedIndex,getAt:getSelectedAt,setAt:setSelectedAt,isValid:isSelectedValid,closestFit:false});return{singleSelectionReturn:useStableObject({getSelectedIndex,changeSelectedIndex}),singleSelectionContext:useStableObject({getSelectedIndex,onSelectedIndexChange:onSelectedIndexChange}),childrenHaveFocusParameters:{onCompositeFocusChange:useStableCallback((anyFocused,prev,reason)=>{if(!anyFocused){var selectedIndex=getSelectedIndex();if(selectedIndex!=null)setTabbableIndex(selectedIndex,reason,false);}})}};}function useSingleSelectionChild(args){var _ariaPropName$split;var{singleSelectionContext:{getSelectedIndex,onSelectedIndexChange},singleSelectionChildParameters:{ariaPropName,selectionMode,disabled},managedChildParameters:{index}}=args;//let lastRecordedDistance = useRef(0);
useEnsureStability("useSingleSelectionChild",getSelectedIndex,onSelectedIndexChange);var getDisabled=useStableGetter(disabled);var[localSelected,setLocalSelected,getLocalSelected]=useState(getSelectedIndex()==index);var[direction,setDirection,getDirection]=useState(getSelectedIndex()==null?null:getSelectedIndex()-index);//const [selected, setSelected, getSelected] = useState(getSelectedIndex() == index);
// const getIndex = useStableGetter(index);
var onCurrentFocusedInnerChanged=useStableCallback((focused,_prev,e)=>{if(selectionMode=='focus'&&focused){onSelectedIndexChange===null||onSelectedIndexChange===void 0?void 0:onSelectedIndexChange(index,e);}});var onPressSync=useStableCallback(e=>{if(selectionMode=="disabled")return;if(!disabled)onSelectedIndexChange===null||onSelectedIndexChange===void 0?void 0:onSelectedIndexChange(index,e);});var propParts=(_ariaPropName$split=ariaPropName===null||ariaPropName===void 0?void 0:ariaPropName.split("-"))!==null&&_ariaPropName$split!==void 0?_ariaPropName$split:[];return{//managedChildParameters: { selected, setSelected, getSelected, },
managedChildParameters:{setLocalSelected:useStableCallback((selected,direction)=>{setLocalSelected(selected);setDirection(direction);/*if (direction == null) {
                        setSelected(false);
                        setDirection(null);
                    }
                    else if (direction == 0) {
                        setSelected(true);
                    }
                    else {
                        setSelected(false);
                        setDirection(direction);
                    }*/})},singleSelectionChildReturn:{selected:localSelected,setThisOneSelected:useStableCallback(event=>{console.assert(!getDisabled());onSelectedIndexChange===null||onSelectedIndexChange===void 0?void 0:onSelectedIndexChange(index,event);}),getSelectedOffset:getDirection,selectedOffset:direction,getSelected:getLocalSelected,//getDistance: useCallback(() => { return lastRecordedDistance.current; }, []),
propsUnstable:ariaPropName==null||selectionMode=="disabled"?{}:{["".concat(propParts[0],"-").concat(propParts[1])]:localSelected?propParts[1]=="current"?"".concat(propParts[2]):"true":"false"}},pressParameters:{onPressSync},hasCurrentFocusParameters:{onCurrentFocusedInnerChanged}};}/**
     * Let's face it, declarative is nicer to use than imperative, so this is a shortcut.
     */function useSingleSelectionDeclarative(_ref30){var{singleSelectionReturn:{changeSelectedIndex},singleSelectionDeclarativeParameters:{selectedIndex}}=_ref30;h(()=>{changeSelectedIndex(selectedIndex);},[selectedIndex]);}function useGridNavigationSingleSelection(_ref31){var{gridNavigationParameters,linearNavigationParameters,rovingTabIndexParameters,managedChildrenReturn,typeaheadNavigationParameters,singleSelectionParameters}=_ref31,_void2=_objectWithoutProperties(_ref31,_excluded34);var gnr=useGridNavigation({gridNavigationParameters,linearNavigationParameters,managedChildrenReturn,rovingTabIndexParameters,typeaheadNavigationParameters});var{rovingTabIndexReturn}=gnr;var ssr=useSingleSelection({managedChildrenReturn,rovingTabIndexReturn,singleSelectionParameters});return _objectSpread(_objectSpread({},gnr),ssr);}function useGridNavigationSingleSelectionRow(_ref32){var{rowAsChildOfGridParameters,rowAsParentOfCellsParameters}=_ref32,_void1=_objectWithoutProperties(_ref32,_excluded35);var _useSingleSelectionCh=useSingleSelectionChild(rowAsChildOfGridParameters),{managedChildParameters,hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:ocfic2},pressParameters,singleSelectionChildReturn}=_useSingleSelectionCh,_void3=_objectWithoutProperties(_useSingleSelectionCh.hasCurrentFocusParameters,_excluded36);var _useGridNavigationRow=useGridNavigationRow({rowAsChildOfGridParameters,rowAsParentOfCellsParameters}),{rowAsChildOfGridReturn:{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:ocfic1},gridNavigationRowParameters,rovingTabIndexChildReturn,textContentReturn},rowAsParentOfCellsReturn}=_useGridNavigationRow,_void2=_objectWithoutProperties(_useGridNavigationRow.rowAsChildOfGridReturn.hasCurrentFocusParameters,_excluded38),void4=_objectWithoutProperties(_useGridNavigationRow.rowAsChildOfGridReturn,_excluded37);var onCurrentFocusedInnerChanged=useStableCallback((focused,prevFocused,e)=>{ocfic1===null||ocfic1===void 0?void 0:ocfic1(focused,prevFocused,e);ocfic2===null||ocfic2===void 0?void 0:ocfic2(focused,prevFocused,e);});return{rowAsChildOfGridReturn:{textContentReturn,managedChildParameters,hasCurrentFocusParameters:{onCurrentFocusedInnerChanged},gridNavigationRowParameters,rovingTabIndexChildReturn,singleSelectionChildReturn},rowAsParentOfCellsReturn};}// EZ
function useGridNavigationSingleSelectionCell(p){return useGridNavigationCell(p);}/**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */function copyArray(source,array){var index=-1,length=source.length;array||(array=Array(length));while(++index<length){array[index]=source[index];}return array;}/* Built-in method references for those with the same name as other `lodash` methods. */var nativeFloor=Math.floor,nativeRandom=Math.random;/**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */function baseRandom(lower,upper){return lower+nativeFloor(nativeRandom()*(upper-lower+1));}/**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */function shuffleSelf(array,size){var index=-1,length=array.length,lastIndex=length-1;size=size===undefined?length:size;while(++index<size){var rand=baseRandom(index,lastIndex),value=array[rand];array[rand]=array[index];array[index]=value;}array.length=size;return array;}/**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */function arrayShuffle(array){return shuffleSelf(copyArray(array));}/**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */function arrayMap(array,iteratee){var index=-1,length=array==null?0:array.length,result=Array(length);while(++index<length){result[index]=iteratee(array[index],index,array);}return result;}/**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */function baseValues(object,props){return arrayMap(props,function(key){return object[key];});}/**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}/** Detect free variable `global` from Node.js. */var freeGlobal=typeof global=='object'&&global&&global.Object===Object&&global;/** Detect free variable `self`. */var freeSelf=typeof self=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Built-in value references. */var Symbol$1=root.Symbol;/** Used for built-in method references. */var objectProto$5=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty$3=objectProto$5.hasOwnProperty;/**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */var nativeObjectToString$1=objectProto$5.toString;/** Built-in value references. */var symToStringTag$1=Symbol$1?Symbol$1.toStringTag:undefined;/**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */function getRawTag(value){var isOwn=hasOwnProperty$3.call(value,symToStringTag$1),tag=value[symToStringTag$1];try{value[symToStringTag$1]=undefined;var unmasked=true;}catch(e){}var result=nativeObjectToString$1.call(value);if(unmasked){if(isOwn){value[symToStringTag$1]=tag;}else{delete value[symToStringTag$1];}}return result;}/** Used for built-in method references. */var objectProto$4=Object.prototype;/**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */var nativeObjectToString=objectProto$4.toString;/**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */function objectToString(value){return nativeObjectToString.call(value);}/** `Object#toString` result references. */var nullTag='[object Null]',undefinedTag='[object Undefined]';/** Built-in value references. */var symToStringTag=Symbol$1?Symbol$1.toStringTag:undefined;/**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */function baseGetTag(value){if(value==null){return value===undefined?undefinedTag:nullTag;}return symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value);}/**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */function isObjectLike(value){return value!=null&&typeof value=='object';}/** `Object#toString` result references. */var argsTag$1='[object Arguments]';/**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag$1;}/** Used for built-in method references. */var objectProto$3=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty$2=objectProto$3.hasOwnProperty;/** Built-in value references. */var propertyIsEnumerable=objectProto$3.propertyIsEnumerable;/**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty$2.call(value,'callee')&&!propertyIsEnumerable.call(value,'callee');};/**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */var isArray=Array.isArray;/**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */function stubFalse(){return false;}/** Detect free variable `exports`. */var freeExports$1=typeof exports=='object'&&exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule$1=freeExports$1&&typeof module=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports$1=freeModule$1&&freeModule$1.exports===freeExports$1;/** Built-in value references. */var Buffer=moduleExports$1?root.Buffer:undefined;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeIsBuffer=Buffer?Buffer.isBuffer:undefined;/**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */var isBuffer=nativeIsBuffer||stubFalse;/** Used as references for various `Number` constants. */var MAX_SAFE_INTEGER$1=9007199254740991;/** Used to detect unsigned integer values. */var reIsUint=/^(?:0|[1-9]\d*)$/;/**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */function isIndex(value,length){var type=typeof value;length=length==null?MAX_SAFE_INTEGER$1:length;return!!length&&(type=='number'||type!='symbol'&&reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}/** Used as references for various `Number` constants. */var MAX_SAFE_INTEGER=9007199254740991;/**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',boolTag='[object Boolean]',dateTag='[object Date]',errorTag='[object Error]',funcTag$1='[object Function]',mapTag='[object Map]',numberTag='[object Number]',objectTag='[object Object]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',weakMapTag='[object WeakMap]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';/** Used to identify `toStringTag` values of typed arrays. */var typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=true;typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag$1]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=false;/**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */function baseIsTypedArray(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];}/**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */function baseUnary(func){return function(value){return func(value);};}/** Detect free variable `exports`. */var freeExports=typeof exports=='object'&&exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&typeof module=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/** Detect free variable `process` from Node.js. */var freeProcess=moduleExports&&freeGlobal.process;/** Used to access faster Node.js helpers. */var nodeUtil=function(){try{// Use `util.types` for Node.js 10+.
var types=freeModule&&freeModule.require&&freeModule.require('util').types;if(types){return types;}// Legacy `process.binding('util')` for Node.js < 10.
return freeProcess&&freeProcess.binding&&freeProcess.binding('util');}catch(e){}}();/* Node.js helper references. */var nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;/**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;/** Used for built-in method references. */var objectProto$2=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty$1=objectProto$2.hasOwnProperty;/**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */function arrayLikeKeys(value,inherited){var isArr=isArray(value),isArg=!isArr&&isArguments(value),isBuff=!isArr&&!isArg&&isBuffer(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value){if((inherited||hasOwnProperty$1.call(value,key))&&!(skipIndexes&&(// Safari 9 has enumerable `arguments.length` in strict mode.
key=='length'||// Node.js 0.10 has enumerable non-index properties on buffers.
isBuff&&(key=='offset'||key=='parent')||// PhantomJS 2 has enumerable non-index properties on typed arrays.
isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||// Skip index properties.
isIndex(key,length)))){result.push(key);}}return result;}/** Used for built-in method references. */var objectProto$1=Object.prototype;/**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto$1;return value===proto;}/**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */function overArg(func,transform){return function(arg){return func(transform(arg));};}/* Built-in method references for those with the same name as other `lodash` methods. */var nativeKeys=overArg(Object.keys,Object);/** Used for built-in method references. */var objectProto=Object.prototype;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}/**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */function isObject(value){var type=typeof value;return value!=null&&(type=='object'||type=='function');}/** `Object#toString` result references. */var asyncTag='[object AsyncFunction]',funcTag='[object Function]',genTag='[object GeneratorFunction]',proxyTag='[object Proxy]';/**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */function isFunction(value){if(!isObject(value)){return false;}// The use of `Object#toString` avoids issues with the `typeof` operator
// in Safari 9 which returns 'object' for typed arrays and other constructors.
var tag=baseGetTag(value);return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;}/**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}/**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);}/**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */function values(object){return object==null?[]:baseValues(object,keys(object));}/**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */function baseShuffle(collection){return shuffleSelf(values(collection));}/**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */function shuffle(collection){var func=isArray(collection)?arrayShuffle:baseShuffle;return func(collection);}/**
     * Returns a function that will, when called, force the component
     * that uses this hook to re-render itself.
     *
     * It's a bit smelly, so best to use sparingly.
     */function useForceUpdate(){var[,set]=p(0);return _(()=>set(i=>++i)).current;}/**
     * Hook that allows for the **direct descendant** children of this component to be re-ordered and sorted.
     *
     * *This is **separate** from "managed" children, which can be any level of child needed! Sortable/rearrangeable children must be **direct descendants** of the parent that uses this hook!*
     *
     * It's recommended to use this in conjunction with `useListNavigation`; it takes the same `indexMangler` and `indexDemangler`
     * functions that this hook returns. `useListNavigation` does not directly use this hook because, as mentioned,
     * this hook imposes serious restrictions on child structure, while `useListNavigation` allows anything.
     *
     * Besides the prop-modifying hook that's returned, the `sort` function that's returned will
     * sort all children according to their value from the `getValue` argument you pass in.
     *
     * If you want to perform some re-ordering operation that's *not* a sort, you can manually
     * re-map each child's position using `mangleMap` and `demangleMap`, which convert between
     * sorted and unsorted index positions.
     *
     * Again, unlike some other hooks, **these children must be direct descendants**. This is because
     * the prop-modifying hook inspects the given children, then re-creates them with new `key`s.
     * Because keys are given special treatment and a child has no way of modifying its own key
     * there's no other time or place this can happen other than exactly within the parent component's render function.
     */function useRearrangeableChildren(_ref33){var{rearrangeableChildrenParameters:{getIndex,onRearranged}}=_ref33;// These are used to keep track of a mapping between unsorted index <---> sorted index.
// These are needed for navigation with the arrow keys.
var mangleMap=_(new Map());var demangleMap=_(new Map());var indexMangler=T$1(n=>{var _mangleMap$current$ge;return(_mangleMap$current$ge=mangleMap.current.get(n))!==null&&_mangleMap$current$ge!==void 0?_mangleMap$current$ge:n;},[]);var indexDemangler=T$1(n=>{var _demangleMap$current$;return(_demangleMap$current$=demangleMap.current.get(n))!==null&&_demangleMap$current$!==void 0?_demangleMap$current$:n;},[]);var onRearrangedGetter=useStableGetter(onRearranged);//const { setTabbableIndex } = rovingTabIndexReturn;
var shuffle$1=T$1(managedRows=>{var shuffledRows=shuffle(managedRows.arraySlice());return rearrange(shuffledRows);},[/* Must remain stable */]);// The sort function needs to be able to update whoever has all the sortable children.
// Because that might not be the consumer of *this* hook directly (e.g. a table uses
// this hook, but it's tbody that actually needs updating), we need to remotely
// get and set a forceUpdate function.
//const [getForceUpdate, setForceUpdate] = usePassiveState<null | (() => void)>(null, returnNull);
var[getForceUpdate,setForceUpdate]=usePassiveState(null,returnNull);var rearrange=T$1(sortedRows=>{var _onRearrangedGetter,_getForceUpdate;mangleMap.current.clear();demangleMap.current.clear();// Update our sorted <--> unsorted indices map 
// and rerender the whole table, basically
for(var indexAsSorted=0;indexAsSorted<sortedRows.length;++indexAsSorted){var indexAsUnsorted=sortedRows[indexAsSorted].index;mangleMap.current.set(indexAsUnsorted,indexAsSorted);demangleMap.current.set(indexAsSorted,indexAsUnsorted);}(_onRearrangedGetter=onRearrangedGetter())===null||_onRearrangedGetter===void 0?void 0:_onRearrangedGetter();(_getForceUpdate=getForceUpdate())===null||_getForceUpdate===void 0?void 0:_getForceUpdate();},[]);var useRearrangedChildren=T$1(children=>{console.assert(Array.isArray(children));var forceUpdate=useForceUpdate();s(()=>{setForceUpdate(_prev=>forceUpdate);},[forceUpdate]);return children.slice().map(child=>({child,mangledIndex:indexMangler(getIndex(child)),demangledIndex:getIndex(child)})).sort((lhs,rhs)=>{return lhs.mangledIndex-rhs.mangledIndex;}).map(_ref34=>{var{child,mangledIndex,demangledIndex}=_ref34;return h$1(child.type,_objectSpread(_objectSpread({},child.props),{},{key:demangledIndex,"data-mangled-index":mangledIndex,"data-unmangled-index":demangledIndex}));});},[]);var toJsonArray=T$1((managedRows,transform)=>{return managedRows.arraySlice().map(child=>{if(transform)return transform(child);else return child.getSortValue();});},[]);return{//linearNavigationParameters: { navigateAbsolute, navigateRelative },
rearrangeableChildrenReturn:{indexMangler,indexDemangler,mangleMap,demangleMap,rearrange,shuffle:shuffle$1,useRearrangedChildren,toJsonArray}};}/**
     * Hook that allows for the **direct descendant** children of this component to be re-ordered and sorted.
     *
     * *This is **separate** from "managed" children, which can be any level of child needed! Sortable/rearrangeable children must be **direct descendants** of the parent that uses this hook!*
     *
     * It's recommended to use this in conjunction with `useListNavigation`; it takes the same `indexMangler` and `indexDemangler`
     * functions that this hook returns. `useListNavigation` does not directly use this hook because, as mentioned,
     * this hook imposes serious restrictions on child structure, while `useListNavigation` allows anything.
     *
     * Besides the prop-modifying hook that's returned, the `sort` function that's returned will
     * sort all children according to their value from the `getValue` argument you pass in.
     *
     * If you want to perform some re-ordering operation that's *not* a sort, you can manually
     * re-map each child's position using `mangleMap` and `demangleMap`, which convert between
     * sorted and unsorted index positions.
     *
     * Again, unlike some other hooks, **these children must be direct descendants**. This is because
     * the prop-modifying hook inspects the given children, then re-creates them with new `key`s.
     * Because keys are given special treatment and a child has no way of modifying its own key
     * there's no other time or place this can happen other than exactly within the parent component's render function.
     */function useSortableChildren(_ref35){var{rearrangeableChildrenParameters,sortableChildrenParameters:{compare:userCompare}}=_ref35;var getCompare=useStableGetter(userCompare!==null&&userCompare!==void 0?userCompare:defaultCompare);var{rearrangeableChildrenReturn}=useRearrangeableChildren({rearrangeableChildrenParameters});var{rearrange}=rearrangeableChildrenReturn;// The actual sort function.
var sort=T$1((managedRows,direction)=>{var compare=getCompare();var sortedRows=compare?managedRows.arraySlice().sort((lhsRow,rhsRow)=>{var lhsValue=lhsRow;var rhsValue=rhsRow;var result=compare(lhsValue,rhsValue);if(direction[0]=="d")return-result;return result;}):managedRows.arraySlice();return rearrange(sortedRows);},[/* Must remain stable */]);return{sortableChildrenReturn:{sort},rearrangeableChildrenReturn};}/*export interface UseGroupedSortableChildrenParameters<M extends GroupedSortedChildInfo> {
        managedChildrenReturn: UseManagedChildrenReturnType<M>["managedChildrenReturn"]
    }

    export interface UseGroupedSortableChildren {
        linearNavigationParameters: Pick<UseLinearNavigationParameters["linearNavigationParameters"], "indexDemangler" | "indexMangler">
    }*/ /**
     * It's common enough to have, e.g., a list with multiple sortable groups, a table where the body is sorted independently of the head, etc...
     *
     * A sortable group assumes that the parent (which also calls this hook) handles list navigation (or similar),
     * and that each group element (which can also be the list parent, if there are NO groups) handles sorting (or similar).
     */ /*export function useGroupedSortableChildren<M extends GroupedSortedChildInfo>({ managedChildrenReturn: { getChildren } }: UseGroupedSortableChildrenParameters<M>): UseGroupedSortableChildren {
        const allIndexManglers = useRef<Map<number, (i: number) => number>>(new Map());
        const allIndexDemanglers = useRef<Map<number, (i: number) => number>>(new Map());
        const indexMangler = useCallback((i: number): number => {
            const child = getChildren().getAt(i);
            if (child) {
                let indexManglerForThisLocation = allIndexManglers.current.get(child.locationIndex);
                return (indexManglerForThisLocation ?? identity)(i);
            }
            return identity(i);
        }, []);
        const indexDemangler = useCallback((i: number): number => {
            const child = getChildren().getAt(i);
            if (child) {
                let indexDemanglerForThisLocation = allIndexDemanglers.current.get(child.locationIndex);
                return (indexDemanglerForThisLocation ?? identity)(i);
            }
            return identity(i);
        }, []);


        return {
            linearNavigationParameters: {
                indexMangler,
                indexDemangler
            }
        }
    }*/function defaultCompare(lhs,rhs){return compare1(lhs===null||lhs===void 0?void 0:lhs.getSortValue(),rhs===null||rhs===void 0?void 0:rhs.getSortValue());function compare1(lhs,rhs){if(lhs==null||rhs==null){if(lhs==null)return-1;if(rhs==null)return 1;}return lhs-rhs;}}function useGridNavigationSingleSelectionSortable(_ref36){var{rearrangeableChildrenParameters,sortableChildrenParameters,linearNavigationParameters}=_ref36,gridNavigationSingleSelectionParameters=_objectWithoutProperties(_ref36,_excluded39);var _useSortableChildren=useSortableChildren({rearrangeableChildrenParameters,sortableChildrenParameters}),scr=_extends({},(_objectDestructuringEmpty(_useSortableChildren),_useSortableChildren));var{rearrangeableChildrenReturn:{indexDemangler,indexMangler}}=scr;var gnr=useGridNavigationSingleSelection(_objectSpread({linearNavigationParameters:_objectSpread({indexDemangler,indexMangler},linearNavigationParameters)},gridNavigationSingleSelectionParameters));return _objectSpread(_objectSpread({},gnr),scr);}function useListNavigationSingleSelection(_ref37){var{linearNavigationParameters,rovingTabIndexParameters,typeaheadNavigationParameters,singleSelectionParameters,managedChildrenReturn}=_ref37,_void3=_objectWithoutProperties(_ref37,_excluded40);var lnr=useListNavigation({linearNavigationParameters,rovingTabIndexParameters,typeaheadNavigationParameters,managedChildrenReturn});var{rovingTabIndexReturn}=lnr;var ssr=useSingleSelection({rovingTabIndexReturn,managedChildrenReturn,singleSelectionParameters});return _objectSpread(_objectSpread({},ssr),lnr);}function useListNavigationSingleSelectionChild(_ref38){var{managedChildParameters:{index},rovingTabIndexChildParameters:{hidden},singleSelectionChildParameters,singleSelectionContext,rovingTabIndexChildContext,typeaheadNavigationChildContext,refElementReturn,textContentParameters}=_ref38,_void5=_objectWithoutProperties(_ref38.managedChildParameters,_excluded41),void7=_objectWithoutProperties(_ref38.rovingTabIndexChildParameters,_excluded42),_void1=_objectWithoutProperties(_ref38,_excluded43);var _useSingleSelectionCh2=useSingleSelectionChild({managedChildParameters:{index},singleSelectionChildParameters,singleSelectionContext}),{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:ocfic2}}=_useSingleSelectionCh2,_void3=_objectWithoutProperties(_useSingleSelectionCh2.hasCurrentFocusParameters,_excluded45),sscr=_objectWithoutProperties(_useSingleSelectionCh2,_excluded44);var _useListNavigationChi2=useListNavigationChild({managedChildParameters:{index},rovingTabIndexChildParameters:{hidden},rovingTabIndexChildContext,typeaheadNavigationChildContext,refElementReturn,textContentParameters}),{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:ocfic1}}=_useListNavigationChi2,_void6=_objectWithoutProperties(_useListNavigationChi2.hasCurrentFocusParameters,_excluded47),lncr=_objectWithoutProperties(_useListNavigationChi2,_excluded46);return _objectSpread(_objectSpread({hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:useStableCallback((focused,previouslyFocused,e)=>{ocfic1===null||ocfic1===void 0?void 0:ocfic1(focused,previouslyFocused,e);ocfic2===null||ocfic2===void 0?void 0:ocfic2(focused,previouslyFocused,e);})}},sscr),lncr);}/**
     * Allows children to each wait until the previous has finished rendering before itself rendering.
     *
     * E.G. Child #3 waits until #2 renders. #2 waits until #1 renders, etc.
     *
     * Note that the child itself will still render, but you can delay rendering *its* children, or
     * delay other complicated or heavy logic, until the child is no longer staggered.
     */function useStaggeredChildren(_ref39){var{managedChildrenReturn:{getChildren},staggeredChildrenParameters:{staggered}}=_ref39;// By default, when a child mounts, we tell the next child to mount and simply repeat.
// If a child is missing, however, it will break that chain.
// To guard against that, we also wait for 50ms, and if it hasn't loaded by then, we just continue as if it did.
var[currentlyStaggering,setCurrentlyStaggering]=useState(staggered);var timeoutHandle=_(-1);var resetEmergencyTimeout=T$1(()=>{if(timeoutHandle.current!=-1)clearTimeout(timeoutHandle.current);timeoutHandle.current=setTimeout(()=>{// We've gone this long without hearing the next child mount itself...
// We need to continue.
timeoutHandle.current=-1;setDisplayedStaggerIndex(c=>{var _getTargetStaggerInde;return Math.min((_getTargetStaggerInde=getTargetStaggerIndex())!==null&&_getTargetStaggerInde!==void 0?_getTargetStaggerInde:0,(c!==null&&c!==void 0?c:0)+1);});},50);},[/* Must be empty */]);// The target index is the index that we're "animating" to.
// Each child simply sets this to the highest value ever seen.
// TODO: When unmounting children, we should reset this, but that requires us to track total # of children
var[getTargetStaggerIndex,setTargetStaggerIndex]=usePassiveState(T$1((newIndex,prevIndex)=>{// Any time our target changes,
// ensure our timeout is running, and start a new one if not
// For any newly mounted children, make sure they're aware of if they should consider themselves staggered or not
for(var _i5=prevIndex!==null&&prevIndex!==void 0?prevIndex:0;_i5<(newIndex!==null&&newIndex!==void 0?newIndex:0);++_i5){var _getChildren$getAt;(_getChildren$getAt=getChildren().getAt(_i5))===null||_getChildren$getAt===void 0?void 0:_getChildren$getAt.setParentIsStaggered(parentIsStaggered);}if(timeoutHandle.current==-1){resetEmergencyTimeout();// If there's no timeout running, then that also means we're not waiting for a child to mount.
// So ask a child to mount and then wait for that child to mount.
setDisplayedStaggerIndex(c=>Math.min(newIndex!==null&&newIndex!==void 0?newIndex:0,(c!==null&&c!==void 0?c:0)+1));}},[/* Must be empty */]),returnNull);//const [getTimeoutHandle, setTimeoutHandle] = usePassiveState<number | null, Event>(null, returnNull);
var[getDisplayedStaggerIndex,setDisplayedStaggerIndex]=usePassiveState(T$1((newIndex,prevIndex)=>{var _getTargetStaggerInde2;if(newIndex==null){return;}setCurrentlyStaggering(newIndex>=((_getTargetStaggerInde2=getTargetStaggerIndex())!==null&&_getTargetStaggerInde2!==void 0?_getTargetStaggerInde2:0));// It's time to show the next child,
// either because the current one finished mounting,
// or because our emergency backup timeout fired.
//
// Either way, tell the next child to show itself.
// Also make sure that anyone we skipped somehow show themselves as well.
for(var _i6=prevIndex!==null&&prevIndex!==void 0?prevIndex:0;_i6<newIndex;++_i6){var _getChildren$getAt2;(_getChildren$getAt2=getChildren().getAt(_i6))===null||_getChildren$getAt2===void 0?void 0:_getChildren$getAt2.setStaggeredVisible(true);}// Set a new emergency timeout
resetEmergencyTimeout();/*if (newIndex < targetIndex) {
                const handle = setTimeout(() => { setDisplayedStaggerIndex(c => (c ?? 0) + 1); }, staggerDelay ?? 50);
                return clearTimeout(handle);
            }*/},[/* Must be empty */]),returnNull);var parentIsStaggered=!!staggered;var childCallsThisToTellTheParentToMountTheNextOne=T$1(index=>{setDisplayedStaggerIndex(s=>{var _getTargetStaggerInde3;return Math.min((_getTargetStaggerInde3=getTargetStaggerIndex())!==null&&_getTargetStaggerInde3!==void 0?_getTargetStaggerInde3:0,1+Math.max(s!==null&&s!==void 0?s:0,index+1));});},[]);s(()=>{getChildren().forEach(child=>child.setParentIsStaggered(parentIsStaggered));//if (parentIsStaggered)
//    childCallsThisToTellTheParentToMountTheNextOne(-1);
},[parentIsStaggered]);var childCallsThisToTellTheParentTheHighestIndex=T$1(mountedIndex=>{setTargetStaggerIndex(i=>Math.max(i!==null&&i!==void 0?i:0,1+mountedIndex));},[]);// TODO: Modification during render
var s$1=_(parentIsStaggered);s$1.current=parentIsStaggered;return{staggeredChildrenReturn:{stillStaggering:currentlyStaggering},context:useStableObject({staggeredChildContext:useStableObject({childCallsThisToTellTheParentToMountTheNextOne,childCallsThisToTellTheParentTheHighestIndex,// These are used during setState, so just once during mount.
// It's okay that the dependencies aren't included.
// It's more important that these can be called during render.
//
// (If we switch, this is caught during useLayoutEffect anyway)
getDefaultIsStaggered:T$1(()=>{return parentIsStaggered;},[]),getDefaultStaggeredVisible:T$1(i=>{if(parentIsStaggered){var staggerIndex=getDisplayedStaggerIndex();if(staggerIndex==null)return false;return i<staggerIndex;}else{return true;}},[])})})};}function useStaggeredChild(_ref40){var{managedChildParameters:{index},context:{staggeredChildContext:{childCallsThisToTellTheParentTheHighestIndex,getDefaultIsStaggered,getDefaultStaggeredVisible,childCallsThisToTellTheParentToMountTheNextOne}}}=_ref40;var[parentIsStaggered,setParentIsStaggered]=useState(getDefaultIsStaggered());var[staggeredVisible,setStaggeredVisible]=useState(getDefaultStaggeredVisible(index));s(()=>{childCallsThisToTellTheParentTheHighestIndex(index);},[index]);h(()=>{if(parentIsStaggered&&staggeredVisible)childCallsThisToTellTheParentToMountTheNextOne(index);},[index,parentIsStaggered&&staggeredVisible]);return{props:!parentIsStaggered?{}:{"aria-busy":(!staggeredVisible).toString()},staggeredChildReturn:{staggeredVisible,isStaggered:parentIsStaggered,hideBecauseStaggered:parentIsStaggered?!staggeredVisible:false},managedChildParameters:{setStaggeredVisible:setStaggeredVisible,setParentIsStaggered}};}function usePaginatedChildren(_ref41){var{managedChildrenReturn:{getChildren},linearNavigationParameters:{indexDemangler,indexMangler},paginatedChildrenParameters:{paginationMax,paginationMin}}=_ref41;var[childCount,setChildCount]=useState(null);var parentIsPaginated=paginationMin!=null||paginationMax!=null;var lastPagination=_({paginationMax:null,paginationMin:null});var refreshPagination=T$1((paginationMin,paginationMax)=>{var childMax=getChildren().getHighestIndex()+1;for(var _i7=0;_i7<=childMax;++_i7){var _getChildren$getAt3,_getChildren$getAt4,_getChildren$getAt5;var visible=_i7>=(paginationMin!==null&&paginationMin!==void 0?paginationMin:-Infinity)&&_i7<(paginationMax!==null&&paginationMax!==void 0?paginationMax:Infinity);(_getChildren$getAt3=getChildren().getAt(indexDemangler(_i7)))===null||_getChildren$getAt3===void 0?void 0:_getChildren$getAt3.setParentIsPaginated(parentIsPaginated);(_getChildren$getAt4=getChildren().getAt(indexDemangler(_i7)))===null||_getChildren$getAt4===void 0?void 0:_getChildren$getAt4.setPaginationVisible(visible);if(visible)(_getChildren$getAt5=getChildren().getAt(indexDemangler(_i7)))===null||_getChildren$getAt5===void 0?void 0:_getChildren$getAt5.setChildCountIfPaginated(getChildren().getHighestIndex()+1);}},[/* Must be empty */]);s(()=>{refreshPagination(paginationMin,paginationMax);lastPagination.current.paginationMax=paginationMax;lastPagination.current.paginationMin=paginationMin;},[paginationMax,paginationMin]);// TODO: Modification during render
var p=_(parentIsPaginated);p.current=parentIsPaginated;return{context:useStableObject({paginatedChildContext:useStableObject({getDefaultIsPaginated:T$1(()=>{return p.current;},[]),// This is only used during setState on mount, so this is fine.
// (If we change from paginated to not paginated, this is caught during useLayoutEffect)
getDefaultPaginationVisible:T$1(i=>{return parentIsPaginated?i>=(paginationMin!==null&&paginationMin!==void 0?paginationMin:-Infinity)&&i<(paginationMax!==null&&paginationMax!==void 0?paginationMax:Infinity):true;},[])})}),managedChildrenParameters:{onChildCountChange:useStableCallback(count=>{if(paginationMax!=null||paginationMin!=null){setChildCount(count);var min=paginationMin!==null&&paginationMin!==void 0?paginationMin:0;var max=paginationMax!==null&&paginationMax!==void 0?paginationMax:count;for(var _i8=min;_i8<max;++_i8){var _getChildren$getAt6,_getChildren$getAt7;(_getChildren$getAt6=getChildren().getAt(_i8))===null||_getChildren$getAt6===void 0?void 0:_getChildren$getAt6.setParentIsPaginated(parentIsPaginated);(_getChildren$getAt7=getChildren().getAt(_i8))===null||_getChildren$getAt7===void 0?void 0:_getChildren$getAt7.setChildCountIfPaginated(count);}}else{// TODO: Make this debug only.
setChildCount(null);}})},paginatedChildrenReturn:{refreshPagination,childCount}};}function usePaginatedChild(_ref42){var{managedChildParameters:{index},context:{paginatedChildContext:{getDefaultPaginationVisible,getDefaultIsPaginated}}}=_ref42;var[parentIsPaginated,setParentIsPaginated]=useState(getDefaultIsPaginated());var[childCountIfPaginated,setChildCountIfPaginated]=useState(null);var[paginatedVisible,setPaginatedVisible]=useState(getDefaultPaginationVisible(index));return{props:!parentIsPaginated?{}:{"aria-setsize":childCountIfPaginated!==null&&childCountIfPaginated!==void 0?childCountIfPaginated:undefined,"aria-posinset":index+1},paginatedChildReturn:{paginatedVisible,isPaginated:parentIsPaginated,hideBecausePaginated:parentIsPaginated?!paginatedVisible:false},managedChildParameters:{setPaginationVisible:setPaginatedVisible,setChildCountIfPaginated,setParentIsPaginated}};}/**
     * Allows a composite component (such as a radio group or listbox) to listen
     * for an "overall focusin/out" event; this hook lets you know when focus has
     * moved in/out of this grouping of children EVEN IF there is no actual parent DOM element.
     *
     * I.E. you can use this without needing a parent `<div>` to listen for a `focusout` event.
     */function useChildrenHaveFocus(args){var{childrenHaveFocusParameters:{onCompositeFocusChange}}=args;var[getAnyFocused,setAnyFocused]=usePassiveState(onCompositeFocusChange,returnFalse,runImmediately);var[_getFocusCount,setFocusCount]=usePassiveState(useStableCallback((anyFocused,anyPreviouslyFocused,e)=>{console.assert(anyFocused>=0&&anyFocused<=1);setAnyFocused(!!(anyFocused&&!anyPreviouslyFocused),e);}));return{childrenHaveFocusReturn:{getAnyFocused},childrenHaveFocusChildContext:useStableObject({childrenHaveFocusChildParameters:useStableObject({setFocusCount})})};}function useChildrenHaveFocusChild(_ref43){var{childrenHaveFocusChildContext:{childrenHaveFocusChildParameters:{setFocusCount}}}=_ref43;return{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:useStableCallback((focused,prev,e)=>{if(focused){setFocusCount(p=>(p!==null&&p!==void 0?p:0)+1,e);}else if(!focused&&prev){setFocusCount(p=>(p!==null&&p!==void 0?p:0)-1,e);}})}};}function useHasCurrentFocus(args){var{hasCurrentFocusParameters:{onCurrentFocusedChanged:onFocusedChanged,onCurrentFocusedInnerChanged:onFocusedInnerChanged},refElementReturn:{getElement}}=args;useEnsureStability("useHasCurrentFocus",onFocusedChanged,onFocusedInnerChanged,getElement);var[getFocused,setFocused]=usePassiveState(onFocusedChanged,returnFalse,runImmediately);var[getFocusedInner,setFocusedInner]=usePassiveState(onFocusedInnerChanged,returnFalse,runImmediately);var onFocusIn=T$1(e=>{setFocusedInner(true,e);setFocused(e.target==getElement(),e);},[]);var onFocusOut=T$1(e=>{// Even if we're focusOut-ing to another inner element,
// that'll be caught during onFocusIn,
// so just set everything to false and let that revert things back to true if necessary.
setFocusedInner(false,e);setFocused(false,e);},[]);h(()=>{return()=>{setFocused(false);setFocusedInner(false);};},[]);var propsStable=_({onfocusin:onFocusIn,onfocusout:onFocusOut});h(()=>{return()=>{setFocused(false);setFocusedInner(false);};},[]);return{hasCurrentFocusReturn:{propsStable:propsStable.current,getCurrentFocused:getFocused,getCurrentFocusedInner:getFocusedInner}};}function useCompleteGridNavigation(_ref44){var{gridNavigationParameters,linearNavigationParameters,rovingTabIndexParameters,singleSelectionParameters,typeaheadNavigationParameters,sortableChildrenParameters,rearrangeableChildrenParameters,paginatedChildrenParameters,staggeredChildrenParameters}=_ref44;var getChildren=T$1(()=>managedChildrenReturn.getChildren(),[]);var getHighestChildIndex=T$1(()=>getChildren().getHighestIndex(),[]);var isValid=useStableCallback(index=>{var _getChildren$getAt8;return!((_getChildren$getAt8=getChildren().getAt(index))!==null&&_getChildren$getAt8!==void 0&&_getChildren$getAt8.hidden);});var _useGridNavigationSin=useGridNavigationSingleSelectionSortable({gridNavigationParameters,linearNavigationParameters:_objectSpread({getHighestIndex:getHighestChildIndex,isValid},linearNavigationParameters),managedChildrenReturn:{getChildren},rovingTabIndexParameters:_objectSpread({initiallyTabbedIndex:singleSelectionParameters.initiallySelectedIndex},rovingTabIndexParameters),singleSelectionParameters,typeaheadNavigationParameters:_objectSpread({isValid},typeaheadNavigationParameters),rearrangeableChildrenParameters:_objectSpread({onRearranged:useStableCallback(()=>{refreshPagination(paginatedChildrenParameters.paginationMin,paginatedChildrenParameters.paginationMax);})},rearrangeableChildrenParameters),sortableChildrenParameters}),{childrenHaveFocusParameters,managedChildrenParameters,rovingTabIndexChildContext,singleSelectionContext,typeaheadNavigationChildContext,gridNavigationRowContext,rearrangeableChildrenReturn}=_useGridNavigationSin,gridNavigationSingleSelectionReturn=_objectWithoutProperties(_useGridNavigationSin,_excluded48);var{linearNavigationReturn,typeaheadNavigationReturn}=gridNavigationSingleSelectionReturn;var{indexDemangler,indexMangler}=rearrangeableChildrenReturn;var{childrenHaveFocusChildContext,childrenHaveFocusReturn}=useChildrenHaveFocus({childrenHaveFocusParameters});var{context:{managedChildContext},managedChildrenReturn}=useManagedChildren({managedChildrenParameters:_objectSpread({onChildCountChange:useStableCallback(c=>onChildCountChange(c))},managedChildrenParameters)});var{paginatedChildrenReturn,paginatedChildrenReturn:{refreshPagination},managedChildrenParameters:{onChildCountChange},context:{paginatedChildContext}}=usePaginatedChildren({managedChildrenReturn,paginatedChildrenParameters,linearNavigationParameters:{indexDemangler,indexMangler}});var{context:{staggeredChildContext},staggeredChildrenReturn}=useStaggeredChildren({managedChildrenReturn,staggeredChildrenParameters});var props=useMergedProps(linearNavigationReturn.propsStable,typeaheadNavigationReturn.propsStable);/*const getDefaultPaginationVisible = useStableCallback((i: number) => {
            return (i >= (paginatedChildrenParameters.paginationMin ?? -Infinity)) && (i < (paginatedChildrenParameters.paginationMax ?? Infinity));
        });*/var context=useStableObject({singleSelectionContext,managedChildContext,rovingTabIndexChildContext,typeaheadNavigationChildContext,childrenHaveFocusChildContext,gridNavigationRowContext,paginatedChildContext,staggeredChildContext});return _objectSpread(_objectSpread({context,props,managedChildrenReturn,rearrangeableChildrenReturn,staggeredChildrenReturn},gridNavigationSingleSelectionReturn),{},{childrenHaveFocusReturn,paginatedChildrenReturn/*completeGridNavigationReturn: {
                toJson: useCallback(() => {
                    return toJsonArray(getChildren(), info => {
                        return info.
                    })
                }, [])
            }*/ //rearrangeableChildrenParameters: { getHighestChildIndex: getHighestChildIndex, getValid },
});}function useCompleteGridNavigationRow(_ref45){var{rowAsChildOfGridParameters:{managedChildParameters,context:{childrenHaveFocusChildContext,gridNavigationRowContext,managedChildContext:mcc1,rovingTabIndexChildContext,singleSelectionContext,typeaheadNavigationChildContext,staggeredChildContext,paginatedChildContext},completeGridNavigationRowParameters,singleSelectionChildParameters,rovingTabIndexChildParameters,rovingTabIndexChildParameters:{hidden},textContentParameters},rowAsParentOfCellsParameters:{linearNavigationParameters,rovingTabIndexParameters,typeaheadNavigationParameters}}=_ref45,rowAsChildOfGridParameters=_objectWithoutProperties(_ref45.rowAsChildOfGridParameters,_excluded49),rowAsParentOfCellsParameters=_objectWithoutProperties(_ref45.rowAsParentOfCellsParameters,_excluded50);var{index}=managedChildParameters;var{managedChildParameters:{setChildCountIfPaginated,setPaginationVisible,setParentIsPaginated},paginatedChildReturn:{paginatedVisible,isPaginated,hideBecausePaginated},props:paginationProps}=usePaginatedChild({managedChildParameters:{index},context:{paginatedChildContext}});var{managedChildParameters:{setParentIsStaggered,setStaggeredVisible},staggeredChildReturn:{staggeredVisible,isStaggered,hideBecauseStaggered},props:staggeredProps}=useStaggeredChild({managedChildParameters:{index},context:{staggeredChildContext}});rovingTabIndexChildParameters.hidden||(rovingTabIndexChildParameters.hidden=hideBecausePaginated||hideBecauseStaggered);singleSelectionChildParameters.disabled||(singleSelectionChildParameters.disabled=rovingTabIndexChildParameters.hidden);var getChildren=T$1(()=>managedChildrenReturn.getChildren(),[]);var getHighestChildIndex=T$1(()=>getChildren().getHighestIndex(),[]);var isValid=T$1(i=>{var child=getChildren().getAt(i);if(!child)return false;return!child.hidden;},[]);var{refElementReturn}=useRefElement({refElementParameters:{}});var r=useGridNavigationSingleSelectionRow({rowAsParentOfCellsParameters:_objectSpread(_objectSpread({},rowAsParentOfCellsParameters),{},{rovingTabIndexParameters:_objectSpread({initiallyTabbedIndex:0},rovingTabIndexParameters),typeaheadNavigationParameters:_objectSpread({isValid},typeaheadNavigationParameters),linearNavigationParameters:_objectSpread({isValid,getHighestIndex:getHighestChildIndex,pageNavigationSize:0,indexDemangler:identity$2,indexMangler:identity$2},linearNavigationParameters),managedChildrenReturn:{getChildren}}),rowAsChildOfGridParameters:_objectSpread(_objectSpread({},rowAsChildOfGridParameters),{},{refElementReturn,rovingTabIndexChildParameters,gridNavigationRowContext,rovingTabIndexChildContext,singleSelectionContext,typeaheadNavigationChildContext,singleSelectionChildParameters,managedChildParameters,textContentParameters:_objectSpread({hidden},textContentParameters),managedChildrenReturn:{getChildren}})});var{rowAsChildOfGridReturn,rowAsParentOfCellsReturn}=r;var{context:{managedChildContext},managedChildrenReturn}=useManagedChildren({managedChildrenParameters:r.rowAsParentOfCellsReturn.managedChildrenParameters});var{getElement}=refElementReturn;var baseInfo={getElement,setTabbable:r.rowAsChildOfGridReturn.rovingTabIndexChildReturn.setTabbable,getTabbable:r.rowAsChildOfGridReturn.rovingTabIndexChildReturn.getTabbable,tabbable:r.rowAsChildOfGridReturn.rovingTabIndexChildReturn.tabbable,index:managedChildParameters.index,hidden:rovingTabIndexChildParameters.hidden,selected:r.rowAsChildOfGridReturn.singleSelectionChildReturn.selected,focusSelf:r.rowAsChildOfGridReturn.gridNavigationRowParameters.focusSelf,getSelected:r.rowAsChildOfGridReturn.singleSelectionChildReturn.getSelected,setLocalSelected:r.rowAsChildOfGridReturn.managedChildParameters.setLocalSelected,disabled:singleSelectionChildParameters.disabled,setTabbableColumnIndex:r.rowAsChildOfGridReturn.gridNavigationRowParameters.setTabbableColumnIndex,getSortValue:rowAsChildOfGridParameters.sortableChildParameters.getSortValue,setPaginationVisible,setChildCountIfPaginated:setChildCountIfPaginated,setParentIsPaginated,setParentIsStaggered,setStaggeredVisible};var{managedChildReturn}=useManagedChild({context:{managedChildContext:mcc1},managedChildParameters:{index}},_objectSpread(_objectSpread({},baseInfo),completeGridNavigationRowParameters));var context=useStableObject({managedChildContext,rovingTabIndexChildContext:r.rowAsParentOfCellsReturn.rovingTabIndexChildContext,typeaheadNavigationChildContext:r.rowAsParentOfCellsReturn.typeaheadNavigationChildContext,completeGridNavigationContext:useStableObject({}),gridNavigationCellContext:r.rowAsParentOfCellsReturn.gridNavigationCellContext});var{hasCurrentFocusParameters}=useChildrenHaveFocusChild({childrenHaveFocusChildContext});//const { refElementReturn } = useRefElement<RowElement>({ refElementParameters: {} })
var{hasCurrentFocusReturn}=useHasCurrentFocus({refElementReturn,hasCurrentFocusParameters:_objectSpread(_objectSpread({},hasCurrentFocusParameters),{},{onCurrentFocusedChanged:null})});var props=useMergedProps(refElementReturn.propsStable,// TODO: Rows don't use tabIndex, but just excluding props here is...weird.
//r.rowAsChildOfGridReturn.rovingTabIndexChildReturn.propsUnstable,
r.rowAsChildOfGridReturn.singleSelectionChildReturn.propsUnstable,r.rowAsParentOfCellsReturn.linearNavigationReturn.propsStable,r.rowAsParentOfCellsReturn.typeaheadNavigationReturn.propsStable,hasCurrentFocusReturn.propsStable,paginationProps,staggeredProps);return{context,props,rowAsParentOfCellsReturn:_objectSpread(_objectSpread({},rowAsParentOfCellsReturn),{},{managedChildrenReturn}),rowAsChildOfGridReturn:_objectSpread(_objectSpread({},rowAsChildOfGridReturn),{},{managedChildReturn,staggeredChildReturn:{isStaggered,staggeredVisible,hideBecauseStaggered},paginatedChildReturn:{isPaginated,paginatedVisible,hideBecausePaginated}}),hasCurrentFocusReturn//managedChildrenReturn,
//...gridNavigationSingleSelectionReturn
};}function useCompleteGridNavigationCell(_ref46){var{gridNavigationCellParameters,managedChildParameters,context:{completeGridNavigationContext,gridNavigationCellContext,managedChildContext,rovingTabIndexChildContext,typeaheadNavigationChildContext},rovingTabIndexChildParameters:{hidden},rovingTabIndexChildParameters,textContentParameters,//managedChildContext,
completeGridNavigationCellParameters:{focusSelf}//sortableChildParameters: { getSortValue },
//    pressParameters: { onPressSync, ...pressParameters },
}=_ref46,completeGridNavigationCellParameters=_objectWithoutProperties(_ref46.completeGridNavigationCellParameters,_excluded51);var{index}=managedChildParameters;var{refElementReturn}=useRefElement({refElementParameters:{}});var{hasCurrentFocusParameters,rovingTabIndexChildReturn,textContentReturn}=useGridNavigationSingleSelectionCell({gridNavigationCellContext,gridNavigationCellParameters,managedChildParameters,rovingTabIndexChildContext,typeaheadNavigationChildContext,rovingTabIndexChildParameters,refElementReturn,textContentParameters:_objectSpread({hidden},textContentParameters)});var{hasCurrentFocusReturn}=useHasCurrentFocus({hasCurrentFocusParameters:_objectSpread({onCurrentFocusedChanged:null},hasCurrentFocusParameters),refElementReturn});/* const { pressReturn } = usePress<CellElement>({
             pressParameters: {
                 onPressSync: useStableCallback<NonNullable<typeof onPressSync>>(e => {
                     onPressSync?.(e);
                     completeGridNavigationContext.onPressSync?.(e);
                 }),
                 focusSelf: null,
                 ...pressParameters
             },
             refElementReturn
         });*/var baseInfo={focusSelf,getElement:refElementReturn.getElement,hidden:rovingTabIndexChildParameters.hidden,index:managedChildParameters.index,getTabbable:rovingTabIndexChildReturn.getTabbable,setTabbable:rovingTabIndexChildReturn.setTabbable,tabbable:rovingTabIndexChildReturn.tabbable//getSortValue
};var{managedChildReturn}=useManagedChild({context:{managedChildContext},managedChildParameters:{index}},_objectSpread(_objectSpread({},baseInfo),completeGridNavigationCellParameters));var props=useMergedProps(refElementReturn.propsStable,//pressReturn.propsStable,
rovingTabIndexChildReturn.propsUnstable,hasCurrentFocusReturn.propsStable);return{props,refElementReturn,rovingTabIndexChildReturn,//pressReturn,
hasCurrentFocusReturn,managedChildReturn,textContentReturn};}function useTimeout(_ref47){var{timeout,callback,triggerIndex}=_ref47;var stableCallback=useStableCallback(()=>{startTimeRef.current=null;callback();});var getTimeout=useStableGetter(timeout);// Set any time we start timeout.
// Unset any time the timeout completes
var startTimeRef=_(null);var timeoutIsNull=timeout==null;// Any time the triggerIndex changes (including on mount)
// restart the timeout.  The timeout does NOT reset
// when the duration or callback changes, only triggerIndex.
h(()=>{if(!timeoutIsNull){var _timeout=getTimeout();console.assert(timeoutIsNull==(_timeout==null));if(_timeout!=null){startTimeRef.current=+new Date();var handle=setTimeout(stableCallback,_timeout);return()=>clearTimeout(handle);}}},[triggerIndex,timeoutIsNull]);var getElapsedTime=T$1(()=>{var _startTimeRef$current;return+new Date()-+((_startTimeRef$current=startTimeRef.current)!==null&&_startTimeRef$current!==void 0?_startTimeRef$current:new Date());},[]);var getRemainingTime=T$1(()=>{var timeout=getTimeout();return timeout==null?null:Math.max(0,timeout-getElapsedTime());},[]);return{getElapsedTime,getRemainingTime};}function supportsPointerEvents(){return"onpointerup"in window;}/**
     * Adds the necessary event handlers to create a "press"-like event for
     * any element, whether it's a native &lt;BUTTON> or regular &lt;DIV>.
     *
     * Notably, the following cases are covered:
     * * The target element is properly focused, even on iOS Safari (*especially* on iOS Safari)
     * * Double-clicks won't select text, it just presses the button twice.
     * * Text selection that happens to end/start with this element won't invoke a press.
     * * The `enter` key immediately invokes a press (by default just once until pressed again), while the `space` key invokes it when released, if focus hasn't moved away from the button.
     * * Haptic feedback (on, like, the one browser combination that supports it &mdash; this can be disabled app-wide with `setButtonVibrate`)
     *
     * In addition, returns a "more accurate" CSS `active` and `hover`; more accurate
     * in that `hover` won't mess up mobile devices that see `hover` and mess up your click events,
     * and in that `active` accurately displays when a press would occur or not.
     *
     * @param onClickSync
     * @param exclude Whether the polyfill shouldn't apply (can specify for specific interactions)
     */function usePress(args){var{refElementReturn:{getElement},pressParameters:{exclude,focusSelf,onPressSync,allowRepeatPresses,longPressThreshold}}=args;var hasPressEvent=onPressSync!=null;/**
         * Explanations:
         *
         * It would be nice to just use pointer events for everything,
         * but 2019 iOS devices can't run those, amazingly enough, and
         * that's still pretty recent. So we need to have backup touch
         * events.
         *
         * Why not just use click? Because at the very, very least,
         * we also need to be able to handle space and enter key presses,
         * and that needs to work regardless of if it's a <button> or not.
         *
         * Also, we do still use click, because programmatic clicks can come
         * from anything from ATs to automation scripts, and we don't want
         * to break those. But since we are listening for pointer/touch events,
         * and we can't prevent the subsequent click event from happening,
         * and we **don't want to duplicate press events**, we need to
         * ignore click events that happen in the same tick as a handled press event.
         *
         * When we do a pointermove/touchmove, we check to see if we're still hovering over the element
         * for more accurate "active"/hover detection.
         *
         * "But you have a pointerleave event, why check for hovering during pointermove?"
         *
         * Because for some reason, pointerleave (etc.) aren't fired until *after* pointerup, no matter what.
         *
         */ // All our checking for pointerdown and up doesn't mean anything if it's
// a programmatic onClick event, which could come from any non-user source.
// We want to handle those just like GUI clicks, but we don't want to double-up on press events.
// So if we handle a press from pointerup, we ignore any subsequent click events, at least for a tick.
var[getJustHandled,setJustHandled]=usePassiveState(useStableCallback((justHandled,_p,reason)=>{if(justHandled){var _h=setTimeout(()=>{setJustHandled(false,reason);},1);return clearTimeout(_h);}}),returnFalse);var[longPress,setLongPress]=useState(null);var[waitingForSpaceUp,setWaitingForSpaceUp,getWaitingForSpaceUp]=useState(false);var[pointerDownStartedHere,setPointerDownStartedHere,getPointerDownStartedHere]=useState(false);var[hovering,setHovering,getHovering]=useState(false);var onTouchStart=T$1(e=>{e.preventDefault();e.stopPropagation();setPointerDownStartedHere(true);setHovering(true);setLongPress(false);var element=getElement();if(element)focusSelf(element);},[]);var onTouchMove=T$1(e=>{e.preventDefault();e.stopPropagation();var element=getElement();var touch=e.touches[0];// Be as generous as possible with touch events by checking all four corners of the radius too
var offsets=[[0,0],[-touch.radiusX,-touch.radiusY],[+touch.radiusX,-touch.radiusY],[-touch.radiusX,+touch.radiusY],[+touch.radiusX,+touch.radiusY]];var hoveringAtAnyPoint=false;for(var[_x,_y]of offsets){var _touch$clientX,_touch$clientY,_element$contains;var elementAtTouch=document.elementFromPoint(((_touch$clientX=touch===null||touch===void 0?void 0:touch.clientX)!==null&&_touch$clientX!==void 0?_touch$clientX:0)+_x,((_touch$clientY=touch===null||touch===void 0?void 0:touch.clientY)!==null&&_touch$clientY!==void 0?_touch$clientY:0)+_y);hoveringAtAnyPoint||(hoveringAtAnyPoint=(_element$contains=element===null||element===void 0?void 0:element.contains(elementAtTouch))!==null&&_element$contains!==void 0?_element$contains:false);}setHovering(hoveringAtAnyPoint);},[]);var onTouchEnd=T$1(e=>{e.preventDefault();e.stopPropagation();var hovering=getHovering();var pointerDownStartedHere=getPointerDownStartedHere();setJustHandled(true);if(pointerDownStartedHere&&hovering){handlePress(e);}setWaitingForSpaceUp(false);setHovering(false);setPointerDownStartedHere(false);},[]);var onPointerDown=T$1(e=>{if(e.buttons&1){e.preventDefault();e.stopPropagation();setPointerDownStartedHere(true);setHovering(true);setLongPress(false);var element=getElement();if(element)focusSelf(element);}},[]);var onPointerMove=useStableCallback(e=>{var listeningForPress=getPointerDownStartedHere();// If we're hovering over this element and not holding down the mouse button (or whatever other primary button)
// then we're definitely not in a press anymore (if we could we'd just wait for onPointerUp, but it could happen outside this element)
if(!(e.buttons&1))setPointerDownStartedHere(listeningForPress=false);if(listeningForPress){//e.preventDefault();
//e.stopPropagation();
var element=getElement();// Note: elementFromPoint starts reasonably expensive on a decent computer when on the order of 500 or so elements,
// so we only test for hovering while actively attempting to detect a press
var elementAtPointer=document.elementFromPoint(e.clientX,e.clientY);setHovering(element==elementAtPointer||(element===null||element===void 0?void 0:element.contains(elementAtPointer))||false);}});var onPointerUp=T$1(e=>{var hovering=getHovering();var pointerDownStartedHere=getPointerDownStartedHere();setJustHandled(true);if(pointerDownStartedHere&&hovering){handlePress(e);e.preventDefault();e.stopPropagation();}setWaitingForSpaceUp(false);setHovering(false);setPointerDownStartedHere(false);},[]);var onPointerEnter=T$1(e=>{setHovering(true);},[]);var onPointerLeave=T$1(e=>{setHovering(false);setLongPress(false);},[]);useTimeout({callback:()=>{var element=getElement();if(element&&pointerDownStartedHere&&hovering){focusSelf(element);}setLongPress(pointerDownStartedHere&&hovering);},timeout:longPressThreshold!==null&&longPressThreshold!==void 0?longPressThreshold:null,triggerIndex:pointerDownStartedHere&&hovering});var handlePress=useStableCallback(e=>{setWaitingForSpaceUp(false);setHovering(false);setPointerDownStartedHere(false);setLongPress(null);if(onPressSync){// Note: The element is focused here because of iOS Safari.
//
// It's always iOS Safari.
//
// iOS Safari (tested on 12) downright refuses to allow 
// elements to be manually focused UNLESS it happens within
// an event handler like this.  It also doesn't focus
// buttons by default when clicked, tapped, etc.
//
// If it becomes problematic that button-likes explicitly become
// focused when they are pressed, then an alternative solution for
// the question of "how do menu buttons keep their menus open"
// and other focus-related nonsense needs to be figured out.
//
// For iOS Safari.
//
var element=getElement();if(element)focusSelf(element);// Whatever the browser was going to do with this event,
// forget it. We're turning it into a "press" event.
e.preventDefault();// Also stop anyone else from listening to this event,
// since we're explicitly handling it.
// (Notably, this allows labels to wrap inputs, with them
// both having press event handlers, without double-firing)
e.stopPropagation();// Haptic feedback for this press event
try{// The default implementation doesn't throw,
// but we should guard against user implementations that could.
pulse();}finally{// Actually call our handler.
onPressSync(e);}}});var onKeyDown=useStableCallback(e=>{if(onPressSync){if(e.key==" "&&!excludes("space",exclude)){// We don't actually activate it on a space keydown
// but we do preventDefault to stop the page from scrolling.
setWaitingForSpaceUp(true);//onActiveStart(e);
e.preventDefault();}if(e.key=="Enter"&&!excludes("enter",exclude)&&(!e.repeat||(allowRepeatPresses!==null&&allowRepeatPresses!==void 0?allowRepeatPresses:false))){handlePress(e);}}});var onKeyUp=useStableCallback(e=>{var waitingForSpaceUp=getWaitingForSpaceUp();if(waitingForSpaceUp&&e.key==" "&&!excludes("space",exclude))handlePress(e);});var onClick=useStableCallback(e=>{var element=getElement();if(onPressSync){e.preventDefault();//const element = getElement();
//if (element)
//    focusSelf(element);
if(e.detail>1){e.stopImmediatePropagation();e.stopPropagation();}else{// Listen for "programmatic" click events.
if(// Ignore the click events that were *just* handled with pointerup
getJustHandled()==false&&// Ignore stray click events that were't fired SPECIFICALLY on this element
e.target==element&&// Ignore click events that were fired on a radio that just became checked
// (Whenever the `checked` property is changed, all browsers fire a `click` event, no matter the reason for the change,
// but since everything's declarative and *we* were the reason for the change, 
// this will always be a duplicate event related to whatever we just did.)
(element===null||element===void 0?void 0:element.tagName)=='input'&&element.type=='radio'&&element.checked){// Intentional, for now. Programmatic clicks shouldn't happen in most cases.
// TODO: Remove this when I'm confident stray clicks won't be handled.
console.assert(false);debugger;handlePress(e);}}}});var onFocusOut=useStableCallback(_e=>{setWaitingForSpaceUp(false);});var p=supportsPointerEvents();return{pressReturn:{pseudoActive:pointerDownStartedHere&&hovering||waitingForSpaceUp||false,//hovering,
longPress,propsUnstable:{onKeyDown,onKeyUp,onTouchStart:!hasPressEvent?undefined:!p?onTouchStart:undefined,onTouchCancel:!hasPressEvent?undefined:!p?onTouchEnd:undefined,onTouchMove:!hasPressEvent?undefined:!p?onTouchMove:undefined,onTouchEnd:!hasPressEvent?undefined:!p?onTouchEnd:undefined,onPointerDown:!hasPressEvent?undefined:p?onPointerDown:undefined,onPointerCancel:!hasPressEvent?undefined:p?onPointerDown:undefined,onPointerMove:!pointerDownStartedHere||!hasPressEvent?undefined:p?onPointerMove:undefined,onPointerUp:!hasPressEvent?undefined:p?onPointerUp:undefined,onPointerEnter:!hasPressEvent?undefined:p?onPointerEnter:undefined,onPointerLeave:!hasPressEvent?undefined:p?onPointerLeave:undefined,onfocusout:onFocusOut,onClick}}};}var pulse="vibrate"in navigator&&navigator.vibrate instanceof Function?()=>navigator.vibrate(10):()=>{};function excludes(target,exclude){if(exclude===false)return false;if(exclude===true||exclude!==null&&exclude!==void 0&&exclude[target])return true;return false;}/**
     * All the list-related hooks combined into one giant hook that encapsulates everything.
     *
     * Unlike most others, this hook assume's it's the final one--the "outermost" hook in the component--so it uses `useManagedChildren` and wraps everything up nicely,
     * combining event handlers that are used in multiple sub-hooks, collecting all the necessary context-related data, and merging all known DOM props together.
     *
     *
     *
     * @returns
     */function useCompleteListNavigation(_ref48){var{linearNavigationParameters,rearrangeableChildrenParameters,sortableChildrenParameters,typeaheadNavigationParameters,rovingTabIndexParameters,singleSelectionParameters,paginatedChildrenParameters,staggeredChildrenParameters}=_ref48,completeListNavigationParameters=_objectWithoutProperties(_ref48,_excluded52);//type M = UseListNavigationSingleSelectionChildInfo<ChildElement>;
var{initiallySelectedIndex}=singleSelectionParameters;var getChildren=T$1(()=>managedChildrenReturn.getChildren(),[]);var getHighestChildIndex=T$1(()=>getChildren().getHighestIndex(),[]);var getValid=T$1(i=>{var child=getChildren().getAt(i);if(!child)return false;return!child.hidden;},[]);var _useSortableChildren2=useSortableChildren({rearrangeableChildrenParameters:_objectSpread({onRearranged:useStableCallback(()=>{refreshPagination(paginatedChildrenParameters.paginationMin,paginatedChildrenParameters.paginationMax);})},rearrangeableChildrenParameters),sortableChildrenParameters}),{rearrangeableChildrenReturn:{indexDemangler,indexMangler},sortableChildrenReturn}=_useSortableChildren2,rearrangeableChildrenReturn=_objectWithoutProperties(_useSortableChildren2.rearrangeableChildrenReturn,_excluded53);var{childrenHaveFocusParameters,managedChildrenParameters,rovingTabIndexChildContext,typeaheadNavigationChildContext,singleSelectionContext,linearNavigationReturn,rovingTabIndexReturn,singleSelectionReturn,typeaheadNavigationReturn}=useListNavigationSingleSelection(_objectSpread({managedChildrenReturn:{getChildren},linearNavigationParameters:_objectSpread({getHighestIndex:getHighestChildIndex,isValid:getValid,indexDemangler,indexMangler},linearNavigationParameters),typeaheadNavigationParameters:_objectSpread({isValid:getValid},typeaheadNavigationParameters),rovingTabIndexParameters:_objectSpread({initiallyTabbedIndex:initiallySelectedIndex},rovingTabIndexParameters),singleSelectionParameters},completeListNavigationParameters));//const { linearNavigationReturn, typeaheadNavigationReturn } = listNavigationSingleSelectionSortableReturn;
//const [childCount, setChildCount] = useState(0);
var{childrenHaveFocusChildContext,childrenHaveFocusReturn}=useChildrenHaveFocus({childrenHaveFocusParameters});var{context:{managedChildContext},managedChildrenReturn}=useManagedChildren({managedChildrenParameters:_objectSpread({onChildCountChange:useStableCallback(c=>{onChildCountChange(c);})},managedChildrenParameters)});var{paginatedChildrenReturn,paginatedChildrenReturn:{refreshPagination},managedChildrenParameters:{onChildCountChange},context:{paginatedChildContext}}=usePaginatedChildren({managedChildrenReturn,paginatedChildrenParameters,linearNavigationParameters:{indexDemangler,indexMangler}});var{context:{staggeredChildContext},staggeredChildrenReturn}=useStaggeredChildren({managedChildrenReturn,staggeredChildrenParameters});var props=useMergedProps(linearNavigationReturn.propsStable,typeaheadNavigationReturn.propsStable);var context=useStableObject({singleSelectionContext,managedChildContext,rovingTabIndexChildContext,typeaheadNavigationChildContext,childrenHaveFocusChildContext,paginatedChildContext,staggeredChildContext});return{context,props,managedChildrenReturn,rearrangeableChildrenReturn:_objectSpread({indexDemangler,indexMangler},rearrangeableChildrenReturn),staggeredChildrenReturn,paginatedChildrenReturn,sortableChildrenReturn,linearNavigationReturn,rovingTabIndexReturn,singleSelectionReturn,typeaheadNavigationReturn,childrenHaveFocusReturn};}function useCompleteListNavigationChild(_ref49){var{//managedChildParameters: { hidden, disabled, index, getSortValue },
completeListNavigationChildParameters,singleSelectionChildParameters,rovingTabIndexChildParameters:{hidden},managedChildParameters,textContentParameters,context:{childrenHaveFocusChildContext,managedChildContext,rovingTabIndexChildContext,singleSelectionContext,typeaheadNavigationChildContext,paginatedChildContext,staggeredChildContext},pressParameters:{onPressSync:ops1},sortableChildParameters:{getSortValue}}=_ref49,pressParameters=_objectWithoutProperties(_ref49.pressParameters,_excluded54),_void=_objectWithoutProperties(_ref49,_excluded55);var{index}=managedChildParameters;var{managedChildParameters:{setChildCountIfPaginated,setPaginationVisible,setParentIsPaginated},paginatedChildReturn,paginatedChildReturn:{hideBecausePaginated},props:paginationProps}=usePaginatedChild({managedChildParameters:{index},context:{paginatedChildContext}});var{managedChildParameters:{setParentIsStaggered,setStaggeredVisible},staggeredChildReturn,staggeredChildReturn:{hideBecauseStaggered},props:staggeredProps}=useStaggeredChild({managedChildParameters,context:{staggeredChildContext}});//let { hidden } = rovingTabIndexChildParameters;
hidden||(hidden=hideBecausePaginated||hideBecauseStaggered);var{disabled}=singleSelectionChildParameters;if(hidden)disabled=true;var{refElementReturn}=useRefElement({refElementParameters:{}});var{getElement}=refElementReturn;var{focusSelf}=pressParameters;var _useListNavigationSin=useListNavigationSingleSelectionChild({managedChildParameters:{index},rovingTabIndexChildParameters:{hidden},singleSelectionChildParameters:_objectSpread({},singleSelectionChildParameters),rovingTabIndexChildContext,singleSelectionContext,typeaheadNavigationChildContext,refElementReturn,textContentParameters:_objectSpread({hidden},textContentParameters)}),{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:ocfic1},pressParameters:{onPressSync:ops2},rovingTabIndexChildReturn,singleSelectionChildReturn,managedChildParameters:{setLocalSelected}}=_useListNavigationSin,p1=_objectWithoutProperties(_useListNavigationSin.pressParameters,_excluded56);var{getTabbable,setTabbable,tabbable}=rovingTabIndexChildReturn;var{pressReturn}=usePress({pressParameters:_objectSpread(_objectSpread(_objectSpread({},p1),pressParameters),{},{onPressSync:disabled?null:e=>{ops2===null||ops2===void 0?void 0:ops2(e);ops1===null||ops1===void 0?void 0:ops1(e);}}),refElementReturn});var{getSelected,selected}=singleSelectionChildReturn;var mcp1={disabled,focusSelf,getElement,getSelected,getTabbable,hidden,index,selected,setLocalSelected,setTabbable,tabbable,getSortValue,setChildCountIfPaginated,setPaginationVisible,setParentIsPaginated,setParentIsStaggered,setStaggeredVisible};var{managedChildReturn}=useManagedChild({context:{managedChildContext},managedChildParameters:{index}},_objectSpread(_objectSpread({},mcp1),completeListNavigationChildParameters));var{hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:ocfic2}}=useChildrenHaveFocusChild({childrenHaveFocusChildContext});var onCurrentFocusedInnerChanged=useStableCallback((focused,prev,e)=>{ocfic1===null||ocfic1===void 0?void 0:ocfic1(focused,prev,e);ocfic2===null||ocfic2===void 0?void 0:ocfic2(focused,prev,e);});var{hasCurrentFocusReturn}=useHasCurrentFocus({hasCurrentFocusParameters:{onCurrentFocusedInnerChanged,onCurrentFocusedChanged:null},refElementReturn});var props=useMergedProps(refElementReturn.propsStable,pressReturn.propsUnstable,hasCurrentFocusReturn.propsStable,rovingTabIndexChildReturn.propsUnstable,singleSelectionChildReturn.propsUnstable,paginationProps,staggeredProps);return{props,pressReturn,rovingTabIndexChildReturn,singleSelectionChildReturn,hasCurrentFocusReturn,managedChildReturn,paginatedChildReturn,staggeredChildReturn};}/*
    function foo<ParentElement extends Element, ChildElement extends Element, M extends UseListNavigationSingleSelectionSortableChildInfo<ChildElement>>(p: UseCompleteListNavigationParameters<ParentElement, ChildElement, M>) {
        const { singleSelectionReturn } = useCompleteListNavigation<ParentElement, ChildElement, M>(p);
        const selectedIndex = 0;
        useSingleSelectionDeclarative({ singleSelectionReturn, singleSelectionDeclarativeParameters: { selectedIndex } })
    }*/ /**
     * Combines dismissal hooks and focus trap hooks into one.
     *
     * Another in the "complete" series, alongside list/grid navigation and dismissal itself.
     *
     * Use for dialogs, menus, etc.  Anything that can be dismissed and might trap focus, basically.
     *
     * @param param0
     * @returns
     */function useModal(_ref50){var{dismissParameters,escapeDismissParameters,focusTrapParameters:{trapActive}}=_ref50,focusTrapParameters=_objectWithoutProperties(_ref50.focusTrapParameters,_excluded57);var{open}=dismissParameters;//const { getWindow } = escapeDismissParameters;
//const getDocument = useCallback(() => { return getWindow().document; }, [getWindow]);
var{refElementPopupReturn,refElementSourceReturn}=useDismiss({dismissParameters,escapeDismissParameters});var{focusTrapReturn,refElementReturn}=useFocusTrap({focusTrapParameters:_objectSpread({trapActive:open&&trapActive},focusTrapParameters),refElementParameters:{}});var{propsStable:pp1}=refElementPopupReturn;var{propsStable:ps2}=refElementSourceReturn;var{propsUnstable:pp3}=focusTrapReturn;var{propsStable:pp4}=refElementReturn;return{propsPopup:pp1,propsFocusContainer:useMergedProps(pp3,pp4),propsSource:ps2,refElementPopupReturn,refElementSourceReturn,focusTrapReturn};}function useRandomId(_ref51){var{randomIdParameters:{prefix,otherReferencerProp}}=_ref51;var id=prefix+V$1();useEnsureStability("useRandomId",prefix,id);var referencerElementProps=_(otherReferencerProp==null?{}:{[otherReferencerProp]:id});var sourceElementProps=_({id});useEnsureStability("useRandomIdReferencerElement",otherReferencerProp);return{propsReferencer:referencerElementProps.current,propsSource:sourceElementProps.current,randomIdReturn:{id:id}};}/**
     * While `useRandomId` allows the referencer to use the source's ID, sometimes you also want the reverse too (e.g. I `aria-label` you, you `aria-controls` me. That sort of thing).
     */function useRandomDualIds(_ref52){var{randomIdInputParameters,randomIdLabelParameters}=_ref52;var{randomIdReturn:randomIdInputReturn,propsReferencer:propsLabelAsReferencer,propsSource:propsInputAsSource}=useRandomId({randomIdParameters:randomIdInputParameters});var{randomIdReturn:randomIdLabelReturn,propsReferencer:propsInputAsReferencer,propsSource:propsLabelAsSource}=useRandomId({randomIdParameters:randomIdLabelParameters});return{propsLabel:useMergedProps(propsLabelAsReferencer,propsLabelAsSource),propsInput:useMergedProps(propsInputAsReferencer,propsInputAsSource),randomIdInputReturn,randomIdLabelReturn};}/**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */var now=function(){return root.Date.now();};/** Used to match a single whitespace character. */var reWhitespace=/\s/;/**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */function trimmedEndIndex(string){var index=string.length;while(index--&&reWhitespace.test(string.charAt(index))){}return index;}/** Used to match leading whitespace. */var reTrimStart=/^\s+/;/**
     * The base implementation of `_.trim`.
     *
     * @private
     * @param {string} string The string to trim.
     * @returns {string} Returns the trimmed string.
     */function baseTrim(string){return string?string.slice(0,trimmedEndIndex(string)+1).replace(reTrimStart,''):string;}/** `Object#toString` result references. */var symbolTag='[object Symbol]';/**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */function isSymbol(value){return typeof value=='symbol'||isObjectLike(value)&&baseGetTag(value)==symbolTag;}/** Used as references for various `Number` constants. */var NAN=0/0;/** Used to detect bad signed hexadecimal string values. */var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;/** Used to detect binary string values. */var reIsBinary=/^0b[01]+$/i;/** Used to detect octal string values. */var reIsOctal=/^0o[0-7]+$/i;/** Built-in method references without a dependency on `root`. */var freeParseInt=parseInt;/**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=baseTrim(value);var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}/** Error message constants. */var FUNC_ERROR_TEXT='Expected a function';/* Built-in method references for those with the same name as other `lodash` methods. */var nativeMax=Math.max,nativeMin=Math.min;/**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=false,maxing=false,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}wait=toNumber(wait)||0;if(isObject(options)){leading=!!options.leading;maxing='maxWait'in options;maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;trailing='trailing'in options?!!options.trailing:trailing;}function invokeFunc(time){var args=lastArgs,thisArg=lastThis;lastArgs=lastThis=undefined;lastInvokeTime=time;result=func.apply(thisArg,args);return result;}function leadingEdge(time){// Reset any `maxWait` timer.
lastInvokeTime=time;// Start the timer for the trailing edge.
timerId=setTimeout(timerExpired,wait);// Invoke the leading edge.
return leading?invokeFunc(time):result;}function remainingWait(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime,timeWaiting=wait-timeSinceLastCall;return maxing?nativeMin(timeWaiting,maxWait-timeSinceLastInvoke):timeWaiting;}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime;// Either this is the first call, activity has stopped and we're at the
// trailing edge, the system time has gone backwards and we're treating
// it as the trailing edge, or we've hit the `maxWait` limit.
return lastCallTime===undefined||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;}function timerExpired(){var time=now();if(shouldInvoke(time)){return trailingEdge(time);}// Restart the timer.
timerId=setTimeout(timerExpired,remainingWait(time));}function trailingEdge(time){timerId=undefined;// Only invoke if we have `lastArgs` which means `func` has been
// debounced at least once.
if(trailing&&lastArgs){return invokeFunc(time);}lastArgs=lastThis=undefined;return result;}function cancel(){if(timerId!==undefined){clearTimeout(timerId);}lastInvokeTime=0;lastArgs=lastCallTime=lastThis=timerId=undefined;}function flush(){return timerId===undefined?result:trailingEdge(now());}function debounced(){var time=now(),isInvoking=shouldInvoke(time);lastArgs=arguments;lastThis=this;lastCallTime=time;if(isInvoking){if(timerId===undefined){return leadingEdge(lastCallTime);}if(maxing){// Handle invocations in a tight loop.
clearTimeout(timerId);timerId=setTimeout(timerExpired,wait);return invokeFunc(lastCallTime);}}if(timerId===undefined){timerId=setTimeout(timerExpired,wait);}return result;}debounced.cancel=cancel;debounced.flush=flush;return debounced;}function identity$1(){for(var _len5=arguments.length,t=new Array(_len5),_key5=0;_key5<_len5;_key5++){t[_key5]=arguments[_key5];}return t;}/**
     * Given an async function, returns a function that's suitable for non-async APIs,
     * along with other information about the current run's status.
     *
     * See also `useAsyncHandler` for a version that's specialized for DOM event handlers.
     *
     * When called multiple times in quick succession, (i.e. before the handler has finished),
     * this works like Lodash's `throttle` function with the `wait` option always
     * set to however long the handler takes to complete. A second call to the sync function will be
     * throttled until the first call has finished. The return value of the function is the result
     * of the previous invocation, or `undefined` on the first call.
     *
     * The handler is only ever delayed if one is currently running, so, e.g. for iOS touch events the
     * first call happens in the same event handler (which means things like calls to `element.focus()`
     * will work as intended, since that fails when the event is "split up")
     *
     * Finally, because the sync handler may be invoked on a delay, any property references on the arguments
     * provided might be stale by the time it's actually invoked (e.g. accessing `event.currentTarget.checked`
     * is not stable across time because it's a "live" value -- you almost always want the value that it
     * had at the original time the handler was called). The `capture` option allows you to save that kind of
     * dynamic data at the time it runs; the `AP` and `SP` type parameters likewise control
     * the parameters the async handler and sync handler expect respectively.
     *
     */function useAsync(asyncHandler2,options){// Things related to current execution
// Because we can both return and throw undefined, 
// we need separate state to track their existance too.
var[pending,setPending,getPending]=useState(false);var[result,setResult,getResult]=useState(undefined);var[error,setError,_getError]=useState(undefined);var[hasError,setHasError,_getHasError]=useState(false);var[hasResult,setHasResult,_getHasResult]=useState(false);var[asyncDebouncing,setAsyncDebouncing]=useState(false);var[syncDebouncing,setSyncDebouncing]=useState(false);//const [currentCapture, setCurrentCapture] = useState<AP | undefined>(undefined);
var incrementCallCount=T$1(()=>{setRunCount(c=>c+1);},[]);var incrementResolveCount=T$1(()=>{setResolveCount(c=>c+1);},[]);var incrementRejectCount=T$1(()=>{setRejectCount(c=>c+1);},[]);var incrementFinallyCount=T$1(()=>{setSettleCount(c=>c+1);},[]);/* eslint-disable prefer-const */var{throttle,debounce,capture:captureUnstable}=options!==null&&options!==void 0?options:{};var captureStable=useStableCallback(captureUnstable!==null&&captureUnstable!==void 0?captureUnstable:identity$1);var asyncHandlerStable=useStableCallback(asyncHandler2!==null&&asyncHandler2!==void 0?asyncHandler2:identity$1);var{flush,syncOutput,cancel}=F$1(()=>{return asyncToSync({asyncInput:asyncHandlerStable,capture:captureStable,setAsyncDebouncing,setError,setPending,setReturn:setResult,setSyncDebouncing,setHasError,setHasResult,incrementCallCount,incrementFinallyCount,incrementRejectCount,incrementResolveCount,throttle:options===null||options===void 0?void 0:options.throttle,wait:options===null||options===void 0?void 0:options.debounce});},[throttle,debounce]);h(()=>{return()=>cancel();},[cancel]);// We keep, like, a lot of render-state, but it only ever triggers a re-render
// when we start/stop an async action.
// Keep track of this for the caller's sake -- we don't really care.
/*const [currentType, setCurrentType] = useState<null | "sync" | "async">(null);*/var[runCount,setRunCount]=useState(0);var[settleCount,setSettleCount]=useState(0);var[resolveCount,setResolveCount]=useState(0);var[rejectCount,setRejectCount]=useState(0);return{syncHandler:syncOutput,//currentType,
pending,result,error,hasError:hasError||false,hasResult:hasResult||false,resolveCount,rejectCount,settleCount,debouncingAsync:asyncDebouncing,debouncingSync:syncDebouncing,callCount:runCount,flushDebouncedPromise:flush};}function isPromise(p){return p instanceof Promise;}var Unset=Symbol("Unset");/**
     * lodash-ish function that's like debounce + (throttle w/ async handling) combined.
     *
     * Requires a lot of callbacks to meaningfully turn a red function into a blue one, but you *can* do it!
     */function asyncToSync(_ref53){var{asyncInput,incrementCallCount,incrementFinallyCount,incrementRejectCount,incrementResolveCount,setHasError,setHasResult,setError,setReturn,capture,setAsyncDebouncing,setSyncDebouncing,setPending,throttle,wait}=_ref53;var pending=false;var syncDebouncing=false;var asyncDebouncing=false;var currentCapture=Unset;var onAsyncFinished=()=>{// 8. This is run at the end of every invocation of the async handler,
// whether it completed or not.
incrementFinallyCount();setPending(pending=false);if(!asyncDebouncing);else{// 9a. Another request to run the async handler came in while we were running this one.
// Instead of stopping, we're just going to immediately run again using the arguments that were given to us most recently.
// We also clear that flag, because we're handling it now. It'll be set again if the handler is called again while *this* one is running
setAsyncDebouncing(asyncDebouncing=false);console.assert(currentCapture!==Unset);if(currentCapture!=Unset){setSyncDebouncing(syncDebouncing=true);syncDebounced();}}};var sync=function(){// 5. We're finally running the async version of the function, so notify the caller that the return value is pending.
// And because the fact that we're here means the debounce/throttle period is over, we can clear that flag too.
setPending(pending=true);console.assert(syncDebouncing==false);setHasError(null);setHasResult(null);var promiseOrReturn;var hadSyncError=false;try{// 6. Run the function we were given.
// Because it may be sync, or it may throw before returning, we must still wrap it in a try/catch...
// Also important is that we preserve the async-ness (or lack thereof) on the original input function.
incrementCallCount();promiseOrReturn=asyncInput(...arguments);setHasError(false);}catch(ex){hadSyncError=true;setError(ex);}// 7. Either end immediately, or schedule to end when completed.
if(isPromise(promiseOrReturn)){promiseOrReturn.then(r=>{incrementResolveCount();setHasResult(true);setReturn(r);return r;}).catch(e=>{incrementRejectCount();setHasError(true);setError(e);return e;}).finally(onAsyncFinished);}else{if(!hadSyncError){incrementResolveCount();setHasResult(true);setHasError(false);}else{incrementRejectCount();setHasResult(false);setHasError(true);}setReturn(promiseOrReturn);setPending(pending=false);onAsyncFinished();}};// 4. Instead of calling the sync version of our function directly, we allow it to be throttled/debounced.
var syncDebounced=debounce(()=>{setSyncDebouncing(syncDebouncing=false);if(!pending){// 3a. If this is the first invocation, or if we're not still waiting for a previous invocation to finish its async call,
// then we can just go ahead and run the debounced version of our function.
console.assert(currentCapture!=Unset);sync(...currentCapture);}else{// 3b. If we were called while still waiting for the (or a) previous invocation to finish,
// then we'll need to delay this one. When that previous invocation finishes, it'll check
// to see if it needs to run again, and it will use these new captured arguments from step 2.
setAsyncDebouncing(asyncDebouncing=true);}},wait,{leading:true,trailing:true,maxWait:throttle});return{syncOutput:function(){// 1. We call the sync version of our async function.
// 2. We capture the arguments into a form that won't become stale if/when the function is called with a (possibly seconds-long) delay.
currentCapture=capture(...arguments);setSyncDebouncing(syncDebouncing=true);syncDebounced();},flush:()=>{syncDebounced.flush();},cancel:()=>{syncDebounced.cancel();}};}/**
     * Given an asyncronous event handler, returns a syncronous one that works on the DOM,
     * along with some other information related to the current state.
     * Does not modify any props.
     *
     * Note that because the handler you provide may be called with a delay, and
     * because the value of, e.g., an `<input>` element will likely be stale by the
     * time the delay is over, a `capture` function is necessary in order to
     * capture the relevant information from the DOM. Any other simple event data,
     * like `mouseX` or `shiftKey` can stay on the event itself and don't
     * need to be captured &ndash; it's never stale.
     *
     * ```tsx
     * const asyncOnInput = async (value: number, e: Event) => {
     *     [...] // Ex. send to a server and setState when done
     * };
     * const {
     *     // A sync version of asyncOnInput
     *     syncHandler,
     *     // True while the handler is running
     *     pending,
     *     // The error thrown, if any
     *     error,
     *     // Show this value while the operation's pending
     *     currentCapture,
     *     // And others, see `UseAsyncHandlerReturnType`
     *     ...rest
     * } = useAsyncHandler<HTMLInputElement>()(asyncOnInput, {
     *     // Pass in the capture function that saves event data
     *     // from being stale.
     *     capture: e => {
     *         // `capture` can have side-effects because
     *         // it's called exactly once per invocation
     *         e.preventDefault();
     *
     *         // Save this value so that it's never stale
     *         return e.currentTarget.valueAsNumber;
     *     }
     * });
     *
     * const onInput = pending? null : syncHandler;
     * ```
     *
     * The handler is automatically throttled to only run one at a time.
     * If the handler is called, and then before it finishes, is called again,
     * it will be put on hold until the current one finishes, at which point
     * the second one will run.  If the handler is called a third time before
     * the first has finished, it will *replace* the second, so only the most
     * recently called iteration of the handler will run.
     *
     *
     * You may optionally *also* specify debounce and throttle parameters that wait until the
     * syncronous handler has not been called for the specified number of
     * milliseconds, at which point we *actually* run the asyncronous handler
     * according to the logic in the previous paragraph. This is in
     * *addition* to throttling the handler, and does not replace that behavior.
     *
     * @see useAsync A more general version of this hook that can work with any type of handler, not just DOM event handlers.
     */function useAsyncHandler(_ref54){var{asyncHandler,capture:originalCapture}=_ref54,restAsyncOptions=_objectWithoutProperties(_ref54,_excluded58);// We need to differentiate between "nothing captured yet" and "`undefined` was captured"
var[currentCapture,setCurrentCapture,getCurrentCapture]=useState(undefined);var[hasCapture,setHasCapture]=useState(false);// Wrap around the normal `useAsync` `capture` function to also
// keep track of the last value the user actually input.
// 
// Without this there's no way to re-render the control with
// it being both controlled and also having the "correct" value,
// and at any rate also protects against sudden exceptions reverting
// your change out from under you.
var capture=useStableCallback(e=>{var captured=originalCapture(e);setCurrentCapture(captured);setHasCapture(true);return[captured,e];});return _objectSpread({getCurrentCapture,currentCapture,hasCapture},useAsync(asyncHandler,_objectSpread({capture},restAsyncOptions)));}function getFromLocalStorage(key){var converter=arguments.length>1&&arguments[1]!==undefined?arguments[1]:JSON.parse;try{var item=localStorage.getItem(key);if(item==null)return null;return converter(item);}catch(e){/* eslint-disable no-debugger */debugger;return null;}}function storeToLocalStorage(key,value){var converter=arguments.length>2&&arguments[2]!==undefined?arguments[2]:JSON.stringify;try{if(value==null)localStorage.removeItem(key);else localStorage.setItem(key,converter(value));}catch(e){/* eslint-disable no-debugger */debugger;}}/**
     * Use module augmentation to get the correct types for this function.
     *
     * ````
     * declare module 'preact-prop-helpers' {
     *     interface PersistentStates {
     *         numberState: number;
     *         stringState: string;
     *     }
     * }
     * ````
     * @param key
     * @param initialValue
     * @param fromString
     * @param toString
     * @returns
     */function usePersistentState(key,initialValue){var fromString=arguments.length>2&&arguments[2]!==undefined?arguments[2]:JSON.parse;var toString=arguments.length>3&&arguments[3]!==undefined?arguments[3]:JSON.stringify;var[localCopy,setLocalCopy,getLocalCopy]=useState(()=>{var _ref55;return(_ref55=key?getFromLocalStorage(key,fromString):null)!==null&&_ref55!==void 0?_ref55:initialValue;});var getInitialValue=useStableGetter(initialValue);// Ensure that if our key changes, we also update `localCopy` to match.
s(()=>{if(key){var newCopy=getFromLocalStorage(key,fromString);setLocalCopy(newCopy!==null&&newCopy!==void 0?newCopy:getInitialValue());}},[key]);// Listen for changes to this storage in other browser tabs
useGlobalHandler(window,"storage",e=>{if(key&&e.key===key){var newValue=e.newValue;if(newValue!=null)setLocalCopy(fromString(newValue));else setLocalCopy(initialValue);}});var setValueWrapper=useStableCallback(valueOrSetter=>{var value=typeof valueOrSetter==="function"?valueOrSetter(getLocalCopy()):valueOrSetter;// Make sure this update is available immediately before the next render
setLocalCopy(valueOrSetter);// Actually save the value to local storage.
if(key){storeToLocalStorage(key,value,toString);if(typeof value=="object"&&value instanceof Date){console.assert(fromString!=JSON.parse,"Dates (and other non-JSON types) must be given custom fromString and toString functions.");}}});var getValue=useStableCallback(()=>{var trueValue=!key?undefined:getFromLocalStorage(key,fromString);return trueValue!==null&&trueValue!==void 0?trueValue:localCopy;});return[localCopy,setValueWrapper,getValue];}B$2(null);function useButton(_ref56){var{buttonParameters:{tagButton,disabled,onPress,pressed,role},pressParameters,refElementParameters}=_ref56;debugLog("useButton");var refElementReturn=useRefElement({refElementParameters});var focusSelf=T$1(e=>{var _e$focus2;return(_e$focus2=e.focus)===null||_e$focus2===void 0?void 0:_e$focus2.call(e);},[]);var pressReturn=usePress(_objectSpread(_objectSpread({},refElementReturn),{},{pressParameters:_objectSpread({onPressSync:e=>{var _ref57;return(_ref57=disabled?null:onPress)===null||_ref57===void 0?void 0:_ref57(enhanceEvent(e,{pressed:pressed==null?null:!pressed}));},focusSelf},pressParameters)}));var{pressReturn:{propsUnstable:pressProps}}=pressReturn;var{refElementReturn:{propsStable:refProps}}=refElementReturn;var baseProps={"aria-pressed":pressed===true?"true":pressed===false?"false":undefined};var buttonProps=_objectSpread(_objectSpread({},baseProps),{},{disabled:disabled&&disabled!="soft"?true:false,"aria-disabled":disabled==='soft'?'true':undefined,role:role=="button"?undefined:role});var divProps=_objectSpread(_objectSpread({},baseProps),{},{tabIndex:disabled==="hard"?-1:0,role,"aria-disabled":disabled?"true":undefined});return _objectSpread(_objectSpread(_objectSpread({},refElementReturn),pressReturn),{},{props:useMergedProps(pressProps,refProps,tagButton=='button'?buttonProps:divProps)});}function useAccordion(_ref58){var _initialIndex;var{accordionParameters:{initialIndex,localStorageKey},linearNavigationParameters:{disableArrowKeys,disableHomeEndKeys,navigationDirection,navigatePastEnd,navigatePastStart,pageNavigationSize},managedChildrenParameters:{onAfterChildLayoutEffect,onChildrenMountChange}}=_ref58;debugLog("useAccordian");//const [_currentFocusedIndex, setCurrentFocusedIndex, getCurrentFocusedIndex] = useState<number | null>(null);
var[localStorageIndex,setLocalStorageIndex]=usePersistentState(localStorageKey!==null&&localStorageKey!==void 0?localStorageKey:null,(_initialIndex=initialIndex)!==null&&_initialIndex!==void 0?_initialIndex:null);if(localStorageIndex!=null)initialIndex=localStorageIndex;var mcReturnType=useManagedChildren({managedChildrenParameters:{onChildrenMountChange:useStableCallback((m,u)=>{ocmc2();onChildrenMountChange===null||onChildrenMountChange===void 0?void 0:onChildrenMountChange(m,u);}),onAfterChildLayoutEffect}});var{managedChildrenReturn:{getChildren},context}=mcReturnType;var isValid=T$1(c=>!c.disabled&&!c.hidden,[]);var isValid2=T$1(c=>{var child=getChildren().getAt(c);if(child){return isValid(child);}return false;},[]);var{changeIndex:changeExpandedIndexLocalOnly,getCurrentIndex:getCurrentExpandedIndex}=useChildrenFlag({initialIndex,getChildren,getAt:T$1(child=>{var _child$getOpenFromPar;return(_child$getOpenFromPar=child.getOpenFromParent())!==null&&_child$getOpenFromPar!==void 0?_child$getOpenFromPar:false;},[]),setAt:T$1((child,open)=>{return child.setOpenFromParent(open);},[]),isValid,onIndexChange:null,//key: "open",
closestFit:false});var{changeIndex:changeTabbedIndex,getCurrentIndex:getTabbedIndex,reevaluateClosestFit:ocmc2}=useChildrenFlag({initialIndex,getChildren,getAt:T$1(child=>{var _child$getMostRecentl;return(_child$getMostRecentl=child.getMostRecentlyTabbed())!==null&&_child$getMostRecentl!==void 0?_child$getMostRecentl:false;},[]),setAt:T$1((child,tabbed)=>{return child.setMostRecentlyTabbed(tabbed);},[]),isValid,closestFit:true,onIndexChange:T$1(i=>{if(i!=null){var _getChildren$getAt9;(_getChildren$getAt9=getChildren().getAt(i))===null||_getChildren$getAt9===void 0?void 0:_getChildren$getAt9.focusSelf();}},[])});var changeExpandedIndex=useStableCallback(value=>{changeExpandedIndexLocalOnly(value);setLocalStorageIndex(value);});//const navigateAbsolute = useCallback((i: number) => { return changeTabbedIndex(i); }, []);
//const navigateRelative = useCallback((s: number, o: number) => { return changeTabbedIndex(o + s); }, []);
return{context:useStableObject(_objectSpread(_objectSpread({},context),{},{accordionSectionParameters:useStableObject({changeExpandedIndex,changeTabbedIndex,getExpandedIndex:getCurrentExpandedIndex,getTabbedIndex:getTabbedIndex}),linearNavigationParameters:useStableObject({disableArrowKeys,disableHomeEndKeys,getHighestIndex:T$1(()=>getChildren().getHighestIndex(),[]),indexMangler:identity,indexDemangler:identity,navigationDirection,isValid:isValid2,navigatePastEnd,navigatePastStart,pageNavigationSize}),rovingTabIndexReturn:useStableObject({getTabbableIndex:getTabbedIndex,setTabbableIndex:changeTabbedIndex})})),managedChildrenReturn:mcReturnType.managedChildrenReturn,accordionReturn:useStableObject({changeExpandedIndex})};}function identity(t){return t;}function useAccordionSection(_ref59){var _ref60;var{buttonParameters,pressParameters:{exclude},accordionSectionParameters:{open:openFromUser,bodyRole},managedChildParameters:{index},rovingTabIndexChildParameters:{hidden},//managedChildContext,
context,context:{accordionSectionParameters:{changeExpandedIndex,changeTabbedIndex:_setCurrentFocusedIndex,getTabbedIndex:getCurrentFocusedIndex},linearNavigationParameters,rovingTabIndexReturn},refElementParameters}=_ref59;var{disabled,onPress:userOnPress}=buttonParameters;debugLog("useAccordianSection");var[openFromParent,setOpenFromParent,getOpenFromParent]=useState(null);var[mostRecentlyTabbed,setMostRecentlyTabbed,getMostRecentlyTabbed]=useState(null);var{randomIdReturn:_bodyIdReturn,propsSource:propsBodySource,propsReferencer:propsHeadReferencer}=useRandomId({randomIdParameters:{prefix:Prefices.accordionSectionHeaderButton,otherReferencerProp:"aria-controls"}});var{randomIdReturn:_headIdReturn,propsSource:propsHeadSource,propsReferencer:propsBodyReferencer}=useRandomId({randomIdParameters:{prefix:Prefices.accordionSectionBody,otherReferencerProp:"aria-labelledby"}});//const { randomIdSourceReturn: { propsStable: useBodyAsSourceIdProps } } = useBodyAsSourceId();
//const { randomIdReferencerReturn: { propsStable: useBodyAsReferencerIdProps } } = useBodyAsReferencerId<BodyElement>({ randomIdReferencerParameters: { otherReferencerProp: "aria-controls" as never } });
//const { randomIdSourceReturn: { propsStable: useHeaderAsSourceIdProps } } = useHeaderAsSourceId();
//const { randomIdReferencerReturn: { propsStable: useHeaderAsReferencerIdProps } } = useHeaderAsReferencerId<HeaderElement>({ randomIdReferencerParameters: { otherReferencerProp: "aria-labelledby" as never } });
var open=(_ref60=openFromUser!==null&&openFromUser!==void 0?openFromUser:openFromParent)!==null&&_ref60!==void 0?_ref60:false;//const getOpen = useStableGetter(!!open);
useStableGetter(index);var{refElementReturn:{getElement:getHeaderElement,propsStable:headerRefElementProps}}=useRefElement({refElementParameters:{}});var{refElementReturn:{getElement:_getBodyElement,propsStable:bodyRefElementProps}}=useRefElement({refElementParameters:{}});var focusSelf=T$1(()=>{var _getHeaderElement;//if (getCurrentFocusedIndex() != null)
(_getHeaderElement=getHeaderElement())===null||_getHeaderElement===void 0?void 0:_getHeaderElement.focus();},[]);/*const openRef = useRef({
                get: () => !!getOpenFromParent(),
                set: (open: boolean) => {
                    setOpenFromParent(open);

                    if (open) {
                        const bodyElement = getBodyElement();
                        setCurrentFocusedIndex(getIndex());
                        if (bodyElement) {
                            queueMicrotask(() => bodyElement.focus());
                    }
                }
                },
                isValid: returnTrue
            });
            const tabbedRef = useRef({
                get: () => (getCurrentFocusedIndex() == getIndex()),
                set: (open: boolean) => {
                    if (open)
                        setCurrentFocusedIndex(getIndex());
                },
                isValid: returnTrue
        });*/useManagedChild({context,managedChildParameters:{index:index}},{index,disabled,focusSelf,getMostRecentlyTabbed,getOpenFromParent,hidden,setMostRecentlyTabbed,setOpenFromParent});//const onFocus = () => { changeTabbedIndex(index); }
var onPress=e=>{if(getOpenFromParent())changeExpandedIndex(null);else changeExpandedIndex(index);userOnPress===null||userOnPress===void 0?void 0:userOnPress(e);};var{pressReturn,props:buttonProps,refElementReturn}=useButton({buttonParameters:_objectSpread(_objectSpread({},buttonParameters),{},{pressed:null,onPress,role:"button"}),pressParameters:{exclude},refElementParameters});var linearReturnType=useLinearNavigation({linearNavigationParameters,rovingTabIndexReturn});var{linearNavigationReturn:{propsStable}}=linearReturnType;/*function useAccordionSectionHeaderProps({ ["aria-expanded"]: ariaExpanded, ["aria-disabled"]: ariaDisabled, ...props }: h.JSX.HTMLAttributes<HeaderElement>): h.JSX.HTMLAttributes<HeaderElement> {

                props.tabIndex = 0;


                return useMergedProps(useHeaderAsSourceIdProps, useHeaderAsReferencerIdProps, propsStable, {
                    "aria-expanded": (ariaExpanded ?? open ?? false).toString(),
                    "aria-disabled": (ariaDisabled ?? (open ? "true" : undefined)),
                    ...useMergedProps(headerRefElementProps, useButtonProps(props))
                } as h.JSX.HTMLAttributes<HeaderElement>);
            }


            function useAccordionSectionBodyProps({ role, ...props }: h.JSX.HTMLAttributes<BodyElement>): h.JSX.HTMLAttributes<BodyElement> {
                const ret1 = useMergedProps(useBodyAsReferencerIdProps, { role: role ?? "region", ...props });
                const ret2 = useMergedProps(useBodyAsSourceIdProps, ret1);
                ret2.tabIndex ??= -1;
                return useMergedProps(bodyRefElementProps, ret2);
        }*/var headerButtonProps=useMergedProps(buttonProps,headerRefElementProps,propsHeadReferencer,propsHeadSource,propsStable,{"aria-expanded":(open!==null&&open!==void 0?open:false).toString()});var bodyProps=useMergedProps(bodyRefElementProps,propsBodyReferencer,propsBodySource,{role:bodyRole,tabIndex:-1});return{pressReturn,refElementReturn,accordionSectionReturn:{mostRecentlyTabbed:!!mostRecentlyTabbed,expanded:open,focused:getCurrentFocusedIndex()==index},propsHeaderButton:headerButtonProps,propsHeader:{},propsBody:bodyProps};}function useLabel(_ref61){var{randomIdInputParameters,randomIdLabelParameters,labelParameters:{tagInput,tagLabel,ariaLabel,labelPosition,onLabelClick}}=_ref61;var nativeHTMLBehavior=tagInput=="input"&&tagLabel=="label"&&labelPosition!="wrapping";var synthetic=!nativeHTMLBehavior;var{propsInput,propsLabel,randomIdInputReturn,randomIdLabelReturn}=useRandomDualIds({randomIdInputParameters:_objectSpread(_objectSpread({},randomIdInputParameters),{},{otherReferencerProp:!synthetic&&labelPosition==="separate"?"for":null}),randomIdLabelParameters:_objectSpread(_objectSpread({},randomIdLabelParameters),{},{otherReferencerProp:synthetic?"aria-labelledby":null})});var{refElementReturn}=useRefElement({refElementParameters:{}});if(labelPosition=='none'){// When we set the aria-label, intentionally clobber element-based labels (for example, in case they don't exist).
propsInput["aria-label"]=ariaLabel;propsInput["aria-labelledby"]=undefined;propsLabel["for"]=undefined;}var{pressReturn}=usePress({pressParameters:{exclude:{enter:"exclude",space:"exclude",click:undefined},onPressSync:onLabelClick,focusSelf:noop$1},refElementReturn});//propsLabel.onClick = onLabelClick ?? undefined;
return{propsInput,propsLabel:useMergedProps(propsLabel,refElementReturn.propsStable,pressReturn.propsUnstable),randomIdInputReturn,randomIdLabelReturn};}/**
     * Shortcut for `useLabel` that assumes we're just never working with native HTML `input` and `label` elements. So for labelling guaranteably non-native elements.
     */function useLabelSynthetic(_ref62){var{labelParameters:{ariaLabel,onLabelClick},randomIdInputParameters,randomIdLabelParameters}=_ref62;return useLabel({randomIdLabelParameters,randomIdInputParameters,labelParameters:{ariaLabel,labelPosition:ariaLabel==null?"separate":"none",tagInput:"div",tagLabel:"div",onLabelClick}});}function preventDefault(e){e.preventDefault();}/**
     * Handles any component where there's:
     * 1. Some kind of an on/off binary/trinary input element that needs event handlers
     * 2. Some kind of label for that input element
     *
     * See also `useLabel` for when there's a label for a non-checkbox-like component.
     *
     * @param param0
     * @returns
     */function useCheckboxLike(_ref63){var{labelParameters,randomIdInputParameters,randomIdLabelParameters,checkboxLikeParameters:{checked,disabled,onInput:onInputSync,role},refElementInputReturn,refElementLabelReturn}=_ref63;var{getElement:getInputElement}=refElementInputReturn;var{getElement:getLabelElement}=refElementLabelReturn;var{tagInput,tagLabel,labelPosition}=labelParameters;// onClick and onChange are a bit messy, so we need to
// *always* make sure that the visible state is correct
// after all the event dust settles.
// See https://github.com/preactjs/preact/issues/2745,
// and https://github.com/preactjs/preact/issues/1899#issuecomment-525690194
h(()=>{var element=getInputElement();if(element&&tagInput=="input"){element.indeterminate=checked==="mixed";element.checked=checked===true;}},[tagInput,checked!==null&&checked!==void 0?checked:false]);var{randomIdInputReturn,randomIdLabelReturn,propsInput,propsLabel}=useLabel({labelParameters:_objectSpread(_objectSpread({},labelParameters),{},{onLabelClick:useStableCallback(e=>{if(!disabled&&tagInput!="input"&&tagLabel!="label"&&labelPosition!="separate"){focusSelf();onInputSync(e);}})}),randomIdInputParameters,randomIdLabelParameters});var focusSelf=useStableCallback(()=>{var _elementToFocus;var elementToFocus=null;if(labelPosition=="wrapping")elementToFocus=getLabelElement();else elementToFocus=getInputElement();(_elementToFocus=elementToFocus)===null||_elementToFocus===void 0?void 0:_elementToFocus.focus();});var onClickInputSync=labelPosition=="wrapping"?undefined:onInputSync;var onClickLabelSync=onInputSync;//(labelPosition != "wrapping" ? undefined : onInputSync);
var{pressReturn:pressInputReturn}=usePress({pressParameters:{exclude:{},focusSelf,onPressSync:disabled?undefined:onClickInputSync},refElementReturn:refElementInputReturn});var{pressReturn:pressLabelReturn}=usePress({pressParameters:{exclude:{},focusSelf,onPressSync:disabled?undefined:onClickLabelSync},refElementReturn:refElementLabelReturn});var propsUnstableInput={};var propsUnstableLabel={};// Make sure that label clicks can't affect the visual state of the checkbox
propsUnstableInput.onClick=preventDefault;propsUnstableLabel.onClick=preventDefault;propsUnstableInput.onInput=preventDefault;propsUnstableInput.onChange=preventDefault;propsUnstableInput.type=role=="radio"?"radio":"checkbox";switch(labelPosition){case"none":case"separate":{if(tagInput=="input"){// Even in the most default input behavior, we still need to handle
// special abstraction over checked="mixed" and disabled="soft"
propsUnstableInput.checked=checked===true;if(disabled===true||disabled==='hard')propsUnstableInput.disabled=true;else if(disabled=="soft")propsUnstableInput["aria-disabled"]="true";}else{// div inputs need their various ARIA roles and properties
propsUnstableInput.role=role;propsUnstableInput.tabIndex=0;propsUnstableInput["aria-checked"]=(checked!==null&&checked!==void 0?checked:false).toString();propsUnstableInput["aria-disabled"]=(!!disabled).toString();}break;}case"wrapping":{if(tagInput=="input"){// For form submission and styling
propsUnstableInput.checked=checked===true;propsUnstableInput.disabled=disabled===true;// Because the wrapped label handles all interactions,
// we need to make sure this element can't be interacted with
// even if it's an input element.
propsUnstableInput.inert=true;propsUnstableInput.tabIndex=-1;propsUnstableInput.role="presentation";propsUnstableInput["aria-hidden"]="true";propsUnstableInput.onFocus=_=>{var _getLabelElement,_getLabelElement$focu;return getLabelElement===null||getLabelElement===void 0?void 0:(_getLabelElement=getLabelElement())===null||_getLabelElement===void 0?void 0:(_getLabelElement$focu=_getLabelElement.focus)===null||_getLabelElement$focu===void 0?void 0:_getLabelElement$focu.call(_getLabelElement);};}// Wrapping labels are the actual inputs that are interacted with
// And are very similar conceptually to div inputs when separated
propsUnstableLabel.role=role;propsUnstableLabel.tabIndex=0;propsUnstableLabel["aria-checked"]=(checked!==null&&checked!==void 0?checked:false).toString();propsUnstableLabel["aria-disabled"]=(!!disabled).toString();break;}}return{randomIdInputReturn,randomIdLabelReturn,pressInputReturn,pressLabelReturn,checkboxLikeInputReturn:{propsUnstable:propsUnstableInput},checkboxLikeLabelReturn:{propsUnstable:propsUnstableLabel},propsInput:useMergedProps(propsInput,propsUnstableInput,pressInputReturn.propsUnstable,refElementInputReturn.propsStable),propsLabel:useMergedProps(propsLabel,propsUnstableLabel,pressLabelReturn.propsUnstable,refElementLabelReturn.propsStable),checkboxLikeReturn:{focusSelf}};}function useCheckbox(_ref64){var{checkboxParameters:{onCheckedChange},checkboxLikeParameters,labelParameters,refElementInputReturn,refElementLabelReturn}=_ref64;debugLog("useCheckbox");var{tagInput,labelPosition}=labelParameters;var{checked}=checkboxLikeParameters;var onInputEnhanced=useStableCallback(e=>onCheckedChange===null||onCheckedChange===void 0?void 0:onCheckedChange(enhanceEvent(e,{checked:!checked})));var{pressInputReturn,pressLabelReturn,randomIdInputReturn,randomIdLabelReturn,propsInput,propsLabel,checkboxLikeReturn,checkboxLikeInputReturn,checkboxLikeLabelReturn}=useCheckboxLike({randomIdInputParameters:{prefix:Prefices.checkboxLikeInput},randomIdLabelParameters:{prefix:Prefices.checkboxLikeLabel},refElementInputReturn,refElementLabelReturn,checkboxLikeParameters:_objectSpread({role:"checkbox",onInput:onInputEnhanced},checkboxLikeParameters),labelParameters});return{checkboxReturn:{propsUnstable:{type:tagInput=="input"&&labelPosition!="wrapping"?"checkbox":undefined}},checkboxLikeReturn,pressInputReturn,pressLabelReturn,randomIdInputReturn,randomIdLabelReturn,propsInput,propsLabel,checkboxLikeInputReturn,checkboxLikeLabelReturn};}/**
     *
     *
     * @param param0
     * @returns
     */function useCheckboxGroup(_ref65){var{linearNavigationParameters,rearrangeableChildrenParameters,sortableChildrenParameters,rovingTabIndexParameters,typeaheadNavigationParameters,staggeredChildrenParameters}=_ref65;debugLog("useCheckboxGroup");//const onUpdateChildren = useStableCallback(onUpdateChildrenUnstable ?? (() => {}));
var{childrenHaveFocusReturn,context,linearNavigationReturn,managedChildrenReturn,props,rearrangeableChildrenReturn,rovingTabIndexReturn,singleSelectionReturn,staggeredChildrenReturn,paginatedChildrenReturn,sortableChildrenReturn,typeaheadNavigationReturn}=useCompleteListNavigation({linearNavigationParameters,staggeredChildrenParameters,rearrangeableChildrenParameters,rovingTabIndexParameters,singleSelectionParameters:{initiallySelectedIndex:null,onSelectedIndexChange:null},sortableChildrenParameters,paginatedChildrenParameters:{paginationMax:null,paginationMin:null},typeaheadNavigationParameters});var{getChildren}=managedChildrenReturn;var children=getChildren();//const [uncheckedCount, setUnheckedCount] = useState(0);
// Keep track of all child IDs, and any time any of them change, 
// generate a new string with all of them concatenated together
// (but only once per render);
var allIds=_(new Set());var updateParentControlIds=useStableCallback(setter=>{setter===null||setter===void 0?void 0:setter(Array.from(allIds.current).join(" "));});var[getSetter,setSetter]=usePassiveState(updateParentControlIds,returnNull);var[_getUpdateIndex,setUpdateIndex]=usePassiveState(useStableCallback(()=>{updateParentControlIds(getSetter());}),returnZero);// Lots of machenery to track what total percentage of all checkboxes are checked,
// and notifying the parent checkbox of this information (while re-rendering as little as possible)
var getSelfIsChecked=T$1(percentChecked=>{return percentChecked<=0?false:percentChecked>=1?true:"mixed";},[]);var onAnyChildCheckedUpdate=useStableCallback((setter,percentChecked)=>{setter===null||setter===void 0?void 0:setter(getSelfIsChecked(percentChecked));});var[getTotalChildren,setTotalChildren]=usePassiveState(T$1(totalChildren=>{onAnyChildCheckedUpdate(getSetParentCheckboxChecked(),getPercentChecked(getTotalChecked(),totalChildren));},[]),returnZero);var[getTotalChecked,setTotalChecked]=usePassiveState(T$1(totalChecked=>{onAnyChildCheckedUpdate(getSetParentCheckboxChecked(),getPercentChecked(totalChecked,getTotalChildren()));},[]),returnZero);var getPercentChecked=T$1((totalChecked,totalChildren)=>{if(totalChildren>0)return totalChecked/totalChildren;else return totalChecked==0?0:1;},[]);var[getSetParentCheckboxChecked,setSetParentCheckboxChecked]=usePassiveState(useStableCallback(setter=>{onAnyChildCheckedUpdate(setter,getPercentChecked(getTotalChecked(),getTotalChildren()));}));var onCheckboxGroupParentInput=T$1(/*#__PURE__*/function(){var _ref66=_asyncToGenerator(function*(e){e.preventDefault();var selfIsChecked=getSelfIsChecked(getPercentChecked(getTotalChecked(),getTotalChildren()));var nextChecked=selfIsChecked===false?"mixed":selfIsChecked==="mixed"?true:false;var willChangeAny=false;var promises=[];children.forEach(child=>{if(child.checkboxInfo.checkboxChildType=="child")willChangeAny||(willChangeAny=child.checkboxInfo.getChecked()!=child.checkboxInfo.getLastUserChecked());});children.forEach(child=>{if(child.checkboxInfo.checkboxChildType=="child"){var prevChecked=child.checkboxInfo.getChecked();var checked;if(nextChecked=="mixed"){if(willChangeAny)checked=child.checkboxInfo.getLastUserChecked();else checked=true;}else{checked=nextChecked;}if(checked!=prevChecked){var promise=child.checkboxInfo.setCheckedFromParentInput(checked,e);if(promise){promises.push(promise);}}}});yield Promise.all(promises);});return function(_x2){return _ref66.apply(this,arguments);};}(),[]);return{linearNavigationReturn,context:useStableObject(_objectSpread(_objectSpread({},context),{},{checkboxGroupChildrenContext:useStableObject({setUpdateIndex,allIds:allIds.current,setTotalChecked,setTotalChildren}),checkboxGroupParentContext:useStableObject({setSetter,setSetParentCheckboxChecked,getPercentChecked,getTotalChecked,getTotalChildren,onCheckboxGroupParentInput})})),childrenHaveFocusReturn,props,staggeredChildrenReturn,paginatedChildrenReturn,rearrangeableChildrenReturn,singleSelectionReturn,sortableChildrenReturn,managedChildrenReturn,rovingTabIndexReturn,typeaheadNavigationReturn/*checkboxGroup: {
                parentIsChecked: getSelfIsCheckedUnstable() as boolean | "mixed",
                parentPercentChecked: (checkedCount / (children.getHighestIndex() + 1)),
            }*/};}// If the user has changed the parent checkbox's value, then this ref holds a memory of what values were held before.
// Otherwise, it's null when the last input was from a child checkbox. 
//const savedCheckedValues = useRef<Map<number, boolean | "mixed"> | null>(null);
function useCheckboxGroupParent(_ref67){var{completeListNavigationChildParameters,context,managedChildParameters,pressParameters,rovingTabIndexChildParameters,textContentParameters,sortableChildParameters}=_ref67;var{checkboxGroupParentContext:{setSetter,setSetParentCheckboxChecked,getPercentChecked,getTotalChecked,getTotalChildren,onCheckboxGroupParentInput}}=context;//const focusSelf = useCallback((e: any) => (e as Element as HTMLElement).focus?.(), []);
var{hasCurrentFocusReturn,managedChildReturn,pressReturn,props,paginatedChildReturn,rovingTabIndexChildReturn,staggeredChildReturn,singleSelectionChildReturn}=useCompleteListNavigationChild({completeListNavigationChildParameters,context,managedChildParameters,pressParameters,rovingTabIndexChildParameters,sortableChildParameters,textContentParameters,// single selection isn't used because checkboxes are multiselect; "disabled" refers only to that.
singleSelectionChildParameters:{ariaPropName:null,selectionMode:"disabled",disabled:true}});var[ariaControls,setControls]=useState("");s(()=>{setSetter(()=>setControls);},[setControls]);debugLog("useCheckboxGroupParent");var[checked,setChecked]=useState(false);h(()=>{setSetParentCheckboxChecked(()=>setChecked);},[]);var checkboxGroupParentReturn={checked,onParentCheckedChange:onCheckboxGroupParentInput,getPercent:useStableCallback(()=>{return getPercentChecked(getTotalChecked(),getTotalChildren());})};return{checkboxGroupParentReturn,hasCurrentFocusReturn,managedChildReturn,staggeredChildReturn,pressReturn,props:useMergedProps({"aria-controls":ariaControls},props),rovingTabIndexChildReturn,paginatedChildReturn,singleSelectionChildReturn/*checkboxGroupParentReturn,
            hasCurrentFocusParameters,
            rovingTabIndexChildReturn,
            useCheckboxGroupParentProps: function useCheckboxGroupParentInputProps(props: h.JSX.HTMLAttributes<InputElement>): h.JSX.HTMLAttributes<InputElement> {
                return useMergedProps({ "aria-controls": ariaControls } as h.JSX.HTMLAttributes<InputElement>, props);
            }*/};}function useCheckboxGroupChild(_ref68){var{checkboxGroupChild,completeListNavigationChildParameters,context,managedChildParameters,pressParameters,textContentParameters,rovingTabIndexChildParameters,sortableChildParameters}=_ref68;var{checkboxGroupChildrenContext:{allIds,setUpdateIndex,setTotalChildren,setTotalChecked}}=context;debugLog("useCheckboxGroupChild",managedChildParameters.index);//const { checkbox: { onCheckedChange }, checkboxLike: { checked, disabled, labelPosition }, label: { tagInput, tagLabel }, hasFocusInput, hasFocusLabel } = asCheckbox;
//const { subInfo, checkboxGroupChild: { checked, focusSelf, onChangeFromParent } } = asCheckboxGroupChild;
var{checked,onChangeFromParent}=checkboxGroupChild;var getChecked=useStableGetter(checked);//labelPosition ??= "separate";
var[getLastUserChecked,setLastUserChecked]=usePassiveState(null,returnFalse);var onChildCheckedChange=useStableCallback(checked=>{setLastUserChecked(checked);});var onControlIdChanged=T$1((next,prev)=>{if(prev)allIds.delete(prev);if(next)allIds.add(next);if(!!next||!!prev){setUpdateIndex(i=>(i!==null&&i!==void 0?i:0)+1);}},[]);h(()=>{setTotalChildren(c=>(c!==null&&c!==void 0?c:0)+1);return()=>setTotalChildren(c=>(c!==null&&c!==void 0?c:0)-1);},[]);h(()=>{if(checked){setTotalChecked(c=>(c!==null&&c!==void 0?c:0)+1);return()=>setTotalChecked(c=>(c!==null&&c!==void 0?c:0)-1);}},[checked]);var{hasCurrentFocusReturn,managedChildReturn,pressReturn,props,singleSelectionChildReturn:_singleSelectionChildReturn,staggeredChildReturn,paginatedChildReturn,rovingTabIndexChildReturn}=useCompleteListNavigationChild({completeListNavigationChildParameters:_objectSpread({checkboxInfo:{checkboxChildType:"child",getLastUserChecked,getChecked,setCheckedFromParentInput:onChangeFromParent}},completeListNavigationChildParameters),context,managedChildParameters:_objectSpread({},managedChildParameters),pressParameters,rovingTabIndexChildParameters,textContentParameters,sortableChildParameters,singleSelectionChildParameters:{ariaPropName:null,selectionMode:"disabled",disabled:true}//subInfo: { type: "child", getLastUserChecked, setCheckedFromParentInput: onChangeFromParent, getChecked, subInfo },
/*listNavigationChildParameters: asCheckboxGroupChild.listNavigationChildParameters,
            managedChildParameters: asCheckboxGroupChild.managedChildParameters,
            refElementReturn: asCheckboxGroupChild.refElementReturn,
            rovingTabIndexChildParameters: { ...asCheckboxGroupChild.rovingTabIndexChildParameters, focusSelf }*/});return{checkboxGroupChild:{onChildCheckedChange,onControlIdChanged},hasCurrentFocusReturn,managedChildReturn,staggeredChildReturn,paginatedChildReturn,pressReturn,props,rovingTabIndexChildReturn//singleSelectionChildReturn
};}function useDialog(_ref69){var{dismissParameters,escapeDismissParameters,focusTrapParameters,labelParameters}=_ref69;var{focusTrapReturn,propsFocusContainer,propsPopup,propsSource,refElementPopupReturn,refElementSourceReturn}=useModal({dismissParameters:_objectSpread({closeOnLostFocus:false},dismissParameters),escapeDismissParameters,focusTrapParameters:_objectSpread({trapActive:true,onlyMoveFocus:false},focusTrapParameters)});var{propsInput,propsLabel}=useLabelSynthetic({labelParameters:_objectSpread(_objectSpread({},labelParameters),{},{onLabelClick:useStableCallback(()=>{var e=refElementPopupReturn.getElement();focusTrapParameters.focusPopup(e,()=>findFirstFocusable(e));})}),randomIdInputParameters:{prefix:Prefices.dialog},randomIdLabelParameters:{prefix:Prefices.dialogTitle}});return{focusTrapReturn,propsFocusContainer,propsDialog:useMergedProps(propsPopup,propsInput),propsSource,propsTitle:propsLabel,refElementPopupReturn,refElementSourceReturn};}function useDrawer(_ref70){var{dismissParameters,escapeDismissParameters,focusTrapParameters,labelParameters}=_ref70;var{focusTrapReturn,propsFocusContainer,propsPopup,propsSource,refElementPopupReturn,refElementSourceReturn}=useModal({dismissParameters,escapeDismissParameters,focusTrapParameters:_objectSpread({onlyMoveFocus:false},focusTrapParameters)});var{propsInput,propsLabel}=useLabelSynthetic({labelParameters:_objectSpread(_objectSpread({},labelParameters),{},{onLabelClick:useStableCallback(()=>{var e=refElementPopupReturn.getElement();focusTrapParameters.focusPopup(e,()=>findFirstFocusable(e));})}),randomIdInputParameters:{prefix:Prefices.drawer},randomIdLabelParameters:{prefix:Prefices.drawerTitle}});return{focusTrapReturn,propsFocusContainer,propsDrawer:useMergedProps(propsPopup,propsInput),propsTitle:propsLabel,propsSource,refElementPopupReturn,refElementSourceReturn};}function useGridlist(_ref71){var{linearNavigationParameters,rovingTabIndexParameters,typeaheadNavigationParameters,labelParameters,staggeredChildrenParameters,gridlistParameters:{selectionLimit,groupingType,selectedIndex,onSelectedIndexChange},gridNavigationParameters,paginatedChildrenParameters,rearrangeableChildrenParameters,sortableChildrenParameters}=_ref71;var{propsInput:propsLabelList,propsLabel:propsLabelLabel,randomIdInputReturn:{id:_gridlistId},randomIdLabelReturn:{id:_labelId}}=useLabelSynthetic({labelParameters:_objectSpread(_objectSpread({},labelParameters),{},{onLabelClick:useStableCallback(()=>{rovingTabIndexReturn.focusSelf();})}),randomIdInputParameters:{prefix:Prefices.gridlist},randomIdLabelParameters:{prefix:Prefices.gridlistLabel}});var{childrenHaveFocusReturn,context,linearNavigationReturn,managedChildrenReturn,props,rovingTabIndexReturn,staggeredChildrenReturn,singleSelectionReturn,typeaheadNavigationReturn,rearrangeableChildrenReturn,paginatedChildrenReturn,sortableChildrenReturn}=useCompleteGridNavigation({linearNavigationParameters,rovingTabIndexParameters,staggeredChildrenParameters,singleSelectionParameters:{initiallySelectedIndex:selectedIndex,onSelectedIndexChange},sortableChildrenParameters,typeaheadNavigationParameters,gridNavigationParameters,paginatedChildrenParameters,rearrangeableChildrenParameters});useSingleSelectionDeclarative({singleSelectionReturn,singleSelectionDeclarativeParameters:{selectedIndex}});var propsGridlist=useMergedProps(props,propsLabelList,{"aria-multiselectable":selectionLimit=="multi"?"true":undefined});var fullContext=useStableObject(_objectSpread(_objectSpread({},context),{},{gridlistRowContext:useStableObject({selectionLimit})}));if(groupingType=="group")propsGridlist.role="group";else if(groupingType=="with-groups"){// Intentionally clobbering all the list navigation stuff.
propsGridlist={role:"grid"};// ...actually, context too while we're at it.
fullContext=null;}else{propsGridlist.role="grid";}if(selectionLimit=="multi")console.assert(singleSelectionReturn.getSelectedIndex()==null);return{childrenHaveFocusReturn,context:fullContext,linearNavigationReturn,managedChildrenReturn,staggeredChildrenReturn,rovingTabIndexReturn,singleSelectionReturn,rearrangeableChildrenReturn,sortableChildrenReturn,typeaheadNavigationReturn,paginatedChildrenReturn,propsGridlist,propsGridlistLabel:propsLabelLabel};}function useGridlistRow(_ref72){var{rowAsChildOfGridParameters:{managedChildParameters,singleSelectionChildParameters,completeGridNavigationRowParameters,textContentParameters,rovingTabIndexChildParameters,sortableChildParameters,context:cx1,gridlistRowParameters:{selected}},rowAsParentOfCellsParameters:{linearNavigationParameters,rovingTabIndexParameters,typeaheadNavigationParameters}}=_ref72;var{gridlistRowContext:{selectionLimit}}=cx1;var{rowAsChildOfGridReturn,rowAsParentOfCellsReturn,context:cx2,hasCurrentFocusReturn,props}=useCompleteGridNavigationRow({rowAsChildOfGridParameters:{managedChildParameters,textContentParameters,singleSelectionChildParameters,completeGridNavigationRowParameters,rovingTabIndexChildParameters,sortableChildParameters,context:cx1},rowAsParentOfCellsParameters:{linearNavigationParameters:_objectSpread({},linearNavigationParameters),rovingTabIndexParameters,typeaheadNavigationParameters:_objectSpread({},typeaheadNavigationParameters)}});// `selected` should only be true/false for multi-selection
if(selectionLimit!="multi")console.assert(selected==null);props.role="option";return{rowAsChildOfGridReturn,rowAsParentOfCellsReturn,context:cx2,hasCurrentFocusReturn,props};}function useGridlistCell(p){return useCompleteGridNavigationCell(p);}/*
    export const useGridlistSection = <BodySectionElement extends Element, RowElement extends Element>({ compareRows }: UseGridlistSectionParameters) => {
        //debugLog("useGridlistSection");
        //type CRFull = UseRovingTabIndexSubInfo<RowElement, UseListNavigationSubInfo<UseGridlistRowSubInfo<CellElement, CR, CC>>>;
        const getIndex = useCallback<GetIndex<any>>((i) => i.props.index, []);


        const {
            linearNavigationParameters,
            rearrangeableChildrenReturn,
            sortableChildrenReturn
        } = useSortableChildren<BodySectionElement, GridlistRowInfo<RowElement>>({
            rearrangeableChildrenParameters: {
                getIndex,
                getHighestChildIndex,
                getValid
            },
            sortableChildrenParameters: {
                compare: (lhs, rhs) => {
                    if (lhs.locationIndex === rhs.locationIndex)
                        return compareRows(lhs.index, rhs.index);
                    return lhs.locationIndex - rhs.locationIndex;
                }
            }
        });

        const useGridlistSectionProps = (props: h.JSX.HTMLAttributes<BodySectionElement>) => {
            console.assert(props.children != null);
            overwriteWithWarning("useGridlistSection", props, "role", "rowgroup");
            return useSortableProps(props as h.JSX.HTMLAttributes<BodySectionElement> & { children: any });
        }

        return {
            useGridlistSectionProps,
            ...sortableRet
        }
    }*/ //export interface UseMenuButtonReturnTypeInfo extends UseListNavigationChildReturnTypeInfo<never> { }
/*
    export interface UseMenuSurfaceReturnTypeWithHooks<MenuSurfaceElement extends Element, MenuParentElement extends Element, MenuButtonElement extends Element> extends UseMenuSurfaceReturnTypeInfo<MenuSurfaceElement, MenuButtonElement> {
        useMenuSurfaceSentinel: <E extends Element>() => { useMenuSentinelProps: (p: h.JSX.HTMLAttributes<E>) => h.JSX.HTMLAttributes<E>; };
        useMenuSurfaceProps: (props: h.JSX.HTMLAttributes<MenuSurfaceElement>) => h.JSX.HTMLAttributes<MenuSurfaceElement>;
        useMenuSurfaceChildProps: (props: h.JSX.HTMLAttributes<MenuParentElement>) => h.JSX.HTMLAttributes<MenuParentElement>;  // NOT a menu item! This is the menu, dialog, popup, whatever actually gets the role, as opposed to the surface that listens to mouse and keyboard events
        useMenuSurfaceButtonProps: (props: h.JSX.HTMLAttributes<MenuButtonElement>) => h.JSX.HTMLAttributes<any>;

    }*/ //export interface UseMenuButtonReturnTypeWithHooks extends UseMenuButtonReturnTypeInfo { }
/**
     * A menu surface is what handles user interaction with an interactive but transient surface (like a menu or a popup).
     *
     * The keyboard (etc.) interactions are shared among a lot of widgets, and the opening button has some ARIA properties that need setting.
     *
     * Related to menus, which are a menu contained within a menu surface. Not related to menubars -- menus contain menubars, but not all menubars are contained within a menu or its surface.
     *
     */function useMenuSurface(_ref73){var{//menuSurface: { sendFocusToMenu, role }, 
dismissParameters,escapeDismissParameters,focusTrapParameters,menuSurfaceParameters:{role,surfaceId}}=_ref73;debugLog("useMenuSurface");//const { propsReferencer: propsIdTrigger, propsSource: propsIdTarget } = useRandomId<MenuTargetElement, MenuTriggerElement>({ randomIdParameters: { prefix: Prefices.menu, otherReferencerProp: "aria-controls" } });
var _useRefElement=useRefElement({refElementParameters:{onElementChange:undefined}}),{refElementReturn:{getElement:getButtonElement,propsStable:propsRefTrigger}}=_useRefElement,void4=_objectWithoutProperties(_useRefElement,_excluded59);var _useRefElement2=useRefElement({refElementParameters:{onElementChange:undefined}}),{refElementReturn:{getElement:getMenuElement,propsStable:propsRefSurface}}=_useRefElement2,void5=_objectWithoutProperties(_useRefElement2.refElementReturn,_excluded61),void6=_objectWithoutProperties(_useRefElement2,_excluded60);var{focusTrapReturn,propsFocusContainer,propsPopup,propsSource:ps2,refElementPopupReturn,refElementSourceReturn}=useModal({dismissParameters,escapeDismissParameters,focusTrapParameters:_objectSpread(_objectSpread({},focusTrapParameters),{},{onlyMoveFocus:true,trapActive:true,focusOpener:useStableCallback(()=>{var buttonElement=getButtonElement();buttonElement===null||buttonElement===void 0?void 0:buttonElement.focus();})})});var propsSurface=useMergedProps(propsRefSurface,propsPopup,propsFocusContainer);var propsTarget=useMergedProps({role,id:surfaceId});var propsTrigger=useMergedProps({"aria-expanded":dismissParameters.open.toString(),"aria-haspopup":role},propsRefTrigger,ps2,{"aria-controls":surfaceId});var propsSentinel=useFocusSentinel({focusSentinel:{sendFocusToMenu:T$1(()=>{return focusTrapParameters.focusPopup(getMenuElement(),()=>findFirstFocusable(getMenuElement()));},[]),onClose:T$1(()=>{dismissParameters.onClose("lost-focus");},[dismissParameters.onClose]),open:dismissParameters.open}});return{focusTrapReturn,propsSentinel,propsSurface,propsTarget,propsTrigger,refElementPopupReturn,refElementSourceReturn};}// A focus sentinal is a hidden but focusable element that comes at the start or end 
// of the out-of-place-focusable component that, when activated or focused over, closes the component
// (if focused within 100ms of the open prop changing, instead of
// closing, focusing the sentinel immediately asks it to focus itself).
// This exists for things like menus which can have focus but also need a way to return
// to whatever out-of-place parent they came from when naturally tabbed out of (as opposed
// to dialogs which loop back around when tabbed out of). While mouse users can click out of a menu
// and keyboard users can escape to close a menu, screen readers and other input methods 
// that don't use those two would become stuck.
function useFocusSentinel(_ref74){var{focusSentinel:{open,onClose,sendFocusToMenu}}=_ref74;debugLog("useFocusSentinel");var getSendFocusWithinMenu=useStableGetter(sendFocusToMenu);var stableOnClose=useStableCallback(onClose);var[firstSentinelIsActive,setFirstSentinelIsActive]=useState(false);useTimeout({callback:()=>{setFirstSentinelIsActive(open);},timeout:100,triggerIndex:"".concat(open,"-").concat(firstSentinelIsActive)});var onFocus=firstSentinelIsActive?()=>stableOnClose():()=>{var _getSendFocusWithinMe;return(_getSendFocusWithinMe=getSendFocusWithinMenu())===null||_getSendFocusWithinMe===void 0?void 0:_getSendFocusWithinMe();};var onClick=()=>stableOnClose();return{tabIndex:firstSentinelIsActive?0:-1,onFocus,onClick};}//export interface UseToolbarChildReturnTypeWithHooks<ChildElement extends Element, M extends UseToolbarSubInfo<ChildElement>> extends UseToolbarChildReturnTypeInfo<ChildElement, M> {
//}
/**
     * A toolbar is just a collection of widgets in an expected order and with the usual keyboard navigation stuff.
     *
     * The main difference between a toolbar and a menubar is that a menubar contains purely static menuitems,
     * but a toolbar is the more general case, being able to contain anything at all.
     * A menubar is implemented as a special case of a toolbar, and a menu is implemented as a specialized menubar
     *
     * Either way, be sure to specify the role and orientation this toolbar has (role=toolbar if you're using this as an actual toolbar).
     *
     * @param param0
     * @returns
     */function useToolbar(_ref75){var{linearNavigationParameters,toolbarParameters:{orientation,role,onSelectedIndexChange},labelParameters,singleSelectionDeclarativeParameters:{selectedIndex}}=_ref75,listNavParameters=_objectWithoutProperties(_ref75,_excluded62);var _useCompleteListNavig=useCompleteListNavigation(_objectSpread(_objectSpread({},listNavParameters),{},{singleSelectionParameters:{initiallySelectedIndex:selectedIndex,onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null},paginatedChildrenParameters:{paginationMax:null,paginationMin:null},linearNavigationParameters:_objectSpread(_objectSpread({},linearNavigationParameters),{},{navigationDirection:orientation})})),{context,props}=_useCompleteListNavig,listNavReturn=_objectWithoutProperties(_useCompleteListNavig,_excluded63);useSingleSelectionDeclarative({singleSelectionDeclarativeParameters:{selectedIndex},singleSelectionReturn:{changeSelectedIndex:listNavReturn.singleSelectionReturn.changeSelectedIndex}});var{propsInput:propsToolbar,propsLabel,randomIdInputReturn,randomIdLabelReturn}=useLabelSynthetic({labelParameters:_objectSpread(_objectSpread({},labelParameters),{},{onLabelClick:listNavReturn.rovingTabIndexReturn.focusSelf}),randomIdInputParameters:{prefix:Prefices.toolbar},randomIdLabelParameters:{prefix:Prefices.toolbarLabel}});return _objectSpread({toolbarReturn:{propsUnstable:_objectSpread(_objectSpread({},propsToolbar),{},{role:role!==null&&role!==void 0?role:undefined})},context,propsLabel,propsToolbar:useMergedProps(propsToolbar,props),randomIdInputReturn,randomIdLabelReturn},listNavReturn);}function useToolbarChild(_ref76){var listNavChildParameters=_extends({},(_objectDestructuringEmpty(_ref76),_ref76));return useCompleteListNavigationChild(_objectSpread({},listNavChildParameters));}//export type UseMenuItemProps<MenuItemElement extends Element> = (props: h.JSX.HTMLAttributes<MenuItemElement>) => h.JSX.HTMLAttributes<MenuItemElement>;
//export type UseMenuItem<MenuItemElement extends Element, M extends UseMenubarSubInfo<MenuItemElement>> = (args: UseMenuItemParameters<MenuItemElement, M>) => UseMenuItemReturnType<MenuItemElement, M>;
function useMenubar(_ref77){var{linearNavigationParameters,rearrangeableChildrenParameters,singleSelectionDeclarativeParameters,sortableChildrenParameters,rovingTabIndexParameters,typeaheadNavigationParameters,staggeredChildrenParameters,toolbarParameters,menubarParameters:{role},labelParameters}=_ref77;debugLog("useMenubar");var _useToolbar=useToolbar({linearNavigationParameters,rovingTabIndexParameters,rearrangeableChildrenParameters,sortableChildrenParameters,singleSelectionDeclarativeParameters,typeaheadNavigationParameters,staggeredChildrenParameters,toolbarParameters:_objectSpread({role},toolbarParameters),labelParameters}),{linearNavigationReturn,childrenHaveFocusReturn,context,propsLabel,propsToolbar:propsMenubar,paginatedChildrenReturn,staggeredChildrenReturn,rearrangeableChildrenReturn,sortableChildrenReturn,managedChildrenReturn,rovingTabIndexReturn,toolbarReturn,typeaheadNavigationReturn,randomIdInputReturn,randomIdLabelReturn}=_useToolbar,_rest=_objectWithoutProperties(_useToolbar,_excluded64);return{childrenHaveFocusReturn,context,propsLabel,propsMenubar,staggeredChildrenReturn,paginatedChildrenReturn,rearrangeableChildrenReturn,sortableChildrenReturn,linearNavigationReturn,managedChildrenReturn,rovingTabIndexReturn,toolbarReturn,typeaheadNavigationReturn,randomIdInputReturn,randomIdLabelReturn};}function useMenubarChild(_ref78){var{managedChildParameters,singleSelectionChildParameters,completeListNavigationChildParameters,rovingTabIndexChildParameters,sortableChildParameters,context,textContentParameters,menuItemParameters:{onPress,role}}=_ref78,pressParameters=_extends({},(_objectDestructuringEmpty(_ref78.pressParameters),_ref78.pressParameters));debugLog("useMenuItem",managedChildParameters.index);var disabled=singleSelectionChildParameters.disabled;var focusSelf=T$1(e=>{var _e$focus3;return(_e$focus3=e.focus)===null||_e$focus3===void 0?void 0:_e$focus3.call(e);},[]);var{hasCurrentFocusReturn,pressReturn,props,singleSelectionChildReturn,rovingTabIndexChildReturn,managedChildReturn,staggeredChildReturn,paginatedChildReturn}=useToolbarChild({completeListNavigationChildParameters,context,managedChildParameters,rovingTabIndexChildParameters,sortableChildParameters,textContentParameters,pressParameters:_objectSpread({focusSelf,onPressSync:e=>{var _ref79;return(_ref79=disabled?null:onPress)===null||_ref79===void 0?void 0:_ref79(enhanceEvent(e,{index:managedChildParameters.index}));}},pressParameters),singleSelectionChildParameters/*listNavigationChildParameters,
            pressParameters: {
                onClickSync: (e) => (disabled ? null : onPress)?.(enhanceEvent(e, { index: managedChildParameters.index })),
                exclude: undefined,
                focusSelf: rovingTabIndexChildParameters.focusSelf
            },
            singleSelectionChildParameters,
            typeaheadNavigationChildParameters,
            completeListNavigationChildParameters,
            managedChildParameters,
            rovingTabIndexChildParameters,
            refElementReturn,
            subInfo: { subInfo }*/});/*function useMenuItemProps(props: h.JSX.HTMLAttributes<MenuItemElement>) {
            overwriteWithWarning("useMenuItem", props, "role", role);
            return useMergedProps(pressReturn.propsStable, pressReturn.propsUnstable, props);
        }*/props.role=role;return{hasCurrentFocusReturn,pressReturn,paginatedChildReturn,props,singleSelectionChildReturn,rovingTabIndexChildReturn,staggeredChildReturn,managedChildReturn};}/*
    export interface UseMenuReturnTypeWithHooks<MenuSurfaceElement extends Element, MenuParentElement extends Element, MenuItemElement extends Element, MenuButtonElement extends Element, C, K extends string> extends UseMenuReturnTypeInfo<MenuSurfaceElement, MenuParentElement, MenuItemElement, MenuButtonElement, C, K> {
        useMenuSentinel: <E extends Element>() => { useMenuSentinelProps: (p: h.JSX.HTMLAttributes<E>) => h.JSX.HTMLAttributes<E>; };
        useMenuProps: (props: h.JSX.HTMLAttributes<MenuParentElement>) => h.JSX.HTMLAttributes<MenuParentElement>;
        useMenuSurfaceProps: (props: h.JSX.HTMLAttributes<MenuSurfaceElement>) => h.JSX.HTMLAttributes<MenuSurfaceElement>;
        useMenuButtonProps: (props: h.JSX.HTMLAttributes<MenuButtonElement>) => h.JSX.HTMLAttributes<MenuButtonElement>;
        useMenuItem: UseMenuItem<MenuItemElement, C, K>;
    }*/function useMenu(_ref80){var{dismissParameters,escapeDismissParameters,linearNavigationParameters,menuParameters:{openDirection,onOpen},menuSurfaceParameters,rearrangeableChildrenParameters,rovingTabIndexParameters,singleSelectionDeclarativeParameters,sortableChildrenParameters,toolbarParameters,staggeredChildrenParameters,typeaheadNavigationParameters,menubarParameters}=_ref80;debugLog("useMenu");var{childrenHaveFocusReturn,context,linearNavigationReturn,managedChildrenReturn,propsLabel:propsButtonAsMenuLabel,propsMenubar,rearrangeableChildrenReturn,rovingTabIndexReturn,sortableChildrenReturn,toolbarReturn,paginatedChildrenReturn,staggeredChildrenReturn,typeaheadNavigationReturn,randomIdInputReturn,randomIdLabelReturn}=useMenubar({linearNavigationParameters,rearrangeableChildrenParameters,rovingTabIndexParameters,singleSelectionDeclarativeParameters,staggeredChildrenParameters,sortableChildrenParameters,typeaheadNavigationParameters,toolbarParameters:_objectSpread({},toolbarParameters),menubarParameters:_objectSpread({role:"menu"},menubarParameters),labelParameters:{ariaLabel:null}});var onKeyDown=useStableCallback(e=>{var isOpen=dismissParameters.open;if(!isOpen){switch(e.key){case"ArrowUp":{if(openDirection=='up'){onOpen();e.preventDefault();e.stopPropagation();}break;}case"ArrowDown":{if(openDirection=='down'){onOpen();e.preventDefault();e.stopPropagation();}break;}case"ArrowLeft":{if(openDirection=='left'){onOpen();e.preventDefault();e.stopPropagation();}break;}case"ArrowRight":{if(openDirection=='right'){onOpen();e.preventDefault();e.stopPropagation();}break;}}}});var{focusTrapReturn,propsSentinel,propsSurface,propsTarget,propsTrigger,refElementPopupReturn,refElementSourceReturn}=useMenuSurface({menuSurfaceParameters:_objectSpread(_objectSpread({},menuSurfaceParameters),{},{surfaceId:randomIdInputReturn.id,role:"menu"}),dismissParameters,escapeDismissParameters,focusTrapParameters:{focusPopup:()=>{rovingTabIndexReturn.focusSelf();}}});return{childrenHaveFocusReturn,context:useStableObject(_objectSpread(_objectSpread({},context),{},{menu:useStableObject({closeFromMenuItemClicked:useStableCallback(()=>{dismissParameters.onClose("item-clicked");})})})),focusTrapReturn,linearNavigationReturn,managedChildrenReturn,staggeredChildrenReturn,paginatedChildrenReturn,propsSentinel,propsSurface,propsTarget:useMergedProps(propsTarget,propsMenubar),propsTrigger:useMergedProps({onKeyDown},propsTrigger,propsButtonAsMenuLabel),rearrangeableChildrenReturn,refElementPopupReturn,refElementSourceReturn,rovingTabIndexReturn,sortableChildrenReturn,toolbarReturn,typeaheadNavigationReturn,randomIdInputReturn,randomIdLabelReturn/*focusMenu,

            currentTypeahead,
            invalidTypeahead,

            managedChildren,*/};}function useMenuItem(p){var ret=useMenubarChild(p);return _objectSpread(_objectSpread({},ret),{},{menuItemReturn:{closeMenu:p.context.menu.closeFromMenuItemClicked}});}/*export interface UseProgressReturnTypeInfoWithHooks<I extends Element, L extends Element, C, K extends string> extends UseProgressReturnTypeInfo<C, K> {
        useProgressIndicator: UseProgressIndicator<I, C, K>;
        useProgressLabel: UseProgressLabel<L, C, K>;
        useProgressRegion: UseProgressRegion<any, C, K>;
    }*/ //type UseProgressIndicator<I extends Element> = (a: UseProgressIndicatorParameters) => { progress: { busy: boolean; }; useProgressIndicatorProps: (props: h.JSX.HTMLAttributes<I>) => h.JSX.HTMLAttributes<I> };
//type UseProgressRegion<R extends Element> = (a: UseProgressRegionParameters) => { progress: { busy: boolean; }; useProgressRegionProps: (props: h.JSX.HTMLAttributes<R>) => h.JSX.HTMLAttributes<R> };
//type UseProgressLabel<L extends Element> = (a: UseProgressLabelParameters) => { progress: { busy: boolean; }; useProgressLabelProps: (props: h.JSX.HTMLAttributes<L>) => h.JSX.HTMLAttributes<L> };
function useProgress(_ref81){var _value;var{labelParameters,progressIndicatorParameters:{max,value,valueText,tagIndicator}}=_ref81;var{propsInput,propsLabel,randomIdInputReturn,randomIdLabelReturn}=useLabelSynthetic({labelParameters:_objectSpread(_objectSpread({},labelParameters),{},{onLabelClick:null}),randomIdInputParameters:{prefix:Prefices.progressIndicator},randomIdLabelParameters:{prefix:Prefices.progressLabel}});// This isn't an input in the usual sense -- it's not tabbable.
// TODO: Make this an option in the hook itself
propsInput.tabIndex=-1;var busy=value&&value!="disabled";//value == "disabled" || !value? false : true;// (!!value);
var disabled=value=="disabled";if(typeof value!="number"){var _max;value=null;(_max=max)!==null&&_max!==void 0?_max:max=100;}var indicatorProps=tagIndicator==="progress"?{max,value:(_value=value)!==null&&_value!==void 0?_value:undefined,"aria-valuemin":"0","aria-valuenow":value==null?undefined:"".concat(value)}:{"aria-valuemin":"0","aria-valuemax":max==null?undefined:"".concat(max),"aria-valuetext":valueText==null?undefined:"".concat(valueText),"aria-valuenow":value==null?undefined:"".concat(value),role:"progressbar"};if(disabled){indicatorProps["aria-hidden"]="true";}var labelProps={"aria-hidden":!busy?"true":undefined};var regionProps={"aria-busy":busy.toString(),"aria-describedby":randomIdInputReturn.id};return{propsIndicator:useMergedProps(indicatorProps,propsInput),propsLabel:useMergedProps(labelProps,propsLabel),propsRegion:regionProps,randomIdInputReturn,randomIdLabelReturn};}function useProgressWithHandler(_ref82){var{labelParameters,progressIndicatorParameters,asyncHandlerParameters,progressWithHandlerParameters:{forciblyPending}}=_ref82;var asyncInfo=useAsyncHandler(asyncHandlerParameters);var{propsIndicator,propsLabel,propsRegion}=useProgress({labelParameters,progressIndicatorParameters:_objectSpread({max:1,value:forciblyPending||asyncInfo.pending?"indeterminate":"disabled",valueText:null},progressIndicatorParameters)});return{propsIndicator,propsLabel,propsRegion,asyncHandlerReturn:asyncInfo};}function useRadioGroup(_ref83){var{linearNavigationParameters,rearrangeableChildrenParameters,rovingTabIndexParameters,sortableChildrenParameters,typeaheadNavigationParameters,staggeredChildrenParameters,labelParameters,radioGroupParameters:{name,onSelectedValueChange,selectedValue}}=_ref83;//debugLog("useRadioGroup", selectedValue);
//const { refElementReturn: { getElement: _getGroupElement, propsStable } } = useRefElement<G>({ refElementParameters: {} });
var[selectedIndex,setSelectedIndex]=useState(null);var byName=_(new Map());/*const setSelectedValue = useCallback((value: V | null) => {
            if (value == null) {
                setSelectedIndex(null);
                return;
            }
            const newIndex = byName.current.get(value);
            setSelectedIndex(newIndex ?? null);
        }, [])*/var{propsInput:propsGroup1,propsLabel}=useLabelSynthetic({labelParameters:_objectSpread({onLabelClick:useStableCallback(()=>{rovingTabIndexReturn.focusSelf();})},labelParameters),randomIdLabelParameters:{prefix:Prefices.radioGroupLabel},randomIdInputParameters:{prefix:Prefices.radioGroup}});/*const onSelectedIndexChange = useStableCallback((newIndex: number | null) => {
            if (newIndex != null) {
                const child = managedChildrenReturn.getChildren().getAt(newIndex);
                if (child) {
                    onSelectedValueChange(child.getValue2() ?? null)
                    return;
                }
            }
            onSelectedValueChange(null);
            //onSelectedValueChange(enhanceEvent<TCE, Event, { selectedValue: V | undefined }>(e, { selectedValue: managedChildrenReturn.getChildren().getAt(newIndex)?.getValue() }));
        });*/h(()=>{var _byName$current$get;if(selectedValue!=null)singleSelectionReturn.changeSelectedIndex((_byName$current$get=byName.current.get(selectedValue))!==null&&_byName$current$get!==void 0?_byName$current$get:null);else singleSelectionReturn.changeSelectedIndex(null);},[selectedValue]);var{childrenHaveFocusReturn,context,props:propsGroup2,linearNavigationReturn,managedChildrenReturn,rearrangeableChildrenReturn,rovingTabIndexReturn,singleSelectionReturn,paginatedChildrenReturn,staggeredChildrenReturn,sortableChildrenReturn,typeaheadNavigationReturn}=useCompleteListNavigation({linearNavigationParameters,rearrangeableChildrenParameters,rovingTabIndexParameters,singleSelectionParameters:{initiallySelectedIndex:selectedIndex,onSelectedIndexChange:setSelectedIndex},sortableChildrenParameters,typeaheadNavigationParameters,staggeredChildrenParameters,paginatedChildrenParameters:{paginationMin:null,paginationMax:null}});useSingleSelectionDeclarative({singleSelectionReturn:{changeSelectedIndex:useStableCallback((s,r)=>{var next=typeof s=="function"?s(selectedIndex):s;if(next!=null){var _managedChildrenRetur;var nextValue=(_managedChildrenRetur=managedChildrenReturn.getChildren().getAt(next))===null||_managedChildrenRetur===void 0?void 0:_managedChildrenRetur.getValue2();onSelectedValueChange(nextValue,r);}else{onSelectedValueChange(null,r);}})},singleSelectionDeclarativeParameters:{selectedIndex}});var propsRadioGroup=useMergedProps(propsGroup1,propsGroup2,{role:"radiogroup"});/*useEffect(() => {
            if (selectedValue == null) {
                setSelectedIndex(null)
            }
            else {
                const selectedIndex = byName.current.get(selectedValue);
                setSelectedIndex(selectedIndex ?? null);
            }
        }, [byName, selectedValue]);*/return{propsRadioGroup,propsRadioGroupLabel:propsLabel,childrenHaveFocusReturn,context:_objectSpread(_objectSpread({},context),{},{radioContext:{name,byName:byName.current}}),staggeredChildrenReturn,linearNavigationReturn,managedChildrenReturn,radioGroupReturn:{selectedIndex},rearrangeableChildrenReturn,paginatedChildrenReturn,rovingTabIndexReturn,singleSelectionReturn,sortableChildrenReturn,typeaheadNavigationReturn};}/*export interface UseRadioReturnTypeWithHooks<I extends Element, L extends Element> extends UseRadioReturnTypeInfo<I, L> {
        useRadioInput: UseRadioInput<I>;
        useRadioLabel: UseRadioLabel<L>;
    }*/ //type UseRadioInput<I extends Element> = ({ tag }: TagSensitiveProps<I>) => { useRadioInputProps: (props: h.JSX.HTMLAttributes<I>) => h.JSX.HTMLAttributes<I>; }
//type UseRadioLabel<L extends Element> = ({ tag }: TagSensitiveProps<L>) => { useRadioLabelProps: (props: h.JSX.HTMLAttributes<L>) => h.JSX.HTMLAttributes<L>; }
//export type UseRadio<V extends string | number, I extends Element, L extends Element, C, K extends string> = (a: UseRadioParameters<V, I, L, C, K>) => UseRadioReturnTypeWithHooks<I, L>
function useRadio(_ref84){var{radioParameters:{value},checkboxLikeParameters:{disabled},completeListNavigationChildParameters,labelParameters,managedChildParameters,pressParameters,singleSelectionChildParameters,context,textContentParameters,rovingTabIndexChildParameters,sortableChildParameters}=_ref84;var index=managedChildParameters.index;debugLog("useRadio",index);var onInput=useStableCallback(e=>{singleSelectionChildReturn.setThisOneSelected(e);});var{name,byName}=context.radioContext;var{tagInput,labelPosition}=labelParameters;var getValue=useStableGetter(value);var{props:listNavigationSingleSelectionChildProps,hasCurrentFocusReturn,managedChildReturn,pressReturn,rovingTabIndexChildReturn,staggeredChildReturn,singleSelectionChildReturn,paginatedChildReturn}=useCompleteListNavigationChild({completeListNavigationChildParameters:_objectSpread({getValue2:getValue},completeListNavigationChildParameters),managedChildParameters,pressParameters,context,rovingTabIndexChildParameters,sortableChildParameters,textContentParameters,/*rovingTabIndex,
            managedChild: {
                index: managedChild.index,
                flags: managedChild.flags
            },
            hasFocus,
            subInfo: { getValue, subInfo },*/singleSelectionChildParameters:_objectSpread({selectionMode:"focus",ariaPropName:tagInput=="input"&&labelPosition!="wrapping"?null:"aria-selected"},singleSelectionChildParameters)});var{selected:checked}=singleSelectionChildReturn;var{refElementReturn:refElementInputReturn}=useRefElement({refElementParameters:{}});var{refElementReturn:refElementLabelReturn}=useRefElement({refElementParameters:{}});var{checkboxLikeInputReturn,checkboxLikeLabelReturn,pressInputReturn,pressLabelReturn,propsInput,propsLabel,randomIdInputReturn,randomIdLabelReturn,checkboxLikeReturn}=useCheckboxLike({checkboxLikeParameters:{checked:checked!==null&&checked!==void 0?checked:false,disabled,onInput:onInput,role:"radio"},labelParameters,randomIdInputParameters:{prefix:Prefices.radio},randomIdLabelParameters:{prefix:Prefices.radioLabel},refElementInputReturn,refElementLabelReturn});s(()=>{byName.set(value,index);return()=>{byName.delete(value);};},[value,index]);//const useRadioInput = () => {
if(tagInput=="input"){propsInput.name=name;propsInput.checked=checked!==null&&checked!==void 0?checked:false;propsInput.type="radio";}else{propsInput["aria-checked"]=(checked!==null&&checked!==void 0?checked:false).toString();}var propsIfInputHandlesFocus=useMergedProps(listNavigationSingleSelectionChildProps,propsInput);var propsInput2=labelPosition!="wrapping"?propsIfInputHandlesFocus:propsInput;var propsIfLabelHandlesFocus=useMergedProps(listNavigationSingleSelectionChildProps,propsLabel);var propsLabel2=labelPosition=="wrapping"?propsIfLabelHandlesFocus:propsLabel;return{checkboxLikeInputReturn,checkboxLikeLabelReturn,managedChildReturn,pressInputReturn,pressLabelReturn,propsInput:propsInput2,propsLabel:propsLabel2,randomIdInputReturn,randomIdLabelReturn,hasCurrentFocusReturn,staggeredChildReturn,rovingTabIndexChildReturn,pressReturn,singleSelectionChildReturn,checkboxLikeReturn,paginatedChildReturn};}function useSlider(_ref85){var{sliderParameters:{max,min},managedChildrenParameters}=_ref85;debugLog("useSlider");var{context,managedChildrenReturn}=useManagedChildren({managedChildrenParameters});var baseIdRef=_(null);if(baseIdRef.current===null)baseIdRef.current=generateRandomId(Prefices.sliderThumb);//const { propsReferencer, propsSource, randomIdReturn: { id: baseId } } = useRandomId<LabelElement, ThumbElement>({ randomIdParameters: { prefix: "aria-thumb-", otherReferencerProp: "aria-labelledby" } })
/*const {
            propsInput,
            propsLabel,
            randomIdInputReturn,
            randomIdLabelReturn
        } = useLabel<ThumbElement, LabelElement>({ labelParameters: { ariaLabel: null }, randomIdInputParameters, randomIdLabelParameters });*/return{context:F$1(()=>_objectSpread(_objectSpread({},context),{},{sliderContext:{min,max,baseId:baseIdRef.current}}),[min,max]),managedChildrenReturn};}function useSliderThumb(_ref86){var{managedChildParameters,context:{sliderContext:{max:maxParent,min:minParent}},sliderThumbParameters}=_ref86,context=_objectWithoutProperties(_ref86.context,_excluded65);var{index}=managedChildParameters;debugLog("useSliderThumb",managedChildParameters.index);var{managedChildReturn}=useManagedChild({managedChildParameters,context},{index});var{tag,value,max:maxOverride,min:minOverride,onValueChange,valueText,label}=sliderThumbParameters;var min=minOverride!==null&&minOverride!==void 0?minOverride:minParent;var max=maxOverride!==null&&maxOverride!==void 0?maxOverride:maxParent;var newProps=tag=="input"?{min,max,value,type:"range"}:{"aria-valuemax":"".concat(max),"aria-valuemin":"".concat(min),"aria-valuenow":"".concat(value)};newProps=_objectSpread(_objectSpread({},newProps),{},{"aria-label":label,"aria-valuetext":valueText,style:{"--range-value":"".concat(value),"--range-value-text":"".concat(valueText)}});if(tag=="input"){newProps.onInput=e=>{onValueChange===null||onValueChange===void 0?void 0:onValueChange({currentTarget:e.currentTarget,target:e.target,[EventDetail]:{value:e.currentTarget.valueAsNumber}});};}else{throw new Error("Unimplemented");}return{sliderThumbReturn:{min,max},managedChildReturn,propsSliderThumb:newProps};}function useTable(_ref87){var{labelParameters,tableParameters:{selectionLimit,tagTable}}=_ref87;var[getSortBody,setSortBody]=usePassiveState(null,returnNull);var sortQueue=_([]);var[getSortColumn,setSortColumn]=usePassiveState(T$1(a=>{sortQueue.current.push(a.column);},[]),T$1(()=>{return{column:0,direction:"ascending"};},[]));var updateSortDirection=T$1(column=>{var{column:currentColumn,direction:currentDirection}=getSortColumn();var next={column,direction:column!=currentColumn?"ascending":currentDirection=="ascending"?"descending":"ascending"};setSortColumn(next);return next;},[]);var sortByColumn=T$1(column=>{var _getSortBody;var next=updateSortDirection(column);(_getSortBody=getSortBody())===null||_getSortBody===void 0?void 0:_getSortBody();return next;},[]);//const { tagInput: tagTable } = labelParameters
var{propsInput:propsLabelList,propsLabel:propsLabelLabel}=useLabelSynthetic({labelParameters:_objectSpread(_objectSpread({},labelParameters),{},{onLabelClick:null}),randomIdInputParameters:{prefix:Prefices.table},randomIdLabelParameters:{prefix:Prefices.tableLabel}});return{propsTable:useMergedProps({role:tagTable=="table"?undefined:"grid","aria-multiselectable":selectionLimit=="multi"?"true":undefined},propsLabelList),propsLabel:propsLabelLabel,context:{tableContext:{sortByColumn,setSortBodyFunction:setSortBody,getCurrentSortColumn:getSortColumn}}};}function fuzzyCompare(lhs,rhs){if(lhs===rhs)return 0;if(lhs==null||rhs==null){if(lhs==null&&rhs!=null)return-1;if(lhs!=null&&rhs==null)return 1;if(lhs===null&&rhs===undefined)return 1;if(lhs===undefined&&rhs===null)return-1;}else{if(lhs==rhs)return 0;if(lhs<rhs)return-1;return 1;}return 0;}var naturalSectionTypes=new Set(["thead","tbody","tfoot"]);function useTableSection(_ref88){var{linearNavigationParameters,rovingTabIndexParameters,singleSelectionParameters,gridNavigationParameters,rearrangeableChildrenParameters,paginatedChildrenParameters,staggeredChildrenParameters,tableSectionParameters:{tagTableSection,location},context:{tableContext}}=_ref88;var{childrenHaveFocusReturn,context,linearNavigationReturn,managedChildrenReturn,props,rovingTabIndexReturn,singleSelectionReturn,typeaheadNavigationReturn,staggeredChildrenReturn,rearrangeableChildrenReturn,paginatedChildrenReturn,sortableChildrenReturn}=useCompleteGridNavigation({linearNavigationParameters,rovingTabIndexParameters,singleSelectionParameters,paginatedChildrenParameters,staggeredChildrenParameters,sortableChildrenParameters:{compare:T$1((lhs,rhs)=>{var _lhs$getSortValue,_rhs$getSortValue;return fuzzyCompare(lhs===null||lhs===void 0?void 0:(_lhs$getSortValue=lhs.getSortValue)===null||_lhs$getSortValue===void 0?void 0:_lhs$getSortValue.call(lhs),rhs===null||rhs===void 0?void 0:(_rhs$getSortValue=rhs.getSortValue)===null||_rhs$getSortValue===void 0?void 0:_rhs$getSortValue.call(rhs));},[])},typeaheadNavigationParameters:{noTypeahead:true,collator:null,typeaheadTimeout:Infinity},gridNavigationParameters,rearrangeableChildrenParameters});if(!naturalSectionTypes.has(tagTableSection)){props.role="rowgroup";}h(()=>{if(location=="body"){tableContext.setSortBodyFunction(()=>{var managedRows=managedChildrenReturn.getChildren();return()=>sortableChildrenReturn.sort(managedRows,tableContext.getCurrentSortColumn().direction);});}});/*const sort = useCallback((column: number) => {
            const ret = tableContext.updateSortDirection(column)
            sortableChildrenReturn.sort(managedChildrenReturn.getChildren(), ret.direction);
            return ret;
        }, [])*/return{childrenHaveFocusReturn,context:_objectSpread(_objectSpread({},context),{},{tableContext}),staggeredChildrenReturn,linearNavigationReturn,managedChildrenReturn,rovingTabIndexReturn,singleSelectionReturn,rearrangeableChildrenReturn,sortableChildrenReturn,typeaheadNavigationReturn,paginatedChildrenReturn,propsTableSection:props};}function useTableRow(_ref89){var{rowAsChildOfGridParameters:{managedChildParameters,singleSelectionChildParameters,completeGridNavigationRowParameters,rovingTabIndexChildParameters,textContentParameters,context:cx1},rowAsParentOfCellsParameters:{linearNavigationParameters,rovingTabIndexParameters},tableRowParameters:{selected}}=_ref89;var{context:cx2,hasCurrentFocusReturn,rowAsChildOfGridReturn,rowAsParentOfCellsReturn,props}=useCompleteGridNavigationRow({rowAsChildOfGridParameters:{textContentParameters,context:_objectSpread({},cx1),managedChildParameters,singleSelectionChildParameters,completeGridNavigationRowParameters,rovingTabIndexChildParameters,sortableChildParameters:{getSortValue:useStableCallback(()=>{var currentColumn=cx1.tableContext.getCurrentSortColumn().column;var currentChild=rowAsParentOfCellsReturn.managedChildrenReturn.getChildren().getAt(currentColumn!==null&&currentColumn!==void 0?currentColumn:0);var sortValue=currentChild===null||currentChild===void 0?void 0:currentChild.getSortValue();return sortValue;})}},rowAsParentOfCellsParameters:{linearNavigationParameters,rovingTabIndexParameters,typeaheadNavigationParameters:{noTypeahead:true,collator:null,typeaheadTimeout:Infinity}}});props.role="gridrow";// TODO: Unneeded?
//if (selected)
//    props[singleSelectionChildParameters.ariaPropName ?? "aria-selected"] = "true";
return{rowAsChildOfGridReturn,rowAsParentOfCellsReturn,context:_objectSpread(_objectSpread({},cx2),{},{tableContext:cx1.tableContext}),hasCurrentFocusReturn,props};}function useTableCell(_ref90){var{tableCellParameters:{tagTableCell}}=_ref90,p=_objectWithoutProperties(_ref90,_excluded66);var _useCompleteGridNavig=useCompleteGridNavigationCell(p),{props}=_useCompleteGridNavig,ret=_objectWithoutProperties(_useCompleteGridNavig,_excluded67);return _objectSpread(_objectSpread({propsFocus:props,propsCell:{role:tagTableCell!="th"&&tagTableCell!="td"?"gridcell":undefined}},ret),{},{tableCellReturn:{sortByThisColumn:useStableCallback(()=>{return p.context.tableContext.sortByColumn(p.managedChildParameters.index);},[])}});}/*
    export interface UseTableSectionSectionParameters {
        gridlistSectionParameters: {
            compareRows: (lhsIndex: number, rhsIndex: number) => number;
        }
        gridlistSectionContext: {

        }
    }*/ /*
    export const useTableSectionSection = <BodySectionElement extends Element, RowElement extends Element>({ compareRows }: UseTableSectionSectionParameters) => {
        //debugLog("useTableSectionSection");
        //type CRFull = UseRovingTabIndexSubInfo<RowElement, UseListNavigationSubInfo<UseTableRowSubInfo<CellElement, CR, CC>>>;
        const getIndex = useCallback<GetIndex<any>>((i) => i.props.index, []);


        const {
            linearNavigationParameters,
            rearrangeableChildrenReturn,
            sortableChildrenReturn
        } = useSortableChildren<BodySectionElement, TableRowInfo<RowElement>>({
            rearrangeableChildrenParameters: {
                getIndex,
                getHighestChildIndex,
                getValid
            },
            sortableChildrenParameters: {
                compare: (lhs, rhs) => {
                    if (lhs.locationIndex === rhs.locationIndex)
                        return compareRows(lhs.index, rhs.index);
                    return lhs.locationIndex - rhs.locationIndex;
                }
            }
        });

        const useTableSectionSectionProps = (props: h.JSX.HTMLAttributes<BodySectionElement>) => {
            console.assert(props.children != null);
            overwriteWithWarning("useTableSectionSection", props, "role", "rowgroup");
            return useSortableProps(props as h.JSX.HTMLAttributes<BodySectionElement> & { children: any });
        }

        return {
            useTableSectionSectionProps,
            ...sortableRet
        }
    }*/ /*
    export function useTabs<TabListElement extends Element, TabElement extends Element, PanelElement extends Element, LabelElement extends Element>({ tabPanels: { managedChildren: { onChildrenMountChange: ocmc, ...tabPanelsManagedChildren } } }: UseTabsParameters): UseTabsReturnTypeWithHooks<TabListElement, TabElement, PanelElement, LabelElement> {
        const {
            useListNavigationSingleSelectionChild,
            useListNavigationSingleSelectionProps
        } = useListNavigationSingleSelection<TabListElement, TabElement, TabInfo, never>({
            childrenHaveFocus: {},
            linearNavigation: {},
            listNavigation: {},
            managedChildren: {},
            rovingTabIndex: {},
            singleSelection: {},
            typeaheadNavigation: {}
         });

        const useTab = useCallback(() => {}, []);
        const useTabPanel = useCallback(() => {});
        function useTabListProps(props: h.JSX.HTMLAttributes<TabListElement>) { return useListNavigationSingleSelectionProps(props); }
        function useTabLabelProps() {}

        return {

        }
        
    }*/function useTabs(_ref91){var{labelParameters,linearNavigationParameters,rearrangeableChildrenParameters,rovingTabIndexParameters,singleSelectionParameters:{onSelectedIndexChange:ssi},sortableChildrenParameters,staggeredChildrenParameters,typeaheadNavigationParameters,tabsParameters:{orientation,role,localStorageKey}// tabPanels: { managedChildren: { onChildrenMountChange: ocmc, ...tabPanelsManagedChildren } } 
}=_ref91,singleSelectionParameters=_objectWithoutProperties(_ref91.singleSelectionParameters,_excluded68);debugLog("useTabs");var[localStorageIndex,setLocalStorageIndex]=usePersistentState(localStorageKey!==null&&localStorageKey!==void 0?localStorageKey:null,0);if(localStorageIndex!=null)singleSelectionParameters.initiallySelectedIndex=localStorageIndex;var baseId=generateRandomId("aria-tabs-");//const getTabListId = useCallback(() => { return baseId + "-tab-list"; }, []);
var getTabId=T$1(index=>{return baseId+"-tab-"+index;},[]);var getPanelId=T$1(index=>{return baseId+"-panel-"+index;},[]);// Used for the panels, not the tabs in the tablist.
// Those are in useTabList itself.
var{context:managedChildContext,managedChildrenReturn:panelChildrenReturn}=useManagedChildren({managedChildrenParameters:{onChildrenMountChange:useStableCallback((_m,_u)=>{reevaluateClosestFit();})}});var{changeIndex:changeVisiblePanel,getCurrentIndex:getVisibleIndex,reevaluateClosestFit}=useChildrenFlag({getChildren:panelChildrenReturn.getChildren,closestFit:false,initialIndex:null,getAt:useStableCallback(i=>{var _i$getVisible;return(_i$getVisible=i.getVisible())!==null&&_i$getVisible!==void 0?_i$getVisible:false;/*getPanels().getAt(i)?.getVisible() ?? false)*/},[]),setAt:useStableCallback((i,b,n,p)=>{return i.setVisibleIndex(n,p);/*(getPanels().getAt(i)?.setVisible(b));*/},[]),isValid:returnTrue,onIndexChange:null});s(()=>{changeVisiblePanel(singleSelectionParameters.initiallySelectedIndex);},[]);var{propsInput,propsLabel,randomIdInputReturn:{id:_inputId},randomIdLabelReturn:{id:_labelId}}=useLabelSynthetic({labelParameters:_objectSpread(_objectSpread({},labelParameters),{},{onLabelClick:useStableCallback(()=>listNavRet1.rovingTabIndexReturn.focusSelf())}),randomIdInputParameters:{prefix:Prefices.tablist},randomIdLabelParameters:{prefix:Prefices.tablistLabel}});var _useCompleteListNavig2=useCompleteListNavigation({linearNavigationParameters:_objectSpread({navigationDirection:orientation},linearNavigationParameters),rovingTabIndexParameters,singleSelectionParameters:_objectSpread({onSelectedIndexChange:useStableCallback((i,p)=>{ssi===null||ssi===void 0?void 0:ssi(i,p);changeVisiblePanel(i);setLocalStorageIndex(i);changeSelectedIndex(i,p);})},singleSelectionParameters),typeaheadNavigationParameters,rearrangeableChildrenParameters,staggeredChildrenParameters,sortableChildrenParameters,paginatedChildrenParameters:{paginationMax:null,paginationMin:null}}),{props:listNavigationSingleSelectionProps,context}=_useCompleteListNavig2,listNavRet1=_objectWithoutProperties(_useCompleteListNavig2,_excluded69);var{singleSelectionReturn:{changeSelectedIndex}}=listNavRet1;return _objectSpread({contextPanels:useStableObject(_objectSpread(_objectSpread({},managedChildContext),{},{tabPanelContext:useStableObject({getPanelId,getTabId,getVisibleIndex,setSelectedIndex:changeSelectedIndex})})),contextTabs:useStableObject(_objectSpread(_objectSpread({},context),{},{tabsContext:useStableObject({getTabId,getPanelId,getVisibleIndex,setSelectedIndex:changeSelectedIndex})})),propsContainer:useMergedProps(listNavigationSingleSelectionProps,propsInput,{role:role!==null&&role!==void 0?role:"tablist","aria-orientation":orientation!==null&&orientation!==void 0?orientation:"horizontal"}),propsLabel},listNavRet1);}function useTab(_ref92){var{completeListNavigationChildParameters,managedChildParameters,pressParameters,textContentParameters,singleSelectionChildParameters:{selectionMode},rovingTabIndexChildParameters,sortableChildParameters,context}=_ref92,singleSelectionChildParameters=_objectWithoutProperties(_ref92.singleSelectionChildParameters,_excluded70);var _useCompleteListNavig3=useCompleteListNavigationChild({completeListNavigationChildParameters,context,managedChildParameters,rovingTabIndexChildParameters,sortableChildParameters,textContentParameters,pressParameters,singleSelectionChildParameters:_objectSpread({ariaPropName:"aria-selected",selectionMode:selectionMode!==null&&selectionMode!==void 0?selectionMode:"foucs"},singleSelectionChildParameters)}),{props:listNavigationSingleSelectionChildProps}=_useCompleteListNavig3,listNavRet2=_objectWithoutProperties(_useCompleteListNavig3,_excluded71);var{singleSelectionChildReturn:{selected},rovingTabIndexChildReturn:{tabbable}}=listNavRet2;var{getPanelId,getTabId}=context.tabsContext;var panelId=getPanelId(managedChildParameters.index);var tabId=getTabId(managedChildParameters.index);debugLog("useTab",managedChildParameters.index,selected.toString());return _objectSpread({props:useMergedProps(listNavigationSingleSelectionChildProps,{"data-tabbable":tabbable.toString(),"data-selected":selected.toString(),role:"tab","aria-controls":panelId,id:tabId})},listNavRet2);}function useTabPanel(_ref93){var{managedChildParameters,context}=_ref93;var{index}=managedChildParameters;debugLog("useTabPanel",index);var{tabPanelContext:{getVisibleIndex:g,getPanelId,getTabId}}=context;//const [correspondingTabId, setCorrespondingTabId] = useState<string | null>(null);
var[lastKnownVisibleIndex,setLastKnownVisibleIndex,getLastKnownVisibleIndex]=useState(g());var[isVisible,setIsVisible,getIsVisible]=useState(null);//const visibleRef = useRef<ChildFlagOperations>({ get: getIsVisible, set: setIsVisible, isValid: returnTrue });
useManagedChild({context,managedChildParameters:{index}},_objectSpread({getVisible:useStableCallback(()=>{return getLastKnownVisibleIndex()==index;}),setVisibleIndex:useStableCallback((newIndex,prevIndex)=>{// Similar logic is in singleSelection, but we need to duplicate it here
var changeIndex=newIndex==index?prevIndex:newIndex;if(changeIndex!=null)setLastKnownVisibleIndex(changeIndex);if(newIndex==index){setIsVisible(true);}else{setIsVisible(false);}})},managedChildParameters));var panelId=getPanelId(managedChildParameters.index);var tabId=getTabId(managedChildParameters.index);//const isVisible = (lastKnownVisibleIndex === index);
return{props:useMergedProps({role:"tabpanel","aria-labelledby":tabId,id:panelId,inert:!isVisible}),tabPanelReturn:{visibleOffset:lastKnownVisibleIndex==null?null:index-lastKnownVisibleIndex,visible:isVisible,getVisible:useStableCallback(()=>{return getLastKnownVisibleIndex()===index;})}};}function useToasts(_ref94){var{managedChildrenParameters:{onChildrenMountChange:ocmu,onAfterChildLayoutEffect},toastsParameters:{visibleCount}}=_ref94;debugLog("useToasts");// Normally, this does just look like [0, 1, 2, 3], etc
// so it could be just an index to the current toast,
// but if we dismiss toasts out of order, it's [0, 2, 3] or something.
// So just keep track of it all in a big ol', there's only one of these on a page anyway,
// and if you're pusing 10000 toasts at once an Array<number> isn't going to be your bottleneck.
var currentIndexQueue=_([]);var[politeness,setPoliteness]=useState("polite");var getMaxVisibleCount=useStableGetter(visibleCount);var{refElementReturn:{getElement,propsStable}}=useRefElement({refElementParameters:{}});var _useManagedChildren=useManagedChildren({managedChildrenParameters:{onAfterChildLayoutEffect,onChildrenMountChange:ocmu}}),{context,managedChildrenReturn}=_useManagedChildren,_childInfo=_objectWithoutProperties(_useManagedChildren,_excluded72);var{getChildren:getToastQueue}=managedChildrenReturn;var toastQueue=getToastQueue();// When a toast is shown or hidden, always make sure that we're showing all the toasts that we should be.
var showHighestPriorityToast=T$1(()=>{var max=Math.min(getMaxVisibleCount(),currentIndexQueue.current.length);for(var _i9=0;_i9<max;++_i9){var highestPriorityToast=toastQueue.getAt(currentIndexQueue.current[_i9]);console.assert(!!highestPriorityToast);highestPriorityToast===null||highestPriorityToast===void 0?void 0:highestPriorityToast.show();}},[]);// Any time a new toast mounts, update our bottommostToastIndex to point to it if necessary
// ("necessary" just meaning if it's the first toast ever or all prior toasts have been dismissed)
var onAnyToastMounted=T$1(toastIndex=>{var _toastQueue$getAt;currentIndexQueue.current.push(toastIndex);(_toastQueue$getAt=toastQueue.getAt(toastIndex))===null||_toastQueue$getAt===void 0?void 0:_toastQueue$getAt.setNumberAheadOfMe(currentIndexQueue.current.length-1);showHighestPriorityToast();},[]);// Any time a toast is dismissed, update our bottommostToastIndex to point to the next toast in the queue, if one exists.
var onAnyToastDismissed=T$1(_index=>{var _toastQueue$getAt2;// When we dismiss a toast, remove it from the "to-display" queue by actually splicing it out of the array.
// Then notify each toast of its change in position within that queue to keep the two in sync.
var removalIndex=currentIndexQueue.current.findIndex(i=>i==_index);// For all toasts that have already been dismissed, shift them even further back by one to "make space" 
// (they're removed from the queue but this is the negative index they would have if we kept negatives in the queue)
// for the newly-dismissed toast.
toastQueue.forEach(c=>{c.setNumberAheadOfMe(prev=>{if(prev<0)return prev-1;else return prev;});});// Let this toast know that it's now the most recently dismissed toast
(_toastQueue$getAt2=toastQueue.getAt(_index))===null||_toastQueue$getAt2===void 0?void 0:_toastQueue$getAt2.setNumberAheadOfMe(-1);// Notify all toasts waiting behind this one in the queue that they've moved up one slot
toastQueue.forEach(c=>{c.setNumberAheadOfMe(prev=>{if(prev>removalIndex)return prev-1;else return prev;});});// Actually modify the queue itself
currentIndexQueue.current.splice(removalIndex,1);// And after all that, make sure that we're showing any toasts that have been waiting in the queue
showHighestPriorityToast();},[]);var[_mouseOver2,setMouseOver,_getMouseOver]=useState(false);useGlobalHandler(document,"pointermove",e=>{var _getElement;var mouseOver=e.target!=null&&e.target instanceof Node&&(((_getElement=getElement())===null||_getElement===void 0?void 0:_getElement.contains(e.target))||getElement()==e.target);setMouseOver(mouseOver);});// Any time the index pointing to the currently-showing toast changes,
// update the relevant children and let them know that they're now either active or dismissed.
/*const { changeIndex, reevaluateClosestFit } = useChildrenFlag<ToastInfo, "showing">({
            initialIndex: activeToastIndex,
            children: toastQueue,
            key: "showing",
            closestFit: false,
        });
        useEffect(() => {
            changeIndex(activeToastIndex);
        }, [activeToastIndex]);*/var toastContext={onAnyToastDismissed,getMaxVisibleCount,setPoliteness,onAnyToastMounted};//function useToastContainerProps({ role, "aria-live": ariaLive, "aria-relevant": ariaRelevant, ...props }: h.JSX.HTMLAttributes<ContainerType>): h.JSX.HTMLAttributes<ContainerType> {
var props=useMergedProps(useMergedProps(propsStable,{class:"toasts-container",role:"status","aria-live":politeness!==null&&politeness!==void 0?politeness:"polite","aria-relevant":"additions"}));//}
return{context:_objectSpread(_objectSpread({},context),{},{toastContext}),managedChildrenReturn,props};}function useToast(_ref95){var{toastParameters:{politeness,timeout},managedChildParameters:{index},context}=_ref95,_managedChildParameters=_objectWithoutProperties(_ref95.managedChildParameters,_excluded73);var{getMaxVisibleCount,onAnyToastDismissed,setPoliteness,onAnyToastMounted}=context.toastContext;debugLog("useToast",index);var[numberOfToastsAheadOfUs,setNumberOfToastsAheadOfUs]=useState(Infinity);var getIndex=useStableGetter(index);var[dismissed2,setDismissed2,getDismissed2]=useState(false);var[showing2,setShowing2,getShowing2]=useState(false);//const [dismissed, setDismissed] = useState(false);
//const [status, setStatus, getStatus] = useState<"pending" | "active" | "dismissed">("pending");
//const dismissed = (status === "dismissed");
var dismiss=T$1(()=>{if(!getDismissed2())onAnyToastDismissed(getIndex());setDismissed2(true);setShowing2(false);},[]);var show=T$1(()=>{setShowing2(true);},[]);h(()=>{if(!getDismissed2()&&!getShowing2()){if(numberOfToastsAheadOfUs>=0&&numberOfToastsAheadOfUs<getMaxVisibleCount()){show();}}},[numberOfToastsAheadOfUs]);//const toastId = generateRandomId("toast-");
s(()=>{setPoliteness(politeness!==null&&politeness!==void 0?politeness:"polite");},[politeness]);var focus=T$1(()=>{var element=getElement();if(element){var _firstFocusable$focus;var firstFocusable=findFirstFocusable(element);firstFocusable===null||firstFocusable===void 0?void 0:(_firstFocusable$focus=firstFocusable.focus)===null||_firstFocusable$focus===void 0?void 0:_firstFocusable$focus.call(firstFocusable);}},[]);useManagedChild({managedChildParameters:{index},context},{index,focus,setNumberAheadOfMe:setNumberOfToastsAheadOfUs,show});//const isActive = (status === "active");
var[triggerIndex,setTriggerIndex]=useState(1);var resetDismissTimer=T$1(()=>{setTriggerIndex(i=>++i);},[]);h(()=>{onAnyToastMounted(index);},[]);/*useEffect(() => {
            if (!showing)
                onAnyToastDismissed(index)
        }, [showing]);*/var dismissTimeoutKey=timeout==null||numberOfToastsAheadOfUs!=0?null:isFinite(timeout)?timeout:timeout>0?null:0;useTimeout({timeout:dismissTimeoutKey,callback:()=>{if(showing2)dismiss();},triggerIndex:showing2?triggerIndex:false});var{refElementReturn:{getElement,propsStable}}=useRefElement({refElementParameters:{}});return{toastReturn:{dismissed:dismissed2,showing:showing2,numberOfToastsAheadOfUs,dismiss,resetDismissTimer},props:propsStable};}function useTooltip(_ref96){var _mouseoverDelay,_mouseoutToleranceDel,_focusDelay;var{tooltipParameters:{mouseoverDelay,mouseoutToleranceDelay,focusDelay,tooltipSemanticType},escapeDismissParameters}=_ref96;debugLog("useTooltip");(_mouseoverDelay=mouseoverDelay)!==null&&_mouseoverDelay!==void 0?_mouseoverDelay:mouseoverDelay=400;(_mouseoutToleranceDel=mouseoutToleranceDelay)!==null&&_mouseoutToleranceDel!==void 0?_mouseoutToleranceDel:mouseoutToleranceDelay=500;(_focusDelay=focusDelay)!==null&&_focusDelay!==void 0?_focusDelay:focusDelay=1;// The escape key should close tooltips, but do nothing else.
// (i.e. closing a tooltip in a dialog MUST NOT close the dialog too)
// TODO: Tooltips are, effectively, always the topmost component,
// so we can just have them listen to and swallow all "Escape"
// key presses before anyone else. For a more general popup,
// or a tooltip in a tooltip (!!) a different solution would be needed.
useGlobalHandler(document,"keydown",e=>{if(getOpen()&&e.key==="Escape"&&!e.defaultPrevented){e.preventDefault();e.stopImmediatePropagation();setOpen(false);setHoverState("hidden");setTriggerFocused(false);setTooltipFocused(false);setTriggerFocusedDelayCorrected(false);setTooltipFocusedDelayCorrected(false);}},{capture:true});var[open,setOpen,getOpen]=useState(false);var{propsReferencer:propsTrigger,propsSource:propsPopup}=useRandomId({randomIdParameters:{prefix:Prefices.tooltip,otherReferencerProp:tooltipSemanticType=="description"?"aria-describedby":"aria-labelledby"}});var{refElementReturn:{getElement:getTriggerElement,propsStable:triggerRefProps}}=useRefElement({refElementParameters:{}});var{refElementReturn:{getElement:getPopupElement,propsStable:popupRefProps}}=useRefElement({refElementParameters:{}});var[,setTriggerFocused]=usePassiveState(useStableCallback(focused=>{var delay=focused?focusDelay:1;if(delay!=null&&isFinite(delay)){var handle=setTimeout(()=>setTriggerFocusedDelayCorrected(focused),focused?focusDelay:1);return()=>clearTimeout(handle);}}),returnFalse);var[,setTooltipFocused]=usePassiveState(useStableCallback(focused=>{var delay=focused?focusDelay:1;if(delay!=null&&isFinite(delay)){var handle=setTimeout(()=>setTooltipFocusedDelayCorrected(focused),delay);return()=>clearTimeout(handle);}}),returnFalse);var onHoverChange=useStableCallback(function onHoverChange(hovering){if(hovering){// When we're hovering, we want to make sure, at all costs, that we
// DO NOT SHOW THE TOOLTIP WHEN NOT HOVERING.  We need to make sure that
// even when mouseleave doesn't fire for whatever dumb reason that
// the tooltip still goes away.  To do this, we use a global event handler
// that just checks for global mouse move events and sets hover from that.
var _H=e=>{var t=e.target;if(t&&t instanceof Node){var _getTriggerElement,_getPopupElement;if(!((_getTriggerElement=getTriggerElement())!==null&&_getTriggerElement!==void 0&&_getTriggerElement.contains(t))){setTriggerHover(false);}if(!((_getPopupElement=getPopupElement())!==null&&_getPopupElement!==void 0&&_getPopupElement.contains(t))){setTooltipHover(false);}}};document.addEventListener("pointermove",_H,{passive:true});switch(hoverState){case"hiding":{// We're hoving over the tooltip right after hovering away from it.
// In this case, we show it again immediately
setHoverState("shown");break;}case"hidden":{// The tooltip isn't showing and hasn't for awhile (if ever)
// Wait for our mouseover delay
setHoverState("showing2");break;//const handle = setTimeout(() => { console.log("setHoverState(shown)");  setHoverState("shown") }, mouseoverDelay);
//return () => clearTimeout(handle);
}}return()=>document.removeEventListener("pointermove",_H);}else{switch(hoverState){case"shown":{// The mouse has left the trigger, but delay truly hiding it for a moment
setHoverState("hiding");break;//const handle = setTimeout(() => { console.log("setHoverState(hidden)"); setHoverState("hidden");}, mouseoverDelay);
//return () => clearTimeout(handle);
}case"showing2":{// During a mouseover delay, when we mouseout,
// just reset the timer
setHoverState("hidden");break;}}}});var[,setTriggerHover]=usePassiveState(onHoverChange,returnFalse);var[,setTooltipHover]=usePassiveState(onHoverChange,returnFalse);var[triggerFocusedDelayCorrected,setTriggerFocusedDelayCorrected]=useState(false);var[hoverState,setHoverState]=useState("hidden");useTimeout({triggerIndex:hoverState,timeout:hoverState=="showing2"?mouseoverDelay:null,callback:()=>{if(hoverState=="showing2"){setHoverState("shown");}}});useTimeout({triggerIndex:hoverState,timeout:hoverState=="hiding"?mouseoutToleranceDelay:null,callback:()=>{if(hoverState=="hiding"){setHoverState("hidden");}}});//const [triggerHoverDelayCorrected, setTriggerHoverDelayCorrected] = useState(false);
var[tooltipFocusedDelayCorrected,setTooltipFocusedDelayCorrected]=useState(false);//const [tooltipHoverDelayCorrected, setTooltipHoverDelayCorrected] = useState(false);
var hoverDelayCorrected=hoverState=="shown";h(()=>{setOpen(triggerFocusedDelayCorrected||hoverDelayCorrected||tooltipFocusedDelayCorrected);},[triggerFocusedDelayCorrected||hoverDelayCorrected||tooltipFocusedDelayCorrected]);debugLog("useTooltipTrigger");/*useGlobalHandler(document, "pointermove", e => {
            const target = (e.target as HTMLElement);
            setTriggerHover(target == getTriggerElement() as Node || !!getTriggerElement()?.contains(target));
        }, { capture: true });

        useGlobalHandler(document, "pointermove", e => {
            const target = (e.target as HTMLElement);
            setTooltipHover(target == getPopupElement() as Node || !!getPopupElement()?.contains(target));
        }, { capture: true });*/function onTouchEnd(e){var _e$target$focus,_e$target;(_e$target$focus=(_e$target=e.target).focus)===null||_e$target$focus===void 0?void 0:_e$target$focus.call(_e$target);}var{hasCurrentFocusReturn}=useHasCurrentFocus({hasCurrentFocusParameters:{onCurrentFocusedInnerChanged:setTriggerFocused,onCurrentFocusedChanged:null},refElementReturn:{getElement:getTriggerElement}});var{refElementPopupReturn,refElementSourceReturn}=useDismiss({dismissParameters:{closeOnBackdrop:true,closeOnEscape:true,closeOnLostFocus:true,open,onClose:useStableCallback(()=>setHoverState("hidden"))},escapeDismissParameters});var debugHasFoundFocusable=_(false);h(()=>{if(debugHasFoundFocusable.current==true)return;if(open){var element=getTriggerElement();if(element){var firstTabbable=findFirstTabbable(element);if(firstTabbable){debugHasFoundFocusable.current=true;}else{var firstFocusable=findFirstFocusable(element);if(!firstFocusable)console.error("The following tooltip source is not focusable/does not contain a focusable element. If there isn't a button or other focusable element within this one, add tabIndex=0.",element);}}}},[open]);debugLog("useTooltipTooltip");var{hasCurrentFocusReturn:{propsStable:propsFocusPopup}}=useHasCurrentFocus({hasCurrentFocusParameters:{onCurrentFocusedChanged:null,onCurrentFocusedInnerChanged:useStableCallback(focused=>{setTooltipFocused(focused);})},refElementReturn:{getElement:getPopupElement}});var otherPopupProps={onPointerEnter:T$1(()=>{setTooltipHover(true);},[]),onPointerLeave:T$1(()=>{setTooltipHover(false);},[])};var otherTriggerProps={onPointerEnter:T$1(()=>{setTriggerHover(true);},[]),onPointerLeave:T$1(()=>{setTriggerHover(false);},[])};return{propsPopup:useMergedProps(popupRefProps,propsPopup,propsFocusPopup,{role:"tooltip"},otherPopupProps,refElementPopupReturn.propsStable),propsTrigger:useMergedProps(triggerRefProps,propsTrigger,hasCurrentFocusReturn.propsStable,{onTouchEnd},otherTriggerProps,refElementSourceReturn.propsStable),tooltipReturn:{isOpen:open,getIsOpen:getOpen}};}function memoForwardRef(fn){return R(k(fn));//(props: Parameters<T>[0]) => ReturnType<T>;
}var ContextDefaults={collator:B$2(null),pageNavigationSize:B$2(0.1),typeaheadTimeout:B$2(1000),noTypeahead:B$2(false),getIndex:B$2(v=>v.props.index),disableArrowKeys:B$2(false),disableHomeEndKeys:B$2(false),getWindow:B$2(()=>globalThis.window),focusOpener:B$2(e=>{var _e$focus4;return e===null||e===void 0?void 0:(_e$focus4=e.focus)===null||_e$focus4===void 0?void 0:_e$focus4.call(e);}),getText:B$2(e=>{var _e$textContent;return(_e$textContent=e===null||e===void 0?void 0:e.textContent)!==null&&_e$textContent!==void 0?_e$textContent:"";}),selectionMode:B$2("activation")};function useDefault(context,userValue){var defaultValue=q(ContextDefaults[context]);return userValue!==null&&userValue!==void 0?userValue:defaultValue;}var ParentDepthContext=B$2(0);var AccordionSectionContext=B$2(null);var Accordion=memoForwardRef(function Accordion(_ref97,ref){var{disableArrowKeys,disableHomeEndKeys,initialIndex,navigationDirection,onAfterChildLayoutEffect,onChildrenMountChange,navigatePastEnd,navigatePastStart,pageNavigationSize,localStorageKey,render}=_ref97,_rest=_objectWithoutProperties(_ref97,_excluded74);var info=useAccordion({accordionParameters:{initialIndex,localStorageKey:localStorageKey!==null&&localStorageKey!==void 0?localStorageKey:null},linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigationDirection,navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},managedChildrenParameters:{onAfterChildLayoutEffect,onChildrenMountChange}});A(ref,()=>info);return o$1(AccordionSectionContext.Provider,{value:info.context,children:render(info)});});/*
    export function defaultRenderAccordionSection<HeaderContainerElement extends Element, HeaderButtonElement extends Element, BodyElement extends Element>({ makePropsHeadingContainer, makePropsHeadingButton, makePropsBody, tagBody, tagHeadingButton }: { tagHeadingButton: ElementToTag<HeaderButtonElement>; tagBody: ElementToTag<BodyElement>; makePropsHeadingContainer(info: UseAccordionSectionReturnType<HeaderButtonElement, BodyElement>): h.JSX.HTMLAttributes<HeaderContainerElement>, makePropsHeadingButton(info: UseAccordionSectionReturnType<HeaderButtonElement, BodyElement>): h.JSX.HTMLAttributes<HeaderButtonElement>, makePropsBody(info: UseAccordionSectionReturnType<HeaderButtonElement, BodyElement>): h.JSX.HTMLAttributes<BodyElement> }) {
        return function (info: UseAccordionSectionReturnType<HeaderButtonElement, BodyElement>): VNode<any> {
            return (
                <>
                    <Heading<HeaderContainerElement> {...makePropsHeadingContainer(info)} heading={createElement(tagHeadingButton as never, (makePropsHeadingButton(info)))}>
                        {createElement(tagBody as never, (makePropsBody(info)))}
                    </Heading>
                </>
            )
        }
    }*/var AccordionSection=memoForwardRef(function AccordionSection(_ref98,ref){var{open,index,tagButton,disabled,bodyRole,onPress,exclude,hidden,render}=_ref98;var context=q(AccordionSectionContext);var info=useAccordionSection({buttonParameters:{disabled:disabled!==null&&disabled!==void 0?disabled:false,tagButton,onPress:onPress!==null&&onPress!==void 0?onPress:null},accordionSectionParameters:{open,bodyRole:bodyRole!==null&&bodyRole!==void 0?bodyRole:"region"},managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},pressParameters:{exclude},refElementParameters:{},context});A(ref,()=>info);return render(info);});/*
    export function defaultRenderButton<E extends Element>({ tagButton, propsButton }: { tagButton: ElementToTag<E>, propsButton: (info: UseButtonReturnType<E>) => h.JSX.HTMLAttributes<E> }) {
        return function (info: UseButtonReturnType<E>) {
            return createElement(tagButton as any, propsButton(info));
        }
    }*/var Button=memoForwardRef(function Button(_ref99,ref){var{tagButton,onPress,pressed,render,disabled,onElementChange,onMount,onUnmount,exclude}=_ref99;var info=useButton({buttonParameters:{role:"button",tagButton:tagButton,onPress:onPress!==null&&onPress!==void 0?onPress:null,pressed,disabled:disabled!==null&&disabled!==void 0?disabled:false},pressParameters:{exclude},refElementParameters:{onElementChange,onMount,onUnmount}});A(ref,()=>info);return render(info);});function defaultRenderCheckboxLike(_ref100){var{labelPosition,tagInput,tagLabel,makePropsInput,makePropsLabel}=_ref100;return function(info){var inputProps=makePropsInput(info);var _makePropsLabel=makePropsLabel(info),{children}=_makePropsLabel,labelProps=_objectWithoutProperties(_makePropsLabel,_excluded75);if(labelPosition=="wrapping"){//const inputProps = modifyInputProps(makeInputProps(info));
//const { children, ...labelProps } = modifyLabelProps(makeLabelProps(info));
var input=h$1(tagInput,inputProps);var label=h$1(tagLabel,_objectSpread(_objectSpread({},labelProps),{},{children:o$1(p$1,{children:[input,children]})}));return o$1(p$1,{children:label});}else if(labelPosition=="separate"){var _input=h$1(tagInput,inputProps);var _label=h$1(tagLabel,_objectSpread({children},labelProps));return o$1(p$1,{children:[_input,_label]});}else{console.assert(!!inputProps["aria-label"]);return h$1(tagInput,inputProps);}};}/*
    export interface DefaultRenderCheckboxParameters<I extends Element, L extends Element> extends DefaultRenderCheckboxLikeParameters<I, L, UseCheckboxReturnType<I, L>> { }

    export function defaultRenderCheckbox<I extends Element, L extends Element>({ labelPosition, tagInput, tagLabel, makePropsInput, makePropsLabel }: DefaultRenderCheckboxParameters<I, L>) {
        return defaultRenderCheckboxLike<I, L, UseCheckboxReturnType<I, L>>({ labelPosition, tagInput, tagLabel, makePropsInput, makePropsLabel });
    }*/var Checkbox=memoForwardRef(function Checkbox(_ref101,ref){var{checked,disabled,tagLabel,labelPosition,tagInput,ariaLabel,onCheckedChange,render}=_ref101;var{refElementReturn:refElementInputReturn}=useRefElement({refElementParameters:{}});var{refElementReturn:refElementLabelReturn}=useRefElement({refElementParameters:{}});var checkbox=useCheckbox({checkboxLikeParameters:{checked:checked!==null&&checked!==void 0?checked:false,disabled:disabled!==null&&disabled!==void 0?disabled:false},checkboxParameters:{onCheckedChange},labelParameters:{ariaLabel:ariaLabel,labelPosition,tagInput,tagLabel},refElementInputReturn,refElementLabelReturn});A(ref,()=>checkbox);return render(checkbox);});//export interface DefaultRenderCheckboxGroupChildParameters<InputElement extends Element, LabelElement extends Element, TCE extends InputElement | LabelElement> extends DefaultRenderCheckboxLikeParameters<InputElement, LabelElement, UseCheckboxGroupChildReturnType<TCE, CheckboxGroupInfo<TCE>>> { }
//export interface DefaultRenderCheckboxGroupParameters<InputType extends Element, LabelType extends Element, TCE extends InputType | LabelType> extends DefaultRenderCheckboxLikeParameters<InputType, LabelType, UseCheckboxGroupReturnType<any, TCE, CheckboxGroupInfo<TCE>>> {
//    children: ComponentChildren;
//}
/*
    export function defaultRenderCheckboxGroupChild<InputType extends Element, LabelType extends Element, TCE extends InputType | LabelType>({ tagInput, tagLabel, labelPosition, makePropsInput, makePropsLabel }: DefaultRenderCheckboxGroupChildParameters<InputType, LabelType, TCE>) {
        return function (groupInfo: UseCheckboxGroupChildReturnType<TCE, CheckboxGroupInfo<TCE>>): VNode<any> {
            return defaultRenderCheckboxLike<InputType, LabelType, UseCheckboxGroupChildReturnType<TCE, CheckboxGroupInfo<TCE>>>({ labelPosition, tagInput, tagLabel, makePropsInput, makePropsLabel })(groupInfo);
        }
    }*/ /*
    interface Foo<InputType extends Element, LabelType extends Element> extends OmitStrong<CheckboxProps<InputType, LabelType>, "checked" | "onCheckedChange"> {
        onCheckedChangeStart(): void;
        onCheckedChangeEnd(ex?: any): void;
    }

    export function defaultRenderCheckboxGroupParent<InputType extends Element, LabelType extends Element>({ render, disabled, getDocument, labelPosition, tagInput, tagLabel, getWindow, onActiveElementChange, onCheckedChangeStart, onCheckedChangeEnd, onElementChange, onFocusedChanged, onFocusedInnerChanged, onLastActiveElementChange, onLastFocusedChanged, onLastFocusedInnerChanged, onMount, onUnmount, onWindowFocusedChange }: Foo<InputType, LabelType>) {
        return function (parentInfo: UseCheckboxGroupParentReturnTypeInfo, modifyControlProps: PropModifier<any>) {
            const { checkboxGroupParent: { checked, onParentCheckedChange } } = parentInfo;
            return (
                <Checkbox<InputType, LabelType>
                    checked={checked}
                    disabled={disabled}
                    getDocument={getDocument}
                    labelPosition={labelPosition}
                    render={(info, modifyInputProps, modifyLabelProps) => {
                        if (labelPosition == "separate")
                            return render(info, (props) => modifyControlProps(modifyInputProps(props)), modifyLabelProps)
                        else
                            return render(info, modifyInputProps, (props) => modifyControlProps(modifyLabelProps(props) as any) as any)
                    }}
                    tagInput={tagInput}
                    tagLabel={tagLabel}
                    getWindow={getWindow}
                    onActiveElementChange={onActiveElementChange}
                    onCheckedChange={e => {
                        let exception: any;
                        onCheckedChangeStart();
                        (async () => {

                            try {
                                await onParentCheckedChange(e);
                            }
                            catch (ex) {
                                exception = ex;
                            }
                            finally {
                                onCheckedChangeEnd(exception);
                            }
                        }

                        )()

                    }}
                    onElementChange={onElementChange}
                    onFocusedChanged={onFocusedChanged}
                    onFocusedInnerChanged={onFocusedInnerChanged}
                    onLastActiveElementChange={onLastActiveElementChange}
                    onLastFocusedChanged={onLastFocusedChanged}
                    onLastFocusedInnerChanged={onLastFocusedInnerChanged}
                    onMount={onMount}
                    onUnmount={onUnmount}
                    onWindowFocusedChange={onWindowFocusedChange}
                />
            )
        }
    }

    export function defaultRenderCheckboxGroup<InputType extends HTMLElement, LabelType extends HTMLElement, C, K extends string>({ children, labelPosition, makeInputProps, makeLabelProps, tagInput, tagLabel }: DefaultRenderCheckboxGroupParameters<InputType, LabelType, C, K>) {
        return function (info: UseCheckboxGroupReturnTypeInfo<InputType, LabelType, C, K>, modifyInputProps: PropModifier<InputType>, modifyLabelProps: PropModifier<LabelType>): VNode<any> {
            return (
                <>
                    {defaultRenderCheckboxLike({ labelPosition, makeInputProps, makeLabelProps, tagInput, tagLabel })(info, modifyInputProps, modifyLabelProps)}
                    {children}
                </>
            )
        }
    }*/var UseCheckboxGroupChildContext=B$2(null);var CheckboxGroup=memoForwardRef(function CheckboxGroup(_ref102,ref){var{render,collator,disableArrowKeys,disableHomeEndKeys,navigationDirection,noTypeahead,typeaheadTimeout,onTabbableIndexChange,compare,staggered,getIndex,untabbable,navigatePastEnd,navigatePastStart,pageNavigationSize}=_ref102,_rest=_objectWithoutProperties(_ref102,_excluded76);var info=useCheckboxGroup({linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",navigationDirection,pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},staggeredChildrenParameters:{staggered:staggered||false},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)}});A(ref,()=>info);return o$1(UseCheckboxGroupChildContext.Provider,{value:info.context,children:render(info)});});var CheckboxGroupParent=memoForwardRef(function CheckboxGroupParent(_ref103,ref){var{render,index,focusSelf,exclude,hidden,getText,onPressSync,getSortValue}=_ref103,_rest=_objectWithoutProperties(_ref103,_excluded77);var context=q(UseCheckboxGroupChildContext);console.assert(context!=null,"This CheckboxGroupParent is not contained within a CheckboxGroup");var info=useCheckboxGroupParent({completeListNavigationChildParameters:{checkboxInfo:{checkboxChildType:"parent"}},context,managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue},pressParameters:{exclude,onPressSync,focusSelf},textContentParameters:{getText:useDefault("getText",getText)}});A(ref,()=>info);return render(info);});var CheckboxGroupChild=memoForwardRef(function CheckboxGroupChild(_ref104,ref){var{index,exclude,onPressSync,render,checked,onChangeFromParent,getSortValue,hidden,getText,focusSelf}=_ref104,_rest=_objectWithoutProperties(_ref104,_excluded78);var context=q(UseCheckboxGroupChildContext);console.assert(context!=null,"This CheckboxGroupChild is not contained within a CheckboxGroup");var info=useCheckboxGroupChild({checkboxGroupChild:{checked,onChangeFromParent},completeListNavigationChildParameters:{},textContentParameters:{getText:useDefault("getText",getText)},context,managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue},pressParameters:{exclude,onPressSync,focusSelf}});A(ref,()=>info);return render(info);});function defaultRenderPortal(_ref105){var _portalRef$current;var{portalId,children}=_ref105;var portalRef=_(null);(_portalRef$current=portalRef.current)!==null&&_portalRef$current!==void 0?_portalRef$current:portalRef.current=document.getElementById(portalId);if(portalRef.current)return j(children,portalRef.current);else return children;}/*
    export function defaultRenderModal<FocusContainerElement extends HTMLElement, DialogElement extends HTMLElement, TitleElement extends HTMLElement, BodyElement extends HTMLElement, BackdropElement extends HTMLElement, InfoType>({ portalId, tagFocusContainer, tagBackdrop, tagBody, tagDialog, tagTitle, makePropsFocusContainer, makePropsBackdrop, makePropsBody, makePropsDialog, makePropsTitle }: { portalId: string, tagFocusContainer: ElementToTag<FocusContainerElement>, tagDialog: ElementToTag<DialogElement>; tagTitle: ElementToTag<TitleElement>; tagBody: ElementToTag<BodyElement>; tagBackdrop: ElementToTag<BackdropElement>, makePropsFocusContainer: (info: InfoType) => h.JSX.HTMLAttributes<FocusContainerElement>, makePropsDialog: (info: InfoType) => h.JSX.HTMLAttributes<DialogElement>, makePropsBody: (info: InfoType) => h.JSX.HTMLAttributes<BodyElement>, makePropsTitle: (info: InfoType) => h.JSX.HTMLAttributes<TitleElement>, makePropsBackdrop: (info: InfoType) => h.JSX.HTMLAttributes<BackdropElement> }) {
        return function (dialogInfo: InfoType): VNode<any> {

            const { children: titleChildren, ...titleProps } = (makePropsTitle(dialogInfo));
            const { children: bodyChildren, ...bodyProps } = (makePropsBody(dialogInfo));
            const { children: dialogChildren, ...dialogProps } = (makePropsDialog(dialogInfo));
            const { children: backdropChildren, ...backdropProps } = (makePropsBackdrop(dialogInfo));
            const { children: focusContainerChildren, ...focusContainerProps } = (makePropsFocusContainer(dialogInfo));

            const title = createElement(tagTitle as never, titleProps, titleChildren);
            const body = createElement(tagBody as never, bodyProps, bodyChildren);
            const dialog = createElement(tagDialog as never, dialogProps, dialogChildren, title, body);

            const backdrop = createElement(tagBackdrop as never, backdropProps, backdropChildren);
            const focusContainer = createElement(tagFocusContainer as never, focusContainerProps, <div>{focusContainerChildren}{dialog}{backdrop}</div>);

            return defaultRenderPortal({
                portalId,
                children: focusContainer
            });
        }
    }*/ /*
    export function defaultRenderDialog<FocusContainerElement extends HTMLElement, DialogElement extends HTMLElement, TitleElement extends HTMLElement, BodyElement extends HTMLElement, BackdropElement extends HTMLElement>({ portalId, tagFocusContainer, tagBackdrop, tagBody, tagDialog, tagTitle, makePropsFocusContainer, makePropsBackdrop, makePropsBody, makePropsDialog, makePropsTitle }: { portalId: string, tagFocusContainer: ElementToTag<FocusContainerElement>, tagDialog: ElementToTag<DialogElement>; tagTitle: ElementToTag<TitleElement>; tagBody: ElementToTag<BodyElement>; tagBackdrop: ElementToTag<BackdropElement>, makePropsFocusContainer: (info: UseDialogReturnType<FocusContainerElement, DialogElement>) => h.JSX.HTMLAttributes<FocusContainerElement>, makePropsDialog: (info: UseDialogReturnType<FocusContainerElement, DialogElement>) => h.JSX.HTMLAttributes<DialogElement>, makePropsBody: (info: UseDialogReturnType<FocusContainerElement, DialogElement>) => h.JSX.HTMLAttributes<BodyElement>, makePropsTitle: (info: UseDialogReturnType<FocusContainerElement, DialogElement>) => h.JSX.HTMLAttributes<TitleElement>, makePropsBackdrop: (info: UseDialogReturnType<FocusContainerElement, DialogElement>) => h.JSX.HTMLAttributes<BackdropElement> }) {
        return defaultRenderModal<FocusContainerElement, DialogElement, TitleElement, BodyElement, BackdropElement, UseDialogReturnType<FocusContainerElement, DialogElement>>({ portalId, tagFocusContainer, tagBackdrop, tagBody, tagDialog, tagTitle, makePropsFocusContainer, makePropsBackdrop, makePropsBody, makePropsDialog, makePropsTitle });
    }*/var Dialog=memoForwardRef(function Dialog(_ref106,ref){var{onClose,open,closeOnBackdrop,closeOnEscape,focusOpener,getWindow,parentDepth,focusPopup,ariaLabel,render}=_ref106;var defaultParentDepth=q(ParentDepthContext);var myDepth=(parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth)+1;var info=useDialog({dismissParameters:{closeOnBackdrop:closeOnBackdrop!==null&&closeOnBackdrop!==void 0?closeOnBackdrop:true,closeOnEscape:closeOnEscape!==null&&closeOnEscape!==void 0?closeOnEscape:true,onClose,open},escapeDismissParameters:{getWindow:useDefault("getWindow",getWindow),parentDepth:parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth},focusTrapParameters:{focusOpener:useDefault("focusOpener",focusOpener),focusPopup},labelParameters:{ariaLabel}});A(ref,()=>info);return o$1(ParentDepthContext.Provider,{value:myDepth,children:render(info)});});/*
    export function defaultRenderDrawer<FocusContainerElement extends HTMLElement, DrawerElement extends HTMLElement, TitleElement extends HTMLElement, BodyElement extends HTMLElement, BackdropElement extends HTMLElement>({ portalId, tagFocusContainer, tagBackdrop, tagBody, tagDialog, tagTitle, makePropsFocusContainer, makePropsBackdrop, makePropsBody, makePropsDialog, makePropsTitle }: { portalId: string, tagFocusContainer: ElementToTag<FocusContainerElement>, tagDialog: ElementToTag<DrawerElement>; tagTitle: ElementToTag<TitleElement>; tagBody: ElementToTag<BodyElement>; tagBackdrop: ElementToTag<BackdropElement>, makePropsFocusContainer: (info: UseDrawerReturnType<FocusContainerElement, DrawerElement>) => h.JSX.HTMLAttributes<FocusContainerElement>, makePropsDialog: (info: UseDrawerReturnType<FocusContainerElement, DrawerElement>) => h.JSX.HTMLAttributes<DrawerElement>, makePropsBody: (info: UseDrawerReturnType<FocusContainerElement, DrawerElement>) => h.JSX.HTMLAttributes<BodyElement>, makePropsTitle: (info: UseDrawerReturnType<FocusContainerElement, DrawerElement>) => h.JSX.HTMLAttributes<TitleElement>, makePropsBackdrop: (info: UseDrawerReturnType<FocusContainerElement, DrawerElement>) => h.JSX.HTMLAttributes<BackdropElement> }) {
        return defaultRenderModal<FocusContainerElement, DrawerElement, TitleElement, BodyElement, BackdropElement, UseDrawerReturnType<FocusContainerElement, DrawerElement>>({ portalId, makePropsFocusContainer, makePropsBackdrop, makePropsBody, makePropsDialog, makePropsTitle, tagFocusContainer, tagBackdrop, tagBody, tagDialog, tagTitle });
    }*/memoForwardRef(function Drawer(_ref107,ref){var{closeOnBackdrop,closeOnEscape,closeOnLostFocus,focusOpener,focusPopup,getWindow,onClose,open,parentDepth,render,trapActive,ariaLabel}=_ref107;var defaultParentDepth=q(ParentDepthContext);var myDepth=(parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth)+1;var info=useDrawer({dismissParameters:{closeOnBackdrop:closeOnBackdrop!==null&&closeOnBackdrop!==void 0?closeOnBackdrop:true,closeOnEscape:closeOnEscape!==null&&closeOnEscape!==void 0?closeOnEscape:true,closeOnLostFocus:closeOnLostFocus!==null&&closeOnLostFocus!==void 0?closeOnLostFocus:true,onClose,open},escapeDismissParameters:{getWindow:useDefault("getWindow",getWindow),parentDepth:parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth},focusTrapParameters:{focusOpener:useDefault("focusOpener",focusOpener),focusPopup,trapActive:trapActive!==null&&trapActive!==void 0?trapActive:false},labelParameters:{ariaLabel}});A(ref,()=>info);return o$1(ParentDepthContext.Provider,{value:myDepth,children:render(info)});});//const LocationIndexContext = createContext(0);
//const SetManglersContext = createContext<(m: (n: number) => number, d: (n: number) => number) => void>(null!);
//const GridlistSectionContext = createContext<UseGridlistSection<any, any, any, any, any, any>>(null!);
var GridlistContext=B$2(null);var GridlistRowContext=B$2(null);var Gridlist=memoForwardRef(function GridlistU(_ref108,ref){var{collator,disableArrowKeys,disableHomeEndKeys,noTypeahead,onTabbableIndexChange,groupingType,typeaheadTimeout,selectedIndex,navigatePastEnd,navigatePastStart,onSelectedIndexChange,pageNavigationSize,selectionLimit,untabbable,paginationMax,paginationMin,staggered,compare,getIndex,onTabbableColumnChange,ariaLabel,render}=_ref108;var info=useGridlist({linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},staggeredChildrenParameters:{staggered:staggered||false},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)},/*singleSelectionParameters: {
                initiallySelectedIndex: initiallySelectedIndex ?? null,
                setSelectedIndex: setSelectedIndex ?? null
            },*/gridlistParameters:{selectionLimit,groupingType,selectedIndex,onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null},gridNavigationParameters:{onTabbableColumnChange:onTabbableColumnChange!==null&&onTabbableColumnChange!==void 0?onTabbableColumnChange:null},labelParameters:{ariaLabel},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},paginatedChildrenParameters:{paginationMax:paginationMax!==null&&paginationMax!==void 0?paginationMax:null,paginationMin:paginationMin!==null&&paginationMin!==void 0?paginationMin:null}});A(ref,()=>info);return o$1(GridlistContext.Provider,{value:info.context,children:render(info)});});/*
    export const GridlistSection = memoForwardRef(function GridlistSectionU<SectionElement extends Element, RowElement extends Element, Cellement extends Element, CR = undefined, CC = undefined, KR extends string = never>({ render, compareRows, index }: GridlistSectionProps<SectionElement, RowElement, Cellement, CR, CC, KR>, ref?: Ref<any>) {
        const { useGridlistSectionProps, ...sectionInfo } = useContext(GridlistSectionContext)//({ compareRows });
        useImperativeHandle(ref!, () => sectionInfo);
        return <LocationIndexContext.Provider value={index}>{render(sectionInfo, useGridlistSectionProps)}</LocationIndexContext.Provider>
    })*/var GridlistRow=memoForwardRef(function GridlistRowU(_ref109,ref){var{index,collator,disableArrowKeys,disableHomeEndKeys,ariaPropName,disabled,hidden,navigatePastEnd,navigatePastStart,noTypeahead,onTabbableIndexChange,selected,selectionMode,typeaheadTimeout,getSortValue,getText,render}=_ref109;var context=q(GridlistContext);console.assert(context!=null,"This GridlistRow is not contained within a Gridlist");var info=useGridlistRow({rowAsChildOfGridParameters:{completeGridNavigationRowParameters:{},context,managedChildParameters:{index},gridlistRowParameters:{selected:selected!==null&&selected!==void 0?selected:null},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue},singleSelectionChildParameters:{disabled:disabled!==null&&disabled!==void 0?disabled:false,ariaPropName,selectionMode:useDefault("selectionMode",selectionMode)},textContentParameters:{getText:useDefault("getText",getText)}},rowAsParentOfCellsParameters:{linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap"},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)}}// gridlistRowContext,
});A(ref,()=>info);return o$1(GridlistRowContext.Provider,{value:info.context,children:render(info)});});var GridlistChild=memoForwardRef(function GridlistChild(_ref110,ref){var{index,colSpan,focusSelf,hidden,getText,render}=_ref110;var context=q(GridlistRowContext);console.assert(context!=null,"This GridlistChild is not contained within a GridlistRow that is contained within a Gridlist");var defaultFocusSelf=useStableCallback(e=>{var _e$focus5;(_e$focus5=e.focus)===null||_e$focus5===void 0?void 0:_e$focus5.call(e);},[]);var info=useGridlistCell({completeGridNavigationCellParameters:{focusSelf:focusSelf!==null&&focusSelf!==void 0?focusSelf:defaultFocusSelf},context,gridNavigationCellParameters:{colSpan:colSpan!==null&&colSpan!==void 0?colSpan:1},textContentParameters:{getText:useDefault("getText",getText)},managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false}});A(ref,()=>info);return render(info);});function useListbox(_ref111){var{linearNavigationParameters,rearrangeableChildrenParameters,rovingTabIndexParameters,sortableChildrenParameters,typeaheadNavigationParameters,paginatedChildrenParameters,labelParameters,staggeredChildrenParameters,listboxParameters:{selectionLimit,groupingType,selectedIndex,onSelectedIndexChange}}=_ref111;useEnsureStability("useListbox",selectionLimit);var{propsInput:propsLabelList,propsLabel:propsLabelLabel,randomIdInputReturn:{id:_inputId},randomIdLabelReturn:{id:_labelId}}=useLabelSynthetic({labelParameters:_objectSpread(_objectSpread({},labelParameters),{},{onLabelClick:useStableCallback(()=>{rovingTabIndexReturn.focusSelf();})}),randomIdInputParameters:{prefix:Prefices.listbox},randomIdLabelParameters:{prefix:Prefices.listboxLabel}});var{childrenHaveFocusReturn,context,linearNavigationReturn,managedChildrenReturn,props,paginatedChildrenReturn,rearrangeableChildrenReturn,rovingTabIndexReturn,staggeredChildrenReturn,singleSelectionReturn,sortableChildrenReturn,typeaheadNavigationReturn}=useCompleteListNavigation({linearNavigationParameters,rearrangeableChildrenParameters,rovingTabIndexParameters,singleSelectionParameters:{initiallySelectedIndex:selectedIndex,onSelectedIndexChange},sortableChildrenParameters,paginatedChildrenParameters,typeaheadNavigationParameters,staggeredChildrenParameters});useSingleSelectionDeclarative({singleSelectionDeclarativeParameters:{selectedIndex},singleSelectionReturn:{changeSelectedIndex:singleSelectionReturn.changeSelectedIndex}});if(groupingType=="group")props.role="group";else if(groupingType=="with-groups"){// Intentionally clobbering all the list navigation stuff.
props={role:"listbox"};// ...actually, context too while we're at it.
context=null;}else{props.role="listbox";}if(selectionLimit=="multi")console.assert(singleSelectionReturn.getSelectedIndex()==null);return{childrenHaveFocusReturn,context:useStableObject(_objectSpread(_objectSpread({},context),{},{listboxContext:useStableObject({selectionLimit})})),linearNavigationReturn,paginatedChildrenReturn,managedChildrenReturn,rearrangeableChildrenReturn,staggeredChildrenReturn,rovingTabIndexReturn,singleSelectionReturn,sortableChildrenReturn,typeaheadNavigationReturn,propsListbox:useMergedProps(props,propsLabelList,{"aria-multiselectable":selectionLimit=="multi"?"true":undefined}),propsListboxLabel:propsLabelLabel};}function useListboxItem(_ref112){var{completeListNavigationChildParameters,pressParameters,context:{listboxContext:{selectionLimit}},managedChildParameters,singleSelectionChildParameters,rovingTabIndexChildParameters,sortableChildParameters,textContentParameters,listboxParameters:{selected}}=_ref112,context=_objectWithoutProperties(_ref112.context,_excluded79);var{hasCurrentFocusReturn,managedChildReturn,pressReturn,props,paginatedChildReturn,rovingTabIndexChildReturn,staggeredChildReturn,singleSelectionChildReturn}=useCompleteListNavigationChild({completeListNavigationChildParameters,textContentParameters,managedChildParameters,pressParameters,singleSelectionChildParameters,rovingTabIndexChildParameters,sortableChildParameters,context});if(selectionLimit=="single")console.assert(selected==null);props.role="option";return{hasCurrentFocusReturn,managedChildReturn,pressReturn,props,paginatedChildReturn,rovingTabIndexChildReturn,singleSelectionChildReturn,staggeredChildReturn};}/*
    export function useListboxGroup<ContainerElement extends Element, HeadingElement extends Element>() {
        const {
            propsReferencer,
            propsSource,
            randomIdReturn
        } = useRandomId<HeadingElement, ContainerElement>({ randomIdParameters: { prefix: "listbox-multi-group-", otherReferencerProp: "aria-labelledby" } });

        propsReferencer.role = "group";

        return {
            propsHeading: propsSource,
            propsContainer: propsReferencer
        }
    }*/var ListboxContext=B$2(null);var ListboxGroupContext=B$2(null);var GroupedListbox=R(function GroupedListbox(_ref113){var{ariaLabel,selectionLimit,navigationDirection,render}=_ref113;var info=useListbox({labelParameters:{ariaLabel},linearNavigationParameters:{navigatePastEnd:"passthrough",navigatePastStart:"passthrough",navigationDirection,disableArrowKeys:false,disableHomeEndKeys:true,pageNavigationSize:1},staggeredChildrenParameters:{staggered:false},paginatedChildrenParameters:{paginationMax:null,paginationMin:null},listboxParameters:{selectionLimit,groupingType:"with-groups",selectedIndex:null,onSelectedIndexChange:null},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",undefined)},rovingTabIndexParameters:{onTabbableIndexChange:null,untabbable:false},//singleSelectionParameters: { initiallySelectedIndex: initiallySelectedIndex ?? null, setSelectedIndex: setSelectedIndex ?? null },
sortableChildrenParameters:{compare:null},typeaheadNavigationParameters:{collator:null,noTypeahead:true,typeaheadTimeout:Infinity}});info.context;return o$1(ListboxGroupContext.Provider,{value:info,children:render(info)});});var Listbox=memoForwardRef(function Listbox(_ref114){var{ariaLabel,collator,compare,disableArrowKeys,disableHomeEndKeys,getIndex,selectedIndex,navigatePastEnd,navigatePastStart,navigationDirection,noTypeahead,onSelectedIndexChange,onTabbableIndexChange,staggered,pageNavigationSize,paginationMax,paginationMin,selectionLimit,untabbable,typeaheadTimeout,render}=_ref114;var listboxGroupInfo=q(ListboxGroupContext);var info=useListbox({labelParameters:{ariaLabel},staggeredChildrenParameters:{staggered:staggered||false},linearNavigationParameters:{navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",navigationDirection,disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},paginatedChildrenParameters:{paginationMax:paginationMax!==null&&paginationMax!==void 0?paginationMax:null,paginationMin:paginationMin!==null&&paginationMin!==void 0?paginationMin:null},listboxParameters:{selectionLimit,groupingType:listboxGroupInfo==null?"without-groups":"group",selectedIndex,onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},//singleSelectionParameters: { initiallySelectedIndex: initiallySelectedIndex ?? null, setSelectedIndex: setSelectedIndex ?? null },
sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)}});return o$1(ListboxContext.Provider,{value:info.context,children:render(info)});});var ListboxItem=memoForwardRef(function ListboxItem(_ref115){var{ariaPropName,disabled,exclude,focusSelf,getText,hidden,index,onPressSync,render,selected,selectionMode,getSortValue}=_ref115;var context=q(ListboxContext);console.assert(context!=null,"This ListboxItem is not contained within a Listbox");var focusSelfDefault=T$1(e=>{e===null||e===void 0?void 0:e.focus();},[]);var info=useListboxItem({completeListNavigationChildParameters:{},context,listboxParameters:{selected:selected!==null&&selected!==void 0?selected:null},managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue:getSortValue},pressParameters:{exclude,focusSelf:focusSelf!==null&&focusSelf!==void 0?focusSelf:focusSelfDefault,onPressSync},textContentParameters:{getText:useDefault("getText",getText)},singleSelectionChildParameters:{disabled:disabled!==null&&disabled!==void 0?disabled:false,ariaPropName,selectionMode:useDefault("selectionMode",selectionMode)}});return render(info);});var MenuItemContext=B$2(null);var Menu=memoForwardRef(function Menu(_ref116,ref){var{collator,disableArrowKeys,disableHomeEndKeys,noTypeahead,typeaheadTimeout,orientation,onClose,open,openDirection,onTabbableIndexChange,closeOnBackdrop,closeOnEscape,closeOnLostFocus,compare,getIndex,selectedIndex,navigatePastEnd,navigatePastStart,onSelectedIndexChange,pageNavigationSize,parentDepth,untabbable,staggered,onOpen,getWindow,render}=_ref116;var defaultParentDepth=q(ParentDepthContext);var myDepth=(parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth)+1;var info=useMenu({linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap"},staggeredChildrenParameters:{staggered:staggered||false},dismissParameters:{closeOnBackdrop:closeOnBackdrop!==null&&closeOnBackdrop!==void 0?closeOnBackdrop:true,closeOnEscape:closeOnEscape!==null&&closeOnEscape!==void 0?closeOnEscape:true,closeOnLostFocus:closeOnLostFocus!==null&&closeOnLostFocus!==void 0?closeOnLostFocus:true,onClose,open},escapeDismissParameters:{getWindow:useDefault("getWindow",getWindow),parentDepth:parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},menuParameters:{openDirection,onOpen},menuSurfaceParameters:{},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)},singleSelectionDeclarativeParameters:{selectedIndex:selectedIndex!==null&&selectedIndex!==void 0?selectedIndex:null},toolbarParameters:{orientation,onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null},menubarParameters:{}});A(ref,()=>info);//const { useMenuSentinelProps: useFirstSentinelProps } = useMenuSentinel<SentinelElement>();
//const { useMenuSentinelProps: useLastSentinelProps } = useMenuSentinel<SentinelElement>();
return o$1(ParentDepthContext.Provider,{value:myDepth,children:o$1(MenuItemContext.Provider,{value:info.context,children:render(info)})});});var MenuItem=memoForwardRef(function MenuItem(_ref117,ref){var{index,hidden,getSortValue,onPress,getText,role,exclude,ariaPropName,selectionMode,disabled,render}=_ref117;var context=q(MenuItemContext);console.assert(context!=null,"This MenuItem is not contained within a Menubar/Menu");var info=useMenuItem({completeListNavigationChildParameters:{},context,managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue},textContentParameters:{getText:useDefault("getText",getText)},menuItemParameters:{onPress:onPress!==null&&onPress!==void 0?onPress:null,role:role!==null&&role!==void 0?role:"menuitem"},pressParameters:{exclude},singleSelectionChildParameters:{ariaPropName,selectionMode,disabled:disabled!==null&&disabled!==void 0?disabled:false}});A(ref,()=>info);return o$1(p$1,{children:render(info)});});var MenubarItemContext=B$2(null);memoForwardRef(function MenubarU(_ref118,ref){var{render,collator,disableArrowKeys,disableHomeEndKeys,navigatePastEnd,navigatePastStart,pageNavigationSize,orientation,staggered,noTypeahead,onTabbableIndexChange,compare,getIndex,untabbable,selectedIndex,onSelectedIndexChange,typeaheadTimeout,role,ariaLabel}=_ref118;var info=useMenubar({linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},toolbarParameters:{orientation,onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},staggeredChildrenParameters:{staggered:staggered||false},singleSelectionDeclarativeParameters:{selectedIndex:selectedIndex!==null&&selectedIndex!==void 0?selectedIndex:null},sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},menubarParameters:{role:role!==null&&role!==void 0?role:"menubar"},labelParameters:{ariaLabel}});A(ref,()=>info);return o$1(MenubarItemContext.Provider,{value:info.context,children:render(info)});});memoForwardRef(function MenuItemU(_ref119,ref){var{index,render,ariaPropName,exclude,selectionMode,hidden,getText,disabled,onPress,getSortValue,role}=_ref119;var context=q(MenubarItemContext);console.assert(context!=null,"This MenuItem is not contained within a Menubar/Menu");var info=useMenubarChild({completeListNavigationChildParameters:{},context,managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue},textContentParameters:{getText:useDefault("getText",getText)},menuItemParameters:{onPress:onPress!==null&&onPress!==void 0?onPress:null,role:role!==null&&role!==void 0?role:"menuitem"},pressParameters:{exclude},singleSelectionChildParameters:{ariaPropName,selectionMode,disabled:disabled!==null&&disabled!==void 0?disabled:false}});A(ref,()=>info);return o$1(p$1,{children:render(info)});});memoForwardRef(function Progress(_ref120,ref){var{tagIndicator,ariaLabel,max,render,value,valueText}=_ref120;var info=useProgress({labelParameters:{ariaLabel},progressIndicatorParameters:{max:max!==null&&max!==void 0?max:100,value:value!==null&&value!==void 0?value:"indeterminate",valueText:valueText!==null&&valueText!==void 0?valueText:null,tagIndicator}});A(ref,()=>info);return render(info);});memoForwardRef(function ProgressWithHandler(_ref121,ref){var{ariaLabel,forciblyPending,render,tagIndicator,asyncHandler,capture,debounce,throttle}=_ref121;var info=useProgressWithHandler({asyncHandlerParameters:{asyncHandler,capture,debounce,throttle},labelParameters:{ariaLabel},progressIndicatorParameters:{tagIndicator},progressWithHandlerParameters:{forciblyPending:forciblyPending!==null&&forciblyPending!==void 0?forciblyPending:false}});A(ref,()=>info);return render(info);});/*
    export function DemoProgress() {
        return (
            <>
                <Progress<HTMLProgressElement, HTMLLabelElement>
                    ariaLabel={null}
                    max={100}
                    tagIndicator={"progress"}

                    value={50}
                    valueText={null}
                    render={info => {
                        return (
                            <>
                                <label {...info.propsLabel}>Progress</label>
                                <progress {...info.propsIndicator} />
                                <button {...info.propsRegion}></button>
                            </>
                        )
                    }}


                />
            </>
        )
    }
    */ /*
    export interface ProgressProps<ProgressElement extends Element, LabelElement extends Element, EventType extends Event, CaptureType, C, K extends string> extends
        Get<UseProgressWithHandlerParameters<ProgressElement, LabelElement, EventType, CaptureType>, "managedChildren">,
        Get<UseProgressWithHandlerParameters<ProgressElement, LabelElement, EventType, CaptureType>, "progress">,
        Get<UseProgressWithHandlerParameters<ProgressElement, LabelElement, EventType, CaptureType>, "asyncHandler"> {
        render(info: UseProgressWithHandlerReturnTypeInfo<EventType, CaptureType, C, K>): VNode;
    }

    export interface ProgressIndicatorProps<I extends Element, C, K extends string> extends
        Get<UseProgressIndicatorParameters<C, K, C>, "managedChild">,
        Get<UseProgressIndicatorParameters<C, K, C>, "progress"> {
        subInfo: Get<UseProgressIndicatorParameters<C, K, C>, "subInfo">;
        render(info: { progress: { busy: boolean } }, useModifiedProps: PropModifier<I>): VNode;
    }

    export interface ProgressRegionProps<I extends Element, C, K extends string> extends
        Get<UseProgressRegionParameters<C, K, C>, "managedChild"> {
        subInfo: Get<UseProgressRegionParameters<C, K, C>, "subInfo">;
        render(info: { progress: { busy: boolean } }, useModifiedProps: PropModifier<I>): VNode;
    }

    export interface ProgressLabelProps<I extends Element, C, K extends string> extends
        Get<UseProgressLabelParameters<C, K, C>, "managedChild"> {
        subInfo: Get<UseProgressLabelParameters<C, K, C>, "subInfo">;
        render(info: { progress: { busy: boolean } }, useModifiedProps: PropModifier<I>): VNode;
    }

    const IndicatorContext = createContext<UseProgressIndicator<any, any, any>>(null!);
    const RegionContext = createContext<UseProgressRegion<any, any, any>>(null!);
    const LabelContext = createContext<UseProgressLabel<any, any, any>>(null!);

    export const Progress = memoForwardRef(function Progress<ProgressElement extends Element, LabelElement extends Element, EventType extends Event, CaptureType, C = undefined, K extends string = never>({
        asyncHandler,
        capture,
        tagLabel,
        tagProgress,
        debounce,
        onAfterChildLayoutEffect,
        onChildrenMountChange,
        throttle,
        render
    }: ProgressProps<ProgressElement, LabelElement, EventType, CaptureType, C, K>, ref?: Ref<any>) {

        const { useProgressIndicator, useProgressLabel, useProgressRegion, ...info } = useProgressWithHandler<ProgressElement, LabelElement, EventType, CaptureType, C, K>({
            asyncHandler: { asyncHandler, capture, debounce, throttle },
            managedChildren: { onAfterChildLayoutEffect, onChildrenMountChange },
            progress: { tagLabel, tagProgress }
        });

        useImperativeHandle(ref!, () => info);

        return (
            <IndicatorContext.Provider value={useProgressIndicator}>
                <RegionContext.Provider value={useProgressRegion}>
                    <LabelContext.Provider value={useProgressLabel}>
                        {render(info)}
                    </LabelContext.Provider>
                </RegionContext.Provider>
            </IndicatorContext.Provider>
        )
    })

    export const ProgressIndicator = memoForwardRef(function ProgressIndicator<I extends Element, C, K extends string>({
        max,
        render,
        subInfo,
        value,
        valueText,
        flags
    }: ProgressIndicatorProps<I, C, K>, ref?: Ref<any>) {
        const useProgressIndicator = useContext(IndicatorContext) as UseProgressIndicator<I, C, K>;
        const { useProgressIndicatorProps, ...info } = useProgressIndicator({
            managedChild: { flags },
            progress: { max, value, valueText },
            subInfo
        });

        useImperativeHandle(ref!, () => info);

        return render(info, useProgressIndicatorProps);
    })

    export const ProgressLabel = memoForwardRef(function ProgressLabel<I extends Element, C, K extends string>({
        render,
        subInfo,
        flags
    }: ProgressLabelProps<I, C, K>, ref?: Ref<any>) {
        const useProgressLabel = useContext(LabelContext) as UseProgressLabel<I, C, K>;
        const { useProgressLabelProps, ...info } = useProgressLabel({
            managedChild: { flags },
            subInfo
        });

        useImperativeHandle(ref!, () => info);

        return render(info, useProgressLabelProps);
    })

    export const ProgressRegion = memoForwardRef(function ProgressRegion<I extends Element, C, K extends string>({
        render,
        subInfo,
        flags
    }: ProgressRegionProps<I, C, K>, ref?: Ref<any>) {
        const useProgressRegion = useContext(RegionContext) as UseProgressRegion<I, C, K>;
        const { useProgressRegionProps, ...info } = useProgressRegion({
            managedChild: { flags },
            subInfo
        });

        useImperativeHandle(ref!, () => info);

        return render(info, useProgressRegionProps);
    })
    */ /*
    function defaultRenderRadioGroup<V extends string | number, GroupElement extends Element, GroupLabelElement extends Element, TabbableChildElement extends Element>({ tagGroup, tagLabel, makePropsGroup, makePropsLabel }: { tagLabel: ElementToTag<GroupLabelElement>, tagGroup: ElementToTag<GroupElement>, makePropsLabel: (info: UseRadioGroupReturnType<V, GroupElement, GroupLabelElement, TabbableChildElement>) => h.JSX.HTMLAttributes<GroupLabelElement>, makePropsGroup: (info: UseRadioGroupReturnType<V, GroupElement, GroupLabelElement, TabbableChildElement>) => h.JSX.HTMLAttributes<GroupElement> }) {
        return function (info: UseRadioGroupReturnType<V, GroupElement, GroupLabelElement, TabbableChildElement>) {
            return (
                <>
                    {createElement(tagLabel as never, (makePropsLabel(info)))}
                    {createElement(tagGroup as never, (makePropsGroup(info)))}
                </>
            )
        }
    }*/var RadioContext=B$2(null);var RadioGroup=memoForwardRef(function RadioGroup(_ref122,ref){var{render,name,onSelectedValueChange,collator,disableArrowKeys,disableHomeEndKeys,navigationDirection,noTypeahead,typeaheadTimeout,ariaLabel,compare,staggered,getIndex,navigatePastEnd,navigatePastStart,selectedValue,untabbable,onTabbableIndexChange,pageNavigationSize}=_ref122;var info=useRadioGroup({linearNavigationParameters:{navigationDirection,navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},staggeredChildrenParameters:{staggered:staggered||false},labelParameters:{ariaLabel},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},radioGroupParameters:{name,onSelectedValueChange,selectedValue},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)}// childrenHaveFocusParameters: {  },
//        singleSelectionParameters: {  }
});A(ref,()=>info);return o$1(RadioContext.Provider,{value:info.context,children:render(info)});});/*export interface DefaultRenderRadioParameters<LP extends LabelPosition, V extends string | number, I extends Element, IL extends Element, TCE extends Element> extends DefaultRenderCheckboxLikeParameters<I, IL, UseRadioReturnType<LP, V, I, IL, TCE, RadioSubInfo<TCE, V>>> {

    }*/ /*
    export function defaultRenderRadio<V extends string | number, I extends HTMLElement, IL extends HTMLElement, TCE extends I | IL>({ tagInput, tagLabel, makePropsInput, makePropsLabel, labelPosition }: DefaultRenderRadioParameters<V, I, IL, TCE>) {
        return defaultRenderCheckboxLike<I, IL, UseRadioReturnType<V, I, IL, TCE, RadioSubInfo<TCE, V>>>({ labelPosition, tagInput, tagLabel, makePropsInput, makePropsLabel });
    }
    */var Radio=memoForwardRef(function Radio(_ref123,ref){var{disabled,index,render,value,ariaLabel,exclude,focusSelf,labelPosition,onPressSync,hidden,tagInput,tagLabel,getText}=_ref123;var context=q(RadioContext);console.assert(context!=null,"This Radio is not contained within a RadioGroup");var getValue=useStableGetter(value);var defaultFocusSelf=()=>info.checkboxLikeReturn.focusSelf();var info=useRadio({//listNavigationParameters: { text },
managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue:getValue},radioParameters:{value},checkboxLikeParameters:{disabled:disabled!==null&&disabled!==void 0?disabled:false},completeListNavigationChildParameters:{getValue},context,labelParameters:{ariaLabel,labelPosition,tagInput,tagLabel},pressParameters:{exclude,focusSelf:focusSelf!==null&&focusSelf!==void 0?focusSelf:defaultFocusSelf,onPressSync},singleSelectionChildParameters:{disabled:!!disabled},textContentParameters:{getText:useDefault("getText",getText)}//rovingTabIndexParameters: { hidden, focusSelf, noModifyTabIndex },
//hasFocusParameters: { getDocument, getWindow, onActiveElementChange, onElementChange, onFocusedChanged, onFocusedInnerChanged, onLastActiveElementChange, onLastFocusedChanged, onLastFocusedInnerChanged, onMount, onUnmount, onWindowFocusedChange },
//subInfoParameters: {  },
//singleSelectionParameters: { unselectable, focusSelf }
});A(ref,()=>info);//    const { useRadioInputProps } = useRadioInput({ tag: tagInput });
//    const { useRadioLabelProps } = useRadioLabel({ tag: tagLabel });
return render(info);});var SliderThumbContext=B$2(null);var Slider=memoForwardRef(function Slider(_ref124,ref){var{max,min,onAfterChildLayoutEffect,onChildrenMountChange,children}=_ref124;var info=useSlider({managedChildrenParameters:{onAfterChildLayoutEffect,onChildrenMountChange},sliderParameters:{max,min}});A(ref,()=>info);return o$1(SliderThumbContext.Provider,{value:info.context,children:children});});var SliderThumb=memoForwardRef(function SliderThumbU(_ref125,ref){var{label,tag,value,max,min,onValueChange,index,render,valueText}=_ref125;var context=q(SliderThumbContext);console.assert(context!=null,"This SliderThumb is not contained within a Slider");var info=useSliderThumb({context,managedChildParameters:{index},sliderThumbParameters:{label,tag,value,max,min,onValueChange,valueText}//subInfo
});A(ref,()=>info);return render(info);});//const LocationContext = createContext<"head" | "body" | "foot">(null!);
var TableContext=B$2(null);var TableSectionContext=B$2(null);var TableRowContext=B$2(null);//const TableRowContext = createContext<UseTableRow<any, any, any, any, any, any>>(null!);
//const TableCellContext = createContext<UseTableCell<any, any, any>>(null!);
/*
    function defaultRenderTable<TableElement extends Element, LabelElement extends Element>({ tagTable, makePropsTable }: { tagTable: ElementToTag<TableElement>, makePropsTable: (info: UseTableReturnType<TableElement, LabelElement>) => h.JSX.HTMLAttributes<TableElement> }) {
        return function (info: UseTableReturnType<TableElement, LabelElement>) {
            return createElement(tagTable as never, (makePropsTable(info)));
        }
    }

    function defaultRenderTableSection<TableBodyElement extends Element, RowElement extends Element, CellElement extends Element, RM extends TableRowInfo<RowElement, CellElement>, CM extends TableCellInfo<CellElement>>({ tagTableBody, makePropsTableBody }: { tagTableBody: ElementToTag<TableBodyElement>, makePropsTableBody: (info: UseTableSectionReturnType<TableBodyElement, RowElement, CellElement, RM, CM>) => h.JSX.HTMLAttributes<TableBodyElement> }) {
        return function (info: UseTableSectionReturnType<TableBodyElement, RowElement, CellElement, RM, CM>, modifyPropsTableBody: PropModifier<TableBodyElement>) {
            return createElement(tagTableBody as never, modifyPropsTableBody(makePropsTableBody(info)));
        }
    }*/ /*
    export function defaultRenderTableHead<TableHeadElement extends Element>({ tagTableHead, makePropsTableHead }: { tagTableHead: ElementToTag<TableHeadElement>, makePropsTableHead: () => h.JSX.HTMLAttributes<TableHeadElement> }) {
        return function (modifyPropsTableHead: PropModifier<TableHeadElement>) {
            return createElement(tagTableHead as never, modifyPropsTableHead(makePropsTableHead()));
        }
    }

    export function defaultRenderTableFoot<TableFootElement extends Element>({ tagTableFoot, makePropsTableFoot }: { tagTableFoot: ElementToTag<TableFootElement>, makePropsTableFoot: () => h.JSX.HTMLAttributes<TableFootElement> }) {
        return function (modifyPropsTableFoot: PropModifier<TableFootElement>) {
            return createElement(tagTableFoot as never, modifyPropsTableFoot(makePropsTableFoot()));
        }
    }*/ /*
    function defaultRenderTableRow<RowElement extends Element, CellElement extends Element, RM extends TableRowInfo<RowElement, CellElement>, CM extends TableCellInfo<CellElement>>({ tagTableRow, makePropsTableRow }: { tagTableRow: ElementToTag<RowElement>, makePropsTableRow: (info: UseTableRowReturnType<RowElement, CellElement, RM, CM>) => h.JSX.HTMLAttributes<RowElement> }) {
        return function (info: UseTableRowReturnType<RowElement, CellElement, RM, CM>, modifyPropsTableRow: PropModifier<RowElement>) {
            return createElement(tagTableRow as never, modifyPropsTableRow(makePropsTableRow(info)));
        }
    }

    function defaultRenderTableCell<CellElement extends Element, CM extends TableCellInfo<CellElement>>({ tagTableCell, makePropsTableCell }: { tagTableCell: ElementToTag<CellElement>, makePropsTableCell: (info: UseTableCellReturnType<CellElement, CM>) => h.JSX.HTMLAttributes<CellElement> }) {
        return function (info: UseTableCellReturnType<CellElement, CM>) {
            return createElement(tagTableCell as never, (makePropsTableCell(info)));
        }
    }*/var Table=memoForwardRef(function TableU(_ref126,ref){var{ariaLabel,selectionLimit,tagTable,render}=_ref126;var info=useTable({labelParameters:{ariaLabel},tableParameters:{selectionLimit,tagTable}});A(ref,()=>info);return o$1(TableContext.Provider,{value:info.context,children:render(info)});});var TableSection=memoForwardRef(function TableSection(_ref127){var{disableArrowKeys,disableHomeEndKeys,getIndex,initiallySelectedIndex,untabbable,navigatePastEnd,navigatePastStart,onSelectedIndexChange,onTabbableColumnChange,onTabbableIndexChange,pageNavigationSize,paginationMax,paginationMin,staggered,render,location,tagTableSection}=_ref127;var info=useTableSection({gridNavigationParameters:{onTabbableColumnChange:onTabbableColumnChange!==null&&onTabbableColumnChange!==void 0?onTabbableColumnChange:null},staggeredChildrenParameters:{staggered:staggered||false},linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},paginatedChildrenParameters:{paginationMax:paginationMax!==null&&paginationMax!==void 0?paginationMax:null,paginationMin:paginationMin!==null&&paginationMin!==void 0?paginationMin:null},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},singleSelectionParameters:{initiallySelectedIndex:initiallySelectedIndex!==null&&initiallySelectedIndex!==void 0?initiallySelectedIndex:null,onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null},context:q(TableContext),tableSectionParameters:{tagTableSection,location}});return o$1(TableSectionContext.Provider,{value:info.context,children:render(info)});});/*
    export const TableBody = memoForwardRef(function TableBodyU<SectionElement extends Element, RowElement extends Element, Cellement extends Element, CR = undefined, CC = undefined, KR extends string = never>({ render }: TableBodyProps<SectionElement, RowElement, Cellement, CR, CC, KR>, ref?: Ref<any>) {
        const { useTableBodyProps, ...sectionInfo } = useContext(TableBodyContext)({});

        useImperativeHandle(ref!, () => sectionInfo);

        return <LocationContext.Provider value="body">{render(sectionInfo, useTableBodyProps)}</LocationContext.Provider>
    })

    export const TableHead = memoForwardRef(function TableHeadU<T extends Element>({ render, tagTableHead }: TableHeadProps<T>) {
        const useTableSectionPropsBase = useContext(TableSectionContext);
        const useTableSectionProps: PropModifier<T> = (props) => useTableSectionPropsBase(tagTableHead, "head", props);
        return <LocationContext.Provider value="head">{(render(useTableSectionProps))}</LocationContext.Provider>
    })

    export const TableFoot = memoForwardRef(function TableFootU<T extends Element>({ render, tagTableFoot }: TableFootProps<T>) {
        const useTableSectionPropsBase = useContext(TableSectionContext);
        const useTableSectionProps: PropModifier<T> = (props) => useTableSectionPropsBase(tagTableFoot, "foot", props);
        return <LocationContext.Provider value="foot">{(render(useTableSectionProps))}</LocationContext.Provider>
    })*/var TableRow=memoForwardRef(function TableRowU(_ref128,ref){var{index,getText,tagTableRow,disableArrowKeys,disableHomeEndKeys,onTabbableIndexChange,ariaPropName,disabled,navigatePastEnd,navigatePastStart,selected,selectionMode,hidden,render}=_ref128;var cx1=q(TableSectionContext);console.assert(cx1!=null,"This TableRow is not contained within a TableSection");var info=useTableRow({rowAsChildOfGridParameters:{completeGridNavigationRowParameters:{},context:cx1,managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},singleSelectionChildParameters:{ariaPropName,selectionMode:useDefault("selectionMode",selectionMode),disabled:disabled!==null&&disabled!==void 0?disabled:false},textContentParameters:{getText:useDefault("getText",getText)}},rowAsParentOfCellsParameters:{linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap"},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null}},tableRowParameters:{selected:selected!==null&&selected!==void 0?selected:null,tagTableRow}});A(ref,()=>info);return o$1(TableRowContext.Provider,{value:info.context,children:render(info)});});var TableCell=memoForwardRef(function TableCell(_ref129,ref){var{index,getText,focusSelf,hidden,tagTableCell,render,colSpan,getSortValue}=_ref129;var context=q(TableRowContext);console.assert(context!=null,"This TableCell is not contained within a TableRow");var defaultFocusSelf=useStableCallback(e=>{var _e$focus6;(_e$focus6=e.focus)===null||_e$focus6===void 0?void 0:_e$focus6.call(e);},[]);var info=useTableCell({completeGridNavigationCellParameters:{getSortValue,focusSelf:focusSelf!==null&&focusSelf!==void 0?focusSelf:defaultFocusSelf},context,gridNavigationCellParameters:{colSpan:colSpan!==null&&colSpan!==void 0?colSpan:1},managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},tableCellParameters:{tagTableCell},textContentParameters:{getText:useDefault("getText",getText)}/* listNavigation: { text },
             managedChild: { index, flags },
             rovingTabIndex: { focusSelf, hidden, noModifyTabIndex },
             hasFocus: { getDocument, getWindow, onActiveElementChange, onElementChange, onFocusedChanged, onFocusedInnerChanged, onLastActiveElementChange, onLastFocusedChanged, onLastFocusedInnerChanged, onMount, onUnmount, onWindowFocusedChange },
             subInfo,
             tableCell: {
                 value,
                 headerType,
                 tagTableCell,
                 location: useContext(LocationContext)
             }*/});A(ref,()=>info);return render(info);});var TabsContext=B$2(null);var TabPanelsContext=B$2(null);var Tabs=memoForwardRef(function Tabs(_ref130,ref){var{ariaLabel,collator,compare,disableArrowKeys,disableHomeEndKeys,getIndex,initiallySelectedIndex,navigatePastEnd,navigatePastStart,noTypeahead,onSelectedIndexChange,onTabbableIndexChange,orientation,staggered,pageNavigationSize,localStorageKey,//groupingType,
untabbable,typeaheadTimeout,role,render}=_ref130;var info=useTabs({labelParameters:{ariaLabel},staggeredChildrenParameters:{staggered:staggered||false},linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable!==null&&untabbable!==void 0?untabbable:false},singleSelectionParameters:{initiallySelectedIndex:initiallySelectedIndex!==null&&initiallySelectedIndex!==void 0?initiallySelectedIndex:0,onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null},sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},tabsParameters:{orientation,role,localStorageKey:localStorageKey!==null&&localStorageKey!==void 0?localStorageKey:null},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)}});var{contextPanels,contextTabs}=info;A(ref,()=>info);return o$1(TabsContext.Provider,{value:contextTabs,children:o$1(TabPanelsContext.Provider,{value:contextPanels,children:render(info)})});});var Tab=memoForwardRef(function Tab(_ref131,ref){var{disabled,exclude,focusSelf,hidden,index,onPressSync,getText,getSortValue,render}=_ref131;var context=q(TabsContext);console.assert(context!=null,"This Tab is not contained within a Tabs component");var focusSelfDefault=T$1(e=>{e===null||e===void 0?void 0:e.focus();},[]);var info=useTab({completeListNavigationChildParameters:{},context,rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue},managedChildParameters:{index},pressParameters:{exclude,focusSelf:focusSelf!==null&&focusSelf!==void 0?focusSelf:focusSelfDefault,onPressSync},singleSelectionChildParameters:{disabled:disabled!==null&&disabled!==void 0?disabled:false,selectionMode:"focus"},textContentParameters:{getText:useDefault("getText",getText)}});A(ref,()=>info);return render(info);});function TabPanel(_ref132){var{index,render}=_ref132;var context=q(TabPanelsContext);var info=useTabPanel({context,managedChildParameters:{index}});return render(info);}/*export function defaultRenderToasts({}: {}) {
        return function (args: UseToastsReturnTypeInfo, props: h.JSX.HTMLAttributes<ContainerType>) {
            return (
            <div>

            </div>
            )
        }
    }*/var ToastContext=B$2(null);var Toasts=memoForwardRef(function Toasts(_ref133,ref){var{onAfterChildLayoutEffect,onChildrenMountChange,render,visibleCount}=_ref133;var info=useToasts({managedChildrenParameters:{onAfterChildLayoutEffect,onChildrenMountChange},toastsParameters:{visibleCount}});A(ref,()=>info);return o$1(ToastContext.Provider,{value:info.context,children:render(info)});});var Toast=memoForwardRef(function Toast(_ref134,ref){var{render,index,timeout,politeness}=_ref134;var context=q(ToastContext);console.assert(context!=null,"This Toast was not rendered within a Toasts provider");var info=useToast({managedChildParameters:{index},toastParameters:{timeout,politeness},context});A(ref,()=>info);return render(info);});var ToolbarContext=B$2(null);var Toolbar=memoForwardRef(function ToolbarU(_ref135,ref){var{render,role,collator,disableArrowKeys,disableHomeEndKeys,untabbable,compare,getIndex,navigatePastEnd,navigatePastStart,pageNavigationSize,selectedIndex,onSelectedIndexChange,orientation,noTypeahead,onTabbableIndexChange,typeaheadTimeout,staggered,ariaLabel}=_ref135;var listboxReturnType=useToolbar({rearrangeableChildrenParameters:{getIndex:useDefault("getIndex",getIndex)},singleSelectionDeclarativeParameters:{selectedIndex:selectedIndex!==null&&selectedIndex!==void 0?selectedIndex:null},sortableChildrenParameters:{compare:compare!==null&&compare!==void 0?compare:null},linearNavigationParameters:{disableArrowKeys:useDefault("disableArrowKeys",disableArrowKeys),disableHomeEndKeys:useDefault("disableHomeEndKeys",disableHomeEndKeys),navigatePastEnd:navigatePastEnd!==null&&navigatePastEnd!==void 0?navigatePastEnd:"wrap",navigatePastStart:navigatePastStart!==null&&navigatePastStart!==void 0?navigatePastStart:"wrap",pageNavigationSize:useDefault("pageNavigationSize",pageNavigationSize)},toolbarParameters:{orientation,role:role!==null&&role!==void 0?role:"toolbar",onSelectedIndexChange:onSelectedIndexChange!==null&&onSelectedIndexChange!==void 0?onSelectedIndexChange:null},staggeredChildrenParameters:{staggered:staggered||false},rovingTabIndexParameters:{onTabbableIndexChange:onTabbableIndexChange!==null&&onTabbableIndexChange!==void 0?onTabbableIndexChange:null,untabbable:untabbable||false},typeaheadNavigationParameters:{collator:useDefault("collator",collator),noTypeahead:useDefault("noTypeahead",noTypeahead),typeaheadTimeout:useDefault("typeaheadTimeout",typeaheadTimeout)},labelParameters:{ariaLabel}});A(ref,()=>listboxReturnType);return o$1(ToolbarContext.Provider,{value:listboxReturnType.context,children:render(listboxReturnType)});});var ToolbarChild=memoForwardRef(function ToolbarChildU(_ref136,ref){var{index,render,ariaPropName,disabled,exclude,onPressSync,selectionMode,focusSelf,getSortValue,hidden,getText}=_ref136;var context=q(ToolbarContext);console.assert(context!=null,"This ToolbarChild is not contained within a Toolbar");var focusSelfDefault=T$1(e=>{e===null||e===void 0?void 0:e.focus();},[]);var info=useToolbarChild({context,//completeListNavigationChildParameters: subInfo,
completeListNavigationChildParameters:{},pressParameters:{exclude,focusSelf:focusSelf!==null&&focusSelf!==void 0?focusSelf:focusSelfDefault,onPressSync},managedChildParameters:{index},rovingTabIndexChildParameters:{hidden:hidden!==null&&hidden!==void 0?hidden:false},sortableChildParameters:{getSortValue},singleSelectionChildParameters:{ariaPropName,selectionMode,disabled:disabled!==null&&disabled!==void 0?disabled:false},textContentParameters:{getText:useDefault("getText",getText)}});A(ref,()=>info);return o$1(p$1,{children:render(info)});});/*
    export function defaultRenderTooltip<TriggerType extends Element, PopupType extends Element>({ tagTooltip, tagTrigger, makeTooltipProps, makeTriggerProps, portalId }: { portalId: string, tagTrigger: ElementToTag<TriggerType>, tagTooltip: ElementToTag<PopupType>, makeTriggerProps: (info: UseTooltipReturnType<TriggerType, PopupType>) => h.JSX.HTMLAttributes<TriggerType>, makeTooltipProps: (info: UseTooltipReturnType<TriggerType, PopupType>) => h.JSX.HTMLAttributes<PopupType> }) {
        return function (info: UseTooltipReturnType<TriggerType, PopupType>) {
            return (
                <>
                    {createElement(tagTrigger as never, makeTriggerProps(info))}
                    {defaultRenderPortal({
                        portalId,
                        children: createElement(tagTooltip as never, makeTooltipProps(info))
                    })}
                </>
            )
        }
    }*/var Tooltip=memoForwardRef(function TooltipU(_ref137,ref){var{focusDelay,mouseoutToleranceDelay,mouseoverDelay,getWindow,parentDepth,render,tooltipSemanticType}=_ref137;var defaultParentDepth=q(ParentDepthContext);var myDepth=(parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth)+1;var info=useTooltip({escapeDismissParameters:{getWindow:useDefault("getWindow",getWindow),parentDepth:parentDepth!==null&&parentDepth!==void 0?parentDepth:defaultParentDepth},tooltipParameters:{focusDelay,mouseoutToleranceDelay,mouseoverDelay,tooltipSemanticType}});A(ref,()=>info);return o$1(ParentDepthContext.Provider,{value:myDepth,children:render(info)});});function DemoAccordion(_ref138){var{children}=_ref138;return o$1(Accordion,{navigationDirection:"vertical",render:_info=>{return o$1("div",{id:"accordion-demo",children:children});}});}var DemoAccordionSection=R(function DemoAccordionSection(_ref139){var{index,body,heading,disabled,open}=_ref139;return o$1(AccordionSection,{index:index,tagButton:"button",open:open,disabled:disabled,render:info=>o$1(Heading,_objectSpread(_objectSpread({},info.propsHeader),{},{tag:"div",heading:o$1(p$1,{children:[o$1("span",{children:heading}),o$1("button",_objectSpread(_objectSpread({},info.propsHeaderButton),{},{children:"Toggle open"}))]}),children:o$1("p",_objectSpread(_objectSpread({},info.propsBody),{},{hidden:!info.accordionSectionReturn.expanded,children:body}))}))});});function Blurb$f(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/accordion/",children:"In accordance with the ARIA guidelines for Accordion patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["Each section's header and body are linked via ID; the body is ",o$1("code",{children:"labelled-by"})," the header and the header ",o$1("code",{children:"control"}),"s the body."]}),o$1("li",{children:"The header is a button and responds to keyboard, mouse, touch, etc. events, regardless of the element used."}),o$1("li",{children:["If the header element is not a ",o$1("code",{children:"<button>"})," element, it is given that ",o$1("code",{children:"role"}),"."]}),o$1("li",{children:"Up/down & Home/End keys navigate through the list, as does Tab and Shift+Tab"}),o$1("li",{})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:["The ",o$1("code",{children:"render"})," prop each ",o$1("code",{children:"AccordionSection"})," takes must wrap the header button with a ",o$1("a",{href:"https://w3c.github.io/aria/#heading",children:"heading"})," (e.g. ",o$1("code",{children:"h3"}),", or ",o$1("code",{children:"<Heading>"}),"). See the default implementation for an example."]})})]});}function Code$f(){return o$1("code",{children:"<Accordion render={...}>\n    <AccordionSection index={0} render={...} />\n    <AccordionSection index={1} render={...} />\n    <AccordionSection index={2} render={...} />\n</Accordion>"});}function Demo$f(){var[count,setCount]=p(5);return o$1(p$1,{children:[o$1(Blurb$f,{}),o$1(Code$f,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of accordion sections"]}),o$1(DemoAccordion,{children:o$1(p$1,{children:Array.from(function*(){yield o$1(DemoAccordionSection,{index:0,heading:"Accordion section #0",body:"Body content #0",disabled:false});yield o$1(DemoAccordionSection,{index:1,heading:"Accordion section #1",body:"Body content #1",disabled:false});yield o$1(DemoAccordionSection,{index:2,heading:"Accordion section #2 (disabled)",body:"Body content #2",disabled:true});yield o$1(DemoAccordionSection,{index:3,heading:"Accordion section #3 (forced open)",body:"Body content #3",disabled:false,open:true});yield o$1(DemoAccordionSection,{index:4,heading:"Accordion section #4 (forced closed)",body:"Body content #4",disabled:false,open:false});for(var _i10=5;_i10<count;++_i10){yield o$1(DemoAccordionSection,{index:_i10,heading:"Accordion section #".concat(_i10),body:"BodyContent #".concat(_i10),disabled:false});}}()).slice(0,count)})})]});}function Blurb$e(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/button/",children:"In accordance with the ARIA guidelines for Button patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["Whether using an actual ",o$1("code",{children:"<button>"}),", or something else like a ",o$1("code",{children:"<div>"}),", the proper roles and event handlers will be applied."]}),o$1("li",{children:"Buttons can be toggled (pressed or unpressed)."}),o$1("li",{children:["The button responds to keyboard, mouse, touch, etc. events, regardless of the element used.",o$1("ul",{children:[o$1("li",{children:"Double-clicks do not select text, but text is still selectable without it counting as a press/click"}),o$1("li",{children:"When Enter is pressed, the button is immediately activated"}),o$1("li",{children:"When Space is pressed, the button is activated once released"}),o$1("li",{children:"iOS Safari properly focuses the button"})]})]})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:["If your button contains only an icon (or other non-descriptive content, etc.), you must provide an ",o$1("code",{children:"aria-label"})," manually stating what happens when the button is pressed."]})})]});}function Code$e(){return o$1("code",{children:"<Button tag=\"button\">Button</Button>\n    <Button tag=\"div\">Div</Button>"});}function Demo$e(){var[pressed,setPressed]=useState(false);return o$1(p$1,{children:[o$1(Blurb$e,{}),o$1(Code$e,{}),o$1(DemoButton,{disabled:false,tag:"button"}),o$1(DemoButton,{disabled:"soft",tag:"button"}),o$1(DemoButton,{disabled:"hard",tag:"button"}),o$1(DemoButton,{disabled:false,tag:"div"}),o$1(DemoButton,{disabled:"soft",tag:"div"}),o$1(DemoButton,{disabled:"hard",tag:"div"}),o$1(Button,{exclude:undefined,tagButton:"button",pressed:pressed,onPress:e=>{var _e$EventDetail$presse;return setPressed((_e$EventDetail$presse=e[EventDetail].pressed)!==null&&_e$EventDetail$presse!==void 0?_e$EventDetail$presse:false);},render:info=>o$1("button",_objectSpread(_objectSpread({},info.props),{},{children:"Toggle button (".concat(pressed?"pressed":"unpressed",")")}))})]});}function DemoButton(_ref140){var{tag,disabled}=_ref140;var onPress=()=>{alert("Button clicked");};return o$1(Button,{disabled:disabled,tagButton:tag,onPress:onPress,render:info=>o$1("button",_objectSpread(_objectSpread({},info.props),{},{children:"".concat(tag," ").concat(disabled?" disabled (".concat(disabled=="soft"?"soft":"hard",")"):"")}))});}/*function DemoButton({ tag, ...props }: { tag: string } & RenderableProps<{}>) {
        return <Button disabled={disabled} onPress={onPress} pressed={} {...props} tag={tag as any}   />
    }*/function Blurb$d(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/",children:"In accordance with the ARIA guidelines for Checkbox patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:"Toggles between checked and unchecked when pressed (clicked, Enter pressed, Space released, etc.)"}),o$1("li",{children:["Can be ",o$1("code",{children:"mixed"})," instead, though ",o$1("code",{children:"onInput"})," will only ever be called with ",o$1("code",{children:"true"})," or ",o$1("code",{children:"false"})]}),o$1("li",{children:["Supports using ",o$1("code",{children:"<input>"}),"s and ",o$1("code",{children:"<label>"}),"s, as well as just plain ol' ",o$1("code",{children:"<div>"}),"s on either/both"]}),o$1("li",{children:"The checkbox and label can be sibling elements, like normal, or the label can wrap the input for a larger hit area. In all cases, the appropriate roles/event handlers will be applied to each element."}),o$1("li",{children:"When selecting the text of a checkbox's label, this does not change the checkbox's state"}),o$1("li",{children:"Double-clicking the label checks & un-checks the checkbox instead of selecting the label's text"}),o$1("li",{children:"Checkbox groups (with a tri-state parent) are a separate component/hook"})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:["If your checkbox does not have a visible label (achievable by by overriding the ",o$1("code",{children:"render"})," prop and setting ",o$1("code",{children:"labelPosition"})," to be \"separate\"), you must pass ",o$1("code",{children:"aria-label"})," as a prop to the checkbox manually. Not providing one will print an error to the console, but it it not required by the type system."]})})]});}function Code$d(){return o$1("code",{children:"<Checkbox checked={true} labelPosition=\"separate\" tagInput=\"input\" tagLabel=\"label\">Label text</Checkbox>"});}function Demo$d(){var[checked,setChecked]=useState(false);var[disabled,setDisabled]=useState(false);return o$1(p$1,{children:[o$1(Blurb$d,{}),o$1(Code$d,{}),o$1(Checkbox,{checked:disabled,onCheckedChange:e=>setDisabled(e[EventDetail].checked),ariaLabel:null,labelPosition:"separate",tagInput:"input",tagLabel:"label",render:info=>o$1(p$1,{children:[o$1("input",_objectSpread({},info.propsInput)),o$1("label",_objectSpread(_objectSpread({},info.propsLabel),{},{children:"Disabled"}))]})}),o$1(Button,{tagButton:"button",onPress:()=>{setChecked("mixed");},render:info=>o$1("button",_objectSpread(_objectSpread({},info.props),{},{children:"Change to mixed"}))}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"separate",disabled:disabled,tagInput:"input",tagLabel:"label"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"wrapping",disabled:disabled,tagInput:"input",tagLabel:"label"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"wrapping2",disabled:disabled,tagInput:"input",tagLabel:"label"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"separate",disabled:disabled,tagInput:"div",tagLabel:"label"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"wrapping",disabled:disabled,tagInput:"div",tagLabel:"label"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"separate",disabled:disabled,tagInput:"input",tagLabel:"div"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"wrapping",disabled:disabled,tagInput:"input",tagLabel:"div"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"separate",disabled:disabled,tagInput:"div",tagLabel:"div"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"wrapping",disabled:disabled,tagInput:"div",tagLabel:"div"}),o$1(DemoCheckbox$1,{checked:checked,setChecked:setChecked,labelPosition:"hidden",disabled:disabled,tagInput:"input",tagLabel:"label"})]});}function DemoCheckbox$1(_ref141){var{labelPosition,tagInput,tagLabel,disabled,checked,setChecked}=_ref141;//const [checked, setChecked] = useState(false);
return o$1("div",{style:{border:"1px solid black"},children:[o$1(Checkbox,{ariaLabel:null,disabled:disabled,checked:checked,onCheckedChange:e=>setChecked(e[EventDetail].checked),labelPosition:labelPosition=="hidden"?"separate":labelPosition=="wrapping2"?"separate":labelPosition,tagInput:tagInput,tagLabel:tagLabel,render:defaultRenderCheckboxLike({labelPosition:labelPosition=="wrapping2"?"separate":labelPosition,tagInput:tagInput,tagLabel:tagLabel,makePropsInput:info=>useMergedProps(info.propsInput,{"aria-label":labelPosition=="hidden"?"Hidden label (technically separate), ".concat(tagInput," and ").concat(tagLabel," ").concat(checked?"checked":"not checked"):undefined}),makePropsLabel:info=>useMergedProps(info.propsLabel,{children:"".concat(labelPosition,", ").concat(tagInput," and ").concat(tagLabel,", ").concat(checked?"checked":"not checked")})})}),labelPosition=="hidden"&&o$1("div",{children:["(This is not a label -- the actual label is via the ",o$1("code",{children:"aria-label"})," prop)"]})]});}function DemoCheckbox(_ref142){var{index}=_ref142;var[checked,setChecked]=useState(false);var ref=_(null);return o$1(CheckboxGroupChild,{checked:checked,index:index,focusSelf:()=>{var _ref$current;return(_ref$current=ref.current)===null||_ref$current===void 0?void 0:_ref$current.checkboxLikeReturn.focusSelf();},onChangeFromParent:function(){var _ref143=_asyncToGenerator(function*(checked){yield new Promise(resolve=>setTimeout(resolve,Math.random()*2000));setChecked(checked);});return function onChangeFromParent(_x3){return _ref143.apply(this,arguments);};}(),getSortValue:returnNull,//focusSelf={useStableCallback((e) => e.focus())}
render:info=>{return o$1("div",{children:o$1(Checkbox,{ref:ref,checked:checked,disabled:false,ariaLabel:null,onCheckedChange:e=>{setChecked(e[EventDetail].checked);info.checkboxGroupChild.onChildCheckedChange(e[EventDetail].checked);},labelPosition:"separate",tagInput:"input",tagLabel:"label",render:defaultRenderCheckboxLike({labelPosition:"separate",tagInput:"input",tagLabel:"label",makePropsInput:info2=>useMergedProps(info.props,info2.propsInput),makePropsLabel:info2=>_objectSpread({children:"Checkbox #".concat(index)},info2.propsLabel)})})});}});}function Blurb$c(){return o$1(p$1,{children:[o$1("p",{children:["Checkbox groups are an alternative to multi-select lists. There is no role of ",o$1("code",{children:"checkboxgroup"}),", but this aims to be an ARIA-compliant implementation of a checkbox group."]}),o$1("ul",{children:[o$1("li",{children:["All normal ",o$1("code",{children:"Checkbox"})," functionality is supported on each individual checkbox."]}),o$1("li",{children:"The parent checkbox switches between 3 states, remembering the last state that caused it to be \"mixed\"."}),o$1("li",{children:["The parent's \"mixed\" state changes all children back to whatever state the user had most recently created; the distinction is drawn when a child calls ",o$1("code",{children:"onChildCheckedChange"})," during its event handler. This call is what notifies the parent checkbox what to use when switching to that \"mixed\" state."]}),o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:[o$1("code",{children:"aria-controls"})," is set on the parent Checkbox to contain the IDs of all child checkboxes. This has no effect on any technology that I am aware of, but it's there just in case."]})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:[o$1("code",{children:"CheckboxGroupParent"})," has supports child checkboxes being asyncronous (e.g. if each child's ",o$1("code",{children:"onChangeFromParent"})," is async, then the parent's ",o$1("code",{children:"onParentCheckedChange"})," will asyncronously wait for all of them), but you must apply any relevant labelling of this circumstance yourself."]}),o$1("li",{children:["As mentioned, ",o$1("code",{children:"aria-controls"})," basically does nothing. Please ensure you're using good labelling here; it is assumed that the parent checkbox provides sufficient labelling for all the children, which how the demo example identifies these elements. If you have a separate label, you will need to wrap the children in a ",o$1("code",{children:"role=group"})," that references that label by overriding ",o$1("code",{children:"render"}),"."]})]})]});}function Code$c(){return o$1("code",{children:""});}function Demo$c(){var[count,setCount]=useState(5);var[pending,setPending]=useState(false);return o$1(p$1,{children:[o$1(Blurb$c,{}),o$1(Code$c,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of checkboxes"]}),o$1("div",{children:[o$1("p",{children:[o$1("strong",{children:"Note:"})," Each checkbox (in this demo only!) takes a random amount of time to update when modified via the parent checkbox to test async handling."]}),o$1(CheckboxGroup,{navigationDirection:"vertical",render:info2=>{var ref=_(null);return o$1("div",_objectSpread(_objectSpread({},info2.props),{children:o$1(p$1,{children:[o$1(CheckboxGroupParent,{index:0,focusSelf:()=>{var _ref$current2;return(_ref$current2=ref.current)===null||_ref$current2===void 0?void 0:_ref$current2.checkboxLikeReturn.focusSelf();},getSortValue:returnNull,render:info3=>o$1(Checkbox,{ref:ref,disabled:pending,checked:info3.checkboxGroupParentReturn.checked,onCheckedChange:useStableCallback(e=>{setPending(true);info3.checkboxGroupParentReturn.onParentCheckedChange(e).finally(()=>setPending(false));}),ariaLabel:"Parent checkbox",labelPosition:"separate",tagInput:"input",tagLabel:"label",render:defaultRenderCheckboxLike({labelPosition:"separate",makePropsInput:info4=>useMergedProps(info4.propsInput,info3.props),makePropsLabel:info4=>_objectSpread({children:"Parent checkbox"},info4.propsLabel),tagInput:"input",tagLabel:"label"})})}),o$1("div",{style:{display:"flex",flexDirection:"column"},children:o$1(p$1,{children:Array.from(function*(){for(var _i11=0;_i11<count;++_i11){yield o$1(DemoCheckbox,{index:_i11+1},_i11);}}())})})]})}));}})]})]});}var DemoListItem$3=R(function DemoListItem(_ref144){var{index}=_ref144;var[selected,setSelected]=useState(false);var labelText="List item #".concat(index).concat(selected?" (selected)":"");return o$1(ListboxItem,{selected:selected,index:index,disabled:false,ariaPropName:"aria-selected",getSortValue:returnZero,onPressSync:()=>{setSelected(p=>!p);},render:info=>{return o$1("li",_objectSpread(_objectSpread({},info.props),{},{children:labelText}));}});});function Blurb$b(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/listbox/",children:"In accordance with the ARIA guidelines for Listbox patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:"The parent checkbox switches between 3 states, remembering the last state that caused it to be \"mixed\"."}),o$1("li",{children:["The parent checkbox reacts to each child's ",o$1("code",{children:"checked"})," prop and updates its own internal ",o$1("code",{children:"checked"})," attribute (be aware of this if they're asyncronous, as you'll want to ensure they all resolve on the same tick with ",o$1("code",{children:"Promise.all"})," to not clobber the user's inputs)."]}),o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:"Grouping is supported"}),o$1("li",{children:"Sorting/reordering is supported, though not provided by default, as it's mutually exclusive with grouping."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["It is assumed that the parent checkbox provides sufficient labelling for all the children, which how the demo example identifies these elements. If you have a separate label, you will need to wrap the children in a ",o$1("code",{children:"role=group"})," that references that label by overriding ",o$1("code",{children:"render"}),"."]}),o$1("li",{children:["See the caveat above for when each child's ",o$1("code",{children:"onInput"})," takes a variable amount of time to actually update the ",o$1("code",{children:"checked"})," prop, as it can clobber the user's last input when clicking on the parent"]})]})]});}function Code$b(){return o$1("code",{children:""});}function Demo$b(){var[count,setCount]=useState(5);return o$1(p$1,{children:[o$1(Blurb$b,{}),o$1(Code$b,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of list items"]}),o$1("div",{children:o$1(Listbox,{selectedIndex:null,ariaLabel:null,navigationDirection:"vertical",selectionLimit:"multi",render:info=>{return o$1(p$1,{children:[o$1("label",_objectSpread({},info.propsListboxLabel)),o$1("ul",_objectSpread(_objectSpread({},info.propsListbox),{},{children:Array.from(function*(){for(var _i12=0;_i12<count;++_i12){yield o$1(DemoListItem$3,{index:_i12},_i12);}}())}))]});}})})]});}var DemoListItem$2=R(function DemoListItem(_ref145){var{index}=_ref145;return o$1(ListboxItem,{index:index,focusSelf:e=>e.focus(),ariaPropName:"aria-selected",getSortValue:returnZero,disabled:false,selected:null,render:info=>{var selected=info.singleSelectionChildReturn.selected;// defaultRenderListboxSingleItem({ tagListItem: "li", makePropsListItem: ({ singleSelection: { selected } }) => ({ children: `List item #${index}${selected ? " (selected)" : ""}` }) })
return o$1("li",_objectSpread(_objectSpread({},info.props),{},{children:"List item #".concat(index).concat(selected?" (selected)":"")}));}});});function Blurb$a(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/listbox/",children:"In accordance with the ARIA guidelines for Listbox patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["In terms of keyboard navigation and tabbing through elements, a Listbox is considered a ",o$1("strong",{children:"single"})," tab stop; in other words, no matter how many list items there are in a Listbox, it only takes one press of the Tab button to go through it.",o$1("ul",{children:[o$1("li",{children:"When a Listbox is tabbed into, the most recently selected item is given focus"}),o$1("li",{children:"Pressing Tab again navigates out of the listbox; no other list items are tabbable other than the one currently designated."}),o$1("li",{children:"Pressing the arrow keys navigates through the Listbox one item at a time"}),o$1("li",{children:"Pressing the Home/End keys move focus to the first/last items respectively"}),o$1("li",{children:"Typing any sequence of text starts typeahead that navigates to the next item that matches what's being typed"}),o$1("li",{children:"Focus & selection management is as optimized as possible; only two children re-render at a time when focus or selection changes"}),o$1("li",{children:"These apply generally to all composite components with a variable number of children (Tab Lists, Radio Groups, Multi-Select Listboxes etc.)"})]})]}),o$1("li",{children:["Rather than each individual list item knowing whether it is selected or not (as with multi-select lists), here the parent knows the ",o$1("code",{children:"selectedIndex"})," and simply notifies the (max two) relevant children any time it changes."]}),o$1("li",{children:"Grouping is supported"}),o$1("li",{children:"Sorting/reordering is supported. Each group is sorted independently."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:"Listboxes do not support interactive content within them (e.g. a dropdown menu), as ARIA specifies that this is a different pattern."})})]});}function Code$a(){return o$1("code",{children:""});}function ListboxDemo(_ref146){var{count,label}=_ref146;var[selectedIndex,setSelectedIndex]=useState(null);return o$1(Listbox,{selectedIndex:selectedIndex,onSelectedIndexChange:setSelectedIndex,render:info=>{return o$1(p$1,{children:[o$1("label",_objectSpread(_objectSpread({},info.propsListboxLabel),{},{children:label})),o$1("ol",_objectSpread(_objectSpread({},info.propsListbox),{},{children:Array.from(function*(){for(var _i13=0;_i13<count;++_i13){yield o$1(DemoListItem$2,{index:_i13},_i13);}}())}))]});},ariaLabel:null,navigationDirection:"vertical",selectionLimit:"single"});}function Demo$a(){var[count,setCount]=useState(5);return o$1(p$1,{children:[o$1(Blurb$a,{}),o$1(Code$a,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of list items"]}),o$1("div",{children:o$1(ListboxDemo,{count:count,label:"Single-select listbox demo without groups"})}),o$1("div",{children:o$1(GroupedListbox,{navigationDirection:"vertical",selectionLimit:"single",ariaLabel:null,render:info=>{return o$1(p$1,{children:[o$1("label",_objectSpread(_objectSpread({},info.propsListboxLabel),{},{children:"Single-select listbox demo with groups"})),o$1("div",_objectSpread(_objectSpread({},info.propsListbox),{},{children:[o$1(ListboxDemo,{count:count,label:"Group #0"}),o$1(ListboxDemo,{count:count,label:"Group #1"}),o$1(ListboxDemo,{count:count,label:"Group #2"})]}))]});}})})]});}function DemoListItem$1(_ref147){var{index}=_ref147;return o$1(MenuItem,{index:index,ariaPropName:null,getSortValue:returnZero,selectionMode:"disabled",role:"menuitem",onPress:e=>alert("Menu item #".concat(e[EventDetail].index," pressed")),disabled:false,render:info=>o$1("li",_objectSpread(_objectSpread({},info.props),{},{children:"Menu item #".concat(index)}))});}function Blurb$9(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/listbox/",children:"In accordance with the ARIA guidelines for Listbox patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:"When opened, the menu will focus the first element within it. When closed (by pressing escape, pressing the button again, or tabbing out of the menu), the button that opened it will have focus restored to it."}),o$1("li",{children:"When the menu is closed because another element on the page was focused instead, focus will not be modified."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:["Unlike most components, the label of a menu is implicitly the button that opens it and is not a separate, standalone element. If this button doesn't label the menu well, you must use the ",o$1("code",{children:"ariaLabel"})," prop to compensate."]})})]});}function Code$9(){return o$1("code",{children:""});}function Demo$9(){var[count,setCount]=useState(5);var[open,setOpen]=useState(false);return o$1(p$1,{children:[o$1(Blurb$9,{}),o$1(Code$9,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of menu items"]}),o$1("div",{children:o$1(Menu,{orientation:"vertical",onOpen:()=>setOpen(true),onClose:()=>setOpen(false),open:open,openDirection:"down",render:info=>{return o$1(p$1,{children:[o$1("button",_objectSpread(_objectSpread({},info.propsTrigger),{},{onClick:()=>setOpen(o=>!o),children:"Menu trigger"})),defaultRenderPortal({portalId:"portal",children:o$1("div",_objectSpread(_objectSpread({},info.propsSurface),{},{hidden:!open,children:o$1("ul",_objectSpread(_objectSpread({},info.propsTarget),{},{children:Array.from(function*(){for(var _i14=0;_i14<count;++_i14){yield o$1("div",{children:o$1(DemoListItem$1,{index:_i14},_i14)});}}())}))}))})]});}/*defaultRenderMenu({
                            tagButton: "button",
                            tagMenu: "ul",
                            tagSentinel: "div",
                            tagSurface: "div",
                            portalId: "portal",
                            makePropsButton: () => ({ children: "Open menu" + (open ? " (open)" : " (closed)") }),
                            makePropsMenu: () => ({
                                children: <>{Array.from((function* () {
                                    for (let i = 0; i < count; ++i) {
                                        yield <div><DemoListItem index={i} key={i} /></div>
                                    }
                                })())}</>
                            }),
                            makePropsSurface: () => ({ style: { display: !open ? "none" : undefined } }),
                            makePropsSentinel: () => ({}),
                        })*/})})]});}var DemoRadioButton=R(function DemoRadioButton(_ref148){var{index}=_ref148;return o$1("div",{children:o$1(Radio,{index:index,focusSelf:e=>e.focus(),disabled:false,labelPosition:"separate",value:index,tagInput:"input",tagLabel:"label",ariaLabel:null,render:info=>{return o$1(p$1,{children:[o$1("input",_objectSpread(_objectSpread({},info.propsInput),{},{name:"radio-demo"})),o$1("label",_objectSpread(_objectSpread({},info.propsLabel),{},{children:["Radio #",index]}))]});}})});});function Blurb$8(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/radiobutton/",children:"In accordance with the ARIA guidelines for Radio Button patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:"The input & label support the same text-selection affordances as Checkboxes (labels can be selected, but double-clicking doesn't select the text and selecting text doesn't count as an input)"}),o$1("li",{children:"Selection state is handled by the parent; instead of specifying whether any given radio button is checked or not, the parent notifies each child of the necessary changes."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["If your checkbox does not have a visible label (achievable by by overriding the ",o$1("code",{children:"render"})," prop and setting ",o$1("code",{children:"labelPosition"})," to be \"separate\"), you must pass ",o$1("code",{children:"aria-label"})," as a prop to the checkbox manually. Not providing one will print an error to the console, but it it not required by the type system."]}),o$1("li",{children:["The above also applies to the radio group as a whole; ARIA requires that all Radio Buttons be contained within an element with a specific role which is labelled either by an element (handled for you) or ",o$1("code",{children:"aria-label"})," (specified by you manually on the input)."]})]})]});}function Code$8(){return o$1("code",{children:""});}function Demo$8(){var[selectedIndex,setSelectedIndex]=useState(null);var[count,setCount]=useState(5);return o$1(p$1,{children:[o$1(Blurb$8,{}),o$1(Code$8,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of radio buttons"]}),o$1("div",{children:o$1(RadioGroup,{name:"radio-demo",ariaLabel:null,selectedValue:selectedIndex,navigationDirection:"vertical",onSelectedValueChange:setSelectedIndex,render:info=>{return o$1(p$1,{children:[o$1("label",_objectSpread(_objectSpread({},info.propsRadioGroupLabel),{},{children:"Radio group demo"})),o$1("div",_objectSpread(_objectSpread({},info.propsRadioGroup),{},{children:Array.from(function*(){for(var _i15=0;_i15<count;++_i15){yield o$1(DemoRadioButton,{index:_i15},_i15);}}())}))]});}})})]});}function DemoSliderThumb(_ref149){var{index}=_ref149;var[value,setValue]=useState(0);return o$1(SliderThumb,{index:index,tag:"input",label:"Slider thumb #".concat(index),value:value,onValueChange:e=>setValue(e[EventDetail].value),min:0,max:10,render:info=>{return o$1("input",_objectSpread({},info.propsSliderThumb));}});}function Blurb$7(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/listbox/",children:"In accordance with the ARIA guidelines for Listbox patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:["The children are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]}),o$1("li",{children:"When opened, the menu will focus the first element within it. When closed (by pressing escape, pressing the button again, or tabbing out of the menu), the button that opened it will have focus restored to it."}),o$1("li",{children:"When the menu is closed because another element on the page was focused instead, focus will not be modified."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:"TODO"})})]});}function Code$7(){return o$1("code",{children:""});}function Demo$7(){var[count,setCount]=useState(5);return o$1(p$1,{children:[o$1(Blurb$7,{}),o$1(Code$7,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of slider thumbs"]}),o$1("div",{children:o$1(Slider,{min:0,max:10,children:o$1(p$1,{children:Array.from(function*(){for(var _i16=0;_i16<count;++_i16){yield o$1("div",{children:o$1(DemoSliderThumb,{index:_i16},_i16)});}}())})})})]});}function Blurb$6(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/dialogmodal/",children:"In accordance with the ARIA guidelines for Modal Dialog patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:"Dialogs block all other elements on the page from receiving focus/interaction and being perceivable to screen readers."}),o$1("li",{children:"Dialogs can be dismissed by pressing Escape or clicking the element designated as the backdrop, both of which can be cancelled/ignored if you need"}),o$1("li",{children:"When opened, the dialog will focus its title or body content as appropriate, however read below under Things Not Handled for caveats."}),o$1("li",{children:"When closed for any reason, the element that was responsible for opening the dialog will be focused."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["By default, when opened, a dialog will focus its body content or title content depending on ",o$1("code",{children:"bodyIsOnlySemantic"}),", which indicates that the dialog's body contains no interactive elements. This may not be suitable for all situations."]}),o$1("li",{children:["It is ",o$1("em",{children:"hightly"})," recommended to override ",o$1("code",{children:"focusSelf"})," for all dialogs you create, and have it focus whatever element makes the most sense for your particular dialog.",o$1("ul",{children:[o$1("li",{children:"Dialogs that act like a form should focus the first interactive element"}),o$1("li",{children:"Dialogs that perform destructive actions should focus the \"Cancel\" button"}),o$1("li",{children:"In some cases, it's best to focus the first paragraph of the body."})]}),"In all cases, consider that the first focused element will both be how keyboard users interact with the dialog, but also the first thing a screen reader will read aloud."]})]})]});}function Code$6(){return o$1("code",{children:""});}function Demo$6(){var[open,setOpen]=useState(false);//const r = useCallback((...args: any[]) => { console.log(...args); }, []);
return o$1(p$1,{children:[o$1(Blurb$6,{}),o$1(Code$6,{}),o$1("div",{children:o$1(Dialog,{open:open,onClose:()=>setOpen(false),closeOnBackdrop:true,closeOnEscape:true,focusOpener:e=>{e.focus();},parentDepth:0,focusPopup:(e,f)=>{var _f;(_f=f())===null||_f===void 0?void 0:_f.focus();},ariaLabel:null,render:info=>{return o$1(p$1,{children:[o$1("button",_objectSpread(_objectSpread({},info.propsSource),{},{onClick:()=>setOpen(o=>!o),children:"Open dialog"})),defaultRenderPortal({portalId:"portal",children:o$1("div",_objectSpread(_objectSpread({},info.propsFocusContainer),{},{hidden:!open,children:o$1("div",_objectSpread(_objectSpread({},info.propsDialog),{},{children:[o$1("div",_objectSpread(_objectSpread({},info.propsTitle),{},{children:"Dialog title"})),o$1("div",{children:"Dialog body"}),o$1("button",{onClick:()=>setOpen(false),children:"Close dialog"})]}))}))})]});}})})]});}function Blurb$5(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/",children:"In accordance with the ARIA guidelines for Tab and Tab Panel patterns,"})," this widget supports the following:"]}),o$1("ul",{children:o$1("li",{children:["The tabs are treated as a composite component with list navigation; see ",o$1("code",{children:"AiraSingleSelectList"})," for more information"]})}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:"TODO"})})]});}function Code$5(){return o$1("code",{children:""});}function Demo$5(){var[count,setCount]=useState(5);//const [selectedIndex, setSelectedIndex] = useState(0 as number | null);
return o$1(p$1,{children:[o$1(Blurb$5,{}),o$1(Code$5,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of tabs"]}),o$1("div",{children:o$1(Tabs,{ariaLabel:null,orientation:"horizontal",render:info=>{/*
                            defaultRenderTabs({
                            panels: Array.from((function* () {
                                for (let i = 0; i < count; ++i) {
                                    yield <DemoTabPanel i={i} />
                                }
                            })()),
                            tagLabel: "label",
                            tagList: "ul",
                            makePropsLabel: () => ({ children: "Tabs example" }),
                            makePropsList: () => ({
                                children: <>
                                    {Array.from((function* () {
                                        for (let i = 0; i < count; ++i) {
                                            yield <DemoTab i={i} />
                                        }
                                    })())}
                                </>
                            })
                        })
                            
                            */return o$1(p$1,{children:[o$1("label",_objectSpread(_objectSpread({},info.propsLabel),{},{children:"Tabs example"})),o$1("ul",_objectSpread(_objectSpread({},info.propsContainer),{},{style:{display:"flex"},children:Array.from(function*(){for(var _i17=0;_i17<count;++_i17){yield o$1(DemoTab,{i:_i17});}}())})),o$1("div",{children:Array.from(function*(){for(var _i18=0;_i18<count;++_i18){yield o$1(DemoTabPanel,{i:_i18});}}())})]});}})})]});}var DemoTab=R(function DemoTab(_ref150){var{i}=_ref150;return o$1(Tab,{focusSelf:e=>e.focus(),index:i,render:info=>{var _info$singleSelection;return o$1("li",_objectSpread(_objectSpread({},info.props),{},{style:{marginLeft:"2em"},children:["Tab #",i," (offset: ",(_info$singleSelection=info.singleSelectionChildReturn.selectedOffset)!==null&&_info$singleSelection!==void 0?_info$singleSelection:"null",") ",info.singleSelectionChildReturn.selected&&"(visible)"]}));},getSortValue:returnZero},i);});var DemoTabPanel=R(function DemoTabPanel(_ref151){var{i}=_ref151;return o$1(TabPanel,{index:i,render:info=>{var _info$tabPanelReturn$;return o$1("div",_objectSpread(_objectSpread({},info.props),{},{hidden:!info.tabPanelReturn.visible,children:["Tab panel #",i," (offset: ",(_info$tabPanelReturn$=info.tabPanelReturn.visibleOffset)!==null&&_info$tabPanelReturn$!==void 0?_info$tabPanelReturn$:"null",")"]}));}},i);});function Blurb$4(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/tooltip/",children:"Tooltips have yet to be well defined in many areas"}),", but this implementation aims to support common use cases:"]}),o$1("ul",{children:[o$1("li",{children:"Hovering or focusing the trigger element shows the tooltip"}),o$1("li",{children:"The tooltip stays shown when it itself is hovered/focused as well, so that the text inside can be selected"}),o$1("li",{children:"Moving the mouse between the trigger and the tooltip has some tolerance associated with immediately hiding the tooltip."}),o$1("li",{children:"Hovering, focusing, and re-hovering can each have a custom delay associated with it"})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["You must ensure that either the tooltip contains a focusable element (a button, link, ",o$1("code",{children:"<div tabIndex=\"-1\" />"}),", etc.)"]}),o$1("li",{children:"Long presses on mobile devices are not yet handled (e.g. a long press on a button triggers a tooltip but does not activate the button)"})]})]});}function Code$4(){return o$1("code",{children:""});}function Demo$4(){return o$1(p$1,{children:[o$1(Blurb$4,{}),o$1(Code$4,{}),o$1("div",{children:["The following text triggers a tooltip: ",o$1(Tooltip,{tooltipSemanticType:"description",render:info=>{return o$1(p$1,{children:[o$1("span",_objectSpread(_objectSpread({tabIndex:0},info.propsTrigger),{},{children:"Tooltip-triggering text that is hoverable and focusable: "})),defaultRenderPortal({portalId:"portal",children:o$1("div",_objectSpread(_objectSpread({},info.propsPopup),{},{hidden:!info.tooltipReturn.isOpen,children:"This text describes the triggering text in more detail."}))})]});}})]})]});}function Blurb$3(){return o$1(p$1,{children:[o$1("p",{children:o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/alert/",children:"Toasts (aka snackbars) are implemented using the Alert pattern."})}),o$1("ul",{children:[o$1("li",{children:"Pushing a toasts causes its contents to be shown visibly (and audibly with a screen reader)"}),o$1("li",{children:"Only new toasts are announced"}),o$1("li",{children:"Toasts are shown as soon as they are pushed, but you can control the maximum number shown at once with"}),o$1("li",{children:"Toasts can be dismissed in any order"}),o$1("li",{children:"Toasts can be set to auto-dismiss."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:"Auto-dismiss behavior is very situational. An auto-dismissed toast should only refer to information that can be viewed elsewhere; \"X files deleted\" can be double-checked in the Recycle Bin, \"X has logged in\" which you can along with everyone else in a tab somewhere, etc. This obviously cannot be checked programmatically."}),o$1("li",{children:"TODO: Focus management related to toasts that have interactive content"}),o$1("li",{children:"TODO: Toasts are still announced even when the current browser tab is hidden instead of saving them for when the user returns"}),o$1("li",{children:"TODO: Toasts still auto-dismiss when they have focus/are being interacted with"})]})]});}function Code$3(){return o$1("code",{children:""});}function Demo$3(){var currentIndex=_(0);var[toasts,setToasts]=useState([]);var pushToast=T$1(()=>{var index=currentIndex.current;currentIndex.current+=1;setToasts(t=>[...t,o$1(Toast,{index:index,render:_ref152=>{var{toastReturn:{dismiss,showing,dismissed,numberOfToastsAheadOfUs}}=_ref152;return o$1("div",{style:showing?{}:{opacity:0.5},children:["This the toast with an index of ",index,". (#",numberOfToastsAheadOfUs," in the queue to be shown). ",o$1("button",{disabled:dismissed,onClick:dismiss,children:"Click to dismiss"})]});},timeout:null},index)]);},[]);return o$1(p$1,{children:[o$1(Blurb$3,{}),o$1(Code$3,{}),o$1("button",{onClick:pushToast,children:"Push a toast"}),o$1("div",{children:o$1(Toasts,{visibleCount:3,render:info=>{return o$1("div",_objectSpread(_objectSpread({},info.props),{},{children:toasts}));}})})]});}function Blurb$2(){return o$1(p$1,{children:[o$1("p",{children:["This is an implementation of an interactive data table that complies with ",o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/table/",children:"the ARIA guidelines for Table patterns"}),"."]}),o$1("ul",{children:[o$1("li",{children:["In terms of keyboard navigation and tabbing through elements, a Table is considered a ",o$1("strong",{children:"single"})," tab stop; in other words, no matter how many cells there are in a table (including if the cells contain interactive elements), it only takes one press of the Tab button to go through it.",o$1("ul",{children:[o$1("li",{children:["Pressing the arrow keys navigates through the cells of the Table. You can override each cell's ",o$1("code",{children:"focusSelf"})," prop to handle child elements."]}),o$1("li",{children:"Most other rules of list navigation apply (as in Listboxes), but in two dimensions."})]})]}),o$1("li",{children:["The body rows are sortable via each cell's ",o$1("code",{children:"value"})," prop. As a result of this, each row must be a ",o$1("em",{children:"direct"})," child of the body, like as a normal array of children with no intervening JSX."]})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["If you don't need all the sorting and focus management and such, there's no reason not to just use the good old ",o$1("code",{children:"<table>"})," element."]}),o$1("li",{children:["It's up to you to make sure that any interactive elements within a table cell respond to focus management properly with the aforementioned ",o$1("code",{children:"focusSelf"})," prop and a properly placed ",o$1("code",{children:["tabIndex=","{","info.rovingTabIndex.tabbable? 0 : -1","}"]})," in the ",o$1("code",{children:"render"})," prop."]})]})]});}function Code$2(){return o$1("code",{children:""});}function DemoInput(_ref153){var{index}=_ref153;var[v,setV]=useState("");return o$1(TableCell,{getSortValue:()=>v,focusSelf:e=>{debugger;e.focus();},tagTableCell:"td",index:index,render:info=>{return o$1("td",_objectSpread(_objectSpread({},info.propsCell),{},{children:o$1("input",_objectSpread(_objectSpread({},info.propsFocus),{},{type:"text",onInput:T$1(e=>{setV(e.currentTarget.value);e.preventDefault();},[]),value:v}))}));/*

                tagTableCell: "td", makePropsTableCell: (info) => ({
                    children: <DemoInput tabbable={info.rovingTabIndex.tabbable} />

                })

                */}});/*
        return (
            <input {...props} type="text" tabIndex={tabbable ? 0 : -1} onInput={useCallback((e: h.JSX.TargetedEvent<HTMLInputElement>) => {
                debugger;
                setV(e.currentTarget.value);
                e.preventDefault();
            }, [])} value={v} />
        )*/}function DemoTableCell(_ref154){var{index,header}=_ref154;var r=_(Math.random());if(header){var text="Header #".concat(index);return o$1(TableCell,{getSortValue:returnZero,focusSelf:e=>e.focus(),tagTableCell:"th",index:index,render:info=>o$1("th",_objectSpread(_objectSpread(_objectSpread({},info.propsFocus),info.propsCell),{},{children:[text,o$1("button",{tabIndex:info.rovingTabIndexChildReturn.tabbable?0:-1,onClick:()=>info.tableCellReturn.sortByThisColumn(),children:"Sort"})]}))});}else{//const text = `Cell in column #${index}`;
switch(index){case 0:return o$1(DemoInput,{index:index});default:return o$1(TableCell,{getSortValue:()=>r.current,focusSelf:e=>e.focus(),tagTableCell:"td",index:index,render:info=>{return o$1("td",_objectSpread(_objectSpread(_objectSpread({},info.propsFocus),info.propsCell),{},{children:r.current.toString()}));}});}}}function Demo$2(){var[count,setCount]=useState(5);return o$1(p$1,{children:[o$1(Blurb$2,{}),o$1(Code$2,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of table rows"]}),o$1("div",{children:o$1(Table,{ariaLabel:null,selectionLimit:"multi",tagTable:"table",render:infoTable=>{return o$1(p$1,{children:[o$1("label",_objectSpread(_objectSpread({},infoTable.propsLabel),{},{children:"Table demo"})),o$1("table",_objectSpread(_objectSpread({},infoTable.propsTable),{},{children:[o$1(TableSection,{tagTableSection:"thead",location:"head",render:infoSection=>{return o$1("thead",_objectSpread(_objectSpread({},infoSection.propsTableSection),{},{children:o$1(TableRow,{index:0,ariaPropName:"aria-selected",tagTableRow:"tr",render:info=>{return o$1("tr",_objectSpread(_objectSpread({},info.props),{},{children:[o$1(DemoTableCell,{header:true,index:0},0),o$1(DemoTableCell,{header:true,index:1},1),o$1(DemoTableCell,{header:true,index:2},2)]}));}})}));}}),o$1(TableSection,{tagTableSection:"tbody",location:"body",render:infoSection=>{return o$1("tbody",_objectSpread(_objectSpread({},infoSection.propsTableSection),{},{children:infoSection.rearrangeableChildrenReturn.useRearrangedChildren(Array.from(function*(){for(var _i19=0;_i19<count;++_i19){yield o$1(TableRow,{ariaPropName:"aria-selected",tagTableRow:"tr",index:_i19,render:infoRow=>{return o$1("tr",_objectSpread(_objectSpread({},infoRow.props),{},{children:[o$1(DemoTableCell,{index:0},0),o$1(DemoTableCell,{index:1},1),o$1(DemoTableCell,{index:2},2)]}));/*
        
        
                                                                        tagTableRow: "tr",
                                                                        makePropsTableRow: () => ({
                                                                            children: <>
                                                                                <DemoTableCell key={0} index={0} />
                                                                                <DemoTableCell key={1} index={1} />
                                                                                <DemoTableCell key={2} index={2} />
                                                                            </>
                                                                        })
                                                                    })
        
                                                                        */}},_i19);}}()))}));}})]}))]});}})})]});}function Blurb$1(){return o$1(p$1,{children:[o$1("p",{children:["Because Listboxes are not allowed to contain interactive content, a Gridlist is semantically a list that ",o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/grid/",children:"complies with the ARIA pattern for grids"}),"."]}),o$1("ul",{children:[o$1("li",{children:"In terms of keyboard navigation and tabbing through elements, a Gridlist is like a Listbox, but in two dimensions, like a Table."}),o$1("li",{children:"The rows of a Gridlist are sortable. It is possible to have multiple, independently sortable sections within the same Gridlist."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:[o$1("li",{children:["It's up to you to make sure that any interactive elements within a Gridlist respond to focus management properly with ",o$1("code",{children:"focusSelf"})," prop and a properly placed ",o$1("code",{children:["tabIndex=","{","info.rovingTabIndex.tabbable? 0 : -1","}"]})," in the ",o$1("code",{children:"render"})," prop."]}),o$1("li",{children:"Any given row in a Gridlist can be marked as selected, but this is up to you to handle manually at the moment"})]})]});}function Code$1(){return o$1("code",{children:""});}function DemoGridlistChild1(_ref155){var{row}=_ref155;var text="Gridlist child "+row;return o$1(GridlistChild,{focusSelf:e=>e.focus(),index:0,render:info=>{return o$1("div",_objectSpread(_objectSpread({},info.props),{},{children:text}));/*
                
                defaultRenderGridlistChild({ tagGridlistChild: "div", makePropsGridlistChild: (_info) => ({ children: text }) })
        
                */}});}function DemoGridlistChild2(_ref156){var{tabbable}=_ref156;var cb=_(null);var[b,setB]=useState(false);return o$1(GridlistChild,{focusSelf:e=>{var _cb$current;debugger;(_cb$current=cb.current)===null||_cb$current===void 0?void 0:_cb$current.checkboxLikeReturn.focusSelf();},index:1,render:info=>{return o$1("div",_objectSpread(_objectSpread({},info.props),{},{children:o$1(Checkbox,{ariaLabel:"Whether this item is selected",ref:cb,labelPosition:"separate",tagInput:"input",tagLabel:"label",checked:b,disabled:false,onCheckedChange:e=>setB(e[EventDetail].checked),render:infoCheckbox=>{return o$1(p$1,{children:o$1("input",_objectSpread({tabIndex:tabbable?0:-1},infoCheckbox.propsInput))});/*
                            defaultRenderCheckbox({ labelPosition: "separate", tagInput: "input", tagLabel: "label", makeInputProps: () => ({ tabIndex: info.rovingTabIndex.tabbable ? 0 : -1 }), makeLabelProps: () => ({ children: "Checkbox" }) })
                            */}})}));/*
                
                defaultRenderGridlistChild<HTMLDivElement>({ tagGridlistChild: "div", makePropsGridlistChild: (info) => ({ children: <Checkbox ref={cb} labelPosition={"separate"} tagInput="input" tagLabel="label" checked={b} disabled={false} getDocument={getDocument} onCheckedChange={e => setB(e[EventDetail].checked)} render={defaultRenderCheckbox({ labelPosition: "separate", tagInput: "input", tagLabel: "label", makeInputProps: () => ({ tabIndex: info.rovingTabIndex.tabbable ? 0 : -1 }), makeLabelProps: () => ({ children: "Checkbox" }) })} /> }) })
        
                */}});}function Demo$1(){var[count,setCount]=useState(5);var[selectedIndex,setSelectedIndex]=useState(null);return o$1(p$1,{children:[o$1(Blurb$1,{}),o$1(Code$1,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of table rows"]}),o$1("div",{children:o$1(Gridlist,{ariaLabel:null,groupingType:"without-groups",selectionLimit:"single",selectedIndex:selectedIndex,onSelectedIndexChange:setSelectedIndex,render:infoGridlist=>{return o$1(p$1,{children:[o$1("label",_objectSpread(_objectSpread({},infoGridlist.propsGridlistLabel),{},{children:"Gridlist demo"})),o$1("ul",_objectSpread(_objectSpread({},infoGridlist.propsGridlist),{},{children:infoGridlist.rearrangeableChildrenReturn.useRearrangedChildren(Array.from(function*(){var _loop=function*(_i20){yield o$1(GridlistRow,{ariaPropName:"aria-selected",selected:null,index:_i20,getSortValue:returnZero,render:info=>{return o$1("li",_objectSpread(_objectSpread({},info.props),{},{children:[o$1(DemoGridlistChild1,{row:_i20}),o$1(DemoGridlistChild2,{tabbable:info.rowAsChildOfGridReturn.rovingTabIndexChildReturn.tabbable})]}));/*

                                                        defaultRenderGridlistRow({
                                                        tagGridlistRow: "div", makePropsGridlistRow: (_info) => ({
                                                            children: [<DemoGridlistChild1 row={i} />, <DemoGridlistChild2 />]
                                                        })
                                                    })
                                                    
                                                        */}});};for(var _i20=0;_i20<count;++_i20){yield*_loop(_i20);}}()))}))]});/*
                            
                            defaultRenderGridlist({
                            tagGridlist: "div", makePropsGridlist: (_info) => ({
                                children: <GridlistSection index={0} compareRows={(lhs, rhs) => lhs - rhs} render={defaultRenderGridlistSection({
                                    tagGridlistSection: "div", makePropsGridlistSection: (_info) => ({
                                        children: Array.from(function* () {
                                            for (let i = 0; i < count; ++i) {
                                                yield (
                                                    <GridlistRow<HTMLDivElement, HTMLDivElement>
                                                        ariaPropName="aria-selected"
                                                        getDocument={getDocument}
                                                        selected={false}
                                                        unselectable={true}
                                                        subInfo={undefined}
                                                        index={i}
                                                        text=""
                                                        render={defaultRenderGridlistRow({
                                                            tagGridlistRow: "div", makePropsGridlistRow: (_info) => ({
                                                                children: [<DemoGridlistChild1 row={i} />, <DemoGridlistChild2 />]
                                                            })
                                                        })} />
                                                )
                                            }
                                        }())
                                    })
                                })} />
                            })
                        })
                            
                            */}})})]});}var DemoListItem=R(function DemoListItem(_ref157){var{index}=_ref157;return o$1(ToolbarChild,{index:index,focusSelf:e=>e.focus(),ariaPropName:"aria-pressed",selectionMode:"activation",getSortValue:returnZero,render:info2=>{return o$1(Button,{tagButton:"button",pressed:false,render:info3=>o$1("button",_objectSpread(_objectSpread({},useMergedProps(info2.props,info3.props)),{},{children:["Toolbar child #",index]}))});}});});function Blurb(){return o$1(p$1,{children:[o$1("p",{children:[o$1("a",{href:"https://www.w3.org/WAI/ARIA/apg/patterns/toolbar/",children:"In accordance with the ARIA guidelines for Toolbar patterns,"})," this widget supports the following:"]}),o$1("ul",{children:[o$1("li",{children:"A Toolbar is a single widget for the purposes of keyboard navigation, like a Listbox."}),o$1("li",{children:"Toolbars are well-suited for \"button group\" patterns as well. Multiple groups can be contained within a single Toolbar, even multiple different types of components."})]}),o$1("p",{children:o$1("strong",{children:["Things ",o$1("em",{children:"not"})," handled:"]})}),o$1("ul",{children:o$1("li",{children:["You must label the Toolbar with ",o$1("code",{children:"aria-label"}),"."]})})]});}function Code(){return o$1("code",{children:""});}function Demo(){var[count,setCount]=useState(5);return o$1(p$1,{children:[o$1(Blurb,{}),o$1(Code,{}),o$1("label",{children:[o$1("input",{type:"number",min:0,value:count,onInput:e=>setCount(e.currentTarget.valueAsNumber)})," # of list items"]}),o$1("div",{children:o$1(Toolbar,{orientation:"horizontal",role:"toolbar",ariaLabel:null,render:info=>o$1(p$1,{children:[o$1("label",_objectSpread(_objectSpread({},info.propsLabel),{},{children:"Toolbar demo"})),o$1("div",_objectSpread(_objectSpread({},info.propsToolbar),{},{children:Array.from(function*(){for(var _i21=0;_i21<count;++_i21){yield o$1(DemoListItem,{index:_i21},_i21);}}())}))]})})})]});}//import { options } from "preact";
//options.debounceRendering = queueMicrotask;
//const RandomWords = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.".split(" ");
setDebugLogging(true);var Component=()=>{return o$1(Heading,{heading:"Demos",children:[o$1(Heading,{heading:"Accordion",children:o$1(Demo$f,{})}),o$1(Heading,{heading:"Button",children:o$1(Demo$e,{})}),o$1(Heading,{heading:"Checkbox",children:o$1(Demo$d,{})}),o$1(Heading,{heading:"Checkbox Group",children:o$1(Demo$c,{})}),o$1(Heading,{heading:"Dialog",children:o$1(Demo$6,{})}),o$1(Heading,{heading:"Gridlist",children:o$1(Demo$1,{})}),o$1(Heading,{heading:"Single-select Listbox",children:o$1(Demo$a,{})}),o$1(Heading,{heading:"Multi-select Listbox",children:o$1(Demo$b,{})}),o$1(Heading,{heading:"Menu",children:o$1(Demo$9,{})}),o$1(Heading,{heading:"Radio",children:o$1(Demo$8,{})}),o$1(Heading,{heading:"Slider",children:o$1(Demo$7,{})}),o$1(Heading,{heading:"Toolbar",children:o$1(Demo,{})}),o$1(Heading,{heading:"Toast",children:o$1(Demo$3,{})}),o$1(Heading,{heading:"Tooltip",children:o$1(Demo$4,{})}),o$1(Heading,{heading:"Tabs",children:o$1(Demo$5,{})}),o$1(Heading,{heading:"Table",children:o$1(Demo$2,{})})]});};requestAnimationFrame(()=>{P$1(o$1(Component,{}),document.getElementById("root"));});})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
