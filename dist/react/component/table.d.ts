import { OmitStrong, VNode } from "preact-prop-helpers";
import { Get, Get12, Get3, Get4, Get5, Get9 } from "../props.js";
import { TableCellInfo, TableRowInfo, TableSectionInfo, UseTableBodyParameters, UseTableBodyReturnType, UseTableCellParameters, UseTableCellReturnType, UseTableHeadParameters, UseTableHeadReturnType, UseTableParameters, UseTableReturnType, UseTableRowOuterParameters, UseTableRowOuterReturnType, UseTableRowParameters, UseTableRowReturnType } from "../use-table.js";
import { GenericComponentProps } from "./util.js";
export type TableProps<TableElement extends Element, RowElement extends Element, LabelElement extends Element> = GenericComponentProps<UseTableReturnType<TableElement, RowElement, LabelElement>, Get12<UseTableParameters<TableElement, RowElement>, "labelParameters", "tableParameters", "singleSelectionParameters", "multiSelectionParameters", "gridNavigationParameters", "linearNavigationParameters", "typeaheadNavigationParameters", "rovingTabIndexParameters", "refElementParameters", "paginatedChildrenParameters", "linearNavigationParameters", "gridNavigationCompleteParameters">, "tagTable">;
export type TableHeadProps<TableSectionElement extends Element> = GenericComponentProps<UseTableHeadReturnType<TableSectionElement>, Get<UseTableHeadParameters<TableSectionElement>, "tableHeadParameters">, "tagHead">;
export type TableBodyProps<TableSectionElement extends Element, RowElement extends Element, RM extends TableRowInfo<RowElement>, RsM extends TableSectionInfo<RowElement>> = GenericComponentProps<UseTableBodyReturnType<TableSectionElement, RowElement, RsM>, Get5<UseTableBodyParameters<TableSectionElement, RowElement, RM, RsM>, "tableSectionParameters", "staggeredChildrenParameters", "rearrangeableChildrenParameters", "paginatedChildrenParameters", "managedChildrenParameters">, "tagTableSection" | "children">;
type TableBodyRowOuterProps<RowElement extends Element, RsM extends TableSectionInfo<RowElement>> = GenericComponentProps<UseTableRowOuterReturnType<RowElement, RsM>, Get3<UseTableRowOuterParameters<RowElement, RsM>, "refElementParameters", "info", "rearrangeableChildParameters">, "index">;
type TableBodyRowInnerProps<RowElement extends Element, CellElement extends Element, RM extends TableRowInfo<RowElement>, CM extends TableCellInfo<CellElement>> = GenericComponentProps<UseTableRowReturnType<RowElement, CellElement, RM, CM>, Get9<UseTableRowParameters<RowElement, CellElement, RM, CM>, "hasCurrentFocusParameters", "linearNavigationParameters", "multiSelectionChildParameters", "rovingTabIndexParameters", "singleSelectionChildParameters", "tableRowParameters", "textContentParameters", "info", "refElementParameters">, "index" | "tagTableRow">;
type TableHeadRowProps<RowElement extends Element, CellElement extends Element, RM extends TableRowInfo<RowElement>, CM extends TableCellInfo<CellElement>> = GenericComponentProps<UseTableRowReturnType<RowElement, CellElement, RM, CM>, Get9<UseTableRowParameters<RowElement, CellElement, RM, CM>, "hasCurrentFocusParameters", "linearNavigationParameters", "multiSelectionChildParameters", "rovingTabIndexParameters", "singleSelectionChildParameters", "tableRowParameters", "textContentParameters", "info", "refElementParameters">, "index" | "tagTableRow">;
export type TableCellProps<CellElement extends Element, CM extends TableCellInfo<CellElement>> = GenericComponentProps<UseTableCellReturnType<CellElement, CM>, Get4<UseTableCellParameters<CellElement, CM>, "textContentParameters", "tableCellParameters", "gridNavigationCellParameters", "info">, "index" | "tagTableCell">;
export declare const Table: <TableElement extends Element, RowElement extends Element, LabelElement extends Element>({ ariaLabel, singleSelectionMode, multiSelectionMode, tagTable, imperativeHandle, render, initiallySingleSelectedIndex, multiSelectionAriaPropName, onSelectionChange, onSingleSelectedIndexChange, singleSelectionAriaPropName, collator, disableHomeEndKeys, initiallyTabbableColumn, navigatePastEnd, navigatePastStart, noTypeahead, onElementChange, onMount, onNavigateLinear, onNavigateTypeahead, onTabbableColumnChange, onTabbableIndexChange, onUnmount, pageNavigationSize, paginationMax, paginationMin, typeaheadTimeout, untabbable, getSortValueAt, initiallySortedColumn, ...void1 }: TableProps<TableElement, RowElement, LabelElement>) => import("preact").h.JSX.Element;
export declare const TableHead: <TableSectionElement extends Element>({ render, tagHead, imperativeHandle }: TableHeadProps<TableSectionElement>) => import("preact").h.JSX.Element;
export declare const TableBody: <TableSectionElement extends Element, RowElement extends Element>({ render, tagTableSection, children, imperativeHandle, onAfterChildLayoutEffect, onChildrenCountChange, onChildrenMountChange, paginationMax, paginationMin, staggered, }: TableBodyProps<TableSectionElement, RowElement, TableRowInfo<RowElement>, TableSectionInfo<RowElement>>) => import("preact").h.JSX.Element;
export declare const TableHeadRow: <RowElement extends Element, CellElement extends Element>({ render, index, tagTableRow, getText, initiallyMultiSelected, initiallyTabbedIndex, multiSelectionDisabled, navigatePastEnd, navigatePastStart, onCurrentFocusedChanged, onCurrentFocusedInnerChanged, onElementChange, onMount, onMultiSelectChange, onTabbableIndexChange, onTextContentChange, onUnmount, selected, singleSelectionDisabled, untabbable, imperativeHandle }: TableHeadRowProps<RowElement, CellElement, TableRowInfo<RowElement>, TableCellInfo<CellElement>>) => import("preact").h.JSX.Element;
export type TableBodyRowProps<RowElement extends Element, CellElement extends Element, RsM extends TableSectionInfo<RowElement>, RM extends TableRowInfo<RowElement>, CM extends TableCellInfo<CellElement>> = OmitStrong<TableBodyRowOuterProps<RowElement, RsM> & TableBodyRowInnerProps<RowElement, CellElement, RM, CM>, "render"> & {
    render(info: ({
        hide: true;
    } & UseTableRowOuterReturnType<RowElement, RsM>) | ({
        hide: false;
    } & UseTableRowReturnType<RowElement, CellElement, RM, CM>)): VNode;
};
export declare const TableBodyRow: <RowElement extends Element, CellElement extends Element>({ index, render, imperativeHandle, onElementChange, onMount, onUnmount, tagTableRow, getText, initiallyMultiSelected, initiallyTabbedIndex, multiSelectionDisabled, navigatePastEnd, navigatePastStart, onCurrentFocusedChanged, onCurrentFocusedInnerChanged, onMultiSelectChange, onTabbableIndexChange, onTextContentChange, selected, singleSelectionDisabled, untabbable }: TableBodyRowProps<RowElement, CellElement, TableSectionInfo<RowElement>, TableRowInfo<RowElement>, TableCellInfo<CellElement>>) => import("preact").h.JSX.Element;
export declare const TableCell: <CellElement extends Element>({ index, render, colSpan, focusSelf, getText, imperativeHandle, onTextContentChange, tagTableCell, untabbable, ...void1 }: TableCellProps<CellElement, TableCellInfo<CellElement>>) => import("preact").h.JSX.Element;
export {};
//# sourceMappingURL=table.d.ts.map