import { OmitStrong, VNode } from "preact-prop-helpers";
import { Get12, Get16, Get3, Get4 } from "../props.js";
import { UseGridlistCellInfo, UseGridlistCellParameters, UseGridlistCellReturnType, UseGridlistParameters, UseGridlistReturnType, UseGridlistRowInfo, UseGridlistRowOuterParameters, UseGridlistRowOuterReturnType, UseGridlistRowParameters, UseGridlistRowReturnType, UseGridlistRowsInfo } from "../use-gridlist.js";
import { GenericComponentProps } from "./util.js";
export type GridlistProps<TableElement extends Element, RowElement extends Element, LabelElement extends Element> = GenericComponentProps<UseGridlistReturnType<TableElement, RowElement, LabelElement>, Get16<UseGridlistParameters<TableElement, RowElement>, "labelParameters", "singleSelectionParameters", "multiSelectionParameters", "gridNavigationParameters", "linearNavigationParameters", "typeaheadNavigationParameters", "rovingTabIndexParameters", "refElementParameters", "paginatedChildrenParameters", "rearrangeableChildrenParameters", "linearNavigationParameters", "paginatedChildrenParameters", "staggeredChildrenParameters", "managedChildrenParameters", "singleSelectionDeclarativeParameters", "gridNavigationCompleteParameters">, "children">;
type GridlistRowOuterProps<RowElement extends Element, RsM extends UseGridlistRowsInfo<RowElement>> = GenericComponentProps<UseGridlistRowOuterReturnType<RowElement, RsM>, Get3<UseGridlistRowOuterParameters<RowElement, RsM>, "info", "refElementParameters", "rearrangeableChildParameters">, "index">;
type GridlistRowInnerProps<RowElement extends Element, CellElement extends Element, RM extends UseGridlistRowInfo<RowElement>, CM extends UseGridlistCellInfo<CellElement>> = GenericComponentProps<UseGridlistRowReturnType<RowElement, CellElement, RM, CM>, Get12<UseGridlistRowParameters<RowElement, CellElement, RM, CM>, "info", "refElementParameters", "rovingTabIndexParameters", "refElementParameters", "multiSelectionChildParameters", "multiSelectionChildDeclarativeParameters", "linearNavigationParameters", "hasCurrentFocusParameters", "typeaheadNavigationParameters", "textContentParameters", "singleSelectionChildParameters", "rovingTabIndexParameters">, "index">;
type GridlistCellProps<CellElement extends Element, CM extends UseGridlistCellInfo<CellElement>> = GenericComponentProps<UseGridlistCellReturnType<CellElement, CM>, Get4<UseGridlistCellParameters<CellElement, CM>, "info", "pressParameters", "gridNavigationCellParameters", "textContentParameters">, "index">;
export type GridlistRowProps<RowElement extends Element, CellElement extends Element, RsM extends UseGridlistRowsInfo<RowElement> = UseGridlistRowsInfo<RowElement>, RM extends UseGridlistRowInfo<RowElement> = UseGridlistRowInfo<RowElement>, CM extends UseGridlistCellInfo<CellElement> = UseGridlistCellInfo<CellElement>> = OmitStrong<GridlistRowOuterProps<RowElement, RsM>, "render"> & OmitStrong<GridlistRowInnerProps<RowElement, CellElement, RM, CM>, "render"> & {
    render: ((info: ({
        hide: true;
    } & UseGridlistRowOuterReturnType<RowElement, RsM>) | ({
        hide: false;
    } & UseGridlistRowReturnType<RowElement, CellElement, RM, CM>)) => VNode);
};
export declare function Gridlist<TableElement extends Element, RowElement extends Element, LabelElement extends Element>({ render, ariaLabel, collator, disableHomeEndKeys, focusSelfParent, imperativeHandle, initiallyTabbableColumn, multiSelectionAriaPropName, multiSelectionMode, navigatePastEnd, navigatePastStart, noTypeahead, onElementChange, onLabelClick, onMount, onNavigateLinear, onNavigateTypeahead, onSelectionChange, onTabbableColumnChange, onTabbableIndexChange, onUnmount, pageNavigationSize, paginationMax, paginationMin, singleSelectionAriaPropName, singleSelectionMode, typeaheadTimeout, untabbable, children, staggered, onAfterChildLayoutEffect, onChildrenCountChange, onChildrenMountChange, onSingleSelectedIndexChange, singleSelectedIndex, getSortColumn, getSortValueAt, ...void1 }: GridlistProps<TableElement, RowElement, LabelElement>): import("preact").h.JSX.Element;
export declare function GridlistRow<RowElement extends Element, CellElement extends Element>(props: GridlistRowProps<RowElement, CellElement>): import("preact").h.JSX.Element;
export declare function GridlistCell<CellElement extends Element>({ index, render, getText, imperativeHandle, onTextContentChange, untabbable, allowRepeatPresses, colSpan, excludeEnter, excludePointer, excludeSpace, focusSelf, longPressThreshold, onPressSync, onPressingChange }: GridlistCellProps<CellElement, UseGridlistCellInfo<CellElement>>): import("preact").h.JSX.Element;
export {};
//# sourceMappingURL=gridlist.d.ts.map